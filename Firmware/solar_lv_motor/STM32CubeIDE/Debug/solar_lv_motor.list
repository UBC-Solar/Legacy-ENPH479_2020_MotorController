
solar_lv_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fe8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800a1b8  0800a1b8  0001a1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6ec  0800a6ec  00020740  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6ec  0800a6ec  0001a6ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6f4  0800a6f4  00020740  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6f4  0800a6f4  0001a6f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6f8  0800a6f8  0001a6f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000740  20000000  0800a6fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000066c  20000740  0800ae3c  00020740  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dac  0800ae3c  00020dac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020740  2**0
                  CONTENTS, READONLY
 12 .debug_line   00036364  00000000  00000000  00020770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   000517d5  00000000  00000000  00056ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000074fa  00000000  00000000  000a82a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018c0  00000000  00000000  000af7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f5409  00000000  00000000  000b1068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000038f0  00000000  00000000  001a6478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    0001e89d  00000000  00000000  001a9d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002c2d5  00000000  00000000  001c8605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000d2  00000000  00000000  001f48da  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000526c  00000000  00000000  001f49ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000740 	.word	0x20000740
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a1a0 	.word	0x0800a1a0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000744 	.word	0x20000744
 800020c:	0800a1a0 	.word	0x0800a1a0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b96e 	b.w	8000fbc <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468c      	mov	ip, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8083 	bne.w	8000e0e <__udivmoddi4+0x116>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	d947      	bls.n	8000d9e <__udivmoddi4+0xa6>
 8000d0e:	fab2 f282 	clz	r2, r2
 8000d12:	b142      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d14:	f1c2 0020 	rsb	r0, r2, #32
 8000d18:	fa24 f000 	lsr.w	r0, r4, r0
 8000d1c:	4091      	lsls	r1, r2
 8000d1e:	4097      	lsls	r7, r2
 8000d20:	ea40 0c01 	orr.w	ip, r0, r1
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d30:	fa1f fe87 	uxth.w	lr, r7
 8000d34:	fb08 c116 	mls	r1, r8, r6, ip
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4a:	f080 8119 	bcs.w	8000f80 <__udivmoddi4+0x288>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8116 	bls.w	8000f80 <__udivmoddi4+0x288>
 8000d54:	3e02      	subs	r6, #2
 8000d56:	443b      	add	r3, r7
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d60:	fb08 3310 	mls	r3, r8, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	193c      	adds	r4, r7, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8105 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d7a:	45a6      	cmp	lr, r4
 8000d7c:	f240 8102 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d80:	3802      	subs	r0, #2
 8000d82:	443c      	add	r4, r7
 8000d84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	b11d      	cbz	r5, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c5 4300 	strd	r4, r3, [r5]
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	b902      	cbnz	r2, 8000da2 <__udivmoddi4+0xaa>
 8000da0:	deff      	udf	#255	; 0xff
 8000da2:	fab2 f282 	clz	r2, r2
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	d150      	bne.n	8000e4c <__udivmoddi4+0x154>
 8000daa:	1bcb      	subs	r3, r1, r7
 8000dac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db0:	fa1f f887 	uxth.w	r8, r7
 8000db4:	2601      	movs	r6, #1
 8000db6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dba:	0c21      	lsrs	r1, r4, #16
 8000dbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0xe2>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	f200 80e9 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1ac9      	subs	r1, r1, r3
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000de8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x10c>
 8000df4:	193c      	adds	r4, r7, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x10a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80d9 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e7bf      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0x12e>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80b1 	beq.w	8000f7a <__udivmoddi4+0x282>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x1cc>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0x140>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80b8 	bhi.w	8000fa8 <__udivmoddi4+0x2b0>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	468c      	mov	ip, r1
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0a8      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000e46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e4a:	e7a5      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000e4c:	f1c2 0320 	rsb	r3, r2, #32
 8000e50:	fa20 f603 	lsr.w	r6, r0, r3
 8000e54:	4097      	lsls	r7, r2
 8000e56:	fa01 f002 	lsl.w	r0, r1, r2
 8000e5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e5e:	40d9      	lsrs	r1, r3
 8000e60:	4330      	orrs	r0, r6
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e68:	fa1f f887 	uxth.w	r8, r7
 8000e6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e74:	fb06 f108 	mul.w	r1, r6, r8
 8000e78:	4299      	cmp	r1, r3
 8000e7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e7e:	d909      	bls.n	8000e94 <__udivmoddi4+0x19c>
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e86:	f080 808d 	bcs.w	8000fa4 <__udivmoddi4+0x2ac>
 8000e8a:	4299      	cmp	r1, r3
 8000e8c:	f240 808a 	bls.w	8000fa4 <__udivmoddi4+0x2ac>
 8000e90:	3e02      	subs	r6, #2
 8000e92:	443b      	add	r3, r7
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	b281      	uxth	r1, r0
 8000e98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ea0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea4:	fb00 f308 	mul.w	r3, r0, r8
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d907      	bls.n	8000ebc <__udivmoddi4+0x1c4>
 8000eac:	1879      	adds	r1, r7, r1
 8000eae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eb2:	d273      	bcs.n	8000f9c <__udivmoddi4+0x2a4>
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d971      	bls.n	8000f9c <__udivmoddi4+0x2a4>
 8000eb8:	3802      	subs	r0, #2
 8000eba:	4439      	add	r1, r7
 8000ebc:	1acb      	subs	r3, r1, r3
 8000ebe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ec2:	e778      	b.n	8000db6 <__udivmoddi4+0xbe>
 8000ec4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ec8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ecc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ed0:	431c      	orrs	r4, r3
 8000ed2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ede:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ee2:	431f      	orrs	r7, r3
 8000ee4:	0c3b      	lsrs	r3, r7, #16
 8000ee6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eea:	fa1f f884 	uxth.w	r8, r4
 8000eee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ef2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ef6:	fb09 fa08 	mul.w	sl, r9, r8
 8000efa:	458a      	cmp	sl, r1
 8000efc:	fa02 f206 	lsl.w	r2, r2, r6
 8000f00:	fa00 f306 	lsl.w	r3, r0, r6
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x220>
 8000f06:	1861      	adds	r1, r4, r1
 8000f08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f0c:	d248      	bcs.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f0e:	458a      	cmp	sl, r1
 8000f10:	d946      	bls.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f12:	f1a9 0902 	sub.w	r9, r9, #2
 8000f16:	4421      	add	r1, r4
 8000f18:	eba1 010a 	sub.w	r1, r1, sl
 8000f1c:	b2bf      	uxth	r7, r7
 8000f1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f2a:	fb00 f808 	mul.w	r8, r0, r8
 8000f2e:	45b8      	cmp	r8, r7
 8000f30:	d907      	bls.n	8000f42 <__udivmoddi4+0x24a>
 8000f32:	19e7      	adds	r7, r4, r7
 8000f34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f38:	d22e      	bcs.n	8000f98 <__udivmoddi4+0x2a0>
 8000f3a:	45b8      	cmp	r8, r7
 8000f3c:	d92c      	bls.n	8000f98 <__udivmoddi4+0x2a0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	4427      	add	r7, r4
 8000f42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f46:	eba7 0708 	sub.w	r7, r7, r8
 8000f4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f4e:	454f      	cmp	r7, r9
 8000f50:	46c6      	mov	lr, r8
 8000f52:	4649      	mov	r1, r9
 8000f54:	d31a      	bcc.n	8000f8c <__udivmoddi4+0x294>
 8000f56:	d017      	beq.n	8000f88 <__udivmoddi4+0x290>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x27a>
 8000f5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f66:	40f2      	lsrs	r2, r6
 8000f68:	ea4c 0202 	orr.w	r2, ip, r2
 8000f6c:	40f7      	lsrs	r7, r6
 8000f6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f72:	2600      	movs	r6, #0
 8000f74:	4631      	mov	r1, r6
 8000f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e70b      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6fd      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f88:	4543      	cmp	r3, r8
 8000f8a:	d2e5      	bcs.n	8000f58 <__udivmoddi4+0x260>
 8000f8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f90:	eb69 0104 	sbc.w	r1, r9, r4
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7df      	b.n	8000f58 <__udivmoddi4+0x260>
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e7d2      	b.n	8000f42 <__udivmoddi4+0x24a>
 8000f9c:	4660      	mov	r0, ip
 8000f9e:	e78d      	b.n	8000ebc <__udivmoddi4+0x1c4>
 8000fa0:	4681      	mov	r9, r0
 8000fa2:	e7b9      	b.n	8000f18 <__udivmoddi4+0x220>
 8000fa4:	4666      	mov	r6, ip
 8000fa6:	e775      	b.n	8000e94 <__udivmoddi4+0x19c>
 8000fa8:	4630      	mov	r0, r6
 8000faa:	e74a      	b.n	8000e42 <__udivmoddi4+0x14a>
 8000fac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb0:	4439      	add	r1, r7
 8000fb2:	e713      	b.n	8000ddc <__udivmoddi4+0xe4>
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	443c      	add	r4, r7
 8000fb8:	e724      	b.n	8000e04 <__udivmoddi4+0x10c>
 8000fba:	bf00      	nop

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fc6:	e003      	b.n	8000fd0 <LoopCopyDataInit>

08000fc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fcc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fce:	3104      	adds	r1, #4

08000fd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fd0:	480b      	ldr	r0, [pc, #44]	; (8001000 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fd8:	d3f6      	bcc.n	8000fc8 <CopyDataInit>
  ldr  r2, =_sbss
 8000fda:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fdc:	e002      	b.n	8000fe4 <LoopFillZerobss>

08000fde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fe0:	f842 3b04 	str.w	r3, [r2], #4

08000fe4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fe6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fe8:	d3f9      	bcc.n	8000fde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fea:	f004 fcc3 	bl	8005974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fee:	f008 fa71 	bl	80094d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff2:	f000 fd11 	bl	8001a18 <main>
  bx  lr    
 8000ff6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ff8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ffc:	0800a6fc 	.word	0x0800a6fc
  ldr  r0, =_sdata
 8001000:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001004:	20000740 	.word	0x20000740
  ldr  r2, =_sbss
 8001008:	20000740 	.word	0x20000740
  ldr  r3, = _ebss
 800100c:	20000dac 	.word	0x20000dac

08001010 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001010:	e7fe      	b.n	8001010 <BusFault_Handler>
	...

08001014 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001014:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001016:	2300      	movs	r3, #0
{
 8001018:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800101e:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001022:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001026:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	4925      	ldr	r1, [pc, #148]	; (80010c0 <SystemClock_Config+0xac>)
 800102c:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102e:	9302      	str	r3, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001030:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001032:	4a24      	ldr	r2, [pc, #144]	; (80010c4 <SystemClock_Config+0xb0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001034:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8001038:	6408      	str	r0, [r1, #64]	; 0x40
 800103a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800103c:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8001040:	9100      	str	r1, [sp, #0]
 8001042:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	6813      	ldr	r3, [r2, #0]
 8001048:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	6813      	ldr	r3, [r2, #0]
 8001050:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001054:	9301      	str	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001056:	2401      	movs	r4, #1
 8001058:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105c:	2202      	movs	r2, #2
 800105e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001062:	e9cd 4508 	strd	r4, r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001066:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800106a:	9801      	ldr	r0, [sp, #4]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
 800106c:	2102      	movs	r1, #2
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106e:	2404      	movs	r4, #4
 8001070:	25b4      	movs	r5, #180	; 0xb4
 8001072:	2202      	movs	r2, #2
 8001074:	2302      	movs	r3, #2
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001076:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001078:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 800107c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001080:	9114      	str	r1, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001082:	f005 fbef 	bl	8006864 <HAL_RCC_OscConfig>
 8001086:	b108      	cbz	r0, 800108c <SystemClock_Config+0x78>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001088:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800108a:	e7fe      	b.n	800108a <SystemClock_Config+0x76>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800108c:	f005 fa90 	bl	80065b0 <HAL_PWREx_EnableOverDrive>
 8001090:	b108      	cbz	r0, 8001096 <SystemClock_Config+0x82>
 8001092:	b672      	cpsid	i
  while (1)
 8001094:	e7fe      	b.n	8001094 <SystemClock_Config+0x80>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001096:	260f      	movs	r6, #15
 8001098:	2702      	movs	r7, #2
 800109a:	2400      	movs	r4, #0
 800109c:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010a4:	a802      	add	r0, sp, #8
 80010a6:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80010ac:	e9cd 4504 	strd	r4, r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010b0:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010b2:	f005 fabb 	bl	800662c <HAL_RCC_ClockConfig>
 80010b6:	b108      	cbz	r0, 80010bc <SystemClock_Config+0xa8>
 80010b8:	b672      	cpsid	i
  while (1)
 80010ba:	e7fe      	b.n	80010ba <SystemClock_Config+0xa6>
}
 80010bc:	b017      	add	sp, #92	; 0x5c
 80010be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40007000 	.word	0x40007000

080010c8 <state000>:
{
 80010c8:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIO_OUT_GPIO_Port, GPIO_OUT_Pin, GPIO_PIN_SET);
 80010ca:	480e      	ldr	r0, [pc, #56]	; (8001104 <state000+0x3c>)
	sprintf(msg_debug, "State %hu\r\n", state);
 80010cc:	4c0e      	ldr	r4, [pc, #56]	; (8001108 <state000+0x40>)
	HAL_GPIO_WritePin(GPIO_OUT_GPIO_Port, GPIO_OUT_Pin, GPIO_PIN_SET);
 80010ce:	2201      	movs	r2, #1
 80010d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010d4:	f005 fa68 	bl	80065a8 <HAL_GPIO_WritePin>
	state = 1; //FSM mode
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <state000+0x44>)
	sprintf(msg_debug, "State %hu\r\n", state);
 80010da:	490d      	ldr	r1, [pc, #52]	; (8001110 <state000+0x48>)
	state = 1; //FSM mode
 80010dc:	2201      	movs	r2, #1
	sprintf(msg_debug, "State %hu\r\n", state);
 80010de:	4620      	mov	r0, r4
	state = 1; //FSM mode
 80010e0:	801a      	strh	r2, [r3, #0]
	sprintf(msg_debug, "State %hu\r\n", state);
 80010e2:	f008 fa23 	bl	800952c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80010e6:	4620      	mov	r0, r4
 80010e8:	f7ff f892 	bl	8000210 <strlen>
 80010ec:	4621      	mov	r1, r4
 80010ee:	b282      	uxth	r2, r0
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295
 80010f4:	4807      	ldr	r0, [pc, #28]	; (8001114 <state000+0x4c>)
 80010f6:	f006 fa3b 	bl	8007570 <HAL_UART_Transmit>
}
 80010fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(250);
 80010fe:	20fa      	movs	r0, #250	; 0xfa
 8001100:	f004 bc96 	b.w	8005a30 <HAL_Delay>
 8001104:	40020800 	.word	0x40020800
 8001108:	20000a44 	.word	0x20000a44
 800110c:	20000774 	.word	0x20000774
 8001110:	0800a1b8 	.word	0x0800a1b8
 8001114:	200009b8 	.word	0x200009b8

08001118 <state202>:
{
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) == 0) {
 800111a:	4e19      	ldr	r6, [pc, #100]	; (8001180 <state202+0x68>)
		sprintf(msg_debug, "No CAN message\r\n");
 800111c:	4d19      	ldr	r5, [pc, #100]	; (8001184 <state202+0x6c>)
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 800111e:	4f1a      	ldr	r7, [pc, #104]	; (8001188 <state202+0x70>)
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) == 0) {
 8001120:	e00d      	b.n	800113e <state202+0x26>
		sprintf(msg_debug, "No CAN message\r\n");
 8001122:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001124:	60eb      	str	r3, [r5, #12]
 8001126:	7823      	ldrb	r3, [r4, #0]
 8001128:	6028      	str	r0, [r5, #0]
 800112a:	6069      	str	r1, [r5, #4]
 800112c:	60aa      	str	r2, [r5, #8]
 800112e:	742b      	strb	r3, [r5, #16]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001130:	4914      	ldr	r1, [pc, #80]	; (8001184 <state202+0x6c>)
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	2210      	movs	r2, #16
 8001138:	4638      	mov	r0, r7
 800113a:	f006 fa19 	bl	8007570 <HAL_UART_Transmit>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) == 0) {
 800113e:	2100      	movs	r1, #0
 8001140:	4630      	mov	r0, r6
 8001142:	f005 f899 	bl	8006278 <HAL_CAN_GetRxFifoFillLevel>
		sprintf(msg_debug, "No CAN message\r\n");
 8001146:	4c11      	ldr	r4, [pc, #68]	; (800118c <state202+0x74>)
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) == 0) {
 8001148:	2800      	cmp	r0, #0
 800114a:	d0ea      	beq.n	8001122 <state202+0xa>
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &CANRxHeader, CANRxData); //Put CAN message data in CANRxData temp variable
 800114c:	4c10      	ldr	r4, [pc, #64]	; (8001190 <state202+0x78>)
 800114e:	4d11      	ldr	r5, [pc, #68]	; (8001194 <state202+0x7c>)
 8001150:	480b      	ldr	r0, [pc, #44]	; (8001180 <state202+0x68>)
 8001152:	462b      	mov	r3, r5
 8001154:	4622      	mov	r2, r4
 8001156:	2100      	movs	r1, #0
 8001158:	f005 f80c 	bl	8006174 <HAL_CAN_GetRxMessage>
	if (CANRxHeader.StdId == CANRXBASEID + 1)
 800115c:	6822      	ldr	r2, [r4, #0]
 800115e:	f240 4301 	movw	r3, #1025	; 0x401
 8001162:	429a      	cmp	r2, r3
 8001164:	d000      	beq.n	8001168 <state202+0x50>
}
 8001166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		CANRx_velocity.velocity_int = CANRxData[0] | (CANRxData[1] << 8) | (CANRxData[2] << 16) | (CANRxData[3] << 24);
 8001168:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <state202+0x80>)
		CANRx_current.current_int   = CANRxData[4] | (CANRxData[5] << 8) | (CANRxData[6] << 16) | (CANRxData[7] << 24);
 800116a:	490c      	ldr	r1, [pc, #48]	; (800119c <state202+0x84>)
		state = 300;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <state202+0x88>)
		CANRx_velocity.velocity_int = CANRxData[0] | (CANRxData[1] << 8) | (CANRxData[2] << 16) | (CANRxData[3] << 24);
 800116e:	682c      	ldr	r4, [r5, #0]
		CANRx_current.current_int   = CANRxData[4] | (CANRxData[5] << 8) | (CANRxData[6] << 16) | (CANRxData[7] << 24);
 8001170:	6868      	ldr	r0, [r5, #4]
		CANRx_velocity.velocity_int = CANRxData[0] | (CANRxData[1] << 8) | (CANRxData[2] << 16) | (CANRxData[3] << 24);
 8001172:	6014      	str	r4, [r2, #0]
		state = 300;
 8001174:	f44f 7296 	mov.w	r2, #300	; 0x12c
		CANRx_current.current_int   = CANRxData[4] | (CANRxData[5] << 8) | (CANRxData[6] << 16) | (CANRxData[7] << 24);
 8001178:	6008      	str	r0, [r1, #0]
		state = 300;
 800117a:	801a      	strh	r2, [r3, #0]
}
 800117c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800117e:	bf00      	nop
 8001180:	200009fc 	.word	0x200009fc
 8001184:	20000a44 	.word	0x20000a44
 8001188:	200009b8 	.word	0x200009b8
 800118c:	0800a1c4 	.word	0x0800a1c4
 8001190:	20000950 	.word	0x20000950
 8001194:	20000870 	.word	0x20000870
 8001198:	200007d4 	.word	0x200007d4
 800119c:	200007c0 	.word	0x200007c0
 80011a0:	20000774 	.word	0x20000774

080011a4 <state405>:
{
 80011a4:	b570      	push	{r4, r5, r6, lr}
	if (currentWDTime - lastWDTime > WDTIMERLIM)
 80011a6:	4b26      	ldr	r3, [pc, #152]	; (8001240 <state405+0x9c>)
 80011a8:	4c26      	ldr	r4, [pc, #152]	; (8001244 <state405+0xa0>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	8822      	ldrh	r2, [r4, #0]
	state = 406;
 80011ae:	4d26      	ldr	r5, [pc, #152]	; (8001248 <state405+0xa4>)
	if (currentWDTime - lastWDTime > WDTIMERLIM)
 80011b0:	1a9b      	subs	r3, r3, r2
 80011b2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
	state = 406;
 80011b6:	f44f 72cb 	mov.w	r2, #406	; 0x196
 80011ba:	802a      	strh	r2, [r5, #0]
	if (currentWDTime - lastWDTime > WDTIMERLIM)
 80011bc:	dd34      	ble.n	8001228 <state405+0x84>
	sprintf(msg_debug, "State %hu\r\n", state);
 80011be:	4c23      	ldr	r4, [pc, #140]	; (800124c <state405+0xa8>)
		CANTx_ErrorFlags |= 1<<20; //Communication fault: 20th bit
 80011c0:	4e23      	ldr	r6, [pc, #140]	; (8001250 <state405+0xac>)
	MC_StopMotor1();
 80011c2:	f001 ff81 	bl	80030c8 <MC_StopMotor1>
	HAL_GPIO_WritePin(FLT_OUT_GPIO_Port, FLT_OUT_Pin, GPIO_PIN_SET); //Set FLT_OUT high, turning on the LED
 80011c6:	4823      	ldr	r0, [pc, #140]	; (8001254 <state405+0xb0>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ce:	f005 f9eb 	bl	80065a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_DIS_GPIO_Port, DRV_DIS_Pin, GPIO_PIN_SET); //Set DRV_DIS high, disabling the FETs
 80011d2:	4821      	ldr	r0, [pc, #132]	; (8001258 <state405+0xb4>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	2102      	movs	r1, #2
 80011d8:	f005 f9e6 	bl	80065a8 <HAL_GPIO_WritePin>
	sprintf(msg_debug, "State %hu\r\n", state);
 80011dc:	882a      	ldrh	r2, [r5, #0]
 80011de:	491f      	ldr	r1, [pc, #124]	; (800125c <state405+0xb8>)
 80011e0:	4620      	mov	r0, r4
 80011e2:	f008 f9a3 	bl	800952c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80011e6:	4620      	mov	r0, r4
 80011e8:	f7ff f812 	bl	8000210 <strlen>
 80011ec:	4621      	mov	r1, r4
 80011ee:	b282      	uxth	r2, r0
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295
 80011f4:	481a      	ldr	r0, [pc, #104]	; (8001260 <state405+0xbc>)
 80011f6:	f006 f9bb 	bl	8007570 <HAL_UART_Transmit>
	HAL_Delay(250);
 80011fa:	20fa      	movs	r0, #250	; 0xfa
 80011fc:	f004 fc18 	bl	8005a30 <HAL_Delay>
		sprintf(msg_debug, "WD timeout\r\n");
 8001200:	4b18      	ldr	r3, [pc, #96]	; (8001264 <state405+0xc0>)
		CANTx_ErrorFlags |= 1<<20; //Communication fault: 20th bit
 8001202:	6835      	ldr	r5, [r6, #0]
		sprintf(msg_debug, "WD timeout\r\n");
 8001204:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	6020      	str	r0, [r4, #0]
 800120a:	6061      	str	r1, [r4, #4]
 800120c:	60a2      	str	r2, [r4, #8]
 800120e:	7323      	strb	r3, [r4, #12]
		CANTx_ErrorFlags |= 1<<20; //Communication fault: 20th bit
 8001210:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001214:	4621      	mov	r1, r4
		CANTx_ErrorFlags |= 1<<20; //Communication fault: 20th bit
 8001216:	6035      	str	r5, [r6, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001218:	4811      	ldr	r0, [pc, #68]	; (8001260 <state405+0xbc>)
}
 800121a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 800121e:	f04f 33ff 	mov.w	r3, #4294967295
 8001222:	220c      	movs	r2, #12
 8001224:	f006 b9a4 	b.w	8007570 <HAL_UART_Transmit>
		lastWDTime = HAL_GetTick();
 8001228:	f004 fbfc 	bl	8005a24 <HAL_GetTick>
		if(((CANTx_ErrorFlags>>20) & 1) == 1) //If error flag was set but no error is still present
 800122c:	4a08      	ldr	r2, [pc, #32]	; (8001250 <state405+0xac>)
		lastWDTime = HAL_GetTick();
 800122e:	8020      	strh	r0, [r4, #0]
		if(((CANTx_ErrorFlags>>20) & 1) == 1) //If error flag was set but no error is still present
 8001230:	6813      	ldr	r3, [r2, #0]
 8001232:	02d9      	lsls	r1, r3, #11
			CANTx_ErrorFlags &= ~(1<<20); //Clear error flag bit if it was previously set
 8001234:	bf44      	itt	mi
 8001236:	f423 1380 	bicmi.w	r3, r3, #1048576	; 0x100000
 800123a:	6013      	strmi	r3, [r2, #0]
}
 800123c:	bd70      	pop	{r4, r5, r6, pc}
 800123e:	bf00      	nop
 8001240:	20000760 	.word	0x20000760
 8001244:	20000768 	.word	0x20000768
 8001248:	20000774 	.word	0x20000774
 800124c:	20000a44 	.word	0x20000a44
 8001250:	2000075c 	.word	0x2000075c
 8001254:	40020000 	.word	0x40020000
 8001258:	40020400 	.word	0x40020400
 800125c:	0800a1b8 	.word	0x0800a1b8
 8001260:	200009b8 	.word	0x200009b8
 8001264:	0800a208 	.word	0x0800a208

08001268 <state406>:
{
 8001268:	b570      	push	{r4, r5, r6, lr}
	state = 407;
 800126a:	4d23      	ldr	r5, [pc, #140]	; (80012f8 <state406+0x90>)
 800126c:	f240 1397 	movw	r3, #407	; 0x197
 8001270:	802b      	strh	r3, [r5, #0]
	if (MC_GetCurrentFaultsMotor1() > 0 || MC_GetOccurredFaultsMotor1() > 0)
 8001272:	f001 ff51 	bl	8003118 <MC_GetCurrentFaultsMotor1>
 8001276:	b918      	cbnz	r0, 8001280 <state406+0x18>
 8001278:	f001 ff48 	bl	800310c <MC_GetOccurredFaultsMotor1>
 800127c:	2800      	cmp	r0, #0
 800127e:	d033      	beq.n	80012e8 <state406+0x80>
	sprintf(msg_debug, "State %hu\r\n", state);
 8001280:	4c1e      	ldr	r4, [pc, #120]	; (80012fc <state406+0x94>)
		CANTx_ErrorFlags |= 1<<19; //Control fault: 19th bit
 8001282:	4e1f      	ldr	r6, [pc, #124]	; (8001300 <state406+0x98>)
	MC_StopMotor1();
 8001284:	f001 ff20 	bl	80030c8 <MC_StopMotor1>
	HAL_GPIO_WritePin(FLT_OUT_GPIO_Port, FLT_OUT_Pin, GPIO_PIN_SET); //Set FLT_OUT high, turning on the LED
 8001288:	481e      	ldr	r0, [pc, #120]	; (8001304 <state406+0x9c>)
 800128a:	2201      	movs	r2, #1
 800128c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001290:	f005 f98a 	bl	80065a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_DIS_GPIO_Port, DRV_DIS_Pin, GPIO_PIN_SET); //Set DRV_DIS high, disabling the FETs
 8001294:	481c      	ldr	r0, [pc, #112]	; (8001308 <state406+0xa0>)
 8001296:	2201      	movs	r2, #1
 8001298:	2102      	movs	r1, #2
 800129a:	f005 f985 	bl	80065a8 <HAL_GPIO_WritePin>
	sprintf(msg_debug, "State %hu\r\n", state);
 800129e:	882a      	ldrh	r2, [r5, #0]
 80012a0:	491a      	ldr	r1, [pc, #104]	; (800130c <state406+0xa4>)
		sprintf(msg_debug, "Control fault\r\n");
 80012a2:	4d1b      	ldr	r5, [pc, #108]	; (8001310 <state406+0xa8>)
	sprintf(msg_debug, "State %hu\r\n", state);
 80012a4:	4620      	mov	r0, r4
 80012a6:	f008 f941 	bl	800952c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80012aa:	4620      	mov	r0, r4
 80012ac:	f7fe ffb0 	bl	8000210 <strlen>
 80012b0:	4621      	mov	r1, r4
 80012b2:	b282      	uxth	r2, r0
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	4816      	ldr	r0, [pc, #88]	; (8001314 <state406+0xac>)
 80012ba:	f006 f959 	bl	8007570 <HAL_UART_Transmit>
	HAL_Delay(250);
 80012be:	20fa      	movs	r0, #250	; 0xfa
 80012c0:	f004 fbb6 	bl	8005a30 <HAL_Delay>
		sprintf(msg_debug, "Control fault\r\n");
 80012c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c6:	6020      	str	r0, [r4, #0]
		CANTx_ErrorFlags |= 1<<19; //Control fault: 19th bit
 80012c8:	6830      	ldr	r0, [r6, #0]
		sprintf(msg_debug, "Control fault\r\n");
 80012ca:	6061      	str	r1, [r4, #4]
 80012cc:	60a2      	str	r2, [r4, #8]
 80012ce:	60e3      	str	r3, [r4, #12]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80012d0:	4621      	mov	r1, r4
		CANTx_ErrorFlags |= 1<<19; //Control fault: 19th bit
 80012d2:	f440 2400 	orr.w	r4, r0, #524288	; 0x80000
 80012d6:	6034      	str	r4, [r6, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80012d8:	480e      	ldr	r0, [pc, #56]	; (8001314 <state406+0xac>)
}
 80012da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
 80012e2:	220f      	movs	r2, #15
 80012e4:	f006 b944 	b.w	8007570 <HAL_UART_Transmit>
		if(((CANTx_ErrorFlags>>19) & 1) == 1) //If error flag was set but no error is still present
 80012e8:	4a05      	ldr	r2, [pc, #20]	; (8001300 <state406+0x98>)
 80012ea:	6813      	ldr	r3, [r2, #0]
 80012ec:	0319      	lsls	r1, r3, #12
			CANTx_ErrorFlags &= ~(1<<19); //Clear error flag bit if it was previously set
 80012ee:	bf44      	itt	mi
 80012f0:	f423 2300 	bicmi.w	r3, r3, #524288	; 0x80000
 80012f4:	6013      	strmi	r3, [r2, #0]
}
 80012f6:	bd70      	pop	{r4, r5, r6, pc}
 80012f8:	20000774 	.word	0x20000774
 80012fc:	20000a44 	.word	0x20000a44
 8001300:	2000075c 	.word	0x2000075c
 8001304:	40020000 	.word	0x40020000
 8001308:	40020400 	.word	0x40020400
 800130c:	0800a1b8 	.word	0x0800a1b8
 8001310:	0800a218 	.word	0x0800a218
 8001314:	200009b8 	.word	0x200009b8

08001318 <state501>:
{
 8001318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (CANRx_velocity.velocity_float > 0)
 800131c:	4c66      	ldr	r4, [pc, #408]	; (80014b8 <state501+0x1a0>)
		userDirectionFlag = 1;
 800131e:	4a67      	ldr	r2, [pc, #412]	; (80014bc <state501+0x1a4>)
	if (CANRx_velocity.velocity_float > 0)
 8001320:	edd4 7a00 	vldr	s15, [r4]
 8001324:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132c:	f340 808c 	ble.w	8001448 <state501+0x130>
		userDirectionFlag = 1;
 8001330:	2301      	movs	r3, #1
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	2102      	movs	r1, #2
 8001336:	2000      	movs	r0, #0
	if (CANTx_mtrVelocity.mtrVelocity_float > 0 && CANTx_mtrVelocity.mtrVelocity_float < NMAX)
 8001338:	4a61      	ldr	r2, [pc, #388]	; (80014c0 <state501+0x1a8>)
 800133a:	edd2 7a00 	vldr	s15, [r2]
 800133e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001346:	dd15      	ble.n	8001374 <state501+0x5c>
 8001348:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80014c4 <state501+0x1ac>
 800134c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001354:	d50e      	bpl.n	8001374 <state501+0x5c>
		mtrDirectionFlag = 1;
 8001356:	4a5c      	ldr	r2, [pc, #368]	; (80014c8 <state501+0x1b0>)
 8001358:	2001      	movs	r0, #1
 800135a:	460b      	mov	r3, r1
 800135c:	6010      	str	r0, [r2, #0]
	if (userDirectionFlag + mtrDirectionFlag == 0)
 800135e:	b99b      	cbnz	r3, 8001388 <state501+0x70>
		CANRx_current.current_float = 0;
 8001360:	485a      	ldr	r0, [pc, #360]	; (80014cc <state501+0x1b4>)
	state = 502;
 8001362:	4a5b      	ldr	r2, [pc, #364]	; (80014d0 <state501+0x1b8>)
		CANRx_velocity.velocity_float = 0;
 8001364:	2300      	movs	r3, #0
	state = 502;
 8001366:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
		CANRx_velocity.velocity_float = 0;
 800136a:	6023      	str	r3, [r4, #0]
		CANRx_current.current_float = 0;
 800136c:	6003      	str	r3, [r0, #0]
	state = 502;
 800136e:	8011      	strh	r1, [r2, #0]
}
 8001370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if(CANTx_mtrVelocity.mtrVelocity_float < 0 && CANTx_mtrVelocity.mtrVelocity_float > -1*NMAX)
 8001374:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		mtrDirectionFlag = -1;
 800137c:	4a52      	ldr	r2, [pc, #328]	; (80014c8 <state501+0x1b0>)
	else if(CANTx_mtrVelocity.mtrVelocity_float < 0 && CANTx_mtrVelocity.mtrVelocity_float > -1*NMAX)
 800137e:	d457      	bmi.n	8001430 <state501+0x118>
		mtrDirectionFlag = 0;
 8001380:	2100      	movs	r1, #0
 8001382:	6011      	str	r1, [r2, #0]
	if (userDirectionFlag + mtrDirectionFlag == 0)
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0eb      	beq.n	8001360 <state501+0x48>
 8001388:	4d50      	ldr	r5, [pc, #320]	; (80014cc <state501+0x1b4>)
	state = 502;
 800138a:	f8df 8144 	ldr.w	r8, [pc, #324]	; 80014d0 <state501+0x1b8>
 800138e:	6828      	ldr	r0, [r5, #0]
 8001390:	f7ff f8fa 	bl	8000588 <__aeabi_f2d>
 8001394:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
 8001398:	f8a8 3000 	strh.w	r3, [r8]
	if (CANRx_current.current_float > IMAXP + ITOLP)
 800139c:	a33a      	add	r3, pc, #232	; (adr r3, 8001488 <state501+0x170>)
 800139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a2:	4606      	mov	r6, r0
 80013a4:	460f      	mov	r7, r1
 80013a6:	f7ff fbd7 	bl	8000b58 <__aeabi_dcmpgt>
 80013aa:	bb78      	cbnz	r0, 800140c <state501+0xf4>
	else if (CANRx_current.current_float <= ITOLP)
 80013ac:	a338      	add	r3, pc, #224	; (adr r3, 8001490 <state501+0x178>)
 80013ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b2:	4630      	mov	r0, r6
 80013b4:	4639      	mov	r1, r7
 80013b6:	f7ff fbbb 	bl	8000b30 <__aeabi_dcmple>
 80013ba:	2800      	cmp	r0, #0
 80013bc:	d1d8      	bne.n	8001370 <state501+0x58>
	else if (CANRx_current.current_float >= IMAXP - ITOLP
 80013be:	a336      	add	r3, pc, #216	; (adr r3, 8001498 <state501+0x180>)
 80013c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c4:	4630      	mov	r0, r6
 80013c6:	4639      	mov	r1, r7
 80013c8:	f7ff fbbc 	bl	8000b44 <__aeabi_dcmpge>
 80013cc:	2800      	cmp	r0, #0
 80013ce:	d042      	beq.n	8001456 <state501+0x13e>
			&& CANRx_velocity.velocity_float <= VMAX + VTOL)
 80013d0:	6820      	ldr	r0, [r4, #0]
 80013d2:	f7ff f8d9 	bl	8000588 <__aeabi_f2d>
 80013d6:	a332      	add	r3, pc, #200	; (adr r3, 80014a0 <state501+0x188>)
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	4604      	mov	r4, r0
 80013de:	460d      	mov	r5, r1
 80013e0:	f7ff fba6 	bl	8000b30 <__aeabi_dcmple>
 80013e4:	2800      	cmp	r0, #0
 80013e6:	d0c3      	beq.n	8001370 <state501+0x58>
		state = 503;
 80013e8:	f240 13f7 	movw	r3, #503	; 0x1f7
 80013ec:	f8a8 3000 	strh.w	r3, [r8]
		if (CANRx_velocity.velocity_float < VTOL)
 80013f0:	4620      	mov	r0, r4
 80013f2:	a32d      	add	r3, pc, #180	; (adr r3, 80014a8 <state501+0x190>)
 80013f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f8:	4629      	mov	r1, r5
 80013fa:	f7ff fb8f 	bl	8000b1c <__aeabi_dcmplt>
 80013fe:	2800      	cmp	r0, #0
 8001400:	d0b6      	beq.n	8001370 <state501+0x58>
			state = 504;
 8001402:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8001406:	f8a8 3000 	strh.w	r3, [r8]
 800140a:	e7b1      	b.n	8001370 <state501+0x58>
		sprintf(msg_debug, "State DNE\r\n");
 800140c:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <state501+0x1bc>)
 800140e:	4e32      	ldr	r6, [pc, #200]	; (80014d8 <state501+0x1c0>)
 8001410:	cb07      	ldmia	r3!, {r0, r1, r2}
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
		sprintf(msg_debug, "State DNE\r\n");
 8001416:	6030      	str	r0, [r6, #0]
 8001418:	6071      	str	r1, [r6, #4]
 800141a:	60b2      	str	r2, [r6, #8]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 800141c:	482f      	ldr	r0, [pc, #188]	; (80014dc <state501+0x1c4>)
 800141e:	4631      	mov	r1, r6
 8001420:	220b      	movs	r2, #11
 8001422:	f006 f8a5 	bl	8007570 <HAL_UART_Transmit>
		CANRx_current.current_float = 0.0;
 8001426:	2300      	movs	r3, #0
 8001428:	602b      	str	r3, [r5, #0]
		CANRx_velocity.velocity_float = 0.0;
 800142a:	6023      	str	r3, [r4, #0]
}
 800142c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if(CANTx_mtrVelocity.mtrVelocity_float < 0 && CANTx_mtrVelocity.mtrVelocity_float > -1*NMAX)
 8001430:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80014e0 <state501+0x1c8>
 8001434:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143c:	dda0      	ble.n	8001380 <state501+0x68>
		mtrDirectionFlag = -1;
 800143e:	f04f 31ff 	mov.w	r1, #4294967295
 8001442:	4603      	mov	r3, r0
 8001444:	6011      	str	r1, [r2, #0]
 8001446:	e78a      	b.n	800135e <state501+0x46>
	else if (CANRx_velocity.velocity_float < 0)
 8001448:	d412      	bmi.n	8001470 <state501+0x158>
		userDirectionFlag = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	2101      	movs	r1, #1
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	e770      	b.n	8001338 <state501+0x20>
			&& CANRx_velocity.velocity_float < VMAX - VTOL)
 8001456:	6820      	ldr	r0, [r4, #0]
 8001458:	f7ff f896 	bl	8000588 <__aeabi_f2d>
 800145c:	a314      	add	r3, pc, #80	; (adr r3, 80014b0 <state501+0x198>)
 800145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001462:	4604      	mov	r4, r0
 8001464:	460d      	mov	r5, r1
 8001466:	f7ff fb59 	bl	8000b1c <__aeabi_dcmplt>
 800146a:	2800      	cmp	r0, #0
 800146c:	d080      	beq.n	8001370 <state501+0x58>
 800146e:	e7bb      	b.n	80013e8 <state501+0xd0>
		CANRx_velocity.velocity_float = fabs(CANRx_velocity.velocity_float);
 8001470:	eef0 7ae7 	vabs.f32	s15, s15
		userDirectionFlag = -1;
 8001474:	f04f 33ff 	mov.w	r3, #4294967295
		CANRx_velocity.velocity_float = fabs(CANRx_velocity.velocity_float);
 8001478:	edc4 7a00 	vstr	s15, [r4]
		userDirectionFlag = -1;
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	2100      	movs	r1, #0
 8001480:	f06f 0001 	mvn.w	r0, #1
 8001484:	e758      	b.n	8001338 <state501+0x20>
 8001486:	bf00      	nop
 8001488:	9999999a 	.word	0x9999999a
 800148c:	3ff19999 	.word	0x3ff19999
 8001490:	9999999a 	.word	0x9999999a
 8001494:	3fb99999 	.word	0x3fb99999
 8001498:	cccccccd 	.word	0xcccccccd
 800149c:	3feccccc 	.word	0x3feccccc
 80014a0:	501727f3 	.word	0x501727f3
 80014a4:	3ffadc95 	.word	0x3ffadc95
 80014a8:	c699f47a 	.word	0xc699f47a
 80014ac:	3f712609 	.word	0x3f712609
 80014b0:	3c89f40b 	.word	0x3c89f40b
 80014b4:	3ffaba49 	.word	0x3ffaba49
 80014b8:	200007d4 	.word	0x200007d4
 80014bc:	20000778 	.word	0x20000778
 80014c0:	200007ec 	.word	0x200007ec
 80014c4:	457a0000 	.word	0x457a0000
 80014c8:	20000770 	.word	0x20000770
 80014cc:	200007c0 	.word	0x200007c0
 80014d0:	20000774 	.word	0x20000774
 80014d4:	0800a240 	.word	0x0800a240
 80014d8:	20000a44 	.word	0x20000a44
 80014dc:	200009b8 	.word	0x200009b8
 80014e0:	c57a0000 	.word	0xc57a0000
 80014e4:	00000000 	.word	0x00000000

080014e8 <state505>:
{
 80014e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014ec:	ed2d 8b02 	vpush	{d8}
	int motorState = MC_GetSTMStateMotor1();
 80014f0:	f001 fe18 	bl	8003124 <MC_GetSTMStateMotor1>
	if (CANRx_velocity.velocity_float < VTOL || CANRx_current.current_float < ITOLP) userSpin = 0;
 80014f4:	4a76      	ldr	r2, [pc, #472]	; (80016d0 <state505+0x1e8>)
	int motorSpeed = (int) fabs(CANTx_mtrVelocity.mtrVelocity_float); //[RPM]
 80014f6:	4b77      	ldr	r3, [pc, #476]	; (80016d4 <state505+0x1ec>)
	int motorState = MC_GetSTMStateMotor1();
 80014f8:	4604      	mov	r4, r0
	if (CANRx_velocity.velocity_float < VTOL || CANRx_current.current_float < ITOLP) userSpin = 0;
 80014fa:	6810      	ldr	r0, [r2, #0]
	int motorSpeed = (int) fabs(CANTx_mtrVelocity.mtrVelocity_float); //[RPM]
 80014fc:	ed93 8a00 	vldr	s16, [r3]
	if (CANRx_velocity.velocity_float < VTOL || CANRx_current.current_float < ITOLP) userSpin = 0;
 8001500:	f7ff f842 	bl	8000588 <__aeabi_f2d>
 8001504:	a36e      	add	r3, pc, #440	; (adr r3, 80016c0 <state505+0x1d8>)
 8001506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150a:	f7ff fb07 	bl	8000b1c <__aeabi_dcmplt>
	int motorState = MC_GetSTMStateMotor1();
 800150e:	4626      	mov	r6, r4
	if (CANRx_velocity.velocity_float < VTOL || CANRx_current.current_float < ITOLP) userSpin = 0;
 8001510:	2800      	cmp	r0, #0
 8001512:	d13a      	bne.n	800158a <state505+0xa2>
 8001514:	4b70      	ldr	r3, [pc, #448]	; (80016d8 <state505+0x1f0>)
 8001516:	6818      	ldr	r0, [r3, #0]
 8001518:	f7ff f836 	bl	8000588 <__aeabi_f2d>
 800151c:	a36a      	add	r3, pc, #424	; (adr r3, 80016c8 <state505+0x1e0>)
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	f7ff fb0f 	bl	8000b44 <__aeabi_dcmpge>
 8001526:	1e05      	subs	r5, r0, #0
 8001528:	bf18      	it	ne
 800152a:	2501      	movne	r5, #1
	if (!(motorState == 0 || motorState == 7)) STMSpin = 1; //States in state_machine.h
 800152c:	b114      	cbz	r4, 8001534 <state505+0x4c>
 800152e:	1fe6      	subs	r6, r4, #7
 8001530:	bf18      	it	ne
 8001532:	2601      	movne	r6, #1
	if(motorSpinupFlag == 0)
 8001534:	4c69      	ldr	r4, [pc, #420]	; (80016dc <state505+0x1f4>)
	state = 600;
 8001536:	4a6a      	ldr	r2, [pc, #424]	; (80016e0 <state505+0x1f8>)
	if(motorSpinupFlag == 0)
 8001538:	6823      	ldr	r3, [r4, #0]
	state = 600;
 800153a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800153e:	8011      	strh	r1, [r2, #0]
	if(motorSpinupFlag == 0)
 8001540:	2b00      	cmp	r3, #0
 8001542:	d149      	bne.n	80015d8 <state505+0xf0>
	int motorSpeed = (int) fabs(CANTx_mtrVelocity.mtrVelocity_float); //[RPM]
 8001544:	eeb0 8ac8 	vabs.f32	s16, s16
 8001548:	eebd 8ac8 	vcvt.s32.f32	s16, s16
		if      (motorSpin == 1 && userSpin == 1 && STMSpin == 1)
 800154c:	f640 729e 	movw	r2, #3998	; 0xf9e
	if (motorSpeed > 0 && motorSpeed < NMAX)
 8001550:	ee18 3a10 	vmov	r3, s16
 8001554:	3b01      	subs	r3, #1
		if      (motorSpin == 1 && userSpin == 1 && STMSpin == 1)
 8001556:	4293      	cmp	r3, r2
 8001558:	d919      	bls.n	800158e <state505+0xa6>
		else if (motorSpin == 0 && userSpin == 1 && STMSpin == 1)
 800155a:	2d00      	cmp	r5, #0
 800155c:	d148      	bne.n	80015f0 <state505+0x108>
		else if (motorSpin == 0 && userSpin == 0 && STMSpin == 1)
 800155e:	2e01      	cmp	r6, #1
 8001560:	d142      	bne.n	80015e8 <state505+0x100>
			sprintf(msg_debug, "Motor stopped\r\n");
 8001562:	4c60      	ldr	r4, [pc, #384]	; (80016e4 <state505+0x1fc>)
 8001564:	4d60      	ldr	r5, [pc, #384]	; (80016e8 <state505+0x200>)
			MC_StopMotor1();
 8001566:	f001 fdaf 	bl	80030c8 <MC_StopMotor1>
			sprintf(msg_debug, "Motor stopped\r\n");
 800156a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800156c:	6028      	str	r0, [r5, #0]
 800156e:	6069      	str	r1, [r5, #4]
 8001570:	60aa      	str	r2, [r5, #8]
 8001572:	60eb      	str	r3, [r5, #12]
}
 8001574:	ecbd 8b02 	vpop	{d8}
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001578:	4629      	mov	r1, r5
 800157a:	485c      	ldr	r0, [pc, #368]	; (80016ec <state505+0x204>)
}
 800157c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
 8001584:	220f      	movs	r2, #15
 8001586:	f005 bff3 	b.w	8007570 <HAL_UART_Transmit>
	if (CANRx_velocity.velocity_float < VTOL || CANRx_current.current_float < ITOLP) userSpin = 0;
 800158a:	2500      	movs	r5, #0
 800158c:	e7ce      	b.n	800152c <state505+0x44>
		if      (motorSpin == 1 && userSpin == 1 && STMSpin == 1)
 800158e:	2d00      	cmp	r5, #0
 8001590:	d146      	bne.n	8001620 <state505+0x138>
		else if (motorSpin == 1 && userSpin == 0 && STMSpin == 1)
 8001592:	2e01      	cmp	r6, #1
 8001594:	d128      	bne.n	80015e8 <state505+0x100>
			sprintf(msg_debug, "User says motor should not be spinning\r\n");
 8001596:	4e56      	ldr	r6, [pc, #344]	; (80016f0 <state505+0x208>)
 8001598:	4d53      	ldr	r5, [pc, #332]	; (80016e8 <state505+0x200>)
 800159a:	f106 0720 	add.w	r7, r6, #32
 800159e:	4634      	mov	r4, r6
 80015a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a2:	42bc      	cmp	r4, r7
 80015a4:	6028      	str	r0, [r5, #0]
 80015a6:	6069      	str	r1, [r5, #4]
 80015a8:	60aa      	str	r2, [r5, #8]
 80015aa:	60eb      	str	r3, [r5, #12]
 80015ac:	4626      	mov	r6, r4
 80015ae:	f105 0510 	add.w	r5, r5, #16
 80015b2:	d1f4      	bne.n	800159e <state505+0xb6>
 80015b4:	ce03      	ldmia	r6!, {r0, r1}
 80015b6:	7832      	ldrb	r2, [r6, #0]
 80015b8:	6028      	str	r0, [r5, #0]
 80015ba:	6069      	str	r1, [r5, #4]
 80015bc:	722a      	strb	r2, [r5, #8]
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80015be:	494a      	ldr	r1, [pc, #296]	; (80016e8 <state505+0x200>)
 80015c0:	484a      	ldr	r0, [pc, #296]	; (80016ec <state505+0x204>)
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
 80015c6:	2228      	movs	r2, #40	; 0x28
 80015c8:	f005 ffd2 	bl	8007570 <HAL_UART_Transmit>
}
 80015cc:	ecbd 8b02 	vpop	{d8}
 80015d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			MC_StopMotor1();
 80015d4:	f001 bd78 	b.w	80030c8 <MC_StopMotor1>
		if (HAL_GetTick() - delayTimer >= MOTORSPINUPTIME)
 80015d8:	f004 fa24 	bl	8005a24 <HAL_GetTick>
 80015dc:	4b45      	ldr	r3, [pc, #276]	; (80016f4 <state505+0x20c>)
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	1ac0      	subs	r0, r0, r3
 80015e2:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80015e6:	d235      	bcs.n	8001654 <state505+0x16c>
}
 80015e8:	ecbd 8b02 	vpop	{d8}
 80015ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		else if (motorSpin == 0 && userSpin == 1 && STMSpin == 1)
 80015f0:	2e01      	cmp	r6, #1
 80015f2:	d045      	beq.n	8001680 <state505+0x198>
			sprintf(msg_debug, "Motor started\r\n");
 80015f4:	4e40      	ldr	r6, [pc, #256]	; (80016f8 <state505+0x210>)
 80015f6:	4f3c      	ldr	r7, [pc, #240]	; (80016e8 <state505+0x200>)
			MC_StartMotor1();
 80015f8:	f001 fd60 	bl	80030bc <MC_StartMotor1>
			sprintf(msg_debug, "Motor started\r\n");
 80015fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80015fe:	6038      	str	r0, [r7, #0]
 8001600:	6079      	str	r1, [r7, #4]
 8001602:	60ba      	str	r2, [r7, #8]
 8001604:	60fb      	str	r3, [r7, #12]
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001606:	4639      	mov	r1, r7
 8001608:	f04f 33ff 	mov.w	r3, #4294967295
 800160c:	220f      	movs	r2, #15
 800160e:	4837      	ldr	r0, [pc, #220]	; (80016ec <state505+0x204>)
 8001610:	f005 ffae 	bl	8007570 <HAL_UART_Transmit>
			motorSpinupFlag = 1;
 8001614:	6025      	str	r5, [r4, #0]
			delayTimer = HAL_GetTick();
 8001616:	f004 fa05 	bl	8005a24 <HAL_GetTick>
 800161a:	4b36      	ldr	r3, [pc, #216]	; (80016f4 <state505+0x20c>)
 800161c:	8018      	strh	r0, [r3, #0]
 800161e:	e7e3      	b.n	80015e8 <state505+0x100>
		if      (motorSpin == 1 && userSpin == 1 && STMSpin == 1)
 8001620:	2e01      	cmp	r6, #1
 8001622:	d1e1      	bne.n	80015e8 <state505+0x100>
			sprintf(msg_debug, "Motor spinning as expected\r\n");
 8001624:	4c35      	ldr	r4, [pc, #212]	; (80016fc <state505+0x214>)
 8001626:	4d30      	ldr	r5, [pc, #192]	; (80016e8 <state505+0x200>)
 8001628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800162a:	6028      	str	r0, [r5, #0]
 800162c:	6069      	str	r1, [r5, #4]
 800162e:	60aa      	str	r2, [r5, #8]
 8001630:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001632:	60eb      	str	r3, [r5, #12]
 8001634:	7823      	ldrb	r3, [r4, #0]
 8001636:	6128      	str	r0, [r5, #16]
 8001638:	6169      	str	r1, [r5, #20]
 800163a:	61aa      	str	r2, [r5, #24]
 800163c:	772b      	strb	r3, [r5, #28]
}
 800163e:	ecbd 8b02 	vpop	{d8}
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001642:	4629      	mov	r1, r5
 8001644:	4829      	ldr	r0, [pc, #164]	; (80016ec <state505+0x204>)
}
 8001646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
 800164e:	221c      	movs	r2, #28
 8001650:	f005 bf8e 	b.w	8007570 <HAL_UART_Transmit>
			sprintf(msg_debug, "Spinup flag reset\r\n");
 8001654:	4d2a      	ldr	r5, [pc, #168]	; (8001700 <state505+0x218>)
 8001656:	4e24      	ldr	r6, [pc, #144]	; (80016e8 <state505+0x200>)
 8001658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800165a:	6030      	str	r0, [r6, #0]
 800165c:	6828      	ldr	r0, [r5, #0]
 800165e:	6130      	str	r0, [r6, #16]
 8001660:	6071      	str	r1, [r6, #4]
 8001662:	60b2      	str	r2, [r6, #8]
 8001664:	60f3      	str	r3, [r6, #12]
}
 8001666:	ecbd 8b02 	vpop	{d8}
			motorSpinupFlag = 0;
 800166a:	2500      	movs	r5, #0
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 800166c:	4631      	mov	r1, r6
			motorSpinupFlag = 0;
 800166e:	6025      	str	r5, [r4, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001670:	481e      	ldr	r0, [pc, #120]	; (80016ec <state505+0x204>)
}
 8001672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
 800167a:	2213      	movs	r2, #19
 800167c:	f005 bf78 	b.w	8007570 <HAL_UART_Transmit>
			sprintf(msg_debug, "Motor not spinning. Stopping STM\r\n");
 8001680:	4e20      	ldr	r6, [pc, #128]	; (8001704 <state505+0x21c>)
 8001682:	4d19      	ldr	r5, [pc, #100]	; (80016e8 <state505+0x200>)
 8001684:	f106 0720 	add.w	r7, r6, #32
 8001688:	4634      	mov	r4, r6
 800168a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800168c:	42bc      	cmp	r4, r7
 800168e:	6028      	str	r0, [r5, #0]
 8001690:	6069      	str	r1, [r5, #4]
 8001692:	60aa      	str	r2, [r5, #8]
 8001694:	60eb      	str	r3, [r5, #12]
 8001696:	4626      	mov	r6, r4
 8001698:	f105 0510 	add.w	r5, r5, #16
 800169c:	d1f4      	bne.n	8001688 <state505+0x1a0>
 800169e:	8823      	ldrh	r3, [r4, #0]
 80016a0:	78a4      	ldrb	r4, [r4, #2]
 80016a2:	802b      	strh	r3, [r5, #0]
 80016a4:	70ac      	strb	r4, [r5, #2]
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80016a6:	4910      	ldr	r1, [pc, #64]	; (80016e8 <state505+0x200>)
 80016a8:	4810      	ldr	r0, [pc, #64]	; (80016ec <state505+0x204>)
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	2222      	movs	r2, #34	; 0x22
 80016b0:	f005 ff5e 	bl	8007570 <HAL_UART_Transmit>
}
 80016b4:	ecbd 8b02 	vpop	{d8}
 80016b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			MC_StopMotor1();
 80016bc:	f001 bd04 	b.w	80030c8 <MC_StopMotor1>
 80016c0:	c699f47a 	.word	0xc699f47a
 80016c4:	3f712609 	.word	0x3f712609
 80016c8:	9999999a 	.word	0x9999999a
 80016cc:	3fb99999 	.word	0x3fb99999
 80016d0:	200007d4 	.word	0x200007d4
 80016d4:	200007ec 	.word	0x200007ec
 80016d8:	200007c0 	.word	0x200007c0
 80016dc:	2000076c 	.word	0x2000076c
 80016e0:	20000774 	.word	0x20000774
 80016e4:	0800a308 	.word	0x0800a308
 80016e8:	20000a44 	.word	0x20000a44
 80016ec:	200009b8 	.word	0x200009b8
 80016f0:	0800a2a8 	.word	0x0800a2a8
 80016f4:	20000762 	.word	0x20000762
 80016f8:	0800a2f8 	.word	0x0800a2f8
 80016fc:	0800a288 	.word	0x0800a288
 8001700:	0800a318 	.word	0x0800a318
 8001704:	0800a2d4 	.word	0x0800a2d4

08001708 <state699>:
{
 8001708:	b538      	push	{r3, r4, r5, lr}
	sprintf(msg_debug, "100x CANRx_velocity float (m/s): %hu\r\n", (int) (CANRx_velocity.velocity_float*100.0));
 800170a:	4b71      	ldr	r3, [pc, #452]	; (80018d0 <state699+0x1c8>)
 800170c:	4c71      	ldr	r4, [pc, #452]	; (80018d4 <state699+0x1cc>)
 800170e:	6818      	ldr	r0, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001710:	4d71      	ldr	r5, [pc, #452]	; (80018d8 <state699+0x1d0>)
	sprintf(msg_debug, "100x CANRx_velocity float (m/s): %hu\r\n", (int) (CANRx_velocity.velocity_float*100.0));
 8001712:	f7fe ff39 	bl	8000588 <__aeabi_f2d>
 8001716:	4b71      	ldr	r3, [pc, #452]	; (80018dc <state699+0x1d4>)
 8001718:	2200      	movs	r2, #0
 800171a:	f7fe ff8d 	bl	8000638 <__aeabi_dmul>
 800171e:	f7ff fa3b 	bl	8000b98 <__aeabi_d2iz>
 8001722:	496f      	ldr	r1, [pc, #444]	; (80018e0 <state699+0x1d8>)
 8001724:	4602      	mov	r2, r0
 8001726:	4620      	mov	r0, r4
 8001728:	f007 ff00 	bl	800952c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 800172c:	4620      	mov	r0, r4
 800172e:	f7fe fd6f 	bl	8000210 <strlen>
 8001732:	4621      	mov	r1, r4
 8001734:	b282      	uxth	r2, r0
 8001736:	f04f 33ff 	mov.w	r3, #4294967295
 800173a:	4628      	mov	r0, r5
 800173c:	f005 ff18 	bl	8007570 <HAL_UART_Transmit>
	sprintf(msg_debug, "100x CANRx_current float: %hu\r\n", (int) (100.0*CANRx_current.current_float));
 8001740:	4b68      	ldr	r3, [pc, #416]	; (80018e4 <state699+0x1dc>)
 8001742:	6818      	ldr	r0, [r3, #0]
 8001744:	f7fe ff20 	bl	8000588 <__aeabi_f2d>
 8001748:	4b64      	ldr	r3, [pc, #400]	; (80018dc <state699+0x1d4>)
 800174a:	2200      	movs	r2, #0
 800174c:	f7fe ff74 	bl	8000638 <__aeabi_dmul>
 8001750:	f7ff fa22 	bl	8000b98 <__aeabi_d2iz>
 8001754:	4964      	ldr	r1, [pc, #400]	; (80018e8 <state699+0x1e0>)
 8001756:	4602      	mov	r2, r0
 8001758:	4620      	mov	r0, r4
 800175a:	f007 fee7 	bl	800952c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 800175e:	4620      	mov	r0, r4
 8001760:	f7fe fd56 	bl	8000210 <strlen>
 8001764:	4621      	mov	r1, r4
 8001766:	b282      	uxth	r2, r0
 8001768:	f04f 33ff 	mov.w	r3, #4294967295
 800176c:	4628      	mov	r0, r5
 800176e:	f005 feff 	bl	8007570 <HAL_UART_Transmit>
	sprintf(msg_debug, "100x DC current: %hu\r\n", (int) (100.0*CANTx_busCurrent.busCurrent_float));
 8001772:	4b5e      	ldr	r3, [pc, #376]	; (80018ec <state699+0x1e4>)
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	f7fe ff07 	bl	8000588 <__aeabi_f2d>
 800177a:	4b58      	ldr	r3, [pc, #352]	; (80018dc <state699+0x1d4>)
 800177c:	2200      	movs	r2, #0
 800177e:	f7fe ff5b 	bl	8000638 <__aeabi_dmul>
 8001782:	f7ff fa09 	bl	8000b98 <__aeabi_d2iz>
 8001786:	495a      	ldr	r1, [pc, #360]	; (80018f0 <state699+0x1e8>)
 8001788:	4602      	mov	r2, r0
 800178a:	4620      	mov	r0, r4
 800178c:	f007 fece 	bl	800952c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001790:	4620      	mov	r0, r4
 8001792:	f7fe fd3d 	bl	8000210 <strlen>
 8001796:	4621      	mov	r1, r4
 8001798:	b282      	uxth	r2, r0
 800179a:	f04f 33ff 	mov.w	r3, #4294967295
 800179e:	4628      	mov	r0, r5
 80017a0:	f005 fee6 	bl	8007570 <HAL_UART_Transmit>
	sprintf(msg_debug, "100x DC voltage: %hu\r\n", (int) (100.0*CANTx_busVoltage.busVoltage_float));
 80017a4:	4b53      	ldr	r3, [pc, #332]	; (80018f4 <state699+0x1ec>)
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	f7fe feee 	bl	8000588 <__aeabi_f2d>
 80017ac:	4b4b      	ldr	r3, [pc, #300]	; (80018dc <state699+0x1d4>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	f7fe ff42 	bl	8000638 <__aeabi_dmul>
 80017b4:	f7ff f9f0 	bl	8000b98 <__aeabi_d2iz>
 80017b8:	494f      	ldr	r1, [pc, #316]	; (80018f8 <state699+0x1f0>)
 80017ba:	4602      	mov	r2, r0
 80017bc:	4620      	mov	r0, r4
 80017be:	f007 feb5 	bl	800952c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80017c2:	4620      	mov	r0, r4
 80017c4:	f7fe fd24 	bl	8000210 <strlen>
 80017c8:	4621      	mov	r1, r4
 80017ca:	b282      	uxth	r2, r0
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295
 80017d0:	4628      	mov	r0, r5
 80017d2:	f005 fecd 	bl	8007570 <HAL_UART_Transmit>
	sprintf(msg_debug, "Current motor speed (RPM): %hu\r\n", (int) CANTx_mtrVelocity.mtrVelocity_float);
 80017d6:	4b49      	ldr	r3, [pc, #292]	; (80018fc <state699+0x1f4>)
 80017d8:	4949      	ldr	r1, [pc, #292]	; (8001900 <state699+0x1f8>)
 80017da:	edd3 7a00 	vldr	s15, [r3]
 80017de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017e2:	4620      	mov	r0, r4
 80017e4:	ee17 2a90 	vmov	r2, s15
 80017e8:	f007 fea0 	bl	800952c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80017ec:	4620      	mov	r0, r4
 80017ee:	f7fe fd0f 	bl	8000210 <strlen>
 80017f2:	4621      	mov	r1, r4
 80017f4:	b282      	uxth	r2, r0
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295
 80017fa:	4628      	mov	r0, r5
 80017fc:	f005 feb8 	bl	8007570 <HAL_UART_Transmit>
	sprintf(msg_debug, "Current vehicle speed (m/s): %hu\r\n", (int) CANTx_carVelocity.carVelocity_float);
 8001800:	4b40      	ldr	r3, [pc, #256]	; (8001904 <state699+0x1fc>)
 8001802:	4941      	ldr	r1, [pc, #260]	; (8001908 <state699+0x200>)
 8001804:	edd3 7a00 	vldr	s15, [r3]
 8001808:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800180c:	4620      	mov	r0, r4
 800180e:	ee17 2a90 	vmov	r2, s15
 8001812:	f007 fe8b 	bl	800952c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001816:	4620      	mov	r0, r4
 8001818:	f7fe fcfa 	bl	8000210 <strlen>
 800181c:	4621      	mov	r1, r4
 800181e:	b282      	uxth	r2, r0
 8001820:	f04f 33ff 	mov.w	r3, #4294967295
 8001824:	4628      	mov	r0, r5
 8001826:	f005 fea3 	bl	8007570 <HAL_UART_Transmit>
	sprintf(msg_debug, "100x Motor phase current: %hu\r\n", (int) (100.0*CANTx_phaseCurrent.phaseCurrent_float));
 800182a:	4b38      	ldr	r3, [pc, #224]	; (800190c <state699+0x204>)
 800182c:	6818      	ldr	r0, [r3, #0]
 800182e:	f7fe feab 	bl	8000588 <__aeabi_f2d>
 8001832:	4b2a      	ldr	r3, [pc, #168]	; (80018dc <state699+0x1d4>)
 8001834:	2200      	movs	r2, #0
 8001836:	f7fe feff 	bl	8000638 <__aeabi_dmul>
 800183a:	f7ff f9ad 	bl	8000b98 <__aeabi_d2iz>
 800183e:	4934      	ldr	r1, [pc, #208]	; (8001910 <state699+0x208>)
 8001840:	4602      	mov	r2, r0
 8001842:	4620      	mov	r0, r4
 8001844:	f007 fe72 	bl	800952c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001848:	4620      	mov	r0, r4
 800184a:	f7fe fce1 	bl	8000210 <strlen>
 800184e:	4621      	mov	r1, r4
 8001850:	b282      	uxth	r2, r0
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
 8001856:	4628      	mov	r0, r5
 8001858:	f005 fe8a 	bl	8007570 <HAL_UART_Transmit>
	sprintf(msg_debug, "10x Motor temp: %hu\r\n", (int) (10.0*CANTx_mtrTemp.mtrTemp_float));
 800185c:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <state699+0x20c>)
 800185e:	6818      	ldr	r0, [r3, #0]
 8001860:	f7fe fe92 	bl	8000588 <__aeabi_f2d>
 8001864:	4b2c      	ldr	r3, [pc, #176]	; (8001918 <state699+0x210>)
 8001866:	2200      	movs	r2, #0
 8001868:	f7fe fee6 	bl	8000638 <__aeabi_dmul>
 800186c:	f7ff f994 	bl	8000b98 <__aeabi_d2iz>
 8001870:	492a      	ldr	r1, [pc, #168]	; (800191c <state699+0x214>)
 8001872:	4602      	mov	r2, r0
 8001874:	4620      	mov	r0, r4
 8001876:	f007 fe59 	bl	800952c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 800187a:	4620      	mov	r0, r4
 800187c:	f7fe fcc8 	bl	8000210 <strlen>
 8001880:	4621      	mov	r1, r4
 8001882:	b282      	uxth	r2, r0
 8001884:	f04f 33ff 	mov.w	r3, #4294967295
 8001888:	4628      	mov	r0, r5
 800188a:	f005 fe71 	bl	8007570 <HAL_UART_Transmit>
	sprintf(msg_debug, "10x FET temp: %hu\r\n", (int) (10.0*CANTx_FETTemp.FETTemp_float));
 800188e:	4b24      	ldr	r3, [pc, #144]	; (8001920 <state699+0x218>)
 8001890:	6818      	ldr	r0, [r3, #0]
 8001892:	f7fe fe79 	bl	8000588 <__aeabi_f2d>
 8001896:	4b20      	ldr	r3, [pc, #128]	; (8001918 <state699+0x210>)
 8001898:	2200      	movs	r2, #0
 800189a:	f7fe fecd 	bl	8000638 <__aeabi_dmul>
 800189e:	f7ff f97b 	bl	8000b98 <__aeabi_d2iz>
 80018a2:	4920      	ldr	r1, [pc, #128]	; (8001924 <state699+0x21c>)
 80018a4:	4602      	mov	r2, r0
 80018a6:	4620      	mov	r0, r4
 80018a8:	f007 fe40 	bl	800952c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80018ac:	4620      	mov	r0, r4
 80018ae:	f7fe fcaf 	bl	8000210 <strlen>
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	b282      	uxth	r2, r0
 80018b8:	4621      	mov	r1, r4
 80018ba:	4628      	mov	r0, r5
 80018bc:	f005 fe58 	bl	8007570 <HAL_UART_Transmit>
	HAL_Delay(100);
 80018c0:	2064      	movs	r0, #100	; 0x64
 80018c2:	f004 f8b5 	bl	8005a30 <HAL_Delay>
	state = 100;
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <state699+0x220>)
 80018c8:	2264      	movs	r2, #100	; 0x64
 80018ca:	801a      	strh	r2, [r3, #0]
}
 80018cc:	bd38      	pop	{r3, r4, r5, pc}
 80018ce:	bf00      	nop
 80018d0:	200007d4 	.word	0x200007d4
 80018d4:	20000a44 	.word	0x20000a44
 80018d8:	200009b8 	.word	0x200009b8
 80018dc:	40590000 	.word	0x40590000
 80018e0:	0800a33c 	.word	0x0800a33c
 80018e4:	200007c0 	.word	0x200007c0
 80018e8:	0800a364 	.word	0x0800a364
 80018ec:	200007f4 	.word	0x200007f4
 80018f0:	0800a384 	.word	0x0800a384
 80018f4:	200007b8 	.word	0x200007b8
 80018f8:	0800a39c 	.word	0x0800a39c
 80018fc:	200007ec 	.word	0x200007ec
 8001900:	0800a3b4 	.word	0x0800a3b4
 8001904:	20000a24 	.word	0x20000a24
 8001908:	0800a3d8 	.word	0x0800a3d8
 800190c:	200007d8 	.word	0x200007d8
 8001910:	0800a3fc 	.word	0x0800a3fc
 8001914:	20000a3c 	.word	0x20000a3c
 8001918:	40240000 	.word	0x40240000
 800191c:	0800a41c 	.word	0x0800a41c
 8001920:	20000a34 	.word	0x20000a34
 8001924:	0800a434 	.word	0x0800a434
 8001928:	20000774 	.word	0x20000774

0800192c <fsmInit>:
	Pot1Conv.regADC = ADC1; /* to be modify to match your ADC */
 800192c:	4828      	ldr	r0, [pc, #160]	; (80019d0 <fsmInit+0xa4>)
{
 800192e:	b570      	push	{r4, r5, r6, lr}
	Pot1Conv.channel = ADC_CHANNEL_8;/* to be modify to match your ADC channel */
 8001930:	2308      	movs	r3, #8
	Pot1Conv.samplingTime = ADC_SAMPLETIME_3CYCLES; /* to be modify to match your sampling time */
 8001932:	2400      	movs	r4, #0
	Pot1Conv.regADC = ADC1; /* to be modify to match your ADC */
 8001934:	4d27      	ldr	r5, [pc, #156]	; (80019d4 <fsmInit+0xa8>)
 8001936:	6005      	str	r5, [r0, #0]
	Pot1Conv.channel = ADC_CHANNEL_8;/* to be modify to match your ADC channel */
 8001938:	7103      	strb	r3, [r0, #4]
	Pot1Conv.samplingTime = ADC_SAMPLETIME_3CYCLES; /* to be modify to match your sampling time */
 800193a:	6084      	str	r4, [r0, #8]
	Pot1Handle = RCM_RegisterRegConv (&Pot1Conv);
 800193c:	f002 fe44 	bl	80045c8 <RCM_RegisterRegConv>
	Pot2Conv.regADC = ADC1; /* to be modify to match your ADC */
 8001940:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <fsmInit+0xac>)
	Pot1Handle = RCM_RegisterRegConv (&Pot1Conv);
 8001942:	4926      	ldr	r1, [pc, #152]	; (80019dc <fsmInit+0xb0>)
	Pot2Conv.regADC = ADC1; /* to be modify to match your ADC */
 8001944:	601d      	str	r5, [r3, #0]
	Pot1Handle = RCM_RegisterRegConv (&Pot1Conv);
 8001946:	7008      	strb	r0, [r1, #0]
	Pot2Conv.channel = ADC_CHANNEL_7;/* to be modify to match your ADC channel */
 8001948:	2207      	movs	r2, #7
	Pot2Handle = RCM_RegisterRegConv (&Pot2Conv);
 800194a:	4618      	mov	r0, r3
	Pot2Conv.samplingTime = ADC_SAMPLETIME_3CYCLES; /* to be modify to match your sampling time */
 800194c:	609c      	str	r4, [r3, #8]
	Pot2Conv.channel = ADC_CHANNEL_7;/* to be modify to match your ADC channel */
 800194e:	711a      	strb	r2, [r3, #4]
	Pot2Handle = RCM_RegisterRegConv (&Pot2Conv);
 8001950:	f002 fe3a 	bl	80045c8 <RCM_RegisterRegConv>
 8001954:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <fsmInit+0xb4>)
	HAL_CAN_ConfigFilter(&hcan1, &CANRxFilter);
 8001956:	4e23      	ldr	r6, [pc, #140]	; (80019e4 <fsmInit+0xb8>)
	Pot2Handle = RCM_RegisterRegConv (&Pot2Conv);
 8001958:	4602      	mov	r2, r0
	DCCurrConv.regADC = ADC1;
 800195a:	4823      	ldr	r0, [pc, #140]	; (80019e8 <fsmInit+0xbc>)
	Pot2Handle = RCM_RegisterRegConv (&Pot2Conv);
 800195c:	701a      	strb	r2, [r3, #0]
	DCCurrConv.regADC = ADC1;
 800195e:	6005      	str	r5, [r0, #0]
	DCCurrConv.channel = ADC_CHANNEL_0;
 8001960:	7104      	strb	r4, [r0, #4]
	DCCurrConv.samplingTime = ADC_SAMPLETIME_3CYCLES;
 8001962:	6084      	str	r4, [r0, #8]
	DCCurrHandle = RCM_RegisterRegConv (&DCCurrConv);
 8001964:	f002 fe30 	bl	80045c8 <RCM_RegisterRegConv>
	ThermAHConv.regADC = ADC1;
 8001968:	4b20      	ldr	r3, [pc, #128]	; (80019ec <fsmInit+0xc0>)
	DCCurrHandle = RCM_RegisterRegConv (&DCCurrConv);
 800196a:	4921      	ldr	r1, [pc, #132]	; (80019f0 <fsmInit+0xc4>)
	ThermAHConv.regADC = ADC1;
 800196c:	601d      	str	r5, [r3, #0]
	ThermAHConv.channel = ADC_CHANNEL_12;
 800196e:	220c      	movs	r2, #12
	DCCurrHandle = RCM_RegisterRegConv (&DCCurrConv);
 8001970:	7008      	strb	r0, [r1, #0]
	ThermAHHandle = RCM_RegisterRegConv (&ThermAHConv);
 8001972:	4618      	mov	r0, r3
	ThermAHConv.samplingTime = ADC_SAMPLETIME_3CYCLES;
 8001974:	609c      	str	r4, [r3, #8]
	ThermAHConv.channel = ADC_CHANNEL_12;
 8001976:	711a      	strb	r2, [r3, #4]
	ThermAHHandle = RCM_RegisterRegConv (&ThermAHConv);
 8001978:	f002 fe26 	bl	80045c8 <RCM_RegisterRegConv>
	ThermALConv.regADC = ADC1;
 800197c:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <fsmInit+0xc8>)
	ThermAHHandle = RCM_RegisterRegConv (&ThermAHConv);
 800197e:	491e      	ldr	r1, [pc, #120]	; (80019f8 <fsmInit+0xcc>)
	ThermALConv.regADC = ADC1;
 8001980:	601d      	str	r5, [r3, #0]
	ThermALConv.channel = ADC_CHANNEL_13;
 8001982:	220d      	movs	r2, #13
	ThermAHHandle = RCM_RegisterRegConv (&ThermAHConv);
 8001984:	7008      	strb	r0, [r1, #0]
	ThermALHandle = RCM_RegisterRegConv (&ThermALConv);
 8001986:	4618      	mov	r0, r3
	ThermALConv.samplingTime = ADC_SAMPLETIME_3CYCLES;
 8001988:	609c      	str	r4, [r3, #8]
	ThermALConv.channel = ADC_CHANNEL_13;
 800198a:	711a      	strb	r2, [r3, #4]
	ThermALHandle = RCM_RegisterRegConv (&ThermALConv);
 800198c:	f002 fe1c 	bl	80045c8 <RCM_RegisterRegConv>
	ThermBHConv.regADC = ADC1;
 8001990:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <fsmInit+0xd0>)
	ThermALHandle = RCM_RegisterRegConv (&ThermALConv);
 8001992:	491b      	ldr	r1, [pc, #108]	; (8001a00 <fsmInit+0xd4>)
	ThermBHConv.regADC = ADC1;
 8001994:	601d      	str	r5, [r3, #0]
	ThermALHandle = RCM_RegisterRegConv (&ThermALConv);
 8001996:	7008      	strb	r0, [r1, #0]
	ThermBHConv.channel = ADC_CHANNEL_11;
 8001998:	220b      	movs	r2, #11
	ThermBHHandle = RCM_RegisterRegConv (&ThermBHConv);
 800199a:	4618      	mov	r0, r3
	ThermBHConv.samplingTime = ADC_SAMPLETIME_3CYCLES;
 800199c:	609c      	str	r4, [r3, #8]
	ThermBHConv.channel = ADC_CHANNEL_11;
 800199e:	711a      	strb	r2, [r3, #4]
	ThermBHHandle = RCM_RegisterRegConv (&ThermBHConv);
 80019a0:	f002 fe12 	bl	80045c8 <RCM_RegisterRegConv>
	ThermBLConv.regADC = ADC1;
 80019a4:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <fsmInit+0xd8>)
	ThermBHHandle = RCM_RegisterRegConv (&ThermBHConv);
 80019a6:	4a18      	ldr	r2, [pc, #96]	; (8001a08 <fsmInit+0xdc>)
	ThermBLConv.regADC = ADC1;
 80019a8:	601d      	str	r5, [r3, #0]
	ThermBHHandle = RCM_RegisterRegConv (&ThermBHConv);
 80019aa:	7010      	strb	r0, [r2, #0]
	ThermBLConv.channel = ADC_CHANNEL_10;
 80019ac:	220a      	movs	r2, #10
	ThermBLHandle = RCM_RegisterRegConv (&ThermBLConv);
 80019ae:	4618      	mov	r0, r3
	ThermBLConv.samplingTime = ADC_SAMPLETIME_3CYCLES;
 80019b0:	609c      	str	r4, [r3, #8]
	ThermBLConv.channel = ADC_CHANNEL_10;
 80019b2:	711a      	strb	r2, [r3, #4]
	ThermBLHandle = RCM_RegisterRegConv (&ThermBLConv);
 80019b4:	f002 fe08 	bl	80045c8 <RCM_RegisterRegConv>
 80019b8:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <fsmInit+0xe0>)
	HAL_CAN_ConfigFilter(&hcan1, &CANRxFilter);
 80019ba:	4915      	ldr	r1, [pc, #84]	; (8001a10 <fsmInit+0xe4>)
	ThermBLHandle = RCM_RegisterRegConv (&ThermBLConv);
 80019bc:	7018      	strb	r0, [r3, #0]
	HAL_CAN_ConfigFilter(&hcan1, &CANRxFilter);
 80019be:	4630      	mov	r0, r6
 80019c0:	f004 fb1e 	bl	8006000 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 80019c4:	4630      	mov	r0, r6
}
 80019c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_CAN_Start(&hcan1);
 80019ca:	f004 bba1 	b.w	8006110 <HAL_CAN_Start>
 80019ce:	bf00      	nop
 80019d0:	200008dc 	.word	0x200008dc
 80019d4:	40012000 	.word	0x40012000
 80019d8:	20000884 	.word	0x20000884
 80019dc:	200008da 	.word	0x200008da
 80019e0:	20000a41 	.word	0x20000a41
 80019e4:	200009fc 	.word	0x200009fc
 80019e8:	20000940 	.word	0x20000940
 80019ec:	20000878 	.word	0x20000878
 80019f0:	20000a40 	.word	0x20000a40
 80019f4:	200007dc 	.word	0x200007dc
 80019f8:	200007e8 	.word	0x200007e8
 80019fc:	20000854 	.word	0x20000854
 8001a00:	200007f0 	.word	0x200007f0
 8001a04:	20000848 	.word	0x20000848
 8001a08:	20000844 	.word	0x20000844
 8001a0c:	2000086c 	.word	0x2000086c
 8001a10:	20000000 	.word	0x20000000
 8001a14:	00000000 	.word	0x00000000

08001a18 <main>:
{
 8001a18:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	2400      	movs	r4, #0
{
 8001a1e:	b09f      	sub	sp, #124	; 0x7c
  HAL_Init();
 8001a20:	f003 ffda 	bl	80059d8 <HAL_Init>
  fsmInit();
 8001a24:	f7ff ff82 	bl	800192c <fsmInit>
  SystemClock_Config();
 8001a28:	f7ff faf4 	bl	8001014 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 8001a30:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a34:	4bb4      	ldr	r3, [pc, #720]	; (8001d08 <main+0x2f0>)
 8001a36:	9402      	str	r4, [sp, #8]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	941a      	str	r4, [sp, #104]	; 0x68
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(DRV_DIS_GPIO_Port, DRV_DIS_Pin, GPIO_PIN_RESET);
 8001a3c:	48b3      	ldr	r0, [pc, #716]	; (8001d0c <main+0x2f4>)
  hadc1.Instance = ADC1;
 8001a3e:	4db4      	ldr	r5, [pc, #720]	; (8001d10 <main+0x2f8>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a40:	4fb4      	ldr	r7, [pc, #720]	; (8001d14 <main+0x2fc>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a46:	631a      	str	r2, [r3, #48]	; 0x30
 8001a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a4a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001a4e:	9202      	str	r2, [sp, #8]
 8001a50:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a52:	9403      	str	r4, [sp, #12]
 8001a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a56:	f042 0204 	orr.w	r2, r2, #4
 8001a5a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a5e:	f002 0204 	and.w	r2, r2, #4
 8001a62:	9203      	str	r2, [sp, #12]
 8001a64:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	9404      	str	r4, [sp, #16]
 8001a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a6a:	f042 0201 	orr.w	r2, r2, #1
 8001a6e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a72:	f002 0201 	and.w	r2, r2, #1
 8001a76:	9204      	str	r2, [sp, #16]
 8001a78:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	9405      	str	r4, [sp, #20]
 8001a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a7e:	f042 0202 	orr.w	r2, r2, #2
 8001a82:	631a      	str	r2, [r3, #48]	; 0x30
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(DRV_DIS_GPIO_Port, DRV_DIS_Pin, GPIO_PIN_RESET);
 8001a8c:	4622      	mov	r2, r4
 8001a8e:	2102      	movs	r1, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a90:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(DRV_DIS_GPIO_Port, DRV_DIS_Pin, GPIO_PIN_RESET);
 8001a92:	f004 fd89 	bl	80065a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, FLT_OUT_Pin|HALLA_OUT_Pin, GPIO_PIN_RESET);
 8001a96:	48a0      	ldr	r0, [pc, #640]	; (8001d18 <main+0x300>)
 8001a98:	4622      	mov	r2, r4
 8001a9a:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8001a9e:	f004 fd83 	bl	80065a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIO_OUT_GPIO_Port, GPIO_OUT_Pin, GPIO_PIN_RESET);
 8001aa2:	489e      	ldr	r0, [pc, #632]	; (8001d1c <main+0x304>)
 8001aa4:	4622      	mov	r2, r4
 8001aa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aaa:	f004 fd7d 	bl	80065a8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = DRV_DIS_Pin;
 8001aae:	f04f 0800 	mov.w	r8, #0
 8001ab2:	f04f 0900 	mov.w	r9, #0
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	2301      	movs	r3, #1
  HAL_GPIO_Init(DRV_DIS_GPIO_Port, &GPIO_InitStruct);
 8001aba:	4894      	ldr	r0, [pc, #592]	; (8001d0c <main+0x2f4>)
 8001abc:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = DRV_DIS_Pin;
 8001abe:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8001ac2:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
  HAL_GPIO_Init(DRV_DIS_GPIO_Port, &GPIO_InitStruct);
 8001ac6:	f004 fc63 	bl	8006390 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MTR_OC_Pin|HV_OV_Pin;
 8001aca:	f44f 5282 	mov.w	r2, #4160	; 0x1040
 8001ace:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad0:	488e      	ldr	r0, [pc, #568]	; (8001d0c <main+0x2f4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad4:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = MTR_OC_Pin|HV_OV_Pin;
 8001ad6:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ada:	f004 fc59 	bl	8006390 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FET_OT_Pin;
 8001ade:	2280      	movs	r2, #128	; 0x80
 8001ae0:	2300      	movs	r3, #0
  HAL_GPIO_Init(FET_OT_GPIO_Port, &GPIO_InitStruct);
 8001ae2:	488e      	ldr	r0, [pc, #568]	; (8001d1c <main+0x304>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(FET_OT_GPIO_Port, &GPIO_InitStruct);
 8001ae6:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = FET_OT_Pin;
 8001ae8:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(FET_OT_GPIO_Port, &GPIO_InitStruct);
 8001aec:	f004 fc50 	bl	8006390 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MTR_OT_Pin;
 8001af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001af4:	2300      	movs	r3, #0
  HAL_GPIO_Init(MTR_OT_GPIO_Port, &GPIO_InitStruct);
 8001af6:	4888      	ldr	r0, [pc, #544]	; (8001d18 <main+0x300>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(MTR_OT_GPIO_Port, &GPIO_InitStruct);
 8001afa:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = MTR_OT_Pin;
 8001afc:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(MTR_OT_GPIO_Port, &GPIO_InitStruct);
 8001b00:	f004 fc46 	bl	8006390 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FLT_OUT_Pin|HALLA_OUT_Pin;
 8001b04:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 8001b08:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0a:	4883      	ldr	r0, [pc, #524]	; (8001d18 <main+0x300>)
 8001b0c:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = FLT_OUT_Pin|HALLA_OUT_Pin;
 8001b0e:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
 8001b12:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001b16:	2620      	movs	r6, #32
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	f004 fc3a 	bl	8006390 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_OUT_Pin;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  HAL_GPIO_Init(GPIO_OUT_GPIO_Port, &GPIO_InitStruct);
 8001b22:	487e      	ldr	r0, [pc, #504]	; (8001d1c <main+0x304>)
 8001b24:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = GPIO_OUT_Pin;
 8001b26:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8001b2a:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIO_OUT_GPIO_Port, &GPIO_InitStruct);
 8001b2e:	f004 fc2f 	bl	8006390 <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001b32:	4621      	mov	r1, r4
 8001b34:	a816      	add	r0, sp, #88	; 0x58
 8001b36:	4632      	mov	r2, r6
 8001b38:	f007 fcf0 	bl	800951c <memset>
  hadc1.Instance = ADC1;
 8001b3c:	4b78      	ldr	r3, [pc, #480]	; (8001d20 <main+0x308>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b3e:	940e      	str	r4, [sp, #56]	; 0x38
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b40:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
  hadc1.Init.ScanConvMode = ENABLE;
 8001b44:	f04f 0801 	mov.w	r8, #1
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001b48:	f44f 6900 	mov.w	r9, #2048	; 0x800
  hadc1.Init.NbrOfConversion = 2;
 8001b4c:	f04f 0b02 	mov.w	fp, #2
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b50:	4628      	mov	r0, r5
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b52:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b56:	e9c5 3a00 	strd	r3, sl, [r5]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b5a:	e9c5 8804 	strd	r8, r8, [r5, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b5e:	9411      	str	r4, [sp, #68]	; 0x44
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b60:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b62:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b64:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b68:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b6a:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b6e:	62af      	str	r7, [r5, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001b70:	f8c5 900c 	str.w	r9, [r5, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001b74:	f8c5 b01c 	str.w	fp, [r5, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b78:	f003 ff6c 	bl	8005a54 <HAL_ADC_Init>
 8001b7c:	b108      	cbz	r0, 8001b82 <main+0x16a>
 8001b7e:	b672      	cpsid	i
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <main+0x168>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8001b82:	4604      	mov	r4, r0
 8001b84:	2300      	movs	r3, #0
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001b86:	f8ad 406c 	strh.w	r4, [sp, #108]	; 0x6c
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8001b8a:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 8001b8e:	e9cd 341c 	strd	r3, r4, [sp, #112]	; 0x70
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001b92:	2301      	movs	r3, #1
 8001b94:	2401      	movs	r4, #1
 8001b96:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001b9a:	a916      	add	r1, sp, #88	; 0x58
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	2400      	movs	r4, #0
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001ba0:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001ba2:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001ba6:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001baa:	f004 f8bb 	bl	8005d24 <HAL_ADCEx_InjectedConfigChannel>
 8001bae:	b108      	cbz	r0, 8001bb4 <main+0x19c>
 8001bb0:	b672      	cpsid	i
  while (1)
 8001bb2:	e7fe      	b.n	8001bb2 <main+0x19a>
  sConfig.Channel = ADC_CHANNEL_15;
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	2301      	movs	r3, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001bb8:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bba:	a90e      	add	r1, sp, #56	; 0x38
 8001bbc:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_15;
 8001bbe:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bc2:	f003 fff5 	bl	8005bb0 <HAL_ADC_ConfigChannel>
 8001bc6:	b108      	cbz	r0, 8001bcc <main+0x1b4>
 8001bc8:	b672      	cpsid	i
  while (1)
 8001bca:	e7fe      	b.n	8001bca <main+0x1b2>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bcc:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_14;
 8001bce:	220e      	movs	r2, #14
 8001bd0:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bd2:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_14;
 8001bd4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001bd8:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bdc:	f003 ffe8 	bl	8005bb0 <HAL_ADC_ConfigChannel>
 8001be0:	4605      	mov	r5, r0
 8001be2:	b108      	cbz	r0, 8001be8 <main+0x1d0>
 8001be4:	b672      	cpsid	i
  while (1)
 8001be6:	e7fe      	b.n	8001be6 <main+0x1ce>
  hadc2.Instance = ADC2;
 8001be8:	4c4e      	ldr	r4, [pc, #312]	; (8001d24 <main+0x30c>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001bea:	4601      	mov	r1, r0
 8001bec:	4632      	mov	r2, r6
 8001bee:	a816      	add	r0, sp, #88	; 0x58
 8001bf0:	f007 fc94 	bl	800951c <memset>
  hadc2.Instance = ADC2;
 8001bf4:	4b4c      	ldr	r3, [pc, #304]	; (8001d28 <main+0x310>)
 8001bf6:	6023      	str	r3, [r4, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001bf8:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 8001bfa:	e9cd 550f 	strd	r5, r5, [sp, #60]	; 0x3c
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001bfe:	e9c4 a501 	strd	sl, r5, [r4, #4]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c02:	e9c4 750a 	strd	r7, r5, [r4, #40]	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c06:	950e      	str	r5, [sp, #56]	; 0x38
 8001c08:	9511      	str	r5, [sp, #68]	; 0x44
  hadc2.Init.ScanConvMode = ENABLE;
 8001c0a:	f8c4 8010 	str.w	r8, [r4, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001c0e:	7625      	strb	r5, [r4, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001c10:	f884 5020 	strb.w	r5, [r4, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001c14:	f8c4 900c 	str.w	r9, [r4, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001c18:	f8c4 801c 	str.w	r8, [r4, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001c1c:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c20:	f8c4 8014 	str.w	r8, [r4, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001c24:	f003 ff16 	bl	8005a54 <HAL_ADC_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	b108      	cbz	r0, 8001c30 <main+0x218>
 8001c2c:	b672      	cpsid	i
  while (1)
 8001c2e:	e7fe      	b.n	8001c2e <main+0x216>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8001c30:	f04f 0900 	mov.w	r9, #0
 8001c34:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8001c38:	e9cd 9a1c 	strd	r9, sl, [sp, #112]	; 0x70
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8001c3c:	f04f 0a00 	mov.w	sl, #0
 8001c40:	f04f 0901 	mov.w	r9, #1
 8001c44:	e9cd 9a18 	strd	r9, sl, [sp, #96]	; 0x60
 8001c48:	f04f 0b01 	mov.w	fp, #1
 8001c4c:	f04f 0a04 	mov.w	sl, #4
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001c50:	a916      	add	r1, sp, #88	; 0x58
 8001c52:	4620      	mov	r0, r4
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8001c54:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001c58:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001c5c:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001c60:	f004 f860 	bl	8005d24 <HAL_ADCEx_InjectedConfigChannel>
 8001c64:	b108      	cbz	r0, 8001c6a <main+0x252>
 8001c66:	b672      	cpsid	i
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <main+0x250>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_4;
 8001c6e:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001c72:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c76:	f003 ff9b 	bl	8005bb0 <HAL_ADC_ConfigChannel>
 8001c7a:	4604      	mov	r4, r0
 8001c7c:	b108      	cbz	r0, 8001c82 <main+0x26a>
 8001c7e:	b672      	cpsid	i
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <main+0x268>
  htim1.Instance = TIM1;
 8001c82:	4d2a      	ldr	r5, [pc, #168]	; (8001d2c <main+0x314>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001c84:	9008      	str	r0, [sp, #32]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c86:	4601      	mov	r1, r0
 8001c88:	4632      	mov	r2, r6
 8001c8a:	a816      	add	r0, sp, #88	; 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c8c:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8001c90:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8001c94:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001c98:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8001c9c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca0:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ca2:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca4:	9407      	str	r4, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ca6:	f007 fc39 	bl	800951c <memset>
  htim1.Instance = TIM1;
 8001caa:	4921      	ldr	r1, [pc, #132]	; (8001d30 <main+0x318>)
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8001cac:	606c      	str	r4, [r5, #4]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8001cae:	f241 1294 	movw	r2, #4500	; 0x1194
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001cb2:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cb6:	4628      	mov	r0, r5
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb8:	e9c5 8405 	strd	r8, r4, [r5, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001cbc:	e9c5 2303 	strd	r2, r3, [r5, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001cc0:	60ae      	str	r6, [r5, #8]
  htim1.Instance = TIM1;
 8001cc2:	6029      	str	r1, [r5, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cc4:	f004 ffd8 	bl	8006c78 <HAL_TIM_Base_Init>
 8001cc8:	b108      	cbz	r0, 8001cce <main+0x2b6>
 8001cca:	b672      	cpsid	i
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <main+0x2b4>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cce:	4628      	mov	r0, r5
 8001cd0:	f005 f862 	bl	8006d98 <HAL_TIM_PWM_Init>
 8001cd4:	b108      	cbz	r0, 8001cda <main+0x2c2>
 8001cd6:	b672      	cpsid	i
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <main+0x2c0>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001cda:	2206      	movs	r2, #6
 8001cdc:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001cde:	a908      	add	r1, sp, #32
 8001ce0:	4628      	mov	r0, r5
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001ce2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001ce6:	f005 faaf 	bl	8007248 <HAL_TIM_SlaveConfigSynchro>
 8001cea:	b108      	cbz	r0, 8001cf0 <main+0x2d8>
 8001cec:	b672      	cpsid	i
  while (1)
 8001cee:	e7fe      	b.n	8001cee <main+0x2d6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cf4:	480d      	ldr	r0, [pc, #52]	; (8001d2c <main+0x314>)
 8001cf6:	a906      	add	r1, sp, #24
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001cf8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cfc:	f005 fb30 	bl	8007360 <HAL_TIMEx_MasterConfigSynchronization>
 8001d00:	4602      	mov	r2, r0
 8001d02:	b1b8      	cbz	r0, 8001d34 <main+0x31c>
 8001d04:	b672      	cpsid	i
  while (1)
 8001d06:	e7fe      	b.n	8001d06 <main+0x2ee>
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40020400 	.word	0x40020400
 8001d10:	20000890 	.word	0x20000890
 8001d14:	0f000001 	.word	0x0f000001
 8001d18:	40020000 	.word	0x40020000
 8001d1c:	40020800 	.word	0x40020800
 8001d20:	40012000 	.word	0x40012000
 8001d24:	200007f8 	.word	0x200007f8
 8001d28:	40012100 	.word	0x40012100
 8001d2c:	200008ec 	.word	0x200008ec
 8001d30:	40010000 	.word	0x40010000
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d34:	2600      	movs	r6, #0
 8001d36:	2700      	movs	r7, #0
 8001d38:	2460      	movs	r4, #96	; 0x60
 8001d3a:	2500      	movs	r5, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d3c:	484d      	ldr	r0, [pc, #308]	; (8001e74 <main+0x45c>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d3e:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d40:	a90e      	add	r1, sp, #56	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d42:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8001d46:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8001d4a:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d4e:	f005 f8b1 	bl	8006eb4 <HAL_TIM_PWM_ConfigChannel>
 8001d52:	b108      	cbz	r0, 8001d58 <main+0x340>
 8001d54:	b672      	cpsid	i
  while (1)
 8001d56:	e7fe      	b.n	8001d56 <main+0x33e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d58:	4846      	ldr	r0, [pc, #280]	; (8001e74 <main+0x45c>)
 8001d5a:	2204      	movs	r2, #4
 8001d5c:	a90e      	add	r1, sp, #56	; 0x38
 8001d5e:	f005 f8a9 	bl	8006eb4 <HAL_TIM_PWM_ConfigChannel>
 8001d62:	b108      	cbz	r0, 8001d68 <main+0x350>
 8001d64:	b672      	cpsid	i
  while (1)
 8001d66:	e7fe      	b.n	8001d66 <main+0x34e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d68:	4842      	ldr	r0, [pc, #264]	; (8001e74 <main+0x45c>)
 8001d6a:	2208      	movs	r2, #8
 8001d6c:	a90e      	add	r1, sp, #56	; 0x38
 8001d6e:	f005 f8a1 	bl	8006eb4 <HAL_TIM_PWM_ConfigChannel>
 8001d72:	b108      	cbz	r0, 8001d78 <main+0x360>
 8001d74:	b672      	cpsid	i
  while (1)
 8001d76:	e7fe      	b.n	8001d76 <main+0x35e>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001d78:	2470      	movs	r4, #112	; 0x70
 8001d7a:	f241 1593 	movw	r5, #4499	; 0x1193
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d7e:	483d      	ldr	r0, [pc, #244]	; (8001e74 <main+0x45c>)
 8001d80:	220c      	movs	r2, #12
 8001d82:	a90e      	add	r1, sp, #56	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001d84:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d88:	f005 f894 	bl	8006eb4 <HAL_TIM_PWM_ConfigChannel>
 8001d8c:	b108      	cbz	r0, 8001d92 <main+0x37a>
 8001d8e:	b672      	cpsid	i
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <main+0x378>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001d92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d9a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8001d9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001da2:	2348      	movs	r3, #72	; 0x48
 8001da4:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001da8:	901d      	str	r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001daa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001db2:	4830      	ldr	r0, [pc, #192]	; (8001e74 <main+0x45c>)
 8001db4:	a916      	add	r1, sp, #88	; 0x58
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001db6:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001dba:	f005 fb13 	bl	80073e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001dbe:	4604      	mov	r4, r0
 8001dc0:	b108      	cbz	r0, 8001dc6 <main+0x3ae>
 8001dc2:	b672      	cpsid	i
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <main+0x3ac>
  htim2.Instance = TIM2;
 8001dc6:	4d2c      	ldr	r5, [pc, #176]	; (8001e78 <main+0x460>)
  HAL_TIM_MspPostInit(&htim1);
 8001dc8:	482a      	ldr	r0, [pc, #168]	; (8001e74 <main+0x45c>)
 8001dca:	f002 fee9 	bl	8004ba0 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8001dce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dd2:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dd4:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 8001dd8:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ddc:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de0:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de4:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de6:	61ac      	str	r4, [r5, #24]
  htim2.Instance = TIM2;
 8001de8:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dea:	f004 ff45 	bl	8006c78 <HAL_TIM_Base_Init>
 8001dee:	b108      	cbz	r0, 8001df4 <main+0x3dc>
 8001df0:	b672      	cpsid	i
  while (1)
 8001df2:	e7fe      	b.n	8001df2 <main+0x3da>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001df8:	a916      	add	r1, sp, #88	; 0x58
 8001dfa:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dfc:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dfe:	f005 f973 	bl	80070e8 <HAL_TIM_ConfigClockSource>
 8001e02:	b108      	cbz	r0, 8001e08 <main+0x3f0>
 8001e04:	b672      	cpsid	i
  while (1)
 8001e06:	e7fe      	b.n	8001e06 <main+0x3ee>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e08:	a90e      	add	r1, sp, #56	; 0x38
 8001e0a:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e0c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e10:	f005 faa6 	bl	8007360 <HAL_TIMEx_MasterConfigSynchronization>
 8001e14:	4602      	mov	r2, r0
 8001e16:	b108      	cbz	r0, 8001e1c <main+0x404>
 8001e18:	b672      	cpsid	i
  while (1)
 8001e1a:	e7fe      	b.n	8001e1a <main+0x402>
  huart2.Instance = USART2;
 8001e1c:	4817      	ldr	r0, [pc, #92]	; (8001e7c <main+0x464>)
 8001e1e:	4d18      	ldr	r5, [pc, #96]	; (8001e80 <main+0x468>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e20:	6082      	str	r2, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8001e22:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e26:	210c      	movs	r1, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e28:	e9c0 2203 	strd	r2, r2, [r0, #12]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e2c:	e9c0 2206 	strd	r2, r2, [r0, #24]
  huart2.Init.BaudRate = 115200;
 8001e30:	e9c0 5400 	strd	r5, r4, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e34:	6141      	str	r1, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e36:	f005 faff 	bl	8007438 <HAL_UART_Init>
 8001e3a:	b108      	cbz	r0, 8001e40 <main+0x428>
 8001e3c:	b672      	cpsid	i
  while (1)
 8001e3e:	e7fe      	b.n	8001e3e <main+0x426>
  MX_MotorControl_Init();
 8001e40:	f002 fb9c 	bl	800457c <MX_MotorControl_Init>
  hcan1.Instance = CAN1;
 8001e44:	480f      	ldr	r0, [pc, #60]	; (8001e84 <main+0x46c>)
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <main+0x470>)
 8001e48:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 5;
 8001e4a:	2305      	movs	r3, #5
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001e4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  hcan1.Init.Prescaler = 5;
 8001e50:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001e52:	2300      	movs	r3, #0
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001e54:	f44f 2460 	mov.w	r4, #917504	; 0xe0000
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001e58:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001e5c:	6182      	str	r2, [r0, #24]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001e5e:	8383      	strh	r3, [r0, #28]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001e60:	e9c0 4104 	strd	r4, r1, [r0, #16]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e64:	e9c0 3302 	strd	r3, r3, [r0, #8]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001e68:	f004 f848 	bl	8005efc <HAL_CAN_Init>
 8001e6c:	4604      	mov	r4, r0
 8001e6e:	b168      	cbz	r0, 8001e8c <main+0x474>
 8001e70:	b672      	cpsid	i
  while (1)
 8001e72:	e7fe      	b.n	8001e72 <main+0x45a>
 8001e74:	200008ec 	.word	0x200008ec
 8001e78:	2000096c 	.word	0x2000096c
 8001e7c:	200009b8 	.word	0x200009b8
 8001e80:	40004400 	.word	0x40004400
 8001e84:	200009fc 	.word	0x200009fc
 8001e88:	40006400 	.word	0x40006400
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	2102      	movs	r1, #2
 8001e90:	2012      	movs	r0, #18
 8001e92:	f004 fa17 	bl	80062c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001e96:	2012      	movs	r0, #18
 8001e98:	f004 fa4c 	bl	8006334 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001e9c:	4622      	mov	r2, r4
 8001e9e:	4621      	mov	r1, r4
 8001ea0:	2019      	movs	r0, #25
 8001ea2:	f004 fa0f 	bl	80062c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ea6:	2019      	movs	r0, #25
 8001ea8:	f004 fa44 	bl	8006334 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 1);
 8001eac:	2201      	movs	r2, #1
 8001eae:	2104      	movs	r1, #4
 8001eb0:	2018      	movs	r0, #24
 8001eb2:	f004 fa07 	bl	80062c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001eb6:	2018      	movs	r0, #24
 8001eb8:	f004 fa3c 	bl	8006334 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8001ebc:	4622      	mov	r2, r4
 8001ebe:	2103      	movs	r1, #3
 8001ec0:	201c      	movs	r0, #28
 8001ec2:	f004 f9ff 	bl	80062c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ec6:	201c      	movs	r0, #28
 8001ec8:	f004 fa34 	bl	8006334 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8001ecc:	2201      	movs	r2, #1
 8001ece:	2103      	movs	r1, #3
 8001ed0:	2026      	movs	r0, #38	; 0x26
 8001ed2:	f004 f9f7 	bl	80062c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ed6:	2026      	movs	r0, #38	; 0x26
 8001ed8:	f004 fa2c 	bl	8006334 <HAL_NVIC_EnableIRQ>
  state000();
 8001edc:	f7ff f8f4 	bl	80010c8 <state000>
 8001ee0:	4dcf      	ldr	r5, [pc, #828]	; (8002220 <main+0x808>)
 8001ee2:	f8df 9370 	ldr.w	r9, [pc, #880]	; 8002254 <main+0x83c>
 8001ee6:	f8df 8370 	ldr.w	r8, [pc, #880]	; 8002258 <main+0x840>
 8001eea:	f8df b370 	ldr.w	fp, [pc, #880]	; 800225c <main+0x844>
 8001eee:	4ccd      	ldr	r4, [pc, #820]	; (8002224 <main+0x80c>)
 8001ef0:	f8df a36c 	ldr.w	sl, [pc, #876]	; 8002260 <main+0x848>
	  switch (state)
 8001ef4:	882b      	ldrh	r3, [r5, #0]
 8001ef6:	f5a3 7295 	sub.w	r2, r3, #298	; 0x12a
 8001efa:	fa1f fe82 	uxth.w	lr, r2
 8001efe:	f5a3 70c8 	sub.w	r0, r3, #400	; 0x190
 8001f02:	f1a3 0164 	sub.w	r1, r3, #100	; 0x64
 8001f06:	f240 2c5d 	movw	ip, #605	; 0x25d
 8001f0a:	f240 27bb 	movw	r7, #699	; 0x2bb
 8001f0e:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8001f12:	f080 8628 	bcs.w	8002b66 <main+0x114e>
 8001f16:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001f1a:	f080 81a3 	bcs.w	8002264 <main+0x84c>
 8001f1e:	2bca      	cmp	r3, #202	; 0xca
 8001f20:	f200 8564 	bhi.w	80029ec <main+0xfd4>
 8001f24:	2b63      	cmp	r3, #99	; 0x63
 8001f26:	f240 8553 	bls.w	80029d0 <main+0xfb8>
 8001f2a:	2966      	cmp	r1, #102	; 0x66
 8001f2c:	d8ef      	bhi.n	8001f0e <main+0x4f6>
 8001f2e:	a601      	add	r6, pc, #4	; (adr r6, 8001f34 <main+0x51c>)
 8001f30:	f856 f021 	ldr.w	pc, [r6, r1, lsl #2]
 8001f34:	08002205 	.word	0x08002205
 8001f38:	080021d7 	.word	0x080021d7
 8001f3c:	080021c3 	.word	0x080021c3
 8001f40:	08002189 	.word	0x08002189
 8001f44:	08002149 	.word	0x08002149
 8001f48:	08002175 	.word	0x08002175
 8001f4c:	08002135 	.word	0x08002135
 8001f50:	08002121 	.word	0x08002121
 8001f54:	0800210d 	.word	0x0800210d
 8001f58:	080020f9 	.word	0x080020f9
 8001f5c:	080020f3 	.word	0x080020f3
 8001f60:	080020ed 	.word	0x080020ed
 8001f64:	08001f0f 	.word	0x08001f0f
 8001f68:	08001f0f 	.word	0x08001f0f
 8001f6c:	08001f0f 	.word	0x08001f0f
 8001f70:	08001f0f 	.word	0x08001f0f
 8001f74:	08001f0f 	.word	0x08001f0f
 8001f78:	08001f0f 	.word	0x08001f0f
 8001f7c:	08001f0f 	.word	0x08001f0f
 8001f80:	08001f0f 	.word	0x08001f0f
 8001f84:	08001f0f 	.word	0x08001f0f
 8001f88:	08001f0f 	.word	0x08001f0f
 8001f8c:	08001f0f 	.word	0x08001f0f
 8001f90:	08001f0f 	.word	0x08001f0f
 8001f94:	08001f0f 	.word	0x08001f0f
 8001f98:	08001f0f 	.word	0x08001f0f
 8001f9c:	08001f0f 	.word	0x08001f0f
 8001fa0:	08001f0f 	.word	0x08001f0f
 8001fa4:	08001f0f 	.word	0x08001f0f
 8001fa8:	08001f0f 	.word	0x08001f0f
 8001fac:	08001f0f 	.word	0x08001f0f
 8001fb0:	08001f0f 	.word	0x08001f0f
 8001fb4:	08001f0f 	.word	0x08001f0f
 8001fb8:	08001f0f 	.word	0x08001f0f
 8001fbc:	08001f0f 	.word	0x08001f0f
 8001fc0:	08001f0f 	.word	0x08001f0f
 8001fc4:	08001f0f 	.word	0x08001f0f
 8001fc8:	08001f0f 	.word	0x08001f0f
 8001fcc:	08001f0f 	.word	0x08001f0f
 8001fd0:	08001f0f 	.word	0x08001f0f
 8001fd4:	08001f0f 	.word	0x08001f0f
 8001fd8:	08001f0f 	.word	0x08001f0f
 8001fdc:	08001f0f 	.word	0x08001f0f
 8001fe0:	08001f0f 	.word	0x08001f0f
 8001fe4:	08001f0f 	.word	0x08001f0f
 8001fe8:	08001f0f 	.word	0x08001f0f
 8001fec:	08001f0f 	.word	0x08001f0f
 8001ff0:	08001f0f 	.word	0x08001f0f
 8001ff4:	08001f0f 	.word	0x08001f0f
 8001ff8:	08001f0f 	.word	0x08001f0f
 8001ffc:	08001f0f 	.word	0x08001f0f
 8002000:	08001f0f 	.word	0x08001f0f
 8002004:	08001f0f 	.word	0x08001f0f
 8002008:	08001f0f 	.word	0x08001f0f
 800200c:	08001f0f 	.word	0x08001f0f
 8002010:	08001f0f 	.word	0x08001f0f
 8002014:	08001f0f 	.word	0x08001f0f
 8002018:	08001f0f 	.word	0x08001f0f
 800201c:	08001f0f 	.word	0x08001f0f
 8002020:	08001f0f 	.word	0x08001f0f
 8002024:	08001f0f 	.word	0x08001f0f
 8002028:	08001f0f 	.word	0x08001f0f
 800202c:	08001f0f 	.word	0x08001f0f
 8002030:	08001f0f 	.word	0x08001f0f
 8002034:	08001f0f 	.word	0x08001f0f
 8002038:	08001f0f 	.word	0x08001f0f
 800203c:	08001f0f 	.word	0x08001f0f
 8002040:	08001f0f 	.word	0x08001f0f
 8002044:	08001f0f 	.word	0x08001f0f
 8002048:	08001f0f 	.word	0x08001f0f
 800204c:	08001f0f 	.word	0x08001f0f
 8002050:	08001f0f 	.word	0x08001f0f
 8002054:	08001f0f 	.word	0x08001f0f
 8002058:	08001f0f 	.word	0x08001f0f
 800205c:	08001f0f 	.word	0x08001f0f
 8002060:	08001f0f 	.word	0x08001f0f
 8002064:	08001f0f 	.word	0x08001f0f
 8002068:	08001f0f 	.word	0x08001f0f
 800206c:	08001f0f 	.word	0x08001f0f
 8002070:	08001f0f 	.word	0x08001f0f
 8002074:	08001f0f 	.word	0x08001f0f
 8002078:	08001f0f 	.word	0x08001f0f
 800207c:	08001f0f 	.word	0x08001f0f
 8002080:	08001f0f 	.word	0x08001f0f
 8002084:	08001f0f 	.word	0x08001f0f
 8002088:	08001f0f 	.word	0x08001f0f
 800208c:	08001f0f 	.word	0x08001f0f
 8002090:	08001f0f 	.word	0x08001f0f
 8002094:	08001f0f 	.word	0x08001f0f
 8002098:	08001f0f 	.word	0x08001f0f
 800209c:	08001f0f 	.word	0x08001f0f
 80020a0:	08001f0f 	.word	0x08001f0f
 80020a4:	08001f0f 	.word	0x08001f0f
 80020a8:	08001f0f 	.word	0x08001f0f
 80020ac:	08001f0f 	.word	0x08001f0f
 80020b0:	08001f0f 	.word	0x08001f0f
 80020b4:	08001f0f 	.word	0x08001f0f
 80020b8:	08001f0f 	.word	0x08001f0f
 80020bc:	08001f0f 	.word	0x08001f0f
 80020c0:	08001f0f 	.word	0x08001f0f
 80020c4:	080020e7 	.word	0x080020e7
 80020c8:	080020d7 	.word	0x080020d7
 80020cc:	080020d1 	.word	0x080020d1
	  	  case 202: state202(); break;
 80020d0:	f7ff f822 	bl	8001118 <state202>
 80020d4:	e70e      	b.n	8001ef4 <main+0x4dc>
	currentWDTime = HAL_GetTick();
 80020d6:	f003 fca5 	bl	8005a24 <HAL_GetTick>
 80020da:	4a53      	ldr	r2, [pc, #332]	; (8002228 <main+0x810>)
	state = 298; //Potentiometer implementation
 80020dc:	f44f 7395 	mov.w	r3, #298	; 0x12a
	currentWDTime = HAL_GetTick();
 80020e0:	8010      	strh	r0, [r2, #0]
	state = 298; //Potentiometer implementation
 80020e2:	802b      	strh	r3, [r5, #0]
}
 80020e4:	e706      	b.n	8001ef4 <main+0x4dc>
	state = 201;
 80020e6:	23c9      	movs	r3, #201	; 0xc9
 80020e8:	802b      	strh	r3, [r5, #0]
}
 80020ea:	e703      	b.n	8001ef4 <main+0x4dc>
	state = 200;
 80020ec:	23c8      	movs	r3, #200	; 0xc8
 80020ee:	802b      	strh	r3, [r5, #0]
}
 80020f0:	e700      	b.n	8001ef4 <main+0x4dc>
	state = 111;
 80020f2:	236f      	movs	r3, #111	; 0x6f
 80020f4:	802b      	strh	r3, [r5, #0]
}
 80020f6:	e6fd      	b.n	8001ef4 <main+0x4dc>
	if (RCM_GetUserConvState() == RCM_USERCONV_IDLE)
 80020f8:	f002 fc26 	bl	8004948 <RCM_GetUserConvState>
 80020fc:	2800      	cmp	r0, #0
 80020fe:	f040 865b 	bne.w	8002db8 <main+0x13a0>
		RCM_RequestUserConv(ThermBLHandle);
 8002102:	4b4a      	ldr	r3, [pc, #296]	; (800222c <main+0x814>)
 8002104:	7818      	ldrb	r0, [r3, #0]
 8002106:	f002 fbd5 	bl	80048b4 <RCM_RequestUserConv>
 800210a:	e6f3      	b.n	8001ef4 <main+0x4dc>
	if (RCM_GetUserConvState() == RCM_USERCONV_IDLE)
 800210c:	f002 fc1c 	bl	8004948 <RCM_GetUserConvState>
 8002110:	2800      	cmp	r0, #0
 8002112:	f040 86b4 	bne.w	8002e7e <main+0x1466>
		RCM_RequestUserConv(ThermBHHandle);
 8002116:	4b46      	ldr	r3, [pc, #280]	; (8002230 <main+0x818>)
 8002118:	7818      	ldrb	r0, [r3, #0]
 800211a:	f002 fbcb 	bl	80048b4 <RCM_RequestUserConv>
 800211e:	e6e9      	b.n	8001ef4 <main+0x4dc>
	if (RCM_GetUserConvState() == RCM_USERCONV_IDLE)
 8002120:	f002 fc12 	bl	8004948 <RCM_GetUserConvState>
 8002124:	2800      	cmp	r0, #0
 8002126:	f040 83d1 	bne.w	80028cc <main+0xeb4>
		RCM_RequestUserConv(ThermALHandle);
 800212a:	4b42      	ldr	r3, [pc, #264]	; (8002234 <main+0x81c>)
 800212c:	7818      	ldrb	r0, [r3, #0]
 800212e:	f002 fbc1 	bl	80048b4 <RCM_RequestUserConv>
 8002132:	e6df      	b.n	8001ef4 <main+0x4dc>
	if (RCM_GetUserConvState() == RCM_USERCONV_IDLE)
 8002134:	f002 fc08 	bl	8004948 <RCM_GetUserConvState>
 8002138:	2800      	cmp	r0, #0
 800213a:	f040 8703 	bne.w	8002f44 <main+0x152c>
		RCM_RequestUserConv(ThermAHHandle);
 800213e:	4b3e      	ldr	r3, [pc, #248]	; (8002238 <main+0x820>)
 8002140:	7818      	ldrb	r0, [r3, #0]
 8002142:	f002 fbb7 	bl	80048b4 <RCM_RequestUserConv>
 8002146:	e6d5      	b.n	8001ef4 <main+0x4dc>
	CANTx_phaseCurrent.phaseCurrent_float = ((float) MC_GetPhaseCurrentAmplitudeMotor1()) * S16ACONVFACTORINV;
 8002148:	f000 ffda 	bl	8003100 <MC_GetPhaseCurrentAmplitudeMotor1>
 800214c:	ee07 0a90 	vmov	s15, r0
 8002150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002154:	ee17 0a90 	vmov	r0, s15
 8002158:	f7fe fa16 	bl	8000588 <__aeabi_f2d>
 800215c:	a32c      	add	r3, pc, #176	; (adr r3, 8002210 <main+0x7f8>)
 800215e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002162:	f7fe fa69 	bl	8000638 <__aeabi_dmul>
 8002166:	f7fe fd5f 	bl	8000c28 <__aeabi_d2f>
 800216a:	4a34      	ldr	r2, [pc, #208]	; (800223c <main+0x824>)
	state = 105;
 800216c:	2369      	movs	r3, #105	; 0x69
	CANTx_phaseCurrent.phaseCurrent_float = ((float) MC_GetPhaseCurrentAmplitudeMotor1()) * S16ACONVFACTORINV;
 800216e:	6010      	str	r0, [r2, #0]
	state = 105;
 8002170:	802b      	strh	r3, [r5, #0]
}
 8002172:	e6bf      	b.n	8001ef4 <main+0x4dc>
	if (RCM_GetUserConvState() == RCM_USERCONV_IDLE)
 8002174:	f002 fbe8 	bl	8004948 <RCM_GetUserConvState>
 8002178:	2800      	cmp	r0, #0
 800217a:	f040 8730 	bne.w	8002fde <main+0x15c6>
		RCM_RequestUserConv(ThermMTRHandle);
 800217e:	4b30      	ldr	r3, [pc, #192]	; (8002240 <main+0x828>)
 8002180:	7818      	ldrb	r0, [r3, #0]
 8002182:	f002 fb97 	bl	80048b4 <RCM_RequestUserConv>
 8002186:	e6b5      	b.n	8001ef4 <main+0x4dc>
	CANTx_mtrVelocity.mtrVelocity_float = (float) 6*MC_GetMecSpeedAverageMotor1(); //Multiply by 6 to convert from dHz to RPM;
 8002188:	f000 ffb4 	bl	80030f4 <MC_GetMecSpeedAverageMotor1>
 800218c:	ee07 0a90 	vmov	s15, r0
 8002190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002194:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800219c:	4b29      	ldr	r3, [pc, #164]	; (8002244 <main+0x82c>)
	CANTx_carVelocity.carVelocity_float = CANTx_mtrVelocity.mtrVelocity_float * WHEELRAD * PI / 30.0; //[m/s]
 800219e:	ee17 0a90 	vmov	r0, s15
	CANTx_mtrVelocity.mtrVelocity_float = (float) 6*MC_GetMecSpeedAverageMotor1(); //Multiply by 6 to convert from dHz to RPM;
 80021a2:	edc3 7a00 	vstr	s15, [r3]
	CANTx_carVelocity.carVelocity_float = CANTx_mtrVelocity.mtrVelocity_float * WHEELRAD * PI / 30.0; //[m/s]
 80021a6:	f7fe f9ef 	bl	8000588 <__aeabi_f2d>
 80021aa:	a31b      	add	r3, pc, #108	; (adr r3, 8002218 <main+0x800>)
 80021ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b0:	f7fe fa42 	bl	8000638 <__aeabi_dmul>
 80021b4:	f7fe fd38 	bl	8000c28 <__aeabi_d2f>
 80021b8:	4a23      	ldr	r2, [pc, #140]	; (8002248 <main+0x830>)
	state = 104;
 80021ba:	2368      	movs	r3, #104	; 0x68
	CANTx_carVelocity.carVelocity_float = CANTx_mtrVelocity.mtrVelocity_float * WHEELRAD * PI / 30.0; //[m/s]
 80021bc:	6010      	str	r0, [r2, #0]
	state = 104;
 80021be:	802b      	strh	r3, [r5, #0]
}
 80021c0:	e698      	b.n	8001ef4 <main+0x4dc>
	if (RCM_GetUserConvState() == RCM_USERCONV_IDLE)
 80021c2:	f002 fbc1 	bl	8004948 <RCM_GetUserConvState>
 80021c6:	2800      	cmp	r0, #0
 80021c8:	f040 83e3 	bne.w	8002992 <main+0xf7a>
		RCM_RequestUserConv(DCCurrHandle);
 80021cc:	4b1f      	ldr	r3, [pc, #124]	; (800224c <main+0x834>)
 80021ce:	7818      	ldrb	r0, [r3, #0]
 80021d0:	f002 fb70 	bl	80048b4 <RCM_RequestUserConv>
 80021d4:	e68e      	b.n	8001ef4 <main+0x4dc>
	CANTx_busVoltage.busVoltage_float = ((float) PQD_MotorPowMeasM1.pVBS->AvBusVoltage_d) * ((float) PQD_MotorPowMeasM1.pVBS->ConversionFactor) / 65536.0;
 80021d6:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
 80021da:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8002250 <main+0x838>
 80021de:	88da      	ldrh	r2, [r3, #6]
 80021e0:	885b      	ldrh	r3, [r3, #2]
 80021e2:	ee07 2a10 	vmov	s14, r2
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80021ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
	state = 102;
 80021f2:	2366      	movs	r3, #102	; 0x66
	CANTx_busVoltage.busVoltage_float = ((float) PQD_MotorPowMeasM1.pVBS->AvBusVoltage_d) * ((float) PQD_MotorPowMeasM1.pVBS->ConversionFactor) / 65536.0;
 80021f4:	ee67 7a27 	vmul.f32	s15, s14, s15
	state = 102;
 80021f8:	802b      	strh	r3, [r5, #0]
	CANTx_busVoltage.busVoltage_float = ((float) PQD_MotorPowMeasM1.pVBS->AvBusVoltage_d) * ((float) PQD_MotorPowMeasM1.pVBS->ConversionFactor) / 65536.0;
 80021fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021fe:	edc8 7a00 	vstr	s15, [r8]
}
 8002202:	e677      	b.n	8001ef4 <main+0x4dc>
	state = 101;
 8002204:	2365      	movs	r3, #101	; 0x65
 8002206:	802b      	strh	r3, [r5, #0]
}
 8002208:	e674      	b.n	8001ef4 <main+0x4dc>
 800220a:	bf00      	nop
 800220c:	f3af 8000 	nop.w
 8002210:	db6db6db 	.word	0xdb6db6db
 8002214:	3f456db6 	.word	0x3f456db6
 8002218:	a4298729 	.word	0xa4298729
 800221c:	3f3b700f 	.word	0x3f3b700f
 8002220:	20000774 	.word	0x20000774
 8002224:	20000a44 	.word	0x20000a44
 8002228:	20000760 	.word	0x20000760
 800222c:	2000086c 	.word	0x2000086c
 8002230:	20000844 	.word	0x20000844
 8002234:	200007f0 	.word	0x200007f0
 8002238:	200007e8 	.word	0x200007e8
 800223c:	200007d8 	.word	0x200007d8
 8002240:	200007d0 	.word	0x200007d0
 8002244:	200007ec 	.word	0x200007ec
 8002248:	20000a24 	.word	0x20000a24
 800224c:	20000a40 	.word	0x20000a40
 8002250:	37800000 	.word	0x37800000
 8002254:	20000178 	.word	0x20000178
 8002258:	200007b8 	.word	0x200007b8
 800225c:	20000a34 	.word	0x20000a34
 8002260:	2000075c 	.word	0x2000075c
 8002264:	2869      	cmp	r0, #105	; 0x69
 8002266:	f63f ae52 	bhi.w	8001f0e <main+0x4f6>
 800226a:	a601      	add	r6, pc, #4	; (adr r6, 8002270 <main+0x858>)
 800226c:	f856 f020 	ldr.w	pc, [r6, r0, lsl #2]
 8002270:	0800281f 	.word	0x0800281f
 8002274:	080027bb 	.word	0x080027bb
 8002278:	08002735 	.word	0x08002735
 800227c:	0800265b 	.word	0x0800265b
 8002280:	080025df 	.word	0x080025df
 8002284:	080025d9 	.word	0x080025d9
 8002288:	080025d3 	.word	0x080025d3
 800228c:	080025a5 	.word	0x080025a5
 8002290:	08001f0f 	.word	0x08001f0f
 8002294:	08001f0f 	.word	0x08001f0f
 8002298:	08001f0f 	.word	0x08001f0f
 800229c:	08001f0f 	.word	0x08001f0f
 80022a0:	08001f0f 	.word	0x08001f0f
 80022a4:	08001f0f 	.word	0x08001f0f
 80022a8:	08001f0f 	.word	0x08001f0f
 80022ac:	08001f0f 	.word	0x08001f0f
 80022b0:	08001f0f 	.word	0x08001f0f
 80022b4:	08001f0f 	.word	0x08001f0f
 80022b8:	08001f0f 	.word	0x08001f0f
 80022bc:	08001f0f 	.word	0x08001f0f
 80022c0:	08001f0f 	.word	0x08001f0f
 80022c4:	08001f0f 	.word	0x08001f0f
 80022c8:	08001f0f 	.word	0x08001f0f
 80022cc:	08001f0f 	.word	0x08001f0f
 80022d0:	08001f0f 	.word	0x08001f0f
 80022d4:	08001f0f 	.word	0x08001f0f
 80022d8:	08001f0f 	.word	0x08001f0f
 80022dc:	08001f0f 	.word	0x08001f0f
 80022e0:	08001f0f 	.word	0x08001f0f
 80022e4:	08001f0f 	.word	0x08001f0f
 80022e8:	08001f0f 	.word	0x08001f0f
 80022ec:	08001f0f 	.word	0x08001f0f
 80022f0:	08001f0f 	.word	0x08001f0f
 80022f4:	08001f0f 	.word	0x08001f0f
 80022f8:	08001f0f 	.word	0x08001f0f
 80022fc:	08001f0f 	.word	0x08001f0f
 8002300:	08001f0f 	.word	0x08001f0f
 8002304:	08001f0f 	.word	0x08001f0f
 8002308:	08001f0f 	.word	0x08001f0f
 800230c:	08001f0f 	.word	0x08001f0f
 8002310:	08001f0f 	.word	0x08001f0f
 8002314:	08001f0f 	.word	0x08001f0f
 8002318:	08001f0f 	.word	0x08001f0f
 800231c:	08001f0f 	.word	0x08001f0f
 8002320:	08001f0f 	.word	0x08001f0f
 8002324:	08001f0f 	.word	0x08001f0f
 8002328:	08001f0f 	.word	0x08001f0f
 800232c:	08001f0f 	.word	0x08001f0f
 8002330:	08001f0f 	.word	0x08001f0f
 8002334:	08001f0f 	.word	0x08001f0f
 8002338:	08001f0f 	.word	0x08001f0f
 800233c:	08001f0f 	.word	0x08001f0f
 8002340:	08001f0f 	.word	0x08001f0f
 8002344:	08001f0f 	.word	0x08001f0f
 8002348:	08001f0f 	.word	0x08001f0f
 800234c:	08001f0f 	.word	0x08001f0f
 8002350:	08001f0f 	.word	0x08001f0f
 8002354:	08001f0f 	.word	0x08001f0f
 8002358:	08001f0f 	.word	0x08001f0f
 800235c:	08001f0f 	.word	0x08001f0f
 8002360:	08001f0f 	.word	0x08001f0f
 8002364:	08001f0f 	.word	0x08001f0f
 8002368:	08001f0f 	.word	0x08001f0f
 800236c:	08001f0f 	.word	0x08001f0f
 8002370:	08001f0f 	.word	0x08001f0f
 8002374:	08001f0f 	.word	0x08001f0f
 8002378:	08001f0f 	.word	0x08001f0f
 800237c:	08001f0f 	.word	0x08001f0f
 8002380:	08001f0f 	.word	0x08001f0f
 8002384:	08001f0f 	.word	0x08001f0f
 8002388:	08001f0f 	.word	0x08001f0f
 800238c:	08001f0f 	.word	0x08001f0f
 8002390:	08001f0f 	.word	0x08001f0f
 8002394:	08001f0f 	.word	0x08001f0f
 8002398:	08001f0f 	.word	0x08001f0f
 800239c:	08001f0f 	.word	0x08001f0f
 80023a0:	08001f0f 	.word	0x08001f0f
 80023a4:	08001f0f 	.word	0x08001f0f
 80023a8:	08001f0f 	.word	0x08001f0f
 80023ac:	08001f0f 	.word	0x08001f0f
 80023b0:	08001f0f 	.word	0x08001f0f
 80023b4:	08001f0f 	.word	0x08001f0f
 80023b8:	08001f0f 	.word	0x08001f0f
 80023bc:	08001f0f 	.word	0x08001f0f
 80023c0:	08001f0f 	.word	0x08001f0f
 80023c4:	08001f0f 	.word	0x08001f0f
 80023c8:	08001f0f 	.word	0x08001f0f
 80023cc:	08001f0f 	.word	0x08001f0f
 80023d0:	08001f0f 	.word	0x08001f0f
 80023d4:	08001f0f 	.word	0x08001f0f
 80023d8:	08001f0f 	.word	0x08001f0f
 80023dc:	08001f0f 	.word	0x08001f0f
 80023e0:	08001f0f 	.word	0x08001f0f
 80023e4:	08001f0f 	.word	0x08001f0f
 80023e8:	08001f0f 	.word	0x08001f0f
 80023ec:	08001f0f 	.word	0x08001f0f
 80023f0:	08001f0f 	.word	0x08001f0f
 80023f4:	08001f0f 	.word	0x08001f0f
 80023f8:	08001f0f 	.word	0x08001f0f
 80023fc:	0800258d 	.word	0x0800258d
 8002400:	08002585 	.word	0x08002585
 8002404:	0800257f 	.word	0x0800257f
 8002408:	08002515 	.word	0x08002515
 800240c:	08002499 	.word	0x08002499
 8002410:	0800241f 	.word	0x0800241f
 8002414:	08002419 	.word	0x08002419
	  	  case 505: state505(); break;
 8002418:	f7ff f866 	bl	80014e8 <state505>
 800241c:	e56a      	b.n	8001ef4 <main+0x4dc>
	float regenEnergy = 0.5 * CARMASS * vehicleSpeed * vehicleSpeed; //1/2 mV^2
 800241e:	4bb4      	ldr	r3, [pc, #720]	; (80026f0 <main+0xcd8>)
 8002420:	6818      	ldr	r0, [r3, #0]
 8002422:	f7fe f8b1 	bl	8000588 <__aeabi_f2d>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	f7fe f905 	bl	8000638 <__aeabi_dmul>
 800242e:	2200      	movs	r2, #0
 8002430:	4bb0      	ldr	r3, [pc, #704]	; (80026f4 <main+0xcdc>)
 8002432:	f7fe f901 	bl	8000638 <__aeabi_dmul>
 8002436:	f7fe fbf7 	bl	8000c28 <__aeabi_d2f>
 800243a:	4603      	mov	r3, r0
	float regenPower = Vbat * IREGENMAX * CANRx_current.current_float; //P = VI
 800243c:	f8d8 0000 	ldr.w	r0, [r8]
	float regenEnergy = 0.5 * CARMASS * vehicleSpeed * vehicleSpeed; //1/2 mV^2
 8002440:	ee08 3a10 	vmov	s16, r3
	float regenPower = Vbat * IREGENMAX * CANRx_current.current_float; //P = VI
 8002444:	f7fe f8a0 	bl	8000588 <__aeabi_f2d>
 8002448:	460b      	mov	r3, r1
 800244a:	49ab      	ldr	r1, [pc, #684]	; (80026f8 <main+0xce0>)
 800244c:	4602      	mov	r2, r0
 800244e:	6808      	ldr	r0, [r1, #0]
 8002450:	4616      	mov	r6, r2
 8002452:	461f      	mov	r7, r3
 8002454:	f7fe f898 	bl	8000588 <__aeabi_f2d>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4630      	mov	r0, r6
 800245e:	4639      	mov	r1, r7
 8002460:	f7fe f8ea 	bl	8000638 <__aeabi_dmul>
 8002464:	4ba5      	ldr	r3, [pc, #660]	; (80026fc <main+0xce4>)
 8002466:	2200      	movs	r2, #0
 8002468:	f7fe f8e6 	bl	8000638 <__aeabi_dmul>
 800246c:	f7fe fbdc 	bl	8000c28 <__aeabi_d2f>
	float regenTime = regenEnergy / regenPower; //[s]
 8002470:	ee07 0a90 	vmov	s15, r0
 8002474:	eec8 7a27 	vdiv.f32	s15, s16, s15
	MC_ProgramSpeedRampMotor1(0, regenTimeMS);
 8002478:	2000      	movs	r0, #0
	float regenTimeMS = regenTime * 1000.0; //[ms]
 800247a:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8002700 <main+0xce8>
 800247e:	ee67 7a87 	vmul.f32	s15, s15, s14
	MC_ProgramSpeedRampMotor1(0, regenTimeMS);
 8002482:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002486:	ee17 3a90 	vmov	r3, s15
 800248a:	b299      	uxth	r1, r3
 800248c:	f000 fe22 	bl	80030d4 <MC_ProgramSpeedRampMotor1>
	state = 505;
 8002490:	f240 13f9 	movw	r3, #505	; 0x1f9
 8002494:	802b      	strh	r3, [r5, #0]
}
 8002496:	e52d      	b.n	8001ef4 <main+0x4dc>
	float finalSpeed = userDirectionFlag * CANRx_velocity.velocity_float * 30.0 / (PI * WHEELRAD); //RPM
 8002498:	4b9a      	ldr	r3, [pc, #616]	; (8002704 <main+0xcec>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	9301      	str	r3, [sp, #4]
 800249e:	eddd 7a01 	vldr	s15, [sp, #4]
 80024a2:	4b99      	ldr	r3, [pc, #612]	; (8002708 <main+0xcf0>)
 80024a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024a8:	ed93 7a00 	vldr	s14, [r3]
 80024ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b0:	ee17 0a90 	vmov	r0, s15
 80024b4:	f7fe f868 	bl	8000588 <__aeabi_f2d>
 80024b8:	a387      	add	r3, pc, #540	; (adr r3, 80026d8 <main+0xcc0>)
 80024ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024be:	f7fe f8bb 	bl	8000638 <__aeabi_dmul>
 80024c2:	f7fe fbb1 	bl	8000c28 <__aeabi_d2f>
 80024c6:	ee08 0a10 	vmov	s16, r0
	sprintf(msg_debug, "Speed ramp value (RPM): %hu\r\n", (int) finalSpeed);
 80024ca:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80024ce:	498f      	ldr	r1, [pc, #572]	; (800270c <main+0xcf4>)
 80024d0:	488f      	ldr	r0, [pc, #572]	; (8002710 <main+0xcf8>)
 80024d2:	ee17 2a90 	vmov	r2, s15
 80024d6:	f007 f829 	bl	800952c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80024da:	488d      	ldr	r0, [pc, #564]	; (8002710 <main+0xcf8>)
 80024dc:	f7fd fe98 	bl	8000210 <strlen>
 80024e0:	f04f 33ff 	mov.w	r3, #4294967295
 80024e4:	b282      	uxth	r2, r0
 80024e6:	498a      	ldr	r1, [pc, #552]	; (8002710 <main+0xcf8>)
 80024e8:	488a      	ldr	r0, [pc, #552]	; (8002714 <main+0xcfc>)
 80024ea:	f005 f841 	bl	8007570 <HAL_UART_Transmit>
	MC_ProgramSpeedRampMotor1(finalSpeed/6.0, SPEEDRAMPTIME);
 80024ee:	ee18 0a10 	vmov	r0, s16
 80024f2:	f7fe f849 	bl	8000588 <__aeabi_f2d>
 80024f6:	a37a      	add	r3, pc, #488	; (adr r3, 80026e0 <main+0xcc8>)
 80024f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fc:	f7fe f89c 	bl	8000638 <__aeabi_dmul>
 8002500:	f7fe fb4a 	bl	8000b98 <__aeabi_d2iz>
 8002504:	2196      	movs	r1, #150	; 0x96
 8002506:	b200      	sxth	r0, r0
 8002508:	f000 fde4 	bl	80030d4 <MC_ProgramSpeedRampMotor1>
	state = 505;
 800250c:	f240 13f9 	movw	r3, #505	; 0x1f9
 8002510:	802b      	strh	r3, [r5, #0]
}
 8002512:	e4ef      	b.n	8001ef4 <main+0x4dc>
	float finalTorque = userDirectionFlag * CANRx_current.current_float * IQMAXS16A;
 8002514:	4b7b      	ldr	r3, [pc, #492]	; (8002704 <main+0xcec>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	9301      	str	r3, [sp, #4]
 800251a:	eddd 7a01 	vldr	s15, [sp, #4]
 800251e:	4b76      	ldr	r3, [pc, #472]	; (80026f8 <main+0xce0>)
 8002520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002524:	ed93 7a00 	vldr	s14, [r3]
 8002528:	ee67 7a87 	vmul.f32	s15, s15, s14
 800252c:	ee17 0a90 	vmov	r0, s15
 8002530:	f7fe f82a 	bl	8000588 <__aeabi_f2d>
 8002534:	a36c      	add	r3, pc, #432	; (adr r3, 80026e8 <main+0xcd0>)
 8002536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253a:	f7fe f87d 	bl	8000638 <__aeabi_dmul>
 800253e:	f7fe fb73 	bl	8000c28 <__aeabi_d2f>
	sprintf(msg_debug, "Torque ramp value: %hu\r\n", (int) finalTorque);
 8002542:	ee07 0a90 	vmov	s15, r0
 8002546:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800254a:	4973      	ldr	r1, [pc, #460]	; (8002718 <main+0xd00>)
 800254c:	4870      	ldr	r0, [pc, #448]	; (8002710 <main+0xcf8>)
 800254e:	ee17 2a90 	vmov	r2, s15
 8002552:	ee17 7a90 	vmov	r7, s15
 8002556:	f006 ffe9 	bl	800952c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 800255a:	486d      	ldr	r0, [pc, #436]	; (8002710 <main+0xcf8>)
 800255c:	f7fd fe58 	bl	8000210 <strlen>
 8002560:	f04f 33ff 	mov.w	r3, #4294967295
 8002564:	b282      	uxth	r2, r0
 8002566:	496a      	ldr	r1, [pc, #424]	; (8002710 <main+0xcf8>)
 8002568:	486a      	ldr	r0, [pc, #424]	; (8002714 <main+0xcfc>)
 800256a:	f005 f801 	bl	8007570 <HAL_UART_Transmit>
	MC_ProgramTorqueRampMotor1((int) finalTorque, TORQUERAMPTIME);
 800256e:	b238      	sxth	r0, r7
 8002570:	2196      	movs	r1, #150	; 0x96
 8002572:	f000 fdb7 	bl	80030e4 <MC_ProgramTorqueRampMotor1>
	state = 505;
 8002576:	f240 13f9 	movw	r3, #505	; 0x1f9
 800257a:	802b      	strh	r3, [r5, #0]
}
 800257c:	e4ba      	b.n	8001ef4 <main+0x4dc>
	  	  case 501: state501(); break;
 800257e:	f7fe fecb 	bl	8001318 <state501>
 8002582:	e4b7      	b.n	8001ef4 <main+0x4dc>
	state = 501;
 8002584:	f240 13f5 	movw	r3, #501	; 0x1f5
 8002588:	802b      	strh	r3, [r5, #0]
}
 800258a:	e4b3      	b.n	8001ef4 <main+0x4dc>
	if (CANTx_ErrorFlags > 0)
 800258c:	f8da 2000 	ldr.w	r2, [sl]
	state = 500;
 8002590:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002594:	802b      	strh	r3, [r5, #0]
	if (CANTx_ErrorFlags > 0)
 8002596:	2a00      	cmp	r2, #0
 8002598:	f000 8146 	beq.w	8002828 <main+0xe10>
		state = 600;
 800259c:	f44f 7316 	mov.w	r3, #600	; 0x258
 80025a0:	802b      	strh	r3, [r5, #0]
 80025a2:	e4a7      	b.n	8001ef4 <main+0x4dc>
	if (CANTx_busVoltage.busVoltage_float < VBUSMIN)
 80025a4:	ed98 7a00 	vldr	s14, [r8]
 80025a8:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 80025ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
	state = 499;
 80025b0:	f240 13f3 	movw	r3, #499	; 0x1f3
	if (CANTx_busVoltage.busVoltage_float < VBUSMIN)
 80025b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	state = 499;
 80025b8:	802b      	strh	r3, [r5, #0]
	if (CANTx_busVoltage.busVoltage_float < VBUSMIN)
 80025ba:	f100 814b 	bmi.w	8002854 <main+0xe3c>
		if(((CANTx_ErrorFlags>>5) & 1) == 1) //If error flag was set but no error is still present
 80025be:	f8da 3000 	ldr.w	r3, [sl]
 80025c2:	069a      	lsls	r2, r3, #26
 80025c4:	f57f ac96 	bpl.w	8001ef4 <main+0x4dc>
			CANTx_ErrorFlags &= ~(1<<5); //Clear error flag bit if it was previously set
 80025c8:	f023 0320 	bic.w	r3, r3, #32
 80025cc:	f8ca 3000 	str.w	r3, [sl]
 80025d0:	e490      	b.n	8001ef4 <main+0x4dc>
	  	  case 406: state406(); break;
 80025d2:	f7fe fe49 	bl	8001268 <state406>
 80025d6:	e48d      	b.n	8001ef4 <main+0x4dc>
	  	  case 405: state405(); break;
 80025d8:	f7fe fde4 	bl	80011a4 <state405>
 80025dc:	e48a      	b.n	8001ef4 <main+0x4dc>
	state = 405;
 80025de:	f240 1395 	movw	r3, #405	; 0x195
	if (HAL_GPIO_ReadPin(FET_OT_GPIO_Port, FET_OT_Pin) == 1)
 80025e2:	484e      	ldr	r0, [pc, #312]	; (800271c <main+0xd04>)
	state = 405;
 80025e4:	802b      	strh	r3, [r5, #0]
	if (HAL_GPIO_ReadPin(FET_OT_GPIO_Port, FET_OT_Pin) == 1)
 80025e6:	2180      	movs	r1, #128	; 0x80
 80025e8:	f003 ffd8 	bl	800659c <HAL_GPIO_ReadPin>
 80025ec:	2801      	cmp	r0, #1
 80025ee:	f47f ac81 	bne.w	8001ef4 <main+0x4dc>
	MC_StopMotor1();
 80025f2:	9001      	str	r0, [sp, #4]
 80025f4:	f000 fd68 	bl	80030c8 <MC_StopMotor1>
	HAL_GPIO_WritePin(FLT_OUT_GPIO_Port, FLT_OUT_Pin, GPIO_PIN_SET); //Set FLT_OUT high, turning on the LED
 80025f8:	9a01      	ldr	r2, [sp, #4]
 80025fa:	4849      	ldr	r0, [pc, #292]	; (8002720 <main+0xd08>)
 80025fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002600:	f003 ffd2 	bl	80065a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_DIS_GPIO_Port, DRV_DIS_Pin, GPIO_PIN_SET); //Set DRV_DIS high, disabling the FETs
 8002604:	9a01      	ldr	r2, [sp, #4]
 8002606:	4847      	ldr	r0, [pc, #284]	; (8002724 <main+0xd0c>)
 8002608:	2102      	movs	r1, #2
 800260a:	f003 ffcd 	bl	80065a8 <HAL_GPIO_WritePin>
	sprintf(msg_debug, "State %hu\r\n", state);
 800260e:	882a      	ldrh	r2, [r5, #0]
 8002610:	4945      	ldr	r1, [pc, #276]	; (8002728 <main+0xd10>)
 8002612:	483f      	ldr	r0, [pc, #252]	; (8002710 <main+0xcf8>)
 8002614:	f006 ff8a 	bl	800952c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8002618:	483d      	ldr	r0, [pc, #244]	; (8002710 <main+0xcf8>)
 800261a:	f7fd fdf9 	bl	8000210 <strlen>
 800261e:	493c      	ldr	r1, [pc, #240]	; (8002710 <main+0xcf8>)
 8002620:	b282      	uxth	r2, r0
 8002622:	f04f 33ff 	mov.w	r3, #4294967295
 8002626:	483b      	ldr	r0, [pc, #236]	; (8002714 <main+0xcfc>)
 8002628:	f004 ffa2 	bl	8007570 <HAL_UART_Transmit>
	HAL_Delay(250);
 800262c:	20fa      	movs	r0, #250	; 0xfa
 800262e:	f003 f9ff 	bl	8005a30 <HAL_Delay>
		sprintf(msg_debug, "FET OT\r\n");
 8002632:	4b3e      	ldr	r3, [pc, #248]	; (800272c <main+0xd14>)
		CANTx_ErrorFlags |= 1<<6; //FET OT: 6th bit
 8002634:	f8da 7000 	ldr.w	r7, [sl]
		sprintf(msg_debug, "FET OT\r\n");
 8002638:	cb03      	ldmia	r3!, {r0, r1}
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	6020      	str	r0, [r4, #0]
		CANTx_ErrorFlags |= 1<<6; //FET OT: 6th bit
 800263e:	f047 0740 	orr.w	r7, r7, #64	; 0x40
		sprintf(msg_debug, "FET OT\r\n");
 8002642:	6061      	str	r1, [r4, #4]
 8002644:	7223      	strb	r3, [r4, #8]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8002646:	4932      	ldr	r1, [pc, #200]	; (8002710 <main+0xcf8>)
 8002648:	4832      	ldr	r0, [pc, #200]	; (8002714 <main+0xcfc>)
		CANTx_ErrorFlags |= 1<<6; //FET OT: 6th bit
 800264a:	f8ca 7000 	str.w	r7, [sl]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 800264e:	f04f 33ff 	mov.w	r3, #4294967295
 8002652:	2208      	movs	r2, #8
 8002654:	f004 ff8c 	bl	8007570 <HAL_UART_Transmit>
 8002658:	e44c      	b.n	8001ef4 <main+0x4dc>
	state = 404;
 800265a:	f44f 73ca 	mov.w	r3, #404	; 0x194
	if (HAL_GPIO_ReadPin(HV_OV_GPIO_Port, HV_OV_Pin) == 1)
 800265e:	4831      	ldr	r0, [pc, #196]	; (8002724 <main+0xd0c>)
	state = 404;
 8002660:	802b      	strh	r3, [r5, #0]
	if (HAL_GPIO_ReadPin(HV_OV_GPIO_Port, HV_OV_Pin) == 1)
 8002662:	2140      	movs	r1, #64	; 0x40
 8002664:	f003 ff9a 	bl	800659c <HAL_GPIO_ReadPin>
 8002668:	2801      	cmp	r0, #1
 800266a:	f47f ac43 	bne.w	8001ef4 <main+0x4dc>
	MC_StopMotor1();
 800266e:	9001      	str	r0, [sp, #4]
 8002670:	f000 fd2a 	bl	80030c8 <MC_StopMotor1>
	HAL_GPIO_WritePin(FLT_OUT_GPIO_Port, FLT_OUT_Pin, GPIO_PIN_SET); //Set FLT_OUT high, turning on the LED
 8002674:	9a01      	ldr	r2, [sp, #4]
 8002676:	482a      	ldr	r0, [pc, #168]	; (8002720 <main+0xd08>)
 8002678:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800267c:	f003 ff94 	bl	80065a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_DIS_GPIO_Port, DRV_DIS_Pin, GPIO_PIN_SET); //Set DRV_DIS high, disabling the FETs
 8002680:	9a01      	ldr	r2, [sp, #4]
 8002682:	4828      	ldr	r0, [pc, #160]	; (8002724 <main+0xd0c>)
 8002684:	2102      	movs	r1, #2
 8002686:	f003 ff8f 	bl	80065a8 <HAL_GPIO_WritePin>
	sprintf(msg_debug, "State %hu\r\n", state);
 800268a:	882a      	ldrh	r2, [r5, #0]
 800268c:	4926      	ldr	r1, [pc, #152]	; (8002728 <main+0xd10>)
 800268e:	4820      	ldr	r0, [pc, #128]	; (8002710 <main+0xcf8>)
 8002690:	f006 ff4c 	bl	800952c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8002694:	481e      	ldr	r0, [pc, #120]	; (8002710 <main+0xcf8>)
 8002696:	f7fd fdbb 	bl	8000210 <strlen>
 800269a:	491d      	ldr	r1, [pc, #116]	; (8002710 <main+0xcf8>)
 800269c:	b282      	uxth	r2, r0
 800269e:	f04f 33ff 	mov.w	r3, #4294967295
 80026a2:	481c      	ldr	r0, [pc, #112]	; (8002714 <main+0xcfc>)
 80026a4:	f004 ff64 	bl	8007570 <HAL_UART_Transmit>
	HAL_Delay(250);
 80026a8:	20fa      	movs	r0, #250	; 0xfa
 80026aa:	f003 f9c1 	bl	8005a30 <HAL_Delay>
		sprintf(msg_debug, "DC BUS OV\r\n");
 80026ae:	4b20      	ldr	r3, [pc, #128]	; (8002730 <main+0xd18>)
		CANTx_ErrorFlags |= 1<<18; //HV OV: 18th bit
 80026b0:	f8da 7000 	ldr.w	r7, [sl]
		sprintf(msg_debug, "DC BUS OV\r\n");
 80026b4:	cb07      	ldmia	r3!, {r0, r1, r2}
		CANTx_ErrorFlags |= 1<<18; //HV OV: 18th bit
 80026b6:	f447 2780 	orr.w	r7, r7, #262144	; 0x40000
		sprintf(msg_debug, "DC BUS OV\r\n");
 80026ba:	6020      	str	r0, [r4, #0]
 80026bc:	6061      	str	r1, [r4, #4]
 80026be:	60a2      	str	r2, [r4, #8]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80026c0:	4913      	ldr	r1, [pc, #76]	; (8002710 <main+0xcf8>)
 80026c2:	4814      	ldr	r0, [pc, #80]	; (8002714 <main+0xcfc>)
		CANTx_ErrorFlags |= 1<<18; //HV OV: 18th bit
 80026c4:	f8ca 7000 	str.w	r7, [sl]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80026c8:	f04f 33ff 	mov.w	r3, #4294967295
 80026cc:	220b      	movs	r2, #11
 80026ce:	f004 ff4f 	bl	8007570 <HAL_UART_Transmit>
 80026d2:	e40f      	b.n	8001ef4 <main+0x4dc>
 80026d4:	f3af 8000 	nop.w
 80026d8:	efb1bb84 	.word	0xefb1bb84
 80026dc:	40a2a911 	.word	0x40a2a911
 80026e0:	55555555 	.word	0x55555555
 80026e4:	3fc55555 	.word	0x3fc55555
 80026e8:	8f4e2dd2 	.word	0x8f4e2dd2
 80026ec:	40c0e480 	.word	0x40c0e480
 80026f0:	20000a24 	.word	0x20000a24
 80026f4:	40040000 	.word	0x40040000
 80026f8:	200007c0 	.word	0x200007c0
 80026fc:	40200000 	.word	0x40200000
 8002700:	447a0000 	.word	0x447a0000
 8002704:	20000778 	.word	0x20000778
 8002708:	200007d4 	.word	0x200007d4
 800270c:	0800a268 	.word	0x0800a268
 8002710:	20000a44 	.word	0x20000a44
 8002714:	200009b8 	.word	0x200009b8
 8002718:	0800a24c 	.word	0x0800a24c
 800271c:	40020800 	.word	0x40020800
 8002720:	40020000 	.word	0x40020000
 8002724:	40020400 	.word	0x40020400
 8002728:	0800a1b8 	.word	0x0800a1b8
 800272c:	0800a1fc 	.word	0x0800a1fc
 8002730:	0800a1f0 	.word	0x0800a1f0
	state = 403;
 8002734:	f240 1393 	movw	r3, #403	; 0x193
	if (HAL_GPIO_ReadPin(MTR_OC_GPIO_Port, MTR_OC_Pin) == 0)
 8002738:	48cd      	ldr	r0, [pc, #820]	; (8002a70 <main+0x1058>)
	state = 403;
 800273a:	802b      	strh	r3, [r5, #0]
	if (HAL_GPIO_ReadPin(MTR_OC_GPIO_Port, MTR_OC_Pin) == 0)
 800273c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002740:	f003 ff2c 	bl	800659c <HAL_GPIO_ReadPin>
 8002744:	2800      	cmp	r0, #0
 8002746:	f47f abd5 	bne.w	8001ef4 <main+0x4dc>
	MC_StopMotor1();
 800274a:	f000 fcbd 	bl	80030c8 <MC_StopMotor1>
	HAL_GPIO_WritePin(FLT_OUT_GPIO_Port, FLT_OUT_Pin, GPIO_PIN_SET); //Set FLT_OUT high, turning on the LED
 800274e:	48c9      	ldr	r0, [pc, #804]	; (8002a74 <main+0x105c>)
 8002750:	2201      	movs	r2, #1
 8002752:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002756:	f003 ff27 	bl	80065a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_DIS_GPIO_Port, DRV_DIS_Pin, GPIO_PIN_SET); //Set DRV_DIS high, disabling the FETs
 800275a:	48c5      	ldr	r0, [pc, #788]	; (8002a70 <main+0x1058>)
 800275c:	2201      	movs	r2, #1
 800275e:	2102      	movs	r1, #2
 8002760:	f003 ff22 	bl	80065a8 <HAL_GPIO_WritePin>
	sprintf(msg_debug, "State %hu\r\n", state);
 8002764:	882a      	ldrh	r2, [r5, #0]
 8002766:	49c4      	ldr	r1, [pc, #784]	; (8002a78 <main+0x1060>)
 8002768:	48c4      	ldr	r0, [pc, #784]	; (8002a7c <main+0x1064>)
 800276a:	f006 fedf 	bl	800952c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 800276e:	48c3      	ldr	r0, [pc, #780]	; (8002a7c <main+0x1064>)
 8002770:	f7fd fd4e 	bl	8000210 <strlen>
 8002774:	49c1      	ldr	r1, [pc, #772]	; (8002a7c <main+0x1064>)
 8002776:	b282      	uxth	r2, r0
 8002778:	f04f 33ff 	mov.w	r3, #4294967295
 800277c:	48c0      	ldr	r0, [pc, #768]	; (8002a80 <main+0x1068>)
 800277e:	f004 fef7 	bl	8007570 <HAL_UART_Transmit>
	HAL_Delay(250);
 8002782:	20fa      	movs	r0, #250	; 0xfa
 8002784:	f003 f954 	bl	8005a30 <HAL_Delay>
		sprintf(msg_debug, "MOTOR OC\r\n");
 8002788:	4bbe      	ldr	r3, [pc, #760]	; (8002a84 <main+0x106c>)
		CANTx_ErrorFlags |= 1<<16; //MTR OC: 16th bit
 800278a:	f8da 7000 	ldr.w	r7, [sl]
		sprintf(msg_debug, "MOTOR OC\r\n");
 800278e:	cb03      	ldmia	r3!, {r0, r1}
		CANTx_ErrorFlags |= 1<<16; //MTR OC: 16th bit
 8002790:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
		sprintf(msg_debug, "MOTOR OC\r\n");
 8002794:	f8b3 c000 	ldrh.w	ip, [r3]
 8002798:	789a      	ldrb	r2, [r3, #2]
 800279a:	6020      	str	r0, [r4, #0]
 800279c:	6061      	str	r1, [r4, #4]
 800279e:	72a2      	strb	r2, [r4, #10]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80027a0:	49b6      	ldr	r1, [pc, #728]	; (8002a7c <main+0x1064>)
		sprintf(msg_debug, "MOTOR OC\r\n");
 80027a2:	f8a4 c008 	strh.w	ip, [r4, #8]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80027a6:	f04f 33ff 	mov.w	r3, #4294967295
 80027aa:	220a      	movs	r2, #10
 80027ac:	48b4      	ldr	r0, [pc, #720]	; (8002a80 <main+0x1068>)
		CANTx_ErrorFlags |= 1<<16; //MTR OC: 16th bit
 80027ae:	f8ca 7000 	str.w	r7, [sl]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80027b2:	f004 fedd 	bl	8007570 <HAL_UART_Transmit>
 80027b6:	f7ff bb9d 	b.w	8001ef4 <main+0x4dc>
	state = 402;
 80027ba:	f44f 73c9 	mov.w	r3, #402	; 0x192
	if (HAL_GPIO_ReadPin(MTR_OT_GPIO_Port, MTR_OT_Pin) == 1)
 80027be:	48ad      	ldr	r0, [pc, #692]	; (8002a74 <main+0x105c>)
	state = 402;
 80027c0:	802b      	strh	r3, [r5, #0]
	if (HAL_GPIO_ReadPin(MTR_OT_GPIO_Port, MTR_OT_Pin) == 1)
 80027c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027c6:	f003 fee9 	bl	800659c <HAL_GPIO_ReadPin>
 80027ca:	2801      	cmp	r0, #1
 80027cc:	f47f ab92 	bne.w	8001ef4 <main+0x4dc>
	MC_StopMotor1();
 80027d0:	9001      	str	r0, [sp, #4]
 80027d2:	f000 fc79 	bl	80030c8 <MC_StopMotor1>
	HAL_GPIO_WritePin(FLT_OUT_GPIO_Port, FLT_OUT_Pin, GPIO_PIN_SET); //Set FLT_OUT high, turning on the LED
 80027d6:	9a01      	ldr	r2, [sp, #4]
 80027d8:	48a6      	ldr	r0, [pc, #664]	; (8002a74 <main+0x105c>)
 80027da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027de:	f003 fee3 	bl	80065a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_DIS_GPIO_Port, DRV_DIS_Pin, GPIO_PIN_SET); //Set DRV_DIS high, disabling the FETs
 80027e2:	9a01      	ldr	r2, [sp, #4]
 80027e4:	48a2      	ldr	r0, [pc, #648]	; (8002a70 <main+0x1058>)
 80027e6:	2102      	movs	r1, #2
 80027e8:	f003 fede 	bl	80065a8 <HAL_GPIO_WritePin>
	sprintf(msg_debug, "State %hu\r\n", state);
 80027ec:	882a      	ldrh	r2, [r5, #0]
 80027ee:	49a2      	ldr	r1, [pc, #648]	; (8002a78 <main+0x1060>)
 80027f0:	48a2      	ldr	r0, [pc, #648]	; (8002a7c <main+0x1064>)
 80027f2:	f006 fe9b 	bl	800952c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80027f6:	48a1      	ldr	r0, [pc, #644]	; (8002a7c <main+0x1064>)
 80027f8:	f7fd fd0a 	bl	8000210 <strlen>
 80027fc:	499f      	ldr	r1, [pc, #636]	; (8002a7c <main+0x1064>)
 80027fe:	b282      	uxth	r2, r0
 8002800:	f04f 33ff 	mov.w	r3, #4294967295
 8002804:	489e      	ldr	r0, [pc, #632]	; (8002a80 <main+0x1068>)
 8002806:	f004 feb3 	bl	8007570 <HAL_UART_Transmit>
	HAL_Delay(250);
 800280a:	20fa      	movs	r0, #250	; 0xfa
 800280c:	f003 f910 	bl	8005a30 <HAL_Delay>
		sprintf(msg_debug, "MOTOR OT\r\n");
 8002810:	4b9d      	ldr	r3, [pc, #628]	; (8002a88 <main+0x1070>)
		CANTx_ErrorFlags |= 1<<22; //MTR OT: 22nd bit
 8002812:	f8da 7000 	ldr.w	r7, [sl]
		sprintf(msg_debug, "MOTOR OT\r\n");
 8002816:	cb03      	ldmia	r3!, {r0, r1}
		CANTx_ErrorFlags |= 1<<22; //MTR OT: 22nd bit
 8002818:	f447 0780 	orr.w	r7, r7, #4194304	; 0x400000
 800281c:	e7ba      	b.n	8002794 <main+0xd7c>
	state = 401;
 800281e:	f240 1391 	movw	r3, #401	; 0x191
 8002822:	802b      	strh	r3, [r5, #0]
}
 8002824:	f7ff bb66 	b.w	8001ef4 <main+0x4dc>
		if(HAL_GPIO_ReadPin(FLT_OUT_GPIO_Port, FLT_OUT_Pin))
 8002828:	4892      	ldr	r0, [pc, #584]	; (8002a74 <main+0x105c>)
 800282a:	9201      	str	r2, [sp, #4]
 800282c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002830:	f003 feb4 	bl	800659c <HAL_GPIO_ReadPin>
 8002834:	9a01      	ldr	r2, [sp, #4]
 8002836:	2800      	cmp	r0, #0
 8002838:	f43f ab5c 	beq.w	8001ef4 <main+0x4dc>
	HAL_GPIO_WritePin(FLT_OUT_GPIO_Port, FLT_OUT_Pin, GPIO_PIN_RESET); //Set FLT_OUT low, turning off the LED
 800283c:	488d      	ldr	r0, [pc, #564]	; (8002a74 <main+0x105c>)
 800283e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002842:	f003 feb1 	bl	80065a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_DIS_GPIO_Port, DRV_DIS_Pin, GPIO_PIN_RESET); //Set DRV_DIS low, enabling the FETs
 8002846:	9a01      	ldr	r2, [sp, #4]
 8002848:	4889      	ldr	r0, [pc, #548]	; (8002a70 <main+0x1058>)
 800284a:	2102      	movs	r1, #2
 800284c:	f003 feac 	bl	80065a8 <HAL_GPIO_WritePin>
}
 8002850:	f7ff bb50 	b.w	8001ef4 <main+0x4dc>
	MC_StopMotor1();
 8002854:	f000 fc38 	bl	80030c8 <MC_StopMotor1>
	HAL_GPIO_WritePin(FLT_OUT_GPIO_Port, FLT_OUT_Pin, GPIO_PIN_SET); //Set FLT_OUT high, turning on the LED
 8002858:	4886      	ldr	r0, [pc, #536]	; (8002a74 <main+0x105c>)
 800285a:	2201      	movs	r2, #1
 800285c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002860:	f003 fea2 	bl	80065a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_DIS_GPIO_Port, DRV_DIS_Pin, GPIO_PIN_SET); //Set DRV_DIS high, disabling the FETs
 8002864:	4882      	ldr	r0, [pc, #520]	; (8002a70 <main+0x1058>)
 8002866:	2201      	movs	r2, #1
 8002868:	2102      	movs	r1, #2
 800286a:	f003 fe9d 	bl	80065a8 <HAL_GPIO_WritePin>
	sprintf(msg_debug, "State %hu\r\n", state);
 800286e:	882a      	ldrh	r2, [r5, #0]
 8002870:	4981      	ldr	r1, [pc, #516]	; (8002a78 <main+0x1060>)
 8002872:	4882      	ldr	r0, [pc, #520]	; (8002a7c <main+0x1064>)
 8002874:	f006 fe5a 	bl	800952c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8002878:	4880      	ldr	r0, [pc, #512]	; (8002a7c <main+0x1064>)
 800287a:	f7fd fcc9 	bl	8000210 <strlen>
 800287e:	497f      	ldr	r1, [pc, #508]	; (8002a7c <main+0x1064>)
 8002880:	b282      	uxth	r2, r0
 8002882:	f04f 33ff 	mov.w	r3, #4294967295
 8002886:	487e      	ldr	r0, [pc, #504]	; (8002a80 <main+0x1068>)
 8002888:	f004 fe72 	bl	8007570 <HAL_UART_Transmit>
	HAL_Delay(250);
 800288c:	20fa      	movs	r0, #250	; 0xfa
 800288e:	f003 f8cf 	bl	8005a30 <HAL_Delay>
		sprintf(msg_debug, "DC voltage missing\r\n");
 8002892:	f8df c224 	ldr.w	ip, [pc, #548]	; 8002ab8 <main+0x10a0>
		CANTx_ErrorFlags |= 1<<5; //DC undervoltage: 5th bit
 8002896:	f8da 7000 	ldr.w	r7, [sl]
		sprintf(msg_debug, "DC voltage missing\r\n");
 800289a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800289e:	6020      	str	r0, [r4, #0]
 80028a0:	60e3      	str	r3, [r4, #12]
 80028a2:	f8dc 0000 	ldr.w	r0, [ip]
 80028a6:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80028aa:	6061      	str	r1, [r4, #4]
 80028ac:	60a2      	str	r2, [r4, #8]
 80028ae:	6120      	str	r0, [r4, #16]
 80028b0:	7523      	strb	r3, [r4, #20]
		CANTx_ErrorFlags |= 1<<5; //DC undervoltage: 5th bit
 80028b2:	f047 0720 	orr.w	r7, r7, #32
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80028b6:	4971      	ldr	r1, [pc, #452]	; (8002a7c <main+0x1064>)
 80028b8:	4871      	ldr	r0, [pc, #452]	; (8002a80 <main+0x1068>)
		CANTx_ErrorFlags |= 1<<5; //DC undervoltage: 5th bit
 80028ba:	f8ca 7000 	str.w	r7, [sl]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80028be:	f04f 33ff 	mov.w	r3, #4294967295
 80028c2:	2214      	movs	r2, #20
 80028c4:	f004 fe54 	bl	8007570 <HAL_UART_Transmit>
 80028c8:	f7ff bb14 	b.w	8001ef4 <main+0x4dc>
	else if (RCM_GetUserConvState() == RCM_USERCONV_EOC)
 80028cc:	f002 f83c 	bl	8004948 <RCM_GetUserConvState>
 80028d0:	2802      	cmp	r0, #2
 80028d2:	f47f ab0f 	bne.w	8001ef4 <main+0x4dc>
		thermAL_temp = convertTempVal(RCM_GetUserConv());
 80028d6:	f001 fffd 	bl	80048d4 <RCM_GetUserConv>
	thermXX_value = thermXX_value / 16.0; // Convert left-aligned to right-aligned (0-4096)
 80028da:	f7fd fe43 	bl	8000564 <__aeabi_i2d>
 80028de:	4b6b      	ldr	r3, [pc, #428]	; (8002a8c <main+0x1074>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	f7fd fea9 	bl	8000638 <__aeabi_dmul>
 80028e6:	f7fe f97f 	bl	8000be8 <__aeabi_d2uiz>
	float thermXX_voltage = thermXX_value * 3300.0 / 4096.0; //Convert to mV (to avoid decimal places)
 80028ea:	b280      	uxth	r0, r0
 80028ec:	f7fd fe3a 	bl	8000564 <__aeabi_i2d>
 80028f0:	a353      	add	r3, pc, #332	; (adr r3, 8002a40 <main+0x1028>)
 80028f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f6:	f7fd fe9f 	bl	8000638 <__aeabi_dmul>
 80028fa:	f7fe f995 	bl	8000c28 <__aeabi_d2f>
	float thermXX_resistance = 3300.0 * 3300 / thermXX_voltage;
 80028fe:	eddf 6a64 	vldr	s13, [pc, #400]	; 8002a90 <main+0x1078>
	thermXX_resistance = thermXX_resistance - 3300;
 8002902:	eddf 7a64 	vldr	s15, [pc, #400]	; 8002a94 <main+0x107c>
	float thermXX_resistance = 3300.0 * 3300 / thermXX_voltage;
 8002906:	ee07 0a10 	vmov	s14, r0
 800290a:	ee86 7a87 	vdiv.f32	s14, s13, s14
	float thermXX_temp = 1000.0*(log(thermXX_resistance / 10000.0) + (3435.0/298.0));
 800290e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002912:	ee17 0a90 	vmov	r0, s15
 8002916:	f7fd fe37 	bl	8000588 <__aeabi_f2d>
 800291a:	a34b      	add	r3, pc, #300	; (adr r3, 8002a48 <main+0x1030>)
 800291c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002920:	f7fd fe8a 	bl	8000638 <__aeabi_dmul>
 8002924:	ec41 0b10 	vmov	d0, r0, r1
 8002928:	f007 fa2e 	bl	8009d88 <log>
 800292c:	a348      	add	r3, pc, #288	; (adr r3, 8002a50 <main+0x1038>)
 800292e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002932:	ec51 0b10 	vmov	r0, r1, d0
 8002936:	f7fd fcc9 	bl	80002cc <__adddf3>
 800293a:	4b57      	ldr	r3, [pc, #348]	; (8002a98 <main+0x1080>)
 800293c:	2200      	movs	r2, #0
 800293e:	f7fd fe7b 	bl	8000638 <__aeabi_dmul>
 8002942:	f7fe f971 	bl	8000c28 <__aeabi_d2f>
	thermXX_temp = 1000.0 * 3435.0 / thermXX_temp;
 8002946:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8002a9c <main+0x1084>
	thermXX_temp = thermXX_temp - 273.0;
 800294a:	eddf 6a55 	vldr	s13, [pc, #340]	; 8002aa0 <main+0x1088>
		if (thermAL_temp > CANTx_FETTemp.FETTemp_float) CANTx_FETTemp.FETTemp_float = thermAL_temp;
 800294e:	ed9b 7a00 	vldr	s14, [fp]
		thermAL_temp = convertTempVal(RCM_GetUserConv());
 8002952:	4a54      	ldr	r2, [pc, #336]	; (8002aa4 <main+0x108c>)
	thermXX_temp = 1000.0 * 3435.0 / thermXX_temp;
 8002954:	ee07 0a90 	vmov	s15, r0
 8002958:	eec6 7a27 	vdiv.f32	s15, s12, s15
	thermXX_temp = thermXX_temp - 273.0;
 800295c:	ee77 7ae6 	vsub.f32	s15, s15, s13
		thermAL_temp = convertTempVal(RCM_GetUserConv());
 8002960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002964:	ee17 3a90 	vmov	r3, s15
 8002968:	b29b      	uxth	r3, r3
		if (thermAL_temp > CANTx_FETTemp.FETTemp_float) CANTx_FETTemp.FETTemp_float = thermAL_temp;
 800296a:	ee07 3a90 	vmov	s15, r3
 800296e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		thermAL_temp = convertTempVal(RCM_GetUserConv());
 8002972:	8013      	strh	r3, [r2, #0]
		if (thermAL_temp > CANTx_FETTemp.FETTemp_float) CANTx_FETTemp.FETTemp_float = thermAL_temp;
 8002974:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297c:	dd05      	ble.n	800298a <main+0xf72>
 800297e:	ee07 3a90 	vmov	s15, r3
 8002982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002986:	edcb 7a00 	vstr	s15, [fp]
		state = 108;
 800298a:	236c      	movs	r3, #108	; 0x6c
 800298c:	802b      	strh	r3, [r5, #0]
}
 800298e:	f7ff bab1 	b.w	8001ef4 <main+0x4dc>
	else if (RCM_GetUserConvState() == RCM_USERCONV_EOC)
 8002992:	f001 ffd9 	bl	8004948 <RCM_GetUserConvState>
 8002996:	2802      	cmp	r0, #2
 8002998:	f47f aaac 	bne.w	8001ef4 <main+0x4dc>
		CANTx_busCurrent.busCurrent_float = ((RCM_GetUserConv() * 3.3 / 65535.0) - 2.5) / ISENSORGAIN;
 800299c:	f001 ff9a 	bl	80048d4 <RCM_GetUserConv>
 80029a0:	f7fd fde0 	bl	8000564 <__aeabi_i2d>
 80029a4:	a32c      	add	r3, pc, #176	; (adr r3, 8002a58 <main+0x1040>)
 80029a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029aa:	f7fd fe45 	bl	8000638 <__aeabi_dmul>
 80029ae:	4b3e      	ldr	r3, [pc, #248]	; (8002aa8 <main+0x1090>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	f7fd fc89 	bl	80002c8 <__aeabi_dsub>
 80029b6:	a32a      	add	r3, pc, #168	; (adr r3, 8002a60 <main+0x1048>)
 80029b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029bc:	f7fd fe3c 	bl	8000638 <__aeabi_dmul>
 80029c0:	f7fe f932 	bl	8000c28 <__aeabi_d2f>
 80029c4:	4a39      	ldr	r2, [pc, #228]	; (8002aac <main+0x1094>)
		state = 103;
 80029c6:	2367      	movs	r3, #103	; 0x67
		CANTx_busCurrent.busCurrent_float = ((RCM_GetUserConv() * 3.3 / 65535.0) - 2.5) / ISENSORGAIN;
 80029c8:	6010      	str	r0, [r2, #0]
		state = 103;
 80029ca:	802b      	strh	r3, [r5, #0]
}
 80029cc:	f7ff ba92 	b.w	8001ef4 <main+0x4dc>
	  switch (state)
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	f47f aa9c 	bne.w	8001f0e <main+0x4f6>
	HAL_Delay(250); //Short delay to account for startup transients (DC voltage spike)
 80029d6:	20fa      	movs	r0, #250	; 0xfa
 80029d8:	f003 f82a 	bl	8005a30 <HAL_Delay>
	lastWDTime = HAL_GetTick();
 80029dc:	f003 f822 	bl	8005a24 <HAL_GetTick>
 80029e0:	4a33      	ldr	r2, [pc, #204]	; (8002ab0 <main+0x1098>)
	state = 100;
 80029e2:	2364      	movs	r3, #100	; 0x64
	lastWDTime = HAL_GetTick();
 80029e4:	8010      	strh	r0, [r2, #0]
	state = 100;
 80029e6:	802b      	strh	r3, [r5, #0]
}
 80029e8:	f7ff ba84 	b.w	8001ef4 <main+0x4dc>
	  switch (state)
 80029ec:	f1be 0f05 	cmp.w	lr, #5
 80029f0:	f63f aa8d 	bhi.w	8001f0e <main+0x4f6>
 80029f4:	2a05      	cmp	r2, #5
 80029f6:	f63f aa8a 	bhi.w	8001f0e <main+0x4f6>
 80029fa:	e8df f002 	tbb	[pc, r2]
 80029fe:	646d      	.short	0x646d
 8002a00:	03080d5f 	.word	0x03080d5f
	state = 400;
 8002a04:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002a08:	802b      	strh	r3, [r5, #0]
}
 8002a0a:	f7ff ba73 	b.w	8001ef4 <main+0x4dc>
	state = 303;
 8002a0e:	f240 132f 	movw	r3, #303	; 0x12f
 8002a12:	802b      	strh	r3, [r5, #0]
}
 8002a14:	f7ff ba6e 	b.w	8001ef4 <main+0x4dc>
	fanDutyCycle = FANPWMSLOPE * CANTx_FETTemp.FETTemp_float;
 8002a18:	f8db 0000 	ldr.w	r0, [fp]
 8002a1c:	f7fd fdb4 	bl	8000588 <__aeabi_f2d>
 8002a20:	a311      	add	r3, pc, #68	; (adr r3, 8002a68 <main+0x1050>)
 8002a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a26:	f7fd fe07 	bl	8000638 <__aeabi_dmul>
 8002a2a:	f7fe f8fd 	bl	8000c28 <__aeabi_d2f>
 8002a2e:	4a21      	ldr	r2, [pc, #132]	; (8002ab4 <main+0x109c>)
	state = 302;
 8002a30:	f44f 7397 	mov.w	r3, #302	; 0x12e
	fanDutyCycle = FANPWMSLOPE * CANTx_FETTemp.FETTemp_float;
 8002a34:	6010      	str	r0, [r2, #0]
	state = 302;
 8002a36:	802b      	strh	r3, [r5, #0]
}
 8002a38:	f7ff ba5c 	b.w	8001ef4 <main+0x4dc>
 8002a3c:	f3af 8000 	nop.w
 8002a40:	00000000 	.word	0x00000000
 8002a44:	3fe9c800 	.word	0x3fe9c800
 8002a48:	eb1c432d 	.word	0xeb1c432d
 8002a4c:	3f1a36e2 	.word	0x3f1a36e2
 8002a50:	b61eed1a 	.word	0xb61eed1a
 8002a54:	40270dbe 	.word	0x40270dbe
 8002a58:	cce7334d 	.word	0xcce7334d
 8002a5c:	3f0a6680 	.word	0x3f0a6680
 8002a60:	c427e567 	.word	0xc427e567
 8002a64:	4029f959 	.word	0x4029f959
 8002a68:	b4e81b4f 	.word	0xb4e81b4f
 8002a6c:	3f8b4e81 	.word	0x3f8b4e81
 8002a70:	40020400 	.word	0x40020400
 8002a74:	40020000 	.word	0x40020000
 8002a78:	0800a1b8 	.word	0x0800a1b8
 8002a7c:	20000a44 	.word	0x20000a44
 8002a80:	200009b8 	.word	0x200009b8
 8002a84:	0800a1e4 	.word	0x0800a1e4
 8002a88:	0800a1d8 	.word	0x0800a1d8
 8002a8c:	3fb00000 	.word	0x3fb00000
 8002a90:	4b262b10 	.word	0x4b262b10
 8002a94:	454e4000 	.word	0x454e4000
 8002a98:	408f4000 	.word	0x408f4000
 8002a9c:	4a51a7e0 	.word	0x4a51a7e0
 8002aa0:	43888000 	.word	0x43888000
 8002aa4:	200007ea 	.word	0x200007ea
 8002aa8:	40040000 	.word	0x40040000
 8002aac:	200007f4 	.word	0x200007f4
 8002ab0:	20000768 	.word	0x20000768
 8002ab4:	20000764 	.word	0x20000764
 8002ab8:	0800a228 	.word	0x0800a228
	state = 301;
 8002abc:	f240 132d 	movw	r3, #301	; 0x12d
 8002ac0:	802b      	strh	r3, [r5, #0]
}
 8002ac2:	f7ff ba17 	b.w	8001ef4 <main+0x4dc>
	if (RCM_GetUserConvState() == RCM_USERCONV_IDLE)
 8002ac6:	f001 ff3f 	bl	8004948 <RCM_GetUserConvState>
 8002aca:	b970      	cbnz	r0, 8002aea <main+0x10d2>
		RCM_RequestUserConv(Pot2Handle);
 8002acc:	4baa      	ldr	r3, [pc, #680]	; (8002d78 <main+0x1360>)
 8002ace:	7818      	ldrb	r0, [r3, #0]
 8002ad0:	f001 fef0 	bl	80048b4 <RCM_RequestUserConv>
 8002ad4:	f7ff ba0e 	b.w	8001ef4 <main+0x4dc>
	if (RCM_GetUserConvState() == RCM_USERCONV_IDLE)
 8002ad8:	f001 ff36 	bl	8004948 <RCM_GetUserConvState>
 8002adc:	bb20      	cbnz	r0, 8002b28 <main+0x1110>
		RCM_RequestUserConv(Pot1Handle);
 8002ade:	4ba7      	ldr	r3, [pc, #668]	; (8002d7c <main+0x1364>)
 8002ae0:	7818      	ldrb	r0, [r3, #0]
 8002ae2:	f001 fee7 	bl	80048b4 <RCM_RequestUserConv>
 8002ae6:	f7ff ba05 	b.w	8001ef4 <main+0x4dc>
	else if (RCM_GetUserConvState() == RCM_USERCONV_EOC)
 8002aea:	f001 ff2d 	bl	8004948 <RCM_GetUserConvState>
 8002aee:	2802      	cmp	r0, #2
 8002af0:	f47f aa00 	bne.w	8001ef4 <main+0x4dc>
		pot2_value = RCM_GetUserConv();
 8002af4:	f001 feee 	bl	80048d4 <RCM_GetUserConv>
		CANRx_current.current_float = ((float) pot2_value) / 45535.0;
 8002af8:	ee07 0a90 	vmov	s15, r0
		pot2_value = RCM_GetUserConv();
 8002afc:	4ba0      	ldr	r3, [pc, #640]	; (8002d80 <main+0x1368>)
		CANRx_current.current_float = ((float) pot2_value) / 45535.0;
 8002afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
		pot2_value = RCM_GetUserConv();
 8002b02:	8018      	strh	r0, [r3, #0]
		CANRx_current.current_float = ((float) pot2_value) / 45535.0;
 8002b04:	ee17 0a90 	vmov	r0, s15
 8002b08:	f7fd fd3e 	bl	8000588 <__aeabi_f2d>
 8002b0c:	a396      	add	r3, pc, #600	; (adr r3, 8002d68 <main+0x1350>)
 8002b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b12:	f7fd fd91 	bl	8000638 <__aeabi_dmul>
 8002b16:	f7fe f887 	bl	8000c28 <__aeabi_d2f>
 8002b1a:	4a9a      	ldr	r2, [pc, #616]	; (8002d84 <main+0x136c>)
		state = 300;
 8002b1c:	f44f 7396 	mov.w	r3, #300	; 0x12c
		CANRx_current.current_float = ((float) pot2_value) / 45535.0;
 8002b20:	6010      	str	r0, [r2, #0]
		state = 300;
 8002b22:	802b      	strh	r3, [r5, #0]
}
 8002b24:	f7ff b9e6 	b.w	8001ef4 <main+0x4dc>
	else if (RCM_GetUserConvState() == RCM_USERCONV_EOC)
 8002b28:	f001 ff0e 	bl	8004948 <RCM_GetUserConvState>
 8002b2c:	2802      	cmp	r0, #2
 8002b2e:	f47f a9e1 	bne.w	8001ef4 <main+0x4dc>
		pot1_value = RCM_GetUserConv();
 8002b32:	f001 fecf 	bl	80048d4 <RCM_GetUserConv>
		CANRx_velocity.velocity_float = ((float) pot1_value) / 45535.0 * VMAX;
 8002b36:	ee07 0a90 	vmov	s15, r0
		pot1_value = RCM_GetUserConv();
 8002b3a:	4b93      	ldr	r3, [pc, #588]	; (8002d88 <main+0x1370>)
		CANRx_velocity.velocity_float = ((float) pot1_value) / 45535.0 * VMAX;
 8002b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
		pot1_value = RCM_GetUserConv();
 8002b40:	8018      	strh	r0, [r3, #0]
		CANRx_velocity.velocity_float = ((float) pot1_value) / 45535.0 * VMAX;
 8002b42:	ee17 0a90 	vmov	r0, s15
 8002b46:	f7fd fd1f 	bl	8000588 <__aeabi_f2d>
 8002b4a:	a389      	add	r3, pc, #548	; (adr r3, 8002d70 <main+0x1358>)
 8002b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b50:	f7fd fd72 	bl	8000638 <__aeabi_dmul>
 8002b54:	f7fe f868 	bl	8000c28 <__aeabi_d2f>
 8002b58:	4a8c      	ldr	r2, [pc, #560]	; (8002d8c <main+0x1374>)
		state = 299;
 8002b5a:	f240 132b 	movw	r3, #299	; 0x12b
		CANRx_velocity.velocity_float = ((float) pot1_value) / 45535.0 * VMAX;
 8002b5e:	6010      	str	r0, [r2, #0]
		state = 299;
 8002b60:	802b      	strh	r3, [r5, #0]
}
 8002b62:	f7ff b9c7 	b.w	8001ef4 <main+0x4dc>
	  switch (state)
 8002b66:	4563      	cmp	r3, ip
 8002b68:	f200 80f5 	bhi.w	8002d56 <main+0x133e>
 8002b6c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002b70:	f4ff a9cd 	bcc.w	8001f0e <main+0x4f6>
 8002b74:	f46f 7116 	mvn.w	r1, #600	; 0x258
 8002b78:	440b      	add	r3, r1
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	f200 80b6 	bhi.w	8002cec <main+0x12d4>
 8002b80:	e8df f003 	tbb	[pc, r3]
 8002b84:	03306093 	.word	0x03306093
 8002b88:	b9          	.byte	0xb9
 8002b89:	00          	.byte	0x00
	sprintf(msg_debug, "Message sent\r\n");
 8002b8a:	4f81      	ldr	r7, [pc, #516]	; (8002d90 <main+0x1378>)
	sendCANMessage(CANTx_phaseCurrent.phaseCurrent_int, CANTx_phaseCurrent.phaseCurrent_int, 4);
 8002b8c:	4b81      	ldr	r3, [pc, #516]	; (8002d94 <main+0x137c>)
	CANTxData[0] = (LowDataByte & 0x000000ff) >>  0;
 8002b8e:	4e82      	ldr	r6, [pc, #520]	; (8002d98 <main+0x1380>)
	sendCANMessage(CANTx_phaseCurrent.phaseCurrent_int, CANTx_phaseCurrent.phaseCurrent_int, 4);
 8002b90:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_debug, "Message sent\r\n");
 8002b92:	cf07      	ldmia	r7!, {r0, r1, r2}
 8002b94:	60a2      	str	r2, [r4, #8]
 8002b96:	883a      	ldrh	r2, [r7, #0]
 8002b98:	81a2      	strh	r2, [r4, #12]
 8002b9a:	78bf      	ldrb	r7, [r7, #2]
 8002b9c:	73a7      	strb	r7, [r4, #14]
	CANTxData[0] = (LowDataByte & 0x000000ff) >>  0;
 8002b9e:	b2da      	uxtb	r2, r3
	CANTxData[1] = (LowDataByte & 0x0000ff00) >>  8;
 8002ba0:	f3c3 2c07 	ubfx	ip, r3, #8, #8
	CANTxData[0] = (LowDataByte & 0x000000ff) >>  0;
 8002ba4:	7032      	strb	r2, [r6, #0]
	CANTxData[4] = (HighDataByte & 0x000000ff) >>  0;
 8002ba6:	7132      	strb	r2, [r6, #4]
	CANTxData[2] = (LowDataByte & 0x00ff0000) >> 16;
 8002ba8:	f3c3 4707 	ubfx	r7, r3, #16, #8
	CANTxData[3] = (LowDataByte & 0xff000000) >> 24;
 8002bac:	0e1a      	lsrs	r2, r3, #24
	CANTxData[1] = (LowDataByte & 0x0000ff00) >>  8;
 8002bae:	f886 c001 	strb.w	ip, [r6, #1]
	CANTxData[3] = (LowDataByte & 0xff000000) >> 24;
 8002bb2:	70f2      	strb	r2, [r6, #3]
	CANTxData[5] = (HighDataByte & 0x0000ff00) >>  8;
 8002bb4:	f886 c005 	strb.w	ip, [r6, #5]
	CANTxData[2] = (LowDataByte & 0x00ff0000) >> 16;
 8002bb8:	70b7      	strb	r7, [r6, #2]
	CANTxData[7] = (HighDataByte & 0xff000000) >> 24;
 8002bba:	71f2      	strb	r2, [r6, #7]
	CANTxData[6] = (HighDataByte & 0x00ff0000) >> 16;
 8002bbc:	71b7      	strb	r7, [r6, #6]
	CANTxHeader.StdId = CANTXBASEID + IDBonus;
 8002bbe:	4e77      	ldr	r6, [pc, #476]	; (8002d9c <main+0x1384>)
	sprintf(msg_debug, "Message sent\r\n");
 8002bc0:	6020      	str	r0, [r4, #0]
 8002bc2:	6061      	str	r1, [r4, #4]
	CANTxHeader.StdId = CANTXBASEID + IDBonus;
 8002bc4:	f240 5c04 	movw	ip, #1284	; 0x504
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8002bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bcc:	4974      	ldr	r1, [pc, #464]	; (8002da0 <main+0x1388>)
 8002bce:	4875      	ldr	r0, [pc, #468]	; (8002da4 <main+0x138c>)
	CANTxHeader.StdId = CANTXBASEID + IDBonus;
 8002bd0:	f8c6 c000 	str.w	ip, [r6]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8002bd4:	220e      	movs	r2, #14
 8002bd6:	f004 fccb 	bl	8007570 <HAL_UART_Transmit>
	state = 605;
 8002bda:	f240 235d 	movw	r3, #605	; 0x25d
 8002bde:	802b      	strh	r3, [r5, #0]
}
 8002be0:	f7ff b988 	b.w	8001ef4 <main+0x4dc>
	sendCANMessage(CANTx_mtrVelocity.mtrVelocity_int, CANTx_carVelocity.carVelocity_int, 3);
 8002be4:	4a70      	ldr	r2, [pc, #448]	; (8002da8 <main+0x1390>)
	sprintf(msg_debug, "Message sent\r\n");
 8002be6:	4b6a      	ldr	r3, [pc, #424]	; (8002d90 <main+0x1378>)
	sendCANMessage(CANTx_mtrVelocity.mtrVelocity_int, CANTx_carVelocity.carVelocity_int, 3);
 8002be8:	6817      	ldr	r7, [r2, #0]
	CANTxData[0] = (LowDataByte & 0x000000ff) >>  0;
 8002bea:	4e6b      	ldr	r6, [pc, #428]	; (8002d98 <main+0x1380>)
	sprintf(msg_debug, "Message sent\r\n");
 8002bec:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002bee:	6020      	str	r0, [r4, #0]
	sendCANMessage(CANTx_mtrVelocity.mtrVelocity_int, CANTx_carVelocity.carVelocity_int, 3);
 8002bf0:	486e      	ldr	r0, [pc, #440]	; (8002dac <main+0x1394>)
	sprintf(msg_debug, "Message sent\r\n");
 8002bf2:	60a2      	str	r2, [r4, #8]
	sendCANMessage(CANTx_mtrVelocity.mtrVelocity_int, CANTx_carVelocity.carVelocity_int, 3);
 8002bf4:	6800      	ldr	r0, [r0, #0]
	sprintf(msg_debug, "Message sent\r\n");
 8002bf6:	789a      	ldrb	r2, [r3, #2]
 8002bf8:	f8b3 c000 	ldrh.w	ip, [r3]
 8002bfc:	73a2      	strb	r2, [r4, #14]
	CANTxData[1] = (LowDataByte & 0x0000ff00) >>  8;
 8002bfe:	0a3b      	lsrs	r3, r7, #8
	CANTxData[2] = (LowDataByte & 0x00ff0000) >> 16;
 8002c00:	0c3a      	lsrs	r2, r7, #16
	CANTxData[0] = (LowDataByte & 0x000000ff) >>  0;
 8002c02:	7037      	strb	r7, [r6, #0]
	CANTxData[1] = (LowDataByte & 0x0000ff00) >>  8;
 8002c04:	7073      	strb	r3, [r6, #1]
	CANTxData[2] = (LowDataByte & 0x00ff0000) >> 16;
 8002c06:	70b2      	strb	r2, [r6, #2]
	CANTxData[5] = (HighDataByte & 0x0000ff00) >>  8;
 8002c08:	0a03      	lsrs	r3, r0, #8
	CANTxData[6] = (HighDataByte & 0x00ff0000) >> 16;
 8002c0a:	0c02      	lsrs	r2, r0, #16
	sprintf(msg_debug, "Message sent\r\n");
 8002c0c:	f8a4 c00c 	strh.w	ip, [r4, #12]
	CANTxData[3] = (LowDataByte & 0xff000000) >> 24;
 8002c10:	0e3f      	lsrs	r7, r7, #24
	CANTxData[7] = (HighDataByte & 0xff000000) >> 24;
 8002c12:	ea4f 6c10 	mov.w	ip, r0, lsr #24
	CANTxData[3] = (LowDataByte & 0xff000000) >> 24;
 8002c16:	70f7      	strb	r7, [r6, #3]
	CANTxData[4] = (HighDataByte & 0x000000ff) >>  0;
 8002c18:	7130      	strb	r0, [r6, #4]
	CANTxData[5] = (HighDataByte & 0x0000ff00) >>  8;
 8002c1a:	7173      	strb	r3, [r6, #5]
	CANTxData[6] = (HighDataByte & 0x00ff0000) >> 16;
 8002c1c:	71b2      	strb	r2, [r6, #6]
	CANTxData[7] = (HighDataByte & 0xff000000) >> 24;
 8002c1e:	f886 c007 	strb.w	ip, [r6, #7]
	CANTxHeader.StdId = CANTXBASEID + IDBonus;
 8002c22:	4e5e      	ldr	r6, [pc, #376]	; (8002d9c <main+0x1384>)
	sprintf(msg_debug, "Message sent\r\n");
 8002c24:	6061      	str	r1, [r4, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8002c26:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2a:	495d      	ldr	r1, [pc, #372]	; (8002da0 <main+0x1388>)
 8002c2c:	485d      	ldr	r0, [pc, #372]	; (8002da4 <main+0x138c>)
	CANTxHeader.StdId = CANTXBASEID + IDBonus;
 8002c2e:	f240 5703 	movw	r7, #1283	; 0x503
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8002c32:	220e      	movs	r2, #14
	CANTxHeader.StdId = CANTXBASEID + IDBonus;
 8002c34:	6037      	str	r7, [r6, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8002c36:	f004 fc9b 	bl	8007570 <HAL_UART_Transmit>
	state = 604;
 8002c3a:	f44f 7317 	mov.w	r3, #604	; 0x25c
 8002c3e:	802b      	strh	r3, [r5, #0]
}
 8002c40:	f7ff b958 	b.w	8001ef4 <main+0x4dc>
	sprintf(msg_debug, "Message sent\r\n");
 8002c44:	4b52      	ldr	r3, [pc, #328]	; (8002d90 <main+0x1378>)
	sendCANMessage(CANTx_busVoltage.busVoltage_int, CANTx_busCurrent.busCurrent_int, 2);
 8002c46:	f8d8 7000 	ldr.w	r7, [r8]
	CANTxData[0] = (LowDataByte & 0x000000ff) >>  0;
 8002c4a:	4e53      	ldr	r6, [pc, #332]	; (8002d98 <main+0x1380>)
	sprintf(msg_debug, "Message sent\r\n");
 8002c4c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002c4e:	6020      	str	r0, [r4, #0]
	sendCANMessage(CANTx_busVoltage.busVoltage_int, CANTx_busCurrent.busCurrent_int, 2);
 8002c50:	4857      	ldr	r0, [pc, #348]	; (8002db0 <main+0x1398>)
	sprintf(msg_debug, "Message sent\r\n");
 8002c52:	60a2      	str	r2, [r4, #8]
	sendCANMessage(CANTx_busVoltage.busVoltage_int, CANTx_busCurrent.busCurrent_int, 2);
 8002c54:	6800      	ldr	r0, [r0, #0]
	sprintf(msg_debug, "Message sent\r\n");
 8002c56:	789a      	ldrb	r2, [r3, #2]
 8002c58:	f8b3 c000 	ldrh.w	ip, [r3]
 8002c5c:	73a2      	strb	r2, [r4, #14]
	CANTxData[1] = (LowDataByte & 0x0000ff00) >>  8;
 8002c5e:	0a3b      	lsrs	r3, r7, #8
	CANTxData[2] = (LowDataByte & 0x00ff0000) >> 16;
 8002c60:	0c3a      	lsrs	r2, r7, #16
	CANTxData[0] = (LowDataByte & 0x000000ff) >>  0;
 8002c62:	7037      	strb	r7, [r6, #0]
	CANTxData[1] = (LowDataByte & 0x0000ff00) >>  8;
 8002c64:	7073      	strb	r3, [r6, #1]
	CANTxData[2] = (LowDataByte & 0x00ff0000) >> 16;
 8002c66:	70b2      	strb	r2, [r6, #2]
	CANTxData[5] = (HighDataByte & 0x0000ff00) >>  8;
 8002c68:	0a03      	lsrs	r3, r0, #8
	CANTxData[6] = (HighDataByte & 0x00ff0000) >> 16;
 8002c6a:	0c02      	lsrs	r2, r0, #16
	sprintf(msg_debug, "Message sent\r\n");
 8002c6c:	f8a4 c00c 	strh.w	ip, [r4, #12]
	CANTxData[3] = (LowDataByte & 0xff000000) >> 24;
 8002c70:	0e3f      	lsrs	r7, r7, #24
	CANTxData[7] = (HighDataByte & 0xff000000) >> 24;
 8002c72:	ea4f 6c10 	mov.w	ip, r0, lsr #24
	CANTxData[3] = (LowDataByte & 0xff000000) >> 24;
 8002c76:	70f7      	strb	r7, [r6, #3]
	CANTxData[4] = (HighDataByte & 0x000000ff) >>  0;
 8002c78:	7130      	strb	r0, [r6, #4]
	CANTxData[5] = (HighDataByte & 0x0000ff00) >>  8;
 8002c7a:	7173      	strb	r3, [r6, #5]
	CANTxData[6] = (HighDataByte & 0x00ff0000) >> 16;
 8002c7c:	71b2      	strb	r2, [r6, #6]
	CANTxData[7] = (HighDataByte & 0xff000000) >> 24;
 8002c7e:	f886 c007 	strb.w	ip, [r6, #7]
	CANTxHeader.StdId = CANTXBASEID + IDBonus;
 8002c82:	4e46      	ldr	r6, [pc, #280]	; (8002d9c <main+0x1384>)
	sprintf(msg_debug, "Message sent\r\n");
 8002c84:	6061      	str	r1, [r4, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8002c86:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8a:	4945      	ldr	r1, [pc, #276]	; (8002da0 <main+0x1388>)
 8002c8c:	4845      	ldr	r0, [pc, #276]	; (8002da4 <main+0x138c>)
 8002c8e:	220e      	movs	r2, #14
	CANTxHeader.StdId = CANTXBASEID + IDBonus;
 8002c90:	f240 5702 	movw	r7, #1282	; 0x502
 8002c94:	6037      	str	r7, [r6, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8002c96:	f004 fc6b 	bl	8007570 <HAL_UART_Transmit>
	HAL_Delay(200);
 8002c9a:	20c8      	movs	r0, #200	; 0xc8
 8002c9c:	f002 fec8 	bl	8005a30 <HAL_Delay>
	state = 699;
 8002ca0:	f240 23bb 	movw	r3, #699	; 0x2bb
 8002ca4:	802b      	strh	r3, [r5, #0]
}
 8002ca6:	f7ff b925 	b.w	8001ef4 <main+0x4dc>
	sprintf(msg_debug, "Message sent\r\n");
 8002caa:	4b39      	ldr	r3, [pc, #228]	; (8002d90 <main+0x1378>)
	CANTxData[0] = (LowDataByte & 0x000000ff) >>  0;
 8002cac:	4e3a      	ldr	r6, [pc, #232]	; (8002d98 <main+0x1380>)
	sendCANMessage(CANTx_ErrorFlags, 0, 1);
 8002cae:	f8da 7000 	ldr.w	r7, [sl]
	CANTxData[0] = (LowDataByte & 0x000000ff) >>  0;
 8002cb2:	7037      	strb	r7, [r6, #0]
	sprintf(msg_debug, "Message sent\r\n");
 8002cb4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002cb6:	60a2      	str	r2, [r4, #8]
 8002cb8:	881a      	ldrh	r2, [r3, #0]
 8002cba:	789b      	ldrb	r3, [r3, #2]
 8002cbc:	81a2      	strh	r2, [r4, #12]
 8002cbe:	73a3      	strb	r3, [r4, #14]
	CANTxData[1] = (LowDataByte & 0x0000ff00) >>  8;
 8002cc0:	0a3a      	lsrs	r2, r7, #8
	CANTxData[2] = (LowDataByte & 0x00ff0000) >> 16;
 8002cc2:	0c3b      	lsrs	r3, r7, #16
	CANTxData[3] = (LowDataByte & 0xff000000) >> 24;
 8002cc4:	0e3f      	lsrs	r7, r7, #24
	CANTxData[1] = (LowDataByte & 0x0000ff00) >>  8;
 8002cc6:	7072      	strb	r2, [r6, #1]
	CANTxData[3] = (LowDataByte & 0xff000000) >> 24;
 8002cc8:	70f7      	strb	r7, [r6, #3]
	CANTxData[4] = (HighDataByte & 0x000000ff) >>  0;
 8002cca:	2200      	movs	r2, #0
	CANTxHeader.StdId = CANTXBASEID + IDBonus;
 8002ccc:	4f33      	ldr	r7, [pc, #204]	; (8002d9c <main+0x1384>)
	sprintf(msg_debug, "Message sent\r\n");
 8002cce:	6020      	str	r0, [r4, #0]
 8002cd0:	6061      	str	r1, [r4, #4]
	CANTxData[2] = (LowDataByte & 0x00ff0000) >> 16;
 8002cd2:	70b3      	strb	r3, [r6, #2]
	CANTxHeader.StdId = CANTXBASEID + IDBonus;
 8002cd4:	f240 5c01 	movw	ip, #1281	; 0x501
	CANTxData[4] = (HighDataByte & 0x000000ff) >>  0;
 8002cd8:	6072      	str	r2, [r6, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8002cda:	4931      	ldr	r1, [pc, #196]	; (8002da0 <main+0x1388>)
 8002cdc:	4831      	ldr	r0, [pc, #196]	; (8002da4 <main+0x138c>)
	CANTxHeader.StdId = CANTXBASEID + IDBonus;
 8002cde:	f8c7 c000 	str.w	ip, [r7]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8002ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce6:	220e      	movs	r2, #14
 8002ce8:	f004 fc42 	bl	8007570 <HAL_UART_Transmit>
	state = 602;
 8002cec:	f240 235a 	movw	r3, #602	; 0x25a
 8002cf0:	802b      	strh	r3, [r5, #0]
}
 8002cf2:	f7ff b8ff 	b.w	8001ef4 <main+0x4dc>
	sendCANMessage(CANTx_mtrTemp.mtrTemp_int, CANTx_FETTemp.FETTemp_int, 11);
 8002cf6:	4a2f      	ldr	r2, [pc, #188]	; (8002db4 <main+0x139c>)
	sprintf(msg_debug, "Message sent\r\n");
 8002cf8:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <main+0x1378>)
	sendCANMessage(CANTx_mtrTemp.mtrTemp_int, CANTx_FETTemp.FETTemp_int, 11);
 8002cfa:	6817      	ldr	r7, [r2, #0]
	CANTxData[0] = (LowDataByte & 0x000000ff) >>  0;
 8002cfc:	4e26      	ldr	r6, [pc, #152]	; (8002d98 <main+0x1380>)
	sprintf(msg_debug, "Message sent\r\n");
 8002cfe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002d00:	6020      	str	r0, [r4, #0]
 8002d02:	60a2      	str	r2, [r4, #8]
	sendCANMessage(CANTx_mtrTemp.mtrTemp_int, CANTx_FETTemp.FETTemp_int, 11);
 8002d04:	f8db 0000 	ldr.w	r0, [fp]
	sprintf(msg_debug, "Message sent\r\n");
 8002d08:	789a      	ldrb	r2, [r3, #2]
 8002d0a:	f8b3 c000 	ldrh.w	ip, [r3]
 8002d0e:	73a2      	strb	r2, [r4, #14]
	CANTxData[1] = (LowDataByte & 0x0000ff00) >>  8;
 8002d10:	0a3b      	lsrs	r3, r7, #8
	CANTxData[2] = (LowDataByte & 0x00ff0000) >> 16;
 8002d12:	0c3a      	lsrs	r2, r7, #16
	CANTxData[0] = (LowDataByte & 0x000000ff) >>  0;
 8002d14:	7037      	strb	r7, [r6, #0]
	CANTxData[1] = (LowDataByte & 0x0000ff00) >>  8;
 8002d16:	7073      	strb	r3, [r6, #1]
	CANTxData[2] = (LowDataByte & 0x00ff0000) >> 16;
 8002d18:	70b2      	strb	r2, [r6, #2]
	CANTxData[5] = (HighDataByte & 0x0000ff00) >>  8;
 8002d1a:	0a03      	lsrs	r3, r0, #8
	CANTxData[6] = (HighDataByte & 0x00ff0000) >> 16;
 8002d1c:	0c02      	lsrs	r2, r0, #16
	sprintf(msg_debug, "Message sent\r\n");
 8002d1e:	f8a4 c00c 	strh.w	ip, [r4, #12]
	CANTxData[3] = (LowDataByte & 0xff000000) >> 24;
 8002d22:	0e3f      	lsrs	r7, r7, #24
	CANTxData[7] = (HighDataByte & 0xff000000) >> 24;
 8002d24:	ea4f 6c10 	mov.w	ip, r0, lsr #24
	CANTxData[3] = (LowDataByte & 0xff000000) >> 24;
 8002d28:	70f7      	strb	r7, [r6, #3]
	CANTxData[4] = (HighDataByte & 0x000000ff) >>  0;
 8002d2a:	7130      	strb	r0, [r6, #4]
	CANTxData[5] = (HighDataByte & 0x0000ff00) >>  8;
 8002d2c:	7173      	strb	r3, [r6, #5]
	CANTxData[6] = (HighDataByte & 0x00ff0000) >> 16;
 8002d2e:	71b2      	strb	r2, [r6, #6]
	CANTxData[7] = (HighDataByte & 0xff000000) >> 24;
 8002d30:	f886 c007 	strb.w	ip, [r6, #7]
	CANTxHeader.StdId = CANTXBASEID + IDBonus;
 8002d34:	4e19      	ldr	r6, [pc, #100]	; (8002d9c <main+0x1384>)
	sprintf(msg_debug, "Message sent\r\n");
 8002d36:	6061      	str	r1, [r4, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8002d38:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3c:	4918      	ldr	r1, [pc, #96]	; (8002da0 <main+0x1388>)
 8002d3e:	4819      	ldr	r0, [pc, #100]	; (8002da4 <main+0x138c>)
	CANTxHeader.StdId = CANTXBASEID + IDBonus;
 8002d40:	f240 570b 	movw	r7, #1291	; 0x50b
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8002d44:	220e      	movs	r2, #14
	CANTxHeader.StdId = CANTXBASEID + IDBonus;
 8002d46:	6037      	str	r7, [r6, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8002d48:	f004 fc12 	bl	8007570 <HAL_UART_Transmit>
	state = 699; //UART data dump
 8002d4c:	f240 23bb 	movw	r3, #699	; 0x2bb
 8002d50:	802b      	strh	r3, [r5, #0]
}
 8002d52:	f7ff b8cf 	b.w	8001ef4 <main+0x4dc>
	  switch (state)
 8002d56:	42bb      	cmp	r3, r7
 8002d58:	f47f a8d9 	bne.w	8001f0e <main+0x4f6>
	  	  case 699: state699(); break;
 8002d5c:	f7fe fcd4 	bl	8001708 <state699>
 8002d60:	f7ff b8c8 	b.w	8001ef4 <main+0x4dc>
 8002d64:	f3af 8000 	nop.w
 8002d68:	47a16a26 	.word	0x47a16a26
 8002d6c:	3ef70725 	.word	0x3ef70725
 8002d70:	b2147849 	.word	0xb2147849
 8002d74:	3f034833 	.word	0x3f034833
 8002d78:	20000a41 	.word	0x20000a41
 8002d7c:	200008da 	.word	0x200008da
 8002d80:	2000094e 	.word	0x2000094e
 8002d84:	200007c0 	.word	0x200007c0
 8002d88:	20000934 	.word	0x20000934
 8002d8c:	200007d4 	.word	0x200007d4
 8002d90:	0800a32c 	.word	0x0800a32c
 8002d94:	200007d8 	.word	0x200007d8
 8002d98:	20000938 	.word	0x20000938
 8002d9c:	20000028 	.word	0x20000028
 8002da0:	20000a44 	.word	0x20000a44
 8002da4:	200009b8 	.word	0x200009b8
 8002da8:	200007ec 	.word	0x200007ec
 8002dac:	20000a24 	.word	0x20000a24
 8002db0:	200007f4 	.word	0x200007f4
 8002db4:	20000a3c 	.word	0x20000a3c
	else if (RCM_GetUserConvState() == RCM_USERCONV_EOC)
 8002db8:	f001 fdc6 	bl	8004948 <RCM_GetUserConvState>
 8002dbc:	2802      	cmp	r0, #2
 8002dbe:	f47f a899 	bne.w	8001ef4 <main+0x4dc>
		thermBL_temp = convertTempVal(RCM_GetUserConv());
 8002dc2:	f001 fd87 	bl	80048d4 <RCM_GetUserConv>
	thermXX_value = thermXX_value / 16.0; // Convert left-aligned to right-aligned (0-4096)
 8002dc6:	f7fd fbcd 	bl	8000564 <__aeabi_i2d>
 8002dca:	4bb3      	ldr	r3, [pc, #716]	; (8003098 <main+0x1680>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f7fd fc33 	bl	8000638 <__aeabi_dmul>
 8002dd2:	f7fd ff09 	bl	8000be8 <__aeabi_d2uiz>
	float thermXX_voltage = thermXX_value * 3300.0 / 4096.0; //Convert to mV (to avoid decimal places)
 8002dd6:	b280      	uxth	r0, r0
 8002dd8:	f7fd fbc4 	bl	8000564 <__aeabi_i2d>
 8002ddc:	a3a8      	add	r3, pc, #672	; (adr r3, 8003080 <main+0x1668>)
 8002dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de2:	f7fd fc29 	bl	8000638 <__aeabi_dmul>
 8002de6:	f7fd ff1f 	bl	8000c28 <__aeabi_d2f>
	float thermXX_resistance = 3300.0 * 3300 / thermXX_voltage;
 8002dea:	eddf 6aac 	vldr	s13, [pc, #688]	; 800309c <main+0x1684>
	thermXX_resistance = thermXX_resistance - 3300;
 8002dee:	eddf 7aac 	vldr	s15, [pc, #688]	; 80030a0 <main+0x1688>
	float thermXX_resistance = 3300.0 * 3300 / thermXX_voltage;
 8002df2:	ee07 0a10 	vmov	s14, r0
 8002df6:	ee86 7a87 	vdiv.f32	s14, s13, s14
	float thermXX_temp = 1000.0*(log(thermXX_resistance / 10000.0) + (3435.0/298.0));
 8002dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dfe:	ee17 0a90 	vmov	r0, s15
 8002e02:	f7fd fbc1 	bl	8000588 <__aeabi_f2d>
 8002e06:	a3a0      	add	r3, pc, #640	; (adr r3, 8003088 <main+0x1670>)
 8002e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0c:	f7fd fc14 	bl	8000638 <__aeabi_dmul>
 8002e10:	ec41 0b10 	vmov	d0, r0, r1
 8002e14:	f006 ffb8 	bl	8009d88 <log>
 8002e18:	a39d      	add	r3, pc, #628	; (adr r3, 8003090 <main+0x1678>)
 8002e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1e:	ec51 0b10 	vmov	r0, r1, d0
 8002e22:	f7fd fa53 	bl	80002cc <__adddf3>
 8002e26:	4b9f      	ldr	r3, [pc, #636]	; (80030a4 <main+0x168c>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f7fd fc05 	bl	8000638 <__aeabi_dmul>
 8002e2e:	f7fd fefb 	bl	8000c28 <__aeabi_d2f>
	thermXX_temp = 1000.0 * 3435.0 / thermXX_temp;
 8002e32:	ed9f 6a9d 	vldr	s12, [pc, #628]	; 80030a8 <main+0x1690>
	thermXX_temp = thermXX_temp - 273.0;
 8002e36:	eddf 6a9d 	vldr	s13, [pc, #628]	; 80030ac <main+0x1694>
		if (thermBL_temp > CANTx_FETTemp.FETTemp_float) CANTx_FETTemp.FETTemp_float = thermBL_temp;
 8002e3a:	ed9b 7a00 	vldr	s14, [fp]
		thermBL_temp = convertTempVal(RCM_GetUserConv());
 8002e3e:	4a9c      	ldr	r2, [pc, #624]	; (80030b0 <main+0x1698>)
	thermXX_temp = 1000.0 * 3435.0 / thermXX_temp;
 8002e40:	ee07 0a90 	vmov	s15, r0
 8002e44:	eec6 7a27 	vdiv.f32	s15, s12, s15
	thermXX_temp = thermXX_temp - 273.0;
 8002e48:	ee77 7ae6 	vsub.f32	s15, s15, s13
		thermBL_temp = convertTempVal(RCM_GetUserConv());
 8002e4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e50:	ee17 3a90 	vmov	r3, s15
 8002e54:	b29b      	uxth	r3, r3
		if (thermBL_temp > CANTx_FETTemp.FETTemp_float) CANTx_FETTemp.FETTemp_float = thermBL_temp;
 8002e56:	ee07 3a90 	vmov	s15, r3
 8002e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		thermBL_temp = convertTempVal(RCM_GetUserConv());
 8002e5e:	8013      	strh	r3, [r2, #0]
		if (thermBL_temp > CANTx_FETTemp.FETTemp_float) CANTx_FETTemp.FETTemp_float = thermBL_temp;
 8002e60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e68:	dd05      	ble.n	8002e76 <main+0x145e>
 8002e6a:	ee07 3a90 	vmov	s15, r3
 8002e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e72:	edcb 7a00 	vstr	s15, [fp]
		state = 110;
 8002e76:	236e      	movs	r3, #110	; 0x6e
 8002e78:	802b      	strh	r3, [r5, #0]
}
 8002e7a:	f7ff b83b 	b.w	8001ef4 <main+0x4dc>
	else if (RCM_GetUserConvState() == RCM_USERCONV_EOC)
 8002e7e:	f001 fd63 	bl	8004948 <RCM_GetUserConvState>
 8002e82:	2802      	cmp	r0, #2
 8002e84:	f47f a836 	bne.w	8001ef4 <main+0x4dc>
		thermBH_temp = convertTempVal(RCM_GetUserConv());
 8002e88:	f001 fd24 	bl	80048d4 <RCM_GetUserConv>
	thermXX_value = thermXX_value / 16.0; // Convert left-aligned to right-aligned (0-4096)
 8002e8c:	f7fd fb6a 	bl	8000564 <__aeabi_i2d>
 8002e90:	4b81      	ldr	r3, [pc, #516]	; (8003098 <main+0x1680>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	f7fd fbd0 	bl	8000638 <__aeabi_dmul>
 8002e98:	f7fd fea6 	bl	8000be8 <__aeabi_d2uiz>
	float thermXX_voltage = thermXX_value * 3300.0 / 4096.0; //Convert to mV (to avoid decimal places)
 8002e9c:	b280      	uxth	r0, r0
 8002e9e:	f7fd fb61 	bl	8000564 <__aeabi_i2d>
 8002ea2:	a377      	add	r3, pc, #476	; (adr r3, 8003080 <main+0x1668>)
 8002ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea8:	f7fd fbc6 	bl	8000638 <__aeabi_dmul>
 8002eac:	f7fd febc 	bl	8000c28 <__aeabi_d2f>
	float thermXX_resistance = 3300.0 * 3300 / thermXX_voltage;
 8002eb0:	eddf 6a7a 	vldr	s13, [pc, #488]	; 800309c <main+0x1684>
	thermXX_resistance = thermXX_resistance - 3300;
 8002eb4:	eddf 7a7a 	vldr	s15, [pc, #488]	; 80030a0 <main+0x1688>
	float thermXX_resistance = 3300.0 * 3300 / thermXX_voltage;
 8002eb8:	ee07 0a10 	vmov	s14, r0
 8002ebc:	ee86 7a87 	vdiv.f32	s14, s13, s14
	float thermXX_temp = 1000.0*(log(thermXX_resistance / 10000.0) + (3435.0/298.0));
 8002ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ec4:	ee17 0a90 	vmov	r0, s15
 8002ec8:	f7fd fb5e 	bl	8000588 <__aeabi_f2d>
 8002ecc:	a36e      	add	r3, pc, #440	; (adr r3, 8003088 <main+0x1670>)
 8002ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed2:	f7fd fbb1 	bl	8000638 <__aeabi_dmul>
 8002ed6:	ec41 0b10 	vmov	d0, r0, r1
 8002eda:	f006 ff55 	bl	8009d88 <log>
 8002ede:	a36c      	add	r3, pc, #432	; (adr r3, 8003090 <main+0x1678>)
 8002ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee4:	ec51 0b10 	vmov	r0, r1, d0
 8002ee8:	f7fd f9f0 	bl	80002cc <__adddf3>
 8002eec:	4b6d      	ldr	r3, [pc, #436]	; (80030a4 <main+0x168c>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f7fd fba2 	bl	8000638 <__aeabi_dmul>
 8002ef4:	f7fd fe98 	bl	8000c28 <__aeabi_d2f>
	thermXX_temp = 1000.0 * 3435.0 / thermXX_temp;
 8002ef8:	ed9f 6a6b 	vldr	s12, [pc, #428]	; 80030a8 <main+0x1690>
	thermXX_temp = thermXX_temp - 273.0;
 8002efc:	eddf 6a6b 	vldr	s13, [pc, #428]	; 80030ac <main+0x1694>
		if (thermBH_temp > CANTx_FETTemp.FETTemp_float) CANTx_FETTemp.FETTemp_float = thermBH_temp;
 8002f00:	ed9b 7a00 	vldr	s14, [fp]
		thermBH_temp = convertTempVal(RCM_GetUserConv());
 8002f04:	4a6b      	ldr	r2, [pc, #428]	; (80030b4 <main+0x169c>)
	thermXX_temp = 1000.0 * 3435.0 / thermXX_temp;
 8002f06:	ee07 0a90 	vmov	s15, r0
 8002f0a:	eec6 7a27 	vdiv.f32	s15, s12, s15
	thermXX_temp = thermXX_temp - 273.0;
 8002f0e:	ee77 7ae6 	vsub.f32	s15, s15, s13
		thermBH_temp = convertTempVal(RCM_GetUserConv());
 8002f12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f16:	ee17 3a90 	vmov	r3, s15
 8002f1a:	b29b      	uxth	r3, r3
		if (thermBH_temp > CANTx_FETTemp.FETTemp_float) CANTx_FETTemp.FETTemp_float = thermBH_temp;
 8002f1c:	ee07 3a90 	vmov	s15, r3
 8002f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		thermBH_temp = convertTempVal(RCM_GetUserConv());
 8002f24:	8013      	strh	r3, [r2, #0]
		if (thermBH_temp > CANTx_FETTemp.FETTemp_float) CANTx_FETTemp.FETTemp_float = thermBH_temp;
 8002f26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f2e:	dd05      	ble.n	8002f3c <main+0x1524>
 8002f30:	ee07 3a90 	vmov	s15, r3
 8002f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f38:	edcb 7a00 	vstr	s15, [fp]
		state = 109;
 8002f3c:	236d      	movs	r3, #109	; 0x6d
 8002f3e:	802b      	strh	r3, [r5, #0]
}
 8002f40:	f7fe bfd8 	b.w	8001ef4 <main+0x4dc>
	else if (RCM_GetUserConvState() == RCM_USERCONV_EOC)
 8002f44:	f001 fd00 	bl	8004948 <RCM_GetUserConvState>
 8002f48:	2802      	cmp	r0, #2
 8002f4a:	f47e afd3 	bne.w	8001ef4 <main+0x4dc>
		CANTx_FETTemp.FETTemp_float = convertTempVal(RCM_GetUserConv());
 8002f4e:	f001 fcc1 	bl	80048d4 <RCM_GetUserConv>
	thermXX_value = thermXX_value / 16.0; // Convert left-aligned to right-aligned (0-4096)
 8002f52:	f7fd fb07 	bl	8000564 <__aeabi_i2d>
 8002f56:	4b50      	ldr	r3, [pc, #320]	; (8003098 <main+0x1680>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f7fd fb6d 	bl	8000638 <__aeabi_dmul>
 8002f5e:	f7fd fe43 	bl	8000be8 <__aeabi_d2uiz>
	float thermXX_voltage = thermXX_value * 3300.0 / 4096.0; //Convert to mV (to avoid decimal places)
 8002f62:	b280      	uxth	r0, r0
 8002f64:	f7fd fafe 	bl	8000564 <__aeabi_i2d>
 8002f68:	a345      	add	r3, pc, #276	; (adr r3, 8003080 <main+0x1668>)
 8002f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6e:	f7fd fb63 	bl	8000638 <__aeabi_dmul>
 8002f72:	f7fd fe59 	bl	8000c28 <__aeabi_d2f>
	float thermXX_resistance = 3300.0 * 3300 / thermXX_voltage;
 8002f76:	eddf 6a49 	vldr	s13, [pc, #292]	; 800309c <main+0x1684>
	thermXX_resistance = thermXX_resistance - 3300;
 8002f7a:	eddf 7a49 	vldr	s15, [pc, #292]	; 80030a0 <main+0x1688>
	float thermXX_resistance = 3300.0 * 3300 / thermXX_voltage;
 8002f7e:	ee07 0a10 	vmov	s14, r0
 8002f82:	ee86 7a87 	vdiv.f32	s14, s13, s14
	float thermXX_temp = 1000.0*(log(thermXX_resistance / 10000.0) + (3435.0/298.0));
 8002f86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f8a:	ee17 0a90 	vmov	r0, s15
 8002f8e:	f7fd fafb 	bl	8000588 <__aeabi_f2d>
 8002f92:	a33d      	add	r3, pc, #244	; (adr r3, 8003088 <main+0x1670>)
 8002f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f98:	f7fd fb4e 	bl	8000638 <__aeabi_dmul>
 8002f9c:	ec41 0b10 	vmov	d0, r0, r1
 8002fa0:	f006 fef2 	bl	8009d88 <log>
 8002fa4:	a33a      	add	r3, pc, #232	; (adr r3, 8003090 <main+0x1678>)
 8002fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002faa:	ec51 0b10 	vmov	r0, r1, d0
 8002fae:	f7fd f98d 	bl	80002cc <__adddf3>
 8002fb2:	4b3c      	ldr	r3, [pc, #240]	; (80030a4 <main+0x168c>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f7fd fb3f 	bl	8000638 <__aeabi_dmul>
 8002fba:	f7fd fe35 	bl	8000c28 <__aeabi_d2f>
	thermXX_temp = 1000.0 * 3435.0 / thermXX_temp;
 8002fbe:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80030a8 <main+0x1690>
	thermXX_temp = thermXX_temp - 273.0;
 8002fc2:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80030ac <main+0x1694>
	thermXX_temp = 1000.0 * 3435.0 / thermXX_temp;
 8002fc6:	ee07 0a90 	vmov	s15, r0
 8002fca:	eec6 7aa7 	vdiv.f32	s15, s13, s15
		state = 107;
 8002fce:	236b      	movs	r3, #107	; 0x6b
 8002fd0:	802b      	strh	r3, [r5, #0]
	thermXX_temp = thermXX_temp - 273.0;
 8002fd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
		CANTx_FETTemp.FETTemp_float = convertTempVal(RCM_GetUserConv());
 8002fd6:	edcb 7a00 	vstr	s15, [fp]
		state = 107;
 8002fda:	f7fe bf8b 	b.w	8001ef4 <main+0x4dc>
	else if (RCM_GetUserConvState() == RCM_USERCONV_EOC)
 8002fde:	f001 fcb3 	bl	8004948 <RCM_GetUserConvState>
 8002fe2:	2802      	cmp	r0, #2
 8002fe4:	f47e af86 	bne.w	8001ef4 <main+0x4dc>
		CANTx_mtrTemp.mtrTemp_float = convertTempVal(RCM_GetUserConv());
 8002fe8:	f001 fc74 	bl	80048d4 <RCM_GetUserConv>
	thermXX_value = thermXX_value / 16.0; // Convert left-aligned to right-aligned (0-4096)
 8002fec:	f7fd faba 	bl	8000564 <__aeabi_i2d>
 8002ff0:	4b29      	ldr	r3, [pc, #164]	; (8003098 <main+0x1680>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f7fd fb20 	bl	8000638 <__aeabi_dmul>
 8002ff8:	f7fd fdf6 	bl	8000be8 <__aeabi_d2uiz>
	float thermXX_voltage = thermXX_value * 3300.0 / 4096.0; //Convert to mV (to avoid decimal places)
 8002ffc:	b280      	uxth	r0, r0
 8002ffe:	f7fd fab1 	bl	8000564 <__aeabi_i2d>
 8003002:	a31f      	add	r3, pc, #124	; (adr r3, 8003080 <main+0x1668>)
 8003004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003008:	f7fd fb16 	bl	8000638 <__aeabi_dmul>
 800300c:	f7fd fe0c 	bl	8000c28 <__aeabi_d2f>
	float thermXX_resistance = 3300.0 * 3300 / thermXX_voltage;
 8003010:	eddf 6a22 	vldr	s13, [pc, #136]	; 800309c <main+0x1684>
	thermXX_resistance = thermXX_resistance - 3300;
 8003014:	eddf 7a22 	vldr	s15, [pc, #136]	; 80030a0 <main+0x1688>
	float thermXX_resistance = 3300.0 * 3300 / thermXX_voltage;
 8003018:	ee07 0a10 	vmov	s14, r0
 800301c:	ee86 7a87 	vdiv.f32	s14, s13, s14
	float thermXX_temp = 1000.0*(log(thermXX_resistance / 10000.0) + (3435.0/298.0));
 8003020:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003024:	ee17 0a90 	vmov	r0, s15
 8003028:	f7fd faae 	bl	8000588 <__aeabi_f2d>
 800302c:	a316      	add	r3, pc, #88	; (adr r3, 8003088 <main+0x1670>)
 800302e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003032:	f7fd fb01 	bl	8000638 <__aeabi_dmul>
 8003036:	ec41 0b10 	vmov	d0, r0, r1
 800303a:	f006 fea5 	bl	8009d88 <log>
 800303e:	a314      	add	r3, pc, #80	; (adr r3, 8003090 <main+0x1678>)
 8003040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003044:	ec51 0b10 	vmov	r0, r1, d0
 8003048:	f7fd f940 	bl	80002cc <__adddf3>
 800304c:	4b15      	ldr	r3, [pc, #84]	; (80030a4 <main+0x168c>)
 800304e:	2200      	movs	r2, #0
 8003050:	f7fd faf2 	bl	8000638 <__aeabi_dmul>
 8003054:	f7fd fde8 	bl	8000c28 <__aeabi_d2f>
	thermXX_temp = 1000.0 * 3435.0 / thermXX_temp;
 8003058:	eddf 6a13 	vldr	s13, [pc, #76]	; 80030a8 <main+0x1690>
	thermXX_temp = thermXX_temp - 273.0;
 800305c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80030ac <main+0x1694>
	thermXX_temp = 1000.0 * 3435.0 / thermXX_temp;
 8003060:	ee07 0a90 	vmov	s15, r0
 8003064:	eec6 7aa7 	vdiv.f32	s15, s13, s15
		state = 106;
 8003068:	236a      	movs	r3, #106	; 0x6a
 800306a:	802b      	strh	r3, [r5, #0]
		CANTx_mtrTemp.mtrTemp_float = convertTempVal(RCM_GetUserConv());
 800306c:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <main+0x16a0>)
	thermXX_temp = thermXX_temp - 273.0;
 800306e:	ee77 7ac7 	vsub.f32	s15, s15, s14
		CANTx_mtrTemp.mtrTemp_float = convertTempVal(RCM_GetUserConv());
 8003072:	edc3 7a00 	vstr	s15, [r3]
		state = 106;
 8003076:	f7fe bf3d 	b.w	8001ef4 <main+0x4dc>
 800307a:	bf00      	nop
 800307c:	f3af 8000 	nop.w
 8003080:	00000000 	.word	0x00000000
 8003084:	3fe9c800 	.word	0x3fe9c800
 8003088:	eb1c432d 	.word	0xeb1c432d
 800308c:	3f1a36e2 	.word	0x3f1a36e2
 8003090:	b61eed1a 	.word	0xb61eed1a
 8003094:	40270dbe 	.word	0x40270dbe
 8003098:	3fb00000 	.word	0x3fb00000
 800309c:	4b262b10 	.word	0x4b262b10
 80030a0:	454e4000 	.word	0x454e4000
 80030a4:	408f4000 	.word	0x408f4000
 80030a8:	4a51a7e0 	.word	0x4a51a7e0
 80030ac:	43888000 	.word	0x43888000
 80030b0:	20000a42 	.word	0x20000a42
 80030b4:	200008d8 	.word	0x200008d8
 80030b8:	20000a3c 	.word	0x20000a3c

080030bc <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 80030bc:	4b01      	ldr	r3, [pc, #4]	; (80030c4 <MC_StartMotor1+0x8>)
 80030be:	6818      	ldr	r0, [r3, #0]
 80030c0:	f000 b864 	b.w	800318c <MCI_StartMotor>
 80030c4:	20000c74 	.word	0x20000c74

080030c8 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 80030c8:	4b01      	ldr	r3, [pc, #4]	; (80030d0 <MC_StopMotor1+0x8>)
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	f000 b868 	b.w	80031a0 <MCI_StopMotor>
 80030d0:	20000c74 	.word	0x20000c74

080030d4 <MC_ProgramSpeedRampMotor1>:
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1( int16_t hFinalSpeed, uint16_t hDurationms )
{
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 80030d4:	4b02      	ldr	r3, [pc, #8]	; (80030e0 <MC_ProgramSpeedRampMotor1+0xc>)
{
 80030d6:	460a      	mov	r2, r1
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 80030d8:	4601      	mov	r1, r0
 80030da:	6818      	ldr	r0, [r3, #0]
 80030dc:	f000 b836 	b.w	800314c <MCI_ExecSpeedRamp>
 80030e0:	20000c74 	.word	0x20000c74

080030e4 <MC_ProgramTorqueRampMotor1>:
  *         is possible to set 0 to perform an instantaneous change in the torque
  *         value.
  */
__weak void MC_ProgramTorqueRampMotor1( int16_t hFinalTorque, uint16_t hDurationms )
{
	MCI_ExecTorqueRamp( pMCI[M1], hFinalTorque, hDurationms );
 80030e4:	4b02      	ldr	r3, [pc, #8]	; (80030f0 <MC_ProgramTorqueRampMotor1+0xc>)
{
 80030e6:	460a      	mov	r2, r1
	MCI_ExecTorqueRamp( pMCI[M1], hFinalTorque, hDurationms );
 80030e8:	4601      	mov	r1, r0
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	f000 b83a 	b.w	8003164 <MCI_ExecTorqueRamp>
 80030f0:	20000c74 	.word	0x20000c74

080030f4 <MC_GetMecSpeedAverageMotor1>:
/**
 * @brief Returns the last computed average mechanical rotor speed for Motor 1, expressed in the unit defined by #SPEED_UNIT
 */
__weak int16_t MC_GetMecSpeedAverageMotor1(void)
{
	return MCI_GetAvrgMecSpeedUnit( pMCI[M1] );
 80030f4:	4b01      	ldr	r3, [pc, #4]	; (80030fc <MC_GetMecSpeedAverageMotor1+0x8>)
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	f000 b8da 	b.w	80032b0 <MCI_GetAvrgMecSpeedUnit>
 80030fc:	20000c74 	.word	0x20000c74

08003100 <MC_GetPhaseCurrentAmplitudeMotor1>:
 * @f]
 *
 */
__weak int16_t MC_GetPhaseCurrentAmplitudeMotor1(void)
{
	return MCI_GetPhaseCurrentAmplitude( pMCI[M1] );
 8003100:	4b01      	ldr	r3, [pc, #4]	; (8003108 <MC_GetPhaseCurrentAmplitudeMotor1+0x8>)
 8003102:	6818      	ldr	r0, [r3, #0]
 8003104:	f000 b938 	b.w	8003378 <MCI_GetPhaseCurrentAmplitude>
 8003108:	20000c74 	.word	0x20000c74

0800310c <MC_GetOccurredFaultsMotor1>:
 * See \link Fault_generation_error_codes Motor Control Faults\endlink for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetOccurredFaultsMotor1(void)
{
	return MCI_GetOccurredFaults( pMCI[M1] );
 800310c:	4b01      	ldr	r3, [pc, #4]	; (8003114 <MC_GetOccurredFaultsMotor1+0x8>)
 800310e:	6818      	ldr	r0, [r3, #0]
 8003110:	f000 b892 	b.w	8003238 <MCI_GetOccurredFaults>
 8003114:	20000c74 	.word	0x20000c74

08003118 <MC_GetCurrentFaultsMotor1>:
 * See \link Fault_generation_error_codes Motor Control Faults\endlink for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetCurrentFaultsMotor1(void)
{
	return MCI_GetCurrentFaults( pMCI[M1] );
 8003118:	4b01      	ldr	r3, [pc, #4]	; (8003120 <MC_GetCurrentFaultsMotor1+0x8>)
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	f000 b892 	b.w	8003244 <MCI_GetCurrentFaults>
 8003120:	20000c74 	.word	0x20000c74

08003124 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8003124:	4b01      	ldr	r3, [pc, #4]	; (800312c <MC_GetSTMStateMotor1+0x8>)
 8003126:	6818      	ldr	r0, [r3, #0]
 8003128:	f000 b882 	b.w	8003230 <MCI_GetSTMState>
 800312c:	20000c74 	.word	0x20000c74

08003130 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 8003130:	b410      	push	{r4}
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8003132:	2400      	movs	r4, #0
 8003134:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8003136:	81c4      	strh	r4, [r0, #14]
  pHandle->hFinalTorque = 0;
 8003138:	8204      	strh	r4, [r0, #16]
  pHandle->hDurationms = 0;
 800313a:	82c4      	strh	r4, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 800313c:	7604      	strb	r4, [r0, #24]
  pHandle->pSTC = pSTC;
 800313e:	e9c0 1200 	strd	r1, r2, [r0]
}
 8003142:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->pFOCVars = pFOCVars;
 8003146:	6083      	str	r3, [r0, #8]
}
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop

0800314c <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
 800314c:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800314e:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8003152:	2401      	movs	r4, #1
 8003154:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8003156:	81c1      	strh	r1, [r0, #14]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8003158:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 800315c:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800315e:	8303      	strh	r3, [r0, #24]
}
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop

08003164 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8003164:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8003166:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8003168:	2402      	movs	r4, #2
 800316a:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 800316c:	8201      	strh	r1, [r0, #16]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 800316e:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 8003172:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8003174:	8303      	strh	r3, [r0, #24]
}
 8003176:	4770      	bx	lr

08003178 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8003178:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 800317a:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800317c:	2301      	movs	r3, #1
  pHandle->Iqdref.q = Iqdref.q;
 800317e:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8003182:	7302      	strb	r2, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8003184:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8003186:	b002      	add	sp, #8
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop

0800318c <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 800318c:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 800318e:	2103      	movs	r1, #3
{
 8003190:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8003192:	6800      	ldr	r0, [r0, #0]
 8003194:	f005 fa32 	bl	80085fc <STM_NextState>

  if ( RetVal == true )
 8003198:	b108      	cbz	r0, 800319e <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800319a:	2301      	movs	r3, #1
 800319c:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 800319e:	bd10      	pop	{r4, pc}

080031a0 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 80031a0:	6800      	ldr	r0, [r0, #0]
 80031a2:	2107      	movs	r1, #7
 80031a4:	f005 ba2a 	b.w	80085fc <STM_NextState>

080031a8 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 80031a8:	6800      	ldr	r0, [r0, #0]
 80031aa:	f005 ba9d 	b.w	80086e8 <STM_FaultAcknowledged>
 80031ae:	bf00      	nop

080031b0 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 80031b0:	6800      	ldr	r0, [r0, #0]
 80031b2:	2101      	movs	r1, #1
 80031b4:	f005 ba22 	b.w	80085fc <STM_NextState>

080031b8 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 80031b8:	b178      	cbz	r0, 80031da <MCI_ExecBufferedCommands+0x22>
{
 80031ba:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 80031bc:	7e03      	ldrb	r3, [r0, #24]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	4604      	mov	r4, r0
 80031c2:	d000      	beq.n	80031c6 <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 80031c4:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 80031c6:	7b01      	ldrb	r1, [r0, #12]
 80031c8:	2902      	cmp	r1, #2
 80031ca:	d020      	beq.n	800320e <MCI_ExecBufferedCommands+0x56>
 80031cc:	2903      	cmp	r1, #3
 80031ce:	d005      	beq.n	80031dc <MCI_ExecBufferedCommands+0x24>
 80031d0:	2901      	cmp	r1, #1
 80031d2:	d00c      	beq.n	80031ee <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 80031d4:	2303      	movs	r3, #3
 80031d6:	7623      	strb	r3, [r4, #24]
}
 80031d8:	bd10      	pop	{r4, pc}
 80031da:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80031dc:	6882      	ldr	r2, [r0, #8]
 80031de:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80031e2:	f8d0 3012 	ldr.w	r3, [r0, #18]
 80031e6:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 80031e8:	2302      	movs	r3, #2
 80031ea:	7623      	strb	r3, [r4, #24]
}
 80031ec:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80031ee:	6883      	ldr	r3, [r0, #8]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 80031f6:	6840      	ldr	r0, [r0, #4]
 80031f8:	f005 f93a 	bl	8008470 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 80031fc:	8ae2      	ldrh	r2, [r4, #22]
 80031fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003202:	6860      	ldr	r0, [r4, #4]
 8003204:	f005 f938 	bl	8008478 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8003208:	2800      	cmp	r0, #0
 800320a:	d0e3      	beq.n	80031d4 <MCI_ExecBufferedCommands+0x1c>
 800320c:	e7ec      	b.n	80031e8 <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800320e:	6883      	ldr	r3, [r0, #8]
 8003210:	2100      	movs	r1, #0
 8003212:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8003216:	6840      	ldr	r0, [r0, #4]
 8003218:	f005 f92a 	bl	8008470 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 800321c:	8ae2      	ldrh	r2, [r4, #22]
 800321e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8003222:	6860      	ldr	r0, [r4, #4]
 8003224:	f005 f928 	bl	8008478 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8003228:	2800      	cmp	r0, #0
 800322a:	d0d3      	beq.n	80031d4 <MCI_ExecBufferedCommands+0x1c>
 800322c:	e7dc      	b.n	80031e8 <MCI_ExecBufferedCommands+0x30>
 800322e:	bf00      	nop

08003230 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8003230:	6800      	ldr	r0, [r0, #0]
 8003232:	f005 ba57 	b.w	80086e4 <STM_GetState>
 8003236:	bf00      	nop

08003238 <MCI_GetOccurredFaults>:
  *         historically occurred since the state machine has been moved into
  *         FAULT_NOW state.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults( MCI_Handle_t * pHandle )
{
 8003238:	b508      	push	{r3, lr}
  return ( uint16_t )( STM_GetFaultState( pHandle->pSTM ) );
 800323a:	6800      	ldr	r0, [r0, #0]
 800323c:	f005 fa60 	bl	8008700 <STM_GetFaultState>
}
 8003240:	b280      	uxth	r0, r0
 8003242:	bd08      	pop	{r3, pc}

08003244 <MCI_GetCurrentFaults>:
  * @retval uint16_t  16 bit fields with information about about currently
  *         present faults.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetCurrentFaults( MCI_Handle_t * pHandle )
{
 8003244:	b508      	push	{r3, lr}
  return ( uint16_t )( STM_GetFaultState( pHandle->pSTM ) >> 16 );
 8003246:	6800      	ldr	r0, [r0, #0]
 8003248:	f005 fa5a 	bl	8008700 <STM_GetFaultState>
}
 800324c:	0c00      	lsrs	r0, r0, #16
 800324e:	bd08      	pop	{r3, pc}

08003250 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8003250:	7e40      	ldrb	r0, [r0, #25]
 8003252:	4770      	bx	lr

08003254 <MCI_GetImposedMotorDirection>:
  */
__weak int16_t MCI_GetImposedMotorDirection( MCI_Handle_t * pHandle )
{
  int16_t retVal = 1;

  switch ( pHandle->lastCommand )
 8003254:	7b03      	ldrb	r3, [r0, #12]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d005      	beq.n	8003266 <MCI_GetImposedMotorDirection+0x12>
 800325a:	2b03      	cmp	r3, #3
 800325c:	d013      	beq.n	8003286 <MCI_GetImposedMotorDirection+0x32>
 800325e:	2b01      	cmp	r3, #1
 8003260:	d009      	beq.n	8003276 <MCI_GetImposedMotorDirection+0x22>
 8003262:	2001      	movs	r0, #1
      break;
    default:
      break;
  }
  return retVal;
}
 8003264:	4770      	bx	lr
      if ( pHandle->hFinalTorque < 0 )
 8003266:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 800326a:	2b00      	cmp	r3, #0
        retVal = -1;
 800326c:	bfac      	ite	ge
 800326e:	2001      	movge	r0, #1
 8003270:	f04f 30ff 	movlt.w	r0, #4294967295
 8003274:	4770      	bx	lr
      if ( pHandle->hFinalSpeed < 0 )
 8003276:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800327a:	2b00      	cmp	r3, #0
        retVal = -1;
 800327c:	bfac      	ite	ge
 800327e:	2001      	movge	r0, #1
 8003280:	f04f 30ff 	movlt.w	r0, #4294967295
 8003284:	4770      	bx	lr
      if ( pHandle->Iqdref.q < 0 )
 8003286:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 800328a:	2b00      	cmp	r3, #0
        retVal = -1;
 800328c:	bfac      	ite	ge
 800328e:	2001      	movge	r0, #1
 8003290:	f04f 30ff 	movlt.w	r0, #4294967295
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop

08003298 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8003298:	7b03      	ldrb	r3, [r0, #12]
 800329a:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 800329c:	bf0c      	ite	eq
 800329e:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 80032a2:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop

080032a8 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 80032a8:	6840      	ldr	r0, [r0, #4]
 80032aa:	f005 b92d 	b.w	8008508 <STC_StopRamp>
 80032ae:	bf00      	nop

080032b0 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 80032b0:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 80032b2:	6840      	ldr	r0, [r0, #4]
 80032b4:	f005 f8c2 	bl	800843c <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 80032b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 80032bc:	f005 b86a 	b.w	8008394 <SPD_GetAvrgMecSpeedUnit>

080032c0 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 80032c0:	6840      	ldr	r0, [r0, #4]
 80032c2:	f005 b8c5 	b.w	8008450 <STC_GetMecSpeedRefUnit>
 80032c6:	bf00      	nop

080032c8 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 80032c8:	6882      	ldr	r2, [r0, #8]
 80032ca:	6810      	ldr	r0, [r2, #0]
 80032cc:	2300      	movs	r3, #0
 80032ce:	b282      	uxth	r2, r0
 80032d0:	f362 030f 	bfi	r3, r2, #0, #16
 80032d4:	0c00      	lsrs	r0, r0, #16
 80032d6:	f360 431f 	bfi	r3, r0, #16, #16
{
 80032da:	b082      	sub	sp, #8
}
 80032dc:	4618      	mov	r0, r3
 80032de:	b002      	add	sp, #8
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop

080032e4 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 80032e4:	6882      	ldr	r2, [r0, #8]
 80032e6:	6850      	ldr	r0, [r2, #4]
 80032e8:	2300      	movs	r3, #0
 80032ea:	b282      	uxth	r2, r0
 80032ec:	f362 030f 	bfi	r3, r2, #0, #16
 80032f0:	0c00      	lsrs	r0, r0, #16
 80032f2:	f360 431f 	bfi	r3, r0, #16, #16
{
 80032f6:	b082      	sub	sp, #8
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	b002      	add	sp, #8
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop

08003300 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8003300:	6882      	ldr	r2, [r0, #8]
 8003302:	68d0      	ldr	r0, [r2, #12]
 8003304:	2300      	movs	r3, #0
 8003306:	b282      	uxth	r2, r0
 8003308:	f362 030f 	bfi	r3, r2, #0, #16
 800330c:	0c00      	lsrs	r0, r0, #16
 800330e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8003312:	b082      	sub	sp, #8
}
 8003314:	4618      	mov	r0, r3
 8003316:	b002      	add	sp, #8
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop

0800331c <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 800331c:	6882      	ldr	r2, [r0, #8]
 800331e:	6910      	ldr	r0, [r2, #16]
 8003320:	2300      	movs	r3, #0
 8003322:	b282      	uxth	r2, r0
 8003324:	f362 030f 	bfi	r3, r2, #0, #16
 8003328:	0c00      	lsrs	r0, r0, #16
 800332a:	f360 431f 	bfi	r3, r0, #16, #16
{
 800332e:	b082      	sub	sp, #8
}
 8003330:	4618      	mov	r0, r3
 8003332:	b002      	add	sp, #8
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop

08003338 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8003338:	6882      	ldr	r2, [r0, #8]
 800333a:	f8d2 0016 	ldr.w	r0, [r2, #22]
 800333e:	2300      	movs	r3, #0
 8003340:	b282      	uxth	r2, r0
 8003342:	f362 030f 	bfi	r3, r2, #0, #16
 8003346:	0c00      	lsrs	r0, r0, #16
 8003348:	f360 431f 	bfi	r3, r0, #16, #16
{
 800334c:	b082      	sub	sp, #8
}
 800334e:	4618      	mov	r0, r3
 8003350:	b002      	add	sp, #8
 8003352:	4770      	bx	lr

08003354 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8003354:	6882      	ldr	r2, [r0, #8]
 8003356:	f8d2 001a 	ldr.w	r0, [r2, #26]
 800335a:	2300      	movs	r3, #0
 800335c:	b282      	uxth	r2, r0
 800335e:	f362 030f 	bfi	r3, r2, #0, #16
 8003362:	0c00      	lsrs	r0, r0, #16
 8003364:	f360 431f 	bfi	r3, r0, #16, #16
{
 8003368:	b082      	sub	sp, #8
}
 800336a:	4618      	mov	r0, r3
 800336c:	b002      	add	sp, #8
 800336e:	4770      	bx	lr

08003370 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8003370:	6883      	ldr	r3, [r0, #8]
}
 8003372:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8003376:	4770      	bx	lr

08003378 <MCI_GetPhaseCurrentAmplitude>:
__weak int16_t MCI_GetPhaseCurrentAmplitude( MCI_Handle_t * pHandle )
{
  alphabeta_t Local_Curr;
  int32_t wAux1, wAux2;

  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 8003378:	6882      	ldr	r2, [r0, #8]
{
 800337a:	b508      	push	{r3, lr}
  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 800337c:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8003380:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
  wAux1 = ( int32_t )( Local_Curr.alpha ) * Local_Curr.alpha;
  wAux2 = ( int32_t )( Local_Curr.beta ) * Local_Curr.beta;
 8003384:	fb03 f303 	mul.w	r3, r3, r3

  wAux1 += wAux2;
  wAux1 = MCM_Sqrt( wAux1 );
 8003388:	fb00 3000 	mla	r0, r0, r0, r3
 800338c:	f000 f8f4 	bl	8003578 <MCM_Sqrt>
  if ( wAux1 > INT16_MAX )
  {
    wAux1 = ( int32_t ) INT16_MAX;
  }

  return ( ( int16_t )wAux1 );
 8003390:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8003394:	4298      	cmp	r0, r3
 8003396:	bfa8      	it	ge
 8003398:	4618      	movge	r0, r3
}
 800339a:	b200      	sxth	r0, r0
 800339c:	bd08      	pop	{r3, pc}
 800339e:	bf00      	nop

080033a0 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 80033a0:	2300      	movs	r3, #0
 80033a2:	6882      	ldr	r2, [r0, #8]
 80033a4:	f361 030f 	bfi	r3, r1, #0, #16
 80033a8:	f361 431f 	bfi	r3, r1, #16, #16
 80033ac:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop

080033b4 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 80033b4:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 80033b6:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 80033ba:	f005 f8e5 	bl	8008588 <STC_GetDefaultIqdref>
 80033be:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80033c2:	8220      	strh	r0, [r4, #16]
 80033c4:	8263      	strh	r3, [r4, #18]
}
 80033c6:	bd10      	pop	{r4, pc}

080033c8 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 80033c8:	b203      	sxth	r3, r0
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 80033ca:	f644 11e6 	movw	r1, #18918	; 0x49e6
 80033ce:	f3c0 400f 	ubfx	r0, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 80033d2:	fb13 f201 	smulbb	r2, r3, r1
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 80033d6:	fb10 f101 	smulbb	r1, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 80033da:	4250      	negs	r0, r2
 80033dc:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 80033e0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 80033e4:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 80033e6:	da05      	bge.n	80033f4 <MCM_Clarke+0x2c>
 80033e8:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 80033ea:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 80033ee:	da0c      	bge.n	800340a <MCM_Clarke+0x42>
 80033f0:	4a09      	ldr	r2, [pc, #36]	; (8003418 <MCM_Clarke+0x50>)
 80033f2:	e001      	b.n	80033f8 <MCM_Clarke+0x30>
 80033f4:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2000      	movs	r0, #0
 80033fc:	b292      	uxth	r2, r2
 80033fe:	f363 000f 	bfi	r0, r3, #0, #16
 8003402:	f362 401f 	bfi	r0, r2, #16, #16
}
 8003406:	b004      	add	sp, #16
 8003408:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 800340a:	4803      	ldr	r0, [pc, #12]	; (8003418 <MCM_Clarke+0x50>)
 800340c:	b20a      	sxth	r2, r1
 800340e:	4282      	cmp	r2, r0
 8003410:	bfb8      	it	lt
 8003412:	4602      	movlt	r2, r0
 8003414:	e7f0      	b.n	80033f8 <MCM_Clarke+0x30>
 8003416:	bf00      	nop
 8003418:	ffff8001 	.word	0xffff8001

0800341c <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 800341c:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 8003420:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8003424:	f400 7140 	and.w	r1, r0, #768	; 0x300
 8003428:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
{
 800342c:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 800342e:	d028      	beq.n	8003482 <MCM_Trig_Functions+0x66>
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	461a      	mov	r2, r3
 8003436:	d816      	bhi.n	8003466 <MCM_Trig_Functions+0x4a>
 8003438:	b361      	cbz	r1, 8003494 <MCM_Trig_Functions+0x78>
 800343a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800343e:	d109      	bne.n	8003454 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8003440:	b2c0      	uxtb	r0, r0
 8003442:	43c3      	mvns	r3, r0
 8003444:	491a      	ldr	r1, [pc, #104]	; (80034b0 <MCM_Trig_Functions+0x94>)
 8003446:	b2db      	uxtb	r3, r3
 8003448:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 800344c:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8003450:	4252      	negs	r2, r2
 8003452:	b212      	sxth	r2, r2
      break;
    default:
      break;
  }
  return ( Local_Components );
 8003454:	b29b      	uxth	r3, r3
 8003456:	2000      	movs	r0, #0
 8003458:	b292      	uxth	r2, r2
 800345a:	f363 000f 	bfi	r0, r3, #0, #16
 800345e:	f362 401f 	bfi	r0, r2, #16, #16
}
 8003462:	b002      	add	sp, #8
 8003464:	4770      	bx	lr
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8003466:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800346a:	d1f3      	bne.n	8003454 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800346c:	4910      	ldr	r1, [pc, #64]	; (80034b0 <MCM_Trig_Functions+0x94>)
 800346e:	b2c0      	uxtb	r0, r0
 8003470:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8003472:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8003476:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8003478:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800347a:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800347e:	b21b      	sxth	r3, r3
      break;
 8003480:	e7e8      	b.n	8003454 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8003482:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8003484:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8003486:	4a0a      	ldr	r2, [pc, #40]	; (80034b0 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8003488:	b2db      	uxtb	r3, r3
 800348a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800348e:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
      break;
 8003492:	e7df      	b.n	8003454 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8003494:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8003496:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8003498:	4a05      	ldr	r2, [pc, #20]	; (80034b0 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800349a:	b2db      	uxtb	r3, r3
 800349c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80034a0:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80034a4:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80034a6:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80034a8:	b21b      	sxth	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80034aa:	b212      	sxth	r2, r2
      break;
 80034ac:	e7d2      	b.n	8003454 <MCM_Trig_Functions+0x38>
 80034ae:	bf00      	nop
 80034b0:	0800a448 	.word	0x0800a448

080034b4 <MCM_Park>:
{
 80034b4:	b570      	push	{r4, r5, r6, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	4605      	mov	r5, r0
 80034ba:	9001      	str	r0, [sp, #4]
 80034bc:	4606      	mov	r6, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80034be:	4608      	mov	r0, r1
 80034c0:	f7ff ffac 	bl	800341c <MCM_Trig_Functions>
 80034c4:	b22d      	sxth	r5, r5
 80034c6:	b204      	sxth	r4, r0
 80034c8:	1436      	asrs	r6, r6, #16
 80034ca:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 80034cc:	fb05 f204 	mul.w	r2, r5, r4
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 80034d0:	fb06 2210 	mls	r2, r6, r0, r2
  if ( wqd_tmp > INT16_MAX )
 80034d4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80034d8:	da12      	bge.n	8003500 <MCM_Park+0x4c>
 80034da:	13d3      	asrs	r3, r2, #15
  else if ( wqd_tmp < ( -32768 ) )
 80034dc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80034e0:	4914      	ldr	r1, [pc, #80]	; (8003534 <MCM_Park+0x80>)
 80034e2:	da21      	bge.n	8003528 <MCM_Park+0x74>
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 80034e4:	fb04 f406 	mul.w	r4, r4, r6
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 80034e8:	fb05 4000 	mla	r0, r5, r0, r4
  if ( wqd_tmp > INT16_MAX )
 80034ec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 80034f0:	ea4f 32e0 	mov.w	r2, r0, asr #15
  if ( wqd_tmp > INT16_MAX )
 80034f4:	da07      	bge.n	8003506 <MCM_Park+0x52>
  else if ( wqd_tmp < ( -32768 ) )
 80034f6:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 80034fa:	da0f      	bge.n	800351c <MCM_Park+0x68>
 80034fc:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <MCM_Park+0x80>)
 80034fe:	e004      	b.n	800350a <MCM_Park+0x56>
 8003500:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8003504:	e7ee      	b.n	80034e4 <MCM_Park+0x30>
 8003506:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 800350a:	b28a      	uxth	r2, r1
 800350c:	2000      	movs	r0, #0
 800350e:	b29b      	uxth	r3, r3
 8003510:	f362 000f 	bfi	r0, r2, #0, #16
 8003514:	f363 401f 	bfi	r0, r3, #16, #16
}
 8003518:	b004      	add	sp, #16
 800351a:	bd70      	pop	{r4, r5, r6, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 800351c:	4805      	ldr	r0, [pc, #20]	; (8003534 <MCM_Park+0x80>)
 800351e:	b213      	sxth	r3, r2
 8003520:	4283      	cmp	r3, r0
 8003522:	bfb8      	it	lt
 8003524:	4603      	movlt	r3, r0
 8003526:	e7f0      	b.n	800350a <MCM_Park+0x56>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8003528:	b21a      	sxth	r2, r3
 800352a:	4291      	cmp	r1, r2
 800352c:	bfb8      	it	lt
 800352e:	4611      	movlt	r1, r2
 8003530:	e7d8      	b.n	80034e4 <MCM_Park+0x30>
 8003532:	bf00      	nop
 8003534:	ffff8001 	.word	0xffff8001

08003538 <MCM_Rev_Park>:
{
 8003538:	b530      	push	{r4, r5, lr}
 800353a:	b085      	sub	sp, #20
 800353c:	4604      	mov	r4, r0
 800353e:	9001      	str	r0, [sp, #4]
 8003540:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8003542:	4608      	mov	r0, r1
 8003544:	f7ff ff6a 	bl	800341c <MCM_Trig_Functions>
 8003548:	142d      	asrs	r5, r5, #16
 800354a:	1403      	asrs	r3, r0, #16
 800354c:	b224      	sxth	r4, r4
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 800354e:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8003552:	b200      	sxth	r0, r0
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8003554:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8003558:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 800355c:	fb04 0313 	mls	r3, r4, r3, r0
  return ( Output );
 8003560:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 8003564:	2000      	movs	r0, #0
 8003566:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 800356a:	f362 000f 	bfi	r0, r2, #0, #16
 800356e:	f363 401f 	bfi	r0, r3, #16, #16
}
 8003572:	b005      	add	sp, #20
 8003574:	bd30      	pop	{r4, r5, pc}
 8003576:	bf00      	nop

08003578 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt( int32_t wInput )
{
  int32_t wtemprootnew;

  if ( wInput > 0 )
 8003578:	1e03      	subs	r3, r0, #0
 800357a:	dd32      	ble.n	80035e2 <MCM_Sqrt+0x6a>
  {
  uint8_t biter = 0u;
  int32_t wtemproot;

    if ( wInput <= ( int32_t )2097152 )
 800357c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    {
      wtemproot = ( int32_t )128;
    }
    else
    {
      wtemproot = ( int32_t )8192;
 8003580:	bfd4      	ite	le
 8003582:	2080      	movle	r0, #128	; 0x80
 8003584:	f44f 5000 	movgt.w	r0, #8192	; 0x2000
    }

    do
    {
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8003588:	fb93 f2f0 	sdiv	r2, r3, r0
 800358c:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 800358e:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8003592:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8003596:	d025      	beq.n	80035e4 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8003598:	fb93 f2f1 	sdiv	r2, r3, r1
 800359c:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 800359e:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80035a2:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 80035a6:	d01d      	beq.n	80035e4 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80035a8:	fb93 f2f0 	sdiv	r2, r3, r0
 80035ac:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 80035ae:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80035b2:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 80035b6:	d015      	beq.n	80035e4 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80035b8:	fb93 f2f1 	sdiv	r2, r3, r1
 80035bc:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 80035be:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80035c2:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 80035c6:	d00d      	beq.n	80035e4 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80035c8:	fb93 f2f0 	sdiv	r2, r3, r0
 80035cc:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 80035ce:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80035d2:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 80035d6:	d005      	beq.n	80035e4 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80035d8:	fb93 f0f1 	sdiv	r0, r3, r1
 80035dc:	4408      	add	r0, r1
 80035de:	1040      	asrs	r0, r0, #1
      if ( wtemprootnew == wtemproot )
 80035e0:	4770      	bx	lr
    while ( biter < 6u );

  }
  else
  {
    wtemprootnew = ( int32_t )0;
 80035e2:	2000      	movs	r0, #0
  }

  return ( wtemprootnew );
}
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop

080035e8 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 80035e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ea:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 80035ee:	4b1b      	ldr	r3, [pc, #108]	; (800365c <FOC_Clear+0x74>)
 80035f0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80035f4:	eb03 0c41 	add.w	ip, r3, r1, lsl #1
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 80035f8:	004a      	lsls	r2, r1, #1
  FOCVars[bMotor].Iab = NULL_ab;
 80035fa:	2500      	movs	r5, #0
{
 80035fc:	4604      	mov	r4, r0
  FOCVars[bMotor].Iqd = NULL_qd;
 80035fe:	f102 070c 	add.w	r7, r2, #12
  FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
 8003602:	2626      	movs	r6, #38	; 0x26
  FOCVars[bMotor].Vqd = NULL_qd;
 8003604:	3216      	adds	r2, #22
  FOCVars[bMotor].Iab = NULL_ab;
 8003606:	f843 5011 	str.w	r5, [r3, r1, lsl #1]
  FOCVars[bMotor].Iqd = NULL_qd;
 800360a:	eb07 0e03 	add.w	lr, r7, r3
  FOCVars[bMotor].Iab = NULL_ab;
 800360e:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8003612:	fb06 3604 	mla	r6, r6, r4, r3
  FOCVars[bMotor].Vqd = NULL_qd;
 8003616:	eb02 0c03 	add.w	ip, r2, r3
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800361a:	4811      	ldr	r0, [pc, #68]	; (8003660 <FOC_Clear+0x78>)
  FOCVars[bMotor].Iqd = NULL_qd;
 800361c:	50fd      	str	r5, [r7, r3]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800361e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8003622:	f8ce 5004 	str.w	r5, [lr, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8003626:	4629      	mov	r1, r5
  FOCVars[bMotor].hTeref = (int16_t)0;
 8003628:	83f5      	strh	r5, [r6, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 800362a:	50d5      	str	r5, [r2, r3]
 800362c:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8003630:	8435      	strh	r5, [r6, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8003632:	f004 fb7f 	bl	8007d34 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8003636:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <FOC_Clear+0x7c>)
 8003638:	4629      	mov	r1, r5
 800363a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800363e:	f004 fb79 	bl	8007d34 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8003642:	4b09      	ldr	r3, [pc, #36]	; (8003668 <FOC_Clear+0x80>)
 8003644:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003648:	f004 fefa 	bl	8008440 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800364c:	4b07      	ldr	r3, [pc, #28]	; (800366c <FOC_Clear+0x84>)
 800364e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8003652:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8003656:	f004 bd75 	b.w	8008144 <PWMC_SwitchOffPWM>
 800365a:	bf00      	nop
 800365c:	20000bbc 	.word	0x20000bbc
 8003660:	20000bb0 	.word	0x20000bb0
 8003664:	20000c6c 	.word	0x20000c6c
 8003668:	20000c70 	.word	0x20000c70
 800366c:	20000ba8 	.word	0x20000ba8

08003670 <MCboot>:
{
 8003670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003674:	ed2d 8b02 	vpush	{d8}
  STM_Init(&STM[M1]);
 8003678:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 8003870 <MCboot+0x200>
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800367c:	4c63      	ldr	r4, [pc, #396]	; (800380c <MCboot+0x19c>)
  STO_PLL_Init (&STO_PLL_M1);
 800367e:	ed9f 8a64 	vldr	s16, [pc, #400]	; 8003810 <MCboot+0x1a0>
  pSTC[M1] = &SpeednTorqCtrlM1;
 8003682:	4d64      	ldr	r5, [pc, #400]	; (8003814 <MCboot+0x1a4>)
  PID_HandleInit(&PIDIqHandle_M1);
 8003684:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 8003874 <MCboot+0x204>
  PID_HandleInit(&PIDIdHandle_M1);
 8003688:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 8003878 <MCboot+0x208>
  NTC_Init(&TempSensorParamsM1);
 800368c:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 800387c <MCboot+0x20c>
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8003690:	4e61      	ldr	r6, [pc, #388]	; (8003818 <MCboot+0x1a8>)
{
 8003692:	b087      	sub	sp, #28
 8003694:	4603      	mov	r3, r0
  STM_Init(&STM[M1]);
 8003696:	4658      	mov	r0, fp
{
 8003698:	461f      	mov	r7, r3
 800369a:	9103      	str	r1, [sp, #12]
  STM_Init(&STM[M1]);
 800369c:	f004 ff8a 	bl	80085b4 <STM_Init>
  pCLM[M1] = &CircleLimitationM1;
 80036a0:	4b5e      	ldr	r3, [pc, #376]	; (800381c <MCboot+0x1ac>)
  bMCBootCompleted = 0;
 80036a2:	495f      	ldr	r1, [pc, #380]	; (8003820 <MCboot+0x1b0>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80036a4:	485f      	ldr	r0, [pc, #380]	; (8003824 <MCboot+0x1b4>)
  pCLM[M1] = &CircleLimitationM1;
 80036a6:	4a60      	ldr	r2, [pc, #384]	; (8003828 <MCboot+0x1b8>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80036a8:	6020      	str	r0, [r4, #0]
  bMCBootCompleted = 0;
 80036aa:	2400      	movs	r4, #0
 80036ac:	700c      	strb	r4, [r1, #0]
  pCLM[M1] = &CircleLimitationM1;
 80036ae:	601a      	str	r2, [r3, #0]
  ICS_Init(&PWM_Handle_M1);
 80036b0:	f004 f8de 	bl	8007870 <ICS_Init>
  startTimers();
 80036b4:	f004 fbc4 	bl	8007e40 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 80036b8:	485c      	ldr	r0, [pc, #368]	; (800382c <MCboot+0x1bc>)
 80036ba:	f004 fb27 	bl	8007d0c <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 80036be:	4a5c      	ldr	r2, [pc, #368]	; (8003830 <MCboot+0x1c0>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 80036c0:	4b5c      	ldr	r3, [pc, #368]	; (8003834 <MCboot+0x1c4>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 80036c2:	495a      	ldr	r1, [pc, #360]	; (800382c <MCboot+0x1bc>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 80036c4:	602b      	str	r3, [r5, #0]
  STO_PLL_Init (&STO_PLL_M1);
 80036c6:	ee18 0a10 	vmov	r0, s16
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 80036ca:	6011      	str	r1, [r2, #0]
  STO_PLL_Init (&STO_PLL_M1);
 80036cc:	f005 fe00 	bl	80092d0 <STO_PLL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &STO_PLL_M1._Super);
 80036d0:	4857      	ldr	r0, [pc, #348]	; (8003830 <MCboot+0x1c0>)
 80036d2:	ee18 2a10 	vmov	r2, s16
 80036d6:	6801      	ldr	r1, [r0, #0]
 80036d8:	6828      	ldr	r0, [r5, #0]
 80036da:	f004 fe99 	bl	8008410 <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 80036de:	4856      	ldr	r0, [pc, #344]	; (8003838 <MCboot+0x1c8>)
 80036e0:	f005 f940 	bl	8008964 <VSS_Init>
  RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 80036e4:	4a49      	ldr	r2, [pc, #292]	; (800380c <MCboot+0x19c>)
 80036e6:	4855      	ldr	r0, [pc, #340]	; (800383c <MCboot+0x1cc>)
 80036e8:	6813      	ldr	r3, [r2, #0]
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	6829      	ldr	r1, [r5, #0]
 80036ee:	4a52      	ldr	r2, [pc, #328]	; (8003838 <MCboot+0x1c8>)
 80036f0:	4b53      	ldr	r3, [pc, #332]	; (8003840 <MCboot+0x1d0>)
 80036f2:	f005 fa31 	bl	8008b58 <RUC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 80036f6:	4650      	mov	r0, sl
 80036f8:	f004 fb08 	bl	8007d0c <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 80036fc:	4648      	mov	r0, r9
 80036fe:	f004 fb05 	bl	8007d0c <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8003702:	4b50      	ldr	r3, [pc, #320]	; (8003844 <MCboot+0x1d4>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8003704:	4850      	ldr	r0, [pc, #320]	; (8003848 <MCboot+0x1d8>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8003706:	f8c3 a000 	str.w	sl, [r3]
  pPIDId[M1] = &PIDIdHandle_M1;
 800370a:	4b50      	ldr	r3, [pc, #320]	; (800384c <MCboot+0x1dc>)
 800370c:	f8c3 9000 	str.w	r9, [r3]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8003710:	4b4f      	ldr	r3, [pc, #316]	; (8003850 <MCboot+0x1e0>)
 8003712:	6018      	str	r0, [r3, #0]
  RVBS_Init(pBusSensorM1);
 8003714:	f004 fd64 	bl	80081e0 <RVBS_Init>
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8003718:	494d      	ldr	r1, [pc, #308]	; (8003850 <MCboot+0x1e0>)
  pMPM[M1] = &PQD_MotorPowMeasM1;
 800371a:	4b4e      	ldr	r3, [pc, #312]	; (8003854 <MCboot+0x1e4>)
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 800371c:	680a      	ldr	r2, [r1, #0]
 800371e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8003722:	4a4d      	ldr	r2, [pc, #308]	; (8003858 <MCboot+0x1e8>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8003724:	f8c3 610c 	str.w	r6, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 8003728:	4640      	mov	r0, r8
  pMPM[M1] = &PQD_MotorPowMeasM1;
 800372a:	6013      	str	r3, [r2, #0]
  NTC_Init(&TempSensorParamsM1);
 800372c:	f004 faaa 	bl	8007c84 <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8003730:	494a      	ldr	r1, [pc, #296]	; (800385c <MCboot+0x1ec>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8003732:	4b4b      	ldr	r3, [pc, #300]	; (8003860 <MCboot+0x1f0>)
 8003734:	484b      	ldr	r0, [pc, #300]	; (8003864 <MCboot+0x1f4>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8003736:	f8c1 8000 	str.w	r8, [r1]
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 800373a:	6018      	str	r0, [r3, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 800373c:	f04f 0901 	mov.w	r9, #1
  REMNG_Init(pREMNG[M1]);
 8003740:	f004 fd9c 	bl	800827c <REMNG_Init>
  FOC_Clear(M1);
 8003744:	4620      	mov	r0, r4
 8003746:	f7ff ff4f 	bl	80035e8 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 800374a:	f886 9024 	strb.w	r9, [r6, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800374e:	6828      	ldr	r0, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8003750:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8003880 <MCboot+0x210>
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8003754:	f004 ff18 	bl	8008588 <STC_GetDefaultIqdref>
 8003758:	4603      	mov	r3, r0
 800375a:	f3c0 420f 	ubfx	r2, r0, #16, #16
 800375e:	8233      	strh	r3, [r6, #16]
 8003760:	8272      	strh	r2, [r6, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8003762:	6828      	ldr	r0, [r5, #0]
 8003764:	f004 ff10 	bl	8008588 <STC_GetDefaultIqdref>
  oMCInterface[M1] = & Mci[M1];
 8003768:	493f      	ldr	r1, [pc, #252]	; (8003868 <MCboot+0x1f8>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 800376a:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 800376c:	f8c8 1000 	str.w	r1, [r8]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8003770:	f3c0 4c0f 	ubfx	ip, r0, #16, #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8003774:	4633      	mov	r3, r6
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8003776:	f8a6 c014 	strh.w	ip, [r6, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 800377a:	4608      	mov	r0, r1
 800377c:	4659      	mov	r1, fp
 800377e:	f7ff fcd7 	bl	8003130 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8003782:	6828      	ldr	r0, [r5, #0]
 8003784:	f8d8 6000 	ldr.w	r6, [r8]
 8003788:	f004 fef4 	bl	8008574 <STC_GetMecSpeedRefUnitDefault>
 800378c:	4622      	mov	r2, r4
 800378e:	4601      	mov	r1, r0
 8003790:	4630      	mov	r0, r6
 8003792:	f7ff fcdb 	bl	800314c <MCI_ExecSpeedRamp>
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8003796:	4826      	ldr	r0, [pc, #152]	; (8003830 <MCboot+0x1c0>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8003798:	4a1c      	ldr	r2, [pc, #112]	; (800380c <MCboot+0x19c>)
  pMCIList[M1] = oMCInterface[M1];
 800379a:	f8d8 a000 	ldr.w	sl, [r8]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 800379e:	f8d0 8000 	ldr.w	r8, [r0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 80037a2:	4828      	ldr	r0, [pc, #160]	; (8003844 <MCboot+0x1d4>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 80037a4:	6816      	ldr	r6, [r2, #0]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 80037a6:	4a2a      	ldr	r2, [pc, #168]	; (8003850 <MCboot+0x1e0>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 80037a8:	f8d0 e000 	ldr.w	lr, [r0]
  MCT[M1].pPIDId = pPIDId[M1];
 80037ac:	4827      	ldr	r0, [pc, #156]	; (800384c <MCboot+0x1dc>)
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 80037ae:	6811      	ldr	r1, [r2, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 80037b0:	4a29      	ldr	r2, [pc, #164]	; (8003858 <MCboot+0x1e8>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 80037b2:	4b2e      	ldr	r3, [pc, #184]	; (800386c <MCboot+0x1fc>)
  MCT[M1].pPIDId = pPIDId[M1];
 80037b4:	f8d0 c000 	ldr.w	ip, [r0]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 80037b8:	4828      	ldr	r0, [pc, #160]	; (800385c <MCboot+0x1ec>)
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 80037ba:	6812      	ldr	r2, [r2, #0]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 80037bc:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 80037be:	6800      	ldr	r0, [r0, #0]
  pMCIList[M1] = oMCInterface[M1];
 80037c0:	f8c7 a000 	str.w	sl, [r7]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 80037c4:	63da      	str	r2, [r3, #60]	; 0x3c
  MCT[M1].pRevupCtrl = &RevUpControlM1;              /* only if M1 is sensorless*/
 80037c6:	4a1d      	ldr	r2, [pc, #116]	; (800383c <MCboot+0x1cc>)
 80037c8:	615a      	str	r2, [r3, #20]
  MCT[M1].pSpeedSensorVirtual = &VirtualSpeedSensorM1;  /* only if M1 is sensorless*/
 80037ca:	4a1b      	ldr	r2, [pc, #108]	; (8003838 <MCboot+0x1c8>)
 80037cc:	621a      	str	r2, [r3, #32]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 80037ce:	e9c3 010b 	strd	r0, r1, [r3, #44]	; 0x2c
  pMCTList[M1] = &MCT[M1];
 80037d2:	9a03      	ldr	r2, [sp, #12]
  bMCBootCompleted = 1;
 80037d4:	4912      	ldr	r1, [pc, #72]	; (8003820 <MCboot+0x1b0>)
  MCT[M1].pPIDId = pPIDId[M1];
 80037d6:	f8c3 c008 	str.w	ip, [r3, #8]
  MCT[M1].pPIDIq = pPIDIq[M1];
 80037da:	e9c3 8e00 	strd	r8, lr, [r3]
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 80037de:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  MCT[M1].pFF = MC_NULL;
 80037e2:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  MCT[M1].pSCC = MC_NULL;
 80037e6:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 80037ea:	611e      	str	r6, [r3, #16]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 80037ec:	625d      	str	r5, [r3, #36]	; 0x24
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 80037ee:	60dc      	str	r4, [r3, #12]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1;
 80037f0:	ed83 8a06 	vstr	s16, [r3, #24]
  MCT[M1].pSpeedSensorAux = MC_NULL;
 80037f4:	61dc      	str	r4, [r3, #28]
  MCT[M1].pStateMachine = &STM[M1];
 80037f6:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
  MCT[M1].pOTT = MC_NULL;
 80037fa:	651c      	str	r4, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 80037fc:	6013      	str	r3, [r2, #0]
  bMCBootCompleted = 1;
 80037fe:	f881 9000 	strb.w	r9, [r1]
}
 8003802:	b007      	add	sp, #28
 8003804:	ecbd 8b02 	vpop	{d8}
 8003808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800380c:	20000ba8 	.word	0x20000ba8
 8003810:	200003cc 	.word	0x200003cc
 8003814:	20000c70 	.word	0x20000c70
 8003818:	20000bbc 	.word	0x20000bbc
 800381c:	20000c38 	.word	0x20000c38
 8003820:	20000794 	.word	0x20000794
 8003824:	2000028c 	.word	0x2000028c
 8003828:	20000040 	.word	0x20000040
 800382c:	2000014c 	.word	0x2000014c
 8003830:	20000bac 	.word	0x20000bac
 8003834:	200004f4 	.word	0x200004f4
 8003838:	20000550 	.word	0x20000550
 800383c:	20000340 	.word	0x20000340
 8003840:	200003b8 	.word	0x200003b8
 8003844:	20000bb0 	.word	0x20000bb0
 8003848:	20000318 	.word	0x20000318
 800384c:	20000c6c 	.word	0x20000c6c
 8003850:	20000c3c 	.word	0x20000c3c
 8003854:	20000178 	.word	0x20000178
 8003858:	20000c68 	.word	0x20000c68
 800385c:	20000ba4 	.word	0x20000ba4
 8003860:	20000c64 	.word	0x20000c64
 8003864:	20000300 	.word	0x20000300
 8003868:	20000c40 	.word	0x20000c40
 800386c:	20000be4 	.word	0x20000be4
 8003870:	20000c5c 	.word	0x20000c5c
 8003874:	20000120 	.word	0x20000120
 8003878:	200000f4 	.word	0x200000f4
 800387c:	20000528 	.word	0x20000528
 8003880:	20000bb4 	.word	0x20000bb4

08003884 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop

08003888 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8003888:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 800388a:	4b08      	ldr	r3, [pc, #32]	; (80038ac <FOC_CalcCurrRef+0x24>)
 800388c:	2426      	movs	r4, #38	; 0x26
 800388e:	fb04 3400 	mla	r4, r4, r0, r3
 8003892:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003896:	b103      	cbz	r3, 800389a <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8003898:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 800389a:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <FOC_CalcCurrRef+0x28>)
 800389c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80038a0:	f004 fe36 	bl	8008510 <STC_CalcTorqueReference>
 80038a4:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 80038a6:	8220      	strh	r0, [r4, #16]
}
 80038a8:	bd10      	pop	{r4, pc}
 80038aa:	bf00      	nop
 80038ac:	20000bbc 	.word	0x20000bbc
 80038b0:	20000c70 	.word	0x20000c70

080038b4 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 80038b4:	4b01      	ldr	r3, [pc, #4]	; (80038bc <TSK_SetStopPermanencyTimeM1+0x8>)
 80038b6:	8018      	strh	r0, [r3, #0]
}
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	2000079a 	.word	0x2000079a

080038c0 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 80038c0:	4b03      	ldr	r3, [pc, #12]	; (80038d0 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 80038c2:	8818      	ldrh	r0, [r3, #0]
 80038c4:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80038c6:	fab0 f080 	clz	r0, r0
 80038ca:	0940      	lsrs	r0, r0, #5
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	2000079a 	.word	0x2000079a

080038d4 <TSK_MediumFrequencyTaskM1>:
{
 80038d4:	b530      	push	{r4, r5, lr}
  PQD_CalcElMotorPower( pMPM[M1] );
 80038d6:	4c8e      	ldr	r4, [pc, #568]	; (8003b10 <TSK_MediumFrequencyTaskM1+0x23c>)
  (void) STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 80038d8:	488e      	ldr	r0, [pc, #568]	; (8003b14 <TSK_MediumFrequencyTaskM1+0x240>)
{
 80038da:	b083      	sub	sp, #12
  int16_t wAux = 0;
 80038dc:	2300      	movs	r3, #0
  (void) STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 80038de:	4669      	mov	r1, sp
  int16_t wAux = 0;
 80038e0:	f8ad 3000 	strh.w	r3, [sp]
  (void) STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 80038e4:	f005 fbfc 	bl	80090e0 <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 80038e8:	6820      	ldr	r0, [r4, #0]
 80038ea:	f004 fa75 	bl	8007dd8 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 80038ee:	488a      	ldr	r0, [pc, #552]	; (8003b18 <TSK_MediumFrequencyTaskM1+0x244>)
 80038f0:	f004 fef8 	bl	80086e4 <STM_GetState>
  switch ( StateM1 )
 80038f4:	3803      	subs	r0, #3
 80038f6:	2810      	cmp	r0, #16
 80038f8:	d856      	bhi.n	80039a8 <TSK_MediumFrequencyTaskM1+0xd4>
 80038fa:	e8df f010 	tbh	[pc, r0, lsl #1]
 80038fe:	007a      	.short	0x007a
 8003900:	008c0011 	.word	0x008c0011
 8003904:	00ab00a3 	.word	0x00ab00a3
 8003908:	00c700be 	.word	0x00c700be
 800390c:	00550055 	.word	0x00550055
 8003910:	00550055 	.word	0x00550055
 8003914:	00550055 	.word	0x00550055
 8003918:	00d40055 	.word	0x00d40055
 800391c:	005700e1 	.word	0x005700e1
      if ( ! RUC_OTF_Exec( &RevUpControlM1 ) )
 8003920:	487e      	ldr	r0, [pc, #504]	; (8003b1c <TSK_MediumFrequencyTaskM1+0x248>)
 8003922:	f005 f99f 	bl	8008c64 <RUC_OTF_Exec>
 8003926:	2800      	cmp	r0, #0
 8003928:	f000 80e5 	beq.w	8003af6 <TSK_MediumFrequencyTaskM1+0x222>
        IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 800392c:	4b7c      	ldr	r3, [pc, #496]	; (8003b20 <TSK_MediumFrequencyTaskM1+0x24c>)
 800392e:	6818      	ldr	r0, [r3, #0]
 8003930:	f004 fdee 	bl	8008510 <STC_CalcTorqueReference>
        IqdRef.d = FOCVars[M1].UserIdref;
 8003934:	4b7b      	ldr	r3, [pc, #492]	; (8003b24 <TSK_MediumFrequencyTaskM1+0x250>)
 8003936:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
        FOCVars[M1].Iqdref = IqdRef;
 800393a:	8218      	strh	r0, [r3, #16]
 800393c:	825a      	strh	r2, [r3, #18]
      (void) VSS_CalcAvrgMecSpeedUnit( &VirtualSpeedSensorM1, &hForcedMecSpeedUnit );
 800393e:	f10d 0102 	add.w	r1, sp, #2
 8003942:	4879      	ldr	r0, [pc, #484]	; (8003b28 <TSK_MediumFrequencyTaskM1+0x254>)
 8003944:	f005 f862 	bl	8008a0c <VSS_CalcAvrgMecSpeedUnit>
        ObserverConverged = STO_PLL_IsObserverConverged( &STO_PLL_M1,hForcedMecSpeedUnit );
 8003948:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 800394c:	4871      	ldr	r0, [pc, #452]	; (8003b14 <TSK_MediumFrequencyTaskM1+0x240>)
 800394e:	f005 fcf9 	bl	8009344 <STO_PLL_IsObserverConverged>
 8003952:	4604      	mov	r4, r0
        STO_SetDirection(&STO_PLL_M1, MCI_GetImposedMotorDirection( &Mci[M1]));
 8003954:	4875      	ldr	r0, [pc, #468]	; (8003b2c <TSK_MediumFrequencyTaskM1+0x258>)
 8003956:	f7ff fc7d 	bl	8003254 <MCI_GetImposedMotorDirection>
 800395a:	b2c1      	uxtb	r1, r0
 800395c:	486d      	ldr	r0, [pc, #436]	; (8003b14 <TSK_MediumFrequencyTaskM1+0x240>)
 800395e:	f005 fdaf 	bl	80094c0 <STO_SetDirection>
        (void) VSS_SetStartTransition( &VirtualSpeedSensorM1, ObserverConverged );
 8003962:	4871      	ldr	r0, [pc, #452]	; (8003b28 <TSK_MediumFrequencyTaskM1+0x254>)
 8003964:	4621      	mov	r1, r4
 8003966:	f005 f8e1 	bl	8008b2c <VSS_SetStartTransition>
      if ( ObserverConverged )
 800396a:	b1ec      	cbz	r4, 80039a8 <TSK_MediumFrequencyTaskM1+0xd4>
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 800396c:	4869      	ldr	r0, [pc, #420]	; (8003b14 <TSK_MediumFrequencyTaskM1+0x240>)
 800396e:	4d6d      	ldr	r5, [pc, #436]	; (8003b24 <TSK_MediumFrequencyTaskM1+0x250>)
        REMNG_Init( pREMNG[M1] );
 8003970:	4c6f      	ldr	r4, [pc, #444]	; (8003b30 <TSK_MediumFrequencyTaskM1+0x25c>)
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8003972:	f004 fd0b 	bl	800838c <SPD_GetElAngle>
 8003976:	4601      	mov	r1, r0
 8003978:	6868      	ldr	r0, [r5, #4]
 800397a:	f7ff fd9b 	bl	80034b4 <MCM_Park>
 800397e:	4603      	mov	r3, r0
        REMNG_Init( pREMNG[M1] );
 8003980:	6820      	ldr	r0, [r4, #0]
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8003982:	9301      	str	r3, [sp, #4]
        REMNG_Init( pREMNG[M1] );
 8003984:	f004 fc7a 	bl	800827c <REMNG_Init>
        REMNG_ExecRamp( pREMNG[M1], FOCVars[M1].Iqdref.q, 0 );
 8003988:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
 800398c:	6820      	ldr	r0, [r4, #0]
 800398e:	2200      	movs	r2, #0
 8003990:	f004 fcba 	bl	8008308 <REMNG_ExecRamp>
        REMNG_ExecRamp( pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION );
 8003994:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8003998:	6820      	ldr	r0, [r4, #0]
 800399a:	2200      	movs	r2, #0
 800399c:	f004 fcb4 	bl	8008308 <REMNG_ExecRamp>
        STM_NextState( &STM[M1], SWITCH_OVER );
 80039a0:	485d      	ldr	r0, [pc, #372]	; (8003b18 <TSK_MediumFrequencyTaskM1+0x244>)
 80039a2:	2113      	movs	r1, #19
 80039a4:	f004 fe2a 	bl	80085fc <STM_NextState>
}
 80039a8:	b003      	add	sp, #12
 80039aa:	bd30      	pop	{r4, r5, pc}
      if ( ! RUC_OTF_Exec( &RevUpControlM1 ) )
 80039ac:	485b      	ldr	r0, [pc, #364]	; (8003b1c <TSK_MediumFrequencyTaskM1+0x248>)
 80039ae:	f005 f959 	bl	8008c64 <RUC_OTF_Exec>
 80039b2:	2800      	cmp	r0, #0
 80039b4:	f000 80a5 	beq.w	8003b02 <TSK_MediumFrequencyTaskM1+0x22e>
        LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1,&hForcedMecSpeedUnit);
 80039b8:	485b      	ldr	r0, [pc, #364]	; (8003b28 <TSK_MediumFrequencyTaskM1+0x254>)
 80039ba:	a901      	add	r1, sp, #4
 80039bc:	f005 f826 	bl	8008a0c <VSS_CalcAvrgMecSpeedUnit>
 80039c0:	4604      	mov	r4, r0
        LoopClosed |= VSS_TransitionEnded( &VirtualSpeedSensorM1 );
 80039c2:	4859      	ldr	r0, [pc, #356]	; (8003b28 <TSK_MediumFrequencyTaskM1+0x254>)
 80039c4:	f005 f8c0 	bl	8008b48 <VSS_TransitionEnded>
        if ( LoopClosed == true )
 80039c8:	b90c      	cbnz	r4, 80039ce <TSK_MediumFrequencyTaskM1+0xfa>
 80039ca:	2800      	cmp	r0, #0
 80039cc:	d0ec      	beq.n	80039a8 <TSK_MediumFrequencyTaskM1+0xd4>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 80039ce:	4a59      	ldr	r2, [pc, #356]	; (8003b34 <TSK_MediumFrequencyTaskM1+0x260>)
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 80039d0:	4b54      	ldr	r3, [pc, #336]	; (8003b24 <TSK_MediumFrequencyTaskM1+0x250>)
          PID_SetIntegralTerm( pPIDSpeed[M1],
 80039d2:	6814      	ldr	r4, [r2, #0]
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 80039d4:	f9b3 5010 	ldrsh.w	r5, [r3, #16]
 80039d8:	4620      	mov	r0, r4
 80039da:	f004 f9af 	bl	8007d3c <PID_GetKIDivisor>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 80039de:	fb05 f100 	mul.w	r1, r5, r0
 80039e2:	4620      	mov	r0, r4
 80039e4:	f004 f9a6 	bl	8007d34 <PID_SetIntegralTerm>
          STM_NextState( &STM[M1], START_RUN );
 80039e8:	2105      	movs	r1, #5
 80039ea:	484b      	ldr	r0, [pc, #300]	; (8003b18 <TSK_MediumFrequencyTaskM1+0x244>)
 80039ec:	f004 fe06 	bl	80085fc <STM_NextState>
    break;
 80039f0:	e7da      	b.n	80039a8 <TSK_MediumFrequencyTaskM1+0xd4>
    RUC_Clear( &RevUpControlM1, MCI_GetImposedMotorDirection( oMCInterface[M1] ) );
 80039f2:	4b51      	ldr	r3, [pc, #324]	; (8003b38 <TSK_MediumFrequencyTaskM1+0x264>)
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	f7ff fc2d 	bl	8003254 <MCI_GetImposedMotorDirection>
 80039fa:	4601      	mov	r1, r0
 80039fc:	4847      	ldr	r0, [pc, #284]	; (8003b1c <TSK_MediumFrequencyTaskM1+0x248>)
 80039fe:	f005 f8e9 	bl	8008bd4 <RUC_Clear>
    PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8003a02:	4b4e      	ldr	r3, [pc, #312]	; (8003b3c <TSK_MediumFrequencyTaskM1+0x268>)
 8003a04:	2100      	movs	r1, #0
 8003a06:	6818      	ldr	r0, [r3, #0]
 8003a08:	f004 fba0 	bl	800814c <PWMC_CurrentReadingCalibr>
    STM_NextState( &STM[M1], OFFSET_CALIB );
 8003a0c:	2111      	movs	r1, #17
 8003a0e:	4842      	ldr	r0, [pc, #264]	; (8003b18 <TSK_MediumFrequencyTaskM1+0x244>)
 8003a10:	f004 fdf4 	bl	80085fc <STM_NextState>
    break;
 8003a14:	e7c8      	b.n	80039a8 <TSK_MediumFrequencyTaskM1+0xd4>
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8003a16:	4c42      	ldr	r4, [pc, #264]	; (8003b20 <TSK_MediumFrequencyTaskM1+0x24c>)
 8003a18:	493e      	ldr	r1, [pc, #248]	; (8003b14 <TSK_MediumFrequencyTaskM1+0x240>)
 8003a1a:	6820      	ldr	r0, [r4, #0]
 8003a1c:	f004 fd0c 	bl	8008438 <STC_SetSpeedSensor>
	  FOC_InitAdditionalMethods(M1);
 8003a20:	2000      	movs	r0, #0
 8003a22:	f7ff ff2f 	bl	8003884 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8003a26:	2000      	movs	r0, #0
 8003a28:	f7ff ff2e 	bl	8003888 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8003a2c:	2106      	movs	r1, #6
 8003a2e:	483a      	ldr	r0, [pc, #232]	; (8003b18 <TSK_MediumFrequencyTaskM1+0x244>)
 8003a30:	f004 fde4 	bl	80085fc <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8003a34:	6820      	ldr	r0, [r4, #0]
 8003a36:	f004 fdb5 	bl	80085a4 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8003a3a:	4b3f      	ldr	r3, [pc, #252]	; (8003b38 <TSK_MediumFrequencyTaskM1+0x264>)
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	f7ff fbbb 	bl	80031b8 <MCI_ExecBufferedCommands>
    break;
 8003a42:	e7b1      	b.n	80039a8 <TSK_MediumFrequencyTaskM1+0xd4>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8003a44:	4b3c      	ldr	r3, [pc, #240]	; (8003b38 <TSK_MediumFrequencyTaskM1+0x264>)
 8003a46:	6818      	ldr	r0, [r3, #0]
 8003a48:	f7ff fbb6 	bl	80031b8 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	f7ff ff1b 	bl	8003888 <FOC_CalcCurrRef>
    break;
 8003a52:	e7a9      	b.n	80039a8 <TSK_MediumFrequencyTaskM1+0xd4>
    ICS_SwitchOffPWM( pwmcHandle[M1] );
 8003a54:	4b39      	ldr	r3, [pc, #228]	; (8003b3c <TSK_MediumFrequencyTaskM1+0x268>)
 8003a56:	6818      	ldr	r0, [r3, #0]
 8003a58:	f003 ffd8 	bl	8007a0c <ICS_SwitchOffPWM>
    FOC_Clear( M1 );
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	f7ff fdc3 	bl	80035e8 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8003a62:	6820      	ldr	r0, [r4, #0]
 8003a64:	f004 f8ca 	bl	8007bfc <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8003a68:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003a6c:	f7ff ff22 	bl	80038b4 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 8003a70:	2108      	movs	r1, #8
 8003a72:	4829      	ldr	r0, [pc, #164]	; (8003b18 <TSK_MediumFrequencyTaskM1+0x244>)
 8003a74:	f004 fdc2 	bl	80085fc <STM_NextState>
    break;
 8003a78:	e796      	b.n	80039a8 <TSK_MediumFrequencyTaskM1+0xd4>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8003a7a:	f7ff ff21 	bl	80038c0 <TSK_StopPermanencyTimeHasElapsedM1>
 8003a7e:	2800      	cmp	r0, #0
 8003a80:	d092      	beq.n	80039a8 <TSK_MediumFrequencyTaskM1+0xd4>
      STM_NextState( &STM[M1], STOP_IDLE );
 8003a82:	2109      	movs	r1, #9
 8003a84:	4824      	ldr	r0, [pc, #144]	; (8003b18 <TSK_MediumFrequencyTaskM1+0x244>)
 8003a86:	f004 fdb9 	bl	80085fc <STM_NextState>
 8003a8a:	e78d      	b.n	80039a8 <TSK_MediumFrequencyTaskM1+0xd4>
    STC_SetSpeedSensor( pSTC[M1],&VirtualSpeedSensorM1._Super );  	/*  sensor-less */
 8003a8c:	4b24      	ldr	r3, [pc, #144]	; (8003b20 <TSK_MediumFrequencyTaskM1+0x24c>)
 8003a8e:	4926      	ldr	r1, [pc, #152]	; (8003b28 <TSK_MediumFrequencyTaskM1+0x254>)
 8003a90:	6818      	ldr	r0, [r3, #0]
 8003a92:	f004 fcd1 	bl	8008438 <STC_SetSpeedSensor>
    VSS_Clear( &VirtualSpeedSensorM1 ); /* Reset measured speed in IDLE */
 8003a96:	4824      	ldr	r0, [pc, #144]	; (8003b28 <TSK_MediumFrequencyTaskM1+0x254>)
 8003a98:	f004 ff56 	bl	8008948 <VSS_Clear>
    STM_NextState( &STM[M1], IDLE );
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	481e      	ldr	r0, [pc, #120]	; (8003b18 <TSK_MediumFrequencyTaskM1+0x244>)
 8003aa0:	f004 fdac 	bl	80085fc <STM_NextState>
}
 8003aa4:	e780      	b.n	80039a8 <TSK_MediumFrequencyTaskM1+0xd4>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8003aa6:	4b25      	ldr	r3, [pc, #148]	; (8003b3c <TSK_MediumFrequencyTaskM1+0x268>)
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	6818      	ldr	r0, [r3, #0]
 8003aac:	f004 fb4e 	bl	800814c <PWMC_CurrentReadingCalibr>
 8003ab0:	2800      	cmp	r0, #0
 8003ab2:	f43f af79 	beq.w	80039a8 <TSK_MediumFrequencyTaskM1+0xd4>
      STM_NextState( &STM[M1], CLEAR );
 8003ab6:	2112      	movs	r1, #18
 8003ab8:	4817      	ldr	r0, [pc, #92]	; (8003b18 <TSK_MediumFrequencyTaskM1+0x244>)
 8003aba:	f004 fd9f 	bl	80085fc <STM_NextState>
 8003abe:	e773      	b.n	80039a8 <TSK_MediumFrequencyTaskM1+0xd4>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8003ac0:	4a17      	ldr	r2, [pc, #92]	; (8003b20 <TSK_MediumFrequencyTaskM1+0x24c>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8003ac2:	4b18      	ldr	r3, [pc, #96]	; (8003b24 <TSK_MediumFrequencyTaskM1+0x250>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8003ac4:	6810      	ldr	r0, [r2, #0]
 8003ac6:	4918      	ldr	r1, [pc, #96]	; (8003b28 <TSK_MediumFrequencyTaskM1+0x254>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8003ace:	f004 fcb3 	bl	8008438 <STC_SetSpeedSensor>
    STO_PLL_Clear( &STO_PLL_M1 );
 8003ad2:	4810      	ldr	r0, [pc, #64]	; (8003b14 <TSK_MediumFrequencyTaskM1+0x240>)
 8003ad4:	f005 fbce 	bl	8009274 <STO_PLL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8003ad8:	480f      	ldr	r0, [pc, #60]	; (8003b18 <TSK_MediumFrequencyTaskM1+0x244>)
 8003ada:	2104      	movs	r1, #4
 8003adc:	f004 fd8e 	bl	80085fc <STM_NextState>
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	f43f af61 	beq.w	80039a8 <TSK_MediumFrequencyTaskM1+0xd4>
      FOC_Clear( M1 );
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	f7ff fd7e 	bl	80035e8 <FOC_Clear>
      ICS_SwitchOnPWM( pwmcHandle[M1] );
 8003aec:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <TSK_MediumFrequencyTaskM1+0x268>)
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	f003 ff48 	bl	8007984 <ICS_SwitchOnPWM>
 8003af4:	e758      	b.n	80039a8 <TSK_MediumFrequencyTaskM1+0xd4>
        STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 8003af6:	4602      	mov	r2, r0
 8003af8:	2110      	movs	r1, #16
 8003afa:	4807      	ldr	r0, [pc, #28]	; (8003b18 <TSK_MediumFrequencyTaskM1+0x244>)
 8003afc:	f004 fd60 	bl	80085c0 <STM_FaultProcessing>
 8003b00:	e71d      	b.n	800393e <TSK_MediumFrequencyTaskM1+0x6a>
          STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 8003b02:	4602      	mov	r2, r0
 8003b04:	2110      	movs	r1, #16
 8003b06:	4804      	ldr	r0, [pc, #16]	; (8003b18 <TSK_MediumFrequencyTaskM1+0x244>)
 8003b08:	f004 fd5a 	bl	80085c0 <STM_FaultProcessing>
 8003b0c:	e74c      	b.n	80039a8 <TSK_MediumFrequencyTaskM1+0xd4>
 8003b0e:	bf00      	nop
 8003b10:	20000c68 	.word	0x20000c68
 8003b14:	200003cc 	.word	0x200003cc
 8003b18:	20000c5c 	.word	0x20000c5c
 8003b1c:	20000340 	.word	0x20000340
 8003b20:	20000c70 	.word	0x20000c70
 8003b24:	20000bbc 	.word	0x20000bbc
 8003b28:	20000550 	.word	0x20000550
 8003b2c:	20000c40 	.word	0x20000c40
 8003b30:	20000c64 	.word	0x20000c64
 8003b34:	20000bac 	.word	0x20000bac
 8003b38:	20000bb4 	.word	0x20000bb4
 8003b3c:	20000ba8 	.word	0x20000ba8

08003b40 <MC_Scheduler>:
{
 8003b40:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 8003b42:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <MC_Scheduler+0x48>)
 8003b44:	781c      	ldrb	r4, [r3, #0]
 8003b46:	2c01      	cmp	r4, #1
 8003b48:	d000      	beq.n	8003b4c <MC_Scheduler+0xc>
}
 8003b4a:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 8003b4c:	4d0f      	ldr	r5, [pc, #60]	; (8003b8c <MC_Scheduler+0x4c>)
 8003b4e:	882b      	ldrh	r3, [r5, #0]
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	b1ab      	cbz	r3, 8003b80 <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 8003b54:	882b      	ldrh	r3, [r5, #0]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8003b5c:	4a0c      	ldr	r2, [pc, #48]	; (8003b90 <MC_Scheduler+0x50>)
 8003b5e:	8813      	ldrh	r3, [r2, #0]
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	b11b      	cbz	r3, 8003b6c <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 8003b64:	8813      	ldrh	r3, [r2, #0]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8003b6c:	4a09      	ldr	r2, [pc, #36]	; (8003b94 <MC_Scheduler+0x54>)
 8003b6e:	8813      	ldrh	r3, [r2, #0]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0e9      	beq.n	8003b4a <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 8003b76:	8813      	ldrh	r3, [r2, #0]
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	8013      	strh	r3, [r2, #0]
}
 8003b7e:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 8003b80:	f7ff fea8 	bl	80038d4 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8003b84:	802c      	strh	r4, [r5, #0]
 8003b86:	e7e9      	b.n	8003b5c <MC_Scheduler+0x1c>
 8003b88:	20000794 	.word	0x20000794
 8003b8c:	20000798 	.word	0x20000798
 8003b90:	20000796 	.word	0x20000796
 8003b94:	2000079a 	.word	0x2000079a

08003b98 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8003b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  uint16_t hState;  /*  only if sensorless main*/
  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
  if ( STM[M1].bState == SWITCH_OVER )
 8003b9c:	4b57      	ldr	r3, [pc, #348]	; (8003cfc <TSK_HighFrequencyTask+0x164>)
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8003b9e:	4c58      	ldr	r4, [pc, #352]	; (8003d00 <TSK_HighFrequencyTask+0x168>)
  if ( STM[M1].bState == SWITCH_OVER )
 8003ba0:	781b      	ldrb	r3, [r3, #0]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8003ba2:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 8003ba6:	b089      	sub	sp, #36	; 0x24
  if ( STM[M1].bState == SWITCH_OVER )
 8003ba8:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8003baa:	9005      	str	r0, [sp, #20]
  if ( STM[M1].bState == SWITCH_OVER )
 8003bac:	f000 8092 	beq.w	8003cd4 <TSK_HighFrequencyTask+0x13c>
    if (!REMNG_RampCompleted(pREMNG[M1]))
    {
      FOCVars[M1].Iqdref.q = REMNG_Calc(pREMNG[M1]);
    }
  }
  if(!RUC_Get_SCLowsideOTF_Status(&RevUpControlM1))
 8003bb0:	4854      	ldr	r0, [pc, #336]	; (8003d04 <TSK_HighFrequencyTask+0x16c>)
 8003bb2:	f005 f9a7 	bl	8008f04 <RUC_Get_SCLowsideOTF_Status>
 8003bb6:	4605      	mov	r5, r0
 8003bb8:	2800      	cmp	r0, #0
 8003bba:	d156      	bne.n	8003c6a <TSK_HighFrequencyTask+0xd2>

  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8003bbc:	4b52      	ldr	r3, [pc, #328]	; (8003d08 <TSK_HighFrequencyTask+0x170>)
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8003bbe:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8003d2c <TSK_HighFrequencyTask+0x194>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	f004 fc3a 	bl	800843c <STC_GetSpeedSensor>
 8003bc8:	4606      	mov	r6, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8003bca:	f004 fbdf 	bl	800838c <SPD_GetElAngle>
 8003bce:	4607      	mov	r7, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8003bd0:	4630      	mov	r0, r6
 8003bd2:	f004 fbe3 	bl	800839c <SPD_GetInstElSpeedDpp>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8003bd6:	a902      	add	r1, sp, #8
 8003bd8:	f8d8 0000 	ldr.w	r0, [r8]
 8003bdc:	f004 f988 	bl	8007ef0 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 8003be0:	9802      	ldr	r0, [sp, #8]
 8003be2:	f7ff fbf1 	bl	80033c8 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8003be6:	4639      	mov	r1, r7
  Ialphabeta = MCM_Clarke(Iab);
 8003be8:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8003bea:	f7ff fc63 	bl	80034b4 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 8003bee:	4a47      	ldr	r2, [pc, #284]	; (8003d0c <TSK_HighFrequencyTask+0x174>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8003bf0:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8003bf4:	9000      	str	r0, [sp, #0]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8003bf6:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 8003bf8:	1ac9      	subs	r1, r1, r3
 8003bfa:	6810      	ldr	r0, [r2, #0]
 8003bfc:	f004 f8a6 	bl	8007d4c <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8003c00:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
  Vqd.d = PI_Controller(pPIDId[M1],
 8003c04:	4b42      	ldr	r3, [pc, #264]	; (8003d10 <TSK_HighFrequencyTask+0x178>)
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8003c06:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1],
 8003c0a:	4681      	mov	r9, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 8003c0c:	1a89      	subs	r1, r1, r2
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	f004 f89c 	bl	8007d4c <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8003c14:	4b3f      	ldr	r3, [pc, #252]	; (8003d14 <TSK_HighFrequencyTask+0x17c>)
 8003c16:	f8ad 9004 	strh.w	r9, [sp, #4]
 8003c1a:	f8ad 0006 	strh.w	r0, [sp, #6]
 8003c1e:	9901      	ldr	r1, [sp, #4]
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	f003 fd5b 	bl	80076dc <Circle_Limitation>
 8003c26:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8003c28:	4630      	mov	r0, r6
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8003c2a:	fa0f f983 	sxth.w	r9, r3
 8003c2e:	141e      	asrs	r6, r3, #16
 8003c30:	9301      	str	r3, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8003c32:	f004 fbb3 	bl	800839c <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8003c36:	4639      	mov	r1, r7
 8003c38:	9801      	ldr	r0, [sp, #4]
 8003c3a:	f7ff fc7d 	bl	8003538 <MCM_Rev_Park>
 8003c3e:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8003c40:	f8d8 0000 	ldr.w	r0, [r8]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8003c44:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8003c46:	f004 f955 	bl	8007ef4 <PWMC_SetPhaseVoltage>
 8003c4a:	4601      	mov	r1, r0
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8003c4c:	9802      	ldr	r0, [sp, #8]
 8003c4e:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8003c50:	9803      	ldr	r0, [sp, #12]
 8003c52:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8003c54:	9800      	ldr	r0, [sp, #0]
 8003c56:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_FOC_DURATION)
 8003c58:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 8003c5a:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Vqd = Vqd;
 8003c5c:	f8a4 9016 	strh.w	r9, [r4, #22]
 8003c60:	8326      	strh	r6, [r4, #24]
  FOCVars[M1].hElAngle = hElAngle;
 8003c62:	8427      	strh	r7, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 8003c64:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_FOC_DURATION)
 8003c68:	d040      	beq.n	8003cec <TSK_HighFrequencyTask+0x154>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8003c6a:	4826      	ldr	r0, [pc, #152]	; (8003d04 <TSK_HighFrequencyTask+0x16c>)
 8003c6c:	f005 f914 	bl	8008e98 <RUC_FirstAccelerationStageReached>
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8003c70:	4a29      	ldr	r2, [pc, #164]	; (8003d18 <TSK_HighFrequencyTask+0x180>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8003c72:	4b2a      	ldr	r3, [pc, #168]	; (8003d1c <TSK_HighFrequencyTask+0x184>)
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8003c74:	4604      	mov	r4, r0
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8003c76:	6810      	ldr	r0, [r2, #0]
 8003c78:	9006      	str	r0, [sp, #24]
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	f003 fd26 	bl	80076cc <VBS_GetAvBusVoltage_d>
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8003c80:	a905      	add	r1, sp, #20
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8003c82:	4603      	mov	r3, r0
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8003c84:	4826      	ldr	r0, [pc, #152]	; (8003d20 <TSK_HighFrequencyTask+0x188>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8003c86:	f8ad 301c 	strh.w	r3, [sp, #28]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8003c8a:	f005 f93f 	bl	8008f0c <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1); /*  Only in case of Sensor-less */
 8003c8e:	4824      	ldr	r0, [pc, #144]	; (8003d20 <TSK_HighFrequencyTask+0x188>)
 8003c90:	f005 fac6 	bl	8009220 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (IsAccelerationStageReached == false)
 8003c94:	b1d4      	cbz	r4, 8003ccc <TSK_HighFrequencyTask+0x134>
    hState = STM_GetState(&STM[M1]);
 8003c96:	4819      	ldr	r0, [pc, #100]	; (8003cfc <TSK_HighFrequencyTask+0x164>)
 8003c98:	f004 fd24 	bl	80086e4 <STM_GetState>
    if((hState == START) || (hState == SWITCH_OVER) || (hState == START_RUN)) /*  only for sensor-less*/
 8003c9c:	1f03      	subs	r3, r0, #4
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d905      	bls.n	8003cb0 <TSK_HighFrequencyTask+0x118>
 8003ca4:	2813      	cmp	r0, #19
 8003ca6:	d003      	beq.n	8003cb0 <TSK_HighFrequencyTask+0x118>
}
 8003ca8:	2000      	movs	r0, #0
 8003caa:	b009      	add	sp, #36	; 0x24
 8003cac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8003cb0:	481b      	ldr	r0, [pc, #108]	; (8003d20 <TSK_HighFrequencyTask+0x188>)
 8003cb2:	f004 fb6b 	bl	800838c <SPD_GetElAngle>
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8003cb6:	a904      	add	r1, sp, #16
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8003cb8:	4603      	mov	r3, r0
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8003cba:	481a      	ldr	r0, [pc, #104]	; (8003d24 <TSK_HighFrequencyTask+0x18c>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8003cbc:	f8ad 3010 	strh.w	r3, [sp, #16]
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8003cc0:	f004 fe54 	bl	800896c <VSS_CalcElAngle>
}
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	b009      	add	sp, #36	; 0x24
 8003cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      STO_ResetPLL(&STO_PLL_M1);
 8003ccc:	4814      	ldr	r0, [pc, #80]	; (8003d20 <TSK_HighFrequencyTask+0x188>)
 8003cce:	f005 fbdb 	bl	8009488 <STO_ResetPLL>
 8003cd2:	e7e0      	b.n	8003c96 <TSK_HighFrequencyTask+0xfe>
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8003cd4:	4d14      	ldr	r5, [pc, #80]	; (8003d28 <TSK_HighFrequencyTask+0x190>)
 8003cd6:	6828      	ldr	r0, [r5, #0]
 8003cd8:	f004 fafa 	bl	80082d0 <REMNG_RampCompleted>
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	f47f af67 	bne.w	8003bb0 <TSK_HighFrequencyTask+0x18>
      FOCVars[M1].Iqdref.q = REMNG_Calc(pREMNG[M1]);
 8003ce2:	6828      	ldr	r0, [r5, #0]
 8003ce4:	f004 fad2 	bl	800828c <REMNG_Calc>
 8003ce8:	8220      	strh	r0, [r4, #16]
 8003cea:	e761      	b.n	8003bb0 <TSK_HighFrequencyTask+0x18>
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8003cec:	462a      	mov	r2, r5
 8003cee:	4803      	ldr	r0, [pc, #12]	; (8003cfc <TSK_HighFrequencyTask+0x164>)
 8003cf0:	f004 fc66 	bl	80085c0 <STM_FaultProcessing>
}
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	b009      	add	sp, #36	; 0x24
 8003cf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003cfc:	20000c5c 	.word	0x20000c5c
 8003d00:	20000bbc 	.word	0x20000bbc
 8003d04:	20000340 	.word	0x20000340
 8003d08:	20000c70 	.word	0x20000c70
 8003d0c:	20000bb0 	.word	0x20000bb0
 8003d10:	20000c6c 	.word	0x20000c6c
 8003d14:	20000c38 	.word	0x20000c38
 8003d18:	20000bc0 	.word	0x20000bc0
 8003d1c:	20000c3c 	.word	0x20000c3c
 8003d20:	200003cc 	.word	0x200003cc
 8003d24:	20000550 	.word	0x20000550
 8003d28:	20000c64 	.word	0x20000c64
 8003d2c:	20000ba8 	.word	0x20000ba8

08003d30 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8003d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8003d32:	4b20      	ldr	r3, [pc, #128]	; (8003db4 <TSK_SafetyTask_PWMOFF+0x84>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8003d34:	4e20      	ldr	r6, [pc, #128]	; (8003db8 <TSK_SafetyTask_PWMOFF+0x88>)
{
 8003d36:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8003d38:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003d3c:	f003 ffb4 	bl	8007ca8 <NTC_CalcAvTemp>
 8003d40:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8003d42:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003d46:	f004 fa2d 	bl	80081a4 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8003d4a:	f025 050c 	bic.w	r5, r5, #12
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8003d4e:	4328      	orrs	r0, r5
 8003d50:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 8003d52:	b334      	cbz	r4, 8003da2 <TSK_SafetyTask_PWMOFF+0x72>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8003d54:	4f19      	ldr	r7, [pc, #100]	; (8003dbc <TSK_SafetyTask_PWMOFF+0x8c>)
 8003d56:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8003d5a:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8003d5e:	43ea      	mvns	r2, r5
 8003d60:	b292      	uxth	r2, r2
 8003d62:	4629      	mov	r1, r5
 8003d64:	4638      	mov	r0, r7
 8003d66:	f004 fc2b 	bl	80085c0 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8003d6a:	4638      	mov	r0, r7
 8003d6c:	f004 fcba 	bl	80086e4 <STM_GetState>
 8003d70:	280a      	cmp	r0, #10
 8003d72:	d002      	beq.n	8003d7a <TSK_SafetyTask_PWMOFF+0x4a>
 8003d74:	280b      	cmp	r0, #11
 8003d76:	d00e      	beq.n	8003d96 <TSK_SafetyTask_PWMOFF+0x66>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8003d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8003d7a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003d7e:	f004 f9e1 	bl	8008144 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8003d82:	4620      	mov	r0, r4
 8003d84:	f7ff fc30 	bl	80035e8 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8003d88:	4b0d      	ldr	r3, [pc, #52]	; (8003dc0 <TSK_SafetyTask_PWMOFF+0x90>)
 8003d8a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 8003d8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8003d92:	f003 bf33 	b.w	8007bfc <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8003d96:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 8003d9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8003d9e:	f004 b9d1 	b.w	8008144 <PWMC_SwitchOffPWM>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 8003da2:	4b08      	ldr	r3, [pc, #32]	; (8003dc4 <TSK_SafetyTask_PWMOFF+0x94>)
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	f004 fa33 	bl	8008210 <RVBS_CalcAvVbus>
 8003daa:	f020 000c 	bic.w	r0, r0, #12
 8003dae:	4305      	orrs	r5, r0
 8003db0:	b2ad      	uxth	r5, r5
 8003db2:	e7cf      	b.n	8003d54 <TSK_SafetyTask_PWMOFF+0x24>
 8003db4:	20000ba4 	.word	0x20000ba4
 8003db8:	20000ba8 	.word	0x20000ba8
 8003dbc:	20000c5c 	.word	0x20000c5c
 8003dc0:	20000c68 	.word	0x20000c68
 8003dc4:	20000c3c 	.word	0x20000c3c

08003dc8 <TSK_SafetyTask>:
{
 8003dc8:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 8003dca:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <TSK_SafetyTask+0x1c>)
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d000      	beq.n	8003dd4 <TSK_SafetyTask+0xc>
}
 8003dd2:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	f7ff ffab 	bl	8003d30 <TSK_SafetyTask_PWMOFF>
}
 8003dda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 8003dde:	f000 bd89 	b.w	80048f4 <RCM_ExecUserConv>
 8003de2:	bf00      	nop
 8003de4:	20000794 	.word	0x20000794

08003de8 <MC_RunMotorControlTasks>:
{
 8003de8:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 8003dea:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <MC_RunMotorControlTasks+0x1c>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	b903      	cbnz	r3, 8003df2 <MC_RunMotorControlTasks+0xa>
}
 8003df0:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8003df2:	f7ff fea5 	bl	8003b40 <MC_Scheduler>
    TSK_SafetyTask();
 8003df6:	f7ff ffe7 	bl	8003dc8 <TSK_SafetyTask>
}
 8003dfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 8003dfe:	f001 b87b 	b.w	8004ef8 <UI_Scheduler>
 8003e02:	bf00      	nop
 8003e04:	20000794 	.word	0x20000794

08003e08 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8003e08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  ICS_SwitchOffPWM(pwmcHandle[M1]);
 8003e0a:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <TSK_HardwareFaultTask+0x18>)
 8003e0c:	6818      	ldr	r0, [r3, #0]
 8003e0e:	f003 fdfd 	bl	8007a0c <ICS_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8003e12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8003e16:	4803      	ldr	r0, [pc, #12]	; (8003e24 <TSK_HardwareFaultTask+0x1c>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2180      	movs	r1, #128	; 0x80
 8003e1c:	f004 bbd0 	b.w	80085c0 <STM_FaultProcessing>
 8003e20:	20000ba8 	.word	0x20000ba8
 8003e24:	20000c5c 	.word	0x20000c5c

08003e28 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8003e28:	b470      	push	{r4, r5, r6}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003e2a:	4b37      	ldr	r3, [pc, #220]	; (8003f08 <mc_lock_pins+0xe0>)
 8003e2c:	4937      	ldr	r1, [pc, #220]	; (8003f0c <mc_lock_pins+0xe4>)
 8003e2e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003e30:	2010      	movs	r0, #16
 8003e32:	61d8      	str	r0, [r3, #28]
 8003e34:	b08d      	sub	sp, #52	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003e36:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003e38:	69da      	ldr	r2, [r3, #28]
 8003e3a:	920b      	str	r2, [sp, #44]	; 0x2c
  (void) temp;
 8003e3c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003e3e:	4a34      	ldr	r2, [pc, #208]	; (8003f10 <mc_lock_pins+0xe8>)
 8003e40:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003e42:	f44f 7480 	mov.w	r4, #256	; 0x100
 8003e46:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003e48:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003e4a:	69da      	ldr	r2, [r3, #28]
 8003e4c:	920a      	str	r2, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003e4e:	f44f 7400 	mov.w	r4, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003e52:	f44f 3281 	mov.w	r2, #66048	; 0x10200
  (void) temp;
 8003e56:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003e58:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003e5a:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003e5c:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003e5e:	69da      	ldr	r2, [r3, #28]
 8003e60:	9209      	str	r2, [sp, #36]	; 0x24
  (void) temp;
 8003e62:	9c09      	ldr	r4, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003e64:	4a2b      	ldr	r2, [pc, #172]	; (8003f14 <mc_lock_pins+0xec>)
 8003e66:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003e68:	2440      	movs	r4, #64	; 0x40
 8003e6a:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003e6c:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003e6e:	69dc      	ldr	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003e70:	4a29      	ldr	r2, [pc, #164]	; (8003f18 <mc_lock_pins+0xf0>)
  temp = READ_REG(GPIOx->LCKR);
 8003e72:	9408      	str	r4, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003e74:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003e78:	f44f 34a0 	mov.w	r4, #81920	; 0x14000
  (void) temp;
 8003e7c:	9e08      	ldr	r6, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003e7e:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003e80:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003e82:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003e84:	69d4      	ldr	r4, [r2, #28]
 8003e86:	9407      	str	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003e88:	f44f 6580 	mov.w	r5, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003e8c:	f44f 3482 	mov.w	r4, #66560	; 0x10400
  (void) temp;
 8003e90:	9e07      	ldr	r6, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003e92:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003e94:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003e96:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003e98:	69dc      	ldr	r4, [r3, #28]
 8003e9a:	9406      	str	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003e9c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003ea0:	f44f 34c0 	mov.w	r4, #98304	; 0x18000
  (void) temp;
 8003ea4:	9e06      	ldr	r6, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003ea6:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003ea8:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003eaa:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003eac:	69d4      	ldr	r4, [r2, #28]
 8003eae:	9405      	str	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003eb0:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003eb4:	f44f 3490 	mov.w	r4, #73728	; 0x12000
  (void) temp;
 8003eb8:	9e05      	ldr	r6, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003eba:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003ebc:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003ebe:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003ec0:	69d4      	ldr	r4, [r2, #28]
 8003ec2:	9404      	str	r4, [sp, #16]
  (void) temp;
 8003ec4:	9d04      	ldr	r5, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003ec6:	4c15      	ldr	r4, [pc, #84]	; (8003f1c <mc_lock_pins+0xf4>)
 8003ec8:	f8c2 441c 	str.w	r4, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003ecc:	2520      	movs	r5, #32
 8003ece:	f8c2 541c 	str.w	r5, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003ed2:	f8c2 441c 	str.w	r4, [r2, #1052]	; 0x41c
  temp = READ_REG(GPIOx->LCKR);
 8003ed6:	f8d2 441c 	ldr.w	r4, [r2, #1052]	; 0x41c
 8003eda:	9403      	str	r4, [sp, #12]
  (void) temp;
 8003edc:	9d03      	ldr	r5, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003ede:	4c10      	ldr	r4, [pc, #64]	; (8003f20 <mc_lock_pins+0xf8>)
 8003ee0:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003ee2:	2502      	movs	r5, #2
 8003ee4:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003ee6:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	9302      	str	r3, [sp, #8]
  (void) temp;
 8003eec:	9b02      	ldr	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003eee:	f8c2 141c 	str.w	r1, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003ef2:	f8c2 041c 	str.w	r0, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003ef6:	f8c2 141c 	str.w	r1, [r2, #1052]	; 0x41c
  temp = READ_REG(GPIOx->LCKR);
 8003efa:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 8003efe:	9301      	str	r3, [sp, #4]
  (void) temp;
 8003f00:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
}
 8003f02:	b00d      	add	sp, #52	; 0x34
 8003f04:	bc70      	pop	{r4, r5, r6}
 8003f06:	4770      	bx	lr
 8003f08:	40020000 	.word	0x40020000
 8003f0c:	00010010 	.word	0x00010010
 8003f10:	00010100 	.word	0x00010100
 8003f14:	00010040 	.word	0x00010040
 8003f18:	40020400 	.word	0x40020400
 8003f1c:	00010020 	.word	0x00010020
 8003f20:	00010002 	.word	0x00010002

08003f24 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8003f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f26:	460c      	mov	r4, r1
 8003f28:	b08d      	sub	sp, #52	; 0x34
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 8003f2a:	2100      	movs	r1, #0
{
 8003f2c:	4616      	mov	r6, r2
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 8003f2e:	0962      	lsrs	r2, r4, #5
{
 8003f30:	461f      	mov	r7, r3
 8003f32:	4605      	mov	r5, r0
  bool bNoError = false; // Default is error
 8003f34:	f88d 1009 	strb.w	r1, [sp, #9]
  if (bMotorSelection != 0)
 8003f38:	d122      	bne.n	8003f80 <MCP_ReceivedFrame+0x5c>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 8003f3a:	2c12      	cmp	r4, #18
 8003f3c:	d814      	bhi.n	8003f68 <MCP_ReceivedFrame+0x44>
 8003f3e:	e8df f014 	tbh	[pc, r4, lsl #1]
 8003f42:	0016      	.short	0x0016
 8003f44:	00d1003f 	.word	0x00d1003f
 8003f48:	00130163 	.word	0x00130163
 8003f4c:	01700013 	.word	0x01700013
 8003f50:	01f80241 	.word	0x01f80241
 8003f54:	019d021c 	.word	0x019d021c
 8003f58:	01cc01b5 	.word	0x01cc01b5
 8003f5c:	001301e5 	.word	0x001301e5
 8003f60:	00130013 	.word	0x00130013
 8003f64:	00160013 	.word	0x00160013
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	f88d 300e 	strb.w	r3, [sp, #14]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8003f6e:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8003f72:	2301      	movs	r3, #1
 8003f74:	f10d 020e 	add.w	r2, sp, #14
 8003f78:	21ff      	movs	r1, #255	; 0xff
 8003f7a:	47a0      	blx	r4
    }
  }
}
 8003f7c:	b00d      	add	sp, #52	; 0x34
 8003f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8003f80:	3a01      	subs	r2, #1
 8003f82:	f000 fffb 	bl	8004f7c <UI_SetReg>
 8003f86:	2800      	cmp	r0, #0
 8003f88:	f000 8234 	beq.w	80043f4 <MCP_ReceivedFrame+0x4d0>
  switch (Code)
 8003f8c:	f004 041f 	and.w	r4, r4, #31
 8003f90:	2c12      	cmp	r4, #18
 8003f92:	f200 8238 	bhi.w	8004406 <MCP_ReceivedFrame+0x4e2>
 8003f96:	e8df f014 	tbh	[pc, r4, lsl #1]
 8003f9a:	01ea      	.short	0x01ea
 8003f9c:	00a50013 	.word	0x00a50013
 8003fa0:	02360137 	.word	0x02360137
 8003fa4:	01440236 	.word	0x01440236
 8003fa8:	01cc0215 	.word	0x01cc0215
 8003fac:	017101f0 	.word	0x017101f0
 8003fb0:	01a00189 	.word	0x01a00189
 8003fb4:	023601b9 	.word	0x023601b9
 8003fb8:	02360236 	.word	0x02360236
 8003fbc:	01ea0236 	.word	0x01ea0236
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8003fc0:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 8003fc2:	2305      	movs	r3, #5
 8003fc4:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8003fc8:	2988      	cmp	r1, #136	; 0x88
 8003fca:	f200 8237 	bhi.w	800443c <MCP_ReceivedFrame+0x518>
 8003fce:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003fd2:	028c      	.short	0x028c
 8003fd4:	02350235 	.word	0x02350235
 8003fd8:	02350282 	.word	0x02350282
 8003fdc:	023e023e 	.word	0x023e023e
 8003fe0:	023e023e 	.word	0x023e023e
 8003fe4:	023e023e 	.word	0x023e023e
 8003fe8:	023e023e 	.word	0x023e023e
 8003fec:	023e023e 	.word	0x023e023e
 8003ff0:	025d023e 	.word	0x025d023e
 8003ff4:	0235025d 	.word	0x0235025d
 8003ff8:	023e0235 	.word	0x023e0235
 8003ffc:	023e023e 	.word	0x023e023e
 8004000:	023e023e 	.word	0x023e023e
 8004004:	02350235 	.word	0x02350235
 8004008:	01510235 	.word	0x01510235
 800400c:	02350151 	.word	0x02350151
 8004010:	02350235 	.word	0x02350235
 8004014:	02350235 	.word	0x02350235
 8004018:	02350235 	.word	0x02350235
 800401c:	02350235 	.word	0x02350235
 8004020:	02350235 	.word	0x02350235
 8004024:	02350235 	.word	0x02350235
 8004028:	02350235 	.word	0x02350235
 800402c:	02350235 	.word	0x02350235
 8004030:	02350235 	.word	0x02350235
 8004034:	02350235 	.word	0x02350235
 8004038:	02350235 	.word	0x02350235
 800403c:	02350235 	.word	0x02350235
 8004040:	02350235 	.word	0x02350235
 8004044:	02350235 	.word	0x02350235
 8004048:	02350235 	.word	0x02350235
 800404c:	02350235 	.word	0x02350235
 8004050:	02350235 	.word	0x02350235
 8004054:	0235023e 	.word	0x0235023e
 8004058:	02350235 	.word	0x02350235
 800405c:	025d0235 	.word	0x025d0235
 8004060:	025d025d 	.word	0x025d025d
 8004064:	02350235 	.word	0x02350235
 8004068:	02350235 	.word	0x02350235
 800406c:	02350235 	.word	0x02350235
 8004070:	0235023e 	.word	0x0235023e
 8004074:	02350235 	.word	0x02350235
 8004078:	023e023e 	.word	0x023e023e
 800407c:	023e023e 	.word	0x023e023e
 8004080:	023e023e 	.word	0x023e023e
 8004084:	0235023e 	.word	0x0235023e
 8004088:	0235025d 	.word	0x0235025d
 800408c:	02350235 	.word	0x02350235
 8004090:	02350235 	.word	0x02350235
 8004094:	0235023e 	.word	0x0235023e
 8004098:	023e0235 	.word	0x023e0235
 800409c:	0235023e 	.word	0x0235023e
 80040a0:	02350235 	.word	0x02350235
 80040a4:	02350235 	.word	0x02350235
 80040a8:	02350235 	.word	0x02350235
 80040ac:	02350235 	.word	0x02350235
 80040b0:	02350235 	.word	0x02350235
 80040b4:	02350235 	.word	0x02350235
 80040b8:	02820235 	.word	0x02820235
 80040bc:	025d025d 	.word	0x025d025d
 80040c0:	025d025d 	.word	0x025d025d
 80040c4:	0235025d 	.word	0x0235025d
 80040c8:	02350235 	.word	0x02350235
 80040cc:	025d025d 	.word	0x025d025d
 80040d0:	02350235 	.word	0x02350235
 80040d4:	02350235 	.word	0x02350235
 80040d8:	02350235 	.word	0x02350235
 80040dc:	023e0235 	.word	0x023e0235
 80040e0:	023e023e 	.word	0x023e023e
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80040e4:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 80040e6:	2303      	movs	r3, #3
 80040e8:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 80040ec:	2988      	cmp	r1, #136	; 0x88
 80040ee:	f200 813e 	bhi.w	800436e <MCP_ReceivedFrame+0x44a>
 80040f2:	e8df f011 	tbh	[pc, r1, lsl #1]
 80040f6:	01de      	.short	0x01de
 80040f8:	01de01b9 	.word	0x01de01b9
 80040fc:	01b901de 	.word	0x01b901de
 8004100:	01910191 	.word	0x01910191
 8004104:	01910191 	.word	0x01910191
 8004108:	01910191 	.word	0x01910191
 800410c:	01910191 	.word	0x01910191
 8004110:	01910191 	.word	0x01910191
 8004114:	01910191 	.word	0x01910191
 8004118:	01910191 	.word	0x01910191
 800411c:	01910191 	.word	0x01910191
 8004120:	01910191 	.word	0x01910191
 8004124:	01910191 	.word	0x01910191
 8004128:	01910191 	.word	0x01910191
 800412c:	013c0191 	.word	0x013c0191
 8004130:	01b9013c 	.word	0x01b9013c
 8004134:	01910191 	.word	0x01910191
 8004138:	01de0191 	.word	0x01de0191
 800413c:	013c013c 	.word	0x013c013c
 8004140:	013c013c 	.word	0x013c013c
 8004144:	013c013c 	.word	0x013c013c
 8004148:	013c013c 	.word	0x013c013c
 800414c:	013c013c 	.word	0x013c013c
 8004150:	013c013c 	.word	0x013c013c
 8004154:	013c013c 	.word	0x013c013c
 8004158:	013c013c 	.word	0x013c013c
 800415c:	013c013c 	.word	0x013c013c
 8004160:	013c013c 	.word	0x013c013c
 8004164:	013c013c 	.word	0x013c013c
 8004168:	013c013c 	.word	0x013c013c
 800416c:	013c013c 	.word	0x013c013c
 8004170:	013c013c 	.word	0x013c013c
 8004174:	013c013c 	.word	0x013c013c
 8004178:	013c0191 	.word	0x013c0191
 800417c:	013c013c 	.word	0x013c013c
 8004180:	01b9013c 	.word	0x01b9013c
 8004184:	01b901b9 	.word	0x01b901b9
 8004188:	01910191 	.word	0x01910191
 800418c:	01910191 	.word	0x01910191
 8004190:	01b901de 	.word	0x01b901de
 8004194:	01910191 	.word	0x01910191
 8004198:	01910191 	.word	0x01910191
 800419c:	01910191 	.word	0x01910191
 80041a0:	01910191 	.word	0x01910191
 80041a4:	01910191 	.word	0x01910191
 80041a8:	01de0191 	.word	0x01de0191
 80041ac:	013c01b9 	.word	0x013c01b9
 80041b0:	01910191 	.word	0x01910191
 80041b4:	01910191 	.word	0x01910191
 80041b8:	013c0191 	.word	0x013c0191
 80041bc:	0191013c 	.word	0x0191013c
 80041c0:	01de0191 	.word	0x01de0191
 80041c4:	01b901de 	.word	0x01b901de
 80041c8:	01b901b9 	.word	0x01b901b9
 80041cc:	01b901b9 	.word	0x01b901b9
 80041d0:	019101de 	.word	0x019101de
 80041d4:	01b90191 	.word	0x01b90191
 80041d8:	0191013c 	.word	0x0191013c
 80041dc:	01de0191 	.word	0x01de0191
 80041e0:	01b901b9 	.word	0x01b901b9
 80041e4:	01b901b9 	.word	0x01b901b9
 80041e8:	01b901b9 	.word	0x01b901b9
 80041ec:	01b901b9 	.word	0x01b901b9
 80041f0:	01b901b9 	.word	0x01b901b9
 80041f4:	01de01b9 	.word	0x01de01b9
 80041f8:	01de013c 	.word	0x01de013c
 80041fc:	01b901b9 	.word	0x01b901b9
 8004200:	019101b9 	.word	0x019101b9
 8004204:	01910191 	.word	0x01910191
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8004208:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 800420a:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 800420c:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8004210:	4628      	mov	r0, r5
 8004212:	f001 fb0b 	bl	800582c <UI_ExecCmd>
 8004216:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 800421a:	2800      	cmp	r0, #0
 800421c:	f43f aea7 	beq.w	8003f6e <MCP_ReceivedFrame+0x4a>
 8004220:	e03c      	b.n	800429c <MCP_ReceivedFrame+0x378>
 8004222:	ac04      	add	r4, sp, #16
 8004224:	2100      	movs	r1, #0
 8004226:	4620      	mov	r0, r4
 8004228:	2220      	movs	r2, #32
 800422a:	f005 f977 	bl	800951c <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 800422e:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 8004232:	f10d 0012 	add.w	r0, sp, #18
 8004236:	1e71      	subs	r1, r6, #1
 8004238:	2300      	movs	r3, #0
 800423a:	e005      	b.n	8004248 <MCP_ReceivedFrame+0x324>
 800423c:	3301      	adds	r3, #1
 800423e:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 8004240:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8004244:	f000 815c 	beq.w	8004500 <MCP_ReceivedFrame+0x5dc>
 8004248:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800424c:	2a09      	cmp	r2, #9
 800424e:	d1f5      	bne.n	800423c <MCP_ReceivedFrame+0x318>
 8004250:	1d5a      	adds	r2, r3, #5
 8004252:	1dd9      	adds	r1, r3, #7
 8004254:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 8004256:	5cb2      	ldrb	r2, [r6, r2]
 8004258:	f88d 2010 	strb.w	r2, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 800425c:	5c72      	ldrb	r2, [r6, r1]
 800425e:	f88d 2011 	strb.w	r2, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8004262:	5cf3      	ldrb	r3, [r6, r3]
 8004264:	f88d 3012 	strb.w	r3, [sp, #18]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8004268:	4622      	mov	r2, r4
 800426a:	2320      	movs	r3, #32
 800426c:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8004270:	21f0      	movs	r1, #240	; 0xf0
 8004272:	47a0      	blx	r4
      bNoError = true;
 8004274:	2301      	movs	r3, #1
 8004276:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 800427a:	e00f      	b.n	800429c <MCP_ReceivedFrame+0x378>
      hIdRef = buffer[2] + (buffer[3] << 8);
 800427c:	78f0      	ldrb	r0, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 800427e:	7873      	ldrb	r3, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8004280:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8004282:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8004284:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 8004288:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 800428c:	b212      	sxth	r2, r2
 800428e:	b209      	sxth	r1, r1
 8004290:	4628      	mov	r0, r5
 8004292:	f001 fb5d 	bl	8005950 <UI_SetCurrentReferences>
      bNoError = true;
 8004296:	2301      	movs	r3, #1
 8004298:	f88d 3009 	strb.w	r3, [sp, #9]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 800429c:	2300      	movs	r3, #0
 800429e:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 80042a2:	461a      	mov	r2, r3
 80042a4:	21f0      	movs	r1, #240	; 0xf0
 80042a6:	47a0      	blx	r4
}
 80042a8:	b00d      	add	sp, #52	; 0x34
 80042aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 80042ac:	4c96      	ldr	r4, [pc, #600]	; (8004508 <MCP_ReceivedFrame+0x5e4>)
      stepList.data = buffer;
 80042ae:	9604      	str	r6, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 80042b0:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 80042b2:	4621      	mov	r1, r4
 80042b4:	a804      	add	r0, sp, #16
      stepList.len = Size;
 80042b6:	f88d 7014 	strb.w	r7, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 80042ba:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 80042be:	f001 fb57 	bl	8005970 <UI_GetMPInfo>
 80042c2:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 80042c6:	2800      	cmp	r0, #0
 80042c8:	f43f ae51 	beq.w	8003f6e <MCP_ReceivedFrame+0x4a>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 80042cc:	e9d5 0606 	ldrd	r0, r6, [r5, #24]
 80042d0:	7923      	ldrb	r3, [r4, #4]
 80042d2:	6822      	ldr	r2, [r4, #0]
 80042d4:	21f0      	movs	r1, #240	; 0xf0
 80042d6:	47b0      	blx	r6
  if (RequireAck)
 80042d8:	e650      	b.n	8003f7c <MCP_ReceivedFrame+0x58>
 80042da:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 80042de:	ac04      	add	r4, sp, #16
 80042e0:	3b01      	subs	r3, #1
 80042e2:	4622      	mov	r2, r4
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 80042e4:	2000      	movs	r0, #0
 80042e6:	e004      	b.n	80042f2 <MCP_ReceivedFrame+0x3ce>
 80042e8:	3001      	adds	r0, #1
 80042ea:	2820      	cmp	r0, #32
        outBuff[i] = pHandle->s_fwVer[i];
 80042ec:	f802 1b01 	strb.w	r1, [r2], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 80042f0:	d0ba      	beq.n	8004268 <MCP_ReceivedFrame+0x344>
 80042f2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80042f6:	b2c6      	uxtb	r6, r0
 80042f8:	2900      	cmp	r1, #0
 80042fa:	d1f5      	bne.n	80042e8 <MCP_ReceivedFrame+0x3c4>
        outBuff[i] = 0;
 80042fc:	f1c6 021f 	rsb	r2, r6, #31
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	3201      	adds	r2, #1
 8004304:	4420      	add	r0, r4
 8004306:	f005 f909 	bl	800951c <memset>
 800430a:	e7ad      	b.n	8004268 <MCP_ReceivedFrame+0x344>
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 800430c:	7970      	ldrb	r0, [r6, #5]
 800430e:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8004310:	7873      	ldrb	r3, [r6, #1]
 8004312:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8004314:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8004318:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 800431c:	b292      	uxth	r2, r2
 800431e:	b209      	sxth	r1, r1
 8004320:	4628      	mov	r0, r5
 8004322:	f001 fad1 	bl	80058c8 <UI_ExecTorqueRamp>
 8004326:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 800432a:	2800      	cmp	r0, #0
 800432c:	f43f ae1f 	beq.w	8003f6e <MCP_ReceivedFrame+0x4a>
 8004330:	e7b4      	b.n	800429c <MCP_ReceivedFrame+0x378>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8004332:	f10d 030e 	add.w	r3, sp, #14
 8004336:	7831      	ldrb	r1, [r6, #0]
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	f10d 020a 	add.w	r2, sp, #10
 800433e:	ab03      	add	r3, sp, #12
 8004340:	4628      	mov	r0, r5
 8004342:	f001 facb 	bl	80058dc <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8004346:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      outBuff[4] = (uint8_t)(FinalTorque);
 800434a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
      outBuff[6] = (uint8_t)(Durationms);
 800434e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      outBuff[4] = (uint8_t)(FinalTorque);
 8004352:	f8ad 1014 	strh.w	r1, [sp, #20]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8004356:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800435a:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 800435c:	9304      	str	r3, [sp, #16]
      outBuff[6] = (uint8_t)(Durationms);
 800435e:	f8ad 2016 	strh.w	r2, [sp, #22]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8004362:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8004366:	2308      	movs	r3, #8
 8004368:	aa04      	add	r2, sp, #16
 800436a:	21f0      	movs	r1, #240	; 0xf0
 800436c:	47a0      	blx	r4
  if (RequireAck)
 800436e:	f89d 0009 	ldrb.w	r0, [sp, #9]
    if (bNoError)
 8004372:	2800      	cmp	r0, #0
 8004374:	f43f adfb 	beq.w	8003f6e <MCP_ReceivedFrame+0x4a>
 8004378:	e790      	b.n	800429c <MCP_ReceivedFrame+0x378>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 800437a:	78b1      	ldrb	r1, [r6, #2]
 800437c:	7873      	ldrb	r3, [r6, #1]
 800437e:	78f2      	ldrb	r2, [r6, #3]
 8004380:	7934      	ldrb	r4, [r6, #4]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8004382:	7970      	ldrb	r0, [r6, #5]
      hDurationms = buffer[7] + (buffer[8] << 8);
 8004384:	7a37      	ldrb	r7, [r6, #8]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8004386:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800438a:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 800438e:	4a5f      	ldr	r2, [pc, #380]	; (800450c <MCP_ReceivedFrame+0x5e8>)
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8004390:	79b1      	ldrb	r1, [r6, #6]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8004392:	eb03 6304 	add.w	r3, r3, r4, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8004396:	fb82 4203 	smull	r4, r2, r2, r3
      hDurationms = buffer[7] + (buffer[8] << 8);
 800439a:	79f4      	ldrb	r4, [r6, #7]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 800439c:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80043a0:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 80043a4:	b200      	sxth	r0, r0
      hDurationms = buffer[7] + (buffer[8] << 8);
 80043a6:	eb04 2207 	add.w	r2, r4, r7, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 80043aa:	7831      	ldrb	r1, [r6, #0]
 80043ac:	9000      	str	r0, [sp, #0]
 80043ae:	b21b      	sxth	r3, r3
 80043b0:	b292      	uxth	r2, r2
 80043b2:	4628      	mov	r0, r5
 80043b4:	f001 fab0 	bl	8005918 <UI_SetRevupData>
 80043b8:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 80043bc:	2800      	cmp	r0, #0
 80043be:	f43f add6 	beq.w	8003f6e <MCP_ReceivedFrame+0x4a>
 80043c2:	e76b      	b.n	800429c <MCP_ReceivedFrame+0x378>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80043c4:	7877      	ldrb	r7, [r6, #1]
 80043c6:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80043c8:	7970      	ldrb	r0, [r6, #5]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80043ca:	78b4      	ldrb	r4, [r6, #2]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80043cc:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80043ce:	78f1      	ldrb	r1, [r6, #3]
 80043d0:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 80043d4:	eb03 4304 	add.w	r3, r3, r4, lsl #16
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80043d8:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 80043dc:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 80043e0:	b292      	uxth	r2, r2
 80043e2:	4628      	mov	r0, r5
 80043e4:	f001 fa5e 	bl	80058a4 <UI_ExecSpeedRamp>
 80043e8:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 80043ec:	2800      	cmp	r0, #0
 80043ee:	f43f adbe 	beq.w	8003f6e <MCP_ReceivedFrame+0x4a>
 80043f2:	e753      	b.n	800429c <MCP_ReceivedFrame+0x378>
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 80043f4:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80043f8:	230b      	movs	r3, #11
 80043fa:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 80043fe:	2800      	cmp	r0, #0
 8004400:	f43f adb5 	beq.w	8003f6e <MCP_ReceivedFrame+0x4a>
 8004404:	e74a      	b.n	800429c <MCP_ReceivedFrame+0x378>
 8004406:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_FRAME_ID;
 800440a:	2301      	movs	r3, #1
 800440c:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8004410:	2800      	cmp	r0, #0
 8004412:	f43f adac 	beq.w	8003f6e <MCP_ReceivedFrame+0x4a>
 8004416:	e741      	b.n	800429c <MCP_ReceivedFrame+0x378>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8004418:	f10d 0209 	add.w	r2, sp, #9
 800441c:	4628      	mov	r0, r5
 800441e:	f000 ff1b 	bl	8005258 <UI_GetReg>
          if ( bNoError == true )
 8004422:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8004426:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8004428:	2b00      	cmp	r3, #0
 800442a:	f43f ada0 	beq.w	8003f6e <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 800442e:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8004432:	2302      	movs	r3, #2
 8004434:	aa04      	add	r2, sp, #16
 8004436:	21f0      	movs	r1, #240	; 0xf0
 8004438:	47a0      	blx	r4
  if (RequireAck)
 800443a:	e59f      	b.n	8003f7c <MCP_ReceivedFrame+0x58>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 800443c:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8004440:	2302      	movs	r3, #2
 8004442:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8004446:	2800      	cmp	r0, #0
 8004448:	f43f ad91 	beq.w	8003f6e <MCP_ReceivedFrame+0x4a>
 800444c:	e726      	b.n	800429c <MCP_ReceivedFrame+0x378>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 800444e:	78b2      	ldrb	r2, [r6, #2]
 8004450:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8004452:	4628      	mov	r0, r5
 8004454:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8004458:	f000 fd90 	bl	8004f7c <UI_SetReg>
 800445c:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8004460:	2800      	cmp	r0, #0
 8004462:	f43f ad84 	beq.w	8003f6e <MCP_ReceivedFrame+0x4a>
 8004466:	e719      	b.n	800429c <MCP_ReceivedFrame+0x378>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8004468:	f10d 0209 	add.w	r2, sp, #9
 800446c:	4628      	mov	r0, r5
 800446e:	f000 fef3 	bl	8005258 <UI_GetReg>
          if ( bNoError == true )
 8004472:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8004476:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8004478:	2b00      	cmp	r3, #0
 800447a:	f43f ad78 	beq.w	8003f6e <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 800447e:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8004482:	2304      	movs	r3, #4
 8004484:	aa04      	add	r2, sp, #16
 8004486:	21f0      	movs	r1, #240	; 0xf0
 8004488:	47a0      	blx	r4
  if (RequireAck)
 800448a:	e577      	b.n	8003f7c <MCP_ReceivedFrame+0x58>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 800448c:	78b4      	ldrb	r4, [r6, #2]
 800448e:	7873      	ldrb	r3, [r6, #1]
 8004490:	78f0      	ldrb	r0, [r6, #3]
 8004492:	7932      	ldrb	r2, [r6, #4]
 8004494:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8004498:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 800449c:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 80044a0:	4628      	mov	r0, r5
 80044a2:	f000 fd6b 	bl	8004f7c <UI_SetReg>
 80044a6:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 80044aa:	2800      	cmp	r0, #0
 80044ac:	f43f ad5f 	beq.w	8003f6e <MCP_ReceivedFrame+0x4a>
 80044b0:	e6f4      	b.n	800429c <MCP_ReceivedFrame+0x378>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80044b2:	f10d 0209 	add.w	r2, sp, #9
 80044b6:	4628      	mov	r0, r5
 80044b8:	f000 fece 	bl	8005258 <UI_GetReg>
           if ( bNoError == true )
 80044bc:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80044c0:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f43f ad53 	beq.w	8003f6e <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 80044c8:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 80044cc:	2301      	movs	r3, #1
 80044ce:	aa04      	add	r2, sp, #16
 80044d0:	21f0      	movs	r1, #240	; 0xf0
 80044d2:	47a0      	blx	r4
  if (RequireAck)
 80044d4:	e552      	b.n	8003f7c <MCP_ReceivedFrame+0x58>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 80044d6:	7872      	ldrb	r2, [r6, #1]
 80044d8:	4628      	mov	r0, r5
 80044da:	f000 fd4f 	bl	8004f7c <UI_SetReg>
 80044de:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 80044e2:	2800      	cmp	r0, #0
 80044e4:	f43f ad43 	beq.w	8003f6e <MCP_ReceivedFrame+0x4a>
 80044e8:	e6d8      	b.n	800429c <MCP_ReceivedFrame+0x378>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 80044ea:	7872      	ldrb	r2, [r6, #1]
 80044ec:	2100      	movs	r1, #0
 80044ee:	4628      	mov	r0, r5
 80044f0:	f000 fd44 	bl	8004f7c <UI_SetReg>
 80044f4:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 80044f8:	2800      	cmp	r0, #0
 80044fa:	f43f ad38 	beq.w	8003f6e <MCP_ReceivedFrame+0x4a>
 80044fe:	e6cd      	b.n	800429c <MCP_ReceivedFrame+0x378>
 8004500:	2326      	movs	r3, #38	; 0x26
 8004502:	2124      	movs	r1, #36	; 0x24
 8004504:	2222      	movs	r2, #34	; 0x22
 8004506:	e6a6      	b.n	8004256 <MCP_ReceivedFrame+0x332>
 8004508:	2000079c 	.word	0x2000079c
 800450c:	2aaaaaab 	.word	0x2aaaaaab

08004510 <MCP_WaitNextFrame>:
{
 8004510:	b510      	push	{r4, lr}
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8004512:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8004514:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8004516:	6980      	ldr	r0, [r0, #24]
 8004518:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 800451a:	2380      	movs	r3, #128	; 0x80
 800451c:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 8004520:	69a0      	ldr	r0, [r4, #24]
 8004522:	6a23      	ldr	r3, [r4, #32]
}
 8004524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8004528:	4718      	bx	r3
 800452a:	bf00      	nop

0800452c <MCP_Init>:
{
 800452c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800452e:	b083      	sub	sp, #12
 8004530:	4604      	mov	r4, r0
  FCP_SetClient( pFCP, pHandle,
 8004532:	4f0b      	ldr	r7, [pc, #44]	; (8004560 <MCP_Init+0x34>)
{
 8004534:	4608      	mov	r0, r1
 8004536:	9909      	ldr	r1, [sp, #36]	; 0x24
  pHandle->pFCP = pFCP;
 8004538:	61a0      	str	r0, [r4, #24]
  pHandle->s_fwVer = s_fwVer;
 800453a:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
{
 800453e:	4616      	mov	r6, r2
 8004540:	461d      	mov	r5, r3
  FCP_SetClient( pFCP, pHandle,
 8004542:	4a08      	ldr	r2, [pc, #32]	; (8004564 <MCP_Init+0x38>)
 8004544:	4b08      	ldr	r3, [pc, #32]	; (8004568 <MCP_Init+0x3c>)
 8004546:	9700      	str	r7, [sp, #0]
 8004548:	4621      	mov	r1, r4
{
 800454a:	9f08      	ldr	r7, [sp, #32]
  FCP_SetClient( pFCP, pHandle,
 800454c:	f003 f904 	bl	8007758 <FCP_SetClient>
  pHandle->fFcpReceive = fFcpReceive;
 8004550:	e9c4 6507 	strd	r6, r5, [r4, #28]
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8004554:	6267      	str	r7, [r4, #36]	; 0x24
  MCP_WaitNextFrame(pHandle);
 8004556:	4620      	mov	r0, r4
 8004558:	f7ff ffda 	bl	8004510 <MCP_WaitNextFrame>
}
 800455c:	b003      	add	sp, #12
 800455e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004560:	0800456d 	.word	0x0800456d
 8004564:	08004575 	.word	0x08004575
 8004568:	08003f25 	.word	0x08003f25

0800456c <MCP_OnTimeOut>:
{
 800456c:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 800456e:	f7ff ffcf 	bl	8004510 <MCP_WaitNextFrame>
}
 8004572:	bd08      	pop	{r3, pc}

08004574 <MCP_SentFrame>:
{
 8004574:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 8004576:	f7ff ffcb 	bl	8004510 <MCP_WaitNextFrame>
}
 800457a:	bd08      	pop	{r3, pc}

0800457c <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 800457c:	b530      	push	{r4, r5, lr}
 800457e:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8004580:	f002 f8f2 	bl	8006768 <HAL_RCC_GetHCLKFreq>
 8004584:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8004586:	4d0c      	ldr	r5, [pc, #48]	; (80045b8 <MX_MotorControl_Init+0x3c>)
 8004588:	4c0c      	ldr	r4, [pc, #48]	; (80045bc <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 800458a:	fba3 3000 	umull	r3, r0, r3, r0
 800458e:	09c0      	lsrs	r0, r0, #7
 8004590:	f001 fede 	bl	8006350 <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 8004594:	4629      	mov	r1, r5
 8004596:	4620      	mov	r0, r4
 8004598:	f7ff f86a 	bl	8003670 <MCboot>
  mc_lock_pins();
 800459c:	f7ff fc44 	bl	8003e28 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 80045a0:	4b07      	ldr	r3, [pc, #28]	; (80045c0 <MX_MotorControl_Init+0x44>)
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	4807      	ldr	r0, [pc, #28]	; (80045c4 <MX_MotorControl_Init+0x48>)
 80045a6:	462b      	mov	r3, r5
 80045a8:	4622      	mov	r2, r4
 80045aa:	2101      	movs	r1, #1
 80045ac:	f000 fc64 	bl	8004e78 <UI_TaskInit>
}
 80045b0:	b003      	add	sp, #12
 80045b2:	bd30      	pop	{r4, r5, pc}
 80045b4:	10624dd3 	.word	0x10624dd3
 80045b8:	20000c78 	.word	0x20000c78
 80045bc:	20000c74 	.word	0x20000c74
 80045c0:	0800a678 	.word	0x0800a678
 80045c4:	200006c4 	.word	0x200006c4

080045c8 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80045c8:	4b9b      	ldr	r3, [pc, #620]	; (8004838 <RCM_RegisterRegConv+0x270>)
 80045ca:	681a      	ldr	r2, [r3, #0]
{
 80045cc:	b4f0      	push	{r4, r5, r6, r7}
 80045ce:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80045d0:	2a00      	cmp	r2, #0
 80045d2:	f000 809a 	beq.w	800470a <RCM_RegisterRegConv+0x142>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80045d6:	7904      	ldrb	r4, [r0, #4]
 80045d8:	7910      	ldrb	r0, [r2, #4]
 80045da:	4284      	cmp	r4, r0
 80045dc:	d040      	beq.n	8004660 <RCM_RegisterRegConv+0x98>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80045de:	685d      	ldr	r5, [r3, #4]
 80045e0:	2d00      	cmp	r5, #0
 80045e2:	f000 80a9 	beq.w	8004738 <RCM_RegisterRegConv+0x170>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80045e6:	792a      	ldrb	r2, [r5, #4]
 80045e8:	42a2      	cmp	r2, r4
  uint8_t handle=255;
 80045ea:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80045ee:	f000 8095 	beq.w	800471c <RCM_RegisterRegConv+0x154>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	2a00      	cmp	r2, #0
 80045f6:	f000 80c1 	beq.w	800477c <RCM_RegisterRegConv+0x1b4>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80045fa:	7915      	ldrb	r5, [r2, #4]
 80045fc:	42a5      	cmp	r5, r4
 80045fe:	f000 8094 	beq.w	800472a <RCM_RegisterRegConv+0x162>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8004602:	68da      	ldr	r2, [r3, #12]
 8004604:	2a00      	cmp	r2, #0
 8004606:	f000 80c0 	beq.w	800478a <RCM_RegisterRegConv+0x1c2>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800460a:	7915      	ldrb	r5, [r2, #4]
 800460c:	42a5      	cmp	r5, r4
 800460e:	f000 80a7 	beq.w	8004760 <RCM_RegisterRegConv+0x198>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	2a00      	cmp	r2, #0
 8004616:	f000 80d5 	beq.w	80047c4 <RCM_RegisterRegConv+0x1fc>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800461a:	7915      	ldrb	r5, [r2, #4]
 800461c:	42a5      	cmp	r5, r4
 800461e:	f000 80a6 	beq.w	800476e <RCM_RegisterRegConv+0x1a6>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8004622:	695a      	ldr	r2, [r3, #20]
 8004624:	2a00      	cmp	r2, #0
 8004626:	f000 80e1 	beq.w	80047ec <RCM_RegisterRegConv+0x224>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800462a:	7915      	ldrb	r5, [r2, #4]
 800462c:	42a5      	cmp	r5, r4
 800462e:	f000 80bb 	beq.w	80047a8 <RCM_RegisterRegConv+0x1e0>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8004632:	699a      	ldr	r2, [r3, #24]
 8004634:	2a00      	cmp	r2, #0
 8004636:	f000 80c9 	beq.w	80047cc <RCM_RegisterRegConv+0x204>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800463a:	7915      	ldrb	r5, [r2, #4]
 800463c:	42a5      	cmp	r5, r4
 800463e:	f000 80ba 	beq.w	80047b6 <RCM_RegisterRegConv+0x1ee>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8004642:	69da      	ldr	r2, [r3, #28]
 8004644:	2a00      	cmp	r2, #0
 8004646:	f000 80d9 	beq.w	80047fc <RCM_RegisterRegConv+0x234>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800464a:	7915      	ldrb	r5, [r2, #4]
 800464c:	42a5      	cmp	r5, r4
 800464e:	f000 80c6 	beq.w	80047de <RCM_RegisterRegConv+0x216>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8004652:	2807      	cmp	r0, #7
 8004654:	bf88      	it	hi
 8004656:	20ff      	movhi	r0, #255	; 0xff
 8004658:	f240 80e5 	bls.w	8004826 <RCM_RegisterRegConv+0x25e>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 800465c:	bcf0      	pop	{r4, r5, r6, r7}
 800465e:	4770      	bx	lr
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8004660:	6810      	ldr	r0, [r2, #0]
 8004662:	680a      	ldr	r2, [r1, #0]
 8004664:	4290      	cmp	r0, r2
 8004666:	d1ba      	bne.n	80045de <RCM_RegisterRegConv+0x16>
  uint8_t i=0;
 8004668:	2000      	movs	r0, #0
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800466a:	6894      	ldr	r4, [r2, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 800466c:	4d73      	ldr	r5, [pc, #460]	; (800483c <RCM_RegisterRegConv+0x274>)
      RCM_handle_array [handle] = regConv;
 800466e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8004672:	2300      	movs	r3, #0
 8004674:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8004678:	07e3      	lsls	r3, r4, #31
 800467a:	d411      	bmi.n	80046a0 <RCM_RegisterRegConv+0xd8>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 800467c:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 800467e:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8004682:	f023 0320 	bic.w	r3, r3, #32
 8004686:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8004688:	6014      	str	r4, [r2, #0]
{
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800468a:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800468c:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8004690:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004694:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8004696:	6014      	str	r4, [r2, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8004698:	6893      	ldr	r3, [r2, #8]
 800469a:	f043 0301 	orr.w	r3, r3, #1
 800469e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80046a0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80046a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80046a6:	62d3      	str	r3, [r2, #44]	; 0x2c
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 80046a8:	790b      	ldrb	r3, [r1, #4]
 80046aa:	2b09      	cmp	r3, #9
 80046ac:	d84e      	bhi.n	800474c <RCM_RegisterRegConv+0x184>
 80046ae:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 80046b2:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 80046b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046ba:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046be:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80046c2:	fa94 f4a4 	rbit	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80046c6:	fab4 f484 	clz	r4, r4
 80046ca:	40e6      	lsrs	r6, r4
 80046cc:	320c      	adds	r2, #12
  MODIFY_REG(*preg,
 80046ce:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80046d2:	f852 5026 	ldr.w	r5, [r2, r6, lsl #2]
 80046d6:	f04f 74f8 	mov.w	r4, #32505856	; 0x1f00000
 80046da:	fa94 f7a4 	rbit	r7, r4
 80046de:	fab7 f787 	clz	r7, r7
 80046e2:	fa94 f4a4 	rbit	r4, r4
 80046e6:	f04f 0c07 	mov.w	ip, #7
 80046ea:	6889      	ldr	r1, [r1, #8]
 80046ec:	fab4 f484 	clz	r4, r4
 80046f0:	fa23 f707 	lsr.w	r7, r3, r7
 80046f4:	fa0c f707 	lsl.w	r7, ip, r7
 80046f8:	40e3      	lsrs	r3, r4
 80046fa:	4099      	lsls	r1, r3
 80046fc:	ea25 0307 	bic.w	r3, r5, r7
 8004700:	430b      	orrs	r3, r1
 8004702:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
}
 8004706:	bcf0      	pop	{r4, r5, r6, r7}
 8004708:	4770      	bx	lr
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800470a:	685d      	ldr	r5, [r3, #4]
 800470c:	2d00      	cmp	r5, #0
 800470e:	d07e      	beq.n	800480e <RCM_RegisterRegConv+0x246>
 8004710:	790c      	ldrb	r4, [r1, #4]
  uint8_t i=0;
 8004712:	4610      	mov	r0, r2
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8004714:	792a      	ldrb	r2, [r5, #4]
 8004716:	42a2      	cmp	r2, r4
 8004718:	f47f af6b 	bne.w	80045f2 <RCM_RegisterRegConv+0x2a>
 800471c:	682d      	ldr	r5, [r5, #0]
 800471e:	680a      	ldr	r2, [r1, #0]
 8004720:	4295      	cmp	r5, r2
 8004722:	f47f af66 	bne.w	80045f2 <RCM_RegisterRegConv+0x2a>
 8004726:	2001      	movs	r0, #1
 8004728:	e79f      	b.n	800466a <RCM_RegisterRegConv+0xa2>
 800472a:	6815      	ldr	r5, [r2, #0]
 800472c:	680a      	ldr	r2, [r1, #0]
 800472e:	4295      	cmp	r5, r2
 8004730:	f47f af67 	bne.w	8004602 <RCM_RegisterRegConv+0x3a>
      i++;
 8004734:	2002      	movs	r0, #2
 8004736:	e798      	b.n	800466a <RCM_RegisterRegConv+0xa2>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8004738:	689a      	ldr	r2, [r3, #8]
      i++;
 800473a:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800473c:	2a00      	cmp	r2, #0
 800473e:	f47f af5c 	bne.w	80045fa <RCM_RegisterRegConv+0x32>
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	2a00      	cmp	r2, #0
 8004746:	d067      	beq.n	8004818 <RCM_RegisterRegConv+0x250>
 8004748:	790c      	ldrb	r4, [r1, #4]
 800474a:	e75e      	b.n	800460a <RCM_RegisterRegConv+0x42>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 800474c:	2403      	movs	r4, #3
 800474e:	f06f 051d 	mvn.w	r5, #29
 8004752:	fb14 5403 	smlabb	r4, r4, r3, r5
 8004756:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 800475a:	f003 7600 	and.w	r6, r3, #33554432	; 0x2000000
 800475e:	e7ae      	b.n	80046be <RCM_RegisterRegConv+0xf6>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8004760:	6815      	ldr	r5, [r2, #0]
 8004762:	680a      	ldr	r2, [r1, #0]
 8004764:	4295      	cmp	r5, r2
 8004766:	f47f af54 	bne.w	8004612 <RCM_RegisterRegConv+0x4a>
      i++;
 800476a:	2003      	movs	r0, #3
 800476c:	e77d      	b.n	800466a <RCM_RegisterRegConv+0xa2>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800476e:	6815      	ldr	r5, [r2, #0]
 8004770:	680a      	ldr	r2, [r1, #0]
 8004772:	4295      	cmp	r5, r2
 8004774:	f47f af55 	bne.w	8004622 <RCM_RegisterRegConv+0x5a>
      i++;
 8004778:	2004      	movs	r0, #4
 800477a:	e776      	b.n	800466a <RCM_RegisterRegConv+0xa2>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800477c:	2808      	cmp	r0, #8
 800477e:	d950      	bls.n	8004822 <RCM_RegisterRegConv+0x25a>
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	2a00      	cmp	r2, #0
 8004784:	d051      	beq.n	800482a <RCM_RegisterRegConv+0x262>
      i++;
 8004786:	2002      	movs	r0, #2
 8004788:	e73f      	b.n	800460a <RCM_RegisterRegConv+0x42>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800478a:	2808      	cmp	r0, #8
 800478c:	d944      	bls.n	8004818 <RCM_RegisterRegConv+0x250>
 800478e:	691a      	ldr	r2, [r3, #16]
      i++;
 8004790:	2003      	movs	r0, #3
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8004792:	2a00      	cmp	r2, #0
 8004794:	f47f af41 	bne.w	800461a <RCM_RegisterRegConv+0x52>
 8004798:	695a      	ldr	r2, [r3, #20]
 800479a:	2a00      	cmp	r2, #0
 800479c:	d032      	beq.n	8004804 <RCM_RegisterRegConv+0x23c>
 800479e:	790c      	ldrb	r4, [r1, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80047a0:	7915      	ldrb	r5, [r2, #4]
 80047a2:	42a5      	cmp	r5, r4
 80047a4:	f47f af45 	bne.w	8004632 <RCM_RegisterRegConv+0x6a>
 80047a8:	6815      	ldr	r5, [r2, #0]
 80047aa:	680a      	ldr	r2, [r1, #0]
 80047ac:	4295      	cmp	r5, r2
 80047ae:	f47f af40 	bne.w	8004632 <RCM_RegisterRegConv+0x6a>
      i++;
 80047b2:	2005      	movs	r0, #5
 80047b4:	e759      	b.n	800466a <RCM_RegisterRegConv+0xa2>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80047b6:	6815      	ldr	r5, [r2, #0]
 80047b8:	680a      	ldr	r2, [r1, #0]
 80047ba:	4295      	cmp	r5, r2
 80047bc:	f47f af41 	bne.w	8004642 <RCM_RegisterRegConv+0x7a>
      i++;
 80047c0:	2006      	movs	r0, #6
 80047c2:	e752      	b.n	800466a <RCM_RegisterRegConv+0xa2>
 80047c4:	2809      	cmp	r0, #9
 80047c6:	bf28      	it	cs
 80047c8:	2004      	movcs	r0, #4
 80047ca:	e7e5      	b.n	8004798 <RCM_RegisterRegConv+0x1d0>
 80047cc:	2809      	cmp	r0, #9
 80047ce:	bf28      	it	cs
 80047d0:	2006      	movcs	r0, #6
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80047d2:	69da      	ldr	r2, [r3, #28]
 80047d4:	b33a      	cbz	r2, 8004826 <RCM_RegisterRegConv+0x25e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80047d6:	7915      	ldrb	r5, [r2, #4]
 80047d8:	790c      	ldrb	r4, [r1, #4]
 80047da:	42a5      	cmp	r5, r4
 80047dc:	d123      	bne.n	8004826 <RCM_RegisterRegConv+0x25e>
 80047de:	6814      	ldr	r4, [r2, #0]
 80047e0:	680a      	ldr	r2, [r1, #0]
 80047e2:	4294      	cmp	r4, r2
 80047e4:	f47f af35 	bne.w	8004652 <RCM_RegisterRegConv+0x8a>
      i++;
 80047e8:	2007      	movs	r0, #7
 80047ea:	e73e      	b.n	800466a <RCM_RegisterRegConv+0xa2>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80047ec:	2808      	cmp	r0, #8
 80047ee:	d909      	bls.n	8004804 <RCM_RegisterRegConv+0x23c>
 80047f0:	699a      	ldr	r2, [r3, #24]
      i++;
 80047f2:	2005      	movs	r0, #5
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80047f4:	2a00      	cmp	r2, #0
 80047f6:	f47f af20 	bne.w	800463a <RCM_RegisterRegConv+0x72>
 80047fa:	e7ea      	b.n	80047d2 <RCM_RegisterRegConv+0x20a>
 80047fc:	2808      	cmp	r0, #8
 80047fe:	680a      	ldr	r2, [r1, #0]
 8004800:	d8f2      	bhi.n	80047e8 <RCM_RegisterRegConv+0x220>
 8004802:	e732      	b.n	800466a <RCM_RegisterRegConv+0xa2>
 8004804:	699a      	ldr	r2, [r3, #24]
 8004806:	2a00      	cmp	r2, #0
 8004808:	d0e3      	beq.n	80047d2 <RCM_RegisterRegConv+0x20a>
 800480a:	790c      	ldrb	r4, [r1, #4]
 800480c:	e715      	b.n	800463a <RCM_RegisterRegConv+0x72>
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	b13a      	cbz	r2, 8004822 <RCM_RegisterRegConv+0x25a>
 8004812:	790c      	ldrb	r4, [r1, #4]
  uint8_t i=0;
 8004814:	4628      	mov	r0, r5
 8004816:	e6f0      	b.n	80045fa <RCM_RegisterRegConv+0x32>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8004818:	691a      	ldr	r2, [r3, #16]
 800481a:	2a00      	cmp	r2, #0
 800481c:	d0bc      	beq.n	8004798 <RCM_RegisterRegConv+0x1d0>
 800481e:	790c      	ldrb	r4, [r1, #4]
 8004820:	e6fb      	b.n	800461a <RCM_RegisterRegConv+0x52>
  uint8_t i=0;
 8004822:	4610      	mov	r0, r2
 8004824:	e78d      	b.n	8004742 <RCM_RegisterRegConv+0x17a>
 8004826:	680a      	ldr	r2, [r1, #0]
 8004828:	e71f      	b.n	800466a <RCM_RegisterRegConv+0xa2>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800482a:	691a      	ldr	r2, [r3, #16]
      i++;
 800482c:	2002      	movs	r0, #2
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800482e:	2a00      	cmp	r2, #0
 8004830:	f47f aef3 	bne.w	800461a <RCM_RegisterRegConv+0x52>
 8004834:	e7b0      	b.n	8004798 <RCM_RegisterRegConv+0x1d0>
 8004836:	bf00      	nop
 8004838:	20000cc4 	.word	0x20000cc4
 800483c:	20000c80 	.word	0x20000c80

08004840 <RCM_ExecRegularConv>:
 * There is no issue to execute regular conversion asynchronously.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 8004840:	b430      	push	{r4, r5}
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8004842:	4b1b      	ldr	r3, [pc, #108]	; (80048b0 <RCM_ExecRegularConv+0x70>)
 8004844:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8004848:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800484a:	6812      	ldr	r2, [r2, #0]
 800484c:	2b09      	cmp	r3, #9
 800484e:	d827      	bhi.n	80048a0 <RCM_ExecRegularConv+0x60>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8004850:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8004854:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8004858:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800485c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004860:	fa91 f1a1 	rbit	r1, r1
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8004864:	f44f 7500 	mov.w	r5, #512	; 0x200
 8004868:	fab1 f181 	clz	r1, r1
 800486c:	40cd      	lsrs	r5, r1
 800486e:	f102 042c 	add.w	r4, r2, #44	; 0x2c
  MODIFY_REG(*preg,
 8004872:	f003 031f 	and.w	r3, r3, #31
 8004876:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800487a:	f020 001f 	bic.w	r0, r0, #31
 800487e:	4303      	orrs	r3, r0

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 8004880:	0151      	lsls	r1, r2, #5
 8004882:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
 8004886:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 800488a:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800488c:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 800488e:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8004892:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8004894:	079b      	lsls	r3, r3, #30
 8004896:	d5fc      	bpl.n	8004892 <RCM_ExecRegularConv+0x52>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8004898:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
return retVal;
}
 800489a:	bc30      	pop	{r4, r5}
 800489c:	b280      	uxth	r0, r0
 800489e:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80048a0:	2103      	movs	r1, #3
 80048a2:	f06f 001d 	mvn.w	r0, #29
 80048a6:	fb11 0103 	smlabb	r1, r1, r3, r0
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80048aa:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 80048ae:	e7d5      	b.n	800485c <RCM_ExecRegularConv+0x1c>
 80048b0:	20000cc4 	.word	0x20000cc4

080048b4 <RCM_RequestUserConv>:
 * @return true if the regular conversion could be scheduled and false otherwise.
 */
bool RCM_RequestUserConv(uint8_t handle)
{
  bool retVal = false;
  if (RCM_UserConvState == RCM_USERCONV_IDLE)
 80048b4:	4a05      	ldr	r2, [pc, #20]	; (80048cc <RCM_RequestUserConv+0x18>)
 80048b6:	7813      	ldrb	r3, [r2, #0]
 80048b8:	b92b      	cbnz	r3, 80048c6 <RCM_RequestUserConv+0x12>
  {
    RCM_UserConvHandle = handle;
 80048ba:	4905      	ldr	r1, [pc, #20]	; (80048d0 <RCM_RequestUserConv+0x1c>)
    /* must be done last so that RCM_UserConvHandle already has the right value */
    RCM_UserConvState = RCM_USERCONV_REQUESTED;
 80048bc:	2301      	movs	r3, #1
    RCM_UserConvHandle = handle;
 80048be:	7008      	strb	r0, [r1, #0]
    RCM_UserConvState = RCM_USERCONV_REQUESTED;
 80048c0:	7013      	strb	r3, [r2, #0]
    retVal = true;
 80048c2:	4618      	mov	r0, r3
 80048c4:	4770      	bx	lr
  bool retVal = false;
 80048c6:	2000      	movs	r0, #0
  }
  return retVal;
}
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	20000cc0 	.word	0x20000cc0
 80048d0:	20000c7c 	.word	0x20000c7c

080048d4 <RCM_GetUserConv>:
 * @retval uint16_t The converted value or 0xFFFF in case of conversion error.
 */
uint16_t RCM_GetUserConv(void)
{
  uint16_t hRetVal = 0xFFFFu;
  if (RCM_UserConvState == RCM_USERCONV_EOC)
 80048d4:	4b05      	ldr	r3, [pc, #20]	; (80048ec <RCM_GetUserConv+0x18>)
 80048d6:	781a      	ldrb	r2, [r3, #0]
 80048d8:	2a02      	cmp	r2, #2
 80048da:	d002      	beq.n	80048e2 <RCM_GetUserConv+0xe>
  uint16_t hRetVal = 0xFFFFu;
 80048dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
  {
    hRetVal = RCM_UserConvValue;
    RCM_UserConvState = RCM_USERCONV_IDLE;
  }
  return hRetVal;
}
 80048e0:	4770      	bx	lr
    hRetVal = RCM_UserConvValue;
 80048e2:	4903      	ldr	r1, [pc, #12]	; (80048f0 <RCM_GetUserConv+0x1c>)
    RCM_UserConvState = RCM_USERCONV_IDLE;
 80048e4:	2200      	movs	r2, #0
    hRetVal = RCM_UserConvValue;
 80048e6:	8808      	ldrh	r0, [r1, #0]
    RCM_UserConvState = RCM_USERCONV_IDLE;
 80048e8:	701a      	strb	r2, [r3, #0]
 80048ea:	4770      	bx	lr
 80048ec:	20000cc0 	.word	0x20000cc0
 80048f0:	20000ce4 	.word	0x20000ce4

080048f4 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 80048f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 80048f8:	4c0f      	ldr	r4, [pc, #60]	; (8004938 <RCM_ExecUserConv+0x44>)
 80048fa:	7823      	ldrb	r3, [r4, #0]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d001      	beq.n	8004904 <RCM_ExecUserConv+0x10>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8004900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8004904:	4d0d      	ldr	r5, [pc, #52]	; (800493c <RCM_ExecUserConv+0x48>)
 8004906:	4f0e      	ldr	r7, [pc, #56]	; (8004940 <RCM_ExecUserConv+0x4c>)
 8004908:	7828      	ldrb	r0, [r5, #0]
 800490a:	f7ff ff99 	bl	8004840 <RCM_ExecRegularConv>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 800490e:	782d      	ldrb	r5, [r5, #0]
 8004910:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <RCM_ExecUserConv+0x50>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8004912:	8038      	strh	r0, [r7, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8004914:	f853 6035 	ldr.w	r6, [r3, r5, lsl #3]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8004918:	2202      	movs	r2, #2
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 800491a:	4601      	mov	r1, r0
    RCM_UserConvState = RCM_USERCONV_EOC;
 800491c:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 800491e:	2e00      	cmp	r6, #0
 8004920:	d0ee      	beq.n	8004900 <RCM_ExecUserConv+0xc>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8004922:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8004926:	2000      	movs	r0, #0
 8004928:	7020      	strb	r0, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	4628      	mov	r0, r5
 800492e:	4633      	mov	r3, r6
}
 8004930:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8004934:	4718      	bx	r3
 8004936:	bf00      	nop
 8004938:	20000cc0 	.word	0x20000cc0
 800493c:	20000c7c 	.word	0x20000c7c
 8004940:	20000ce4 	.word	0x20000ce4
 8004944:	20000c80 	.word	0x20000c80

08004948 <RCM_GetUserConvState>:
 *
 * @retval The state of the last user-defined regular conversion.
 */
RCM_UserConvState_t RCM_GetUserConvState(void)
{
  return RCM_UserConvState;
 8004948:	4b01      	ldr	r3, [pc, #4]	; (8004950 <RCM_GetUserConvState+0x8>)
}
 800494a:	7818      	ldrb	r0, [r3, #0]
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	20000cc0 	.word	0x20000cc0

08004954 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004954:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004956:	4b0d      	ldr	r3, [pc, #52]	; (800498c <HAL_MspInit+0x38>)
 8004958:	2100      	movs	r1, #0
 800495a:	9100      	str	r1, [sp, #0]
 800495c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800495e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004962:	645a      	str	r2, [r3, #68]	; 0x44
 8004964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004966:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800496a:	9200      	str	r2, [sp, #0]
 800496c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800496e:	9101      	str	r1, [sp, #4]
 8004970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004972:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004976:	641a      	str	r2, [r3, #64]	; 0x40
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497e:	9301      	str	r3, [sp, #4]
 8004980:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8004982:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004984:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8004986:	f001 bc89 	b.w	800629c <HAL_NVIC_SetPriorityGrouping>
 800498a:	bf00      	nop
 800498c:	40023800 	.word	0x40023800

08004990 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004990:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8004992:	6803      	ldr	r3, [r0, #0]
 8004994:	4a3a      	ldr	r2, [pc, #232]	; (8004a80 <HAL_ADC_MspInit+0xf0>)
{
 8004996:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004998:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 800499a:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800499c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80049a0:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80049a4:	940a      	str	r4, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 80049a6:	d004      	beq.n	80049b2 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80049a8:	4a36      	ldr	r2, [pc, #216]	; (8004a84 <HAL_ADC_MspInit+0xf4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d047      	beq.n	8004a3e <HAL_ADC_MspInit+0xae>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80049ae:	b00d      	add	sp, #52	; 0x34
 80049b0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80049b2:	4b35      	ldr	r3, [pc, #212]	; (8004a88 <HAL_ADC_MspInit+0xf8>)
 80049b4:	9400      	str	r4, [sp, #0]
 80049b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049b8:	4834      	ldr	r0, [pc, #208]	; (8004a8c <HAL_ADC_MspInit+0xfc>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80049ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049be:	645a      	str	r2, [r3, #68]	; 0x44
 80049c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049c2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80049c6:	9200      	str	r2, [sp, #0]
 80049c8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049ca:	9401      	str	r4, [sp, #4]
 80049cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ce:	f042 0204 	orr.w	r2, r2, #4
 80049d2:	631a      	str	r2, [r3, #48]	; 0x30
 80049d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049d6:	f002 0204 	and.w	r2, r2, #4
 80049da:	9201      	str	r2, [sp, #4]
 80049dc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049de:	9402      	str	r4, [sp, #8]
 80049e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049e2:	f042 0201 	orr.w	r2, r2, #1
 80049e6:	631a      	str	r2, [r3, #48]	; 0x30
 80049e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ea:	f002 0201 	and.w	r2, r2, #1
 80049ee:	9202      	str	r2, [sp, #8]
 80049f0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049f2:	9403      	str	r4, [sp, #12]
 80049f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049f6:	f042 0202 	orr.w	r2, r2, #2
 80049fa:	631a      	str	r2, [r3, #48]	; 0x30
 80049fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049fe:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = PHBL_TSENSE_Pin|PHBH_TSENSE_Pin|PHAH_TSENSE_Pin|PHAL_TSENSE_Pin
 8004a06:	223f      	movs	r2, #63	; 0x3f
 8004a08:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a0a:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = PHBL_TSENSE_Pin|PHBH_TSENSE_Pin|PHAH_TSENSE_Pin|PHAL_TSENSE_Pin
 8004a0c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a10:	9d03      	ldr	r5, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a12:	f001 fcbd 	bl	8006390 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DC_ISENSE_Pin|M1_CURR_AMPL_U_Pin|POT2_TEMP_Pin;
 8004a16:	2283      	movs	r2, #131	; 0x83
 8004a18:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a1a:	a906      	add	r1, sp, #24
 8004a1c:	481c      	ldr	r0, [pc, #112]	; (8004a90 <HAL_ADC_MspInit+0x100>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a1e:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = DC_ISENSE_Pin|M1_CURR_AMPL_U_Pin|POT2_TEMP_Pin;
 8004a20:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a24:	f001 fcb4 	bl	8006390 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = POT1_Pin;
 8004a28:	2201      	movs	r2, #1
 8004a2a:	2303      	movs	r3, #3
    HAL_GPIO_Init(POT1_GPIO_Port, &GPIO_InitStruct);
 8004a2c:	4819      	ldr	r0, [pc, #100]	; (8004a94 <HAL_ADC_MspInit+0x104>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2e:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(POT1_GPIO_Port, &GPIO_InitStruct);
 8004a30:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = POT1_Pin;
 8004a32:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(POT1_GPIO_Port, &GPIO_InitStruct);
 8004a36:	f001 fcab 	bl	8006390 <HAL_GPIO_Init>
}
 8004a3a:	b00d      	add	sp, #52	; 0x34
 8004a3c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004a3e:	4b12      	ldr	r3, [pc, #72]	; (8004a88 <HAL_ADC_MspInit+0xf8>)
 8004a40:	9404      	str	r4, [sp, #16]
 8004a42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8004a44:	4812      	ldr	r0, [pc, #72]	; (8004a90 <HAL_ADC_MspInit+0x100>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a4a:	645a      	str	r2, [r3, #68]	; 0x44
 8004a4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a4e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004a52:	9204      	str	r2, [sp, #16]
 8004a54:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a56:	9405      	str	r4, [sp, #20]
 8004a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a5a:	f042 0201 	orr.w	r2, r2, #1
 8004a5e:	631a      	str	r2, [r3, #48]	; 0x30
 8004a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a62:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8004a6a:	2210      	movs	r2, #16
 8004a6c:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8004a6e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8004a70:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a74:	9c05      	ldr	r4, [sp, #20]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8004a76:	f001 fc8b 	bl	8006390 <HAL_GPIO_Init>
}
 8004a7a:	b00d      	add	sp, #52	; 0x34
 8004a7c:	bd30      	pop	{r4, r5, pc}
 8004a7e:	bf00      	nop
 8004a80:	40012000 	.word	0x40012000
 8004a84:	40012100 	.word	0x40012100
 8004a88:	40023800 	.word	0x40023800
 8004a8c:	40020800 	.word	0x40020800
 8004a90:	40020000 	.word	0x40020000
 8004a94:	40020400 	.word	0x40020400

08004a98 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004a98:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcan->Instance==CAN1)
 8004a9a:	6801      	ldr	r1, [r0, #0]
 8004a9c:	4a19      	ldr	r2, [pc, #100]	; (8004b04 <HAL_CAN_MspInit+0x6c>)
{
 8004a9e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aa0:	2300      	movs	r3, #0
  if(hcan->Instance==CAN1)
 8004aa2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aa4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004aa8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004aac:	9306      	str	r3, [sp, #24]
  if(hcan->Instance==CAN1)
 8004aae:	d001      	beq.n	8004ab4 <HAL_CAN_MspInit+0x1c>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004ab0:	b009      	add	sp, #36	; 0x24
 8004ab2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004ab4:	f502 32ea 	add.w	r2, r2, #119808	; 0x1d400
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004abc:	4812      	ldr	r0, [pc, #72]	; (8004b08 <HAL_CAN_MspInit+0x70>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004abe:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8004ac2:	6411      	str	r1, [r2, #64]	; 0x40
 8004ac4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004ac6:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
 8004aca:	9100      	str	r1, [sp, #0]
 8004acc:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ace:	9301      	str	r3, [sp, #4]
 8004ad0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004ad2:	f043 0302 	orr.w	r3, r3, #2
 8004ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8004ad8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004ae0:	2309      	movs	r3, #9
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ae2:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004ae4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aea:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004aec:	f44f 7440 	mov.w	r4, #768	; 0x300
 8004af0:	2502      	movs	r5, #2
 8004af2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004af6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004afa:	f001 fc49 	bl	8006390 <HAL_GPIO_Init>
}
 8004afe:	b009      	add	sp, #36	; 0x24
 8004b00:	bd30      	pop	{r4, r5, pc}
 8004b02:	bf00      	nop
 8004b04:	40006400 	.word	0x40006400
 8004b08:	40020400 	.word	0x40020400

08004b0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b0c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8004b0e:	6802      	ldr	r2, [r0, #0]
 8004b10:	4920      	ldr	r1, [pc, #128]	; (8004b94 <HAL_TIM_Base_MspInit+0x88>)
{
 8004b12:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b14:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 8004b16:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b18:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004b1c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8004b20:	9308      	str	r3, [sp, #32]
  if(htim_base->Instance==TIM1)
 8004b22:	d012      	beq.n	8004b4a <HAL_TIM_Base_MspInit+0x3e>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8004b24:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004b28:	d001      	beq.n	8004b2e <HAL_TIM_Base_MspInit+0x22>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004b2a:	b00b      	add	sp, #44	; 0x2c
 8004b2c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b2e:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8004b32:	9303      	str	r3, [sp, #12]
 8004b34:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004b36:	f043 0301 	orr.w	r3, r3, #1
 8004b3a:	6413      	str	r3, [r2, #64]	; 0x40
 8004b3c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	9303      	str	r3, [sp, #12]
 8004b44:	9b03      	ldr	r3, [sp, #12]
}
 8004b46:	b00b      	add	sp, #44	; 0x2c
 8004b48:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004b4a:	4a13      	ldr	r2, [pc, #76]	; (8004b98 <HAL_TIM_Base_MspInit+0x8c>)
 8004b4c:	9301      	str	r3, [sp, #4]
 8004b4e:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8004b50:	4812      	ldr	r0, [pc, #72]	; (8004b9c <HAL_TIM_Base_MspInit+0x90>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004b52:	f041 0101 	orr.w	r1, r1, #1
 8004b56:	6451      	str	r1, [r2, #68]	; 0x44
 8004b58:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004b5a:	f001 0101 	and.w	r1, r1, #1
 8004b5e:	9101      	str	r1, [sp, #4]
 8004b60:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b62:	9302      	str	r3, [sp, #8]
 8004b64:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004b66:	f043 0301 	orr.w	r3, r3, #1
 8004b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8004b6c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004b74:	2301      	movs	r3, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b76:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004b78:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8004b7e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8004b80:	2440      	movs	r4, #64	; 0x40
 8004b82:	2502      	movs	r5, #2
 8004b84:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8004b88:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8004b8c:	f001 fc00 	bl	8006390 <HAL_GPIO_Init>
}
 8004b90:	b00b      	add	sp, #44	; 0x2c
 8004b92:	bd30      	pop	{r4, r5, pc}
 8004b94:	40010000 	.word	0x40010000
 8004b98:	40023800 	.word	0x40023800
 8004b9c:	40020000 	.word	0x40020000

08004ba0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004ba0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8004ba2:	6801      	ldr	r1, [r0, #0]
 8004ba4:	4a1f      	ldr	r2, [pc, #124]	; (8004c24 <HAL_TIM_MspPostInit+0x84>)
{
 8004ba6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ba8:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8004baa:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bac:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004bb0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004bb4:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 8004bb6:	d001      	beq.n	8004bbc <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004bb8:	b008      	add	sp, #32
 8004bba:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bbc:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bc4:	4818      	ldr	r0, [pc, #96]	; (8004c28 <HAL_TIM_MspPostInit+0x88>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bc6:	f041 0102 	orr.w	r1, r1, #2
 8004bca:	6311      	str	r1, [r2, #48]	; 0x30
 8004bcc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004bce:	f001 0102 	and.w	r1, r1, #2
 8004bd2:	9100      	str	r1, [sp, #0]
 8004bd4:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bd6:	9301      	str	r3, [sp, #4]
 8004bd8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004bda:	f043 0301 	orr.w	r3, r3, #1
 8004bde:	6313      	str	r3, [r2, #48]	; 0x30
 8004be0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	9301      	str	r3, [sp, #4]
 8004be8:	9901      	ldr	r1, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8004bea:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8004bee:	2302      	movs	r3, #2
 8004bf0:	2402      	movs	r4, #2
 8004bf2:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004bf4:	2601      	movs	r6, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bf6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8004bf8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004bfc:	e9cd 4504 	strd	r4, r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004c00:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c02:	f001 fbc5 	bl	8006390 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8004c06:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004c0a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c0c:	4807      	ldr	r0, [pc, #28]	; (8004c2c <HAL_TIM_MspPostInit+0x8c>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004c0e:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c10:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8004c12:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8004c16:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c1a:	f001 fbb9 	bl	8006390 <HAL_GPIO_Init>
}
 8004c1e:	b008      	add	sp, #32
 8004c20:	bd70      	pop	{r4, r5, r6, pc}
 8004c22:	bf00      	nop
 8004c24:	40010000 	.word	0x40010000
 8004c28:	40020400 	.word	0x40020400
 8004c2c:	40020000 	.word	0x40020000

08004c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c30:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8004c32:	6801      	ldr	r1, [r0, #0]
 8004c34:	4a18      	ldr	r2, [pc, #96]	; (8004c98 <HAL_UART_MspInit+0x68>)
{
 8004c36:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c38:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 8004c3a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c3c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004c40:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004c44:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART2)
 8004c46:	d001      	beq.n	8004c4c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004c48:	b009      	add	sp, #36	; 0x24
 8004c4a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c4c:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c54:	4811      	ldr	r0, [pc, #68]	; (8004c9c <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c56:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004c5a:	6411      	str	r1, [r2, #64]	; 0x40
 8004c5c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004c5e:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
 8004c62:	9100      	str	r1, [sp, #0]
 8004c64:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c66:	9301      	str	r3, [sp, #4]
 8004c68:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004c6a:	f043 0301 	orr.w	r3, r3, #1
 8004c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8004c70:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004c78:	2307      	movs	r3, #7
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c7a:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004c7c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c82:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8004c84:	240c      	movs	r4, #12
 8004c86:	2502      	movs	r5, #2
 8004c88:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004c8c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c90:	f001 fb7e 	bl	8006390 <HAL_GPIO_Init>
}
 8004c94:	b009      	add	sp, #36	; 0x24
 8004c96:	bd30      	pop	{r4, r5, pc}
 8004c98:	40004400 	.word	0x40004400
 8004c9c:	40020000 	.word	0x40020000

08004ca0 <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8004ca0:	4b08      	ldr	r3, [pc, #32]	; (8004cc4 <ADC_IRQHandler+0x24>)
 8004ca2:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 8004ca4:	0752      	lsls	r2, r2, #29
 8004ca6:	d505      	bpl.n	8004cb4 <ADC_IRQHandler+0x14>
  {
    // Clear Flags
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	f022 020c 	bic.w	r2, r2, #12
 8004cae:	601a      	str	r2, [r3, #0]

    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 8004cb0:	f7fe bf72 	b.w	8003b98 <TSK_HighFrequencyTask>
  }
#ifdef ADC3
  else
  {
    // Clear Flags
    ADC3->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8004cb4:	4a04      	ldr	r2, [pc, #16]	; (8004cc8 <ADC_IRQHandler+0x28>)
 8004cb6:	6813      	ldr	r3, [r2, #0]
 8004cb8:	f023 030c 	bic.w	r3, r3, #12
 8004cbc:	6013      	str	r3, [r2, #0]

    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 8004cbe:	f7fe bf6b 	b.w	8003b98 <TSK_HighFrequencyTask>
 8004cc2:	bf00      	nop
 8004cc4:	40012000 	.word	0x40012000
 8004cc8:	40012200 	.word	0x40012200

08004ccc <TIM1_UP_TIM10_IRQHandler>:
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 8004ccc:	4803      	ldr	r0, [pc, #12]	; (8004cdc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004cce:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8004cd0:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004cd2:	f06f 0201 	mvn.w	r2, #1
 8004cd6:	611a      	str	r2, [r3, #16]
  ICS_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8004cd8:	f002 bf20 	b.w	8007b1c <ICS_TIMx_UP_IRQHandler>
 8004cdc:	2000028c 	.word	0x2000028c

08004ce0 <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8004ce0:	4807      	ldr	r0, [pc, #28]	; (8004d00 <TIM1_BRK_TIM9_IRQHandler+0x20>)
{
 8004ce2:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8004ce4:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8004ce6:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8004ce8:	691a      	ldr	r2, [r3, #16]
 8004cea:	0612      	lsls	r2, r2, #24
 8004cec:	d504      	bpl.n	8004cf8 <TIM1_BRK_TIM9_IRQHandler+0x18>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8004cee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cf2:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    ICS_BRK_IRQHandler(&PWM_Handle_M1);
 8004cf4:	f002 ff5c 	bl	8007bb0 <ICS_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8004cf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8004cfc:	f7fe bf20 	b.w	8003b40 <MC_Scheduler>
 8004d00:	2000028c 	.word	0x2000028c

08004d04 <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8004d04:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8004d06:	4c1f      	ldr	r4, [pc, #124]	; (8004d84 <USART2_IRQHandler+0x80>)
 8004d08:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	0691      	lsls	r1, r2, #26
{
 8004d10:	b082      	sub	sp, #8
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8004d12:	d407      	bmi.n	8004d24 <USART2_IRQHandler+0x20>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8004d14:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8004d16:	0612      	lsls	r2, r2, #24
 8004d18:	d413      	bmi.n	8004d42 <USART2_IRQHandler+0x3e>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8004d1a:	681b      	ldr	r3, [r3, #0]
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8004d1c:	071b      	lsls	r3, r3, #28
 8004d1e:	d418      	bmi.n	8004d52 <USART2_IRQHandler+0x4e>
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8004d20:	b002      	add	sp, #8
 8004d22:	bd10      	pop	{r4, pc}
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8004d24:	6859      	ldr	r1, [r3, #4]
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 8004d26:	4620      	mov	r0, r4
 8004d28:	b2c9      	uxtb	r1, r1
 8004d2a:	f003 fd95 	bl	8008858 <UFCP_RX_IRQ_Handler>
 8004d2e:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d021      	beq.n	8004d78 <USART2_IRQHandler+0x74>
    if (retVal == 2)
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d01c      	beq.n	8004d72 <USART2_IRQHandler+0x6e>
 8004d38:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8004d3c:	681a      	ldr	r2, [r3, #0]
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8004d3e:	0612      	lsls	r2, r2, #24
 8004d40:	d5eb      	bpl.n	8004d1a <USART2_IRQHandler+0x16>
    UFCP_TX_IRQ_Handler(&pUSART);
 8004d42:	4810      	ldr	r0, [pc, #64]	; (8004d84 <USART2_IRQHandler+0x80>)
 8004d44:	f003 fce4 	bl	8008710 <UFCP_TX_IRQ_Handler>
 8004d48:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8004d4c:	681b      	ldr	r3, [r3, #0]
  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8004d4e:	071b      	lsls	r3, r3, #28
 8004d50:	d5e6      	bpl.n	8004d20 <USART2_IRQHandler+0x1c>
    UFCP_OVR_IRQ_Handler(&pUSART);
 8004d52:	480c      	ldr	r0, [pc, #48]	; (8004d84 <USART2_IRQHandler+0x80>)
 8004d54:	f003 fde6 	bl	8008924 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8004d58:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8004d60:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8004d66:	9b01      	ldr	r3, [sp, #4]
}
 8004d68:	b002      	add	sp, #8
 8004d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UI_SerialCommunicationTimeOutStop();
 8004d6e:	f000 b8e5 	b.w	8004f3c <UI_SerialCommunicationTimeOutStop>
      UI_SerialCommunicationTimeOutStop();
 8004d72:	f000 f8e3 	bl	8004f3c <UI_SerialCommunicationTimeOutStop>
 8004d76:	e7df      	b.n	8004d38 <USART2_IRQHandler+0x34>
      UI_SerialCommunicationTimeOutStart();
 8004d78:	f000 f8e6 	bl	8004f48 <UI_SerialCommunicationTimeOutStart>
    if (retVal == 2)
 8004d7c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004d80:	e7c8      	b.n	8004d14 <USART2_IRQHandler+0x10>
 8004d82:	bf00      	nop
 8004d84:	20000588 	.word	0x20000588

08004d88 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004d88:	b530      	push	{r4, r5, lr}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	4c1c      	ldr	r4, [pc, #112]	; (8004e00 <HardFault_Handler+0x78>)
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8004d8e:	f7ff f83b 	bl	8003e08 <TSK_HardwareFaultTask>
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 8004d92:	4625      	mov	r5, r4
 8004d94:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8004d98:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8004d9a:	0712      	lsls	r2, r2, #28
 8004d9c:	d41d      	bmi.n	8004dda <HardFault_Handler+0x52>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8004d9e:	681a      	ldr	r2, [r3, #0]
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
        UI_SerialCommunicationTimeOutStop();
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8004da0:	0610      	lsls	r0, r2, #24
 8004da2:	d40f      	bmi.n	8004dc4 <HardFault_Handler+0x3c>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8004da4:	681a      	ldr	r2, [r3, #0]
      {
        UFCP_TX_IRQ_Handler(&pUSART);
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8004da6:	0692      	lsls	r2, r2, #26
 8004da8:	d5f6      	bpl.n	8004d98 <HardFault_Handler+0x10>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8004daa:	6859      	ldr	r1, [r3, #4]
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8004dac:	4628      	mov	r0, r5
 8004dae:	b2c9      	uxtb	r1, r1
 8004db0:	f003 fd52 	bl	8008858 <UFCP_RX_IRQ_Handler>
 8004db4:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d01f      	beq.n	8004dfa <HardFault_Handler+0x72>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d1ea      	bne.n	8004d94 <HardFault_Handler+0xc>
        {
          UI_SerialCommunicationTimeOutStop();
 8004dbe:	f000 f8bd 	bl	8004f3c <UI_SerialCommunicationTimeOutStop>
 8004dc2:	e7e7      	b.n	8004d94 <HardFault_Handler+0xc>
        UFCP_TX_IRQ_Handler(&pUSART);
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	f003 fca3 	bl	8008710 <UFCP_TX_IRQ_Handler>
 8004dca:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8004dce:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8004dd0:	0691      	lsls	r1, r2, #26
 8004dd2:	d4ea      	bmi.n	8004daa <HardFault_Handler+0x22>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8004dd4:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8004dd6:	0712      	lsls	r2, r2, #28
 8004dd8:	d5e1      	bpl.n	8004d9e <HardFault_Handler+0x16>
        UFCP_OVR_IRQ_Handler(&pUSART);
 8004dda:	4628      	mov	r0, r5
 8004ddc:	f003 fda2 	bl	8008924 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8004de0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8004de8:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8004dee:	9b01      	ldr	r3, [sp, #4]
        UI_SerialCommunicationTimeOutStop();
 8004df0:	f000 f8a4 	bl	8004f3c <UI_SerialCommunicationTimeOutStop>
 8004df4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004df8:	e7d1      	b.n	8004d9e <HardFault_Handler+0x16>
          UI_SerialCommunicationTimeOutStart();
 8004dfa:	f000 f8a5 	bl	8004f48 <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 8004dfe:	e7c9      	b.n	8004d94 <HardFault_Handler+0xc>
 8004e00:	20000588 	.word	0x20000588

08004e04 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8004e04:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8004e06:	4c0a      	ldr	r4, [pc, #40]	; (8004e30 <SysTick_Handler+0x2c>)
 8004e08:	7823      	ldrb	r3, [r4, #0]
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d006      	beq.n	8004e1c <SysTick_Handler+0x18>
 8004e0e:	3301      	adds	r3, #1
 8004e10:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8004e12:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8004e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8004e18:	f7fe bfe6 	b.w	8003de8 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8004e1c:	f000 fdf6 	bl	8005a0c <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8004e20:	f001 fab2 	bl	8006388 <HAL_SYSTICK_IRQHandler>
 8004e24:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8004e26:	7023      	strb	r3, [r4, #0]
}
 8004e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8004e2c:	f7fe bfdc 	b.w	8003de8 <MC_RunMotorControlTasks>
 8004e30:	200006c8 	.word	0x200006c8

08004e34 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e34:	490c      	ldr	r1, [pc, #48]	; (8004e68 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e36:	4a0d      	ldr	r2, [pc, #52]	; (8004e6c <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8004e38:	680b      	ldr	r3, [r1, #0]
{
 8004e3a:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e3c:	4c0c      	ldr	r4, [pc, #48]	; (8004e70 <_sbrk+0x3c>)
 8004e3e:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8004e40:	b12b      	cbz	r3, 8004e4e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e42:	4418      	add	r0, r3
 8004e44:	4290      	cmp	r0, r2
 8004e46:	d807      	bhi.n	8004e58 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004e48:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8004e4e:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <_sbrk+0x40>)
 8004e50:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8004e52:	4418      	add	r0, r3
 8004e54:	4290      	cmp	r0, r2
 8004e56:	d9f7      	bls.n	8004e48 <_sbrk+0x14>
    errno = ENOMEM;
 8004e58:	f004 fb36 	bl	80094c8 <__errno>
 8004e5c:	230c      	movs	r3, #12
 8004e5e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004e60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	bd10      	pop	{r4, pc}
 8004e68:	200007a4 	.word	0x200007a4
 8004e6c:	20020000 	.word	0x20020000
 8004e70:	00000400 	.word	0x00000400
 8004e74:	20000db0 	.word	0x20000db0

08004e78 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8004e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    pMCP = &MCP_UI_Params;
    pMCP->_Super = UI_Params;
 8004e7c:	4d17      	ldr	r5, [pc, #92]	; (8004edc <UI_TaskInit+0x64>)
    pMCP = &MCP_UI_Params;
 8004e7e:	f8df c070 	ldr.w	ip, [pc, #112]	; 8004ef0 <UI_TaskInit+0x78>

    UFCP_Init( & pUSART );
 8004e82:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8004ef4 <UI_TaskInit+0x7c>
{
 8004e86:	468e      	mov	lr, r1
 8004e88:	4681      	mov	r9, r0
 8004e8a:	4616      	mov	r6, r2
 8004e8c:	461f      	mov	r7, r3
    pMCP->_Super = UI_Params;
 8004e8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e90:	4664      	mov	r4, ip
 8004e92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e94:	e895 0003 	ldmia.w	r5, {r0, r1}
{
 8004e98:	b082      	sub	sp, #8
    pMCP = &MCP_UI_Params;
 8004e9a:	4d11      	ldr	r5, [pc, #68]	; (8004ee0 <UI_TaskInit+0x68>)
{
 8004e9c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    pMCP = &MCP_UI_Params;
 8004ea0:	f8c5 c000 	str.w	ip, [r5]
    pMCP->_Super = UI_Params;
 8004ea4:	e884 0003 	stmia.w	r4, {r0, r1}
    UFCP_Init( & pUSART );
 8004ea8:	4640      	mov	r0, r8
{
 8004eaa:	4674      	mov	r4, lr
    UFCP_Init( & pUSART );
 8004eac:	f003 fc2e 	bl	800870c <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 8004eb0:	f8cd a004 	str.w	sl, [sp, #4]
 8004eb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ee4 <UI_TaskInit+0x6c>)
 8004eb6:	6828      	ldr	r0, [r5, #0]
 8004eb8:	4a0b      	ldr	r2, [pc, #44]	; (8004ee8 <UI_TaskInit+0x70>)
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	4641      	mov	r1, r8
 8004ebe:	4b0b      	ldr	r3, [pc, #44]	; (8004eec <UI_TaskInit+0x74>)
 8004ec0:	f7ff fb34 	bl	800452c <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8004ec4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8004ec8:	6828      	ldr	r0, [r5, #0]
 8004eca:	463b      	mov	r3, r7
 8004ecc:	4632      	mov	r2, r6
 8004ece:	4621      	mov	r1, r4

}
 8004ed0:	b002      	add	sp, #8
 8004ed2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8004ed6:	f000 b83d 	b.w	8004f54 <UI_Init>
 8004eda:	bf00      	nop
 8004edc:	2000077c 	.word	0x2000077c
 8004ee0:	200007ac 	.word	0x200007ac
 8004ee4:	08008941 	.word	0x08008941
 8004ee8:	0800879d 	.word	0x0800879d
 8004eec:	08008771 	.word	0x08008771
 8004ef0:	20000ce8 	.word	0x20000ce8
 8004ef4:	20000588 	.word	0x20000588

08004ef8 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8004ef8:	4a0d      	ldr	r2, [pc, #52]	; (8004f30 <UI_Scheduler+0x38>)
 8004efa:	8813      	ldrh	r3, [r2, #0]
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	b11b      	cbz	r3, 8004f08 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8004f00:	8813      	ldrh	r3, [r2, #0]
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8004f08:	4a0a      	ldr	r2, [pc, #40]	; (8004f34 <UI_Scheduler+0x3c>)
 8004f0a:	8813      	ldrh	r3, [r2, #0]
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d903      	bls.n	8004f1a <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 8004f12:	8813      	ldrh	r3, [r2, #0]
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8004f1a:	4a07      	ldr	r2, [pc, #28]	; (8004f38 <UI_Scheduler+0x40>)
 8004f1c:	8813      	ldrh	r3, [r2, #0]
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d903      	bls.n	8004f2c <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 8004f24:	8813      	ldrh	r3, [r2, #0]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	8013      	strh	r3, [r2, #0]
  }
}
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	200007aa 	.word	0x200007aa
 8004f34:	200007a8 	.word	0x200007a8
 8004f38:	200006ca 	.word	0x200006ca

08004f3c <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8004f3c:	4b01      	ldr	r3, [pc, #4]	; (8004f44 <UI_SerialCommunicationTimeOutStop+0x8>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	801a      	strh	r2, [r3, #0]
}
 8004f42:	4770      	bx	lr
 8004f44:	200007a8 	.word	0x200007a8

08004f48 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8004f48:	4b01      	ldr	r3, [pc, #4]	; (8004f50 <UI_SerialCommunicationTimeOutStart+0x8>)
 8004f4a:	224f      	movs	r2, #79	; 0x4f
 8004f4c:	801a      	strh	r2, [r3, #0]
}
 8004f4e:	4770      	bx	lr
 8004f50:	200007a8 	.word	0x200007a8

08004f54 <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  * @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 8004f54:	b430      	push	{r4, r5}
 8004f56:	9c02      	ldr	r4, [sp, #8]
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 8004f58:	6104      	str	r4, [r0, #16]
  pHandle->bSelectedDrive = 0u;
 8004f5a:	2500      	movs	r5, #0
 8004f5c:	7505      	strb	r5, [r0, #20]
  pHandle->pMCT = pMCT;
 8004f5e:	e9c0 2302 	strd	r2, r3, [r0, #8]
}
 8004f62:	bc30      	pop	{r4, r5}
  pHandle->bDriveNum = bMCNum;
 8004f64:	7101      	strb	r1, [r0, #4]
}
 8004f66:	4770      	bx	lr

08004f68 <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 8004f68:	7903      	ldrb	r3, [r0, #4]
 8004f6a:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8004f6c:	bf86      	itte	hi
 8004f6e:	7501      	strbhi	r1, [r0, #20]
  bool retVal = true;
 8004f70:	2001      	movhi	r0, #1
    retVal = false;
 8004f72:	2000      	movls	r0, #0
  }
  return retVal;
}
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop

08004f78 <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 8004f78:	7d00      	ldrb	r0, [r0, #20]
 8004f7a:	4770      	bx	lr

08004f7c <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8004f7c:	b570      	push	{r4, r5, r6, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8004f7e:	e9d0 5402 	ldrd	r5, r4, [r0, #8]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004f82:	7d03      	ldrb	r3, [r0, #20]
{
 8004f84:	b082      	sub	sp, #8
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004f86:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8004f8a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
{
 8004f8e:	4614      	mov	r4, r2
 8004f90:	295b      	cmp	r1, #91	; 0x5b
 8004f92:	d85d      	bhi.n	8005050 <UI_SetReg+0xd4>
 8004f94:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004f98:	005c006b 	.word	0x005c006b
 8004f9c:	006f005c 	.word	0x006f005c
 8004fa0:	0079005c 	.word	0x0079005c
 8004fa4:	0085007f 	.word	0x0085007f
 8004fa8:	0097008b 	.word	0x0097008b
 8004fac:	00a3009d 	.word	0x00a3009d
 8004fb0:	00b500a9 	.word	0x00b500a9
 8004fb4:	00c100bb 	.word	0x00c100bb
 8004fb8:	00e100c7 	.word	0x00e100c7
 8004fbc:	005c005c 	.word	0x005c005c
 8004fc0:	011700fb 	.word	0x011700fb
 8004fc4:	005c005c 	.word	0x005c005c
 8004fc8:	005c005c 	.word	0x005c005c
 8004fcc:	005c005c 	.word	0x005c005c
 8004fd0:	005c005c 	.word	0x005c005c
 8004fd4:	005c005c 	.word	0x005c005c
 8004fd8:	005c005c 	.word	0x005c005c
 8004fdc:	005c005c 	.word	0x005c005c
 8004fe0:	005c005c 	.word	0x005c005c
 8004fe4:	005c005c 	.word	0x005c005c
 8004fe8:	005c005c 	.word	0x005c005c
 8004fec:	005c005c 	.word	0x005c005c
 8004ff0:	005c005c 	.word	0x005c005c
 8004ff4:	005c005c 	.word	0x005c005c
 8004ff8:	005c005c 	.word	0x005c005c
 8004ffc:	005c005c 	.word	0x005c005c
 8005000:	005c005c 	.word	0x005c005c
 8005004:	005c005c 	.word	0x005c005c
 8005008:	005c005c 	.word	0x005c005c
 800500c:	005c005c 	.word	0x005c005c
 8005010:	005c005c 	.word	0x005c005c
 8005014:	005c005c 	.word	0x005c005c
 8005018:	0133005c 	.word	0x0133005c
 800501c:	005c005c 	.word	0x005c005c
 8005020:	005c005c 	.word	0x005c005c
 8005024:	005c005c 	.word	0x005c005c
 8005028:	005c005c 	.word	0x005c005c
 800502c:	005c005c 	.word	0x005c005c
 8005030:	005c005c 	.word	0x005c005c
 8005034:	005c005c 	.word	0x005c005c
 8005038:	005c005c 	.word	0x005c005c
 800503c:	005c005c 	.word	0x005c005c
 8005040:	005c005c 	.word	0x005c005c
 8005044:	005c005c 	.word	0x005c005c
 8005048:	005c005c 	.word	0x005c005c
 800504c:	005f005c 	.word	0x005f005c
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8005050:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 8005052:	b002      	add	sp, #8
 8005054:	bd70      	pop	{r4, r5, r6, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8005056:	4a7f      	ldr	r2, [pc, #508]	; (8005254 <UI_SetReg+0x2d8>)
 8005058:	fb82 3204 	smull	r3, r2, r2, r4
 800505c:	eba2 74e4 	sub.w	r4, r2, r4, asr #31
 8005060:	4630      	mov	r0, r6
 8005062:	b221      	sxth	r1, r4
 8005064:	2200      	movs	r2, #0
 8005066:	f7fe f871 	bl	800314c <MCI_ExecSpeedRamp>
  bool retVal = true;
 800506a:	2001      	movs	r0, #1
    break;
 800506c:	e7f1      	b.n	8005052 <UI_SetReg+0xd6>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 800506e:	b2e1      	uxtb	r1, r4
 8005070:	f7ff ff7a 	bl	8004f68 <UI_SelectMC>
    break;
 8005074:	e7ed      	b.n	8005052 <UI_SetReg+0xd6>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8005076:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800507a:	f000 80d6 	beq.w	800522a <UI_SetReg+0x2ae>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 800507e:	2c01      	cmp	r4, #1
 8005080:	f000 80dd 	beq.w	800523e <UI_SetReg+0x2c2>
  bool retVal = true;
 8005084:	2001      	movs	r0, #1
}
 8005086:	b002      	add	sp, #8
 8005088:	bd70      	pop	{r4, r5, r6, pc}
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 800508a:	6828      	ldr	r0, [r5, #0]
 800508c:	b221      	sxth	r1, r4
 800508e:	f002 fe45 	bl	8007d1c <PID_SetKP>
  bool retVal = true;
 8005092:	2001      	movs	r0, #1
    break;
 8005094:	e7dd      	b.n	8005052 <UI_SetReg+0xd6>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8005096:	6828      	ldr	r0, [r5, #0]
 8005098:	b221      	sxth	r1, r4
 800509a:	f002 fe41 	bl	8007d20 <PID_SetKI>
  bool retVal = true;
 800509e:	2001      	movs	r0, #1
    break;
 80050a0:	e7d7      	b.n	8005052 <UI_SetReg+0xd6>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 80050a2:	6828      	ldr	r0, [r5, #0]
 80050a4:	b221      	sxth	r1, r4
 80050a6:	f002 fe4b 	bl	8007d40 <PID_SetKD>
  bool retVal = true;
 80050aa:	2001      	movs	r0, #1
    break;
 80050ac:	e7d1      	b.n	8005052 <UI_SetReg+0xd6>
      currComp = MCI_GetIqdref(pMCI);
 80050ae:	4630      	mov	r0, r6
 80050b0:	f7fe f934 	bl	800331c <MCI_GetIqdref>
 80050b4:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 80050b6:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 80050ba:	4630      	mov	r0, r6
 80050bc:	9901      	ldr	r1, [sp, #4]
 80050be:	f7fe f85b 	bl	8003178 <MCI_SetCurrentReferences>
  bool retVal = true;
 80050c2:	2001      	movs	r0, #1
    break;
 80050c4:	e7c5      	b.n	8005052 <UI_SetReg+0xd6>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 80050c6:	6868      	ldr	r0, [r5, #4]
 80050c8:	b221      	sxth	r1, r4
 80050ca:	f002 fe27 	bl	8007d1c <PID_SetKP>
  bool retVal = true;
 80050ce:	2001      	movs	r0, #1
    break;
 80050d0:	e7bf      	b.n	8005052 <UI_SetReg+0xd6>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 80050d2:	6868      	ldr	r0, [r5, #4]
 80050d4:	b221      	sxth	r1, r4
 80050d6:	f002 fe23 	bl	8007d20 <PID_SetKI>
  bool retVal = true;
 80050da:	2001      	movs	r0, #1
    break;
 80050dc:	e7b9      	b.n	8005052 <UI_SetReg+0xd6>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 80050de:	6868      	ldr	r0, [r5, #4]
 80050e0:	b221      	sxth	r1, r4
 80050e2:	f002 fe2d 	bl	8007d40 <PID_SetKD>
  bool retVal = true;
 80050e6:	2001      	movs	r0, #1
    break;
 80050e8:	e7b3      	b.n	8005052 <UI_SetReg+0xd6>
      currComp = MCI_GetIqdref(pMCI);
 80050ea:	4630      	mov	r0, r6
 80050ec:	f7fe f916 	bl	800331c <MCI_GetIqdref>
 80050f0:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 80050f2:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 80050f6:	4630      	mov	r0, r6
 80050f8:	9901      	ldr	r1, [sp, #4]
 80050fa:	f7fe f83d 	bl	8003178 <MCI_SetCurrentReferences>
  bool retVal = true;
 80050fe:	2001      	movs	r0, #1
    break;
 8005100:	e7a7      	b.n	8005052 <UI_SetReg+0xd6>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8005102:	68a8      	ldr	r0, [r5, #8]
 8005104:	b221      	sxth	r1, r4
 8005106:	f002 fe09 	bl	8007d1c <PID_SetKP>
  bool retVal = true;
 800510a:	2001      	movs	r0, #1
    break;
 800510c:	e7a1      	b.n	8005052 <UI_SetReg+0xd6>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 800510e:	68a8      	ldr	r0, [r5, #8]
 8005110:	b221      	sxth	r1, r4
 8005112:	f002 fe05 	bl	8007d20 <PID_SetKI>
  bool retVal = true;
 8005116:	2001      	movs	r0, #1
    break;
 8005118:	e79b      	b.n	8005052 <UI_SetReg+0xd6>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 800511a:	68a8      	ldr	r0, [r5, #8]
 800511c:	b221      	sxth	r1, r4
 800511e:	f002 fe0f 	bl	8007d40 <PID_SetKD>
  bool retVal = true;
 8005122:	2001      	movs	r0, #1
    break;
 8005124:	e795      	b.n	8005052 <UI_SetReg+0xd6>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8005126:	6902      	ldr	r2, [r0, #16]
 8005128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800512c:	0f1a      	lsrs	r2, r3, #28
 800512e:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005130:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005134:	d06d      	beq.n	8005212 <UI_SetReg+0x296>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005136:	2b09      	cmp	r3, #9
 8005138:	d1a4      	bne.n	8005084 <UI_SetReg+0x108>
        pSPD = pMCT->pSpeedSensorAux;
 800513a:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 800513c:	2e00      	cmp	r6, #0
 800513e:	d0a1      	beq.n	8005084 <UI_SetReg+0x108>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8005140:	aa01      	add	r2, sp, #4
 8005142:	f10d 0102 	add.w	r1, sp, #2
 8005146:	4630      	mov	r0, r6
 8005148:	f004 f970 	bl	800942c <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hC2);
 800514c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8005150:	b221      	sxth	r1, r4
 8005152:	4630      	mov	r0, r6
 8005154:	f004 f972 	bl	800943c <STO_PLL_SetObserverGains>
    break;
 8005158:	e794      	b.n	8005084 <UI_SetReg+0x108>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800515a:	6902      	ldr	r2, [r0, #16]
 800515c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005160:	0f1a      	lsrs	r2, r3, #28
 8005162:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005164:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005168:	d04f      	beq.n	800520a <UI_SetReg+0x28e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800516a:	2b09      	cmp	r3, #9
 800516c:	d18a      	bne.n	8005084 <UI_SetReg+0x108>
        pSPD = pMCT->pSpeedSensorAux;
 800516e:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 8005170:	2e00      	cmp	r6, #0
 8005172:	d087      	beq.n	8005084 <UI_SetReg+0x108>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8005174:	aa01      	add	r2, sp, #4
 8005176:	f10d 0102 	add.w	r1, sp, #2
 800517a:	4630      	mov	r0, r6
 800517c:	f004 f956 	bl	800942c <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,hC1,(int16_t)wValue);
 8005180:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8005184:	b222      	sxth	r2, r4
 8005186:	4630      	mov	r0, r6
 8005188:	f004 f958 	bl	800943c <STO_PLL_SetObserverGains>
    break;
 800518c:	e77a      	b.n	8005084 <UI_SetReg+0x108>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800518e:	6902      	ldr	r2, [r0, #16]
 8005190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005194:	0f1a      	lsrs	r2, r3, #28
 8005196:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005198:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800519c:	d03d      	beq.n	800521a <UI_SetReg+0x29e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800519e:	2b09      	cmp	r3, #9
 80051a0:	f47f af70 	bne.w	8005084 <UI_SetReg+0x108>
        pSPD = pMCT->pSpeedSensorAux;
 80051a4:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 80051a6:	2e00      	cmp	r6, #0
 80051a8:	f43f af6c 	beq.w	8005084 <UI_SetReg+0x108>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 80051ac:	aa01      	add	r2, sp, #4
 80051ae:	f10d 0102 	add.w	r1, sp, #2
 80051b2:	4630      	mov	r0, r6
 80051b4:	f004 f946 	bl	8009444 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,hPgain,(int16_t)wValue);
 80051b8:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 80051bc:	b222      	sxth	r2, r4
 80051be:	4630      	mov	r0, r6
 80051c0:	f004 f94e 	bl	8009460 <STO_SetPLLGains>
    break;
 80051c4:	e75e      	b.n	8005084 <UI_SetReg+0x108>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80051c6:	6902      	ldr	r2, [r0, #16]
 80051c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80051cc:	0f1a      	lsrs	r2, r3, #28
 80051ce:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80051d0:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80051d4:	d025      	beq.n	8005222 <UI_SetReg+0x2a6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80051d6:	2b09      	cmp	r3, #9
 80051d8:	f47f af54 	bne.w	8005084 <UI_SetReg+0x108>
        pSPD = pMCT->pSpeedSensorAux;
 80051dc:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 80051de:	2e00      	cmp	r6, #0
 80051e0:	f43f af50 	beq.w	8005084 <UI_SetReg+0x108>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 80051e4:	aa01      	add	r2, sp, #4
 80051e6:	f10d 0102 	add.w	r1, sp, #2
 80051ea:	4630      	mov	r0, r6
 80051ec:	f004 f92a 	bl	8009444 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hIgain);
 80051f0:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80051f4:	b221      	sxth	r1, r4
 80051f6:	4630      	mov	r0, r6
 80051f8:	f004 f932 	bl	8009460 <STO_SetPLLGains>
    break;
 80051fc:	e742      	b.n	8005084 <UI_SetReg+0x108>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 80051fe:	4630      	mov	r0, r6
 8005200:	b221      	sxth	r1, r4
 8005202:	f7fe f8cd 	bl	80033a0 <MCI_SetIdref>
  bool retVal = true;
 8005206:	2001      	movs	r0, #1
    break;
 8005208:	e723      	b.n	8005052 <UI_SetReg+0xd6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800520a:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 800520c:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800520e:	d1af      	bne.n	8005170 <UI_SetReg+0x1f4>
 8005210:	e7ad      	b.n	800516e <UI_SetReg+0x1f2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005212:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8005214:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005216:	d191      	bne.n	800513c <UI_SetReg+0x1c0>
 8005218:	e78f      	b.n	800513a <UI_SetReg+0x1be>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800521a:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 800521c:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800521e:	d1c2      	bne.n	80051a6 <UI_SetReg+0x22a>
 8005220:	e7c0      	b.n	80051a4 <UI_SetReg+0x228>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005222:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8005224:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005226:	d1da      	bne.n	80051de <UI_SetReg+0x262>
 8005228:	e7d8      	b.n	80051dc <UI_SetReg+0x260>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 800522a:	4630      	mov	r0, r6
 800522c:	f7fe f8a0 	bl	8003370 <MCI_GetTeref>
 8005230:	4622      	mov	r2, r4
 8005232:	4601      	mov	r1, r0
 8005234:	4630      	mov	r0, r6
 8005236:	f7fd ff95 	bl	8003164 <MCI_ExecTorqueRamp>
  bool retVal = true;
 800523a:	2001      	movs	r0, #1
 800523c:	e709      	b.n	8005052 <UI_SetReg+0xd6>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 800523e:	4630      	mov	r0, r6
 8005240:	f7fe f83e 	bl	80032c0 <MCI_GetMecSpeedRefUnit>
 8005244:	2200      	movs	r2, #0
 8005246:	4601      	mov	r1, r0
 8005248:	4630      	mov	r0, r6
 800524a:	f7fd ff7f 	bl	800314c <MCI_ExecSpeedRamp>
  bool retVal = true;
 800524e:	4620      	mov	r0, r4
 8005250:	e6ff      	b.n	8005052 <UI_SetReg+0xd6>
 8005252:	bf00      	nop
 8005254:	2aaaaaab 	.word	0x2aaaaaab

08005258 <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 8005258:	b570      	push	{r4, r5, r6, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800525a:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800525e:	7d03      	ldrb	r3, [r0, #20]
{
 8005260:	b090      	sub	sp, #64	; 0x40
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8005262:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8005266:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]

  int32_t bRetVal = 0;

  if ( success != (bool *) 0 )
 800526a:	2a00      	cmp	r2, #0
 800526c:	f000 8089 	beq.w	8005382 <UI_GetReg+0x12a>
  {
    *success = true;
 8005270:	2401      	movs	r4, #1
 8005272:	7014      	strb	r4, [r2, #0]
  }

  switch (bRegID)
 8005274:	2981      	cmp	r1, #129	; 0x81
 8005276:	f200 8286 	bhi.w	8005786 <UI_GetReg+0x52e>
 800527a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800527e:	01ea      	.short	0x01ea
 8005280:	01e201e6 	.word	0x01e201e6
 8005284:	01f101de 	.word	0x01f101de
 8005288:	011a01ed 	.word	0x011a01ed
 800528c:	00ff0116 	.word	0x00ff0116
 8005290:	02430247 	.word	0x02430247
 8005294:	00fa023f 	.word	0x00fa023f
 8005298:	024f023b 	.word	0x024f023b
 800529c:	0224024b 	.word	0x0224024b
 80052a0:	02840217 	.word	0x02840217
 80052a4:	02700284 	.word	0x02700284
 80052a8:	0284025e 	.word	0x0284025e
 80052ac:	02840284 	.word	0x02840284
 80052b0:	02330237 	.word	0x02330237
 80052b4:	0284025a 	.word	0x0284025a
 80052b8:	02530284 	.word	0x02530284
 80052bc:	013801be 	.word	0x013801be
 80052c0:	01320284 	.word	0x01320284
 80052c4:	0128012d 	.word	0x0128012d
 80052c8:	011e0123 	.word	0x011e0123
 80052cc:	013801be 	.word	0x013801be
 80052d0:	00fa00ff 	.word	0x00fa00ff
 80052d4:	018f01b9 	.word	0x018f01b9
 80052d8:	0185018a 	.word	0x0185018a
 80052dc:	02840284 	.word	0x02840284
 80052e0:	01610172 	.word	0x01610172
 80052e4:	013d014f 	.word	0x013d014f
 80052e8:	01ca0104 	.word	0x01ca0104
 80052ec:	02840284 	.word	0x02840284
 80052f0:	02840284 	.word	0x02840284
 80052f4:	02840284 	.word	0x02840284
 80052f8:	02840284 	.word	0x02840284
 80052fc:	01fc01c3 	.word	0x01fc01c3
 8005300:	020300fa 	.word	0x020300fa
 8005304:	028401a5 	.word	0x028401a5
 8005308:	02840284 	.word	0x02840284
 800530c:	02840284 	.word	0x02840284
 8005310:	02840284 	.word	0x02840284
 8005314:	02840284 	.word	0x02840284
 8005318:	02840284 	.word	0x02840284
 800531c:	02840284 	.word	0x02840284
 8005320:	02840284 	.word	0x02840284
 8005324:	02840284 	.word	0x02840284
 8005328:	02840284 	.word	0x02840284
 800532c:	02840284 	.word	0x02840284
 8005330:	02840284 	.word	0x02840284
 8005334:	02840198 	.word	0x02840198
 8005338:	02840284 	.word	0x02840284
 800533c:	02840284 	.word	0x02840284
 8005340:	02840284 	.word	0x02840284
 8005344:	02840284 	.word	0x02840284
 8005348:	02840284 	.word	0x02840284
 800534c:	02840284 	.word	0x02840284
 8005350:	02840284 	.word	0x02840284
 8005354:	02840284 	.word	0x02840284
 8005358:	01940284 	.word	0x01940284
 800535c:	028201f8 	.word	0x028201f8
 8005360:	00f70284 	.word	0x00f70284
 8005364:	028400f7 	.word	0x028400f7
 8005368:	02840284 	.word	0x02840284
 800536c:	02840284 	.word	0x02840284
 8005370:	02840284 	.word	0x02840284
 8005374:	02840284 	.word	0x02840284
 8005378:	02840284 	.word	0x02840284
 800537c:	02840284 	.word	0x02840284
 8005380:	00f7      	.short	0x00f7
 8005382:	2970      	cmp	r1, #112	; 0x70
 8005384:	d872      	bhi.n	800546c <UI_GetReg+0x214>
 8005386:	e8df f011 	tbh	[pc, r1, lsl #1]
 800538a:	0164      	.short	0x0164
 800538c:	015c0160 	.word	0x015c0160
 8005390:	016b0158 	.word	0x016b0158
 8005394:	00940167 	.word	0x00940167
 8005398:	00790090 	.word	0x00790090
 800539c:	01bd01c1 	.word	0x01bd01c1
 80053a0:	007401b9 	.word	0x007401b9
 80053a4:	01c901b5 	.word	0x01c901b5
 80053a8:	019e01c5 	.word	0x019e01c5
 80053ac:	00710191 	.word	0x00710191
 80053b0:	01ea0071 	.word	0x01ea0071
 80053b4:	007101d8 	.word	0x007101d8
 80053b8:	00710071 	.word	0x00710071
 80053bc:	01ad01b1 	.word	0x01ad01b1
 80053c0:	007101d4 	.word	0x007101d4
 80053c4:	01cd0071 	.word	0x01cd0071
 80053c8:	00b20138 	.word	0x00b20138
 80053cc:	00ac0071 	.word	0x00ac0071
 80053d0:	00a200a7 	.word	0x00a200a7
 80053d4:	0098009d 	.word	0x0098009d
 80053d8:	00b20138 	.word	0x00b20138
 80053dc:	00740079 	.word	0x00740079
 80053e0:	01090133 	.word	0x01090133
 80053e4:	00ff0104 	.word	0x00ff0104
 80053e8:	00710071 	.word	0x00710071
 80053ec:	00db00ec 	.word	0x00db00ec
 80053f0:	00b700c9 	.word	0x00b700c9
 80053f4:	0144007e 	.word	0x0144007e
 80053f8:	00710071 	.word	0x00710071
 80053fc:	00710071 	.word	0x00710071
 8005400:	00710071 	.word	0x00710071
 8005404:	00710071 	.word	0x00710071
 8005408:	0176013d 	.word	0x0176013d
 800540c:	017d0074 	.word	0x017d0074
 8005410:	0071011f 	.word	0x0071011f
 8005414:	00710071 	.word	0x00710071
 8005418:	00710071 	.word	0x00710071
 800541c:	00710071 	.word	0x00710071
 8005420:	00710071 	.word	0x00710071
 8005424:	00710071 	.word	0x00710071
 8005428:	00710071 	.word	0x00710071
 800542c:	00710071 	.word	0x00710071
 8005430:	00710071 	.word	0x00710071
 8005434:	00710071 	.word	0x00710071
 8005438:	00710071 	.word	0x00710071
 800543c:	00710071 	.word	0x00710071
 8005440:	00710112 	.word	0x00710112
 8005444:	00710071 	.word	0x00710071
 8005448:	00710071 	.word	0x00710071
 800544c:	00710071 	.word	0x00710071
 8005450:	00710071 	.word	0x00710071
 8005454:	00710071 	.word	0x00710071
 8005458:	00710071 	.word	0x00710071
 800545c:	00710071 	.word	0x00710071
 8005460:	00710071 	.word	0x00710071
 8005464:	010e0071 	.word	0x010e0071
 8005468:	01fc0172 	.word	0x01fc0172
  int32_t bRetVal = 0;
 800546c:	2000      	movs	r0, #0
      }
	}
    break;
  }
  return bRetVal;
}
 800546e:	b010      	add	sp, #64	; 0x40
 8005470:	bd70      	pop	{r4, r5, r6, pc}
      bRetVal = MCI_GetIqdref(pMCI).d;
 8005472:	4630      	mov	r0, r6
 8005474:	f7fd ff52 	bl	800331c <MCI_GetIqdref>
 8005478:	1400      	asrs	r0, r0, #16
    break;
 800547a:	e7f8      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = MCI_GetIqdref(pMCI).q;
 800547c:	4630      	mov	r0, r6
 800547e:	f7fd ff4d 	bl	800331c <MCI_GetIqdref>
 8005482:	b200      	sxth	r0, r0
    break;
 8005484:	e7f3      	b.n	800546e <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8005486:	6902      	ldr	r2, [r0, #16]
 8005488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800548c:	0f1a      	lsrs	r2, r3, #28
 800548e:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005490:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005494:	f000 8183 	beq.w	800579e <UI_GetReg+0x546>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005498:	2b09      	cmp	r3, #9
 800549a:	d1e7      	bne.n	800546c <UI_GetReg+0x214>
        pSPD =  pMCT->pSpeedSensorAux;
 800549c:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 800549e:	2800      	cmp	r0, #0
 80054a0:	d0e4      	beq.n	800546c <UI_GetReg+0x214>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).alpha;
 80054a2:	f003 ffa3 	bl	80093ec <STO_PLL_GetEstimatedBemf>
 80054a6:	b200      	sxth	r0, r0
 80054a8:	e7e1      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 80054aa:	6828      	ldr	r0, [r5, #0]
 80054ac:	f002 fc4a 	bl	8007d44 <PID_GetKD>
    break;
 80054b0:	e7dd      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 80054b2:	6828      	ldr	r0, [r5, #0]
 80054b4:	f002 fc3a 	bl	8007d2c <PID_GetKI>
    break;
 80054b8:	e7d9      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 80054ba:	4630      	mov	r0, r6
 80054bc:	f7fd ff12 	bl	80032e4 <MCI_GetIalphabeta>
 80054c0:	1400      	asrs	r0, r0, #16
    break;
 80054c2:	e7d4      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 80054c4:	4630      	mov	r0, r6
 80054c6:	f7fd ff0d 	bl	80032e4 <MCI_GetIalphabeta>
 80054ca:	b200      	sxth	r0, r0
    break;
 80054cc:	e7cf      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = MCI_GetIab(pMCI).b;
 80054ce:	4630      	mov	r0, r6
 80054d0:	f7fd fefa 	bl	80032c8 <MCI_GetIab>
 80054d4:	1400      	asrs	r0, r0, #16
    break;
 80054d6:	e7ca      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = MCI_GetIab(pMCI).a;
 80054d8:	4630      	mov	r0, r6
 80054da:	f7fd fef5 	bl	80032c8 <MCI_GetIab>
 80054de:	b200      	sxth	r0, r0
    break;
 80054e0:	e7c5      	b.n	800546e <UI_GetReg+0x216>
      if (pMCT->pRevupCtrl)
 80054e2:	6968      	ldr	r0, [r5, #20]
 80054e4:	2800      	cmp	r0, #0
 80054e6:	d0c1      	beq.n	800546c <UI_GetReg+0x214>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 80054e8:	f003 fd08 	bl	8008efc <RUC_GetNumberOfPhases>
 80054ec:	e7bf      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = MCI_GetIqd(pMCI).d;
 80054ee:	4630      	mov	r0, r6
 80054f0:	f7fd ff06 	bl	8003300 <MCI_GetIqd>
 80054f4:	1400      	asrs	r0, r0, #16
    break;
 80054f6:	e7ba      	b.n	800546e <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80054f8:	6902      	ldr	r2, [r0, #16]
 80054fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80054fe:	0f1a      	lsrs	r2, r3, #28
 8005500:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005502:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005506:	f000 815f 	beq.w	80057c8 <UI_GetReg+0x570>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800550a:	2b09      	cmp	r3, #9
 800550c:	d1ae      	bne.n	800546c <UI_GetReg+0x214>
        pSPD = pMCT->pSpeedSensorAux;
 800550e:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8005510:	2800      	cmp	r0, #0
 8005512:	d0ab      	beq.n	800546c <UI_GetReg+0x214>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).beta;
 8005514:	f003 ff76 	bl	8009404 <STO_PLL_GetEstimatedCurrent>
 8005518:	1400      	asrs	r0, r0, #16
 800551a:	e7a8      	b.n	800546e <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800551c:	6902      	ldr	r2, [r0, #16]
 800551e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005522:	0f1a      	lsrs	r2, r3, #28
 8005524:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005526:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800552a:	f000 816c 	beq.w	8005806 <UI_GetReg+0x5ae>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800552e:	2b09      	cmp	r3, #9
 8005530:	d19c      	bne.n	800546c <UI_GetReg+0x214>
        pSPD = pMCT->pSpeedSensorAux;
 8005532:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8005534:	2800      	cmp	r0, #0
 8005536:	d099      	beq.n	800546c <UI_GetReg+0x214>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).alpha;
 8005538:	f003 ff64 	bl	8009404 <STO_PLL_GetEstimatedCurrent>
 800553c:	b200      	sxth	r0, r0
 800553e:	e796      	b.n	800546e <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8005540:	6902      	ldr	r2, [r0, #16]
 8005542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005546:	0f1a      	lsrs	r2, r3, #28
 8005548:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800554a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800554e:	f000 8121 	beq.w	8005794 <UI_GetReg+0x53c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005552:	2b09      	cmp	r3, #9
 8005554:	d18a      	bne.n	800546c <UI_GetReg+0x214>
        pSPD = pMCT->pSpeedSensorAux;
 8005556:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8005558:	2800      	cmp	r0, #0
 800555a:	d087      	beq.n	800546c <UI_GetReg+0x214>
        bRetVal = SPD_GetS16Speed(pSPD);
 800555c:	f002 ff4e 	bl	80083fc <SPD_GetS16Speed>
 8005560:	e785      	b.n	800546e <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8005562:	6902      	ldr	r2, [r0, #16]
 8005564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005568:	0f1a      	lsrs	r2, r3, #28
 800556a:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800556c:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005570:	f000 8144 	beq.w	80057fc <UI_GetReg+0x5a4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005574:	2b09      	cmp	r3, #9
 8005576:	f47f af79 	bne.w	800546c <UI_GetReg+0x214>
        pSPD = pMCT->pSpeedSensorAux;
 800557a:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 800557c:	2800      	cmp	r0, #0
 800557e:	f43f af75 	beq.w	800546c <UI_GetReg+0x214>
        bRetVal = SPD_GetElAngle(pSPD);
 8005582:	f002 ff03 	bl	800838c <SPD_GetElAngle>
 8005586:	e772      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8005588:	4630      	mov	r0, r6
 800558a:	f7fd fee3 	bl	8003354 <MCI_GetValphabeta>
 800558e:	1400      	asrs	r0, r0, #16
    break;
 8005590:	e76d      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8005592:	4630      	mov	r0, r6
 8005594:	f7fd fede 	bl	8003354 <MCI_GetValphabeta>
 8005598:	b200      	sxth	r0, r0
    break;
 800559a:	e768      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = MCI_GetVqd(pMCI).d;
 800559c:	4630      	mov	r0, r6
 800559e:	f7fd fecb 	bl	8003338 <MCI_GetVqd>
 80055a2:	1400      	asrs	r0, r0, #16
    break;
 80055a4:	e763      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 80055a6:	6828      	ldr	r0, [r5, #0]
 80055a8:	f002 fbc6 	bl	8007d38 <PID_GetKPDivisor>
    break;
 80055ac:	e75f      	b.n	800546e <UI_GetReg+0x216>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 80055ae:	4630      	mov	r0, r6
 80055b0:	f7fd fe4e 	bl	8003250 <MCI_GetControlMode>
 80055b4:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80055b6:	4630      	mov	r0, r6
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 80055b8:	f000 812a 	beq.w	8005810 <UI_GetReg+0x5b8>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 80055bc:	f7fd fe80 	bl	80032c0 <MCI_GetMecSpeedRefUnit>
 80055c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80055c4:	0040      	lsls	r0, r0, #1
 80055c6:	e752      	b.n	800546e <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80055c8:	6902      	ldr	r2, [r0, #16]
 80055ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80055ce:	0f1a      	lsrs	r2, r3, #28
 80055d0:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80055d2:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80055d6:	f000 80fc 	beq.w	80057d2 <UI_GetReg+0x57a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80055da:	2b09      	cmp	r3, #9
 80055dc:	f47f af46 	bne.w	800546c <UI_GetReg+0x214>
        pSPD = pMCT->pSpeedSensorAux;
 80055e0:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80055e2:	2800      	cmp	r0, #0
 80055e4:	f43f af42 	beq.w	800546c <UI_GetReg+0x214>
        bRetVal = STO_PLL_GetObservedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 80055e8:	f003 ff56 	bl	8009498 <STO_PLL_GetObservedBemfLevel>
 80055ec:	1400      	asrs	r0, r0, #16
 80055ee:	e73e      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = MCI_GetVqd(pMCI).q;
 80055f0:	4630      	mov	r0, r6
 80055f2:	f7fd fea1 	bl	8003338 <MCI_GetVqd>
 80055f6:	b200      	sxth	r0, r0
    break;
 80055f8:	e739      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = MCI_GetIqd(pMCI).q;
 80055fa:	4630      	mov	r0, r6
 80055fc:	f7fd fe80 	bl	8003300 <MCI_GetIqd>
 8005600:	b200      	sxth	r0, r0
    break;
 8005602:	e734      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 8005604:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005606:	f002 ffb9 	bl	800857c <STC_GetMaxAppPositiveMecSpeedUnit>
 800560a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800560e:	0040      	lsls	r0, r0, #1
    break;
 8005610:	e72d      	b.n	800546e <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8005612:	6902      	ldr	r2, [r0, #16]
 8005614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005618:	0f1a      	lsrs	r2, r3, #28
 800561a:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800561c:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005620:	f000 80cd 	beq.w	80057be <UI_GetReg+0x566>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005624:	2b09      	cmp	r3, #9
 8005626:	f47f af21 	bne.w	800546c <UI_GetReg+0x214>
        pSPD = pMCT->pSpeedSensorAux;
 800562a:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 800562c:	2800      	cmp	r0, #0
 800562e:	f43f af1d 	beq.w	800546c <UI_GetReg+0x214>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).beta;
 8005632:	f003 fedb 	bl	80093ec <STO_PLL_GetEstimatedBemf>
 8005636:	1400      	asrs	r0, r0, #16
 8005638:	e719      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 800563a:	4630      	mov	r0, r6
 800563c:	f7fd fe08 	bl	8003250 <MCI_GetControlMode>
    break;
 8005640:	e715      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8005642:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8005644:	f003 f84e 	bl	80086e4 <STM_GetState>
	break;
 8005648:	e711      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 800564a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800564c:	f003 f858 	bl	8008700 <STM_GetFaultState>
	break;
 8005650:	e70d      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8005652:	f7ff fc91 	bl	8004f78 <UI_GetSelectedMC>
    break;
 8005656:	e70a      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8005658:	6828      	ldr	r0, [r5, #0]
 800565a:	f002 fb63 	bl	8007d24 <PID_GetKP>
    break;
 800565e:	e706      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8005660:	4630      	mov	r0, r6
 8005662:	f7fd fe2d 	bl	80032c0 <MCI_GetMecSpeedRefUnit>
 8005666:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800566a:	0040      	lsls	r0, r0, #1
    break;
 800566c:	e6ff      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 800566e:	6828      	ldr	r0, [r5, #0]
 8005670:	f002 fb64 	bl	8007d3c <PID_GetKIDivisor>
    break;
 8005674:	e6fb      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8005676:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005678:	f002 ff82 	bl	8008580 <STC_GetMinAppNegativeMecSpeedUnit>
 800567c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005680:	0040      	lsls	r0, r0, #1
    break;
 8005682:	e6f4      	b.n	800546e <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8005684:	6902      	ldr	r2, [r0, #16]
 8005686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800568a:	0f1a      	lsrs	r2, r3, #28
 800568c:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800568e:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005692:	f000 80c3 	beq.w	800581c <UI_GetReg+0x5c4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005696:	2b09      	cmp	r3, #9
 8005698:	f47f aee8 	bne.w	800546c <UI_GetReg+0x214>
        pSPD = pMCT->pSpeedSensorAux;
 800569c:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 800569e:	2800      	cmp	r0, #0
 80056a0:	f43f aee4 	beq.w	800546c <UI_GetReg+0x214>
        bRetVal = STO_PLL_GetEstimatedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 80056a4:	f003 fef4 	bl	8009490 <STO_PLL_GetEstimatedBemfLevel>
 80056a8:	1400      	asrs	r0, r0, #16
 80056aa:	e6e0      	b.n	800546e <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80056ac:	6902      	ldr	r2, [r0, #16]
 80056ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80056b2:	0f1a      	lsrs	r2, r3, #28
 80056b4:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80056b6:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80056ba:	d075      	beq.n	80057a8 <UI_GetReg+0x550>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80056bc:	2b09      	cmp	r3, #9
 80056be:	d076      	beq.n	80057ae <UI_GetReg+0x556>
      bRetVal = (int32_t)hIgain;
 80056c0:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
    break;
 80056c4:	e6d3      	b.n	800546e <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80056c6:	6902      	ldr	r2, [r0, #16]
 80056c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80056cc:	0f1a      	lsrs	r2, r3, #28
 80056ce:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80056d0:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80056d4:	f000 8086 	beq.w	80057e4 <UI_GetReg+0x58c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80056d8:	2b09      	cmp	r3, #9
 80056da:	f000 8086 	beq.w	80057ea <UI_GetReg+0x592>
      bRetVal = (int32_t)hPgain;
 80056de:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
    break;
 80056e2:	e6c4      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 80056e4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80056e6:	f002 fafb 	bl	8007ce0 <NTC_GetAvTemp_C>
    break;
 80056ea:	e6c0      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 80056ec:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80056ee:	f001 ffef 	bl	80076d0 <VBS_GetAvBusVoltage_V>
    break;
 80056f2:	e6bc      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 80056f4:	68a8      	ldr	r0, [r5, #8]
 80056f6:	f002 fb15 	bl	8007d24 <PID_GetKP>
    break;
 80056fa:	e6b8      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 80056fc:	6868      	ldr	r0, [r5, #4]
 80056fe:	f002 fb21 	bl	8007d44 <PID_GetKD>
    break;
 8005702:	e6b4      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8005704:	6868      	ldr	r0, [r5, #4]
 8005706:	f002 fb11 	bl	8007d2c <PID_GetKI>
    break;
 800570a:	e6b0      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 800570c:	6868      	ldr	r0, [r5, #4]
 800570e:	f002 fb09 	bl	8007d24 <PID_GetKP>
    break;
 8005712:	e6ac      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8005714:	68a8      	ldr	r0, [r5, #8]
 8005716:	f002 fb15 	bl	8007d44 <PID_GetKD>
    break;
 800571a:	e6a8      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 800571c:	68a8      	ldr	r0, [r5, #8]
 800571e:	f002 fb05 	bl	8007d2c <PID_GetKI>
    break;
 8005722:	e6a4      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8005724:	4630      	mov	r0, r6
 8005726:	f7fd fdc3 	bl	80032b0 <MCI_GetAvrgMecSpeedUnit>
 800572a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800572e:	0040      	lsls	r0, r0, #1
    break;
 8005730:	e69d      	b.n	800546e <UI_GetReg+0x216>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 8005732:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8005734:	f002 fa90 	bl	8007c58 <MPM_GetAvrgElMotorPowerW>
    break;
 8005738:	e699      	b.n	800546e <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800573a:	6902      	ldr	r2, [r0, #16]
 800573c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005740:	0f1a      	lsrs	r2, r3, #28
 8005742:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005744:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005748:	d048      	beq.n	80057dc <UI_GetReg+0x584>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800574a:	2b09      	cmp	r3, #9
 800574c:	d1c7      	bne.n	80056de <UI_GetReg+0x486>
        pSPD = pMCT->pSpeedSensorAux;
 800574e:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8005750:	2800      	cmp	r0, #0
 8005752:	d0c4      	beq.n	80056de <UI_GetReg+0x486>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8005754:	aa0f      	add	r2, sp, #60	; 0x3c
 8005756:	a90e      	add	r1, sp, #56	; 0x38
 8005758:	f003 fe74 	bl	8009444 <STO_GetPLLGains>
 800575c:	e7bf      	b.n	80056de <UI_GetReg+0x486>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800575e:	6902      	ldr	r2, [r0, #16]
 8005760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005764:	0f1a      	lsrs	r2, r3, #28
 8005766:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005768:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800576c:	d00e      	beq.n	800578c <UI_GetReg+0x534>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800576e:	2b09      	cmp	r3, #9
 8005770:	d1a6      	bne.n	80056c0 <UI_GetReg+0x468>
        pSPD = pMCT->pSpeedSensorAux;
 8005772:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8005774:	2800      	cmp	r0, #0
 8005776:	d0a3      	beq.n	80056c0 <UI_GetReg+0x468>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8005778:	aa0f      	add	r2, sp, #60	; 0x3c
 800577a:	a90e      	add	r1, sp, #56	; 0x38
 800577c:	f003 fe62 	bl	8009444 <STO_GetPLLGains>
 8005780:	e79e      	b.n	80056c0 <UI_GetReg+0x468>
      bRetVal = (int32_t)(MC_UID);
 8005782:	4829      	ldr	r0, [pc, #164]	; (8005828 <UI_GetReg+0x5d0>)
 8005784:	e673      	b.n	800546e <UI_GetReg+0x216>
        *success = false;
 8005786:	2000      	movs	r0, #0
 8005788:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 800578a:	e670      	b.n	800546e <UI_GetReg+0x216>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800578c:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 800578e:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005790:	d1f0      	bne.n	8005774 <UI_GetReg+0x51c>
 8005792:	e7ee      	b.n	8005772 <UI_GetReg+0x51a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005794:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8005796:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005798:	f47f aede 	bne.w	8005558 <UI_GetReg+0x300>
 800579c:	e6db      	b.n	8005556 <UI_GetReg+0x2fe>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800579e:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80057a0:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80057a2:	f47f ae7c 	bne.w	800549e <UI_GetReg+0x246>
 80057a6:	e679      	b.n	800549c <UI_GetReg+0x244>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80057a8:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80057aa:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80057ac:	d100      	bne.n	80057b0 <UI_GetReg+0x558>
        pSPD = pMCT->pSpeedSensorAux;
 80057ae:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80057b0:	2800      	cmp	r0, #0
 80057b2:	d085      	beq.n	80056c0 <UI_GetReg+0x468>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80057b4:	aa0f      	add	r2, sp, #60	; 0x3c
 80057b6:	a90e      	add	r1, sp, #56	; 0x38
 80057b8:	f003 fe38 	bl	800942c <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hC2;
 80057bc:	e780      	b.n	80056c0 <UI_GetReg+0x468>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80057be:	2b09      	cmp	r3, #9
       pSPD = pMCT->pSpeedSensorMain;
 80057c0:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80057c2:	f47f af33 	bne.w	800562c <UI_GetReg+0x3d4>
 80057c6:	e730      	b.n	800562a <UI_GetReg+0x3d2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80057c8:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80057ca:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80057cc:	f47f aea0 	bne.w	8005510 <UI_GetReg+0x2b8>
 80057d0:	e69d      	b.n	800550e <UI_GetReg+0x2b6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80057d2:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80057d4:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80057d6:	f47f af04 	bne.w	80055e2 <UI_GetReg+0x38a>
 80057da:	e701      	b.n	80055e0 <UI_GetReg+0x388>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80057dc:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80057de:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80057e0:	d1b6      	bne.n	8005750 <UI_GetReg+0x4f8>
 80057e2:	e7b4      	b.n	800574e <UI_GetReg+0x4f6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80057e4:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80057e6:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80057e8:	d100      	bne.n	80057ec <UI_GetReg+0x594>
        pSPD = pMCT->pSpeedSensorAux;
 80057ea:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80057ec:	2800      	cmp	r0, #0
 80057ee:	f43f af76 	beq.w	80056de <UI_GetReg+0x486>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80057f2:	aa0f      	add	r2, sp, #60	; 0x3c
 80057f4:	a90e      	add	r1, sp, #56	; 0x38
 80057f6:	f003 fe19 	bl	800942c <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hC1;
 80057fa:	e770      	b.n	80056de <UI_GetReg+0x486>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80057fc:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80057fe:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005800:	f47f aebc 	bne.w	800557c <UI_GetReg+0x324>
 8005804:	e6b9      	b.n	800557a <UI_GetReg+0x322>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005806:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8005808:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800580a:	f47f ae93 	bne.w	8005534 <UI_GetReg+0x2dc>
 800580e:	e690      	b.n	8005532 <UI_GetReg+0x2da>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8005810:	f7fd fd42 	bl	8003298 <MCI_GetLastRampFinalSpeed>
 8005814:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005818:	0040      	lsls	r0, r0, #1
 800581a:	e628      	b.n	800546e <UI_GetReg+0x216>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800581c:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 800581e:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005820:	f47f af3d 	bne.w	800569e <UI_GetReg+0x446>
 8005824:	e73a      	b.n	800569c <UI_GetReg+0x444>
 8005826:	bf00      	nop
 8005828:	34a6847a 	.word	0x34a6847a

0800582c <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 800582c:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800582e:	6883      	ldr	r3, [r0, #8]
 8005830:	7d02      	ldrb	r2, [r0, #20]
 8005832:	3901      	subs	r1, #1
 8005834:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]

  switch (bCmdID)
 8005838:	290d      	cmp	r1, #13
 800583a:	d808      	bhi.n	800584e <UI_ExecCmd+0x22>
 800583c:	e8df f001 	tbb	[pc, r1]
 8005840:	0e091419 	.word	0x0e091419
 8005844:	231e100e 	.word	0x231e100e
 8005848:	07070728 	.word	0x07070728
 800584c:	1407      	.short	0x1407
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800584e:	2000      	movs	r0, #0
    retVal = false;
	}
    break;
  }
  return retVal;
}
 8005850:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == RUN)
 8005852:	4620      	mov	r0, r4
 8005854:	f7fd fcec 	bl	8003230 <MCI_GetSTMState>
 8005858:	2806      	cmp	r0, #6
 800585a:	d01e      	beq.n	800589a <UI_ExecCmd+0x6e>
  bool retVal = true;
 800585c:	2001      	movs	r0, #1
}
 800585e:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 8005860:	4620      	mov	r0, r4
 8005862:	f7fd fce5 	bl	8003230 <MCI_GetSTMState>
 8005866:	b120      	cbz	r0, 8005872 <UI_ExecCmd+0x46>
        MCI_StopMotor(pMCI);
 8005868:	4620      	mov	r0, r4
 800586a:	f7fd fc99 	bl	80031a0 <MCI_StopMotor>
  bool retVal = true;
 800586e:	2001      	movs	r0, #1
}
 8005870:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 8005872:	4620      	mov	r0, r4
 8005874:	f7fd fc8a 	bl	800318c <MCI_StartMotor>
  bool retVal = true;
 8005878:	2001      	movs	r0, #1
}
 800587a:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 800587c:	4620      	mov	r0, r4
 800587e:	f7fd fc93 	bl	80031a8 <MCI_FaultAcknowledged>
  bool retVal = true;
 8005882:	2001      	movs	r0, #1
}
 8005884:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 8005886:	4620      	mov	r0, r4
 8005888:	f7fd fc92 	bl	80031b0 <MCI_EncoderAlign>
  bool retVal = true;
 800588c:	2001      	movs	r0, #1
}
 800588e:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 8005890:	4620      	mov	r0, r4
 8005892:	f7fd fd8f 	bl	80033b4 <MCI_Clear_Iqdref>
  bool retVal = true;
 8005896:	2001      	movs	r0, #1
}
 8005898:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 800589a:	4620      	mov	r0, r4
 800589c:	f7fd fd04 	bl	80032a8 <MCI_StopRamp>
  bool retVal = true;
 80058a0:	2001      	movs	r0, #1
}
 80058a2:	bd10      	pop	{r4, pc}

080058a4 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 80058a4:	b510      	push	{r4, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 80058a6:	4b07      	ldr	r3, [pc, #28]	; (80058c4 <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80058a8:	7d04      	ldrb	r4, [r0, #20]
 80058aa:	6880      	ldr	r0, [r0, #8]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 80058ac:	fb83 c301 	smull	ip, r3, r3, r1
 80058b0:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 80058b4:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80058b8:	b209      	sxth	r1, r1
 80058ba:	f7fd fc47 	bl	800314c <MCI_ExecSpeedRamp>
  return true;
}
 80058be:	2001      	movs	r0, #1
 80058c0:	bd10      	pop	{r4, pc}
 80058c2:	bf00      	nop
 80058c4:	2aaaaaab 	.word	0x2aaaaaab

080058c8 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 80058c8:	b510      	push	{r4, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80058ca:	6883      	ldr	r3, [r0, #8]
 80058cc:	7d04      	ldrb	r4, [r0, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 80058ce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80058d2:	f7fd fc47 	bl	8003164 <MCI_ExecTorqueRamp>
  return true;
}
 80058d6:	2001      	movs	r0, #1
 80058d8:	bd10      	pop	{r4, pc}
 80058da:	bf00      	nop

080058dc <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 80058dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80058de:	7d04      	ldrb	r4, [r0, #20]
 80058e0:	68c0      	ldr	r0, [r0, #12]
 80058e2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80058e6:	6944      	ldr	r4, [r0, #20]
  if (pRevupCtrl)
 80058e8:	b19c      	cbz	r4, 8005912 <UI_GetRevupData+0x36>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 80058ea:	4620      	mov	r0, r4
 80058ec:	461e      	mov	r6, r3
 80058ee:	4617      	mov	r7, r2
 80058f0:	460d      	mov	r5, r1
 80058f2:	f003 faed 	bl	8008ed0 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80058f6:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 80058f8:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80058fa:	4620      	mov	r0, r4
 80058fc:	f003 faee 	bl	8008edc <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8005900:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8005902:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8005904:	4620      	mov	r0, r4
 8005906:	f003 faf1 	bl	8008eec <RUC_GetPhaseFinalTorque>
 800590a:	9b06      	ldr	r3, [sp, #24]
 800590c:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 800590e:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 8005910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 8005912:	4620      	mov	r0, r4
}
 8005914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005916:	bf00      	nop

08005918 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8005918:	b570      	push	{r4, r5, r6, lr}
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 800591a:	7d04      	ldrb	r4, [r0, #20]
 800591c:	68c0      	ldr	r0, [r0, #12]
{
 800591e:	b082      	sub	sp, #8
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8005920:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
{
 8005924:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8005928:	6940      	ldr	r0, [r0, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 800592a:	9001      	str	r0, [sp, #4]
{
 800592c:	461d      	mov	r5, r3
 800592e:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8005930:	f003 fabc 	bl	8008eac <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8005934:	9801      	ldr	r0, [sp, #4]
 8005936:	462a      	mov	r2, r5
 8005938:	4621      	mov	r1, r4
 800593a:	f003 fabd 	bl	8008eb8 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 800593e:	9801      	ldr	r0, [sp, #4]
 8005940:	4632      	mov	r2, r6
 8005942:	4621      	mov	r1, r4
 8005944:	f003 fabe 	bl	8008ec4 <RUC_SetPhaseFinalTorque>
  return true;
}
 8005948:	2001      	movs	r0, #1
 800594a:	b002      	add	sp, #8
 800594c:	bd70      	pop	{r4, r5, r6, pc}
 800594e:	bf00      	nop

08005950 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8005950:	b410      	push	{r4}
 8005952:	b083      	sub	sp, #12

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8005954:	7d04      	ldrb	r4, [r0, #20]
 8005956:	6883      	ldr	r3, [r0, #8]
  qd_t currComp;
  currComp.q = hIqRef;
 8005958:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 800595c:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 8005960:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005964:	9901      	ldr	r1, [sp, #4]
}
 8005966:	b003      	add	sp, #12
 8005968:	f85d 4b04 	ldr.w	r4, [sp], #4
  MCI_SetCurrentReferences(pMCI,currComp);
 800596c:	f7fd bc04 	b.w	8003178 <MCI_SetCurrentReferences>

08005970 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 8005970:	2000      	movs	r0, #0
 8005972:	4770      	bx	lr

08005974 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005974:	4b05      	ldr	r3, [pc, #20]	; (800598c <SystemInit+0x18>)
 8005976:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800597a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800597e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8005982:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005986:	6099      	str	r1, [r3, #8]
#endif
}
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	e000ed00 	.word	0xe000ed00

08005990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005990:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005992:	4a0e      	ldr	r2, [pc, #56]	; (80059cc <HAL_InitTick+0x3c>)
 8005994:	4b0e      	ldr	r3, [pc, #56]	; (80059d0 <HAL_InitTick+0x40>)
 8005996:	7812      	ldrb	r2, [r2, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
{
 800599a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800599c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80059a0:	fbb0 f0f2 	udiv	r0, r0, r2
 80059a4:	fbb3 f0f0 	udiv	r0, r3, r0
 80059a8:	f000 fcd2 	bl	8006350 <HAL_SYSTICK_Config>
 80059ac:	b908      	cbnz	r0, 80059b2 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80059ae:	2d0f      	cmp	r5, #15
 80059b0:	d901      	bls.n	80059b6 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80059b2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80059b4:	bd38      	pop	{r3, r4, r5, pc}
 80059b6:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80059b8:	4602      	mov	r2, r0
 80059ba:	4629      	mov	r1, r5
 80059bc:	f04f 30ff 	mov.w	r0, #4294967295
 80059c0:	f000 fc80 	bl	80062c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80059c4:	4b03      	ldr	r3, [pc, #12]	; (80059d4 <HAL_InitTick+0x44>)
 80059c6:	4620      	mov	r0, r4
 80059c8:	601d      	str	r5, [r3, #0]
}
 80059ca:	bd38      	pop	{r3, r4, r5, pc}
 80059cc:	200006d0 	.word	0x200006d0
 80059d0:	200006cc 	.word	0x200006cc
 80059d4:	200006d4 	.word	0x200006d4

080059d8 <HAL_Init>:
{
 80059d8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80059da:	4b0b      	ldr	r3, [pc, #44]	; (8005a08 <HAL_Init+0x30>)
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059e2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059ea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059f2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059f4:	2003      	movs	r0, #3
 80059f6:	f000 fc51 	bl	800629c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80059fa:	2004      	movs	r0, #4
 80059fc:	f7ff ffc8 	bl	8005990 <HAL_InitTick>
  HAL_MspInit();
 8005a00:	f7fe ffa8 	bl	8004954 <HAL_MspInit>
}
 8005a04:	2000      	movs	r0, #0
 8005a06:	bd08      	pop	{r3, pc}
 8005a08:	40023c00 	.word	0x40023c00

08005a0c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005a0c:	4a03      	ldr	r2, [pc, #12]	; (8005a1c <HAL_IncTick+0x10>)
 8005a0e:	4b04      	ldr	r3, [pc, #16]	; (8005a20 <HAL_IncTick+0x14>)
 8005a10:	6811      	ldr	r1, [r2, #0]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	440b      	add	r3, r1
 8005a16:	6013      	str	r3, [r2, #0]
}
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	20000d98 	.word	0x20000d98
 8005a20:	200006d0 	.word	0x200006d0

08005a24 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005a24:	4b01      	ldr	r3, [pc, #4]	; (8005a2c <HAL_GetTick+0x8>)
 8005a26:	6818      	ldr	r0, [r3, #0]
}
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	20000d98 	.word	0x20000d98

08005a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a30:	b538      	push	{r3, r4, r5, lr}
 8005a32:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005a34:	f7ff fff6 	bl	8005a24 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a38:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8005a3a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8005a3c:	d002      	beq.n	8005a44 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a3e:	4b04      	ldr	r3, [pc, #16]	; (8005a50 <HAL_Delay+0x20>)
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005a44:	f7ff ffee 	bl	8005a24 <HAL_GetTick>
 8005a48:	1b43      	subs	r3, r0, r5
 8005a4a:	42a3      	cmp	r3, r4
 8005a4c:	d3fa      	bcc.n	8005a44 <HAL_Delay+0x14>
  {
  }
}
 8005a4e:	bd38      	pop	{r3, r4, r5, pc}
 8005a50:	200006d0 	.word	0x200006d0

08005a54 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005a54:	2800      	cmp	r0, #0
 8005a56:	f000 80a0 	beq.w	8005b9a <HAL_ADC_Init+0x146>
{
 8005a5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005a5c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8005a5e:	4604      	mov	r4, r0
 8005a60:	b13d      	cbz	r5, 8005a72 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005a62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a64:	06db      	lsls	r3, r3, #27
 8005a66:	d50c      	bpl.n	8005a82 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005a68:	2300      	movs	r3, #0
 8005a6a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8005a6e:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8005a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8005a72:	f7fe ff8d 	bl	8004990 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005a76:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005a78:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8005a7a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005a7e:	06db      	lsls	r3, r3, #27
 8005a80:	d4f2      	bmi.n	8005a68 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8005a82:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005a84:	4948      	ldr	r1, [pc, #288]	; (8005ba8 <HAL_ADC_Init+0x154>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005a86:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005a88:	4d48      	ldr	r5, [pc, #288]	; (8005bac <HAL_ADC_Init+0x158>)
    ADC_STATE_CLR_SET(hadc->State,
 8005a8a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8005a8e:	f022 0202 	bic.w	r2, r2, #2
 8005a92:	f042 0202 	orr.w	r2, r2, #2
 8005a96:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005a98:	684a      	ldr	r2, [r1, #4]
 8005a9a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005a9e:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005aa0:	684a      	ldr	r2, [r1, #4]
 8005aa2:	6860      	ldr	r0, [r4, #4]
 8005aa4:	4302      	orrs	r2, r0
 8005aa6:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005aa8:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005aaa:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005aac:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005aae:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005ab0:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8005ab4:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005abc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005abe:	6858      	ldr	r0, [r3, #4]
 8005ac0:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 8005ac4:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005ac6:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005ac8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005aca:	4339      	orrs	r1, r7
 8005acc:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005ace:	6899      	ldr	r1, [r3, #8]
 8005ad0:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8005ad4:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005ad6:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005ad8:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005ada:	ea42 0206 	orr.w	r2, r2, r6
 8005ade:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005ae0:	d052      	beq.n	8005b88 <HAL_ADC_Init+0x134>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005ae2:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005ae4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005ae6:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8005aea:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005aec:	689a      	ldr	r2, [r3, #8]
 8005aee:	4310      	orrs	r0, r2
 8005af0:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005af2:	6899      	ldr	r1, [r3, #8]
 8005af4:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8005af8:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	432a      	orrs	r2, r5
 8005afe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005b00:	689a      	ldr	r2, [r3, #8]
 8005b02:	f022 0202 	bic.w	r2, r2, #2
 8005b06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	7e21      	ldrb	r1, [r4, #24]
 8005b0c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8005b10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005b12:	f894 2020 	ldrb.w	r2, [r4, #32]
 8005b16:	2a00      	cmp	r2, #0
 8005b18:	d041      	beq.n	8005b9e <HAL_ADC_Init+0x14a>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005b1a:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005b1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005b1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005b2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	3901      	subs	r1, #1
 8005b30:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8005b34:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005b38:	69e0      	ldr	r0, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005b3a:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005b3c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005b40:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005b42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b44:	3801      	subs	r0, #1
 8005b46:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
 8005b4a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005b4c:	6899      	ldr	r1, [r3, #8]
 8005b4e:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8005b52:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005b54:	6899      	ldr	r1, [r3, #8]
 8005b56:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8005b5a:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8005b5e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005b60:	6899      	ldr	r1, [r3, #8]
 8005b62:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005b66:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005b68:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8005b6a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005b6c:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8005b70:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8005b72:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8005b74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b76:	f023 0303 	bic.w	r3, r3, #3
 8005b7a:	f043 0301 	orr.w	r3, r3, #1
 8005b7e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8005b80:	2300      	movs	r3, #0
 8005b82:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005b88:	689a      	ldr	r2, [r3, #8]
 8005b8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005b90:	689a      	ldr	r2, [r3, #8]
 8005b92:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005b96:	609a      	str	r2, [r3, #8]
 8005b98:	e7b2      	b.n	8005b00 <HAL_ADC_Init+0xac>
    return HAL_ERROR;
 8005b9a:	2001      	movs	r0, #1
}
 8005b9c:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ba4:	605a      	str	r2, [r3, #4]
 8005ba6:	e7c6      	b.n	8005b36 <HAL_ADC_Init+0xe2>
 8005ba8:	40012300 	.word	0x40012300
 8005bac:	0f000001 	.word	0x0f000001

08005bb0 <HAL_ADC_ConfigChannel>:
{
 8005bb0:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 8005bb2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8005bb6:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8005bb8:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8005bba:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8005bbc:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8005bbe:	f000 8097 	beq.w	8005cf0 <HAL_ADC_ConfigChannel+0x140>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005bc8:	680d      	ldr	r5, [r1, #0]
 8005bca:	2d09      	cmp	r5, #9
 8005bcc:	d829      	bhi.n	8005c22 <HAL_ADC_ConfigChannel+0x72>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005bce:	6804      	ldr	r4, [r0, #0]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005bd0:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005bd2:	6922      	ldr	r2, [r4, #16]
 8005bd4:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8005bd8:	2607      	movs	r6, #7
 8005bda:	40be      	lsls	r6, r7
 8005bdc:	ea22 0206 	bic.w	r2, r2, r6
 8005be0:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005be2:	6922      	ldr	r2, [r4, #16]
 8005be4:	40bb      	lsls	r3, r7
 8005be6:	4313      	orrs	r3, r2
 8005be8:	6123      	str	r3, [r4, #16]
  if (sConfig->Rank < 7U)
 8005bea:	684b      	ldr	r3, [r1, #4]
 8005bec:	2b06      	cmp	r3, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005bee:	462e      	mov	r6, r5
  if (sConfig->Rank < 7U)
 8005bf0:	d82c      	bhi.n	8005c4c <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005bf2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005bf6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005bf8:	3b05      	subs	r3, #5
 8005bfa:	211f      	movs	r1, #31
 8005bfc:	4099      	lsls	r1, r3
 8005bfe:	ea22 0201 	bic.w	r2, r2, r1
 8005c02:	6362      	str	r2, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005c04:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005c06:	fa06 f303 	lsl.w	r3, r6, r3
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005c0e:	4b40      	ldr	r3, [pc, #256]	; (8005d10 <HAL_ADC_ConfigChannel+0x160>)
 8005c10:	429c      	cmp	r4, r3
 8005c12:	d02f      	beq.n	8005c74 <HAL_ADC_ConfigChannel+0xc4>
  __HAL_UNLOCK(hadc);
 8005c14:	2300      	movs	r3, #0
 8005c16:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8005c1a:	4618      	mov	r0, r3
}
 8005c1c:	b002      	add	sp, #8
 8005c1e:	bcf0      	pop	{r4, r5, r6, r7}
 8005c20:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005c22:	6804      	ldr	r4, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005c24:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005c26:	68e7      	ldr	r7, [r4, #12]
 8005c28:	b2ae      	uxth	r6, r5
 8005c2a:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8005c2e:	3a1e      	subs	r2, #30
 8005c30:	f04f 0c07 	mov.w	ip, #7
 8005c34:	fa0c fc02 	lsl.w	ip, ip, r2
 8005c38:	ea27 070c 	bic.w	r7, r7, ip
 8005c3c:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005c3e:	68e7      	ldr	r7, [r4, #12]
 8005c40:	4093      	lsls	r3, r2
 8005c42:	433b      	orrs	r3, r7
 8005c44:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8005c46:	684b      	ldr	r3, [r1, #4]
 8005c48:	2b06      	cmp	r3, #6
 8005c4a:	d9d2      	bls.n	8005bf2 <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8005c4c:	2b0c      	cmp	r3, #12
 8005c4e:	d833      	bhi.n	8005cb8 <HAL_ADC_ConfigChannel+0x108>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005c50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005c54:	f1a3 0123 	sub.w	r1, r3, #35	; 0x23
 8005c58:	221f      	movs	r2, #31
 8005c5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005c5c:	408a      	lsls	r2, r1
 8005c5e:	ea23 0302 	bic.w	r3, r3, r2
 8005c62:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005c64:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005c66:	fa06 f101 	lsl.w	r1, r6, r1
 8005c6a:	4319      	orrs	r1, r3
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005c6c:	4b28      	ldr	r3, [pc, #160]	; (8005d10 <HAL_ADC_ConfigChannel+0x160>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005c6e:	6321      	str	r1, [r4, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005c70:	429c      	cmp	r4, r3
 8005c72:	d1cf      	bne.n	8005c14 <HAL_ADC_ConfigChannel+0x64>
 8005c74:	2d12      	cmp	r5, #18
 8005c76:	d02e      	beq.n	8005cd6 <HAL_ADC_ConfigChannel+0x126>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005c78:	4b26      	ldr	r3, [pc, #152]	; (8005d14 <HAL_ADC_ConfigChannel+0x164>)
 8005c7a:	429d      	cmp	r5, r3
 8005c7c:	d13c      	bne.n	8005cf8 <HAL_ADC_ConfigChannel+0x148>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005c7e:	4a26      	ldr	r2, [pc, #152]	; (8005d18 <HAL_ADC_ConfigChannel+0x168>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005c80:	4b26      	ldr	r3, [pc, #152]	; (8005d1c <HAL_ADC_ConfigChannel+0x16c>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005c82:	6851      	ldr	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005c84:	4c26      	ldr	r4, [pc, #152]	; (8005d20 <HAL_ADC_ConfigChannel+0x170>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005c86:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 8005c8a:	6051      	str	r1, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005c8c:	6851      	ldr	r1, [r2, #4]
 8005c8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8005c92:	6051      	str	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	fba4 2303 	umull	r2, r3, r4, r3
 8005c9a:	0c9b      	lsrs	r3, r3, #18
 8005c9c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8005ca4:	9b01      	ldr	r3, [sp, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d0b4      	beq.n	8005c14 <HAL_ADC_ConfigChannel+0x64>
        counter--;
 8005caa:	9b01      	ldr	r3, [sp, #4]
 8005cac:	3b01      	subs	r3, #1
 8005cae:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8005cb0:	9b01      	ldr	r3, [sp, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1f9      	bne.n	8005caa <HAL_ADC_ConfigChannel+0xfa>
 8005cb6:	e7ad      	b.n	8005c14 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005cb8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005cbc:	3a41      	subs	r2, #65	; 0x41
 8005cbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005cc0:	211f      	movs	r1, #31
 8005cc2:	4091      	lsls	r1, r2
 8005cc4:	ea23 0301 	bic.w	r3, r3, r1
 8005cc8:	62e3      	str	r3, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005cca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005ccc:	fa06 f102 	lsl.w	r1, r6, r2
 8005cd0:	4319      	orrs	r1, r3
 8005cd2:	62e1      	str	r1, [r4, #44]	; 0x2c
 8005cd4:	e79b      	b.n	8005c0e <HAL_ADC_ConfigChannel+0x5e>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005cd6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 8005cda:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8005cde:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005ce2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 8005ce6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005cea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005cee:	e791      	b.n	8005c14 <HAL_ADC_ConfigChannel+0x64>
  __HAL_LOCK(hadc);
 8005cf0:	2002      	movs	r0, #2
}
 8005cf2:	b002      	add	sp, #8
 8005cf4:	bcf0      	pop	{r4, r5, r6, r7}
 8005cf6:	4770      	bx	lr
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005cf8:	2d11      	cmp	r5, #17
 8005cfa:	d18b      	bne.n	8005c14 <HAL_ADC_ConfigChannel+0x64>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005cfc:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <HAL_ADC_ConfigChannel+0x168>)
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8005d04:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005d0c:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d0e:	e781      	b.n	8005c14 <HAL_ADC_ConfigChannel+0x64>
 8005d10:	40012000 	.word	0x40012000
 8005d14:	10000012 	.word	0x10000012
 8005d18:	40012300 	.word	0x40012300
 8005d1c:	200006cc 	.word	0x200006cc
 8005d20:	431bde83 	.word	0x431bde83

08005d24 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8005d24:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d26:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005d2a:	698f      	ldr	r7, [r1, #24]
  __HAL_LOCK(hadc);
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	f000 80db 	beq.w	8005ee8 <HAL_ADCEx_InjectedConfigChannel+0x1c4>
 8005d32:	2301      	movs	r3, #1
 8005d34:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8005d38:	680e      	ldr	r6, [r1, #0]
 8005d3a:	2e09      	cmp	r6, #9
 8005d3c:	d870      	bhi.n	8005e20 <HAL_ADCEx_InjectedConfigChannel+0xfc>
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8005d3e:	6803      	ldr	r3, [r0, #0]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8005d40:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8005d42:	691c      	ldr	r4, [r3, #16]
 8005d44:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8005d48:	2507      	movs	r5, #7
 8005d4a:	fa05 f50c 	lsl.w	r5, r5, ip
 8005d4e:	ea24 0405 	bic.w	r4, r4, r5
 8005d52:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8005d54:	691c      	ldr	r4, [r3, #16]
 8005d56:	fa02 f20c 	lsl.w	r2, r2, ip
 8005d5a:	4322      	orrs	r2, r4
 8005d5c:	611a      	str	r2, [r3, #16]
 8005d5e:	4634      	mov	r4, r6
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8005d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8005d62:	f8d1 e010 	ldr.w	lr, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8005d66:	684d      	ldr	r5, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8005d68:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005d6c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8005d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d70:	f10e 3cff 	add.w	ip, lr, #4294967295
 8005d74:	ea42 5c0c 	orr.w	ip, r2, ip, lsl #20
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8005d78:	1cea      	adds	r2, r5, #3
 8005d7a:	eba2 020e 	sub.w	r2, r2, lr
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8005d7e:	f8c3 c038 	str.w	ip, [r3, #56]	; 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8005d82:	b2d2      	uxtb	r2, r2
 8005d84:	f8d3 c038 	ldr.w	ip, [r3, #56]	; 0x38
 8005d88:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005d8c:	f04f 0e1f 	mov.w	lr, #31
 8005d90:	fa0e fe02 	lsl.w	lr, lr, r2
 8005d94:	ea2c 0c0e 	bic.w	ip, ip, lr
 8005d98:	f8c3 c038 	str.w	ip, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8005d9c:	f8d3 e038 	ldr.w	lr, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005da0:	f8df c154 	ldr.w	ip, [pc, #340]	; 8005ef8 <HAL_ADCEx_InjectedConfigChannel+0x1d4>
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8005da4:	fa04 f202 	lsl.w	r2, r4, r2
 8005da8:	ea42 020e 	orr.w	r2, r2, lr
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005dac:	4567      	cmp	r7, ip
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8005dae:	639a      	str	r2, [r3, #56]	; 0x38
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005db0:	d074      	beq.n	8005e9c <HAL_ADCEx_InjectedConfigChannel+0x178>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8005db2:	689c      	ldr	r4, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8005db4:	f8d1 c01c 	ldr.w	ip, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8005db8:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
 8005dbc:	609c      	str	r4, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	4317      	orrs	r7, r2
 8005dc2:	609f      	str	r7, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8005dc4:	689c      	ldr	r4, [r3, #8]
 8005dc6:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8005dca:	609c      	str	r4, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8005dcc:	689a      	ldr	r2, [r3, #8]
 8005dce:	ea42 020c 	orr.w	r2, r2, ip
 8005dd2:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8005dd4:	7d4a      	ldrb	r2, [r1, #21]
 8005dd6:	2a00      	cmp	r2, #0
 8005dd8:	d039      	beq.n	8005e4e <HAL_ADCEx_InjectedConfigChannel+0x12a>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005de0:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8005de2:	7d0a      	ldrb	r2, [r1, #20]
 8005de4:	2a00      	cmp	r2, #0
 8005de6:	d039      	beq.n	8005e5c <HAL_ADCEx_InjectedConfigChannel+0x138>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8005de8:	685a      	ldr	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 8005dea:	2d02      	cmp	r5, #2
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8005dec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005df0:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8005df2:	d039      	beq.n	8005e68 <HAL_ADCEx_InjectedConfigChannel+0x144>
 8005df4:	2d03      	cmp	r5, #3
 8005df6:	d065      	beq.n	8005ec4 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
 8005df8:	2d01      	cmp	r5, #1
 8005dfa:	d058      	beq.n	8005eae <HAL_ADCEx_InjectedConfigChannel+0x18a>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8005dfc:	6a1a      	ldr	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8005dfe:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8005e00:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8005e04:	f022 020f 	bic.w	r2, r2, #15
 8005e08:	621a      	str	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8005e0a:	6a1a      	ldr	r2, [r3, #32]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8005e10:	4a36      	ldr	r2, [pc, #216]	; (8005eec <HAL_ADCEx_InjectedConfigChannel+0x1c8>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d035      	beq.n	8005e82 <HAL_ADCEx_InjectedConfigChannel+0x15e>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e16:	2300      	movs	r3, #0
 8005e18:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005e1c:	4618      	mov	r0, r3
}
 8005e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8005e20:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8005e22:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8005e24:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8005e28:	b2b4      	uxth	r4, r6
 8005e2a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8005e2e:	3d1e      	subs	r5, #30
 8005e30:	f04f 0e07 	mov.w	lr, #7
 8005e34:	fa0e fe05 	lsl.w	lr, lr, r5
 8005e38:	ea2c 0c0e 	bic.w	ip, ip, lr
 8005e3c:	f8c3 c00c 	str.w	ip, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8005e40:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8005e44:	40aa      	lsls	r2, r5
 8005e46:	ea42 020c 	orr.w	r2, r2, ip
 8005e4a:	60da      	str	r2, [r3, #12]
 8005e4c:	e788      	b.n	8005d60 <HAL_ADCEx_InjectedConfigChannel+0x3c>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e54:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8005e56:	7d0a      	ldrb	r2, [r1, #20]
 8005e58:	2a00      	cmp	r2, #0
 8005e5a:	d1c5      	bne.n	8005de8 <HAL_ADCEx_InjectedConfigChannel+0xc4>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8005e5c:	685a      	ldr	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8005e5e:	2d02      	cmp	r5, #2
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8005e60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e64:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8005e66:	d1c5      	bne.n	8005df4 <HAL_ADCEx_InjectedConfigChannel+0xd0>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8005e68:	699a      	ldr	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8005e6a:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8005e6c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8005e70:	f022 020f 	bic.w	r2, r2, #15
 8005e74:	619a      	str	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8005e76:	699a      	ldr	r2, [r3, #24]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8005e7c:	4a1b      	ldr	r2, [pc, #108]	; (8005eec <HAL_ADCEx_InjectedConfigChannel+0x1c8>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d1c9      	bne.n	8005e16 <HAL_ADCEx_InjectedConfigChannel+0xf2>
 8005e82:	2e12      	cmp	r6, #18
 8005e84:	d029      	beq.n	8005eda <HAL_ADCEx_InjectedConfigChannel+0x1b6>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8005e86:	4b1a      	ldr	r3, [pc, #104]	; (8005ef0 <HAL_ADCEx_InjectedConfigChannel+0x1cc>)
 8005e88:	429e      	cmp	r6, r3
 8005e8a:	d001      	beq.n	8005e90 <HAL_ADCEx_InjectedConfigChannel+0x16c>
 8005e8c:	2e11      	cmp	r6, #17
 8005e8e:	d1c2      	bne.n	8005e16 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005e90:	4a18      	ldr	r2, [pc, #96]	; (8005ef4 <HAL_ADCEx_InjectedConfigChannel+0x1d0>)
 8005e92:	6853      	ldr	r3, [r2, #4]
 8005e94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e98:	6053      	str	r3, [r2, #4]
 8005e9a:	e7bc      	b.n	8005e16 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8005e9c:	689a      	ldr	r2, [r3, #8]
 8005e9e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8005ea2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8005ea4:	689a      	ldr	r2, [r3, #8]
 8005ea6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005eaa:	609a      	str	r2, [r3, #8]
 8005eac:	e792      	b.n	8005dd4 <HAL_ADCEx_InjectedConfigChannel+0xb0>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8005eae:	695a      	ldr	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8005eb0:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8005eb2:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8005eb6:	f022 020f 	bic.w	r2, r2, #15
 8005eba:	615a      	str	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8005ebc:	695a      	ldr	r2, [r3, #20]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	615a      	str	r2, [r3, #20]
      break;
 8005ec2:	e7a5      	b.n	8005e10 <HAL_ADCEx_InjectedConfigChannel+0xec>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8005ec4:	69da      	ldr	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8005ec6:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8005ec8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8005ecc:	f022 020f 	bic.w	r2, r2, #15
 8005ed0:	61da      	str	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8005ed2:	69da      	ldr	r2, [r3, #28]
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	61da      	str	r2, [r3, #28]
      break;
 8005ed8:	e79a      	b.n	8005e10 <HAL_ADCEx_InjectedConfigChannel+0xec>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005eda:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8005ede:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ee2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8005ee6:	e796      	b.n	8005e16 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  __HAL_LOCK(hadc);
 8005ee8:	2002      	movs	r0, #2
}
 8005eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eec:	40012000 	.word	0x40012000
 8005ef0:	10000012 	.word	0x10000012
 8005ef4:	40012300 	.word	0x40012300
 8005ef8:	000f0001 	.word	0x000f0001

08005efc <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005efc:	2800      	cmp	r0, #0
 8005efe:	d07c      	beq.n	8005ffa <HAL_CAN_Init+0xfe>
{
 8005f00:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005f02:	f890 3020 	ldrb.w	r3, [r0, #32]
 8005f06:	4604      	mov	r4, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d073      	beq.n	8005ff4 <HAL_CAN_Init+0xf8>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005f0c:	6822      	ldr	r2, [r4, #0]
 8005f0e:	6813      	ldr	r3, [r2, #0]
 8005f10:	f043 0301 	orr.w	r3, r3, #1
 8005f14:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f16:	f7ff fd85 	bl	8005a24 <HAL_GetTick>
 8005f1a:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005f1c:	e004      	b.n	8005f28 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005f1e:	f7ff fd81 	bl	8005a24 <HAL_GetTick>
 8005f22:	1b43      	subs	r3, r0, r5
 8005f24:	2b0a      	cmp	r3, #10
 8005f26:	d85c      	bhi.n	8005fe2 <HAL_CAN_Init+0xe6>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	07d1      	lsls	r1, r2, #31
 8005f2e:	d5f6      	bpl.n	8005f1e <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	f022 0202 	bic.w	r2, r2, #2
 8005f36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f38:	f7ff fd74 	bl	8005a24 <HAL_GetTick>
 8005f3c:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005f3e:	e004      	b.n	8005f4a <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005f40:	f7ff fd70 	bl	8005a24 <HAL_GetTick>
 8005f44:	1b40      	subs	r0, r0, r5
 8005f46:	280a      	cmp	r0, #10
 8005f48:	d84b      	bhi.n	8005fe2 <HAL_CAN_Init+0xe6>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005f4a:	6823      	ldr	r3, [r4, #0]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	0792      	lsls	r2, r2, #30
 8005f50:	d4f6      	bmi.n	8005f40 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005f52:	7e22      	ldrb	r2, [r4, #24]
 8005f54:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	bf0c      	ite	eq
 8005f5a:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005f5e:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8005f62:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005f64:	7e62      	ldrb	r2, [r4, #25]
 8005f66:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	bf0c      	ite	eq
 8005f6c:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005f70:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8005f74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005f76:	7ea2      	ldrb	r2, [r4, #26]
 8005f78:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	bf0c      	ite	eq
 8005f7e:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005f82:	f022 0220 	bicne.w	r2, r2, #32
 8005f86:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005f88:	7ee2      	ldrb	r2, [r4, #27]
 8005f8a:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	bf0c      	ite	eq
 8005f90:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005f94:	f042 0210 	orrne.w	r2, r2, #16
 8005f98:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005f9a:	7f22      	ldrb	r2, [r4, #28]
 8005f9c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	bf0c      	ite	eq
 8005fa2:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005fa6:	f022 0208 	bicne.w	r2, r2, #8
 8005faa:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005fac:	7f62      	ldrb	r2, [r4, #29]
 8005fae:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	bf0c      	ite	eq
 8005fb4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005fb8:	f022 0204 	bicne.w	r2, r2, #4
 8005fbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005fbe:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8005fc2:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	6861      	ldr	r1, [r4, #4]
 8005fca:	432a      	orrs	r2, r5
 8005fcc:	4302      	orrs	r2, r0
 8005fce:	3901      	subs	r1, #1
 8005fd0:	430a      	orrs	r2, r1

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005fd2:	2501      	movs	r5, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005fd4:	2100      	movs	r1, #0
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005fd6:	61da      	str	r2, [r3, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005fd8:	6261      	str	r1, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8005fda:	f884 5020 	strb.w	r5, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8005fde:	4608      	mov	r0, r1
}
 8005fe0:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005fe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8005fe4:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fea:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8005fec:	f884 2020 	strb.w	r2, [r4, #32]
      return HAL_ERROR;
 8005ff0:	2001      	movs	r0, #1
}
 8005ff2:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8005ff4:	f7fe fd50 	bl	8004a98 <HAL_CAN_MspInit>
 8005ff8:	e788      	b.n	8005f0c <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 8005ffa:	2001      	movs	r0, #1
}
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop

08006000 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006000:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8006004:	3b01      	subs	r3, #1
 8006006:	2b01      	cmp	r3, #1
 8006008:	d905      	bls.n	8006016 <HAL_CAN_ConfigFilter+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800600a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800600c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006010:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8006012:	2001      	movs	r0, #1
  }
}
 8006014:	4770      	bx	lr
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006016:	4b3d      	ldr	r3, [pc, #244]	; (800610c <HAL_CAN_ConfigFilter+0x10c>)
 8006018:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800601c:	f042 0201 	orr.w	r2, r2, #1
{
 8006020:	b4f0      	push	{r4, r5, r6, r7}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006022:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8006026:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800602a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800602e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8006032:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006036:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8006038:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800603c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006040:	694a      	ldr	r2, [r1, #20]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006042:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006046:	2501      	movs	r5, #1
 8006048:	f002 001f 	and.w	r0, r2, #31
 800604c:	fa05 f000 	lsl.w	r0, r5, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006050:	ea24 0400 	bic.w	r4, r4, r0
 8006054:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006058:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800605a:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800605c:	2d00      	cmp	r5, #0
 800605e:	d145      	bne.n	80060ec <HAL_CAN_ConfigFilter+0xec>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006060:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8006064:	4025      	ands	r5, r4
 8006066:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800606a:	00d2      	lsls	r2, r2, #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800606c:	68cf      	ldr	r7, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800606e:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006070:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006072:	880b      	ldrh	r3, [r1, #0]
 8006074:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006078:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800607c:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006080:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006084:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006088:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800608c:	698b      	ldr	r3, [r1, #24]
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800608e:	4a1f      	ldr	r2, [pc, #124]	; (800610c <HAL_CAN_ConfigFilter+0x10c>)
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006090:	bb33      	cbnz	r3, 80060e0 <HAL_CAN_ConfigFilter+0xe0>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006092:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8006096:	4023      	ands	r3, r4
 8006098:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800609c:	690b      	ldr	r3, [r1, #16]
 800609e:	b9c3      	cbnz	r3, 80060d2 <HAL_CAN_ConfigFilter+0xd2>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80060a0:	4b1a      	ldr	r3, [pc, #104]	; (800610c <HAL_CAN_ConfigFilter+0x10c>)
 80060a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80060a6:	4014      	ands	r4, r2
 80060a8:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80060ac:	6a0b      	ldr	r3, [r1, #32]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d105      	bne.n	80060be <HAL_CAN_ConfigFilter+0xbe>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80060b2:	4a16      	ldr	r2, [pc, #88]	; (800610c <HAL_CAN_ConfigFilter+0x10c>)
 80060b4:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
 80060b8:	4318      	orrs	r0, r3
 80060ba:	f8c2 021c 	str.w	r0, [r2, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80060be:	4a13      	ldr	r2, [pc, #76]	; (800610c <HAL_CAN_ConfigFilter+0x10c>)
 80060c0:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 80060c4:	f023 0301 	bic.w	r3, r3, #1
    return HAL_OK;
 80060c8:	2000      	movs	r0, #0
}
 80060ca:	bcf0      	pop	{r4, r5, r6, r7}
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80060cc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 80060d0:	4770      	bx	lr
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80060d2:	4a0e      	ldr	r2, [pc, #56]	; (800610c <HAL_CAN_ConfigFilter+0x10c>)
 80060d4:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 80060d8:	4303      	orrs	r3, r0
 80060da:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 80060de:	e7e5      	b.n	80060ac <HAL_CAN_ConfigFilter+0xac>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80060e0:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 80060e4:	4303      	orrs	r3, r0
 80060e6:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 80060ea:	e7d7      	b.n	800609c <HAL_CAN_ConfigFilter+0x9c>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80060ec:	2d01      	cmp	r5, #1
 80060ee:	d1cd      	bne.n	800608c <HAL_CAN_ConfigFilter+0x8c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80060f0:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 80060f4:	4305      	orrs	r5, r0
 80060f6:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80060fa:	00d2      	lsls	r2, r2, #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80060fc:	680f      	ldr	r7, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80060fe:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006100:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006102:	898b      	ldrh	r3, [r1, #12]
 8006104:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006108:	e7b6      	b.n	8006078 <HAL_CAN_ConfigFilter+0x78>
 800610a:	bf00      	nop
 800610c:	40006400 	.word	0x40006400

08006110 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006110:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006112:	f890 3020 	ldrb.w	r3, [r0, #32]
 8006116:	2b01      	cmp	r3, #1
{
 8006118:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 800611a:	d006      	beq.n	800612a <HAL_CAN_Start+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800611c:	6a43      	ldr	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800611e:	2601      	movs	r6, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8006120:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006124:	6243      	str	r3, [r0, #36]	; 0x24
  }
}
 8006126:	4630      	mov	r0, r6
 8006128:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800612a:	6802      	ldr	r2, [r0, #0]
 800612c:	b2de      	uxtb	r6, r3
    hcan->State = HAL_CAN_STATE_LISTENING;
 800612e:	2302      	movs	r3, #2
 8006130:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006134:	6813      	ldr	r3, [r2, #0]
 8006136:	f023 0301 	bic.w	r3, r3, #1
 800613a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800613c:	f7ff fc72 	bl	8005a24 <HAL_GetTick>
 8006140:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006142:	e004      	b.n	800614e <HAL_CAN_Start+0x3e>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006144:	f7ff fc6e 	bl	8005a24 <HAL_GetTick>
 8006148:	1b43      	subs	r3, r0, r5
 800614a:	2b0a      	cmp	r3, #10
 800614c:	d808      	bhi.n	8006160 <HAL_CAN_Start+0x50>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f013 0301 	ands.w	r3, r3, #1
 8006156:	d1f5      	bne.n	8006144 <HAL_CAN_Start+0x34>
    return HAL_OK;
 8006158:	461e      	mov	r6, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800615a:	6263      	str	r3, [r4, #36]	; 0x24
}
 800615c:	4630      	mov	r0, r6
 800615e:	bd70      	pop	{r4, r5, r6, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006160:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8006162:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006168:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800616a:	f884 2020 	strb.w	r2, [r4, #32]
}
 800616e:	4630      	mov	r0, r6
 8006170:	bd70      	pop	{r4, r5, r6, pc}
 8006172:	bf00      	nop

08006174 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8006178:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800617c:	3c01      	subs	r4, #1
 800617e:	2c01      	cmp	r4, #1
 8006180:	d866      	bhi.n	8006250 <HAL_CAN_GetRxMessage+0xdc>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006182:	6804      	ldr	r4, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006184:	b949      	cbnz	r1, 800619a <HAL_CAN_GetRxMessage+0x26>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006186:	68e5      	ldr	r5, [r4, #12]
 8006188:	07ae      	lsls	r6, r5, #30
 800618a:	d109      	bne.n	80061a0 <HAL_CAN_GetRxMessage+0x2c>
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800618c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800618e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006192:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8006194:	2001      	movs	r0, #1
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8006196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800619a:	6925      	ldr	r5, [r4, #16]
 800619c:	07ad      	lsls	r5, r5, #30
 800619e:	d0f5      	beq.n	800618c <HAL_CAN_GetRxMessage+0x18>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80061a0:	eb04 1501 	add.w	r5, r4, r1, lsl #4
 80061a4:	010e      	lsls	r6, r1, #4
 80061a6:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80061aa:	f007 0704 	and.w	r7, r7, #4
 80061ae:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80061b0:	2f00      	cmp	r7, #0
 80061b2:	d054      	beq.n	800625e <HAL_CAN_GetRxMessage+0xea>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80061b4:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80061b8:	08ff      	lsrs	r7, r7, #3
 80061ba:	6057      	str	r7, [r2, #4]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80061bc:	f8d5 e1b0 	ldr.w	lr, [r5, #432]	; 0x1b0
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80061c0:	f8d5 c1b4 	ldr.w	ip, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80061c4:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80061c8:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80061cc:	4434      	add	r4, r6
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80061ce:	f00e 0e02 	and.w	lr, lr, #2
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80061d2:	f8d4 81b8 	ldr.w	r8, [r4, #440]	; 0x1b8
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80061d6:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80061da:	f00c 040f 	and.w	r4, ip, #15
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80061de:	0c2d      	lsrs	r5, r5, #16
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80061e0:	e9c2 e403 	strd	lr, r4, [r2, #12]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80061e4:	e9c2 5705 	strd	r5, r7, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80061e8:	f883 8000 	strb.w	r8, [r3]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80061ec:	6802      	ldr	r2, [r0, #0]
 80061ee:	4432      	add	r2, r6
 80061f0:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80061f4:	0a12      	lsrs	r2, r2, #8
 80061f6:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80061f8:	6802      	ldr	r2, [r0, #0]
 80061fa:	4432      	add	r2, r6
 80061fc:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8006200:	0c12      	lsrs	r2, r2, #16
 8006202:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006204:	6802      	ldr	r2, [r0, #0]
 8006206:	4432      	add	r2, r6
 8006208:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800620c:	0e12      	lsrs	r2, r2, #24
 800620e:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006210:	6802      	ldr	r2, [r0, #0]
 8006212:	4432      	add	r2, r6
 8006214:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8006218:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800621a:	6802      	ldr	r2, [r0, #0]
 800621c:	4432      	add	r2, r6
 800621e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8006222:	0a12      	lsrs	r2, r2, #8
 8006224:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006226:	6802      	ldr	r2, [r0, #0]
 8006228:	4432      	add	r2, r6
 800622a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800622e:	0c12      	lsrs	r2, r2, #16
 8006230:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006232:	6802      	ldr	r2, [r0, #0]
 8006234:	4416      	add	r6, r2
 8006236:	f8d6 21bc 	ldr.w	r2, [r6, #444]	; 0x1bc
 800623a:	0e12      	lsrs	r2, r2, #24
 800623c:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800623e:	6802      	ldr	r2, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006240:	b991      	cbnz	r1, 8006268 <HAL_CAN_GetRxMessage+0xf4>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006242:	68d3      	ldr	r3, [r2, #12]
 8006244:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 8006248:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800624a:	60d3      	str	r3, [r2, #12]
}
 800624c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006250:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006252:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006256:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8006258:	2001      	movs	r0, #1
}
 800625a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800625e:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8006262:	0d7f      	lsrs	r7, r7, #21
 8006264:	6017      	str	r7, [r2, #0]
 8006266:	e7a9      	b.n	80061bc <HAL_CAN_GetRxMessage+0x48>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006268:	6913      	ldr	r3, [r2, #16]
 800626a:	f043 0320 	orr.w	r3, r3, #32
 800626e:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 8006270:	2000      	movs	r0, #0
}
 8006272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006276:	bf00      	nop

08006278 <HAL_CAN_GetRxFifoFillLevel>:
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
  uint32_t filllevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006278:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800627c:	3b01      	subs	r3, #1
 800627e:	2b01      	cmp	r3, #1
 8006280:	d901      	bls.n	8006286 <HAL_CAN_GetRxFifoFillLevel+0xe>
  uint32_t filllevel = 0U;
 8006282:	2000      	movs	r0, #0
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
}
 8006284:	4770      	bx	lr
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8006286:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0)
 8006288:	b919      	cbnz	r1, 8006292 <HAL_CAN_GetRxFifoFillLevel+0x1a>
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800628a:	68d8      	ldr	r0, [r3, #12]
 800628c:	f000 0003 	and.w	r0, r0, #3
 8006290:	4770      	bx	lr
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8006292:	6918      	ldr	r0, [r3, #16]
 8006294:	f000 0003 	and.w	r0, r0, #3
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop

0800629c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800629c:	4908      	ldr	r1, [pc, #32]	; (80062c0 <HAL_NVIC_SetPriorityGrouping+0x24>)
 800629e:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062a0:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80062a2:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80062a4:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80062a8:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80062aa:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80062b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80062b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80062b8:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 80062bc:	60cb      	str	r3, [r1, #12]
 80062be:	4770      	bx	lr
 80062c0:	e000ed00 	.word	0xe000ed00

080062c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062c4:	4b19      	ldr	r3, [pc, #100]	; (800632c <HAL_NVIC_SetPriority+0x68>)
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80062cc:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062ce:	f1c3 0507 	rsb	r5, r3, #7
 80062d2:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062d4:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062d8:	bf28      	it	cs
 80062da:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062dc:	2c06      	cmp	r4, #6
 80062de:	d919      	bls.n	8006314 <HAL_NVIC_SetPriority+0x50>
 80062e0:	3b03      	subs	r3, #3
 80062e2:	f04f 34ff 	mov.w	r4, #4294967295
 80062e6:	409c      	lsls	r4, r3
 80062e8:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062ec:	f04f 34ff 	mov.w	r4, #4294967295
 80062f0:	40ac      	lsls	r4, r5
 80062f2:	ea21 0104 	bic.w	r1, r1, r4
 80062f6:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80062f8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062fa:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80062fe:	db0c      	blt.n	800631a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006300:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006304:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006308:	0109      	lsls	r1, r1, #4
 800630a:	b2c9      	uxtb	r1, r1
 800630c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006310:	bc30      	pop	{r4, r5}
 8006312:	4770      	bx	lr
 8006314:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006316:	4613      	mov	r3, r2
 8006318:	e7e8      	b.n	80062ec <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800631a:	4b05      	ldr	r3, [pc, #20]	; (8006330 <HAL_NVIC_SetPriority+0x6c>)
 800631c:	f000 000f 	and.w	r0, r0, #15
 8006320:	0109      	lsls	r1, r1, #4
 8006322:	4403      	add	r3, r0
 8006324:	b2c9      	uxtb	r1, r1
 8006326:	7619      	strb	r1, [r3, #24]
 8006328:	bc30      	pop	{r4, r5}
 800632a:	4770      	bx	lr
 800632c:	e000ed00 	.word	0xe000ed00
 8006330:	e000ecfc 	.word	0xe000ecfc

08006334 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006334:	2800      	cmp	r0, #0
 8006336:	db07      	blt.n	8006348 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006338:	f000 011f 	and.w	r1, r0, #31
 800633c:	4a03      	ldr	r2, [pc, #12]	; (800634c <HAL_NVIC_EnableIRQ+0x18>)
 800633e:	0940      	lsrs	r0, r0, #5
 8006340:	2301      	movs	r3, #1
 8006342:	408b      	lsls	r3, r1
 8006344:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	e000e100 	.word	0xe000e100

08006350 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006350:	3801      	subs	r0, #1
 8006352:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006356:	d20e      	bcs.n	8006376 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006358:	4b08      	ldr	r3, [pc, #32]	; (800637c <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800635a:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800635c:	4c08      	ldr	r4, [pc, #32]	; (8006380 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800635e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006360:	20f0      	movs	r0, #240	; 0xf0
 8006362:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006366:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006368:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800636a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800636c:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 800636e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006372:	6019      	str	r1, [r3, #0]
 8006374:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006376:	2001      	movs	r0, #1
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	e000e010 	.word	0xe000e010
 8006380:	e000ed00 	.word	0xe000ed00

08006384 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop

08006388 <HAL_SYSTICK_IRQHandler>:
{
 8006388:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800638a:	f7ff fffb 	bl	8006384 <HAL_SYSTICK_Callback>
}
 800638e:	bd08      	pop	{r3, pc}

08006390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006394:	468b      	mov	fp, r1
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006396:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 8006594 <HAL_GPIO_Init+0x204>
 800639a:	6809      	ldr	r1, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800639c:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 8006598 <HAL_GPIO_Init+0x208>
{
 80063a0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 80063a2:	2300      	movs	r3, #0
 80063a4:	46d9      	mov	r9, fp
 80063a6:	e003      	b.n	80063b0 <HAL_GPIO_Init+0x20>
 80063a8:	3301      	adds	r3, #1
 80063aa:	2b10      	cmp	r3, #16
 80063ac:	f000 8085 	beq.w	80064ba <HAL_GPIO_Init+0x12a>
    ioposition = 0x01U << position;
 80063b0:	2201      	movs	r2, #1
 80063b2:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80063b4:	ea02 0b01 	and.w	fp, r2, r1
    if(iocurrent == ioposition)
 80063b8:	438a      	bics	r2, r1
 80063ba:	d1f5      	bne.n	80063a8 <HAL_GPIO_Init+0x18>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80063bc:	f8d9 5004 	ldr.w	r5, [r9, #4]
 80063c0:	f005 0203 	and.w	r2, r5, #3
 80063c4:	1e54      	subs	r4, r2, #1
 80063c6:	2c01      	cmp	r4, #1
 80063c8:	ea4f 0743 	mov.w	r7, r3, lsl #1
 80063cc:	d978      	bls.n	80064c0 <HAL_GPIO_Init+0x130>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063ce:	2a03      	cmp	r2, #3
 80063d0:	f040 80b6 	bne.w	8006540 <HAL_GPIO_Init+0x1b0>
 80063d4:	40ba      	lsls	r2, r7
 80063d6:	43d4      	mvns	r4, r2
 80063d8:	9400      	str	r4, [sp, #0]
      temp = GPIOx->MODER;
 80063da:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80063dc:	9c00      	ldr	r4, [sp, #0]
 80063de:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80063e0:	4322      	orrs	r2, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80063e2:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 80063e6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80063e8:	d0de      	beq.n	80063a8 <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063ea:	2200      	movs	r2, #0
 80063ec:	9203      	str	r2, [sp, #12]
 80063ee:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 80063f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063f6:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
 80063fa:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 80063fe:	f023 0403 	bic.w	r4, r3, #3
 8006402:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8006406:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800640a:	f504 349c 	add.w	r4, r4, #79872	; 0x13800
 800640e:	9203      	str	r2, [sp, #12]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006410:	f003 0603 	and.w	r6, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006414:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006416:	68a7      	ldr	r7, [r4, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006418:	00b6      	lsls	r6, r6, #2
 800641a:	220f      	movs	r2, #15
 800641c:	40b2      	lsls	r2, r6
 800641e:	ea27 0202 	bic.w	r2, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006422:	4f56      	ldr	r7, [pc, #344]	; (800657c <HAL_GPIO_Init+0x1ec>)
 8006424:	42b8      	cmp	r0, r7
 8006426:	d01c      	beq.n	8006462 <HAL_GPIO_Init+0xd2>
 8006428:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800642c:	42b8      	cmp	r0, r7
 800642e:	f000 808c 	beq.w	800654a <HAL_GPIO_Init+0x1ba>
 8006432:	4f53      	ldr	r7, [pc, #332]	; (8006580 <HAL_GPIO_Init+0x1f0>)
 8006434:	42b8      	cmp	r0, r7
 8006436:	f000 808d 	beq.w	8006554 <HAL_GPIO_Init+0x1c4>
 800643a:	4f52      	ldr	r7, [pc, #328]	; (8006584 <HAL_GPIO_Init+0x1f4>)
 800643c:	42b8      	cmp	r0, r7
 800643e:	f000 808e 	beq.w	800655e <HAL_GPIO_Init+0x1ce>
 8006442:	4f51      	ldr	r7, [pc, #324]	; (8006588 <HAL_GPIO_Init+0x1f8>)
 8006444:	42b8      	cmp	r0, r7
 8006446:	f000 808f 	beq.w	8006568 <HAL_GPIO_Init+0x1d8>
 800644a:	4f50      	ldr	r7, [pc, #320]	; (800658c <HAL_GPIO_Init+0x1fc>)
 800644c:	42b8      	cmp	r0, r7
 800644e:	f000 8090 	beq.w	8006572 <HAL_GPIO_Init+0x1e2>
 8006452:	4f4f      	ldr	r7, [pc, #316]	; (8006590 <HAL_GPIO_Init+0x200>)
 8006454:	42b8      	cmp	r0, r7
 8006456:	bf0c      	ite	eq
 8006458:	2706      	moveq	r7, #6
 800645a:	2707      	movne	r7, #7
 800645c:	fa07 f606 	lsl.w	r6, r7, r6
 8006460:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006462:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8006464:	f8dc 2000 	ldr.w	r2, [ip]
        temp &= ~((uint32_t)iocurrent);
 8006468:	ea6f 060b 	mvn.w	r6, fp
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800646c:	03ec      	lsls	r4, r5, #15
        temp &= ~((uint32_t)iocurrent);
 800646e:	bf54      	ite	pl
 8006470:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8006472:	ea4b 0202 	orrmi.w	r2, fp, r2
        }
        EXTI->IMR = temp;
 8006476:	f8cc 2000 	str.w	r2, [ip]

        temp = EXTI->EMR;
 800647a:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800647e:	03aa      	lsls	r2, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8006480:	bf54      	ite	pl
 8006482:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8006484:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->EMR = temp;
 8006488:	f8cc 4004 	str.w	r4, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800648c:	f8dc 4008 	ldr.w	r4, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006490:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8006492:	bf54      	ite	pl
 8006494:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8006496:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->RTSR = temp;
 800649a:	f8cc 4008 	str.w	r4, [ip, #8]

        temp = EXTI->FTSR;
 800649e:	f8dc 200c 	ldr.w	r2, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80064a2:	02ac      	lsls	r4, r5, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064a4:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 80064a8:	bf54      	ite	pl
 80064aa:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 80064ac:	ea4b 0202 	orrmi.w	r2, fp, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064b0:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 80064b2:	f8cc 200c 	str.w	r2, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064b6:	f47f af7b 	bne.w	80063b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80064ba:	b005      	add	sp, #20
 80064bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 80064c0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80064c2:	2403      	movs	r4, #3
 80064c4:	40bc      	lsls	r4, r7
 80064c6:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064ca:	f8d9 600c 	ldr.w	r6, [r9, #12]
 80064ce:	40be      	lsls	r6, r7
 80064d0:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 80064d4:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80064d6:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064da:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064de:	ea2e 0e0b 	bic.w	lr, lr, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064e2:	409e      	lsls	r6, r3
 80064e4:	ea46 060e 	orr.w	r6, r6, lr
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80064e8:	43e4      	mvns	r4, r4
 80064ea:	9400      	str	r4, [sp, #0]
        GPIOx->OTYPER = temp;
 80064ec:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 80064ee:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80064f0:	ea06 0e04 	and.w	lr, r6, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064f4:	f8d9 6008 	ldr.w	r6, [r9, #8]
 80064f8:	40be      	lsls	r6, r7
 80064fa:	ea46 060e 	orr.w	r6, r6, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064fe:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8006500:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006502:	d001      	beq.n	8006508 <HAL_GPIO_Init+0x178>
 8006504:	40ba      	lsls	r2, r7
 8006506:	e768      	b.n	80063da <HAL_GPIO_Init+0x4a>
        temp = GPIOx->AFR[position >> 3U];
 8006508:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 800650c:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006510:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8006514:	f8d8 4020 	ldr.w	r4, [r8, #32]
 8006518:	9401      	str	r4, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800651a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800651e:	240f      	movs	r4, #15
 8006520:	fa04 f60e 	lsl.w	r6, r4, lr
 8006524:	9c01      	ldr	r4, [sp, #4]
 8006526:	ea24 0606 	bic.w	r6, r4, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800652a:	f8d9 4010 	ldr.w	r4, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800652e:	9601      	str	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006530:	fa04 f60e 	lsl.w	r6, r4, lr
 8006534:	9c01      	ldr	r4, [sp, #4]
 8006536:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 8006538:	40ba      	lsls	r2, r7
 800653a:	f8c8 6020 	str.w	r6, [r8, #32]
 800653e:	e74c      	b.n	80063da <HAL_GPIO_Init+0x4a>
 8006540:	2403      	movs	r4, #3
 8006542:	40bc      	lsls	r4, r7
 8006544:	43e4      	mvns	r4, r4
 8006546:	9400      	str	r4, [sp, #0]
 8006548:	e7d1      	b.n	80064ee <HAL_GPIO_Init+0x15e>
 800654a:	2701      	movs	r7, #1
 800654c:	fa07 f606 	lsl.w	r6, r7, r6
 8006550:	4332      	orrs	r2, r6
 8006552:	e786      	b.n	8006462 <HAL_GPIO_Init+0xd2>
 8006554:	2702      	movs	r7, #2
 8006556:	fa07 f606 	lsl.w	r6, r7, r6
 800655a:	4332      	orrs	r2, r6
 800655c:	e781      	b.n	8006462 <HAL_GPIO_Init+0xd2>
 800655e:	2703      	movs	r7, #3
 8006560:	fa07 f606 	lsl.w	r6, r7, r6
 8006564:	4332      	orrs	r2, r6
 8006566:	e77c      	b.n	8006462 <HAL_GPIO_Init+0xd2>
 8006568:	2704      	movs	r7, #4
 800656a:	fa07 f606 	lsl.w	r6, r7, r6
 800656e:	4332      	orrs	r2, r6
 8006570:	e777      	b.n	8006462 <HAL_GPIO_Init+0xd2>
 8006572:	2705      	movs	r7, #5
 8006574:	fa07 f606 	lsl.w	r6, r7, r6
 8006578:	4332      	orrs	r2, r6
 800657a:	e772      	b.n	8006462 <HAL_GPIO_Init+0xd2>
 800657c:	40020000 	.word	0x40020000
 8006580:	40020800 	.word	0x40020800
 8006584:	40020c00 	.word	0x40020c00
 8006588:	40021000 	.word	0x40021000
 800658c:	40021400 	.word	0x40021400
 8006590:	40021800 	.word	0x40021800
 8006594:	40023800 	.word	0x40023800
 8006598:	40013c00 	.word	0x40013c00

0800659c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800659c:	6903      	ldr	r3, [r0, #16]
 800659e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80065a0:	bf14      	ite	ne
 80065a2:	2001      	movne	r0, #1
 80065a4:	2000      	moveq	r0, #0
 80065a6:	4770      	bx	lr

080065a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80065a8:	b902      	cbnz	r2, 80065ac <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80065aa:	0409      	lsls	r1, r1, #16
 80065ac:	6181      	str	r1, [r0, #24]
  }
}
 80065ae:	4770      	bx	lr

080065b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80065b0:	b530      	push	{r4, r5, lr}
 80065b2:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 80065b4:	4b19      	ldr	r3, [pc, #100]	; (800661c <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80065b6:	491a      	ldr	r1, [pc, #104]	; (8006620 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80065b8:	4d1a      	ldr	r5, [pc, #104]	; (8006624 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80065ba:	2200      	movs	r2, #0
 80065bc:	9201      	str	r2, [sp, #4]
 80065be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80065c4:	641a      	str	r2, [r3, #64]	; 0x40
 80065c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065cc:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80065ce:	2301      	movs	r3, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 80065d0:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80065d2:	600b      	str	r3, [r1, #0]
  tickstart = HAL_GetTick();
 80065d4:	f7ff fa26 	bl	8005a24 <HAL_GetTick>
 80065d8:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80065da:	e005      	b.n	80065e8 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80065dc:	f7ff fa22 	bl	8005a24 <HAL_GetTick>
 80065e0:	1b00      	subs	r0, r0, r4
 80065e2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80065e6:	d816      	bhi.n	8006616 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80065e8:	686b      	ldr	r3, [r5, #4]
 80065ea:	03da      	lsls	r2, r3, #15
 80065ec:	d5f6      	bpl.n	80065dc <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80065ee:	4b0e      	ldr	r3, [pc, #56]	; (8006628 <HAL_PWREx_EnableOverDrive+0x78>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80065f0:	4d0c      	ldr	r5, [pc, #48]	; (8006624 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80065f2:	2201      	movs	r2, #1
 80065f4:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80065f6:	f7ff fa15 	bl	8005a24 <HAL_GetTick>
 80065fa:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80065fc:	e005      	b.n	800660a <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80065fe:	f7ff fa11 	bl	8005a24 <HAL_GetTick>
 8006602:	1b00      	subs	r0, r0, r4
 8006604:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006608:	d805      	bhi.n	8006616 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800660a:	686b      	ldr	r3, [r5, #4]
 800660c:	039b      	lsls	r3, r3, #14
 800660e:	d5f6      	bpl.n	80065fe <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8006610:	2000      	movs	r0, #0
}
 8006612:	b003      	add	sp, #12
 8006614:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8006616:	2003      	movs	r0, #3
}
 8006618:	b003      	add	sp, #12
 800661a:	bd30      	pop	{r4, r5, pc}
 800661c:	40023800 	.word	0x40023800
 8006620:	420e0040 	.word	0x420e0040
 8006624:	40007000 	.word	0x40007000
 8006628:	420e0044 	.word	0x420e0044

0800662c <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800662c:	2800      	cmp	r0, #0
 800662e:	f000 8087 	beq.w	8006740 <HAL_RCC_ClockConfig+0x114>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006632:	4a48      	ldr	r2, [pc, #288]	; (8006754 <HAL_RCC_ClockConfig+0x128>)
 8006634:	6813      	ldr	r3, [r2, #0]
 8006636:	f003 030f 	and.w	r3, r3, #15
 800663a:	428b      	cmp	r3, r1
{
 800663c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006640:	460d      	mov	r5, r1
 8006642:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006644:	d209      	bcs.n	800665a <HAL_RCC_ClockConfig+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006646:	b2cb      	uxtb	r3, r1
 8006648:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800664a:	6813      	ldr	r3, [r2, #0]
 800664c:	f003 030f 	and.w	r3, r3, #15
 8006650:	428b      	cmp	r3, r1
 8006652:	d002      	beq.n	800665a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8006654:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8006656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	0798      	lsls	r0, r3, #30
 800665e:	d514      	bpl.n	800668a <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006660:	0759      	lsls	r1, r3, #29
 8006662:	d504      	bpl.n	800666e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006664:	493c      	ldr	r1, [pc, #240]	; (8006758 <HAL_RCC_ClockConfig+0x12c>)
 8006666:	688a      	ldr	r2, [r1, #8]
 8006668:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800666c:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800666e:	071a      	lsls	r2, r3, #28
 8006670:	d504      	bpl.n	800667c <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006672:	4939      	ldr	r1, [pc, #228]	; (8006758 <HAL_RCC_ClockConfig+0x12c>)
 8006674:	688a      	ldr	r2, [r1, #8]
 8006676:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800667a:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800667c:	4936      	ldr	r1, [pc, #216]	; (8006758 <HAL_RCC_ClockConfig+0x12c>)
 800667e:	68a0      	ldr	r0, [r4, #8]
 8006680:	688a      	ldr	r2, [r1, #8]
 8006682:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006686:	4302      	orrs	r2, r0
 8006688:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800668a:	07df      	lsls	r7, r3, #31
 800668c:	d521      	bpl.n	80066d2 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800668e:	6862      	ldr	r2, [r4, #4]
 8006690:	2a01      	cmp	r2, #1
 8006692:	d057      	beq.n	8006744 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006694:	1e93      	subs	r3, r2, #2
 8006696:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006698:	4b2f      	ldr	r3, [pc, #188]	; (8006758 <HAL_RCC_ClockConfig+0x12c>)
 800669a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800669c:	d94d      	bls.n	800673a <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800669e:	0799      	lsls	r1, r3, #30
 80066a0:	d5d8      	bpl.n	8006654 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066a2:	4e2d      	ldr	r6, [pc, #180]	; (8006758 <HAL_RCC_ClockConfig+0x12c>)
 80066a4:	68b3      	ldr	r3, [r6, #8]
 80066a6:	f023 0303 	bic.w	r3, r3, #3
 80066aa:	4313      	orrs	r3, r2
 80066ac:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80066ae:	f7ff f9b9 	bl	8005a24 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066b2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80066b6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066b8:	e004      	b.n	80066c4 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066ba:	f7ff f9b3 	bl	8005a24 <HAL_GetTick>
 80066be:	1bc0      	subs	r0, r0, r7
 80066c0:	4540      	cmp	r0, r8
 80066c2:	d844      	bhi.n	800674e <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066c4:	68b3      	ldr	r3, [r6, #8]
 80066c6:	6862      	ldr	r2, [r4, #4]
 80066c8:	f003 030c 	and.w	r3, r3, #12
 80066cc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80066d0:	d1f3      	bne.n	80066ba <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066d2:	4a20      	ldr	r2, [pc, #128]	; (8006754 <HAL_RCC_ClockConfig+0x128>)
 80066d4:	6813      	ldr	r3, [r2, #0]
 80066d6:	f003 030f 	and.w	r3, r3, #15
 80066da:	42ab      	cmp	r3, r5
 80066dc:	d906      	bls.n	80066ec <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066de:	b2eb      	uxtb	r3, r5
 80066e0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066e2:	6813      	ldr	r3, [r2, #0]
 80066e4:	f003 030f 	and.w	r3, r3, #15
 80066e8:	42ab      	cmp	r3, r5
 80066ea:	d1b3      	bne.n	8006654 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066ec:	6823      	ldr	r3, [r4, #0]
 80066ee:	075a      	lsls	r2, r3, #29
 80066f0:	d506      	bpl.n	8006700 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066f2:	4919      	ldr	r1, [pc, #100]	; (8006758 <HAL_RCC_ClockConfig+0x12c>)
 80066f4:	68e0      	ldr	r0, [r4, #12]
 80066f6:	688a      	ldr	r2, [r1, #8]
 80066f8:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80066fc:	4302      	orrs	r2, r0
 80066fe:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006700:	071b      	lsls	r3, r3, #28
 8006702:	d507      	bpl.n	8006714 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006704:	4a14      	ldr	r2, [pc, #80]	; (8006758 <HAL_RCC_ClockConfig+0x12c>)
 8006706:	6921      	ldr	r1, [r4, #16]
 8006708:	6893      	ldr	r3, [r2, #8]
 800670a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800670e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006712:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006714:	f000 f84e 	bl	80067b4 <HAL_RCC_GetSysClockFreq>
 8006718:	4a0f      	ldr	r2, [pc, #60]	; (8006758 <HAL_RCC_ClockConfig+0x12c>)
 800671a:	4c10      	ldr	r4, [pc, #64]	; (800675c <HAL_RCC_ClockConfig+0x130>)
 800671c:	6892      	ldr	r2, [r2, #8]
 800671e:	4910      	ldr	r1, [pc, #64]	; (8006760 <HAL_RCC_ClockConfig+0x134>)
 8006720:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8006724:	4603      	mov	r3, r0
 8006726:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8006728:	480e      	ldr	r0, [pc, #56]	; (8006764 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800672a:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 800672c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800672e:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8006730:	f7ff f92e 	bl	8005990 <HAL_InitTick>
  return HAL_OK;
 8006734:	2000      	movs	r0, #0
}
 8006736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800673a:	0198      	lsls	r0, r3, #6
 800673c:	d4b1      	bmi.n	80066a2 <HAL_RCC_ClockConfig+0x76>
 800673e:	e789      	b.n	8006654 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8006740:	2001      	movs	r0, #1
}
 8006742:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006744:	4b04      	ldr	r3, [pc, #16]	; (8006758 <HAL_RCC_ClockConfig+0x12c>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	039e      	lsls	r6, r3, #14
 800674a:	d4aa      	bmi.n	80066a2 <HAL_RCC_ClockConfig+0x76>
 800674c:	e782      	b.n	8006654 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800674e:	2003      	movs	r0, #3
 8006750:	e781      	b.n	8006656 <HAL_RCC_ClockConfig+0x2a>
 8006752:	bf00      	nop
 8006754:	40023c00 	.word	0x40023c00
 8006758:	40023800 	.word	0x40023800
 800675c:	0800a698 	.word	0x0800a698
 8006760:	200006cc 	.word	0x200006cc
 8006764:	200006d4 	.word	0x200006d4

08006768 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8006768:	4b01      	ldr	r3, [pc, #4]	; (8006770 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800676a:	6818      	ldr	r0, [r3, #0]
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	200006cc 	.word	0x200006cc

08006774 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006774:	4b04      	ldr	r3, [pc, #16]	; (8006788 <HAL_RCC_GetPCLK1Freq+0x14>)
 8006776:	4a05      	ldr	r2, [pc, #20]	; (800678c <HAL_RCC_GetPCLK1Freq+0x18>)
 8006778:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800677a:	4905      	ldr	r1, [pc, #20]	; (8006790 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800677c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8006780:	6808      	ldr	r0, [r1, #0]
 8006782:	5cd3      	ldrb	r3, [r2, r3]
}
 8006784:	40d8      	lsrs	r0, r3
 8006786:	4770      	bx	lr
 8006788:	40023800 	.word	0x40023800
 800678c:	0800a6a8 	.word	0x0800a6a8
 8006790:	200006cc 	.word	0x200006cc

08006794 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006794:	4b04      	ldr	r3, [pc, #16]	; (80067a8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8006796:	4a05      	ldr	r2, [pc, #20]	; (80067ac <HAL_RCC_GetPCLK2Freq+0x18>)
 8006798:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800679a:	4905      	ldr	r1, [pc, #20]	; (80067b0 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800679c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80067a0:	6808      	ldr	r0, [r1, #0]
 80067a2:	5cd3      	ldrb	r3, [r2, r3]
}
 80067a4:	40d8      	lsrs	r0, r3
 80067a6:	4770      	bx	lr
 80067a8:	40023800 	.word	0x40023800
 80067ac:	0800a6a8 	.word	0x0800a6a8
 80067b0:	200006cc 	.word	0x200006cc

080067b4 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067b4:	4928      	ldr	r1, [pc, #160]	; (8006858 <HAL_RCC_GetSysClockFreq+0xa4>)
{
 80067b6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067b8:	688b      	ldr	r3, [r1, #8]
 80067ba:	f003 030c 	and.w	r3, r3, #12
 80067be:	2b08      	cmp	r3, #8
 80067c0:	d007      	beq.n	80067d2 <HAL_RCC_GetSysClockFreq+0x1e>
 80067c2:	2b0c      	cmp	r3, #12
 80067c4:	d01d      	beq.n	8006802 <HAL_RCC_GetSysClockFreq+0x4e>
 80067c6:	4a25      	ldr	r2, [pc, #148]	; (800685c <HAL_RCC_GetSysClockFreq+0xa8>)
 80067c8:	4825      	ldr	r0, [pc, #148]	; (8006860 <HAL_RCC_GetSysClockFreq+0xac>)
 80067ca:	2b04      	cmp	r3, #4
 80067cc:	bf08      	it	eq
 80067ce:	4610      	moveq	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80067d0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067d2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067d4:	684b      	ldr	r3, [r1, #4]
 80067d6:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067da:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067de:	d130      	bne.n	8006842 <HAL_RCC_GetSysClockFreq+0x8e>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067e0:	6849      	ldr	r1, [r1, #4]
 80067e2:	481f      	ldr	r0, [pc, #124]	; (8006860 <HAL_RCC_GetSysClockFreq+0xac>)
 80067e4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80067e8:	fba1 0100 	umull	r0, r1, r1, r0
 80067ec:	f7fa fa6c 	bl	8000cc8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80067f0:	4b19      	ldr	r3, [pc, #100]	; (8006858 <HAL_RCC_GetSysClockFreq+0xa4>)
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80067f8:	3301      	adds	r3, #1
 80067fa:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80067fc:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8006800:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006802:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006804:	684b      	ldr	r3, [r1, #4]
 8006806:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800680a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800680e:	d10e      	bne.n	800682e <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006810:	6849      	ldr	r1, [r1, #4]
 8006812:	4813      	ldr	r0, [pc, #76]	; (8006860 <HAL_RCC_GetSysClockFreq+0xac>)
 8006814:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8006818:	fba1 0100 	umull	r0, r1, r1, r0
 800681c:	f7fa fa54 	bl	8000cc8 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006820:	4b0d      	ldr	r3, [pc, #52]	; (8006858 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 8006828:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800682c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800682e:	684b      	ldr	r3, [r1, #4]
 8006830:	480a      	ldr	r0, [pc, #40]	; (800685c <HAL_RCC_GetSysClockFreq+0xa8>)
 8006832:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8006836:	fba3 0100 	umull	r0, r1, r3, r0
 800683a:	2300      	movs	r3, #0
 800683c:	f7fa fa44 	bl	8000cc8 <__aeabi_uldivmod>
 8006840:	e7ee      	b.n	8006820 <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006842:	684b      	ldr	r3, [r1, #4]
 8006844:	4805      	ldr	r0, [pc, #20]	; (800685c <HAL_RCC_GetSysClockFreq+0xa8>)
 8006846:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800684a:	fba3 0100 	umull	r0, r1, r3, r0
 800684e:	2300      	movs	r3, #0
 8006850:	f7fa fa3a 	bl	8000cc8 <__aeabi_uldivmod>
 8006854:	e7cc      	b.n	80067f0 <HAL_RCC_GetSysClockFreq+0x3c>
 8006856:	bf00      	nop
 8006858:	40023800 	.word	0x40023800
 800685c:	007a1200 	.word	0x007a1200
 8006860:	00f42400 	.word	0x00f42400

08006864 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006864:	2800      	cmp	r0, #0
 8006866:	f000 81b5 	beq.w	8006bd4 <HAL_RCC_OscConfig+0x370>
{
 800686a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800686e:	6803      	ldr	r3, [r0, #0]
 8006870:	07da      	lsls	r2, r3, #31
{
 8006872:	b082      	sub	sp, #8
 8006874:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006876:	d536      	bpl.n	80068e6 <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006878:	49ad      	ldr	r1, [pc, #692]	; (8006b30 <HAL_RCC_OscConfig+0x2cc>)
 800687a:	688a      	ldr	r2, [r1, #8]
 800687c:	f002 020c 	and.w	r2, r2, #12
 8006880:	2a04      	cmp	r2, #4
 8006882:	f000 80df 	beq.w	8006a44 <HAL_RCC_OscConfig+0x1e0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006886:	688a      	ldr	r2, [r1, #8]
 8006888:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800688c:	2a08      	cmp	r2, #8
 800688e:	f000 80d5 	beq.w	8006a3c <HAL_RCC_OscConfig+0x1d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006892:	49a7      	ldr	r1, [pc, #668]	; (8006b30 <HAL_RCC_OscConfig+0x2cc>)
 8006894:	688a      	ldr	r2, [r1, #8]
 8006896:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800689a:	2a0c      	cmp	r2, #12
 800689c:	f000 8104 	beq.w	8006aa8 <HAL_RCC_OscConfig+0x244>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068a0:	6863      	ldr	r3, [r4, #4]
 80068a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068a6:	f000 8118 	beq.w	8006ada <HAL_RCC_OscConfig+0x276>
 80068aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068ae:	f000 8198 	beq.w	8006be2 <HAL_RCC_OscConfig+0x37e>
 80068b2:	4d9f      	ldr	r5, [pc, #636]	; (8006b30 <HAL_RCC_OscConfig+0x2cc>)
 80068b4:	682a      	ldr	r2, [r5, #0]
 80068b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80068ba:	602a      	str	r2, [r5, #0]
 80068bc:	682a      	ldr	r2, [r5, #0]
 80068be:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80068c2:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f040 810d 	bne.w	8006ae4 <HAL_RCC_OscConfig+0x280>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ca:	f7ff f8ab 	bl	8005a24 <HAL_GetTick>
 80068ce:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068d0:	e005      	b.n	80068de <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068d2:	f7ff f8a7 	bl	8005a24 <HAL_GetTick>
 80068d6:	1b80      	subs	r0, r0, r6
 80068d8:	2864      	cmp	r0, #100	; 0x64
 80068da:	f200 80fa 	bhi.w	8006ad2 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068de:	682b      	ldr	r3, [r5, #0]
 80068e0:	0399      	lsls	r1, r3, #14
 80068e2:	d4f6      	bmi.n	80068d2 <HAL_RCC_OscConfig+0x6e>
 80068e4:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068e6:	079a      	lsls	r2, r3, #30
 80068e8:	d52f      	bpl.n	800694a <HAL_RCC_OscConfig+0xe6>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80068ea:	4a91      	ldr	r2, [pc, #580]	; (8006b30 <HAL_RCC_OscConfig+0x2cc>)
 80068ec:	6891      	ldr	r1, [r2, #8]
 80068ee:	f011 0f0c 	tst.w	r1, #12
 80068f2:	f000 8098 	beq.w	8006a26 <HAL_RCC_OscConfig+0x1c2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80068f6:	6891      	ldr	r1, [r2, #8]
 80068f8:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80068fc:	2908      	cmp	r1, #8
 80068fe:	f000 808e 	beq.w	8006a1e <HAL_RCC_OscConfig+0x1ba>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006902:	498b      	ldr	r1, [pc, #556]	; (8006b30 <HAL_RCC_OscConfig+0x2cc>)
 8006904:	688a      	ldr	r2, [r1, #8]
 8006906:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800690a:	2a0c      	cmp	r2, #12
 800690c:	f000 8164 	beq.w	8006bd8 <HAL_RCC_OscConfig+0x374>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006910:	68e3      	ldr	r3, [r4, #12]
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 8116 	beq.w	8006b44 <HAL_RCC_OscConfig+0x2e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006918:	4b86      	ldr	r3, [pc, #536]	; (8006b34 <HAL_RCC_OscConfig+0x2d0>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800691a:	4e85      	ldr	r6, [pc, #532]	; (8006b30 <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_HSI_ENABLE();
 800691c:	2201      	movs	r2, #1
 800691e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006920:	f7ff f880 	bl	8005a24 <HAL_GetTick>
 8006924:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006926:	e005      	b.n	8006934 <HAL_RCC_OscConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006928:	f7ff f87c 	bl	8005a24 <HAL_GetTick>
 800692c:	1b40      	subs	r0, r0, r5
 800692e:	2802      	cmp	r0, #2
 8006930:	f200 80cf 	bhi.w	8006ad2 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006934:	6833      	ldr	r3, [r6, #0]
 8006936:	0798      	lsls	r0, r3, #30
 8006938:	d5f6      	bpl.n	8006928 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800693a:	6833      	ldr	r3, [r6, #0]
 800693c:	6922      	ldr	r2, [r4, #16]
 800693e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006942:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006946:	6033      	str	r3, [r6, #0]
 8006948:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800694a:	071a      	lsls	r2, r3, #28
 800694c:	d452      	bmi.n	80069f4 <HAL_RCC_OscConfig+0x190>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800694e:	0758      	lsls	r0, r3, #29
 8006950:	d530      	bpl.n	80069b4 <HAL_RCC_OscConfig+0x150>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006952:	4a77      	ldr	r2, [pc, #476]	; (8006b30 <HAL_RCC_OscConfig+0x2cc>)
 8006954:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006956:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 800695a:	f000 8099 	beq.w	8006a90 <HAL_RCC_OscConfig+0x22c>
    FlagStatus       pwrclkchanged = RESET;
 800695e:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006960:	4e75      	ldr	r6, [pc, #468]	; (8006b38 <HAL_RCC_OscConfig+0x2d4>)
 8006962:	6833      	ldr	r3, [r6, #0]
 8006964:	05d9      	lsls	r1, r3, #23
 8006966:	f140 80a4 	bpl.w	8006ab2 <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800696a:	68a3      	ldr	r3, [r4, #8]
 800696c:	2b01      	cmp	r3, #1
 800696e:	f000 80c7 	beq.w	8006b00 <HAL_RCC_OscConfig+0x29c>
 8006972:	2b05      	cmp	r3, #5
 8006974:	f000 813f 	beq.w	8006bf6 <HAL_RCC_OscConfig+0x392>
 8006978:	4e6d      	ldr	r6, [pc, #436]	; (8006b30 <HAL_RCC_OscConfig+0x2cc>)
 800697a:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800697c:	f022 0201 	bic.w	r2, r2, #1
 8006980:	6732      	str	r2, [r6, #112]	; 0x70
 8006982:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8006984:	f022 0204 	bic.w	r2, r2, #4
 8006988:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800698a:	2b00      	cmp	r3, #0
 800698c:	f040 80bd 	bne.w	8006b0a <HAL_RCC_OscConfig+0x2a6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006990:	f7ff f848 	bl	8005a24 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006994:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006998:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800699a:	e005      	b.n	80069a8 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800699c:	f7ff f842 	bl	8005a24 <HAL_GetTick>
 80069a0:	1bc0      	subs	r0, r0, r7
 80069a2:	4540      	cmp	r0, r8
 80069a4:	f200 8095 	bhi.w	8006ad2 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069a8:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80069aa:	0798      	lsls	r0, r3, #30
 80069ac:	d4f6      	bmi.n	800699c <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069ae:	2d00      	cmp	r5, #0
 80069b0:	f040 810a 	bne.w	8006bc8 <HAL_RCC_OscConfig+0x364>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069b4:	69a0      	ldr	r0, [r4, #24]
 80069b6:	b1c8      	cbz	r0, 80069ec <HAL_RCC_OscConfig+0x188>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80069b8:	4d5d      	ldr	r5, [pc, #372]	; (8006b30 <HAL_RCC_OscConfig+0x2cc>)
 80069ba:	68ab      	ldr	r3, [r5, #8]
 80069bc:	f003 030c 	and.w	r3, r3, #12
 80069c0:	2b08      	cmp	r3, #8
 80069c2:	f000 80d0 	beq.w	8006b66 <HAL_RCC_OscConfig+0x302>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069c6:	4b5d      	ldr	r3, [pc, #372]	; (8006b3c <HAL_RCC_OscConfig+0x2d8>)
 80069c8:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069ca:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80069cc:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069ce:	f000 811c 	beq.w	8006c0a <HAL_RCC_OscConfig+0x3a6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d2:	f7ff f827 	bl	8005a24 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069d6:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80069d8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069da:	e004      	b.n	80069e6 <HAL_RCC_OscConfig+0x182>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069dc:	f7ff f822 	bl	8005a24 <HAL_GetTick>
 80069e0:	1b40      	subs	r0, r0, r5
 80069e2:	2802      	cmp	r0, #2
 80069e4:	d875      	bhi.n	8006ad2 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	019b      	lsls	r3, r3, #6
 80069ea:	d4f7      	bmi.n	80069dc <HAL_RCC_OscConfig+0x178>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80069ec:	2000      	movs	r0, #0
}
 80069ee:	b002      	add	sp, #8
 80069f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069f4:	6963      	ldr	r3, [r4, #20]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d02e      	beq.n	8006a58 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_LSI_ENABLE();
 80069fa:	4b51      	ldr	r3, [pc, #324]	; (8006b40 <HAL_RCC_OscConfig+0x2dc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069fc:	4e4c      	ldr	r6, [pc, #304]	; (8006b30 <HAL_RCC_OscConfig+0x2cc>)
      __HAL_RCC_LSI_ENABLE();
 80069fe:	2201      	movs	r2, #1
 8006a00:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006a02:	f7ff f80f 	bl	8005a24 <HAL_GetTick>
 8006a06:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a08:	e004      	b.n	8006a14 <HAL_RCC_OscConfig+0x1b0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a0a:	f7ff f80b 	bl	8005a24 <HAL_GetTick>
 8006a0e:	1b40      	subs	r0, r0, r5
 8006a10:	2802      	cmp	r0, #2
 8006a12:	d85e      	bhi.n	8006ad2 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a14:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8006a16:	079b      	lsls	r3, r3, #30
 8006a18:	d5f7      	bpl.n	8006a0a <HAL_RCC_OscConfig+0x1a6>
 8006a1a:	6823      	ldr	r3, [r4, #0]
 8006a1c:	e797      	b.n	800694e <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006a1e:	6852      	ldr	r2, [r2, #4]
 8006a20:	0257      	lsls	r7, r2, #9
 8006a22:	f53f af6e 	bmi.w	8006902 <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a26:	4a42      	ldr	r2, [pc, #264]	; (8006b30 <HAL_RCC_OscConfig+0x2cc>)
 8006a28:	6812      	ldr	r2, [r2, #0]
 8006a2a:	0795      	lsls	r5, r2, #30
 8006a2c:	d524      	bpl.n	8006a78 <HAL_RCC_OscConfig+0x214>
 8006a2e:	68e2      	ldr	r2, [r4, #12]
 8006a30:	2a01      	cmp	r2, #1
 8006a32:	d021      	beq.n	8006a78 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8006a34:	2001      	movs	r0, #1
}
 8006a36:	b002      	add	sp, #8
 8006a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006a3c:	684a      	ldr	r2, [r1, #4]
 8006a3e:	0257      	lsls	r7, r2, #9
 8006a40:	f57f af27 	bpl.w	8006892 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a44:	4a3a      	ldr	r2, [pc, #232]	; (8006b30 <HAL_RCC_OscConfig+0x2cc>)
 8006a46:	6812      	ldr	r2, [r2, #0]
 8006a48:	0395      	lsls	r5, r2, #14
 8006a4a:	f57f af4c 	bpl.w	80068e6 <HAL_RCC_OscConfig+0x82>
 8006a4e:	6862      	ldr	r2, [r4, #4]
 8006a50:	2a00      	cmp	r2, #0
 8006a52:	f47f af48 	bne.w	80068e6 <HAL_RCC_OscConfig+0x82>
 8006a56:	e7ed      	b.n	8006a34 <HAL_RCC_OscConfig+0x1d0>
      __HAL_RCC_LSI_DISABLE();
 8006a58:	4a39      	ldr	r2, [pc, #228]	; (8006b40 <HAL_RCC_OscConfig+0x2dc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a5a:	4e35      	ldr	r6, [pc, #212]	; (8006b30 <HAL_RCC_OscConfig+0x2cc>)
      __HAL_RCC_LSI_DISABLE();
 8006a5c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006a5e:	f7fe ffe1 	bl	8005a24 <HAL_GetTick>
 8006a62:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a64:	e004      	b.n	8006a70 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a66:	f7fe ffdd 	bl	8005a24 <HAL_GetTick>
 8006a6a:	1b40      	subs	r0, r0, r5
 8006a6c:	2802      	cmp	r0, #2
 8006a6e:	d830      	bhi.n	8006ad2 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a70:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8006a72:	079f      	lsls	r7, r3, #30
 8006a74:	d4f7      	bmi.n	8006a66 <HAL_RCC_OscConfig+0x202>
 8006a76:	e7d0      	b.n	8006a1a <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a78:	492d      	ldr	r1, [pc, #180]	; (8006b30 <HAL_RCC_OscConfig+0x2cc>)
 8006a7a:	6920      	ldr	r0, [r4, #16]
 8006a7c:	680a      	ldr	r2, [r1, #0]
 8006a7e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8006a82:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8006a86:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a88:	071a      	lsls	r2, r3, #28
 8006a8a:	f57f af60 	bpl.w	800694e <HAL_RCC_OscConfig+0xea>
 8006a8e:	e7b1      	b.n	80069f4 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a90:	9301      	str	r3, [sp, #4]
 8006a92:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a98:	6413      	str	r3, [r2, #64]	; 0x40
 8006a9a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aa0:	9301      	str	r3, [sp, #4]
 8006aa2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006aa4:	2501      	movs	r5, #1
 8006aa6:	e75b      	b.n	8006960 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aa8:	684a      	ldr	r2, [r1, #4]
 8006aaa:	0256      	lsls	r6, r2, #9
 8006aac:	f57f aef8 	bpl.w	80068a0 <HAL_RCC_OscConfig+0x3c>
 8006ab0:	e7c8      	b.n	8006a44 <HAL_RCC_OscConfig+0x1e0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ab2:	6833      	ldr	r3, [r6, #0]
 8006ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ab8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006aba:	f7fe ffb3 	bl	8005a24 <HAL_GetTick>
 8006abe:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ac0:	6833      	ldr	r3, [r6, #0]
 8006ac2:	05da      	lsls	r2, r3, #23
 8006ac4:	f53f af51 	bmi.w	800696a <HAL_RCC_OscConfig+0x106>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ac8:	f7fe ffac 	bl	8005a24 <HAL_GetTick>
 8006acc:	1bc0      	subs	r0, r0, r7
 8006ace:	2802      	cmp	r0, #2
 8006ad0:	d9f6      	bls.n	8006ac0 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8006ad2:	2003      	movs	r0, #3
}
 8006ad4:	b002      	add	sp, #8
 8006ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ada:	4a15      	ldr	r2, [pc, #84]	; (8006b30 <HAL_RCC_OscConfig+0x2cc>)
 8006adc:	6813      	ldr	r3, [r2, #0]
 8006ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ae2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006ae4:	f7fe ff9e 	bl	8005a24 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ae8:	4e11      	ldr	r6, [pc, #68]	; (8006b30 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8006aea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aec:	e004      	b.n	8006af8 <HAL_RCC_OscConfig+0x294>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006aee:	f7fe ff99 	bl	8005a24 <HAL_GetTick>
 8006af2:	1b40      	subs	r0, r0, r5
 8006af4:	2864      	cmp	r0, #100	; 0x64
 8006af6:	d8ec      	bhi.n	8006ad2 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006af8:	6833      	ldr	r3, [r6, #0]
 8006afa:	0398      	lsls	r0, r3, #14
 8006afc:	d5f7      	bpl.n	8006aee <HAL_RCC_OscConfig+0x28a>
 8006afe:	e6f1      	b.n	80068e4 <HAL_RCC_OscConfig+0x80>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b00:	4a0b      	ldr	r2, [pc, #44]	; (8006b30 <HAL_RCC_OscConfig+0x2cc>)
 8006b02:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8006b04:	f043 0301 	orr.w	r3, r3, #1
 8006b08:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8006b0a:	f7fe ff8b 	bl	8005a24 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b0e:	4f08      	ldr	r7, [pc, #32]	; (8006b30 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8006b10:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b12:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b16:	e004      	b.n	8006b22 <HAL_RCC_OscConfig+0x2be>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b18:	f7fe ff84 	bl	8005a24 <HAL_GetTick>
 8006b1c:	1b80      	subs	r0, r0, r6
 8006b1e:	4540      	cmp	r0, r8
 8006b20:	d8d7      	bhi.n	8006ad2 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b24:	079b      	lsls	r3, r3, #30
 8006b26:	d5f7      	bpl.n	8006b18 <HAL_RCC_OscConfig+0x2b4>
    if(pwrclkchanged == SET)
 8006b28:	2d00      	cmp	r5, #0
 8006b2a:	f43f af43 	beq.w	80069b4 <HAL_RCC_OscConfig+0x150>
 8006b2e:	e04b      	b.n	8006bc8 <HAL_RCC_OscConfig+0x364>
 8006b30:	40023800 	.word	0x40023800
 8006b34:	42470000 	.word	0x42470000
 8006b38:	40007000 	.word	0x40007000
 8006b3c:	42470060 	.word	0x42470060
 8006b40:	42470e80 	.word	0x42470e80
        __HAL_RCC_HSI_DISABLE();
 8006b44:	4a49      	ldr	r2, [pc, #292]	; (8006c6c <HAL_RCC_OscConfig+0x408>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b46:	4e4a      	ldr	r6, [pc, #296]	; (8006c70 <HAL_RCC_OscConfig+0x40c>)
        __HAL_RCC_HSI_DISABLE();
 8006b48:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006b4a:	f7fe ff6b 	bl	8005a24 <HAL_GetTick>
 8006b4e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b50:	e004      	b.n	8006b5c <HAL_RCC_OscConfig+0x2f8>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b52:	f7fe ff67 	bl	8005a24 <HAL_GetTick>
 8006b56:	1b40      	subs	r0, r0, r5
 8006b58:	2802      	cmp	r0, #2
 8006b5a:	d8ba      	bhi.n	8006ad2 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b5c:	6833      	ldr	r3, [r6, #0]
 8006b5e:	0799      	lsls	r1, r3, #30
 8006b60:	d4f7      	bmi.n	8006b52 <HAL_RCC_OscConfig+0x2ee>
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	e6f1      	b.n	800694a <HAL_RCC_OscConfig+0xe6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b66:	2801      	cmp	r0, #1
 8006b68:	f43f af41 	beq.w	80069ee <HAL_RCC_OscConfig+0x18a>
        pll_config = RCC->PLLCFGR;
 8006b6c:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b6e:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b70:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b74:	4291      	cmp	r1, r2
 8006b76:	f47f af5d 	bne.w	8006a34 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b7a:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b7c:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b80:	4291      	cmp	r1, r2
 8006b82:	f47f af57 	bne.w	8006a34 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b86:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006b88:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8006b8c:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b8e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8006b92:	f47f af4f 	bne.w	8006a34 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b96:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006b98:	0852      	lsrs	r2, r2, #1
 8006b9a:	3a01      	subs	r2, #1
 8006b9c:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ba0:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8006ba4:	f47f af46 	bne.w	8006a34 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ba8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006baa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bae:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8006bb2:	f47f af3f 	bne.w	8006a34 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006bb6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006bb8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006bbc:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
  return HAL_OK;
 8006bc0:	bf14      	ite	ne
 8006bc2:	2001      	movne	r0, #1
 8006bc4:	2000      	moveq	r0, #0
 8006bc6:	e712      	b.n	80069ee <HAL_RCC_OscConfig+0x18a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bc8:	4a29      	ldr	r2, [pc, #164]	; (8006c70 <HAL_RCC_OscConfig+0x40c>)
 8006bca:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8006bd2:	e6ef      	b.n	80069b4 <HAL_RCC_OscConfig+0x150>
    return HAL_ERROR;
 8006bd4:	2001      	movs	r0, #1
}
 8006bd6:	4770      	bx	lr
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bd8:	684a      	ldr	r2, [r1, #4]
 8006bda:	0256      	lsls	r6, r2, #9
 8006bdc:	f53f ae98 	bmi.w	8006910 <HAL_RCC_OscConfig+0xac>
 8006be0:	e721      	b.n	8006a26 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006be2:	4b23      	ldr	r3, [pc, #140]	; (8006c70 <HAL_RCC_OscConfig+0x40c>)
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006bea:	601a      	str	r2, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006bf2:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006bf4:	e776      	b.n	8006ae4 <HAL_RCC_OscConfig+0x280>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bf6:	4b1e      	ldr	r3, [pc, #120]	; (8006c70 <HAL_RCC_OscConfig+0x40c>)
 8006bf8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bfa:	f042 0204 	orr.w	r2, r2, #4
 8006bfe:	671a      	str	r2, [r3, #112]	; 0x70
 8006c00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c02:	f042 0201 	orr.w	r2, r2, #1
 8006c06:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c08:	e77f      	b.n	8006b0a <HAL_RCC_OscConfig+0x2a6>
        tickstart = HAL_GetTick();
 8006c0a:	f7fe ff0b 	bl	8005a24 <HAL_GetTick>
 8006c0e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c10:	e005      	b.n	8006c1e <HAL_RCC_OscConfig+0x3ba>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c12:	f7fe ff07 	bl	8005a24 <HAL_GetTick>
 8006c16:	1b80      	subs	r0, r0, r6
 8006c18:	2802      	cmp	r0, #2
 8006c1a:	f63f af5a 	bhi.w	8006ad2 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c1e:	682b      	ldr	r3, [r5, #0]
 8006c20:	0199      	lsls	r1, r3, #6
 8006c22:	d4f6      	bmi.n	8006c12 <HAL_RCC_OscConfig+0x3ae>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c24:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8006c28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006c2a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006c2c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006c32:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8006c36:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006c3a:	0852      	lsrs	r2, r2, #1
 8006c3c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8006c40:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8006c42:	490c      	ldr	r1, [pc, #48]	; (8006c74 <HAL_RCC_OscConfig+0x410>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c44:	4e0a      	ldr	r6, [pc, #40]	; (8006c70 <HAL_RCC_OscConfig+0x40c>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8006c4a:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c4c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8006c4e:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8006c50:	f7fe fee8 	bl	8005a24 <HAL_GetTick>
 8006c54:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c56:	e005      	b.n	8006c64 <HAL_RCC_OscConfig+0x400>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c58:	f7fe fee4 	bl	8005a24 <HAL_GetTick>
 8006c5c:	1b00      	subs	r0, r0, r4
 8006c5e:	2802      	cmp	r0, #2
 8006c60:	f63f af37 	bhi.w	8006ad2 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c64:	6833      	ldr	r3, [r6, #0]
 8006c66:	019a      	lsls	r2, r3, #6
 8006c68:	d5f6      	bpl.n	8006c58 <HAL_RCC_OscConfig+0x3f4>
 8006c6a:	e6bf      	b.n	80069ec <HAL_RCC_OscConfig+0x188>
 8006c6c:	42470000 	.word	0x42470000
 8006c70:	40023800 	.word	0x40023800
 8006c74:	42470060 	.word	0x42470060

08006c78 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	f000 8087 	beq.w	8006d8c <HAL_TIM_Base_Init+0x114>
{
 8006c7e:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c80:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006c84:	4604      	mov	r4, r0
 8006c86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d079      	beq.n	8006d82 <HAL_TIM_Base_Init+0x10a>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c8e:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c90:	493f      	ldr	r1, [pc, #252]	; (8006d90 <HAL_TIM_Base_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006c92:	2302      	movs	r3, #2
 8006c94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c98:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8006c9a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c9c:	d05d      	beq.n	8006d5a <HAL_TIM_Base_Init+0xe2>
 8006c9e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8006ca2:	d031      	beq.n	8006d08 <HAL_TIM_Base_Init+0x90>
 8006ca4:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8006ca8:	428a      	cmp	r2, r1
 8006caa:	d02d      	beq.n	8006d08 <HAL_TIM_Base_Init+0x90>
 8006cac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006cb0:	428a      	cmp	r2, r1
 8006cb2:	d029      	beq.n	8006d08 <HAL_TIM_Base_Init+0x90>
 8006cb4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006cb8:	428a      	cmp	r2, r1
 8006cba:	d025      	beq.n	8006d08 <HAL_TIM_Base_Init+0x90>
 8006cbc:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8006cc0:	428a      	cmp	r2, r1
 8006cc2:	d04a      	beq.n	8006d5a <HAL_TIM_Base_Init+0xe2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cc4:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8006cc8:	428a      	cmp	r2, r1
 8006cca:	d021      	beq.n	8006d10 <HAL_TIM_Base_Init+0x98>
 8006ccc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006cd0:	428a      	cmp	r2, r1
 8006cd2:	d01d      	beq.n	8006d10 <HAL_TIM_Base_Init+0x98>
 8006cd4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006cd8:	428a      	cmp	r2, r1
 8006cda:	d019      	beq.n	8006d10 <HAL_TIM_Base_Init+0x98>
 8006cdc:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 8006ce0:	428a      	cmp	r2, r1
 8006ce2:	d015      	beq.n	8006d10 <HAL_TIM_Base_Init+0x98>
 8006ce4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006ce8:	428a      	cmp	r2, r1
 8006cea:	d011      	beq.n	8006d10 <HAL_TIM_Base_Init+0x98>
 8006cec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006cf0:	428a      	cmp	r2, r1
 8006cf2:	d00d      	beq.n	8006d10 <HAL_TIM_Base_Init+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cf4:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cf6:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cf8:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cfe:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8006d00:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d02:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006d04:	6291      	str	r1, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d06:	e010      	b.n	8006d2a <HAL_TIM_Base_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 8006d08:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006d0e:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d10:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d12:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d14:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d1a:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d20:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8006d22:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8006d24:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d26:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006d28:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d2e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d32:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006d36:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006d3a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006d3e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d4a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006d4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006d52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006d56:	2000      	movs	r0, #0
}
 8006d58:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8006d5a:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d5c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d5e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006d64:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d6a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d70:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8006d72:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d74:	68e3      	ldr	r3, [r4, #12]
 8006d76:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006d78:	6863      	ldr	r3, [r4, #4]
 8006d7a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006d7c:	6963      	ldr	r3, [r4, #20]
 8006d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8006d80:	e7d3      	b.n	8006d2a <HAL_TIM_Base_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 8006d82:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006d86:	f7fd fec1 	bl	8004b0c <HAL_TIM_Base_MspInit>
 8006d8a:	e780      	b.n	8006c8e <HAL_TIM_Base_Init+0x16>
    return HAL_ERROR;
 8006d8c:	2001      	movs	r0, #1
}
 8006d8e:	4770      	bx	lr
 8006d90:	40010000 	.word	0x40010000

08006d94 <HAL_TIM_PWM_MspInit>:
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop

08006d98 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	f000 8087 	beq.w	8006eac <HAL_TIM_PWM_Init+0x114>
{
 8006d9e:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006da0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006da4:	4604      	mov	r4, r0
 8006da6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d079      	beq.n	8006ea2 <HAL_TIM_PWM_Init+0x10a>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dae:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006db0:	493f      	ldr	r1, [pc, #252]	; (8006eb0 <HAL_TIM_PWM_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006db2:	2302      	movs	r3, #2
 8006db4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006db8:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8006dba:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dbc:	d05d      	beq.n	8006e7a <HAL_TIM_PWM_Init+0xe2>
 8006dbe:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8006dc2:	d031      	beq.n	8006e28 <HAL_TIM_PWM_Init+0x90>
 8006dc4:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8006dc8:	428a      	cmp	r2, r1
 8006dca:	d02d      	beq.n	8006e28 <HAL_TIM_PWM_Init+0x90>
 8006dcc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006dd0:	428a      	cmp	r2, r1
 8006dd2:	d029      	beq.n	8006e28 <HAL_TIM_PWM_Init+0x90>
 8006dd4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006dd8:	428a      	cmp	r2, r1
 8006dda:	d025      	beq.n	8006e28 <HAL_TIM_PWM_Init+0x90>
 8006ddc:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8006de0:	428a      	cmp	r2, r1
 8006de2:	d04a      	beq.n	8006e7a <HAL_TIM_PWM_Init+0xe2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006de4:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8006de8:	428a      	cmp	r2, r1
 8006dea:	d021      	beq.n	8006e30 <HAL_TIM_PWM_Init+0x98>
 8006dec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006df0:	428a      	cmp	r2, r1
 8006df2:	d01d      	beq.n	8006e30 <HAL_TIM_PWM_Init+0x98>
 8006df4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006df8:	428a      	cmp	r2, r1
 8006dfa:	d019      	beq.n	8006e30 <HAL_TIM_PWM_Init+0x98>
 8006dfc:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 8006e00:	428a      	cmp	r2, r1
 8006e02:	d015      	beq.n	8006e30 <HAL_TIM_PWM_Init+0x98>
 8006e04:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006e08:	428a      	cmp	r2, r1
 8006e0a:	d011      	beq.n	8006e30 <HAL_TIM_PWM_Init+0x98>
 8006e0c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006e10:	428a      	cmp	r2, r1
 8006e12:	d00d      	beq.n	8006e30 <HAL_TIM_PWM_Init+0x98>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e14:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e16:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8006e18:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e1e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8006e20:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e22:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006e24:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e26:	e010      	b.n	8006e4a <HAL_TIM_PWM_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 8006e28:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006e2e:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e30:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e32:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e34:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e3a:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e40:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8006e42:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8006e44:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e46:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006e48:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e4e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e52:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006e56:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006e5a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006e5e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e6a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006e6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006e72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006e76:	2000      	movs	r0, #0
}
 8006e78:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8006e7a:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e7c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e7e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006e84:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e8a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e90:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8006e92:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e94:	68e3      	ldr	r3, [r4, #12]
 8006e96:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006e98:	6863      	ldr	r3, [r4, #4]
 8006e9a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006e9c:	6963      	ldr	r3, [r4, #20]
 8006e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8006ea0:	e7d3      	b.n	8006e4a <HAL_TIM_PWM_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 8006ea2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006ea6:	f7ff ff75 	bl	8006d94 <HAL_TIM_PWM_MspInit>
 8006eaa:	e780      	b.n	8006dae <HAL_TIM_PWM_Init+0x16>
    return HAL_ERROR;
 8006eac:	2001      	movs	r0, #1
}
 8006eae:	4770      	bx	lr
 8006eb0:	40010000 	.word	0x40010000

08006eb4 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8006eb4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	f000 80dc 	beq.w	8007076 <HAL_TIM_PWM_ConfigChannel+0x1c2>
 8006ebe:	2301      	movs	r3, #1
{
 8006ec0:	b4f0      	push	{r4, r5, r6, r7}
 8006ec2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8006ec4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8006ec8:	2a0c      	cmp	r2, #12
 8006eca:	d808      	bhi.n	8006ede <HAL_TIM_PWM_ConfigChannel+0x2a>
 8006ecc:	e8df f002 	tbb	[pc, r2]
 8006ed0:	07070741 	.word	0x07070741
 8006ed4:	07070772 	.word	0x07070772
 8006ed8:	070707a3 	.word	0x070707a3
 8006edc:	0d          	.byte	0x0d
 8006edd:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8006ede:	2300      	movs	r3, #0
 8006ee0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  __HAL_LOCK(htim);
 8006ee4:	2001      	movs	r0, #1
}
 8006ee6:	bcf0      	pop	{r4, r5, r6, r7}
 8006ee8:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006eea:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006eec:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ef0:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ef2:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ef4:	4e7a      	ldr	r6, [pc, #488]	; (80070e0 <HAL_TIM_PWM_ConfigChannel+0x22c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ef6:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8006efa:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8006efc:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006efe:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8006f00:	69d8      	ldr	r0, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8006f02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f06:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f0a:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f0c:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f10:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f14:	f000 80ce 	beq.w	80070b4 <HAL_TIM_PWM_ConfigChannel+0x200>
 8006f18:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006f1c:	42b3      	cmp	r3, r6
 8006f1e:	f000 80c9 	beq.w	80070b4 <HAL_TIM_PWM_ConfigChannel+0x200>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f22:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006f24:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006f26:	61d8      	str	r0, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8006f28:	641e      	str	r6, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f2a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f2c:	69d8      	ldr	r0, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f2e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f30:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8006f34:	61d8      	str	r0, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f36:	69d9      	ldr	r1, [r3, #28]
 8006f38:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006f3c:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f3e:	69da      	ldr	r2, [r3, #28]
 8006f40:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8006f44:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8006f46:	2300      	movs	r3, #0
 8006f48:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006f4c:	2000      	movs	r0, #0
}
 8006f4e:	bcf0      	pop	{r4, r5, r6, r7}
 8006f50:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f52:	6803      	ldr	r3, [r0, #0]
  tmpccer |= OC_Config->OCPolarity;
 8006f54:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f58:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8006f5a:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f5c:	4e60      	ldr	r6, [pc, #384]	; (80070e0 <HAL_TIM_PWM_ConfigChannel+0x22c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f5e:	f025 0501 	bic.w	r5, r5, #1
 8006f62:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8006f64:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006f66:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8006f68:	6998      	ldr	r0, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8006f6a:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f6e:	f020 0073 	bic.w	r0, r0, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f72:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 8006f74:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmrx |= OC_Config->OCMode;
 8006f78:	ea40 0007 	orr.w	r0, r0, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f7c:	d07d      	beq.n	800707a <HAL_TIM_PWM_ConfigChannel+0x1c6>
 8006f7e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006f82:	42b3      	cmp	r3, r6
 8006f84:	d079      	beq.n	800707a <HAL_TIM_PWM_ConfigChannel+0x1c6>
  TIMx->CCR1 = OC_Config->Pulse;
 8006f86:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006f88:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006f8a:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8006f8c:	635e      	str	r6, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8006f8e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f90:	6998      	ldr	r0, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f92:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f94:	f040 0008 	orr.w	r0, r0, #8
 8006f98:	6198      	str	r0, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f9a:	6999      	ldr	r1, [r3, #24]
 8006f9c:	f021 0104 	bic.w	r1, r1, #4
 8006fa0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fa2:	699a      	ldr	r2, [r3, #24]
 8006fa4:	432a      	orrs	r2, r5
 8006fa6:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8006fa8:	2300      	movs	r3, #0
 8006faa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006fae:	2000      	movs	r0, #0
}
 8006fb0:	bcf0      	pop	{r4, r5, r6, r7}
 8006fb2:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fb4:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fb6:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fb8:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fba:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fbc:	f8df c120 	ldr.w	ip, [pc, #288]	; 80070e0 <HAL_TIM_PWM_ConfigChannel+0x22c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fc0:	f025 0510 	bic.w	r5, r5, #16
 8006fc4:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8006fc6:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006fc8:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8006fca:	6998      	ldr	r0, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8006fcc:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fd0:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fd4:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fd6:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fda:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fde:	d059      	beq.n	8007094 <HAL_TIM_PWM_ConfigChannel+0x1e0>
 8006fe0:	4f40      	ldr	r7, [pc, #256]	; (80070e4 <HAL_TIM_PWM_ConfigChannel+0x230>)
 8006fe2:	42bb      	cmp	r3, r7
 8006fe4:	d056      	beq.n	8007094 <HAL_TIM_PWM_ConfigChannel+0x1e0>
  TIMx->CCR2 = OC_Config->Pulse;
 8006fe6:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006fe8:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006fea:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006fec:	639e      	str	r6, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006fee:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ff0:	6998      	ldr	r0, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ff2:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ff4:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8006ff8:	6198      	str	r0, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ffa:	6999      	ldr	r1, [r3, #24]
 8006ffc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007000:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007002:	699a      	ldr	r2, [r3, #24]
 8007004:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8007008:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800700a:	2300      	movs	r3, #0
 800700c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007010:	2000      	movs	r0, #0
}
 8007012:	bcf0      	pop	{r4, r5, r6, r7}
 8007014:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007016:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007018:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800701a:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800701c:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800701e:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80070e0 <HAL_TIM_PWM_ConfigChannel+0x22c>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007022:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8007026:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8007028:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800702a:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800702c:	69d8      	ldr	r0, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 800702e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007032:	f020 0073 	bic.w	r0, r0, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007036:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007038:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800703c:	ea40 0006 	orr.w	r0, r0, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007040:	d03e      	beq.n	80070c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
 8007042:	4f28      	ldr	r7, [pc, #160]	; (80070e4 <HAL_TIM_PWM_ConfigChannel+0x230>)
 8007044:	42bb      	cmp	r3, r7
 8007046:	d03b      	beq.n	80070c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
  TIMx->CCR3 = OC_Config->Pulse;
 8007048:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800704a:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800704c:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800704e:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8007050:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007052:	69d8      	ldr	r0, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007054:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007056:	f040 0008 	orr.w	r0, r0, #8
 800705a:	61d8      	str	r0, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800705c:	69d9      	ldr	r1, [r3, #28]
 800705e:	f021 0104 	bic.w	r1, r1, #4
 8007062:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007064:	69da      	ldr	r2, [r3, #28]
 8007066:	432a      	orrs	r2, r5
 8007068:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 800706a:	2300      	movs	r3, #0
 800706c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007070:	2000      	movs	r0, #0
}
 8007072:	bcf0      	pop	{r4, r5, r6, r7}
 8007074:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007076:	2002      	movs	r0, #2
}
 8007078:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 800707a:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800707c:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007080:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8007082:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007086:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800708a:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 800708c:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8007090:	4335      	orrs	r5, r6
 8007092:	e778      	b.n	8006f86 <HAL_TIM_PWM_ConfigChannel+0xd2>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007094:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8007096:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800709a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800709e:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070a2:	f425 6c40 	bic.w	ip, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070a6:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 80070aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070ae:	ea4c 0585 	orr.w	r5, ip, r5, lsl #2
 80070b2:	e798      	b.n	8006fe6 <HAL_TIM_PWM_ConfigChannel+0x132>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070b4:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070b6:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070ba:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 80070be:	e730      	b.n	8006f22 <HAL_TIM_PWM_ConfigChannel+0x6e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070c0:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80070c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070c6:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070ca:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070ce:	f425 5c40 	bic.w	ip, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070d2:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 80070d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070da:	ea4c 1505 	orr.w	r5, ip, r5, lsl #4
 80070de:	e7b3      	b.n	8007048 <HAL_TIM_PWM_ConfigChannel+0x194>
 80070e0:	40010000 	.word	0x40010000
 80070e4:	40010400 	.word	0x40010400

080070e8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80070e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d075      	beq.n	80071dc <HAL_TIM_ConfigClockSource+0xf4>
 80070f0:	4602      	mov	r2, r0
{
 80070f2:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80070f4:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 80070f6:	6814      	ldr	r4, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80070f8:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 80070fc:	2001      	movs	r0, #1
 80070fe:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8007102:	68a5      	ldr	r5, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8007104:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007106:	f425 457f 	bic.w	r5, r5, #65280	; 0xff00
 800710a:	f025 0577 	bic.w	r5, r5, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 800710e:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8007110:	60a5      	str	r5, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8007112:	d065      	beq.n	80071e0 <HAL_TIM_ConfigClockSource+0xf8>
 8007114:	d824      	bhi.n	8007160 <HAL_TIM_ConfigClockSource+0x78>
 8007116:	2b40      	cmp	r3, #64	; 0x40
 8007118:	d07c      	beq.n	8007214 <HAL_TIM_ConfigClockSource+0x12c>
 800711a:	d94b      	bls.n	80071b4 <HAL_TIM_ConfigClockSource+0xcc>
 800711c:	2b50      	cmp	r3, #80	; 0x50
 800711e:	d117      	bne.n	8007150 <HAL_TIM_ConfigClockSource+0x68>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007120:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007122:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007124:	6848      	ldr	r0, [r1, #4]
 8007126:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007128:	f026 0601 	bic.w	r6, r6, #1
 800712c:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800712e:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007130:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007134:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8007138:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800713a:	ea43 1307 	orr.w	r3, r3, r7, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800713e:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8007140:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007142:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007148:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800714c:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800714e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007150:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8007152:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8007154:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007158:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800715c:	bcf0      	pop	{r4, r5, r6, r7}
 800715e:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8007160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007164:	d038      	beq.n	80071d8 <HAL_TIM_ConfigClockSource+0xf0>
 8007166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800716a:	d110      	bne.n	800718e <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800716c:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8007170:	68c8      	ldr	r0, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8007172:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007174:	432b      	orrs	r3, r5
 8007176:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800717a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800717e:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007180:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007182:	68a3      	ldr	r3, [r4, #8]
 8007184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007188:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800718a:	2000      	movs	r0, #0
      break;
 800718c:	e7e0      	b.n	8007150 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 800718e:	2b70      	cmp	r3, #112	; 0x70
 8007190:	d1de      	bne.n	8007150 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007192:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8007196:	68c8      	ldr	r0, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8007198:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800719a:	432b      	orrs	r3, r5
 800719c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071a0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071a4:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80071a6:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80071a8:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80071ae:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80071b0:	2000      	movs	r0, #0
      break;
 80071b2:	e7cd      	b.n	8007150 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80071b4:	2b20      	cmp	r3, #32
 80071b6:	d002      	beq.n	80071be <HAL_TIM_ConfigClockSource+0xd6>
 80071b8:	d90a      	bls.n	80071d0 <HAL_TIM_ConfigClockSource+0xe8>
 80071ba:	2b30      	cmp	r3, #48	; 0x30
 80071bc:	d1c8      	bne.n	8007150 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 80071be:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80071c0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071c4:	430b      	orrs	r3, r1
 80071c6:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80071ca:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80071cc:	2000      	movs	r0, #0
}
 80071ce:	e7bf      	b.n	8007150 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80071d0:	f033 0110 	bics.w	r1, r3, #16
 80071d4:	d1bc      	bne.n	8007150 <HAL_TIM_ConfigClockSource+0x68>
 80071d6:	e7f2      	b.n	80071be <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 80071d8:	2000      	movs	r0, #0
 80071da:	e7b9      	b.n	8007150 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 80071dc:	2002      	movs	r0, #2
}
 80071de:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071e0:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071e2:	684d      	ldr	r5, [r1, #4]
 80071e4:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071e6:	f020 0010 	bic.w	r0, r0, #16
 80071ea:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071ec:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 80071ee:	6a23      	ldr	r3, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071f0:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80071f8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071fc:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8007200:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8007202:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8007204:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800720a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800720e:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007210:	2000      	movs	r0, #0
}
 8007212:	e79d      	b.n	8007150 <HAL_TIM_ConfigClockSource+0x68>
  tmpccer = TIMx->CCER;
 8007214:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007216:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007218:	6848      	ldr	r0, [r1, #4]
 800721a:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800721c:	f026 0601 	bic.w	r6, r6, #1
 8007220:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007222:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007224:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007228:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 800722c:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800722e:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007232:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8007234:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8007236:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800723c:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8007240:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007242:	2000      	movs	r0, #0
}
 8007244:	e784      	b.n	8007150 <HAL_TIM_ConfigClockSource+0x68>
 8007246:	bf00      	nop

08007248 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8007248:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800724c:	2a01      	cmp	r2, #1
 800724e:	d050      	beq.n	80072f2 <HAL_TIM_SlaveConfigSynchro+0xaa>
 8007250:	4603      	mov	r3, r0
{
 8007252:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8007254:	2001      	movs	r0, #1
  tmpsmcr = htim->Instance->SMCR;
 8007256:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(htim);
 8007258:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800725c:	2202      	movs	r2, #2
 800725e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007262:	e9d1 5000 	ldrd	r5, r0, [r1]
  tmpsmcr = htim->Instance->SMCR;
 8007266:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007268:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800726c:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 800726e:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007272:	432a      	orrs	r2, r5
  switch (sSlaveConfig->InputTrigger)
 8007274:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 8007276:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8007278:	d060      	beq.n	800733c <HAL_TIM_SlaveConfigSynchro+0xf4>
 800727a:	d90f      	bls.n	800729c <HAL_TIM_SlaveConfigSynchro+0x54>
 800727c:	2860      	cmp	r0, #96	; 0x60
 800727e:	d03a      	beq.n	80072f6 <HAL_TIM_SlaveConfigSynchro+0xae>
 8007280:	2870      	cmp	r0, #112	; 0x70
 8007282:	d10e      	bne.n	80072a2 <HAL_TIM_SlaveConfigSynchro+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007284:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
 8007288:	6908      	ldr	r0, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 800728a:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800728c:	432a      	orrs	r2, r5
 800728e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007292:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007296:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8007298:	60a2      	str	r2, [r4, #8]
 800729a:	e00f      	b.n	80072bc <HAL_TIM_SlaveConfigSynchro+0x74>
  switch (sSlaveConfig->InputTrigger)
 800729c:	2840      	cmp	r0, #64	; 0x40
 800729e:	d03d      	beq.n	800731c <HAL_TIM_SlaveConfigSynchro+0xd4>
 80072a0:	d907      	bls.n	80072b2 <HAL_TIM_SlaveConfigSynchro+0x6a>
    htim->State = HAL_TIM_STATE_READY;
 80072a2:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 80072a4:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 80072a6:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80072aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80072ae:	bcf0      	pop	{r4, r5, r6, r7}
 80072b0:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80072b2:	2820      	cmp	r0, #32
 80072b4:	d002      	beq.n	80072bc <HAL_TIM_SlaveConfigSynchro+0x74>
 80072b6:	d912      	bls.n	80072de <HAL_TIM_SlaveConfigSynchro+0x96>
 80072b8:	2830      	cmp	r0, #48	; 0x30
 80072ba:	d1f2      	bne.n	80072a2 <HAL_TIM_SlaveConfigSynchro+0x5a>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80072bc:	68e2      	ldr	r2, [r4, #12]
 80072be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072c2:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80072c4:	68e2      	ldr	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 80072c6:	2501      	movs	r5, #1
  __HAL_UNLOCK(htim);
 80072c8:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80072ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80072ce:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 80072d0:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80072d4:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
  return HAL_OK;
 80072d8:	4608      	mov	r0, r1
}
 80072da:	bcf0      	pop	{r4, r5, r6, r7}
 80072dc:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80072de:	f030 0210 	bics.w	r2, r0, #16
 80072e2:	d0eb      	beq.n	80072bc <HAL_TIM_SlaveConfigSynchro+0x74>
    htim->State = HAL_TIM_STATE_READY;
 80072e4:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 80072e6:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 80072e8:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80072ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80072f0:	e7dd      	b.n	80072ae <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 80072f2:	2002      	movs	r0, #2
}
 80072f4:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072f6:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072f8:	688d      	ldr	r5, [r1, #8]
 80072fa:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072fc:	f020 0010 	bic.w	r0, r0, #16
 8007300:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007302:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8007304:	6a22      	ldr	r2, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007306:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800730a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800730e:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8007312:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8007316:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8007318:	6222      	str	r2, [r4, #32]
 800731a:	e7cf      	b.n	80072bc <HAL_TIM_SlaveConfigSynchro+0x74>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800731c:	2d05      	cmp	r5, #5
 800731e:	d0c0      	beq.n	80072a2 <HAL_TIM_SlaveConfigSynchro+0x5a>
      tmpccer = htim->Instance->CCER;
 8007320:	6a25      	ldr	r5, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007322:	6a20      	ldr	r0, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007324:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007326:	f020 0001 	bic.w	r0, r0, #1
 800732a:	6220      	str	r0, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800732c:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800732e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007332:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8007336:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8007338:	6225      	str	r5, [r4, #32]
      break;
 800733a:	e7bf      	b.n	80072bc <HAL_TIM_SlaveConfigSynchro+0x74>
  tmpccer = TIMx->CCER;
 800733c:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800733e:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007340:	6888      	ldr	r0, [r1, #8]
 8007342:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007344:	f026 0601 	bic.w	r6, r6, #1
 8007348:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800734a:	69a2      	ldr	r2, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800734c:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007350:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8007354:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007356:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800735a:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 800735c:	6221      	str	r1, [r4, #32]
 800735e:	e7ad      	b.n	80072bc <HAL_TIM_SlaveConfigSynchro+0x74>

08007360 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007360:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007364:	2b01      	cmp	r3, #1
 8007366:	d036      	beq.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0x76>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007368:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800736a:	2202      	movs	r2, #2
{
 800736c:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800736e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8007372:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007374:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007376:	4d19      	ldr	r5, [pc, #100]	; (80073dc <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8007378:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800737c:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800737e:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 8007380:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 8007382:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007384:	d019      	beq.n	80073ba <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8007386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800738a:	d016      	beq.n	80073ba <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 800738c:	4a14      	ldr	r2, [pc, #80]	; (80073e0 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d013      	beq.n	80073ba <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8007392:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007396:	4293      	cmp	r3, r2
 8007398:	d00f      	beq.n	80073ba <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 800739a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800739e:	4293      	cmp	r3, r2
 80073a0:	d00b      	beq.n	80073ba <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 80073a2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d007      	beq.n	80073ba <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 80073aa:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d003      	beq.n	80073ba <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 80073b2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d104      	bne.n	80073c4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073ba:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073bc:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073c0:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073c2:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80073c4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80073c6:	2201      	movs	r2, #1
 80073c8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80073cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80073d0:	bc30      	pop	{r4, r5}
  return HAL_OK;
 80073d2:	4618      	mov	r0, r3
}
 80073d4:	4770      	bx	lr
  __HAL_LOCK(htim);
 80073d6:	2002      	movs	r0, #2
}
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	40010000 	.word	0x40010000
 80073e0:	40000400 	.word	0x40000400

080073e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80073e4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d022      	beq.n	8007432 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
{
 80073ec:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80073ee:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 80073f2:	4604      	mov	r4, r0
 80073f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80073f8:	e9d1 2000 	ldrd	r2, r0, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80073fc:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80073fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007402:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007404:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007408:	e9d1 5004 	ldrd	r5, r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800740c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800740e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007412:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007414:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007418:	69c9      	ldr	r1, [r1, #28]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800741a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800741c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800741e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007422:	430b      	orrs	r3, r1

  __HAL_UNLOCK(htim);
 8007424:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8007426:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8007428:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c

  return HAL_OK;
 800742c:	4608      	mov	r0, r1
}
 800742e:	bc30      	pop	{r4, r5}
 8007430:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007432:	2002      	movs	r0, #2
}
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop

08007438 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007438:	2800      	cmp	r0, #0
 800743a:	f000 8090 	beq.w	800755e <HAL_UART_Init+0x126>
{
 800743e:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007440:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007444:	4604      	mov	r4, r0
 8007446:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 8082 	beq.w	8007554 <HAL_UART_Init+0x11c>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007450:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007452:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8007454:	2224      	movs	r2, #36	; 0x24
 8007456:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800745a:	68d8      	ldr	r0, [r3, #12]
 800745c:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007460:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8007464:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007466:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007468:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800746a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800746e:	4329      	orrs	r1, r5
 8007470:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8007472:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007474:	6965      	ldr	r5, [r4, #20]
 8007476:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 8007478:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800747c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 800747e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007482:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8007484:	430a      	orrs	r2, r1
 8007486:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007488:	695a      	ldr	r2, [r3, #20]
 800748a:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800748c:	4935      	ldr	r1, [pc, #212]	; (8007564 <HAL_UART_Init+0x12c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800748e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007492:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007494:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007496:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007498:	d035      	beq.n	8007506 <HAL_UART_Init+0xce>
 800749a:	4a33      	ldr	r2, [pc, #204]	; (8007568 <HAL_UART_Init+0x130>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d032      	beq.n	8007506 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80074a0:	f7ff f968 	bl	8006774 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074a4:	69e3      	ldr	r3, [r4, #28]
 80074a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074aa:	d032      	beq.n	8007512 <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074ac:	6863      	ldr	r3, [r4, #4]
 80074ae:	4e2f      	ldr	r6, [pc, #188]	; (800756c <HAL_UART_Init+0x134>)
 80074b0:	2119      	movs	r1, #25
 80074b2:	009a      	lsls	r2, r3, #2
 80074b4:	fba0 0101 	umull	r0, r1, r0, r1
 80074b8:	0f9b      	lsrs	r3, r3, #30
 80074ba:	f7f9 fc05 	bl	8000cc8 <__aeabi_uldivmod>
 80074be:	fba6 2500 	umull	r2, r5, r6, r0
 80074c2:	096d      	lsrs	r5, r5, #5
 80074c4:	2164      	movs	r1, #100	; 0x64
 80074c6:	fb01 0215 	mls	r2, r1, r5, r0
 80074ca:	0112      	lsls	r2, r2, #4
 80074cc:	3232      	adds	r2, #50	; 0x32
 80074ce:	6823      	ldr	r3, [r4, #0]
 80074d0:	fba6 1202 	umull	r1, r2, r6, r2
 80074d4:	012d      	lsls	r5, r5, #4
 80074d6:	eb05 1252 	add.w	r2, r5, r2, lsr #5
 80074da:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074dc:	691a      	ldr	r2, [r3, #16]
 80074de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074e4:	695a      	ldr	r2, [r3, #20]
 80074e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074ea:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80074ec:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ee:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80074f0:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80074f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074f6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f8:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80074fa:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80074fe:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8007502:	4628      	mov	r0, r5
}
 8007504:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8007506:	f7ff f945 	bl	8006794 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800750a:	69e3      	ldr	r3, [r4, #28]
 800750c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007510:	d1cc      	bne.n	80074ac <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007512:	6862      	ldr	r2, [r4, #4]
 8007514:	4e15      	ldr	r6, [pc, #84]	; (800756c <HAL_UART_Init+0x134>)
 8007516:	1892      	adds	r2, r2, r2
 8007518:	f04f 0300 	mov.w	r3, #0
 800751c:	f04f 0119 	mov.w	r1, #25
 8007520:	415b      	adcs	r3, r3
 8007522:	fba0 0101 	umull	r0, r1, r0, r1
 8007526:	f7f9 fbcf 	bl	8000cc8 <__aeabi_uldivmod>
 800752a:	fba6 2100 	umull	r2, r1, r6, r0
 800752e:	094d      	lsrs	r5, r1, #5
 8007530:	2164      	movs	r1, #100	; 0x64
 8007532:	fb01 0215 	mls	r2, r1, r5, r0
 8007536:	00d2      	lsls	r2, r2, #3
 8007538:	3232      	adds	r2, #50	; 0x32
 800753a:	fba6 1202 	umull	r1, r2, r6, r2
 800753e:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8007542:	0912      	lsrs	r2, r2, #4
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800754a:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800754e:	440a      	add	r2, r1
 8007550:	609a      	str	r2, [r3, #8]
 8007552:	e7c3      	b.n	80074dc <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8007554:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8007558:	f7fd fb6a 	bl	8004c30 <HAL_UART_MspInit>
 800755c:	e778      	b.n	8007450 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 800755e:	2001      	movs	r0, #1
}
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	40011000 	.word	0x40011000
 8007568:	40011400 	.word	0x40011400
 800756c:	51eb851f 	.word	0x51eb851f

08007570 <HAL_UART_Transmit>:
{
 8007570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007574:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8007576:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 800757a:	2820      	cmp	r0, #32
 800757c:	d177      	bne.n	800766e <HAL_UART_Transmit+0xfe>
    if ((pData == NULL) || (Size == 0U))
 800757e:	4688      	mov	r8, r1
 8007580:	2900      	cmp	r1, #0
 8007582:	d040      	beq.n	8007606 <HAL_UART_Transmit+0x96>
 8007584:	4617      	mov	r7, r2
 8007586:	2a00      	cmp	r2, #0
 8007588:	d03d      	beq.n	8007606 <HAL_UART_Transmit+0x96>
 800758a:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 800758c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8007590:	2b01      	cmp	r3, #1
 8007592:	d06c      	beq.n	800766e <HAL_UART_Transmit+0xfe>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007594:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8007596:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007598:	f04f 0900 	mov.w	r9, #0
 800759c:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
    __HAL_LOCK(huart);
 80075a0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80075a8:	f7fe fa3c 	bl	8005a24 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075ac:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 80075ae:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80075b4:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80075b6:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075b8:	d05c      	beq.n	8007674 <HAL_UART_Transmit+0x104>
    while (huart->TxXferCount > 0U)
 80075ba:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 80075bc:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 80075be:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 80075c0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d07e      	beq.n	80076c6 <HAL_UART_Transmit+0x156>
 80075c8:	6822      	ldr	r2, [r4, #0]
 80075ca:	1c69      	adds	r1, r5, #1
 80075cc:	d11e      	bne.n	800760c <HAL_UART_Transmit+0x9c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075ce:	6813      	ldr	r3, [r2, #0]
 80075d0:	061b      	lsls	r3, r3, #24
 80075d2:	d5fc      	bpl.n	80075ce <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 80075d4:	f1b8 0f00 	cmp.w	r8, #0
 80075d8:	d044      	beq.n	8007664 <HAL_UART_Transmit+0xf4>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80075da:	f818 3b01 	ldrb.w	r3, [r8], #1
 80075de:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80075e0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80075e2:	3b01      	subs	r3, #1
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	84e3      	strh	r3, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80075e8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1ec      	bne.n	80075ca <HAL_UART_Transmit+0x5a>
 80075f0:	1c68      	adds	r0, r5, #1
 80075f2:	d145      	bne.n	8007680 <HAL_UART_Transmit+0x110>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075f4:	6813      	ldr	r3, [r2, #0]
 80075f6:	0659      	lsls	r1, r3, #25
 80075f8:	d5fc      	bpl.n	80075f4 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 80075fa:	2320      	movs	r3, #32
 80075fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8007600:	2000      	movs	r0, #0
}
 8007602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8007606:	2001      	movs	r0, #1
}
 8007608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800760c:	6813      	ldr	r3, [r2, #0]
 800760e:	061f      	lsls	r7, r3, #24
 8007610:	d4e0      	bmi.n	80075d4 <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007612:	b12d      	cbz	r5, 8007620 <HAL_UART_Transmit+0xb0>
 8007614:	f7fe fa06 	bl	8005a24 <HAL_GetTick>
 8007618:	1b80      	subs	r0, r0, r6
 800761a:	4285      	cmp	r5, r0
 800761c:	6822      	ldr	r2, [r4, #0]
 800761e:	d2d4      	bcs.n	80075ca <HAL_UART_Transmit+0x5a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007620:	f102 030c 	add.w	r3, r2, #12
 8007624:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007628:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762c:	f102 000c 	add.w	r0, r2, #12
 8007630:	e840 3100 	strex	r1, r3, [r0]
 8007634:	2900      	cmp	r1, #0
 8007636:	d1f3      	bne.n	8007620 <HAL_UART_Transmit+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007638:	f102 0314 	add.w	r3, r2, #20
 800763c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007640:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007644:	f102 0014 	add.w	r0, r2, #20
 8007648:	e840 3100 	strex	r1, r3, [r0]
 800764c:	2900      	cmp	r1, #0
 800764e:	d1f3      	bne.n	8007638 <HAL_UART_Transmit+0xc8>
        huart->gState  = HAL_UART_STATE_READY;
 8007650:	2320      	movs	r3, #32
 8007652:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8007656:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 800765a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      return HAL_TIMEOUT;
 800765e:	2003      	movs	r0, #3
}
 8007660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007664:	f839 3b02 	ldrh.w	r3, [r9], #2
 8007668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800766c:	e7b7      	b.n	80075de <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 800766e:	2002      	movs	r0, #2
}
 8007670:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007674:	6923      	ldr	r3, [r4, #16]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d19f      	bne.n	80075ba <HAL_UART_Transmit+0x4a>
 800767a:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 800767c:	4698      	mov	r8, r3
 800767e:	e79c      	b.n	80075ba <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007680:	6813      	ldr	r3, [r2, #0]
 8007682:	065b      	lsls	r3, r3, #25
 8007684:	d4b9      	bmi.n	80075fa <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007686:	b12d      	cbz	r5, 8007694 <HAL_UART_Transmit+0x124>
 8007688:	f7fe f9cc 	bl	8005a24 <HAL_GetTick>
 800768c:	1b80      	subs	r0, r0, r6
 800768e:	4285      	cmp	r5, r0
 8007690:	6822      	ldr	r2, [r4, #0]
 8007692:	d2ad      	bcs.n	80075f0 <HAL_UART_Transmit+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007694:	f102 030c 	add.w	r3, r2, #12
 8007698:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800769c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a0:	f102 000c 	add.w	r0, r2, #12
 80076a4:	e840 3100 	strex	r1, r3, [r0]
 80076a8:	2900      	cmp	r1, #0
 80076aa:	d1f3      	bne.n	8007694 <HAL_UART_Transmit+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ac:	f102 0314 	add.w	r3, r2, #20
 80076b0:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b8:	f102 0014 	add.w	r0, r2, #20
 80076bc:	e840 3100 	strex	r1, r3, [r0]
 80076c0:	2900      	cmp	r1, #0
 80076c2:	d1f3      	bne.n	80076ac <HAL_UART_Transmit+0x13c>
 80076c4:	e7c4      	b.n	8007650 <HAL_UART_Transmit+0xe0>
 80076c6:	6822      	ldr	r2, [r4, #0]
 80076c8:	e792      	b.n	80075f0 <HAL_UART_Transmit+0x80>
 80076ca:	bf00      	nop

080076cc <VBS_GetAvBusVoltage_d>:
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
__weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
  return ( pHandle->AvBusVoltage_d );
}
 80076cc:	88c0      	ldrh	r0, [r0, #6]
 80076ce:	4770      	bx	lr

080076d0 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 80076d0:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 80076d2:	8840      	ldrh	r0, [r0, #2]
 80076d4:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 80076d8:	0c00      	lsrs	r0, r0, #16
 80076da:	4770      	bx	lr

080076dc <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 80076dc:	b410      	push	{r4}
 80076de:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80076e0:	8802      	ldrh	r2, [r0, #0]
 80076e2:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 80076e4:	fb03 f403 	mul.w	r4, r3, r3
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80076e8:	fb02 f202 	mul.w	r2, r2, r2
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 80076ec:	fb01 4401 	mla	r4, r1, r1, r4
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80076f0:	42a2      	cmp	r2, r4
{
 80076f2:	b085      	sub	sp, #20
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80076f4:	d219      	bcs.n	800772a <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 80076f6:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 80076fa:	ebc2 6414 	rsb	r4, r2, r4, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 80076fe:	b2e4      	uxtb	r4, r4
 8007700:	eb00 0044 	add.w	r0, r0, r4, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 8007704:	8882      	ldrh	r2, [r0, #4]
 8007706:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 800770a:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 800770c:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8007710:	bfbc      	itt	lt
 8007712:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 8007716:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8007718:	2b00      	cmp	r3, #0
 800771a:	bfbc      	itt	lt
 800771c:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 8007720:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8007722:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8007726:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 800772a:	b289      	uxth	r1, r1
 800772c:	2000      	movs	r0, #0
 800772e:	b29b      	uxth	r3, r3
 8007730:	f361 000f 	bfi	r0, r1, #0, #16
 8007734:	f363 401f 	bfi	r0, r3, #16, #16
}
 8007738:	b005      	add	sp, #20
 800773a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800773e:	4770      	bx	lr

08007740 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8007740:	2300      	movs	r3, #0
 8007742:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 8007744:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 8007746:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 800774a:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 800774e:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8007752:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
}
 8007756:	4770      	bx	lr

08007758 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8007758:	b120      	cbz	r0, 8007764 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 800775a:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 800775e:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8007760:	9b00      	ldr	r3, [sp, #0]
 8007762:	60c3      	str	r3, [r0, #12]
  }
}
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop

08007768 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8007768:	b190      	cbz	r0, 8007790 <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 800776a:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 800776c:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 800776e:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8007770:	b151      	cbz	r1, 8007788 <FCP_CalcCRC+0x20>
 8007772:	1c82      	adds	r2, r0, #2
 8007774:	3901      	subs	r1, #1
 8007776:	fa52 f181 	uxtab	r1, r2, r1
 800777a:	3001      	adds	r0, #1
    {
      nSum += pFrame->Buffer[idx];
 800777c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8007780:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8007782:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 8007784:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8007786:	d1f9      	bne.n	800777c <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 8007788:	eb03 2013 	add.w	r0, r3, r3, lsr #8
 800778c:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  }

  return nCRC ;
}
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop

08007794 <ICS_GetPhaseCurrents>:
__weak void ICS_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  int32_t aux;
  uint16_t reg;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007794:	6f02      	ldr	r2, [r0, #112]	; 0x70

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  /* Ia = (hPhaseAOffset)-(PHASE_A_ADC_CHANNEL vale)  */
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 8007796:	4b20      	ldr	r3, [pc, #128]	; (8007818 <ICS_GetPhaseCurrents+0x84>)
{
 8007798:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800779a:	68d4      	ldr	r4, [r2, #12]
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 800779c:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
  CLEAR_BIT(TIMx->CCER, Channels);
 800779e:	6a22      	ldr	r2, [r4, #32]

  /* Saturation of Ia */
  if ( aux < -INT16_MAX )
 80077a0:	4d1e      	ldr	r5, [pc, #120]	; (800781c <ICS_GetPhaseCurrents+0x88>)
 80077a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80077a6:	6222      	str	r2, [r4, #32]
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 80077a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077aa:	005b      	lsls	r3, r3, #1
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	1b9b      	subs	r3, r3, r6
  if ( aux < -INT16_MAX )
 80077b0:	42ab      	cmp	r3, r5
 80077b2:	da18      	bge.n	80077e6 <ICS_GetPhaseCurrents+0x52>
  {
    pStator_Currents->a = -INT16_MAX;
 80077b4:	800d      	strh	r5, [r1, #0]
 80077b6:	f248 0201 	movw	r2, #32769	; 0x8001
  {
    pStator_Currents->a = ( int16_t )aux;
  }

  /* Ib = (hPhaseBOffset)-(PHASE_B_ADC_CHANNEL value) */
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 80077ba:	4b19      	ldr	r3, [pc, #100]	; (8007820 <ICS_GetPhaseCurrents+0x8c>)
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 80077bc:	6e06      	ldr	r6, [r0, #96]	; 0x60
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 80077be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c

  /* Saturation of Ib */
  if ( aux < -INT16_MAX )
 80077c0:	4c16      	ldr	r4, [pc, #88]	; (800781c <ICS_GetPhaseCurrents+0x88>)
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 80077c2:	005b      	lsls	r3, r3, #1
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	1b9b      	subs	r3, r3, r6
  if ( aux < -INT16_MAX )
 80077c8:	42a3      	cmp	r3, r4
 80077ca:	da15      	bge.n	80077f8 <ICS_GetPhaseCurrents+0x64>
  {
    pStator_Currents->b = -INT16_MAX;
 80077cc:	804c      	strh	r4, [r1, #2]
 80077ce:	f248 0301 	movw	r3, #32769	; 0x8001
    pStator_Currents->b = ( int16_t )aux;
  }

  pHandle->_Super.Ia = pStator_Currents->a;
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80077d2:	4413      	add	r3, r2
 80077d4:	425b      	negs	r3, r3
  pHandle->_Super.Ia = pStator_Currents->a;
 80077d6:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
  pHandle->_Super.Ib = pStator_Currents->b;
 80077da:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80077de:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c

}
 80077e2:	bc70      	pop	{r4, r5, r6}
 80077e4:	4770      	bx	lr
  else  if ( aux > INT16_MAX )
 80077e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077ea:	db11      	blt.n	8007810 <ICS_GetPhaseCurrents+0x7c>
    pStator_Currents->a = INT16_MAX;
 80077ec:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80077f0:	461a      	mov	r2, r3
 80077f2:	800b      	strh	r3, [r1, #0]
 80077f4:	461d      	mov	r5, r3
 80077f6:	e7e0      	b.n	80077ba <ICS_GetPhaseCurrents+0x26>
  else  if ( aux > INT16_MAX )
 80077f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077fc:	db04      	blt.n	8007808 <ICS_GetPhaseCurrents+0x74>
    pStator_Currents->b = INT16_MAX;
 80077fe:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8007802:	4623      	mov	r3, r4
 8007804:	804c      	strh	r4, [r1, #2]
 8007806:	e7e4      	b.n	80077d2 <ICS_GetPhaseCurrents+0x3e>
    pStator_Currents->b = ( int16_t )aux;
 8007808:	b21c      	sxth	r4, r3
 800780a:	804c      	strh	r4, [r1, #2]
 800780c:	b29b      	uxth	r3, r3
 800780e:	e7e0      	b.n	80077d2 <ICS_GetPhaseCurrents+0x3e>
    pStator_Currents->a = ( int16_t )aux;
 8007810:	b21d      	sxth	r5, r3
 8007812:	800d      	strh	r5, [r1, #0]
 8007814:	b29a      	uxth	r2, r3
 8007816:	e7d0      	b.n	80077ba <ICS_GetPhaseCurrents+0x26>
 8007818:	40012000 	.word	0x40012000
 800781c:	ffff8001 	.word	0xffff8001
 8007820:	40012100 	.word	0x40012100

08007824 <ICS_HFCurrentsCalibration>:
* @retval Always returns {0,0} in ab_t format
*/
__weak void ICS_HFCurrentsCalibration( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007824:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8007826:	68da      	ldr	r2, [r3, #12]
 8007828:	6a13      	ldr	r3, [r2, #32]
 800782a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800782e:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH4 );

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8007830:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8007834:	2b0f      	cmp	r3, #15
 8007836:	d814      	bhi.n	8007862 <ICS_HFCurrentsCalibration+0x3e>
  {
    pHandle->PhaseAOffset += ADC1->JDR1;
 8007838:	4a0b      	ldr	r2, [pc, #44]	; (8007868 <ICS_HFCurrentsCalibration+0x44>)
 800783a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
{
 800783c:	b430      	push	{r4, r5}
    pHandle->PhaseAOffset += ADC1->JDR1;
 800783e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
    pHandle->PhaseBOffset += ADC2->JDR1;
 8007840:	4c0a      	ldr	r4, [pc, #40]	; (800786c <ICS_HFCurrentsCalibration+0x48>)
 8007842:	6e02      	ldr	r2, [r0, #96]	; 0x60
    pHandle->PhaseAOffset += ADC1->JDR1;
 8007844:	442b      	add	r3, r5
 8007846:	65c3      	str	r3, [r0, #92]	; 0x5c
    pHandle->PhaseBOffset += ADC2->JDR1;
 8007848:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    pHandle->PolarizationCounter++;
 800784a:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 800784e:	3301      	adds	r3, #1
 8007850:	b2db      	uxtb	r3, r3
    pHandle->PhaseBOffset += ADC2->JDR1;
 8007852:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8007854:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8007858:	2300      	movs	r3, #0
    pHandle->PhaseBOffset += ADC2->JDR1;
 800785a:	6602      	str	r2, [r0, #96]	; 0x60
  pStator_Currents->b = 0;
}
 800785c:	bc30      	pop	{r4, r5}
  pStator_Currents->a = 0;
 800785e:	600b      	str	r3, [r1, #0]
}
 8007860:	4770      	bx	lr
  pStator_Currents->a = 0;
 8007862:	2300      	movs	r3, #0
 8007864:	600b      	str	r3, [r1, #0]
 8007866:	4770      	bx	lr
 8007868:	40012000 	.word	0x40012000
 800786c:	40012100 	.word	0x40012100

08007870 <ICS_Init>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007870:	6f01      	ldr	r1, [r0, #112]	; 0x70
 8007872:	68cb      	ldr	r3, [r1, #12]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	f022 0201 	bic.w	r2, r2, #1
 800787a:	601a      	str	r2, [r3, #0]
    if ( ( pHandle->pParams_str->EmergencyStop ) != DISABLE )
 800787c:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
 8007880:	b132      	cbz	r2, 8007890 <ICS_Init+0x20>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8007882:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007886:	611a      	str	r2, [r3, #16]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_BRK(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8007888:	68da      	ldr	r2, [r3, #12]
 800788a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800788e:	60da      	str	r2, [r3, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007890:	695a      	ldr	r2, [r3, #20]
 8007892:	f042 0201 	orr.w	r2, r2, #1
 8007896:	615a      	str	r2, [r3, #20]
    if ( pHandle->pParams_str->FreqRatio == 2u )
 8007898:	790a      	ldrb	r2, [r1, #4]
 800789a:	2a02      	cmp	r2, #2
 800789c:	d034      	beq.n	8007908 <ICS_Init+0x98>
      if ( pHandle->pParams_str->InstanceNbr == 1u )
 800789e:	780a      	ldrb	r2, [r1, #0]
 80078a0:	2a01      	cmp	r2, #1
 80078a2:	d03d      	beq.n	8007920 <ICS_Init+0xb0>
  SET_BIT(TIMx->CCER, Channels);
 80078a4:	6a1a      	ldr	r2, [r3, #32]
    if ( pHandle->pParams_str->TIMx == TIM1 )
 80078a6:	4921      	ldr	r1, [pc, #132]	; (800792c <ICS_Init+0xbc>)
 80078a8:	f442 62aa 	orr.w	r2, r2, #1360	; 0x550
 80078ac:	f042 0205 	orr.w	r2, r2, #5
 80078b0:	621a      	str	r2, [r3, #32]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 80078b2:	4a1f      	ldr	r2, [pc, #124]	; (8007930 <ICS_Init+0xc0>)
 80078b4:	428b      	cmp	r3, r1
 80078b6:	68d3      	ldr	r3, [r2, #12]
 80078b8:	bf0c      	ite	eq
 80078ba:	f043 0301 	orreq.w	r3, r3, #1
 80078be:	f043 0302 	orrne.w	r3, r3, #2
 80078c2:	60d3      	str	r3, [r2, #12]
      pHandle->ADCTriggerSet = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 80078c4:	bf08      	it	eq
 80078c6:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80078ca:	4b1a      	ldr	r3, [pc, #104]	; (8007934 <ICS_Init+0xc4>)
      pHandle->ADCTriggerSet = LL_ADC_INJ_TRIG_EXT_TIM8_CH4;
 80078cc:	bf18      	it	ne
 80078ce:	f44f 11f0 	movne.w	r1, #1966080	; 0x1e0000
 80078d2:	6681      	str	r1, [r0, #104]	; 0x68
 80078d4:	689a      	ldr	r2, [r3, #8]
 80078d6:	4918      	ldr	r1, [pc, #96]	; (8007938 <ICS_Init+0xc8>)
 80078d8:	f042 0201 	orr.w	r2, r2, #1
 80078dc:	609a      	str	r2, [r3, #8]
 80078de:	688a      	ldr	r2, [r1, #8]
 80078e0:	f042 0201 	orr.w	r2, r2, #1
 80078e4:	608a      	str	r2, [r1, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80078e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80078e8:	f06f 0104 	mvn.w	r1, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80078ec:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80078f0:	62da      	str	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80078f2:	6019      	str	r1, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80078f4:	685a      	ldr	r2, [r3, #4]
    pHandle->OverCurrentFlag = false;
 80078f6:	2100      	movs	r1, #0
 80078f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80078fc:	605a      	str	r2, [r3, #4]
 80078fe:	f880 106c 	strb.w	r1, [r0, #108]	; 0x6c
    pHandle->_Super.DTTest = 0u;
 8007902:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
}
 8007906:	4770      	bx	lr
      if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 8007908:	794a      	ldrb	r2, [r1, #5]
 800790a:	2a01      	cmp	r2, #1
 800790c:	d108      	bne.n	8007920 <ICS_Init+0xb0>
        if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800790e:	7a09      	ldrb	r1, [r1, #8]
 8007910:	2903      	cmp	r1, #3
 8007912:	d105      	bne.n	8007920 <ICS_Init+0xb0>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007914:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007916:	695a      	ldr	r2, [r3, #20]
 8007918:	f042 0201 	orr.w	r2, r2, #1
 800791c:	615a      	str	r2, [r3, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800791e:	6319      	str	r1, [r3, #48]	; 0x30
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8007920:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 8007924:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 8007926:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007928:	e7bc      	b.n	80078a4 <ICS_Init+0x34>
 800792a:	bf00      	nop
 800792c:	40010000 	.word	0x40010000
 8007930:	e0042000 	.word	0xe0042000
 8007934:	40012000 	.word	0x40012000
 8007938:	40012100 	.word	0x40012100

0800793c <ICS_TurnOnLowSides>:
  * @param pHdl ICS F4xx PWM Current Feedback Handle
  */
__weak void ICS_TurnOnLowSides( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800793c:	6f01      	ldr	r1, [r0, #112]	; 0x70

  pHandle->_Super.TurnOnLowSidesAction = true;
 800793e:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007940:	68ca      	ldr	r2, [r1, #12]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8007942:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007946:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007948:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800794c:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800794e:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007950:	63d3      	str	r3, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007952:	6110      	str	r0, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007954:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0 );
  LL_TIM_OC_SetCompareCH2( TIMx, 0 );
  LL_TIM_OC_SetCompareCH3( TIMx, 0 );

  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET ) ;
 8007956:	07db      	lsls	r3, r3, #31
 8007958:	d5fc      	bpl.n	8007954 <ICS_TurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800795a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800795c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007960:	6453      	str	r3, [r2, #68]	; 0x44

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007962:	7c0b      	ldrb	r3, [r1, #16]
 8007964:	2b02      	cmp	r3, #2
 8007966:	d000      	beq.n	800796a <ICS_TurnOnLowSides+0x2e>
 8007968:	4770      	bx	lr
{
 800796a:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800796c:	69c8      	ldr	r0, [r1, #28]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800796e:	694d      	ldr	r5, [r1, #20]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007970:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007972:	698e      	ldr	r6, [r1, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007974:	6a0c      	ldr	r4, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007976:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007978:	61ae      	str	r6, [r5, #24]
 800797a:	6184      	str	r4, [r0, #24]
  }
}
 800797c:	bc70      	pop	{r4, r5, r6}
 800797e:	619a      	str	r2, [r3, #24]
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop

08007984 <ICS_SwitchOnPWM>:
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOnPWM( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007984:	6f01      	ldr	r1, [r0, #112]	; 0x70

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 8007986:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800798a:	68cb      	ldr	r3, [r1, #12]
{
 800798c:	b4f0      	push	{r4, r5, r6, r7}
  pHandle->_Super.TurnOnLowSidesAction = false;
 800798e:	2400      	movs	r4, #0
 8007990:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 8007994:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007996:	f06f 0401 	mvn.w	r4, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 800799a:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 800799c:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800799e:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80079a0:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80079a2:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80079a4:	611c      	str	r4, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80079a6:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80079a8:	07d2      	lsls	r2, r2, #31
 80079aa:	d5fc      	bpl.n	80079a6 <ICS_SwitchOnPWM+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80079ac:	f06f 0201 	mvn.w	r2, #1
 80079b0:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80079b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079b8:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80079ba:	7c0a      	ldrb	r2, [r1, #16]
 80079bc:	2a02      	cmp	r2, #2
 80079be:	d008      	beq.n	80079d2 <ICS_SwitchOnPWM+0x4e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80079c0:	f06f 0201 	mvn.w	r2, #1
 80079c4:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80079c6:	68da      	ldr	r2, [r3, #12]
 80079c8:	f042 0201 	orr.w	r2, r2, #1
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

}
 80079cc:	bcf0      	pop	{r4, r5, r6, r7}
 80079ce:	60da      	str	r2, [r3, #12]
 80079d0:	4770      	bx	lr
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 80079d2:	6a18      	ldr	r0, [r3, #32]
 80079d4:	f240 5255 	movw	r2, #1365	; 0x555
 80079d8:	4382      	bics	r2, r0
 80079da:	d00c      	beq.n	80079f6 <ICS_SwitchOnPWM+0x72>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80079dc:	698c      	ldr	r4, [r1, #24]
 80079de:	6a08      	ldr	r0, [r1, #32]
 80079e0:	6a8a      	ldr	r2, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80079e2:	694f      	ldr	r7, [r1, #20]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80079e4:	69ce      	ldr	r6, [r1, #28]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80079e6:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 80079e8:	0424      	lsls	r4, r4, #16
 80079ea:	0400      	lsls	r0, r0, #16
 80079ec:	0412      	lsls	r2, r2, #16
 80079ee:	61bc      	str	r4, [r7, #24]
 80079f0:	61b0      	str	r0, [r6, #24]
 80079f2:	61aa      	str	r2, [r5, #24]
}
 80079f4:	e7e4      	b.n	80079c0 <ICS_SwitchOnPWM+0x3c>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80079f6:	694c      	ldr	r4, [r1, #20]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80079f8:	69c8      	ldr	r0, [r1, #28]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80079fa:	6a4a      	ldr	r2, [r1, #36]	; 0x24
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80079fc:	698d      	ldr	r5, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80079fe:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007a00:	6a0c      	ldr	r4, [r1, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007a02:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8007a04:	6184      	str	r4, [r0, #24]
 8007a06:	6191      	str	r1, [r2, #24]
}
 8007a08:	e7da      	b.n	80079c0 <ICS_SwitchOnPWM+0x3c>
 8007a0a:	bf00      	nop

08007a0c <ICS_SwitchOffPWM>:
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007a0c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8007a0e:	68da      	ldr	r2, [r3, #12]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007a10:	68d1      	ldr	r1, [r2, #12]
 8007a12:	f021 0101 	bic.w	r1, r1, #1
{
 8007a16:	b4f0      	push	{r4, r5, r6, r7}
 8007a18:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007a1a:	6c51      	ldr	r1, [r2, #68]	; 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 8007a1c:	2400      	movs	r4, #0
 8007a1e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8007a22:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
 8007a26:	6451      	str	r1, [r2, #68]	; 0x44

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007a28:	7c19      	ldrb	r1, [r3, #16]
 8007a2a:	2902      	cmp	r1, #2
 8007a2c:	d10b      	bne.n	8007a46 <ICS_SwitchOffPWM+0x3a>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007a2e:	699c      	ldr	r4, [r3, #24]
 8007a30:	6a18      	ldr	r0, [r3, #32]
 8007a32:	6a99      	ldr	r1, [r3, #40]	; 0x28
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007a34:	695f      	ldr	r7, [r3, #20]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007a36:	69de      	ldr	r6, [r3, #28]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007a38:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8007a3a:	0424      	lsls	r4, r4, #16
 8007a3c:	0400      	lsls	r0, r0, #16
 8007a3e:	0409      	lsls	r1, r1, #16
 8007a40:	61bc      	str	r4, [r7, #24]
 8007a42:	61b0      	str	r0, [r6, #24]
 8007a44:	61a9      	str	r1, [r5, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007a46:	f06f 0301 	mvn.w	r3, #1
 8007a4a:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007a4c:	6913      	ldr	r3, [r2, #16]
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8007a4e:	07db      	lsls	r3, r3, #31
 8007a50:	d5fc      	bpl.n	8007a4c <ICS_SwitchOffPWM+0x40>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007a52:	f06f 0301 	mvn.w	r3, #1
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  return;
}
 8007a56:	bcf0      	pop	{r4, r5, r6, r7}
 8007a58:	6113      	str	r3, [r2, #16]
 8007a5a:	4770      	bx	lr

08007a5c <ICS_CurrentReadingCalibration>:
{
 8007a5c:	b538      	push	{r3, r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007a5e:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsCalibration;
 8007a60:	4924      	ldr	r1, [pc, #144]	; (8007af4 <ICS_CurrentReadingCalibration+0x98>)
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007a62:	68dc      	ldr	r4, [r3, #12]
  pHandle->PhaseAOffset = 0u;
 8007a64:	2200      	movs	r2, #0
  pHandle->PolarizationCounter = 0u;
 8007a66:	f880 2066 	strb.w	r2, [r0, #102]	; 0x66
  CLEAR_BIT(TIMx->CCER, Channels);
 8007a6a:	6a23      	ldr	r3, [r4, #32]
  pHandle->PhaseAOffset = 0u;
 8007a6c:	65c2      	str	r2, [r0, #92]	; 0x5c
 8007a6e:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
{
 8007a72:	4605      	mov	r5, r0
 8007a74:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseBOffset = 0u;
 8007a78:	6602      	str	r2, [r0, #96]	; 0x60
 8007a7a:	6223      	str	r3, [r4, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsCalibration;
 8007a7c:	6041      	str	r1, [r0, #4]
  ICS_SwitchOnPWM( &pHandle->_Super );
 8007a7e:	f7ff ff81 	bl	8007984 <ICS_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8007a82:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007a84:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8007a88:	7a1a      	ldrb	r2, [r3, #8]
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	f105 0366 	add.w	r3, r5, #102	; 0x66
 8007a90:	f000 fa08 	bl	8007ea4 <waitForPolarizationEnd>
  ICS_SwitchOffPWM( &pHandle->_Super );
 8007a94:	4628      	mov	r0, r5
 8007a96:	f7ff ffb9 	bl	8007a0c <ICS_SwitchOffPWM>
  pHandle->PhaseBOffset >>= 3;
 8007a9a:	e9d5 0217 	ldrd	r0, r2, [r5, #92]	; 0x5c
 8007a9e:	08d2      	lsrs	r2, r2, #3
  pHandle->PhaseAOffset >>= 3;
 8007aa0:	08c0      	lsrs	r0, r0, #3
  pHandle->PhaseBOffset >>= 3;
 8007aa2:	e9c5 0217 	strd	r0, r2, [r5, #92]	; 0x5c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007aa6:	69a2      	ldr	r2, [r4, #24]
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->Half_PWMPeriod );
 8007aa8:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_GetPhaseCurrents;
 8007aac:	4912      	ldr	r1, [pc, #72]	; (8007af8 <ICS_CurrentReadingCalibration+0x9c>)
 8007aae:	f022 0208 	bic.w	r2, r2, #8
 8007ab2:	61a2      	str	r2, [r4, #24]
 8007ab4:	69a2      	ldr	r2, [r4, #24]
 8007ab6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007aba:	61a2      	str	r2, [r4, #24]
 8007abc:	69e2      	ldr	r2, [r4, #28]
 8007abe:	f022 0208 	bic.w	r2, r2, #8
 8007ac2:	61e2      	str	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007ac4:	6363      	str	r3, [r4, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007ac6:	63a3      	str	r3, [r4, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007ac8:	63e3      	str	r3, [r4, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007aca:	69a3      	ldr	r3, [r4, #24]
 8007acc:	f043 0308 	orr.w	r3, r3, #8
 8007ad0:	61a3      	str	r3, [r4, #24]
 8007ad2:	69a3      	ldr	r3, [r4, #24]
 8007ad4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007ad8:	61a3      	str	r3, [r4, #24]
 8007ada:	69e3      	ldr	r3, [r4, #28]
 8007adc:	f043 0308 	orr.w	r3, r3, #8
 8007ae0:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 8007ae2:	6a23      	ldr	r3, [r4, #32]
 8007ae4:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8007ae8:	f043 0305 	orr.w	r3, r3, #5
 8007aec:	6223      	str	r3, [r4, #32]
 8007aee:	6069      	str	r1, [r5, #4]
}
 8007af0:	bd38      	pop	{r3, r4, r5, pc}
 8007af2:	bf00      	nop
 8007af4:	08007825 	.word	0x08007825
 8007af8:	08007795 	.word	0x08007795

08007afc <ICS_WriteTIMRegisters>:
*/
__weak uint16_t ICS_WriteTIMRegisters( PWMC_Handle_t * pHdl )
{
  uint16_t aux;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007afc:	6f03      	ldr	r3, [r0, #112]	; 0x70

  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
  LL_TIM_OC_SetCompareCH2( TIMx, pHandle->_Super.CntPhB );
 8007afe:	8e81      	ldrh	r1, [r0, #52]	; 0x34
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007b00:	68db      	ldr	r3, [r3, #12]
  LL_TIM_OC_SetCompareCH3( TIMx, pHandle->_Super.CntPhC );
 8007b02:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
{
 8007b04:	b410      	push	{r4}
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
 8007b06:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007b08:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007b0a:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007b0c:	63da      	str	r2, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8007b0e:	6a18      	ldr	r0, [r3, #32]
  else
  {
    aux = MC_NO_ERROR;
  }
  return aux;
}
 8007b10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b14:	f3c0 3000 	ubfx	r0, r0, #12, #1
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop

08007b1c <ICS_TIMx_UP_IRQHandler>:
__weak void * ICS_TIMx_UP_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{
  uint32_t adcinjflags;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;

  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 8007b1c:	4922      	ldr	r1, [pc, #136]	; (8007ba8 <ICS_TIMx_UP_IRQHandler+0x8c>)
 8007b1e:	680b      	ldr	r3, [r1, #0]
{
 8007b20:	b4f0      	push	{r4, r5, r6, r7}
  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 8007b22:	f003 030c 	and.w	r3, r3, #12
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007b26:	6f04      	ldr	r4, [r0, #112]	; 0x70

  if ( adcinjflags == CONV_STARTED )
 8007b28:	2b08      	cmp	r3, #8
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007b2a:	68e2      	ldr	r2, [r4, #12]
  if ( adcinjflags == CONV_STARTED )
 8007b2c:	d026      	beq.n	8007b7c <ICS_TIMx_UP_IRQHandler+0x60>
    {
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
    }
    while ( adcinjflags != CONV_FINISHED );
  }
  else if ( adcinjflags == FLAGS_CLEARED )
 8007b2e:	b94b      	cbnz	r3, 8007b44 <ICS_TIMx_UP_IRQHandler+0x28>
  {
    while ( ( TIMx->CNT ) < ( pHandle->pParams_str->Tw ) )
 8007b30:	8861      	ldrh	r1, [r4, #2]
 8007b32:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8007b34:	428b      	cmp	r3, r1
 8007b36:	d3fc      	bcc.n	8007b32 <ICS_TIMx_UP_IRQHandler+0x16>
    {}
    adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8007b38:	491b      	ldr	r1, [pc, #108]	; (8007ba8 <ICS_TIMx_UP_IRQHandler+0x8c>)
 8007b3a:	680b      	ldr	r3, [r1, #0]
 8007b3c:	f003 030c 	and.w	r3, r3, #12

    if ( adcinjflags == CONV_STARTED )
 8007b40:	2b08      	cmp	r3, #8
 8007b42:	d026      	beq.n	8007b92 <ICS_TIMx_UP_IRQHandler+0x76>
  MODIFY_REG(ADCx->CR2, ADC_CR2_JEXTSEL, (TriggerSource & ADC_CR2_JEXTSEL));
 8007b44:	4f18      	ldr	r7, [pc, #96]	; (8007ba8 <ICS_TIMx_UP_IRQHandler+0x8c>)
 8007b46:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8007b48:	68b9      	ldr	r1, [r7, #8]
 8007b4a:	4e18      	ldr	r6, [pc, #96]	; (8007bac <ICS_TIMx_UP_IRQHandler+0x90>)
 8007b4c:	f403 2570 	and.w	r5, r3, #983040	; 0xf0000
 8007b50:	f421 2170 	bic.w	r1, r1, #983040	; 0xf0000
 8007b54:	4329      	orrs	r1, r5
 8007b56:	60b9      	str	r1, [r7, #8]
 8007b58:	68b3      	ldr	r3, [r6, #8]
 8007b5a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8007b5e:	432b      	orrs	r3, r5
 8007b60:	60b3      	str	r3, [r6, #8]
  /* It re-initilize AD converter in run time when using dual MC */
  LL_ADC_INJ_SetTriggerSource(ADC1, pHandle->ADCTriggerSet);
  LL_ADC_INJ_SetTriggerSource(ADC2, pHandle->ADCTriggerSet);

  /* Change channels keeping equal to 1 element the sequencer lenght */
  ADC1->JSQR = ( uint32_t )( pHandle->pParams_str->IaChannel ) << 15;
 8007b62:	79a3      	ldrb	r3, [r4, #6]
 8007b64:	03db      	lsls	r3, r3, #15
 8007b66:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC2->JSQR = ( uint32_t )( pHandle->pParams_str->IbChannel ) << 15;
 8007b68:	79e3      	ldrb	r3, [r4, #7]
 8007b6a:	03db      	lsls	r3, r3, #15
 8007b6c:	63b3      	str	r3, [r6, #56]	; 0x38
  SET_BIT(TIMx->CCER, Channels);
 8007b6e:	6a13      	ldr	r3, [r2, #32]
 8007b70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000

  LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH4 );

  return &( pHandle->_Super.Motor );
}
 8007b74:	3046      	adds	r0, #70	; 0x46
 8007b76:	bcf0      	pop	{r4, r5, r6, r7}
 8007b78:	6213      	str	r3, [r2, #32]
 8007b7a:	4770      	bx	lr
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8007b7c:	680b      	ldr	r3, [r1, #0]
 8007b7e:	f003 030c 	and.w	r3, r3, #12
    while ( adcinjflags != CONV_FINISHED );
 8007b82:	2b0c      	cmp	r3, #12
 8007b84:	d0de      	beq.n	8007b44 <ICS_TIMx_UP_IRQHandler+0x28>
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8007b86:	680b      	ldr	r3, [r1, #0]
 8007b88:	f003 030c 	and.w	r3, r3, #12
    while ( adcinjflags != CONV_FINISHED );
 8007b8c:	2b0c      	cmp	r3, #12
 8007b8e:	d1f5      	bne.n	8007b7c <ICS_TIMx_UP_IRQHandler+0x60>
 8007b90:	e7d8      	b.n	8007b44 <ICS_TIMx_UP_IRQHandler+0x28>
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8007b92:	680b      	ldr	r3, [r1, #0]
 8007b94:	f003 030c 	and.w	r3, r3, #12
      while ( adcinjflags != CONV_FINISHED );
 8007b98:	2b0c      	cmp	r3, #12
 8007b9a:	d0d3      	beq.n	8007b44 <ICS_TIMx_UP_IRQHandler+0x28>
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8007b9c:	680b      	ldr	r3, [r1, #0]
 8007b9e:	f003 030c 	and.w	r3, r3, #12
      while ( adcinjflags != CONV_FINISHED );
 8007ba2:	2b0c      	cmp	r3, #12
 8007ba4:	d1f5      	bne.n	8007b92 <ICS_TIMx_UP_IRQHandler+0x76>
 8007ba6:	e7cd      	b.n	8007b44 <ICS_TIMx_UP_IRQHandler+0x28>
 8007ba8:	40012000 	.word	0x40012000
 8007bac:	40012100 	.word	0x40012100

08007bb0 <ICS_BRK_IRQHandler>:
 * @retval none
 */
__weak void * ICS_BRK_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007bb0:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8007bb2:	7c1a      	ldrb	r2, [r3, #16]
 8007bb4:	2a02      	cmp	r2, #2
 8007bb6:	d004      	beq.n	8007bc2 <ICS_BRK_IRQHandler+0x12>
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
  }
  pHandle->OverCurrentFlag = true;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c

  return &( pHandle->_Super.Motor );
}
 8007bbe:	3046      	adds	r0, #70	; 0x46
 8007bc0:	4770      	bx	lr
{
 8007bc2:	b4f0      	push	{r4, r5, r6, r7}
 8007bc4:	6a19      	ldr	r1, [r3, #32]
 8007bc6:	699c      	ldr	r4, [r3, #24]
 8007bc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007bca:	695f      	ldr	r7, [r3, #20]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007bcc:	69de      	ldr	r6, [r3, #28]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007bce:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8007bd0:	0424      	lsls	r4, r4, #16
 8007bd2:	0409      	lsls	r1, r1, #16
 8007bd4:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	61bc      	str	r4, [r7, #24]
}
 8007bda:	3046      	adds	r0, #70	; 0x46
 8007bdc:	61b1      	str	r1, [r6, #24]
 8007bde:	61aa      	str	r2, [r5, #24]
  pHandle->OverCurrentFlag = true;
 8007be0:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
}
 8007be4:	bcf0      	pop	{r4, r5, r6, r7}
 8007be6:	4770      	bx	lr

08007be8 <ICS_IsOverCurrentOccurred>:
__weak uint16_t ICS_IsOverCurrentOccurred( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  uint16_t retval = MC_NO_FAULTS;

  if ( pHandle->OverCurrentFlag == true )
 8007be8:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 8007bec:	b90b      	cbnz	r3, 8007bf2 <ICS_IsOverCurrentOccurred+0xa>
  uint16_t retval = MC_NO_FAULTS;
 8007bee:	4618      	mov	r0, r3
  {
    retval = MC_BREAK_IN;
    pHandle->OverCurrentFlag = false;
  }
  return retval;
}
 8007bf0:	4770      	bx	lr
    pHandle->OverCurrentFlag = false;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
    retval = MC_BREAK_IN;
 8007bf8:	2040      	movs	r0, #64	; 0x40
 8007bfa:	4770      	bx	lr

08007bfc <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8007bfc:	b510      	push	{r4, lr}
 8007bfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c02:	4604      	mov	r4, r0
 8007c04:	2100      	movs	r1, #0
 8007c06:	f001 fc89 	bl	800951c <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8007c10:	bd10      	pop	{r4, pc}
 8007c12:	bf00      	nop

08007c14 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8007c14:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8007c18:	1c53      	adds	r3, r2, #1
 8007c1a:	b29b      	uxth	r3, r3
{
 8007c1c:	b470      	push	{r4, r5, r6}
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8007c1e:	2b7f      	cmp	r3, #127	; 0x7f
{
 8007c20:	4606      	mov	r6, r0
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8007c22:	bf88      	it	hi
 8007c24:	2300      	movhi	r3, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8007c26:	f826 1012 	strh.w	r1, [r6, r2, lsl #1]
{
 8007c2a:	4608      	mov	r0, r1
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8007c2c:	f8a6 2102 	strh.w	r2, [r6, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8007c30:	f8a6 3100 	strh.w	r3, [r6, #256]	; 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8007c34:	f106 05fe 	add.w	r5, r6, #254	; 0xfe
 8007c38:	1eb3      	subs	r3, r6, #2
  int32_t wAux = 0;
 8007c3a:	2200      	movs	r2, #0
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8007c3c:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8007c40:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8007c42:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8007c44:	d1fa      	bne.n	8007c3c <MPM_CalcElMotorPower+0x28>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8007c46:	2a00      	cmp	r2, #0
 8007c48:	bfb8      	it	lt
 8007c4a:	327f      	addlt	r2, #127	; 0x7f
 8007c4c:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8007c4e:	f8a6 2104 	strh.w	r2, [r6, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8007c52:	bc70      	pop	{r4, r5, r6}
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop

08007c58 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8007c58:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop

08007c60 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8007c60:	8a03      	ldrh	r3, [r0, #16]
 8007c62:	8b42      	ldrh	r2, [r0, #26]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d306      	bcc.n	8007c76 <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8007c68:	8b82      	ldrh	r2, [r0, #28]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d901      	bls.n	8007c72 <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 8007c6e:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 8007c70:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 8007c72:	8ac0      	ldrh	r0, [r0, #22]
 8007c74:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8007c76:	2008      	movs	r0, #8
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop

08007c7c <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	8203      	strh	r3, [r0, #16]
}
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop

08007c84 <NTC_Init>:
{
 8007c84:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 8007c86:	7803      	ldrb	r3, [r0, #0]
{
 8007c88:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8007c8a:	b123      	cbz	r3, 8007c96 <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8007c8c:	8a43      	ldrh	r3, [r0, #18]
 8007c8e:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 8007c90:	2200      	movs	r2, #0
 8007c92:	82c2      	strh	r2, [r0, #22]
}
 8007c94:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8007c96:	3004      	adds	r0, #4
 8007c98:	f7fc fc96 	bl	80045c8 <RCM_RegisterRegConv>
 8007c9c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	f7ff ffeb 	bl	8007c7c <NTC_Clear>
}
 8007ca6:	bd10      	pop	{r4, pc}

08007ca8 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8007ca8:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8007caa:	7803      	ldrb	r3, [r0, #0]
{
 8007cac:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8007cae:	b113      	cbz	r3, 8007cb6 <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 8007cb4:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8007cb6:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8007cba:	f7fc fdc1 	bl	8004840 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8007cbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007cc2:	4298      	cmp	r0, r3
 8007cc4:	d007      	beq.n	8007cd6 <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8007cc6:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8007cc8:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8007cca:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 8007ccc:	fb01 0003 	mla	r0, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8007cd0:	fbb0 f0f2 	udiv	r0, r0, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8007cd4:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	f7ff ffc2 	bl	8007c60 <NTC_SetFaultState>
 8007cdc:	82e0      	strh	r0, [r4, #22]
}
 8007cde:	bd10      	pop	{r4, pc}

08007ce0 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8007ce0:	7803      	ldrb	r3, [r0, #0]
 8007ce2:	b983      	cbnz	r3, 8007d06 <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8007ce4:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8007ce6:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8007ce8:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8007cec:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8007cee:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 8007cf0:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	bfbc      	itt	lt
 8007cf8:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8007cfc:	33ff      	addlt	r3, #255	; 0xff
 8007cfe:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 8007d02:	b200      	sxth	r0, r0
 8007d04:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 8007d06:	8a80      	ldrh	r0, [r0, #20]
}
 8007d08:	b200      	sxth	r0, r0
 8007d0a:	4770      	bx	lr

08007d0c <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8007d0c:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8007d0e:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8007d10:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8007d12:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8007d14:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8007d16:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8007d18:	6283      	str	r3, [r0, #40]	; 0x28
}
 8007d1a:	4770      	bx	lr

08007d1c <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8007d1c:	8081      	strh	r1, [r0, #4]
}
 8007d1e:	4770      	bx	lr

08007d20 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8007d20:	80c1      	strh	r1, [r0, #6]
}
 8007d22:	4770      	bx	lr

08007d24 <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8007d24:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop

08007d2c <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8007d2c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop

08007d34 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8007d34:	6081      	str	r1, [r0, #8]

  return;
}
 8007d36:	4770      	bx	lr

08007d38 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8007d38:	8b00      	ldrh	r0, [r0, #24]
 8007d3a:	4770      	bx	lr

08007d3c <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8007d3c:	8b40      	ldrh	r0, [r0, #26]
 8007d3e:	4770      	bx	lr

08007d40 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8007d40:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8007d42:	4770      	bx	lr

08007d44 <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8007d44:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop

08007d4c <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8007d4c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8007d50:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
{
 8007d54:	b470      	push	{r4, r5, r6}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8007d56:	fb01 f303 	mul.w	r3, r1, r3
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8007d5a:	f9b0 4014 	ldrsh.w	r4, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8007d5e:	f9b0 5016 	ldrsh.w	r5, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 8007d62:	b162      	cbz	r2, 8007d7e <PI_Controller+0x32>
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8007d64:	6886      	ldr	r6, [r0, #8]
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8007d66:	fb01 f102 	mul.w	r1, r1, r2

    if ( wIntegral_sum_temp < 0 )
 8007d6a:	1872      	adds	r2, r6, r1
 8007d6c:	d420      	bmi.n	8007db0 <PI_Controller+0x64>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8007d6e:	2e00      	cmp	r6, #0
 8007d70:	db29      	blt.n	8007dc6 <PI_Controller+0x7a>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8007d72:	68c1      	ldr	r1, [r0, #12]
 8007d74:	4291      	cmp	r1, r2
 8007d76:	db03      	blt.n	8007d80 <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8007d78:	6901      	ldr	r1, [r0, #16]
 8007d7a:	4291      	cmp	r1, r2
 8007d7c:	dc00      	bgt.n	8007d80 <PI_Controller+0x34>
 8007d7e:	4611      	mov	r1, r2
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8007d80:	8b86      	ldrh	r6, [r0, #28]
 8007d82:	8bc2      	ldrh	r2, [r0, #30]
 8007d84:	4133      	asrs	r3, r6
 8007d86:	fa41 f202 	asr.w	r2, r1, r2
 8007d8a:	4413      	add	r3, r2
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8007d8c:	429c      	cmp	r4, r3
 8007d8e:	da05      	bge.n	8007d9c <PI_Controller+0x50>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8007d90:	1ae3      	subs	r3, r4, r3
 8007d92:	4419      	add	r1, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8007d94:	6081      	str	r1, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8007d96:	4620      	mov	r0, r4
 8007d98:	bc70      	pop	{r4, r5, r6}
 8007d9a:	4770      	bx	lr
  else if ( wOutput_32 < hLowerOutputLimit )
 8007d9c:	429d      	cmp	r5, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
 8007d9e:	bfc9      	itett	gt
 8007da0:	1aeb      	subgt	r3, r5, r3
 8007da2:	b21c      	sxthle	r4, r3
    wOutput_32 = hLowerOutputLimit;
 8007da4:	462c      	movgt	r4, r5
  pHandle->wIntegralTerm += wDischarge;
 8007da6:	18c9      	addgt	r1, r1, r3
 8007da8:	6081      	str	r1, [r0, #8]
}
 8007daa:	4620      	mov	r0, r4
 8007dac:	bc70      	pop	{r4, r5, r6}
 8007dae:	4770      	bx	lr
      if ( pHandle->wIntegralTerm > 0 )
 8007db0:	2e00      	cmp	r6, #0
 8007db2:	ddde      	ble.n	8007d72 <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 8007db4:	2900      	cmp	r1, #0
 8007db6:	dddc      	ble.n	8007d72 <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8007db8:	68c1      	ldr	r1, [r0, #12]
 8007dba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007dbe:	4291      	cmp	r1, r2
 8007dc0:	d1de      	bne.n	8007d80 <PI_Controller+0x34>
          wIntegral_sum_temp = INT32_MAX;
 8007dc2:	460a      	mov	r2, r1
 8007dc4:	e7db      	b.n	8007d7e <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 8007dc6:	4e03      	ldr	r6, [pc, #12]	; (8007dd4 <PI_Controller+0x88>)
 8007dc8:	ea32 0221 	bics.w	r2, r2, r1, asr #32
 8007dcc:	bf28      	it	cs
 8007dce:	4632      	movcs	r2, r6
 8007dd0:	e7cf      	b.n	8007d72 <PI_Controller+0x26>
 8007dd2:	bf00      	nop
 8007dd4:	80000001 	.word	0x80000001

08007dd8 <PQD_CalcElMotorPower>:
  *         motor power.
  * @param power handle.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{
 8007dd8:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8007dda:	e9d0 4242 	ldrd	r4, r2, [r0, #264]	; 0x108
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8007dde:	8b11      	ldrh	r1, [r2, #24]
 8007de0:	89d3      	ldrh	r3, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8007de2:	8995      	ldrh	r5, [r2, #12]
 8007de4:	8ad2      	ldrh	r2, [r2, #22]
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8007de6:	fb13 f301 	smulbb	r3, r3, r1
{
 8007dea:	4606      	mov	r6, r0
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8007dec:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8007df0:	fb15 3502 	smlabb	r5, r5, r2, r3
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8007df4:	f7ff fc6c 	bl	80076d0 <VBS_GetAvBusVoltage_V>
 8007df8:	fb04 f200 	mul.w	r2, r4, r0
  wAux /= 65536;
 8007dfc:	1e2c      	subs	r4, r5, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8007dfe:	480e      	ldr	r0, [pc, #56]	; (8007e38 <PQD_CalcElMotorPower+0x60>)

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8007e00:	490e      	ldr	r1, [pc, #56]	; (8007e3c <PQD_CalcElMotorPower+0x64>)
  wAux /= 65536;
 8007e02:	bfb8      	it	lt
 8007e04:	f504 447f 	addlt.w	r4, r4, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8007e08:	fb80 3002 	smull	r3, r0, r0, r2
  wAux /= 65536;
 8007e0c:	bfb8      	it	lt
 8007e0e:	34ff      	addlt	r4, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8007e10:	17d3      	asrs	r3, r2, #31
  wAux /= 65536;
 8007e12:	1424      	asrs	r4, r4, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8007e14:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
  wAux3 = wAux * wAux2;
 8007e18:	fb03 f304 	mul.w	r3, r3, r4
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8007e1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007e20:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8007e22:	fb81 2103 	smull	r2, r1, r1, r3
 8007e26:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8007e28:	4630      	mov	r0, r6
 8007e2a:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8007e2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8007e32:	f7ff beef 	b.w	8007c14 <MPM_CalcElMotorPower>
 8007e36:	bf00      	nop
 8007e38:	1b4e81b5 	.word	0x1b4e81b5
 8007e3c:	66666667 	.word	0x66666667

08007e40 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8007e40:	4b17      	ldr	r3, [pc, #92]	; (8007ea0 <startTimers+0x60>)
 8007e42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 8007e44:	07d2      	lsls	r2, r2, #31
 8007e46:	d415      	bmi.n	8007e74 <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 8007e48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e4a:	f042 0201 	orr.w	r2, r2, #1
 8007e4e:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8007e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8007e52:	b082      	sub	sp, #8
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007e54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007e58:	f002 0201 	and.w	r2, r2, #1
 8007e5c:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8007e5e:	9a01      	ldr	r2, [sp, #4]
 8007e60:	694a      	ldr	r2, [r1, #20]
 8007e62:	f042 0201 	orr.w	r2, r2, #1
 8007e66:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8007e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e6a:	f022 0201 	bic.w	r2, r2, #1
 8007e6e:	641a      	str	r2, [r3, #64]	; 0x40
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8007e70:	b002      	add	sp, #8
 8007e72:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8007e74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e78:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007e7a:	6859      	ldr	r1, [r3, #4]
 8007e7c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8007e80:	f041 0120 	orr.w	r1, r1, #32
 8007e84:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007e86:	6959      	ldr	r1, [r3, #20]
 8007e88:	f041 0101 	orr.w	r1, r1, #1
 8007e8c:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007e8e:	6859      	ldr	r1, [r3, #4]
 8007e90:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007e94:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	605a      	str	r2, [r3, #4]
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	40023800 	.word	0x40023800

08007ea4 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8007ea4:	b4f0      	push	{r4, r5, r6, r7}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 8007ea6:	6804      	ldr	r4, [r0, #0]
  if (counter_mode == 0U)
 8007ea8:	f014 0460 	ands.w	r4, r4, #96	; 0x60
 8007eac:	d11a      	bne.n	8007ee4 <waitForPolarizationEnd+0x40>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8007eae:	6804      	ldr	r4, [r0, #0]
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8007eb0:	3201      	adds	r2, #1
 8007eb2:	0856      	lsrs	r6, r2, #1
 8007eb4:	0176      	lsls	r6, r6, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8007eb6:	f06f 0702 	mvn.w	r7, #2
 8007eba:	6107      	str	r7, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8007ebc:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 8007ebe:	781c      	ldrb	r4, [r3, #0]
 8007ec0:	2c0f      	cmp	r4, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8007ec2:	f102 0501 	add.w	r5, r2, #1
  while (*cnt < NB_CONVERSIONS)
 8007ec6:	d80b      	bhi.n	8007ee0 <waitForPolarizationEnd+0x3c>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8007ec8:	6904      	ldr	r4, [r0, #16]
 8007eca:	07a4      	lsls	r4, r4, #30
 8007ecc:	d5f7      	bpl.n	8007ebe <waitForPolarizationEnd+0x1a>
      hCalibrationPeriodCounter++;
 8007ece:	b2aa      	uxth	r2, r5
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8007ed0:	4296      	cmp	r6, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8007ed2:	6107      	str	r7, [r0, #16]
 8007ed4:	d8f3      	bhi.n	8007ebe <waitForPolarizationEnd+0x1a>
      {
        if (*cnt < NB_CONVERSIONS)
 8007ed6:	781c      	ldrb	r4, [r3, #0]
 8007ed8:	2c0f      	cmp	r4, #15
 8007eda:	d8f0      	bhi.n	8007ebe <waitForPolarizationEnd+0x1a>
        {
          *SWerror = 1u;
 8007edc:	2301      	movs	r3, #1
 8007ede:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8007ee0:	bcf0      	pop	{r4, r5, r6, r7}
 8007ee2:	4770      	bx	lr
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8007ee4:	2c60      	cmp	r4, #96	; 0x60
 8007ee6:	d1e3      	bne.n	8007eb0 <waitForPolarizationEnd+0xc>
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8007ee8:	3201      	adds	r2, #1
 8007eea:	0156      	lsls	r6, r2, #5
 8007eec:	e7e3      	b.n	8007eb6 <waitForPolarizationEnd+0x12>
 8007eee:	bf00      	nop

08007ef0 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8007ef0:	6843      	ldr	r3, [r0, #4]
 8007ef2:	4718      	bx	r3

08007ef4 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8007ef4:	b470      	push	{r4, r5, r6}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8007ef6:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8007efa:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
 8007efc:	b083      	sub	sp, #12
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8007efe:	140c      	asrs	r4, r1, #16
{
 8007f00:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8007f02:	fb06 f404 	mul.w	r4, r6, r4
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8007f06:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8007f08:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8007f0c:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8007f10:	eb01 0344 	add.w	r3, r1, r4, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8007f14:	ebc1 0144 	rsb	r1, r1, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8007f18:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8007f1c:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8007f20:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8007f24:	ea4f 0444 	mov.w	r4, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8007f28:	ea4f 0565 	mov.w	r5, r5, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8007f2c:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 8007f30:	db77      	blt.n	8008022 <PWMC_SetPhaseVoltage+0x12e>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8007f32:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007f36:	db4e      	blt.n	8007fd6 <PWMC_SetPhaseVoltage+0xe2>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8007f38:	1aad      	subs	r5, r5, r2
 8007f3a:	bf44      	itt	mi
 8007f3c:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8007f40:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8007f44:	2900      	cmp	r1, #0
 8007f46:	bfbc      	itt	lt
 8007f48:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8007f4c:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	bfb8      	it	lt
 8007f54:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8007f58:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8007f5c:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8007f60:	bfb8      	it	lt
 8007f62:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 8007f66:	2401      	movs	r4, #1
      wTimePhB = wTimePhA + wZ / 131072;
 8007f68:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8007f6c:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 8007f70:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
      pHandle->highDuty = wTimePhC;
 8007f74:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
      pHandle->lowDuty = wTimePhB;
 8007f78:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8007f7a:	87c2      	strh	r2, [r0, #62]	; 0x3e

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8007f7c:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 8007f80:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8007f84:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8007f88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007f8c:	b292      	uxth	r2, r2
 8007f8e:	b289      	uxth	r1, r1
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8007f94:	8642      	strh	r2, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8007f96:	8681      	strh	r1, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8007f98:	86c3      	strh	r3, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 8007f9a:	d118      	bne.n	8007fce <PWMC_SetPhaseVoltage+0xda>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8007f9c:	f9b0 4048 	ldrsh.w	r4, [r0, #72]	; 0x48
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ib > 0 )
 8007fa0:	f9b0 504a 	ldrsh.w	r5, [r0, #74]	; 0x4a
    if ( pHandle->Ia > 0 )
 8007fa4:	2c00      	cmp	r4, #0
      pHandle->CntPhA += pHandle->DTCompCnt;
 8007fa6:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 8007faa:	bfcc      	ite	gt
 8007fac:	1912      	addgt	r2, r2, r4
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8007fae:	1b12      	suble	r2, r2, r4
 8007fb0:	b292      	uxth	r2, r2
 8007fb2:	8642      	strh	r2, [r0, #50]	; 0x32
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8007fb4:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
    if ( pHandle->Ib > 0 )
 8007fb8:	2d00      	cmp	r5, #0
      pHandle->CntPhB += pHandle->DTCompCnt;
 8007fba:	bfcc      	ite	gt
 8007fbc:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8007fbe:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 8007fc0:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8007fc2:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8007fc4:	bfcc      	ite	gt
 8007fc6:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8007fc8:	1b1b      	suble	r3, r3, r4
 8007fca:	8681      	strh	r1, [r0, #52]	; 0x34
 8007fcc:	86c3      	strh	r3, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8007fce:	6983      	ldr	r3, [r0, #24]
}
 8007fd0:	b003      	add	sp, #12
 8007fd2:	bc70      	pop	{r4, r5, r6}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8007fd4:	4718      	bx	r3
      if ( wX <= 0 )
 8007fd6:	2c00      	cmp	r4, #0
 8007fd8:	dd47      	ble.n	800806a <PWMC_SetPhaseVoltage+0x176>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8007fda:	1aa5      	subs	r5, r4, r2
 8007fdc:	bf44      	itt	mi
 8007fde:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8007fe2:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8007fe6:	2900      	cmp	r1, #0
 8007fe8:	bfb8      	it	lt
 8007fea:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 8007fee:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 8007ff2:	bfb8      	it	lt
 8007ff4:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 8007ff8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8007ffc:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 8007ffe:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8008000:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8008004:	bfb8      	it	lt
 8008006:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 800800a:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 800800e:	bfb8      	it	lt
 8008010:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8008014:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->highDuty = wTimePhC;
 8008018:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 800801c:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 800801e:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 8008020:	e7ac      	b.n	8007f7c <PWMC_SetPhaseVoltage+0x88>
    if ( wZ < 0 )
 8008022:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008026:	db69      	blt.n	80080fc <PWMC_SetPhaseVoltage+0x208>
      if ( wX <= 0 )
 8008028:	2c00      	cmp	r4, #0
 800802a:	dd43      	ble.n	80080b4 <PWMC_SetPhaseVoltage+0x1c0>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800802c:	1b2d      	subs	r5, r5, r4
 800802e:	bf48      	it	mi
 8008030:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8008034:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8008038:	bf48      	it	mi
 800803a:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 800803e:	2b00      	cmp	r3, #0
 8008040:	bfb8      	it	lt
 8008042:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8008046:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800804a:	ea4f 0296 	mov.w	r2, r6, lsr #2
 800804e:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8008052:	bfb8      	it	lt
 8008054:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8008058:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 800805c:	eb03 4164 	add.w	r1, r3, r4, asr #17
        pHandle->lowDuty = wTimePhB;
 8008060:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8008062:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8008064:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8008068:	e788      	b.n	8007f7c <PWMC_SetPhaseVoltage+0x88>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800806a:	1b2d      	subs	r5, r5, r4
 800806c:	bf44      	itt	mi
 800806e:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8008072:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8008076:	2b00      	cmp	r3, #0
 8008078:	bfb8      	it	lt
 800807a:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 800807e:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 8008082:	bfb8      	it	lt
 8008084:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 8008088:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 800808c:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800808e:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8008092:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8008096:	bfb8      	it	lt
 8008098:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 800809c:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 80080a0:	bfb8      	it	lt
 80080a2:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 80080a6:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->highDuty = wTimePhB;
 80080aa:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 80080ae:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 80080b0:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 80080b2:	e763      	b.n	8007f7c <PWMC_SetPhaseVoltage+0x88>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80080b4:	1aa5      	subs	r5, r4, r2
 80080b6:	bf44      	itt	mi
 80080b8:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 80080bc:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 80080c0:	2900      	cmp	r1, #0
 80080c2:	bfb8      	it	lt
 80080c4:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 80080c8:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 80080cc:	bfb8      	it	lt
 80080ce:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 80080d2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80080d6:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 80080d8:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80080da:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80080de:	bfb8      	it	lt
 80080e0:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 80080e4:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80080e8:	bfb8      	it	lt
 80080ea:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 80080ee:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 80080f2:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 80080f4:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 80080f6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80080fa:	e73f      	b.n	8007f7c <PWMC_SetPhaseVoltage+0x88>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 80080fc:	1aad      	subs	r5, r5, r2
 80080fe:	bf44      	itt	mi
 8008100:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8008104:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8008108:	2900      	cmp	r1, #0
 800810a:	bfbc      	itt	lt
 800810c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8008110:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8008114:	2b00      	cmp	r3, #0
 8008116:	bfb8      	it	lt
 8008118:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800811c:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8008120:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8008124:	bfb8      	it	lt
 8008126:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 800812a:	2404      	movs	r4, #4
      wTimePhB = wTimePhA + wZ / 131072;
 800812c:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8008130:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 8008134:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 8008138:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 800813a:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 800813c:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8008140:	e71c      	b.n	8007f7c <PWMC_SetPhaseVoltage+0x88>
 8008142:	bf00      	nop

08008144 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8008144:	6883      	ldr	r3, [r0, #8]
 8008146:	4718      	bx	r3

08008148 <PWMC_SwitchOnPWM>:
  * @brief  Switches PWM generation on
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOnPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOnPwm( pHandle );
 8008148:	68c3      	ldr	r3, [r0, #12]
 800814a:	4718      	bx	r3

0800814c <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 800814c:	b510      	push	{r4, lr}
 800814e:	4604      	mov	r4, r0
 8008150:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 8008152:	b199      	cbz	r1, 800817c <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8008154:	2901      	cmp	r1, #1
 8008156:	d002      	beq.n	800815e <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8008158:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 800815a:	b002      	add	sp, #8
 800815c:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 800815e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8008162:	b1cb      	cbz	r3, 8008198 <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 8008164:	3b01      	subs	r3, #1
 8008166:	b29b      	uxth	r3, r3
 8008168:	9101      	str	r1, [sp, #4]
 800816a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1f2      	bne.n	8008158 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 8008172:	6903      	ldr	r3, [r0, #16]
 8008174:	4798      	blx	r3
        retVal = true;
 8008176:	9901      	ldr	r1, [sp, #4]
 8008178:	4608      	mov	r0, r1
 800817a:	e7ee      	b.n	800815a <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 800817c:	f7ff ffe2 	bl	8008144 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8008180:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8008184:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1e5      	bne.n	8008158 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 800818c:	4620      	mov	r0, r4
 800818e:	6923      	ldr	r3, [r4, #16]
 8008190:	4798      	blx	r3
      retVal = true;
 8008192:	2001      	movs	r0, #1
}
 8008194:	b002      	add	sp, #8
 8008196:	bd10      	pop	{r4, pc}
      retVal = true;
 8008198:	4608      	mov	r0, r1
}
 800819a:	b002      	add	sp, #8
 800819c:	bd10      	pop	{r4, pc}
 800819e:	bf00      	nop

080081a0 <PWMC_TurnOnLowSides>:
  *
  * @param  pHandle: handle on the target instance of the PWMC component
  */
__weak void PWMC_TurnOnLowSides( PWMC_Handle_t * pHandle )
{
  pHandle->pFctTurnOnLowSides( pHandle );
 80081a0:	6943      	ldr	r3, [r0, #20]
 80081a2:	4718      	bx	r3

080081a4 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 80081a4:	69c3      	ldr	r3, [r0, #28]
 80081a6:	4718      	bx	r3

080081a8 <RVBS_Clear>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
 80081a8:	b430      	push	{r4, r5}
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 80081aa:	8b82      	ldrh	r2, [r0, #28]
 80081ac:	8b44      	ldrh	r4, [r0, #26]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80081ae:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 80081b0:	4414      	add	r4, r2
 80081b2:	0864      	lsrs	r4, r4, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80081b4:	b14b      	cbz	r3, 80081ca <RVBS_Clear+0x22>
  {
    pHandle->aBuffer[index] = aux;
 80081b6:	6a05      	ldr	r5, [r0, #32]
 80081b8:	2300      	movs	r3, #0
 80081ba:	b29a      	uxth	r2, r3
 80081bc:	3301      	adds	r3, #1
 80081be:	f825 4012 	strh.w	r4, [r5, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80081c2:	8b01      	ldrh	r1, [r0, #24]
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	4291      	cmp	r1, r2
 80081c8:	d8f7      	bhi.n	80081ba <RVBS_Clear+0x12>
  }
  pHandle->_Super.LatestConv = aux;
 80081ca:	2300      	movs	r3, #0
 80081cc:	f364 030f 	bfi	r3, r4, #0, #16
 80081d0:	f364 431f 	bfi	r3, r4, #16, #16
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 80081d4:	2200      	movs	r2, #0
}
 80081d6:	bc30      	pop	{r4, r5}
  pHandle->_Super.LatestConv = aux;
 80081d8:	6043      	str	r3, [r0, #4]
  pHandle->index = 0;
 80081da:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 80081de:	4770      	bx	lr

080081e0 <RVBS_Init>:
{
 80081e0:	b510      	push	{r4, lr}
 80081e2:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 80081e4:	300c      	adds	r0, #12
 80081e6:	f7fc f9ef 	bl	80045c8 <RCM_RegisterRegConv>
 80081ea:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 80081ee:	4620      	mov	r0, r4
 80081f0:	f7ff ffda 	bl	80081a8 <RVBS_Clear>
}
 80081f4:	bd10      	pop	{r4, pc}
 80081f6:	bf00      	nop

080081f8 <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 80081f8:	88c3      	ldrh	r3, [r0, #6]
 80081fa:	8b42      	ldrh	r2, [r0, #26]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d305      	bcc.n	800820c <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8008200:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 8008202:	4298      	cmp	r0, r3
 8008204:	bf8c      	ite	hi
 8008206:	2004      	movhi	r0, #4
 8008208:	2000      	movls	r0, #0
 800820a:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 800820c:	2002      	movs	r0, #2
  }
  return fault;
}
 800820e:	4770      	bx	lr

08008210 <RVBS_CalcAvVbus>:
{
 8008210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008212:	4605      	mov	r5, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8008214:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8008218:	f7fc fb12 	bl	8004840 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 800821c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008220:	4298      	cmp	r0, r3
 8008222:	d01c      	beq.n	800825e <RVBS_CalcAvVbus+0x4e>
    pHandle->aBuffer[pHandle->index] = hAux;
 8008224:	6a2f      	ldr	r7, [r5, #32]
 8008226:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 800822a:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800822e:	8b2e      	ldrh	r6, [r5, #24]
 8008230:	b1d6      	cbz	r6, 8008268 <RVBS_CalcAvVbus+0x58>
 8008232:	2300      	movs	r3, #0
    wtemp = 0;
 8008234:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 8008236:	f837 4013 	ldrh.w	r4, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800823a:	3301      	adds	r3, #1
 800823c:	b2d9      	uxtb	r1, r3
 800823e:	42b1      	cmp	r1, r6
      wtemp += pHandle->aBuffer[i];
 8008240:	4422      	add	r2, r4
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8008242:	460b      	mov	r3, r1
 8008244:	d3f7      	bcc.n	8008236 <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 8008246:	fbb2 f2f6 	udiv	r2, r2, r6
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800824a:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 800824e:	80ea      	strh	r2, [r5, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8008250:	3e01      	subs	r6, #1
 8008252:	42b3      	cmp	r3, r6
    pHandle->_Super.LatestConv = hAux;
 8008254:	80a8      	strh	r0, [r5, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8008256:	da09      	bge.n	800826c <RVBS_CalcAvVbus+0x5c>
      pHandle->index++;
 8008258:	3301      	adds	r3, #1
 800825a:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800825e:	4628      	mov	r0, r5
 8008260:	f7ff ffca 	bl	80081f8 <RVBS_CheckFaultState>
 8008264:	8128      	strh	r0, [r5, #8]
}
 8008266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8008268:	80ee      	strh	r6, [r5, #6]
    pHandle->_Super.LatestConv = hAux;
 800826a:	80a8      	strh	r0, [r5, #4]
      pHandle->index = 0;
 800826c:	2300      	movs	r3, #0
 800826e:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8008272:	4628      	mov	r0, r5
 8008274:	f7ff ffc0 	bl	80081f8 <RVBS_CheckFaultState>
 8008278:	8128      	strh	r0, [r5, #8]
}
 800827a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800827c <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 800827c:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 800827e:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 8008280:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8008284:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 8008288:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 800828a:	4770      	bx	lr

0800828c <REMNG_Calc>:
__weak int32_t REMNG_Calc( RampExtMngr_Handle_t * pHandle )
{
  int32_t ret_val;
  int32_t current_ref;

  current_ref = pHandle->Ext;
 800828c:	e9d0 3102 	ldrd	r3, r1, [r0, #8]

  /* Update the variable and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8008290:	2901      	cmp	r1, #1
 8008292:	d90c      	bls.n	80082ae <REMNG_Calc+0x22>
{
 8008294:	b410      	push	{r4}
 8008296:	e9d0 4204 	ldrd	r4, r2, [r0, #16]
  {
    /* Increment/decrement the reference value. */
    current_ref += pHandle->IncDecAmount;

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep --;
 800829a:	3901      	subs	r1, #1
    current_ref += pHandle->IncDecAmount;
 800829c:	4423      	add	r3, r4
    pHandle->RampRemainingStep --;
 800829e:	60c1      	str	r1, [r0, #12]
  else
  {
    /* Do nothing. */
  }

  pHandle->Ext = current_ref;
 80082a0:	6083      	str	r3, [r0, #8]
 80082a2:	fb93 f2f2 	sdiv	r2, r3, r2
#else
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
#endif

  return ret_val;
}
 80082a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082aa:	4610      	mov	r0, r2
 80082ac:	4770      	bx	lr
  else if ( pHandle->RampRemainingStep == 1u )
 80082ae:	d005      	beq.n	80082bc <REMNG_Calc+0x30>
 80082b0:	6942      	ldr	r2, [r0, #20]
  pHandle->Ext = current_ref;
 80082b2:	6083      	str	r3, [r0, #8]
 80082b4:	fb93 f2f2 	sdiv	r2, r3, r2
}
 80082b8:	4610      	mov	r0, r2
 80082ba:	4770      	bx	lr
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 80082bc:	6842      	ldr	r2, [r0, #4]
 80082be:	6943      	ldr	r3, [r0, #20]
    pHandle->RampRemainingStep = 0u;
 80082c0:	2100      	movs	r1, #0
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 80082c2:	fb03 f302 	mul.w	r3, r3, r2
    pHandle->RampRemainingStep = 0u;
 80082c6:	60c1      	str	r1, [r0, #12]
  pHandle->Ext = current_ref;
 80082c8:	6083      	str	r3, [r0, #8]
}
 80082ca:	4610      	mov	r0, r2
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop

080082d0 <REMNG_RampCompleted>:
  * @retval bool It returns true if the ramp is completed, false otherwise.
  */
__weak bool REMNG_RampCompleted( RampExtMngr_Handle_t * pHandle )
{
  bool retVal = false;
  if ( pHandle->RampRemainingStep == 0u )
 80082d0:	68c0      	ldr	r0, [r0, #12]
  {
    retVal = true;
  }
  return retVal;
}
 80082d2:	fab0 f080 	clz	r0, r0
 80082d6:	0940      	lsrs	r0, r0, #5
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop

080082dc <getScalingFactor>:
  uint32_t TargetAbs;
  int32_t aux;

  if ( Target < 0 )
  {
    aux = -Target;
 80082dc:	2800      	cmp	r0, #0
 80082de:	bfb8      	it	lt
 80082e0:	4240      	neglt	r0, r0
{
 80082e2:	2301      	movs	r3, #1
  {
    TargetAbs = ( uint32_t )( Target );
  }
  for ( i = 1u; i < 32u; i++ )
  {
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 80082e4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80082e8:	e002      	b.n	80082f0 <getScalingFactor+0x14>
 80082ea:	3301      	adds	r3, #1
  for ( i = 1u; i < 32u; i++ )
 80082ec:	2b20      	cmp	r3, #32
 80082ee:	d007      	beq.n	8008300 <getScalingFactor+0x24>
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 80082f0:	fa21 f203 	lsr.w	r2, r1, r3
    if ( TargetAbs >= limit )
 80082f4:	4290      	cmp	r0, r2
 80082f6:	d3f8      	bcc.n	80082ea <getScalingFactor+0xe>
 80082f8:	3b01      	subs	r3, #1
 80082fa:	2001      	movs	r0, #1
 80082fc:	4098      	lsls	r0, r3
    {
      break;
    }
  }
  return ( ( uint32_t )( 1u ) << ( i - 1u ) );
}
 80082fe:	4770      	bx	lr
 8008300:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop

08008308 <REMNG_ExecRamp>:
{
 8008308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800830c:	4604      	mov	r4, r0
 800830e:	460d      	mov	r5, r1
  if ( Durationms == 0u )
 8008310:	4690      	mov	r8, r2
 8008312:	b95a      	cbnz	r2, 800832c <REMNG_ExecRamp+0x24>
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 8008314:	4608      	mov	r0, r1
 8008316:	f7ff ffe1 	bl	80082dc <getScalingFactor>
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 800831a:	fb05 f500 	mul.w	r5, r5, r0
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 800831e:	6160      	str	r0, [r4, #20]
    pHandle->IncDecAmount = 0;
 8008320:	e9c4 8803 	strd	r8, r8, [r4, #12]
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8008324:	60a5      	str	r5, [r4, #8]
}
 8008326:	2001      	movs	r0, #1
 8008328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 800832c:	6943      	ldr	r3, [r0, #20]
 800832e:	6887      	ldr	r7, [r0, #8]
 8008330:	fb97 f7f3 	sdiv	r7, r7, r3
    uint32_t wScalingFactor = getScalingFactor( TargetFinal - current_ref );
 8008334:	1bce      	subs	r6, r1, r7
 8008336:	4630      	mov	r0, r6
 8008338:	f7ff ffd0 	bl	80082dc <getScalingFactor>
 800833c:	4682      	mov	sl, r0
    uint32_t wScalingFactor2 = getScalingFactor( current_ref );
 800833e:	4638      	mov	r0, r7
 8008340:	f7ff ffcc 	bl	80082dc <getScalingFactor>
 8008344:	4681      	mov	r9, r0
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 8008346:	4628      	mov	r0, r5
 8008348:	f7ff ffc8 	bl	80082dc <getScalingFactor>
    if ( wScalingFactor <  wScalingFactor2 )
 800834c:	45ca      	cmp	sl, r9
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 800834e:	4603      	mov	r3, r0
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8008350:	6821      	ldr	r1, [r4, #0]
    pHandle->TargetFinal = TargetFinal;
 8008352:	6065      	str	r5, [r4, #4]
 8008354:	bf2c      	ite	cs
 8008356:	4648      	movcs	r0, r9
 8008358:	4650      	movcc	r0, sl
      if ( wScalingFactor2 < wScalingFactor3 )
 800835a:	4298      	cmp	r0, r3
 800835c:	bf28      	it	cs
 800835e:	4618      	movcs	r0, r3
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8008360:	fb01 f308 	mul.w	r3, r1, r8
    aux /= 1000u;
 8008364:	4908      	ldr	r1, [pc, #32]	; (8008388 <REMNG_ExecRamp+0x80>)
    pHandle->ScalingFactor = wScalingFactorMin;
 8008366:	6160      	str	r0, [r4, #20]
    aux /= 1000u;
 8008368:	fba1 2303 	umull	r2, r3, r1, r3
 800836c:	099b      	lsrs	r3, r3, #6
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 800836e:	fb07 f700 	mul.w	r7, r7, r0
    pHandle->RampRemainingStep++;
 8008372:	3301      	adds	r3, #1
    aux1 = ( TargetFinal - current_ref ) * ( int32_t )( pHandle->ScalingFactor );
 8008374:	fb00 f006 	mul.w	r0, r0, r6
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 8008378:	60a7      	str	r7, [r4, #8]
    aux1 /= ( int32_t )( pHandle->RampRemainingStep );
 800837a:	fb90 f0f3 	sdiv	r0, r0, r3
    pHandle->IncDecAmount = aux1;
 800837e:	e9c4 3003 	strd	r3, r0, [r4, #12]
}
 8008382:	2001      	movs	r0, #1
 8008384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008388:	10624dd3 	.word	0x10624dd3

0800838c <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 800838c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop

08008394 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8008394:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop

0800839c <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 800839c:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop

080083a4 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 80083a4:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 80083a8:	8a81      	ldrh	r1, [r0, #20]
{
 80083aa:	b430      	push	{r4, r5}
  if ( *pMecSpeedUnit < 0 )
 80083ac:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 80083ae:	bfb8      	it	lt
 80083b0:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 80083b2:	8ac5      	ldrh	r5, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 80083b4:	78c4      	ldrb	r4, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 80083b6:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 80083b8:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 80083ba:	429d      	cmp	r5, r3
 80083bc:	d817      	bhi.n	80083ee <SPD_IsMecSpeedReliable+0x4a>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 80083be:	4299      	cmp	r1, r3
 80083c0:	bf2c      	ite	cs
 80083c2:	2300      	movcs	r3, #0
 80083c4:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 80083c6:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 80083ca:	8b05      	ldrh	r5, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 80083cc:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 80083ce:	bfb8      	it	lt
 80083d0:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 80083d2:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 80083d4:	428d      	cmp	r5, r1
 80083d6:	d300      	bcc.n	80083da <SPD_IsMecSpeedReliable+0x36>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 80083d8:	b15b      	cbz	r3, 80083f2 <SPD_IsMecSpeedReliable+0x4e>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 80083da:	4294      	cmp	r4, r2
 80083dc:	d901      	bls.n	80083e2 <SPD_IsMecSpeedReliable+0x3e>
    {
      bSpeedErrorNumber++;
 80083de:	3201      	adds	r2, #1
 80083e0:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80083e2:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 80083e4:	1b10      	subs	r0, r2, r4
 80083e6:	bf18      	it	ne
 80083e8:	2001      	movne	r0, #1
 80083ea:	bc30      	pop	{r4, r5}
 80083ec:	4770      	bx	lr
    SpeedError = true;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e7e9      	b.n	80083c6 <SPD_IsMecSpeedReliable+0x22>
      bSpeedErrorNumber = 0u;
 80083f2:	4294      	cmp	r4, r2
 80083f4:	bf88      	it	hi
 80083f6:	2200      	movhi	r2, #0
 80083f8:	e7f3      	b.n	80083e2 <SPD_IsMecSpeedReliable+0x3e>
 80083fa:	bf00      	nop

080083fc <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 80083fc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8008400:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 8008404:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8008408:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 800840c:	b200      	sxth	r0, r0
 800840e:	4770      	bx	lr

08008410 <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 8008410:	b430      	push	{r4, r5}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8008412:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8008416:	f9b0 402c 	ldrsh.w	r4, [r0, #44]	; 0x2c
  pHandle->Mode = pHandle->ModeDefault;
 800841a:	f890 502a 	ldrb.w	r5, [r0, #42]	; 0x2a
  pHandle->PISpeed = pPI;
 800841e:	6101      	str	r1, [r0, #16]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8008420:	0424      	lsls	r4, r4, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8008422:	0419      	lsls	r1, r3, #16
  pHandle->TargetFinal = 0;
 8008424:	2300      	movs	r3, #0
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8008426:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->Mode = pHandle->ModeDefault;
 800842a:	7005      	strb	r5, [r0, #0]
  pHandle->SPD = SPD_Handle;
 800842c:	6142      	str	r2, [r0, #20]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 800842e:	bc30      	pop	{r4, r5}
  pHandle->TargetFinal = 0;
 8008430:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 8008432:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8008434:	6183      	str	r3, [r0, #24]
}
 8008436:	4770      	bx	lr

08008438 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 8008438:	6141      	str	r1, [r0, #20]
}
 800843a:	4770      	bx	lr

0800843c <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 800843c:	6940      	ldr	r0, [r0, #20]
 800843e:	4770      	bx	lr

08008440 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 8008440:	7803      	ldrb	r3, [r0, #0]
 8008442:	2b01      	cmp	r3, #1
 8008444:	d000      	beq.n	8008448 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8008446:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8008448:	6900      	ldr	r0, [r0, #16]
 800844a:	2100      	movs	r1, #0
 800844c:	f7ff bc72 	b.w	8007d34 <PID_SetIntegralTerm>

08008450 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 8008450:	6840      	ldr	r0, [r0, #4]
 8008452:	2800      	cmp	r0, #0
 8008454:	bfbc      	itt	lt
 8008456:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800845a:	30ff      	addlt	r0, #255	; 0xff
}
 800845c:	1400      	asrs	r0, r0, #16
 800845e:	4770      	bx	lr

08008460 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8008460:	6880      	ldr	r0, [r0, #8]
 8008462:	2800      	cmp	r0, #0
 8008464:	bfbc      	itt	lt
 8008466:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800846a:	30ff      	addlt	r0, #255	; 0xff
}
 800846c:	1400      	asrs	r0, r0, #16
 800846e:	4770      	bx	lr

08008470 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8008470:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 8008472:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8008474:	60c3      	str	r3, [r0, #12]
}
 8008476:	4770      	bx	lr

08008478 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8008478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800847a:	7806      	ldrb	r6, [r0, #0]
{
 800847c:	4604      	mov	r4, r0
 800847e:	460d      	mov	r5, r1
 8008480:	4617      	mov	r7, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8008482:	b326      	cbz	r6, 80084ce <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8008484:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8008486:	8be1      	ldrh	r1, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8008488:	2800      	cmp	r0, #0
 800848a:	bfbc      	itt	lt
 800848c:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8008490:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8008492:	428d      	cmp	r5, r1
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8008494:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8008498:	dd01      	ble.n	800849e <STC_ExecRamp+0x26>
      AllowedRange = false;
 800849a:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 800849c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 800849e:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
 80084a2:	42a9      	cmp	r1, r5
 80084a4:	dcf9      	bgt.n	800849a <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 80084a6:	8c23      	ldrh	r3, [r4, #32]
 80084a8:	429d      	cmp	r5, r3
 80084aa:	da03      	bge.n	80084b4 <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 80084ac:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 80084b0:	42ab      	cmp	r3, r5
 80084b2:	dbf2      	blt.n	800849a <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 80084b4:	b9af      	cbnz	r7, 80084e2 <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 80084b6:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 80084b8:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 80084ba:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 80084bc:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 80084c0:	bf0c      	ite	eq
 80084c2:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 80084c4:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 80084c6:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 80084c8:	61a3      	str	r3, [r4, #24]
 80084ca:	2001      	movs	r0, #1
}
 80084cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 80084ce:	f7ff ffc7 	bl	8008460 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 80084d2:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
 80084d4:	42b5      	cmp	r5, r6
 80084d6:	dce0      	bgt.n	800849a <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 80084d8:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 80084dc:	42ab      	cmp	r3, r5
 80084de:	dcdc      	bgt.n	800849a <STC_ExecRamp+0x22>
 80084e0:	e7e8      	b.n	80084b4 <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 80084e2:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 80084e4:	4a07      	ldr	r2, [pc, #28]	; (8008504 <STC_ExecRamp+0x8c>)
      pHandle->TargetFinal = hTargetFinal;
 80084e6:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 80084e8:	fb07 f303 	mul.w	r3, r7, r3
      wAux /= 1000u;
 80084ec:	fba2 2303 	umull	r2, r3, r2, r3
 80084f0:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 80084f2:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 80084f4:	1a2d      	subs	r5, r5, r0
 80084f6:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep++;
 80084f8:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 80084fa:	fb95 f5f3 	sdiv	r5, r5, r3
      pHandle->IncDecAmount = wAux1;
 80084fe:	2001      	movs	r0, #1
 8008500:	61a5      	str	r5, [r4, #24]
}
 8008502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008504:	10624dd3 	.word	0x10624dd3

08008508 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8008508:	2300      	movs	r3, #0
 800850a:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 800850c:	6183      	str	r3, [r0, #24]
}
 800850e:	4770      	bx	lr

08008510 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 8008510:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 8008512:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8008516:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8008518:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 800851a:	2a00      	cmp	r2, #0
 800851c:	bf08      	it	eq
 800851e:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 8008520:	2b01      	cmp	r3, #1
{
 8008522:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 8008524:	d90c      	bls.n	8008540 <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8008526:	6981      	ldr	r1, [r0, #24]
 8008528:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 800852a:	3b01      	subs	r3, #1
 800852c:	2e00      	cmp	r6, #0
 800852e:	60c3      	str	r3, [r0, #12]
 8008530:	4630      	mov	r0, r6
 8008532:	db09      	blt.n	8008548 <STC_CalcTorqueReference+0x38>
 8008534:	1405      	asrs	r5, r0, #16
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 8008536:	2a01      	cmp	r2, #1
 8008538:	d00a      	beq.n	8008550 <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 800853a:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 800853c:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 800853e:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 8008540:	d012      	beq.n	8008568 <STC_CalcTorqueReference+0x58>
 8008542:	2e00      	cmp	r6, #0
 8008544:	4630      	mov	r0, r6
 8008546:	daf5      	bge.n	8008534 <STC_CalcTorqueReference+0x24>
 8008548:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 800854c:	30ff      	adds	r0, #255	; 0xff
 800854e:	e7f1      	b.n	8008534 <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8008550:	6960      	ldr	r0, [r4, #20]
 8008552:	f7ff ff1f 	bl	8008394 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8008556:	1a28      	subs	r0, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8008558:	b201      	sxth	r1, r0
 800855a:	6920      	ldr	r0, [r4, #16]
 800855c:	f7ff fbf6 	bl	8007d4c <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8008560:	0403      	lsls	r3, r0, #16
 8008562:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 8008566:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8008568:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 800856c:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800856e:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 8008570:	60c3      	str	r3, [r0, #12]
 8008572:	e7e0      	b.n	8008536 <STC_CalcTorqueReference+0x26>

08008574 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8008574:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop

0800857c <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 800857c:	8bc0      	ldrh	r0, [r0, #30]
 800857e:	4770      	bx	lr

08008580 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 8008580:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop

08008588 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8008588:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 800858c:	2200      	movs	r2, #0
 800858e:	b299      	uxth	r1, r3
 8008590:	f361 020f 	bfi	r2, r1, #0, #16
 8008594:	0c1b      	lsrs	r3, r3, #16
 8008596:	f363 421f 	bfi	r2, r3, #16, #16
{
 800859a:	b082      	sub	sp, #8
}
 800859c:	4610      	mov	r0, r2
 800859e:	b002      	add	sp, #8
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop

080085a4 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 80085a4:	b510      	push	{r4, lr}
 80085a6:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 80085a8:	6940      	ldr	r0, [r0, #20]
 80085aa:	f7ff fef3 	bl	8008394 <SPD_GetAvrgMecSpeedUnit>
 80085ae:	0400      	lsls	r0, r0, #16
 80085b0:	6060      	str	r0, [r4, #4]
}
 80085b2:	bd10      	pop	{r4, pc}

080085b4 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 80085b4:	2300      	movs	r3, #0
 80085b6:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 80085b8:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 80085bc:	4770      	bx	lr
 80085be:	bf00      	nop

080085c0 <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 80085c0:	b430      	push	{r4, r5}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80085c2:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 80085c4:	8885      	ldrh	r5, [r0, #4]
  State_t LocalState =  pHandle->bState;
 80085c6:	7804      	ldrb	r4, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80085c8:	430b      	orrs	r3, r1
 80085ca:	ea23 0202 	bic.w	r2, r3, r2
 80085ce:	b292      	uxth	r2, r2
  pHandle->hFaultOccurred |= hSetErrors;
 80085d0:	4329      	orrs	r1, r5

  if ( LocalState == FAULT_NOW )
 80085d2:	2c0a      	cmp	r4, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80085d4:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 80085d6:	8081      	strh	r1, [r0, #4]
  if ( LocalState == FAULT_NOW )
 80085d8:	d008      	beq.n	80085ec <STM_FaultProcessing+0x2c>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 80085da:	b912      	cbnz	r2, 80085e2 <STM_FaultProcessing+0x22>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 80085dc:	4620      	mov	r0, r4
 80085de:	bc30      	pop	{r4, r5}
 80085e0:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 80085e2:	240a      	movs	r4, #10
 80085e4:	7004      	strb	r4, [r0, #0]
}
 80085e6:	4620      	mov	r0, r4
 80085e8:	bc30      	pop	{r4, r5}
 80085ea:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 80085ec:	2a00      	cmp	r2, #0
 80085ee:	d1f5      	bne.n	80085dc <STM_FaultProcessing+0x1c>
      pHandle->bState = FAULT_OVER;
 80085f0:	240b      	movs	r4, #11
 80085f2:	7004      	strb	r4, [r0, #0]
}
 80085f4:	4620      	mov	r0, r4
 80085f6:	bc30      	pop	{r4, r5}
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop

080085fc <STM_NextState>:
{
 80085fc:	b508      	push	{r3, lr}
 80085fe:	7803      	ldrb	r3, [r0, #0]
 8008600:	2b14      	cmp	r3, #20
 8008602:	d810      	bhi.n	8008626 <STM_NextState+0x2a>
 8008604:	e8df f003 	tbb	[pc, r3]
 8008608:	240d545e 	.word	0x240d545e
 800860c:	390d352e 	.word	0x390d352e
 8008610:	0f0f3f3c 	.word	0x0f0f3f3c
 8008614:	47650b44 	.word	0x47650b44
 8008618:	504d1b4a 	.word	0x504d1b4a
 800861c:	5b          	.byte	0x5b
 800861d:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800861e:	290e      	cmp	r1, #14
 8008620:	d013      	beq.n	800864a <STM_NextState+0x4e>
      if ( bState == ANY_STOP )
 8008622:	2907      	cmp	r1, #7
 8008624:	d011      	beq.n	800864a <STM_NextState+0x4e>
 8008626:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800862a:	2b01      	cmp	r3, #1
 800862c:	d018      	beq.n	8008660 <STM_NextState+0x64>
 800862e:	2907      	cmp	r1, #7
 8008630:	d016      	beq.n	8008660 <STM_NextState+0x64>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 8008632:	2200      	movs	r2, #0
 8008634:	2180      	movs	r1, #128	; 0x80
 8008636:	f7ff ffc3 	bl	80085c0 <STM_FaultProcessing>
 800863a:	2000      	movs	r0, #0
}
 800863c:	bd08      	pop	{r3, pc}
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 800863e:	2914      	cmp	r1, #20
 8008640:	d8f1      	bhi.n	8008626 <STM_NextState+0x2a>
 8008642:	4b26      	ldr	r3, [pc, #152]	; (80086dc <STM_NextState+0xe0>)
 8008644:	40cb      	lsrs	r3, r1
 8008646:	07db      	lsls	r3, r3, #31
 8008648:	d5ed      	bpl.n	8008626 <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 800864a:	7001      	strb	r1, [r0, #0]
 800864c:	2001      	movs	r0, #1
}
 800864e:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 8008650:	2911      	cmp	r1, #17
 8008652:	d8ee      	bhi.n	8008632 <STM_NextState+0x36>
 8008654:	4b22      	ldr	r3, [pc, #136]	; (80086e0 <STM_NextState+0xe4>)
 8008656:	40cb      	lsrs	r3, r1
 8008658:	07da      	lsls	r2, r3, #31
 800865a:	d4f6      	bmi.n	800864a <STM_NextState+0x4e>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800865c:	2903      	cmp	r1, #3
 800865e:	d1e8      	bne.n	8008632 <STM_NextState+0x36>
 8008660:	2000      	movs	r0, #0
}
 8008662:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8008664:	2913      	cmp	r1, #19
 8008666:	d0f0      	beq.n	800864a <STM_NextState+0x4e>
 8008668:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 800866c:	2b05      	cmp	r3, #5
 800866e:	d1dc      	bne.n	800862a <STM_NextState+0x2e>
 8008670:	e7eb      	b.n	800864a <STM_NextState+0x4e>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8008672:	1f8b      	subs	r3, r1, #6
 8008674:	2b01      	cmp	r3, #1
 8008676:	d8d6      	bhi.n	8008626 <STM_NextState+0x2a>
 8008678:	e7e7      	b.n	800864a <STM_NextState+0x4e>
      if ( bState == STOP )
 800867a:	2908      	cmp	r1, #8
 800867c:	d1d3      	bne.n	8008626 <STM_NextState+0x2a>
 800867e:	e7e4      	b.n	800864a <STM_NextState+0x4e>
      if ( bState == STOP_IDLE )
 8008680:	2909      	cmp	r1, #9
 8008682:	d1d0      	bne.n	8008626 <STM_NextState+0x2a>
 8008684:	e7e1      	b.n	800864a <STM_NextState+0x4e>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8008686:	2900      	cmp	r1, #0
 8008688:	d0df      	beq.n	800864a <STM_NextState+0x4e>
 800868a:	290c      	cmp	r1, #12
 800868c:	d1cb      	bne.n	8008626 <STM_NextState+0x2a>
 800868e:	e7dc      	b.n	800864a <STM_NextState+0x4e>
      if ( bState == IDLE )
 8008690:	2900      	cmp	r1, #0
 8008692:	d0da      	beq.n	800864a <STM_NextState+0x4e>
 8008694:	e7c7      	b.n	8008626 <STM_NextState+0x2a>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8008696:	2902      	cmp	r1, #2
 8008698:	d1c3      	bne.n	8008622 <STM_NextState+0x26>
 800869a:	e7d6      	b.n	800864a <STM_NextState+0x4e>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800869c:	2911      	cmp	r1, #17
 800869e:	d1c0      	bne.n	8008622 <STM_NextState+0x26>
 80086a0:	e7d3      	b.n	800864a <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 80086a2:	2904      	cmp	r1, #4
 80086a4:	d1bd      	bne.n	8008622 <STM_NextState+0x26>
 80086a6:	e7d0      	b.n	800864a <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 80086a8:	1f0b      	subs	r3, r1, #4
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d8b9      	bhi.n	8008622 <STM_NextState+0x26>
 80086ae:	e7cc      	b.n	800864a <STM_NextState+0x4e>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 80086b0:	2907      	cmp	r1, #7
 80086b2:	d0ca      	beq.n	800864a <STM_NextState+0x4e>
 80086b4:	f1a1 030d 	sub.w	r3, r1, #13
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d8b4      	bhi.n	8008626 <STM_NextState+0x2a>
 80086bc:	e7c5      	b.n	800864a <STM_NextState+0x4e>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 80086be:	2912      	cmp	r1, #18
 80086c0:	d1af      	bne.n	8008622 <STM_NextState+0x26>
 80086c2:	e7c2      	b.n	800864a <STM_NextState+0x4e>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80086c4:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d0be      	beq.n	800864a <STM_NextState+0x4e>
           || ( bState == ICLWAIT ) )
 80086cc:	290c      	cmp	r1, #12
 80086ce:	d1ae      	bne.n	800862e <STM_NextState+0x32>
 80086d0:	e7bb      	b.n	800864a <STM_NextState+0x4e>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 80086d2:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 80086d6:	2b07      	cmp	r3, #7
 80086d8:	d1a5      	bne.n	8008626 <STM_NextState+0x2a>
 80086da:	e7b6      	b.n	800864a <STM_NextState+0x4e>
 80086dc:	00140080 	.word	0x00140080
 80086e0:	00030092 	.word	0x00030092

080086e4 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 80086e4:	7800      	ldrb	r0, [r0, #0]
 80086e6:	4770      	bx	lr

080086e8 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 80086e8:	7803      	ldrb	r3, [r0, #0]
 80086ea:	2b0b      	cmp	r3, #11
 80086ec:	d001      	beq.n	80086f2 <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 80086ee:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 80086f0:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 80086f2:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80086f4:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 80086f6:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80086f8:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 80086fa:	2001      	movs	r0, #1
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop

08008700 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 8008700:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 8008702:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 8008704:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop

0800870c <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 800870c:	f7ff b818 	b.w	8007740 <FCP_Init>

08008710 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8008710:	f890 3097 	ldrb.w	r3, [r0, #151]	; 0x97
 8008714:	b163      	cbz	r3, 8008730 <UFCP_TX_IRQ_Handler+0x20>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 8008716:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 800871a:	b1a3      	cbz	r3, 8008746 <UFCP_TX_IRQ_Handler+0x36>
 800871c:	2b01      	cmp	r3, #1
 800871e:	d108      	bne.n	8008732 <UFCP_TX_IRQ_Handler+0x22>
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
        break;

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 8008720:	7d42      	ldrb	r2, [r0, #21]
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8008722:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8008726:	604a      	str	r2, [r1, #4]

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 8008728:	3301      	adds	r3, #1
 800872a:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
 800872e:	4770      	bx	lr

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 8008730:	4770      	bx	lr
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8008732:	7d42      	ldrb	r2, [r0, #21]
 8008734:	3201      	adds	r2, #1
 8008736:	4293      	cmp	r3, r2
 8008738:	dc07      	bgt.n	800874a <UFCP_TX_IRQ_Handler+0x3a>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 800873a:	18c2      	adds	r2, r0, r3
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 800873c:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
 8008740:	7d12      	ldrb	r2, [r2, #20]
 8008742:	604a      	str	r2, [r1, #4]
    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8008744:	e7f0      	b.n	8008728 <UFCP_TX_IRQ_Handler+0x18>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 8008746:	7d02      	ldrb	r2, [r0, #20]
        break;
 8008748:	e7eb      	b.n	8008722 <UFCP_TX_IRQ_Handler+0x12>
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 800874a:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 800874e:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
 8008752:	6053      	str	r3, [r2, #4]
    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8008754:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008756:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800875a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875e:	e842 3100 	strex	r1, r3, [r2]
 8008762:	2900      	cmp	r1, #0
 8008764:	d1f7      	bne.n	8008756 <UFCP_TX_IRQ_Handler+0x46>
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8008766:	f880 1097 	strb.w	r1, [r0, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800876a:	e9d0 0300 	ldrd	r0, r3, [r0]
 800876e:	4718      	bx	r3

08008770 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8008770:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8008774:	b97b      	cbnz	r3, 8008796 <UFCP_Receive+0x26>
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;

    pHandle->RxFrameLevel = 0;
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8008776:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 800877a:	2301      	movs	r3, #1
 800877c:	320c      	adds	r2, #12
 800877e:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008782:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8008786:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878a:	e842 3100 	strex	r1, r3, [r2]
 800878e:	2900      	cmp	r1, #0
 8008790:	d1f7      	bne.n	8008782 <UFCP_Receive+0x12>

    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8008792:	2002      	movs	r0, #2
 8008794:	4770      	bx	lr
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8008796:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop

0800879c <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 800879c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879e:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 80087a0:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 80087a4:	2800      	cmp	r0, #0
 80087a6:	d149      	bne.n	800883c <UFCP_Send+0xa0>
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
    uint8_t *dest = pHandle->TxFrame.Buffer;

    pHandle->TxFrame.Code = code;
    pHandle->TxFrame.Size = size;
    while ( size-- ) *dest++ = *buffer++;
 80087a8:	1e58      	subs	r0, r3, #1
    pHandle->TxFrame.Code = code;
 80087aa:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 80087ac:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 80087ae:	b2c0      	uxtb	r0, r0
    uint8_t *dest = pHandle->TxFrame.Buffer;
 80087b0:	f104 0c16 	add.w	ip, r4, #22
    while ( size-- ) *dest++ = *buffer++;
 80087b4:	b34b      	cbz	r3, 800880a <UFCP_Send+0x6e>
 80087b6:	f104 011a 	add.w	r1, r4, #26
 80087ba:	1d17      	adds	r7, r2, #4
 80087bc:	45bc      	cmp	ip, r7
 80087be:	bf38      	it	cc
 80087c0:	428a      	cmpcc	r2, r1
 80087c2:	d33d      	bcc.n	8008840 <UFCP_Send+0xa4>
 80087c4:	2807      	cmp	r0, #7
 80087c6:	d93b      	bls.n	8008840 <UFCP_Send+0xa4>
 80087c8:	0899      	lsrs	r1, r3, #2
 80087ca:	3901      	subs	r1, #1
 80087cc:	b2c9      	uxtb	r1, r1
 80087ce:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 80087d2:	4665      	mov	r5, ip
 80087d4:	4611      	mov	r1, r2
 80087d6:	f851 6b04 	ldr.w	r6, [r1], #4
 80087da:	f845 6b04 	str.w	r6, [r5], #4
 80087de:	42b9      	cmp	r1, r7
 80087e0:	d1f9      	bne.n	80087d6 <UFCP_Send+0x3a>
 80087e2:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 80087e6:	1a40      	subs	r0, r0, r1
 80087e8:	428b      	cmp	r3, r1
 80087ea:	b2c0      	uxtb	r0, r0
 80087ec:	eb02 0601 	add.w	r6, r2, r1
 80087f0:	eb0c 0501 	add.w	r5, ip, r1
 80087f4:	d009      	beq.n	800880a <UFCP_Send+0x6e>
 80087f6:	5c53      	ldrb	r3, [r2, r1]
 80087f8:	f80c 3001 	strb.w	r3, [ip, r1]
 80087fc:	b128      	cbz	r0, 800880a <UFCP_Send+0x6e>
 80087fe:	7873      	ldrb	r3, [r6, #1]
 8008800:	706b      	strb	r3, [r5, #1]
 8008802:	2801      	cmp	r0, #1
 8008804:	d001      	beq.n	800880a <UFCP_Send+0x6e>
 8008806:	78b3      	ldrb	r3, [r6, #2]
 8008808:	70ab      	strb	r3, [r5, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 800880a:	f104 0014 	add.w	r0, r4, #20
 800880e:	f7fe ffab 	bl	8007768 <FCP_CalcCRC>
 8008812:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8008816:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96

    pHandle->TxFrameLevel = 0;
 800881a:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 800881c:	2301      	movs	r3, #1
 800881e:	320c      	adds	r2, #12
    pHandle->TxFrameLevel = 0;
 8008820:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8008824:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008828:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800882c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008830:	e842 3100 	strex	r1, r3, [r2]
 8008834:	2900      	cmp	r1, #0
 8008836:	d1f7      	bne.n	8008828 <UFCP_Send+0x8c>
 8008838:	2002      	movs	r0, #2
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
  }

  return ret_val;
}
 800883a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800883c:	2001      	movs	r0, #1
}
 800883e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008840:	3001      	adds	r0, #1
 8008842:	4410      	add	r0, r2
 8008844:	f104 0315 	add.w	r3, r4, #21
    while ( size-- ) *dest++ = *buffer++;
 8008848:	f812 1b01 	ldrb.w	r1, [r2], #1
 800884c:	f803 1f01 	strb.w	r1, [r3, #1]!
 8008850:	4282      	cmp	r2, r0
 8008852:	d1f9      	bne.n	8008848 <UFCP_Send+0xac>
 8008854:	e7d9      	b.n	800880a <UFCP_Send+0x6e>
 8008856:	bf00      	nop

08008858 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8008858:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 800885c:	b90b      	cbnz	r3, 8008862 <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800885e:	482e      	ldr	r0, [pc, #184]	; (8008918 <UFCP_RX_IRQ_Handler+0xc0>)
}
 8008860:	4770      	bx	lr
{
 8008862:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 8008864:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
 8008868:	4604      	mov	r4, r0
{
 800886a:	b083      	sub	sp, #12
    uint8_t rx_byte = (uint8_t) rx_data;
 800886c:	b2c8      	uxtb	r0, r1
    switch ( pBaseHandle->RxFrameLevel )
 800886e:	b1cb      	cbz	r3, 80088a4 <UFCP_RX_IRQ_Handler+0x4c>
 8008870:	2b01      	cmp	r3, #1
 8008872:	d00c      	beq.n	800888e <UFCP_RX_IRQ_Handler+0x36>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8008874:	f894 209a 	ldrb.w	r2, [r4, #154]	; 0x9a
 8008878:	3201      	adds	r2, #1
 800887a:	4293      	cmp	r3, r2
 800887c:	dc1c      	bgt.n	80088b8 <UFCP_RX_IRQ_Handler+0x60>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800887e:	18e2      	adds	r2, r4, r3
          pBaseHandle->RxFrameLevel++;
 8008880:	3301      	adds	r3, #1
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8008882:	f882 0099 	strb.w	r0, [r2, #153]	; 0x99
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8008886:	4824      	ldr	r0, [pc, #144]	; (8008918 <UFCP_RX_IRQ_Handler+0xc0>)
          pBaseHandle->RxFrameLevel++;
 8008888:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
 800888c:	e008      	b.n	80088a0 <UFCP_RX_IRQ_Handler+0x48>
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 800888e:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrame.Size = rx_byte;
 8008890:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
        pBaseHandle->RxFrameLevel++;
 8008894:	bf54      	ite	pl
 8008896:	2302      	movpl	r3, #2
          pBaseHandle->RxFrameLevel =0 ;
 8008898:	2300      	movmi	r3, #0
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800889a:	481f      	ldr	r0, [pc, #124]	; (8008918 <UFCP_RX_IRQ_Handler+0xc0>)
          pBaseHandle->RxFrameLevel =0 ;
 800889c:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 80088a0:	b003      	add	sp, #12
 80088a2:	bd30      	pop	{r4, r5, pc}
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80088a4:	8a22      	ldrh	r2, [r4, #16]
        pBaseHandle->RxFrame.Code = rx_byte;
 80088a6:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 80088aa:	481c      	ldr	r0, [pc, #112]	; (800891c <UFCP_RX_IRQ_Handler+0xc4>)
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80088ac:	8262      	strh	r2, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 80088ae:	2301      	movs	r3, #1
 80088b0:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 80088b4:	b003      	add	sp, #12
 80088b6:	bd30      	pop	{r4, r5, pc}
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 80088b8:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 80088bc:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
          pBaseHandle->RxTimeoutCountdown = 0;
 80088c0:	2300      	movs	r3, #0
 80088c2:	320c      	adds	r2, #12
 80088c4:	8263      	strh	r3, [r4, #18]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c6:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80088ca:	f023 0320 	bic.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ce:	e842 3100 	strex	r1, r3, [r2]
 80088d2:	2900      	cmp	r1, #0
 80088d4:	d1f7      	bne.n	80088c6 <UFCP_RX_IRQ_Handler+0x6e>
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 80088d6:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 80088da:	f104 0099 	add.w	r0, r4, #153	; 0x99
 80088de:	f7fe ff43 	bl	8007768 <FCP_CalcCRC>
 80088e2:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 80088e6:	4283      	cmp	r3, r0
 80088e8:	d10a      	bne.n	8008900 <UFCP_RX_IRQ_Handler+0xa8>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 80088ea:	6820      	ldr	r0, [r4, #0]
 80088ec:	68a5      	ldr	r5, [r4, #8]
 80088ee:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 80088f2:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 80088f6:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 80088fa:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 80088fc:	4808      	ldr	r0, [pc, #32]	; (8008920 <UFCP_RX_IRQ_Handler+0xc8>)
 80088fe:	e7cf      	b.n	80088a0 <UFCP_RX_IRQ_Handler+0x48>
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008900:	4620      	mov	r0, r4
 8008902:	2301      	movs	r3, #1
            error_code = FCP_MSG_RX_BAD_CRC;
 8008904:	240a      	movs	r4, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008906:	f10d 0207 	add.w	r2, sp, #7
 800890a:	21ff      	movs	r1, #255	; 0xff
            error_code = FCP_MSG_RX_BAD_CRC;
 800890c:	f88d 4007 	strb.w	r4, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008910:	f7ff ff44 	bl	800879c <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8008914:	4802      	ldr	r0, [pc, #8]	; (8008920 <UFCP_RX_IRQ_Handler+0xc8>)
  return ret_val;
 8008916:	e7c3      	b.n	80088a0 <UFCP_RX_IRQ_Handler+0x48>
 8008918:	0800a6b0 	.word	0x0800a6b0
 800891c:	0800a6b2 	.word	0x0800a6b2
 8008920:	0800a6b4 	.word	0x0800a6b4

08008924 <UFCP_OVR_IRQ_Handler>:
{
 8008924:	b510      	push	{r4, lr}
 8008926:	b082      	sub	sp, #8
  error_code = UFCP_MSG_OVERRUN;
 8008928:	2408      	movs	r4, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800892a:	2301      	movs	r3, #1
 800892c:	f10d 0207 	add.w	r2, sp, #7
 8008930:	21ff      	movs	r1, #255	; 0xff
  error_code = UFCP_MSG_OVERRUN;
 8008932:	f88d 4007 	strb.w	r4, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008936:	f7ff ff31 	bl	800879c <UFCP_Send>
}
 800893a:	b002      	add	sp, #8
 800893c:	bd10      	pop	{r4, pc}
 800893e:	bf00      	nop

08008940 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8008940:	2300      	movs	r3, #0
 8008942:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 8008946:	4770      	bx	lr

08008948 <VSS_Clear>:
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 8008948:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800894a:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 800894c:	85c2      	strh	r2, [r0, #46]	; 0x2e
  pHandle->wElSpeedDpp32 = 0;
 800894e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  pHandle->_Super.bSpeedErrorNumber = 0u;
 8008952:	7003      	strb	r3, [r0, #0]
  pHandle->_Super.hElAngle = 0;
 8008954:	6043      	str	r3, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 8008956:	60c3      	str	r3, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = 0;
 8008958:	8243      	strh	r3, [r0, #18]
  pHandle->hRemainingStep = 0u;
 800895a:	8503      	strh	r3, [r0, #40]	; 0x28
  pHandle->bTransitionStarted = false;
 800895c:	8583      	strh	r3, [r0, #44]	; 0x2c
  pHandle->hElAngleAccu = 0;
 800895e:	6303      	str	r3, [r0, #48]	; 0x30
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop

08008964 <VSS_Init>:
{
 8008964:	b508      	push	{r3, lr}
  VSS_Clear( pHandle );
 8008966:	f7ff ffef 	bl	8008948 <VSS_Clear>
}
 800896a:	bd08      	pop	{r3, pc}

0800896c <VSS_CalcElAngle>:
  int16_t hAngleDiff;
  int16_t hAngleCorr;
  int32_t wAux;
  int16_t hSignCorr = 1;

  if ( pHandle->bCopyObserver == true )
 800896c:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 8008970:	b123      	cbz	r3, 800897c <VSS_CalcElAngle+0x10>
  {
    hRetAngle = *( int16_t * )pInputVars_str;
 8008972:	f9b1 2000 	ldrsh.w	r2, [r1]
    {
      hRetAngle = pHandle->hElAngleAccu;
    }
  }

  pHandle->_Super.hElAngle = hRetAngle;
 8008976:	8082      	strh	r2, [r0, #4]
  return hRetAngle;
}
 8008978:	4610      	mov	r0, r2
 800897a:	4770      	bx	lr
{
 800897c:	b4f0      	push	{r4, r5, r6, r7}
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800897e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8008980:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8008984:	88c7      	ldrh	r7, [r0, #6]
    if ( pHandle->bTransitionStarted == true )
 8008986:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
                                 ( int16_t )pHandle->_Super.bElToMecRatio;
 800898a:	7844      	ldrb	r4, [r0, #1]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 800898c:	fb95 f4f4 	sdiv	r4, r5, r4
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8008990:	442b      	add	r3, r5
 8008992:	b21a      	sxth	r2, r3
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8008994:	443c      	add	r4, r7
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8008996:	8602      	strh	r2, [r0, #48]	; 0x30
 8008998:	b29b      	uxth	r3, r3
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 800899a:	80c4      	strh	r4, [r0, #6]
    if ( pHandle->bTransitionStarted == true )
 800899c:	b1de      	cbz	r6, 80089d6 <VSS_CalcElAngle+0x6a>
      if ( pHandle->hTransitionRemainingSteps == 0 )
 800899e:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
 80089a2:	b1e4      	cbz	r4, 80089de <VSS_CalcElAngle+0x72>
        pHandle->hTransitionRemainingSteps--;
 80089a4:	3c01      	subs	r4, #1
 80089a6:	b224      	sxth	r4, r4
 80089a8:	85c4      	strh	r4, [r0, #46]	; 0x2e
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 80089aa:	2d00      	cmp	r5, #0
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 80089ac:	8809      	ldrh	r1, [r1, #0]
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 80089ae:	db27      	blt.n	8008a00 <VSS_CalcElAngle+0x94>
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 80089b0:	1acb      	subs	r3, r1, r3
 80089b2:	b21b      	sxth	r3, r3
 80089b4:	2601      	movs	r6, #1
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 80089b6:	f9b0 5036 	ldrsh.w	r5, [r0, #54]	; 0x36
        wAux = ( int32_t )hAngleDiff * pHandle->hTransitionRemainingSteps;
 80089ba:	fb03 f404 	mul.w	r4, r3, r4
        if ( hAngleDiff >= 0 )
 80089be:	2b00      	cmp	r3, #0
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 80089c0:	fb94 f4f5 	sdiv	r4, r4, r5
        hAngleCorr *= hSignCorr;
 80089c4:	fb14 f406 	smulbb	r4, r4, r6
 80089c8:	b2a4      	uxth	r4, r4
        if ( hAngleDiff >= 0 )
 80089ca:	db12      	blt.n	80089f2 <VSS_CalcElAngle+0x86>
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 80089cc:	1b0c      	subs	r4, r1, r4
          pHandle->bTransitionLocked = true;
 80089ce:	2301      	movs	r3, #1
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 80089d0:	b222      	sxth	r2, r4
          pHandle->bTransitionLocked = true;
 80089d2:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
  pHandle->_Super.hElAngle = hRetAngle;
 80089d6:	8082      	strh	r2, [r0, #4]
}
 80089d8:	bcf0      	pop	{r4, r5, r6, r7}
 80089da:	4610      	mov	r0, r2
 80089dc:	4770      	bx	lr
        hRetAngle = *( int16_t * )pInputVars_str;
 80089de:	f9b1 2000 	ldrsh.w	r2, [r1]
        pHandle->_Super.bSpeedErrorNumber = 0u;
 80089e2:	7004      	strb	r4, [r0, #0]
        pHandle->bTransitionEnded = true;
 80089e4:	2301      	movs	r3, #1
 80089e6:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  pHandle->_Super.hElAngle = hRetAngle;
 80089ea:	8082      	strh	r2, [r0, #4]
}
 80089ec:	bcf0      	pop	{r4, r5, r6, r7}
 80089ee:	4610      	mov	r0, r2
 80089f0:	4770      	bx	lr
          if ( pHandle->bTransitionLocked == false )
 80089f2:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d0ed      	beq.n	80089d6 <VSS_CalcElAngle+0x6a>
            hRetAngle = *( int16_t * )pInputVars_str + hAngleCorr;
 80089fa:	440c      	add	r4, r1
 80089fc:	b222      	sxth	r2, r4
 80089fe:	e7ea      	b.n	80089d6 <VSS_CalcElAngle+0x6a>
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
 8008a00:	1a5b      	subs	r3, r3, r1
 8008a02:	b21b      	sxth	r3, r3
 8008a04:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8008a08:	e7d5      	b.n	80089b6 <VSS_CalcElAngle+0x4a>
 8008a0a:	bf00      	nop

08008a0c <VSS_CalcAvrgMecSpeedUnit>:
  */
__weak bool VSS_CalcAvrgMecSpeedUnit( VirtualSpeedSensor_Handle_t * pHandle, int16_t * hMecSpeedUnit )
{
  bool SpeedSensorReliability = false;

  if ( pHandle->hRemainingStep > 1u )
 8008a0c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8008a0e:	2b01      	cmp	r3, #1
{
 8008a10:	b470      	push	{r4, r5, r6}
  if ( pHandle->hRemainingStep > 1u )
 8008a12:	d925      	bls.n	8008a60 <VSS_CalcAvrgMecSpeedUnit+0x54>
  {
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8008a14:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
 8008a18:	4413      	add	r3, r2
 8008a1a:	6243      	str	r3, [r0, #36]	; 0x24
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	bfb8      	it	lt
 8008a20:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00

    /* Convert dpp into MecUnit */
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8008a24:	8b42      	ldrh	r2, [r0, #26]
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8008a26:	7846      	ldrb	r6, [r0, #1]
 8008a28:	69c5      	ldr	r5, [r0, #28]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8008a2a:	bfb8      	it	lt
 8008a2c:	33ff      	addlt	r3, #255	; 0xff
 8008a2e:	141c      	asrs	r4, r3, #16
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8008a30:	fb04 f202 	mul.w	r2, r4, r2
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8008a34:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008a38:	0053      	lsls	r3, r2, #1
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8008a3a:	fb05 f506 	mul.w	r5, r5, r6
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8008a3e:	fb93 f3f5 	sdiv	r3, r3, r5
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8008a42:	b21b      	sxth	r3, r3
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8008a44:	81c4      	strh	r4, [r0, #14]
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8008a46:	800b      	strh	r3, [r1, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;

    pHandle->hRemainingStep--;
 8008a48:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8008a4a:	8183      	strh	r3, [r0, #12]
    pHandle->hRemainingStep--;
 8008a4c:	1e53      	subs	r3, r2, #1
 8008a4e:	8503      	strh	r3, [r0, #40]	; 0x28
  else
  {
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
  }
  /* If the transition is not done yet, we already know that speed is not reliable */
  if ( pHandle->bTransitionEnded == false )
 8008a50:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8008a54:	b963      	cbnz	r3, 8008a70 <VSS_CalcAvrgMecSpeedUnit+0x64>
  {
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8008a56:	78c2      	ldrb	r2, [r0, #3]
 8008a58:	7002      	strb	r2, [r0, #0]
  {
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
  }

  return ( SpeedSensorReliability );
}
 8008a5a:	bc70      	pop	{r4, r5, r6}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	4770      	bx	lr
  else if ( pHandle->hRemainingStep == 1u )
 8008a60:	d009      	beq.n	8008a76 <VSS_CalcAvrgMecSpeedUnit+0x6a>
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8008a62:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8008a66:	800b      	strh	r3, [r1, #0]
  if ( pHandle->bTransitionEnded == false )
 8008a68:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d0f2      	beq.n	8008a56 <VSS_CalcAvrgMecSpeedUnit+0x4a>
}
 8008a70:	bc70      	pop	{r4, r5, r6}
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
 8008a72:	f7ff bc97 	b.w	80083a4 <SPD_IsMecSpeedReliable>
    *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 8008a76:	f9b0 502a 	ldrsh.w	r5, [r0, #42]	; 0x2a
 8008a7a:	800d      	strh	r5, [r1, #0]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008a7c:	8b43      	ldrh	r3, [r0, #26]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 8008a7e:	69c2      	ldr	r2, [r0, #28]
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008a80:	7844      	ldrb	r4, [r0, #1]
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8008a82:	8185      	strh	r5, [r0, #12]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008a84:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 8008a88:	fb02 f205 	mul.w	r2, r2, r5
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008a8c:	005b      	lsls	r3, r3, #1
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 8008a8e:	fb92 f3f3 	sdiv	r3, r2, r3
    pHandle->hRemainingStep = 0u;
 8008a92:	2200      	movs	r2, #0
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008a94:	fb14 f303 	smulbb	r3, r4, r3
 8008a98:	81c3      	strh	r3, [r0, #14]
    pHandle->hRemainingStep = 0u;
 8008a9a:	8502      	strh	r2, [r0, #40]	; 0x28
 8008a9c:	e7d8      	b.n	8008a50 <VSS_CalcAvrgMecSpeedUnit+0x44>
 8008a9e:	bf00      	nop

08008aa0 <VSS_SetMecAngle>:
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8008aa0:	7843      	ldrb	r3, [r0, #1]
  pHandle->hElAngleAccu = hMecAngle;
 8008aa2:	8601      	strh	r1, [r0, #48]	; 0x30
  pHandle->_Super.hElAngle = hMecAngle;
 8008aa4:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8008aa6:	fb91 f1f3 	sdiv	r1, r1, r3
 8008aaa:	80c1      	strh	r1, [r0, #6]
}
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop

08008ab0 <VSS_SetMecAcceleration>:
            instantaneous the final speed.
  * @retval none
  */
__weak void  VSS_SetMecAcceleration( VirtualSpeedSensor_Handle_t * pHandle, int16_t  hFinalMecSpeedUnit,
                              uint16_t hDurationms )
{
 8008ab0:	b470      	push	{r4, r5, r6}
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 8008ab2:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8008ab6:	b984      	cbnz	r4, 8008ada <VSS_SetMecAcceleration+0x2a>
  {
    if ( hDurationms == 0u )
 8008ab8:	b98a      	cbnz	r2, 8008ade <VSS_SetMecAcceleration+0x2e>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008aba:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8008abc:	69c4      	ldr	r4, [r0, #28]

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008abe:	7845      	ldrb	r5, [r0, #1]
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8008ac0:	8181      	strh	r1, [r0, #12]
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008ac2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008ac6:	005b      	lsls	r3, r3, #1
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8008ac8:	fb04 f401 	mul.w	r4, r4, r1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008acc:	fb94 f3f3 	sdiv	r3, r4, r3
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008ad0:	fb15 f303 	smulbb	r3, r5, r3

      pHandle->hRemainingStep = 0u;
 8008ad4:	8502      	strh	r2, [r0, #40]	; 0x28

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008ad6:	8541      	strh	r1, [r0, #42]	; 0x2a
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008ad8:	81c3      	strh	r3, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 8008ada:	bc70      	pop	{r4, r5, r6}
 8008adc:	4770      	bx	lr
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8008ade:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8008ae0:	4d11      	ldr	r5, [pc, #68]	; (8008b28 <VSS_SetMecAcceleration+0x78>)
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008ae2:	8b44      	ldrh	r4, [r0, #26]
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8008ae4:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008ae8:	8541      	strh	r1, [r0, #42]	; 0x2a
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8008aea:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8008aee:	fba5 2303 	umull	r2, r3, r5, r3
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008af2:	69c2      	ldr	r2, [r0, #28]
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 8008af4:	7845      	ldrb	r5, [r0, #1]
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8008af6:	f3c3 138f 	ubfx	r3, r3, #6, #16
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008afa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8008afe:	0064      	lsls	r4, r4, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008b00:	fb02 f201 	mul.w	r2, r2, r1
      hNbrStep++;
 8008b04:	3301      	adds	r3, #1
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8008b06:	fb96 f1f5 	sdiv	r1, r6, r5
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008b0a:	fb92 f2f4 	sdiv	r2, r2, r4
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8008b0e:	1a52      	subs	r2, r2, r1
      hNbrStep++;
 8008b10:	b29b      	uxth	r3, r3
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8008b12:	0436      	lsls	r6, r6, #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8008b14:	0412      	lsls	r2, r2, #16
 8008b16:	fb92 f2f3 	sdiv	r2, r2, r3
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 8008b1a:	fb05 f202 	mul.w	r2, r5, r2
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8008b1e:	e9c0 2608 	strd	r2, r6, [r0, #32]
      pHandle->hRemainingStep = hNbrStep;
 8008b22:	8503      	strh	r3, [r0, #40]	; 0x28
}
 8008b24:	bc70      	pop	{r4, r5, r6}
 8008b26:	4770      	bx	lr
 8008b28:	10624dd3 	.word	0x10624dd3

08008b2c <VSS_SetStartTransition>:
            (parameter hTransitionSteps = 0)
  */
__weak bool VSS_SetStartTransition( VirtualSpeedSensor_Handle_t * pHandle, bool bCommand )
{
  bool bAux = true;
  if ( bCommand == true )
 8008b2c:	b151      	cbz	r1, 8008b44 <VSS_SetStartTransition+0x18>
  {
    pHandle->bTransitionStarted = true;

    if ( pHandle->hTransitionSteps == 0 )
 8008b2e:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	; 0x36
    pHandle->bTransitionStarted = true;
 8008b32:	2201      	movs	r2, #1
 8008b34:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    if ( pHandle->hTransitionSteps == 0 )
 8008b38:	b923      	cbnz	r3, 8008b44 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionEnded = true;
 8008b3a:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
      pHandle->_Super.bSpeedErrorNumber = 0u;
 8008b3e:	7003      	strb	r3, [r0, #0]
      bAux = false;
 8008b40:	4618      	mov	r0, r3
    }
  }
  return bAux;
}
 8008b42:	4770      	bx	lr
  bool bAux = true;
 8008b44:	2001      	movs	r0, #1
 8008b46:	4770      	bx	lr

08008b48 <VSS_TransitionEnded>:
}

__weak bool VSS_TransitionEnded( VirtualSpeedSensor_Handle_t * pHandle )
{
    return pHandle->bTransitionEnded;
}
 8008b48:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop

08008b50 <VSS_SetCopyObserver>:
  * @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
  * @retval none
  */
__weak void VSS_SetCopyObserver( VirtualSpeedSensor_Handle_t * pHandle )
{
  pHandle->bCopyObserver = true;
 8008b50:	2301      	movs	r3, #1
 8008b52:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
 8008b56:	4770      	bx	lr

08008b58 <RUC_Init>:
 8008b58:	b430      	push	{r4, r5}
 8008b5a:	6681      	str	r1, [r0, #104]	; 0x68
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	9c02      	ldr	r4, [sp, #8]
 8008b60:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 8008b64:	f880 1055 	strb.w	r1, [r0, #85]	; 0x55
 8008b68:	f110 010c 	adds.w	r1, r0, #12
 8008b6c:	e9c0 231b 	strd	r2, r3, [r0, #108]	; 0x6c
 8008b70:	6744      	str	r4, [r0, #116]	; 0x74
 8008b72:	d023      	beq.n	8008bbc <RUC_Init+0x64>
 8008b74:	6943      	ldr	r3, [r0, #20]
 8008b76:	b323      	cbz	r3, 8008bc2 <RUC_Init+0x6a>
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	b323      	cbz	r3, 8008bc6 <RUC_Init+0x6e>
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	b323      	cbz	r3, 8008bca <RUC_Init+0x72>
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	b1c3      	cbz	r3, 8008bb6 <RUC_Init+0x5e>
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	2105      	movs	r1, #5
 8008b88:	b1b3      	cbz	r3, 8008bb8 <RUC_Init+0x60>
 8008b8a:	2204      	movs	r2, #4
 8008b8c:	2105      	movs	r1, #5
 8008b8e:	8805      	ldrh	r5, [r0, #0]
 8008b90:	4c0f      	ldr	r4, [pc, #60]	; (8008bd0 <RUC_Init+0x78>)
 8008b92:	2364      	movs	r3, #100	; 0x64
 8008b94:	fb03 f305 	mul.w	r3, r3, r5
 8008b98:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008b9c:	fba4 4303 	umull	r4, r3, r4, r3
 8008ba0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008ba4:	2400      	movs	r4, #0
 8008ba6:	099b      	lsrs	r3, r3, #6
 8008ba8:	6154      	str	r4, [r2, #20]
 8008baa:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
 8008bae:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
 8008bb2:	bc30      	pop	{r4, r5}
 8008bb4:	4770      	bx	lr
 8008bb6:	2104      	movs	r1, #4
 8008bb8:	1e4a      	subs	r2, r1, #1
 8008bba:	e7e8      	b.n	8008b8e <RUC_Init+0x36>
 8008bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8008bc0:	e7e5      	b.n	8008b8e <RUC_Init+0x36>
 8008bc2:	2101      	movs	r1, #1
 8008bc4:	e7f8      	b.n	8008bb8 <RUC_Init+0x60>
 8008bc6:	2102      	movs	r1, #2
 8008bc8:	e7f6      	b.n	8008bb8 <RUC_Init+0x60>
 8008bca:	2103      	movs	r1, #3
 8008bcc:	e7f4      	b.n	8008bb8 <RUC_Init+0x60>
 8008bce:	bf00      	nop
 8008bd0:	10624dd3 	.word	0x10624dd3

08008bd4 <RUC_Clear>:
 8008bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd8:	4604      	mov	r4, r0
 8008bda:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
 8008bdc:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
 8008be0:	80e1      	strh	r1, [r4, #6]
 8008be2:	2500      	movs	r5, #0
 8008be4:	4638      	mov	r0, r7
 8008be6:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
 8008bea:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8008bee:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 8008bf2:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 8008bf6:	460e      	mov	r6, r1
 8008bf8:	f7ff fea6 	bl	8008948 <VSS_Clear>
 8008bfc:	4629      	mov	r1, r5
 8008bfe:	4640      	mov	r0, r8
 8008c00:	f7ff fc36 	bl	8008470 <STC_SetControlMode>
 8008c04:	8861      	ldrh	r1, [r4, #2]
 8008c06:	b2b6      	uxth	r6, r6
 8008c08:	fb11 f106 	smulbb	r1, r1, r6
 8008c0c:	b209      	sxth	r1, r1
 8008c0e:	4638      	mov	r0, r7
 8008c10:	f7ff ff46 	bl	8008aa0 <VSS_SetMecAngle>
 8008c14:	462a      	mov	r2, r5
 8008c16:	4629      	mov	r1, r5
 8008c18:	4640      	mov	r0, r8
 8008c1a:	f7ff fc2d 	bl	8008478 <STC_ExecRamp>
 8008c1e:	8a21      	ldrh	r1, [r4, #16]
 8008c20:	89a2      	ldrh	r2, [r4, #12]
 8008c22:	fb11 f106 	smulbb	r1, r1, r6
 8008c26:	b209      	sxth	r1, r1
 8008c28:	4640      	mov	r0, r8
 8008c2a:	f7ff fc25 	bl	8008478 <STC_ExecRamp>
 8008c2e:	89e1      	ldrh	r1, [r4, #14]
 8008c30:	89a2      	ldrh	r2, [r4, #12]
 8008c32:	fb11 f106 	smulbb	r1, r1, r6
 8008c36:	4638      	mov	r0, r7
 8008c38:	b209      	sxth	r1, r1
 8008c3a:	f7ff ff39 	bl	8008ab0 <VSS_SetMecAcceleration>
 8008c3e:	89a0      	ldrh	r0, [r4, #12]
 8008c40:	8823      	ldrh	r3, [r4, #0]
 8008c42:	4907      	ldr	r1, [pc, #28]	; (8008c60 <RUC_Clear+0x8c>)
 8008c44:	6962      	ldr	r2, [r4, #20]
 8008c46:	f884 5057 	strb.w	r5, [r4, #87]	; 0x57
 8008c4a:	fb03 f300 	mul.w	r3, r3, r0
 8008c4e:	fba1 1303 	umull	r1, r3, r1, r3
 8008c52:	099b      	lsrs	r3, r3, #6
 8008c54:	3301      	adds	r3, #1
 8008c56:	80a3      	strh	r3, [r4, #4]
 8008c58:	60a2      	str	r2, [r4, #8]
 8008c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c5e:	bf00      	nop
 8008c60:	10624dd3 	.word	0x10624dd3

08008c64 <RUC_OTF_Exec>:
 8008c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c66:	8883      	ldrh	r3, [r0, #4]
 8008c68:	f890 5058 	ldrb.w	r5, [r0, #88]	; 0x58
 8008c6c:	4604      	mov	r4, r0
 8008c6e:	b183      	cbz	r3, 8008c92 <RUC_OTF_Exec+0x2e>
 8008c70:	3b01      	subs	r3, #1
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	8083      	strh	r3, [r0, #4]
 8008c76:	b93d      	cbnz	r5, 8008c88 <RUC_OTF_Exec+0x24>
 8008c78:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
 8008c7c:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d05b      	beq.n	8008d3a <RUC_OTF_Exec+0xd6>
 8008c82:	6843      	ldr	r3, [r0, #4]
 8008c84:	4798      	blx	r3
 8008c86:	88a3      	ldrh	r3, [r4, #4]
 8008c88:	b10b      	cbz	r3, 8008c8e <RUC_OTF_Exec+0x2a>
 8008c8a:	2001      	movs	r0, #1
 8008c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c8e:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
 8008c92:	68a3      	ldr	r3, [r4, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d02d      	beq.n	8008cf4 <RUC_OTF_Exec+0x90>
 8008c98:	2d00      	cmp	r5, #0
 8008c9a:	d03f      	beq.n	8008d1c <RUC_OTF_Exec+0xb8>
 8008c9c:	2d01      	cmp	r5, #1
 8008c9e:	d035      	beq.n	8008d0c <RUC_OTF_Exec+0xa8>
 8008ca0:	88e5      	ldrh	r5, [r4, #6]
 8008ca2:	8899      	ldrh	r1, [r3, #4]
 8008ca4:	881a      	ldrh	r2, [r3, #0]
 8008ca6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8008ca8:	fb11 f105 	smulbb	r1, r1, r5
 8008cac:	b209      	sxth	r1, r1
 8008cae:	f7ff fbe3 	bl	8008478 <STC_ExecRamp>
 8008cb2:	68a3      	ldr	r3, [r4, #8]
 8008cb4:	88e5      	ldrh	r5, [r4, #6]
 8008cb6:	8859      	ldrh	r1, [r3, #2]
 8008cb8:	881a      	ldrh	r2, [r3, #0]
 8008cba:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008cbc:	fb11 f105 	smulbb	r1, r1, r5
 8008cc0:	b209      	sxth	r1, r1
 8008cc2:	f7ff fef5 	bl	8008ab0 <VSS_SetMecAcceleration>
 8008cc6:	68a2      	ldr	r2, [r4, #8]
 8008cc8:	8823      	ldrh	r3, [r4, #0]
 8008cca:	8810      	ldrh	r0, [r2, #0]
 8008ccc:	4971      	ldr	r1, [pc, #452]	; (8008e94 <RUC_OTF_Exec+0x230>)
 8008cce:	6892      	ldr	r2, [r2, #8]
 8008cd0:	60a2      	str	r2, [r4, #8]
 8008cd2:	fb03 f300 	mul.w	r3, r3, r0
 8008cd6:	fba1 2303 	umull	r2, r3, r1, r3
 8008cda:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8008cde:	099b      	lsrs	r3, r3, #6
 8008ce0:	3201      	adds	r2, #1
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8008ce8:	80a3      	strh	r3, [r4, #4]
 8008cea:	2001      	movs	r0, #1
 8008cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cee:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
 8008cf2:	80a0      	strh	r0, [r4, #4]
 8008cf4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	429d      	cmp	r5, r3
 8008cfc:	d01b      	beq.n	8008d36 <RUC_OTF_Exec+0xd2>
 8008cfe:	2d07      	cmp	r5, #7
 8008d00:	d1c3      	bne.n	8008c8a <RUC_OTF_Exec+0x26>
 8008d02:	2300      	movs	r3, #0
 8008d04:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8008d08:	80a3      	strh	r3, [r4, #4]
 8008d0a:	e7be      	b.n	8008c8a <RUC_OTF_Exec+0x26>
 8008d0c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8008d0e:	f7ff fa1b 	bl	8008148 <PWMC_SwitchOnPWM>
 8008d12:	2200      	movs	r2, #0
 8008d14:	68a3      	ldr	r3, [r4, #8]
 8008d16:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8008d1a:	e7c1      	b.n	8008ca0 <RUC_OTF_Exec+0x3c>
 8008d1c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8008d1e:	f7ff fa11 	bl	8008144 <PWMC_SwitchOffPWM>
 8008d22:	2301      	movs	r3, #1
 8008d24:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8008d28:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8008d2a:	f7ff fa39 	bl	80081a0 <PWMC_TurnOnLowSides>
 8008d2e:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 8008d32:	68a3      	ldr	r3, [r4, #8]
 8008d34:	e7b4      	b.n	8008ca0 <RUC_OTF_Exec+0x3c>
 8008d36:	2000      	movs	r0, #0
 8008d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d3a:	68c2      	ldr	r2, [r0, #12]
 8008d3c:	b17a      	cbz	r2, 8008d5e <RUC_OTF_Exec+0xfa>
 8008d3e:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 8008d42:	f894 1056 	ldrb.w	r1, [r4, #86]	; 0x56
 8008d46:	3301      	adds	r3, #1
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	4299      	cmp	r1, r3
 8008d4c:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 8008d50:	d205      	bcs.n	8008d5e <RUC_OTF_Exec+0xfa>
 8008d52:	4790      	blx	r2
 8008d54:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008d56:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 8008d5a:	f884 5057 	strb.w	r5, [r4, #87]	; 0x57
 8008d5e:	6903      	ldr	r3, [r0, #16]
 8008d60:	4798      	blx	r3
 8008d62:	b350      	cbz	r0, 8008dba <RUC_OTF_Exec+0x156>
 8008d64:	f894 5053 	ldrb.w	r5, [r4, #83]	; 0x53
 8008d68:	2d7e      	cmp	r5, #126	; 0x7e
 8008d6a:	d803      	bhi.n	8008d74 <RUC_OTF_Exec+0x110>
 8008d6c:	3501      	adds	r5, #1
 8008d6e:	b2ed      	uxtb	r5, r5
 8008d70:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 8008d74:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008d76:	68da      	ldr	r2, [r3, #12]
 8008d78:	b36a      	cbz	r2, 8008dd6 <RUC_OTF_Exec+0x172>
 8008d7a:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 8008d7e:	ebb5 0f52 	cmp.w	r5, r2, lsr #1
 8008d82:	d180      	bne.n	8008c86 <RUC_OTF_Exec+0x22>
 8008d84:	6818      	ldr	r0, [r3, #0]
 8008d86:	f7ff fb05 	bl	8008394 <SPD_GetAvrgMecSpeedUnit>
 8008d8a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	4606      	mov	r6, r0
 8008d92:	dd19      	ble.n	8008dc8 <RUC_OTF_Exec+0x164>
 8008d94:	2800      	cmp	r0, #0
 8008d96:	dd19      	ble.n	8008dcc <RUC_OTF_Exec+0x168>
 8008d98:	ea86 75e6 	eor.w	r5, r6, r6, asr #31
 8008d9c:	eba5 75e6 	sub.w	r5, r5, r6, asr #31
 8008da0:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8008da4:	b2ab      	uxth	r3, r5
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d218      	bcs.n	8008ddc <RUC_OTF_Exec+0x178>
 8008daa:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008dac:	6843      	ldr	r3, [r0, #4]
 8008dae:	4798      	blx	r3
 8008db0:	2301      	movs	r3, #1
 8008db2:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8008db6:	88a3      	ldrh	r3, [r4, #4]
 8008db8:	e766      	b.n	8008c88 <RUC_OTF_Exec+0x24>
 8008dba:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008dbc:	f884 0053 	strb.w	r0, [r4, #83]	; 0x53
 8008dc0:	68da      	ldr	r2, [r3, #12]
 8008dc2:	2a00      	cmp	r2, #0
 8008dc4:	d1d9      	bne.n	8008d7a <RUC_OTF_Exec+0x116>
 8008dc6:	e75e      	b.n	8008c86 <RUC_OTF_Exec+0x22>
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	dbe5      	blt.n	8008d98 <RUC_OTF_Exec+0x134>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
 8008dd2:	88a3      	ldrh	r3, [r4, #4]
 8008dd4:	e758      	b.n	8008c88 <RUC_OTF_Exec+0x24>
 8008dd6:	2d7f      	cmp	r5, #127	; 0x7f
 8008dd8:	d0d4      	beq.n	8008d84 <RUC_OTF_Exec+0x120>
 8008dda:	e754      	b.n	8008c86 <RUC_OTF_Exec+0x22>
 8008ddc:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 8008de0:	429a      	cmp	r2, r3
 8008de2:	f4bf af50 	bcs.w	8008c86 <RUC_OTF_Exec+0x22>
 8008de6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008de8:	f7ff feb2 	bl	8008b50 <VSS_SetCopyObserver>
 8008dec:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008dee:	6883      	ldr	r3, [r0, #8]
 8008df0:	4798      	blx	r3
 8008df2:	68a0      	ldr	r0, [r4, #8]
 8008df4:	4603      	mov	r3, r0
 8008df6:	2800      	cmp	r0, #0
 8008df8:	f43f af79 	beq.w	8008cee <RUC_OTF_Exec+0x8a>
 8008dfc:	f9b0 7002 	ldrsh.w	r7, [r0, #2]
 8008e00:	b22a      	sxth	r2, r5
 8008e02:	42ba      	cmp	r2, r7
 8008e04:	dd42      	ble.n	8008e8c <RUC_OTF_Exec+0x228>
 8008e06:	6881      	ldr	r1, [r0, #8]
 8008e08:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
 8008e0c:	2900      	cmp	r1, #0
 8008e0e:	d037      	beq.n	8008e80 <RUC_OTF_Exec+0x21c>
 8008e10:	3501      	adds	r5, #1
 8008e12:	b2eb      	uxtb	r3, r5
 8008e14:	e008      	b.n	8008e28 <RUC_OTF_Exec+0x1c4>
 8008e16:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	462f      	mov	r7, r5
 8008e1e:	4608      	mov	r0, r1
 8008e20:	f1bc 0f00 	cmp.w	ip, #0
 8008e24:	d028      	beq.n	8008e78 <RUC_OTF_Exec+0x214>
 8008e26:	4661      	mov	r1, ip
 8008e28:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8008e2c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8008e30:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8008e34:	4295      	cmp	r5, r2
 8008e36:	f103 0301 	add.w	r3, r3, #1
 8008e3a:	dbec      	blt.n	8008e16 <RUC_OTF_Exec+0x1b2>
 8008e3c:	60a1      	str	r1, [r4, #8]
 8008e3e:	460b      	mov	r3, r1
 8008e40:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8008e44:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8008e48:	88e2      	ldrh	r2, [r4, #6]
 8008e4a:	1a2b      	subs	r3, r5, r0
 8008e4c:	1bcf      	subs	r7, r1, r7
 8008e4e:	fb06 f303 	mul.w	r3, r6, r3
 8008e52:	fb93 f3f7 	sdiv	r3, r3, r7
 8008e56:	4403      	add	r3, r0
 8008e58:	fb12 f303 	smulbb	r3, r2, r3
 8008e5c:	b219      	sxth	r1, r3
 8008e5e:	2200      	movs	r2, #0
 8008e60:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8008e62:	f7ff fb09 	bl	8008478 <STC_ExecRamp>
 8008e66:	2306      	movs	r3, #6
 8008e68:	2001      	movs	r0, #1
 8008e6a:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 8008e6e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8008e72:	80a0      	strh	r0, [r4, #4]
 8008e74:	60a2      	str	r2, [r4, #8]
 8008e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e78:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
 8008e7c:	60a1      	str	r1, [r4, #8]
 8008e7e:	460b      	mov	r3, r1
 8008e80:	2200      	movs	r2, #0
 8008e82:	80a2      	strh	r2, [r4, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f47f af07 	bne.w	8008c98 <RUC_OTF_Exec+0x34>
 8008e8a:	e733      	b.n	8008cf4 <RUC_OTF_Exec+0x90>
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	4607      	mov	r7, r0
 8008e90:	e7d6      	b.n	8008e40 <RUC_OTF_Exec+0x1dc>
 8008e92:	bf00      	nop
 8008e94:	10624dd3 	.word	0x10624dd3

08008e98 <RUC_FirstAccelerationStageReached>:
 8008e98:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8008e9c:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
 8008ea0:	4282      	cmp	r2, r0
 8008ea2:	bf34      	ite	cc
 8008ea4:	2000      	movcc	r0, #0
 8008ea6:	2001      	movcs	r0, #1
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop

08008eac <RUC_SetPhaseDurationms>:
 8008eac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008eb0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008eb4:	818a      	strh	r2, [r1, #12]
 8008eb6:	4770      	bx	lr

08008eb8 <RUC_SetPhaseFinalMecSpeedUnit>:
 8008eb8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008ebc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008ec0:	81ca      	strh	r2, [r1, #14]
 8008ec2:	4770      	bx	lr

08008ec4 <RUC_SetPhaseFinalTorque>:
 8008ec4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008ec8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008ecc:	820a      	strh	r2, [r1, #16]
 8008ece:	4770      	bx	lr

08008ed0 <RUC_GetPhaseDurationms>:
 8008ed0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008ed4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008ed8:	8988      	ldrh	r0, [r1, #12]
 8008eda:	4770      	bx	lr

08008edc <RUC_GetPhaseFinalMecSpeedUnit>:
 8008edc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008ee0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008ee4:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop

08008eec <RUC_GetPhaseFinalTorque>:
 8008eec:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008ef0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008ef4:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop

08008efc <RUC_GetNumberOfPhases>:
 8008efc:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop

08008f04 <RUC_Get_SCLowsideOTF_Status>:
 8008f04:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop

08008f0c <STO_PLL_CalcElAngle>:
 8008f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f10:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 8008f14:	f8d0 e068 	ldr.w	lr, [r0, #104]	; 0x68
 8008f18:	4604      	mov	r4, r0
 8008f1a:	03d8      	lsls	r0, r3, #15
 8008f1c:	1ac2      	subs	r2, r0, r3
 8008f1e:	4596      	cmp	lr, r2
 8008f20:	b089      	sub	sp, #36	; 0x24
 8008f22:	f340 80c1 	ble.w	80090a8 <STO_PLL_CalcElAngle+0x19c>
 8008f26:	66a2      	str	r2, [r4, #104]	; 0x68
 8008f28:	4696      	mov	lr, r2
 8008f2a:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
 8008f2e:	f8d4 c06c 	ldr.w	ip, [r4, #108]	; 0x6c
 8008f32:	fa4e f605 	asr.w	r6, lr, r5
 8008f36:	9603      	str	r6, [sp, #12]
 8008f38:	4562      	cmp	r2, ip
 8008f3a:	b236      	sxth	r6, r6
 8008f3c:	9601      	str	r6, [sp, #4]
 8008f3e:	f280 80c8 	bge.w	80090d2 <STO_PLL_CalcElAngle+0x1c6>
 8008f42:	66e2      	str	r2, [r4, #108]	; 0x6c
 8008f44:	4694      	mov	ip, r2
 8008f46:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8008f4a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8008f4c:	03de      	lsls	r6, r3, #15
 8008f4e:	fa4c f205 	asr.w	r2, ip, r5
 8008f52:	1af5      	subs	r5, r6, r3
 8008f54:	9204      	str	r2, [sp, #16]
 8008f56:	42a8      	cmp	r0, r5
 8008f58:	b212      	sxth	r2, r2
 8008f5a:	9202      	str	r2, [sp, #8]
 8008f5c:	f340 80b3 	ble.w	80090c6 <STO_PLL_CalcElAngle+0x1ba>
 8008f60:	6625      	str	r5, [r4, #96]	; 0x60
 8008f62:	4628      	mov	r0, r5
 8008f64:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f66:	4295      	cmp	r5, r2
 8008f68:	f280 80a7 	bge.w	80090ba <STO_PLL_CalcElAngle+0x1ae>
 8008f6c:	6665      	str	r5, [r4, #100]	; 0x64
 8008f6e:	462a      	mov	r2, r5
 8008f70:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
 8008f74:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 8008f78:	890d      	ldrh	r5, [r1, #8]
 8008f7a:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
 8008f7e:	888e      	ldrh	r6, [r1, #4]
 8008f80:	f9b1 7000 	ldrsh.w	r7, [r1]
 8008f84:	f9b4 9020 	ldrsh.w	r9, [r4, #32]
 8008f88:	9901      	ldr	r1, [sp, #4]
 8008f8a:	f8a4 1070 	strh.w	r1, [r4, #112]	; 0x70
 8008f8e:	fa40 f103 	asr.w	r1, r0, r3
 8008f92:	fa42 f303 	asr.w	r3, r2, r3
 8008f96:	1b8e      	subs	r6, r1, r6
 8008f98:	fb11 f109 	smulbb	r1, r1, r9
 8008f9c:	fb13 f909 	smulbb	r9, r3, r9
 8008fa0:	eba3 030a 	sub.w	r3, r3, sl
 8008fa4:	9305      	str	r3, [sp, #20]
 8008fa6:	f9b4 b022 	ldrsh.w	fp, [r4, #34]	; 0x22
 8008faa:	9b02      	ldr	r3, [sp, #8]
 8008fac:	f9b4 a028 	ldrsh.w	sl, [r4, #40]	; 0x28
 8008fb0:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 8008fb4:	b236      	sxth	r6, r6
 8008fb6:	1a41      	subs	r1, r0, r1
 8008fb8:	fb05 f707 	mul.w	r7, r5, r7
 8008fbc:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8008fc0:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8008fc2:	eba2 0209 	sub.w	r2, r2, r9
 8008fc6:	fb0b 1106 	mla	r1, fp, r6, r1
 8008fca:	143f      	asrs	r7, r7, #16
 8008fcc:	fb0b 2b03 	mla	fp, fp, r3, r2
 8008fd0:	fb0a 1107 	mla	r1, sl, r7, r1
 8008fd4:	fb05 f508 	mul.w	r5, r5, r8
 8008fd8:	9a01      	ldr	r2, [sp, #4]
 8008fda:	9f02      	ldr	r7, [sp, #8]
 8008fdc:	f9b4 802a 	ldrsh.w	r8, [r4, #42]	; 0x2a
 8008fe0:	f9b4 9026 	ldrsh.w	r9, [r4, #38]	; 0x26
 8008fe4:	142d      	asrs	r5, r5, #16
 8008fe6:	fb0a b505 	mla	r5, sl, r5, fp
 8008fea:	4107      	asrs	r7, r0
 8008fec:	f9b4 a00e 	ldrsh.w	sl, [r4, #14]
 8008ff0:	f9b4 b024 	ldrsh.w	fp, [r4, #36]	; 0x24
 8008ff4:	fa42 f000 	asr.w	r0, r2, r0
 8008ff8:	fb06 e609 	mla	r6, r6, r9, lr
 8008ffc:	fb09 c303 	mla	r3, r9, r3, ip
 8009000:	fb07 f708 	mul.w	r7, r7, r8
 8009004:	fb00 f008 	mul.w	r0, r0, r8
 8009008:	fb07 670a 	mla	r7, r7, sl, r6
 800900c:	fb00 361a 	mls	r6, r0, sl, r3
 8009010:	9b01      	ldr	r3, [sp, #4]
 8009012:	f994 2124 	ldrsb.w	r2, [r4, #292]	; 0x124
 8009016:	fb0b 1813 	mls	r8, fp, r3, r1
 800901a:	9b02      	ldr	r3, [sp, #8]
 800901c:	fb0b 5513 	mls	r5, fp, r3, r5
 8009020:	2a00      	cmp	r2, #0
 8009022:	d147      	bne.n	80090b4 <STO_PLL_CalcElAngle+0x1a8>
 8009024:	f1ba 0f00 	cmp.w	sl, #0
 8009028:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800902c:	bfb4      	ite	lt
 800902e:	4691      	movlt	r9, r2
 8009030:	f04f 0901 	movge.w	r9, #1
 8009034:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8009038:	f7fa f9f0 	bl	800341c <MCM_Trig_Functions>
 800903c:	9b04      	ldr	r3, [sp, #16]
 800903e:	9a03      	ldr	r2, [sp, #12]
 8009040:	fb13 f309 	smulbb	r3, r3, r9
 8009044:	fb12 f109 	smulbb	r1, r2, r9
 8009048:	425b      	negs	r3, r3
 800904a:	fb10 f303 	smulbb	r3, r0, r3
 800904e:	fb10 f021 	smultb	r0, r0, r1
 8009052:	f343 33cf 	sbfx	r3, r3, #15, #16
 8009056:	f340 31cf 	sbfx	r1, r0, #15, #16
 800905a:	1a59      	subs	r1, r3, r1
 800905c:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8009060:	f7fe fe74 	bl	8007d4c <PI_Controller>
 8009064:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
 8009068:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
 800906c:	8220      	strh	r0, [r4, #16]
 800906e:	3301      	adds	r3, #1
 8009070:	b2db      	uxtb	r3, r3
 8009072:	429a      	cmp	r2, r3
 8009074:	bf0a      	itet	eq
 8009076:	2200      	moveq	r2, #0
 8009078:	461a      	movne	r2, r3
 800907a:	4613      	moveq	r3, r2
 800907c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8009080:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 8009084:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 8009088:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
 800908c:	88a2      	ldrh	r2, [r4, #4]
 800908e:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
 8009092:	4410      	add	r0, r2
 8009094:	b200      	sxth	r0, r0
 8009096:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
 800909a:	e9c4 5719 	strd	r5, r7, [r4, #100]	; 0x64
 800909e:	66e6      	str	r6, [r4, #108]	; 0x6c
 80090a0:	80a0      	strh	r0, [r4, #4]
 80090a2:	b009      	add	sp, #36	; 0x24
 80090a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a8:	1a1d      	subs	r5, r3, r0
 80090aa:	45ae      	cmp	lr, r5
 80090ac:	bfdc      	itt	le
 80090ae:	66a5      	strle	r5, [r4, #104]	; 0x68
 80090b0:	46ae      	movle	lr, r5
 80090b2:	e73a      	b.n	8008f2a <STO_PLL_CalcElAngle+0x1e>
 80090b4:	fa1f f982 	uxth.w	r9, r2
 80090b8:	e7bc      	b.n	8009034 <STO_PLL_CalcElAngle+0x128>
 80090ba:	1b9b      	subs	r3, r3, r6
 80090bc:	429a      	cmp	r2, r3
 80090be:	bfdc      	itt	le
 80090c0:	6663      	strle	r3, [r4, #100]	; 0x64
 80090c2:	461a      	movle	r2, r3
 80090c4:	e754      	b.n	8008f70 <STO_PLL_CalcElAngle+0x64>
 80090c6:	1b9a      	subs	r2, r3, r6
 80090c8:	4290      	cmp	r0, r2
 80090ca:	bfdc      	itt	le
 80090cc:	6622      	strle	r2, [r4, #96]	; 0x60
 80090ce:	4610      	movle	r0, r2
 80090d0:	e748      	b.n	8008f64 <STO_PLL_CalcElAngle+0x58>
 80090d2:	1a1b      	subs	r3, r3, r0
 80090d4:	459c      	cmp	ip, r3
 80090d6:	bfdc      	itt	le
 80090d8:	66e3      	strle	r3, [r4, #108]	; 0x6c
 80090da:	469c      	movle	ip, r3
 80090dc:	e733      	b.n	8008f46 <STO_PLL_CalcElAngle+0x3a>
 80090de:	bf00      	nop

080090e0 <STO_PLL_CalcAvrgMecSpeedUnit>:
 80090e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090e2:	f890 c10e 	ldrb.w	ip, [r0, #270]	; 0x10e
 80090e6:	f1bc 0f00 	cmp.w	ip, #0
 80090ea:	f000 8095 	beq.w	8009218 <STO_PLL_CalcAvrgMecSpeedUnit+0x138>
 80090ee:	f10c 37ff 	add.w	r7, ip, #4294967295
 80090f2:	b2fb      	uxtb	r3, r7
 80090f4:	f100 0672 	add.w	r6, r0, #114	; 0x72
 80090f8:	f100 0774 	add.w	r7, r0, #116	; 0x74
 80090fc:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8009100:	4632      	mov	r2, r6
 8009102:	2300      	movs	r3, #0
 8009104:	f932 5f02 	ldrsh.w	r5, [r2, #2]!
 8009108:	4297      	cmp	r7, r2
 800910a:	442b      	add	r3, r5
 800910c:	d1fa      	bne.n	8009104 <STO_PLL_CalcAvrgMecSpeedUnit+0x24>
 800910e:	fb93 f5fc 	sdiv	r5, r3, ip
 8009112:	2400      	movs	r4, #0
 8009114:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
 8009118:	1b5b      	subs	r3, r3, r5
 800911a:	42b2      	cmp	r2, r6
 800911c:	fb03 4403 	mla	r4, r3, r3, r4
 8009120:	d1f8      	bne.n	8009114 <STO_PLL_CalcAvrgMecSpeedUnit+0x34>
 8009122:	fb94 f4fc 	sdiv	r4, r4, ip
 8009126:	fb05 fc05 	mul.w	ip, r5, r5
 800912a:	f8b0 2110 	ldrh.w	r2, [r0, #272]	; 0x110
 800912e:	8b43      	ldrh	r3, [r0, #26]
 8009130:	7887      	ldrb	r7, [r0, #2]
 8009132:	f890 6104 	ldrb.w	r6, [r0, #260]	; 0x104
 8009136:	fb0c fc02 	mul.w	ip, ip, r2
 800913a:	ea4f 1cec 	mov.w	ip, ip, asr #7
 800913e:	fb05 f303 	mul.w	r3, r5, r3
 8009142:	45a4      	cmp	ip, r4
 8009144:	69c2      	ldr	r2, [r0, #28]
 8009146:	bfd4      	ite	le
 8009148:	2500      	movle	r5, #0
 800914a:	2501      	movgt	r5, #1
 800914c:	fb03 f307 	mul.w	r3, r3, r7
 8009150:	fb93 f3f2 	sdiv	r3, r3, r2
 8009154:	7842      	ldrb	r2, [r0, #1]
 8009156:	fb93 f3f2 	sdiv	r3, r3, r2
 800915a:	b21a      	sxth	r2, r3
 800915c:	800a      	strh	r2, [r1, #0]
 800915e:	f880 50f5 	strb.w	r5, [r0, #245]	; 0xf5
 8009162:	8182      	strh	r2, [r0, #12]
 8009164:	f890 50f8 	ldrb.w	r5, [r0, #248]	; 0xf8
 8009168:	b99e      	cbnz	r6, 8009192 <STO_PLL_CalcAvrgMecSpeedUnit+0xb2>
 800916a:	b355      	cbz	r5, 80091c2 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 800916c:	45a4      	cmp	ip, r4
 800916e:	dc25      	bgt.n	80091bc <STO_PLL_CalcAvrgMecSpeedUnit+0xdc>
 8009170:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
 8009174:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
 8009178:	3301      	adds	r3, #1
 800917a:	b2db      	uxtb	r3, r3
 800917c:	429a      	cmp	r2, r3
 800917e:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 8009182:	d81e      	bhi.n	80091c2 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 8009184:	2300      	movs	r3, #0
 8009186:	78c2      	ldrb	r2, [r0, #3]
 8009188:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 800918c:	7002      	strb	r2, [r0, #0]
 800918e:	4618      	mov	r0, r3
 8009190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009192:	2b00      	cmp	r3, #0
 8009194:	f8b0 211a 	ldrh.w	r2, [r0, #282]	; 0x11a
 8009198:	bfb8      	it	lt
 800919a:	425b      	neglt	r3, r3
 800919c:	429a      	cmp	r2, r3
 800919e:	dc14      	bgt.n	80091ca <STO_PLL_CalcAvrgMecSpeedUnit+0xea>
 80091a0:	2200      	movs	r2, #0
 80091a2:	4613      	mov	r3, r2
 80091a4:	4616      	mov	r6, r2
 80091a6:	f880 20f9 	strb.w	r2, [r0, #249]	; 0xf9
 80091aa:	f8c0 60fc 	str.w	r6, [r0, #252]	; 0xfc
 80091ae:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80091b2:	b135      	cbz	r5, 80091c2 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 80091b4:	45a4      	cmp	ip, r4
 80091b6:	dddb      	ble.n	8009170 <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 80091b8:	2a00      	cmp	r2, #0
 80091ba:	d0d9      	beq.n	8009170 <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 80091bc:	2300      	movs	r3, #0
 80091be:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 80091c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80091c6:	f7ff b8ed 	b.w	80083a4 <SPD_IsMecSpeedReliable>
 80091ca:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
 80091ce:	f9b0 e014 	ldrsh.w	lr, [r0, #20]
 80091d2:	f9b0 7070 	ldrsh.w	r7, [r0, #112]	; 0x70
 80091d6:	f9b0 6072 	ldrsh.w	r6, [r0, #114]	; 0x72
 80091da:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 80091de:	fb93 f3fe 	sdiv	r3, r3, lr
 80091e2:	fb03 f202 	mul.w	r2, r3, r2
 80091e6:	2a00      	cmp	r2, #0
 80091e8:	bfb8      	it	lt
 80091ea:	323f      	addlt	r2, #63	; 0x3f
 80091ec:	1192      	asrs	r2, r2, #6
 80091ee:	fb02 f303 	mul.w	r3, r2, r3
 80091f2:	fb07 f707 	mul.w	r7, r7, r7
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	fb06 7606 	mla	r6, r6, r6, r7
 80091fc:	461a      	mov	r2, r3
 80091fe:	f890 7118 	ldrb.w	r7, [r0, #280]	; 0x118
 8009202:	bfb8      	it	lt
 8009204:	f103 023f 	addlt.w	r2, r3, #63	; 0x3f
 8009208:	1192      	asrs	r2, r2, #6
 800920a:	fb07 3212 	mls	r2, r7, r2, r3
 800920e:	4296      	cmp	r6, r2
 8009210:	bfd4      	ite	le
 8009212:	2200      	movle	r2, #0
 8009214:	2201      	movgt	r2, #1
 8009216:	e7c6      	b.n	80091a6 <STO_PLL_CalcAvrgMecSpeedUnit+0xc6>
 8009218:	4664      	mov	r4, ip
 800921a:	4665      	mov	r5, ip
 800921c:	e785      	b.n	800912a <STO_PLL_CalcAvrgMecSpeedUnit+0x4a>
 800921e:	bf00      	nop

08009220 <STO_PLL_CalcAvrgElSpeedDpp>:
 8009220:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
 8009224:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
 8009228:	b470      	push	{r4, r5, r6}
 800922a:	f890 410e 	ldrb.w	r4, [r0, #270]	; 0x10e
 800922e:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
 8009232:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 8009236:	b2a6      	uxth	r6, r4
 8009238:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	; 0x74
 800923c:	1af3      	subs	r3, r6, r3
 800923e:	b29b      	uxth	r3, r3
 8009240:	442a      	add	r2, r5
 8009242:	b19b      	cbz	r3, 800926c <STO_PLL_CalcAvrgElSpeedDpp+0x4c>
 8009244:	440b      	add	r3, r1
 8009246:	b29b      	uxth	r3, r3
 8009248:	b219      	sxth	r1, r3
 800924a:	428c      	cmp	r4, r1
 800924c:	bfdc      	itt	le
 800924e:	1b9b      	suble	r3, r3, r6
 8009250:	b219      	sxthle	r1, r3
 8009252:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 8009256:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 800925a:	1ad3      	subs	r3, r2, r3
 800925c:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
 8009260:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8009264:	4113      	asrs	r3, r2
 8009266:	81c3      	strh	r3, [r0, #14]
 8009268:	bc70      	pop	{r4, r5, r6}
 800926a:	4770      	bx	lr
 800926c:	f9b0 310c 	ldrsh.w	r3, [r0, #268]	; 0x10c
 8009270:	1ad3      	subs	r3, r2, r3
 8009272:	e7f3      	b.n	800925c <STO_PLL_CalcAvrgElSpeedDpp+0x3c>

08009274 <STO_PLL_Clear>:
 8009274:	b510      	push	{r4, lr}
 8009276:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
 800927a:	2100      	movs	r1, #0
 800927c:	4604      	mov	r4, r0
 800927e:	e9c0 1118 	strd	r1, r1, [r0, #96]	; 0x60
 8009282:	e9c0 111a 	strd	r1, r1, [r0, #104]	; 0x68
 8009286:	8081      	strh	r1, [r0, #4]
 8009288:	81c1      	strh	r1, [r0, #14]
 800928a:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
 800928e:	f880 10f8 	strb.w	r1, [r0, #248]	; 0xf8
 8009292:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
 8009296:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
 800929a:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
 800929e:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
 80092a2:	f880 1122 	strb.w	r1, [r0, #290]	; 0x122
 80092a6:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
 80092aa:	b132      	cbz	r2, 80092ba <STO_PLL_Clear+0x46>
 80092ac:	3a01      	subs	r2, #1
 80092ae:	b2d2      	uxtb	r2, r2
 80092b0:	3201      	adds	r2, #1
 80092b2:	0052      	lsls	r2, r2, #1
 80092b4:	3074      	adds	r0, #116	; 0x74
 80092b6:	f000 f931 	bl	800951c <memset>
 80092ba:	2100      	movs	r1, #0
 80092bc:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
 80092c0:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 80092c4:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80092c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092cc:	f7fe bd32 	b.w	8007d34 <PID_SetIntegralTerm>

080092d0 <STO_PLL_Init>:
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	4604      	mov	r4, r0
 80092d4:	f9b0 502e 	ldrsh.w	r5, [r0, #46]	; 0x2e
 80092d8:	4b18      	ldr	r3, [pc, #96]	; (800933c <STO_PLL_Init+0x6c>)
 80092da:	f890 0116 	ldrb.w	r0, [r0, #278]	; 0x116
 80092de:	fb93 f3f5 	sdiv	r3, r3, r5
 80092e2:	2200      	movs	r2, #0
 80092e4:	2101      	movs	r1, #1
 80092e6:	b21b      	sxth	r3, r3
 80092e8:	f884 00f6 	strb.w	r0, [r4, #246]	; 0xf6
 80092ec:	8662      	strh	r2, [r4, #50]	; 0x32
 80092ee:	f884 1104 	strb.w	r1, [r4, #260]	; 0x104
 80092f2:	b303      	cbz	r3, 8009336 <STO_PLL_Init+0x66>
 80092f4:	4608      	mov	r0, r1
 80092f6:	e000      	b.n	80092fa <STO_PLL_Init+0x2a>
 80092f8:	4611      	mov	r1, r2
 80092fa:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80092fe:	1c4a      	adds	r2, r1, #1
 8009300:	105b      	asrs	r3, r3, #1
 8009302:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8009306:	b292      	uxth	r2, r2
 8009308:	d1f6      	bne.n	80092f8 <STO_PLL_Init+0x28>
 800930a:	b200      	sxth	r0, r0
 800930c:	fb05 f200 	mul.w	r2, r5, r0
 8009310:	8661      	strh	r1, [r4, #50]	; 0x32
 8009312:	4b0b      	ldr	r3, [pc, #44]	; (8009340 <STO_PLL_Init+0x70>)
 8009314:	8620      	strh	r0, [r4, #48]	; 0x30
 8009316:	fb83 1302 	smull	r1, r3, r3, r2
 800931a:	17d2      	asrs	r2, r2, #31
 800931c:	ebc2 2223 	rsb	r2, r2, r3, asr #8
 8009320:	8562      	strh	r2, [r4, #42]	; 0x2a
 8009322:	4620      	mov	r0, r4
 8009324:	f7ff ffa6 	bl	8009274 <STO_PLL_Clear>
 8009328:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800932c:	f7fe fcee 	bl	8007d0c <PID_HandleInit>
 8009330:	2300      	movs	r3, #0
 8009332:	8263      	strh	r3, [r4, #18]
 8009334:	bd38      	pop	{r3, r4, r5, pc}
 8009336:	462a      	mov	r2, r5
 8009338:	4608      	mov	r0, r1
 800933a:	e7ea      	b.n	8009312 <STO_PLL_Init+0x42>
 800933c:	000fea5e 	.word	0x000fea5e
 8009340:	06488dc5 	.word	0x06488dc5

08009344 <STO_PLL_IsObserverConverged>:
 8009344:	f890 2123 	ldrb.w	r2, [r0, #291]	; 0x123
 8009348:	4603      	mov	r3, r0
 800934a:	b10a      	cbz	r2, 8009350 <STO_PLL_IsObserverConverged+0xc>
 800934c:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8009350:	f893 0122 	ldrb.w	r0, [r3, #290]	; 0x122
 8009354:	2800      	cmp	r0, #0
 8009356:	d143      	bne.n	80093e0 <STO_PLL_IsObserverConverged+0x9c>
 8009358:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800935c:	b430      	push	{r4, r5}
 800935e:	fb02 f501 	mul.w	r5, r2, r1
 8009362:	2d00      	cmp	r5, #0
 8009364:	460c      	mov	r4, r1
 8009366:	dd34      	ble.n	80093d2 <STO_PLL_IsObserverConverged+0x8e>
 8009368:	2a00      	cmp	r2, #0
 800936a:	bfbc      	itt	lt
 800936c:	4252      	neglt	r2, r2
 800936e:	b212      	sxthlt	r2, r2
 8009370:	2900      	cmp	r1, #0
 8009372:	bfbc      	itt	lt
 8009374:	4249      	neglt	r1, r1
 8009376:	b20c      	sxthlt	r4, r1
 8009378:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
 800937c:	b359      	cbz	r1, 80093d6 <STO_PLL_IsObserverConverged+0x92>
 800937e:	f8b3 5114 	ldrh.w	r5, [r3, #276]	; 0x114
 8009382:	b291      	uxth	r1, r2
 8009384:	428d      	cmp	r5, r1
 8009386:	d226      	bcs.n	80093d6 <STO_PLL_IsObserverConverged+0x92>
 8009388:	f893 1113 	ldrb.w	r1, [r3, #275]	; 0x113
 800938c:	fb04 f101 	mul.w	r1, r4, r1
 8009390:	2900      	cmp	r1, #0
 8009392:	bfb8      	it	lt
 8009394:	310f      	addlt	r1, #15
 8009396:	f341 110f 	sbfx	r1, r1, #4, #16
 800939a:	428a      	cmp	r2, r1
 800939c:	db1b      	blt.n	80093d6 <STO_PLL_IsObserverConverged+0x92>
 800939e:	f893 1112 	ldrb.w	r1, [r3, #274]	; 0x112
 80093a2:	fb04 f101 	mul.w	r1, r4, r1
 80093a6:	2900      	cmp	r1, #0
 80093a8:	bfb8      	it	lt
 80093aa:	310f      	addlt	r1, #15
 80093ac:	f341 110f 	sbfx	r1, r1, #4, #16
 80093b0:	428a      	cmp	r2, r1
 80093b2:	dc10      	bgt.n	80093d6 <STO_PLL_IsObserverConverged+0x92>
 80093b4:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
 80093b8:	f893 1116 	ldrb.w	r1, [r3, #278]	; 0x116
 80093bc:	3201      	adds	r2, #1
 80093be:	b2d2      	uxtb	r2, r2
 80093c0:	4291      	cmp	r1, r2
 80093c2:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 80093c6:	d804      	bhi.n	80093d2 <STO_PLL_IsObserverConverged+0x8e>
 80093c8:	2001      	movs	r0, #1
 80093ca:	2200      	movs	r2, #0
 80093cc:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 80093d0:	701a      	strb	r2, [r3, #0]
 80093d2:	bc30      	pop	{r4, r5}
 80093d4:	4770      	bx	lr
 80093d6:	2200      	movs	r2, #0
 80093d8:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 80093dc:	bc30      	pop	{r4, r5}
 80093de:	4770      	bx	lr
 80093e0:	2001      	movs	r0, #1
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 80093e8:	701a      	strb	r2, [r3, #0]
 80093ea:	4770      	bx	lr

080093ec <STO_PLL_GetEstimatedBemf>:
 80093ec:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80093ee:	2000      	movs	r0, #0
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	f362 000f 	bfi	r0, r2, #0, #16
 80093f6:	0c1b      	lsrs	r3, r3, #16
 80093f8:	b082      	sub	sp, #8
 80093fa:	f363 401f 	bfi	r0, r3, #16, #16
 80093fe:	b002      	add	sp, #8
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop

08009404 <STO_PLL_GetEstimatedCurrent>:
 8009404:	e9d0 2318 	ldrd	r2, r3, [r0, #96]	; 0x60
 8009408:	b410      	push	{r4}
 800940a:	f8b0 411c 	ldrh.w	r4, [r0, #284]	; 0x11c
 800940e:	4122      	asrs	r2, r4
 8009410:	b292      	uxth	r2, r2
 8009412:	4123      	asrs	r3, r4
 8009414:	2100      	movs	r1, #0
 8009416:	b29b      	uxth	r3, r3
 8009418:	f362 010f 	bfi	r1, r2, #0, #16
 800941c:	f363 411f 	bfi	r1, r3, #16, #16
 8009420:	b083      	sub	sp, #12
 8009422:	4608      	mov	r0, r1
 8009424:	b003      	add	sp, #12
 8009426:	f85d 4b04 	ldr.w	r4, [sp], #4
 800942a:	4770      	bx	lr

0800942c <STO_PLL_GetObserverGains>:
 800942c:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8009430:	800b      	strh	r3, [r1, #0]
 8009432:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 8009436:	8013      	strh	r3, [r2, #0]
 8009438:	4770      	bx	lr
 800943a:	bf00      	nop

0800943c <STO_PLL_SetObserverGains>:
 800943c:	8441      	strh	r1, [r0, #34]	; 0x22
 800943e:	84c2      	strh	r2, [r0, #38]	; 0x26
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop

08009444 <STO_GetPLLGains>:
 8009444:	b570      	push	{r4, r5, r6, lr}
 8009446:	f100 0434 	add.w	r4, r0, #52	; 0x34
 800944a:	4620      	mov	r0, r4
 800944c:	460e      	mov	r6, r1
 800944e:	4615      	mov	r5, r2
 8009450:	f7fe fc68 	bl	8007d24 <PID_GetKP>
 8009454:	8030      	strh	r0, [r6, #0]
 8009456:	4620      	mov	r0, r4
 8009458:	f7fe fc68 	bl	8007d2c <PID_GetKI>
 800945c:	8028      	strh	r0, [r5, #0]
 800945e:	bd70      	pop	{r4, r5, r6, pc}

08009460 <STO_SetPLLGains>:
 8009460:	b538      	push	{r3, r4, r5, lr}
 8009462:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8009466:	4615      	mov	r5, r2
 8009468:	4620      	mov	r0, r4
 800946a:	f7fe fc57 	bl	8007d1c <PID_SetKP>
 800946e:	4629      	mov	r1, r5
 8009470:	4620      	mov	r0, r4
 8009472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009476:	f7fe bc53 	b.w	8007d20 <PID_SetKI>
 800947a:	bf00      	nop

0800947c <STO_OTF_ResetPLL>:
 800947c:	6800      	ldr	r0, [r0, #0]
 800947e:	2100      	movs	r1, #0
 8009480:	3034      	adds	r0, #52	; 0x34
 8009482:	f7fe bc57 	b.w	8007d34 <PID_SetIntegralTerm>
 8009486:	bf00      	nop

08009488 <STO_ResetPLL>:
 8009488:	3034      	adds	r0, #52	; 0x34
 800948a:	2100      	movs	r1, #0
 800948c:	f7fe bc52 	b.w	8007d34 <PID_SetIntegralTerm>

08009490 <STO_PLL_GetEstimatedBemfLevel>:
 8009490:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop

08009498 <STO_PLL_GetObservedBemfLevel>:
 8009498:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop

080094a0 <STO_PLL_IsVarianceTight>:
 80094a0:	6803      	ldr	r3, [r0, #0]
 80094a2:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
 80094a6:	4770      	bx	lr

080094a8 <STO_PLL_ForceConvergency1>:
 80094a8:	6803      	ldr	r3, [r0, #0]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop

080094b4 <STO_PLL_ForceConvergency2>:
 80094b4:	6803      	ldr	r3, [r0, #0]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop

080094c0 <STO_SetDirection>:
 80094c0:	f880 1124 	strb.w	r1, [r0, #292]	; 0x124
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop

080094c8 <__errno>:
 80094c8:	4b01      	ldr	r3, [pc, #4]	; (80094d0 <__errno+0x8>)
 80094ca:	6818      	ldr	r0, [r3, #0]
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	200006d8 	.word	0x200006d8

080094d4 <__libc_init_array>:
 80094d4:	b570      	push	{r4, r5, r6, lr}
 80094d6:	4d0d      	ldr	r5, [pc, #52]	; (800950c <__libc_init_array+0x38>)
 80094d8:	4c0d      	ldr	r4, [pc, #52]	; (8009510 <__libc_init_array+0x3c>)
 80094da:	1b64      	subs	r4, r4, r5
 80094dc:	10a4      	asrs	r4, r4, #2
 80094de:	2600      	movs	r6, #0
 80094e0:	42a6      	cmp	r6, r4
 80094e2:	d109      	bne.n	80094f8 <__libc_init_array+0x24>
 80094e4:	4d0b      	ldr	r5, [pc, #44]	; (8009514 <__libc_init_array+0x40>)
 80094e6:	4c0c      	ldr	r4, [pc, #48]	; (8009518 <__libc_init_array+0x44>)
 80094e8:	f000 fe5a 	bl	800a1a0 <_init>
 80094ec:	1b64      	subs	r4, r4, r5
 80094ee:	10a4      	asrs	r4, r4, #2
 80094f0:	2600      	movs	r6, #0
 80094f2:	42a6      	cmp	r6, r4
 80094f4:	d105      	bne.n	8009502 <__libc_init_array+0x2e>
 80094f6:	bd70      	pop	{r4, r5, r6, pc}
 80094f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80094fc:	4798      	blx	r3
 80094fe:	3601      	adds	r6, #1
 8009500:	e7ee      	b.n	80094e0 <__libc_init_array+0xc>
 8009502:	f855 3b04 	ldr.w	r3, [r5], #4
 8009506:	4798      	blx	r3
 8009508:	3601      	adds	r6, #1
 800950a:	e7f2      	b.n	80094f2 <__libc_init_array+0x1e>
 800950c:	0800a6f4 	.word	0x0800a6f4
 8009510:	0800a6f4 	.word	0x0800a6f4
 8009514:	0800a6f4 	.word	0x0800a6f4
 8009518:	0800a6f8 	.word	0x0800a6f8

0800951c <memset>:
 800951c:	4402      	add	r2, r0
 800951e:	4603      	mov	r3, r0
 8009520:	4293      	cmp	r3, r2
 8009522:	d100      	bne.n	8009526 <memset+0xa>
 8009524:	4770      	bx	lr
 8009526:	f803 1b01 	strb.w	r1, [r3], #1
 800952a:	e7f9      	b.n	8009520 <memset+0x4>

0800952c <siprintf>:
 800952c:	b40e      	push	{r1, r2, r3}
 800952e:	b500      	push	{lr}
 8009530:	b09c      	sub	sp, #112	; 0x70
 8009532:	ab1d      	add	r3, sp, #116	; 0x74
 8009534:	9002      	str	r0, [sp, #8]
 8009536:	9006      	str	r0, [sp, #24]
 8009538:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800953c:	4809      	ldr	r0, [pc, #36]	; (8009564 <siprintf+0x38>)
 800953e:	9107      	str	r1, [sp, #28]
 8009540:	9104      	str	r1, [sp, #16]
 8009542:	4909      	ldr	r1, [pc, #36]	; (8009568 <siprintf+0x3c>)
 8009544:	f853 2b04 	ldr.w	r2, [r3], #4
 8009548:	9105      	str	r1, [sp, #20]
 800954a:	6800      	ldr	r0, [r0, #0]
 800954c:	9301      	str	r3, [sp, #4]
 800954e:	a902      	add	r1, sp, #8
 8009550:	f000 f868 	bl	8009624 <_svfiprintf_r>
 8009554:	9b02      	ldr	r3, [sp, #8]
 8009556:	2200      	movs	r2, #0
 8009558:	701a      	strb	r2, [r3, #0]
 800955a:	b01c      	add	sp, #112	; 0x70
 800955c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009560:	b003      	add	sp, #12
 8009562:	4770      	bx	lr
 8009564:	200006d8 	.word	0x200006d8
 8009568:	ffff0208 	.word	0xffff0208

0800956c <__ssputs_r>:
 800956c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009570:	688e      	ldr	r6, [r1, #8]
 8009572:	429e      	cmp	r6, r3
 8009574:	4682      	mov	sl, r0
 8009576:	460c      	mov	r4, r1
 8009578:	4690      	mov	r8, r2
 800957a:	461f      	mov	r7, r3
 800957c:	d838      	bhi.n	80095f0 <__ssputs_r+0x84>
 800957e:	898a      	ldrh	r2, [r1, #12]
 8009580:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009584:	d032      	beq.n	80095ec <__ssputs_r+0x80>
 8009586:	6825      	ldr	r5, [r4, #0]
 8009588:	6909      	ldr	r1, [r1, #16]
 800958a:	eba5 0901 	sub.w	r9, r5, r1
 800958e:	6965      	ldr	r5, [r4, #20]
 8009590:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009594:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009598:	3301      	adds	r3, #1
 800959a:	444b      	add	r3, r9
 800959c:	106d      	asrs	r5, r5, #1
 800959e:	429d      	cmp	r5, r3
 80095a0:	bf38      	it	cc
 80095a2:	461d      	movcc	r5, r3
 80095a4:	0553      	lsls	r3, r2, #21
 80095a6:	d531      	bpl.n	800960c <__ssputs_r+0xa0>
 80095a8:	4629      	mov	r1, r5
 80095aa:	f000 fb47 	bl	8009c3c <_malloc_r>
 80095ae:	4606      	mov	r6, r0
 80095b0:	b950      	cbnz	r0, 80095c8 <__ssputs_r+0x5c>
 80095b2:	230c      	movs	r3, #12
 80095b4:	f8ca 3000 	str.w	r3, [sl]
 80095b8:	89a3      	ldrh	r3, [r4, #12]
 80095ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095be:	81a3      	strh	r3, [r4, #12]
 80095c0:	f04f 30ff 	mov.w	r0, #4294967295
 80095c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095c8:	6921      	ldr	r1, [r4, #16]
 80095ca:	464a      	mov	r2, r9
 80095cc:	f000 fabe 	bl	8009b4c <memcpy>
 80095d0:	89a3      	ldrh	r3, [r4, #12]
 80095d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80095d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095da:	81a3      	strh	r3, [r4, #12]
 80095dc:	6126      	str	r6, [r4, #16]
 80095de:	6165      	str	r5, [r4, #20]
 80095e0:	444e      	add	r6, r9
 80095e2:	eba5 0509 	sub.w	r5, r5, r9
 80095e6:	6026      	str	r6, [r4, #0]
 80095e8:	60a5      	str	r5, [r4, #8]
 80095ea:	463e      	mov	r6, r7
 80095ec:	42be      	cmp	r6, r7
 80095ee:	d900      	bls.n	80095f2 <__ssputs_r+0x86>
 80095f0:	463e      	mov	r6, r7
 80095f2:	4632      	mov	r2, r6
 80095f4:	6820      	ldr	r0, [r4, #0]
 80095f6:	4641      	mov	r1, r8
 80095f8:	f000 fab6 	bl	8009b68 <memmove>
 80095fc:	68a3      	ldr	r3, [r4, #8]
 80095fe:	6822      	ldr	r2, [r4, #0]
 8009600:	1b9b      	subs	r3, r3, r6
 8009602:	4432      	add	r2, r6
 8009604:	60a3      	str	r3, [r4, #8]
 8009606:	6022      	str	r2, [r4, #0]
 8009608:	2000      	movs	r0, #0
 800960a:	e7db      	b.n	80095c4 <__ssputs_r+0x58>
 800960c:	462a      	mov	r2, r5
 800960e:	f000 fb6f 	bl	8009cf0 <_realloc_r>
 8009612:	4606      	mov	r6, r0
 8009614:	2800      	cmp	r0, #0
 8009616:	d1e1      	bne.n	80095dc <__ssputs_r+0x70>
 8009618:	6921      	ldr	r1, [r4, #16]
 800961a:	4650      	mov	r0, sl
 800961c:	f000 fabe 	bl	8009b9c <_free_r>
 8009620:	e7c7      	b.n	80095b2 <__ssputs_r+0x46>
	...

08009624 <_svfiprintf_r>:
 8009624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009628:	4698      	mov	r8, r3
 800962a:	898b      	ldrh	r3, [r1, #12]
 800962c:	061b      	lsls	r3, r3, #24
 800962e:	b09d      	sub	sp, #116	; 0x74
 8009630:	4607      	mov	r7, r0
 8009632:	460d      	mov	r5, r1
 8009634:	4614      	mov	r4, r2
 8009636:	d50e      	bpl.n	8009656 <_svfiprintf_r+0x32>
 8009638:	690b      	ldr	r3, [r1, #16]
 800963a:	b963      	cbnz	r3, 8009656 <_svfiprintf_r+0x32>
 800963c:	2140      	movs	r1, #64	; 0x40
 800963e:	f000 fafd 	bl	8009c3c <_malloc_r>
 8009642:	6028      	str	r0, [r5, #0]
 8009644:	6128      	str	r0, [r5, #16]
 8009646:	b920      	cbnz	r0, 8009652 <_svfiprintf_r+0x2e>
 8009648:	230c      	movs	r3, #12
 800964a:	603b      	str	r3, [r7, #0]
 800964c:	f04f 30ff 	mov.w	r0, #4294967295
 8009650:	e0d1      	b.n	80097f6 <_svfiprintf_r+0x1d2>
 8009652:	2340      	movs	r3, #64	; 0x40
 8009654:	616b      	str	r3, [r5, #20]
 8009656:	2300      	movs	r3, #0
 8009658:	9309      	str	r3, [sp, #36]	; 0x24
 800965a:	2320      	movs	r3, #32
 800965c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009660:	f8cd 800c 	str.w	r8, [sp, #12]
 8009664:	2330      	movs	r3, #48	; 0x30
 8009666:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009810 <_svfiprintf_r+0x1ec>
 800966a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800966e:	f04f 0901 	mov.w	r9, #1
 8009672:	4623      	mov	r3, r4
 8009674:	469a      	mov	sl, r3
 8009676:	f813 2b01 	ldrb.w	r2, [r3], #1
 800967a:	b10a      	cbz	r2, 8009680 <_svfiprintf_r+0x5c>
 800967c:	2a25      	cmp	r2, #37	; 0x25
 800967e:	d1f9      	bne.n	8009674 <_svfiprintf_r+0x50>
 8009680:	ebba 0b04 	subs.w	fp, sl, r4
 8009684:	d00b      	beq.n	800969e <_svfiprintf_r+0x7a>
 8009686:	465b      	mov	r3, fp
 8009688:	4622      	mov	r2, r4
 800968a:	4629      	mov	r1, r5
 800968c:	4638      	mov	r0, r7
 800968e:	f7ff ff6d 	bl	800956c <__ssputs_r>
 8009692:	3001      	adds	r0, #1
 8009694:	f000 80aa 	beq.w	80097ec <_svfiprintf_r+0x1c8>
 8009698:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800969a:	445a      	add	r2, fp
 800969c:	9209      	str	r2, [sp, #36]	; 0x24
 800969e:	f89a 3000 	ldrb.w	r3, [sl]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	f000 80a2 	beq.w	80097ec <_svfiprintf_r+0x1c8>
 80096a8:	2300      	movs	r3, #0
 80096aa:	f04f 32ff 	mov.w	r2, #4294967295
 80096ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096b2:	f10a 0a01 	add.w	sl, sl, #1
 80096b6:	9304      	str	r3, [sp, #16]
 80096b8:	9307      	str	r3, [sp, #28]
 80096ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096be:	931a      	str	r3, [sp, #104]	; 0x68
 80096c0:	4654      	mov	r4, sl
 80096c2:	2205      	movs	r2, #5
 80096c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096c8:	4851      	ldr	r0, [pc, #324]	; (8009810 <_svfiprintf_r+0x1ec>)
 80096ca:	f7f6 fda9 	bl	8000220 <memchr>
 80096ce:	9a04      	ldr	r2, [sp, #16]
 80096d0:	b9d8      	cbnz	r0, 800970a <_svfiprintf_r+0xe6>
 80096d2:	06d0      	lsls	r0, r2, #27
 80096d4:	bf44      	itt	mi
 80096d6:	2320      	movmi	r3, #32
 80096d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096dc:	0711      	lsls	r1, r2, #28
 80096de:	bf44      	itt	mi
 80096e0:	232b      	movmi	r3, #43	; 0x2b
 80096e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096e6:	f89a 3000 	ldrb.w	r3, [sl]
 80096ea:	2b2a      	cmp	r3, #42	; 0x2a
 80096ec:	d015      	beq.n	800971a <_svfiprintf_r+0xf6>
 80096ee:	9a07      	ldr	r2, [sp, #28]
 80096f0:	4654      	mov	r4, sl
 80096f2:	2000      	movs	r0, #0
 80096f4:	f04f 0c0a 	mov.w	ip, #10
 80096f8:	4621      	mov	r1, r4
 80096fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096fe:	3b30      	subs	r3, #48	; 0x30
 8009700:	2b09      	cmp	r3, #9
 8009702:	d94e      	bls.n	80097a2 <_svfiprintf_r+0x17e>
 8009704:	b1b0      	cbz	r0, 8009734 <_svfiprintf_r+0x110>
 8009706:	9207      	str	r2, [sp, #28]
 8009708:	e014      	b.n	8009734 <_svfiprintf_r+0x110>
 800970a:	eba0 0308 	sub.w	r3, r0, r8
 800970e:	fa09 f303 	lsl.w	r3, r9, r3
 8009712:	4313      	orrs	r3, r2
 8009714:	9304      	str	r3, [sp, #16]
 8009716:	46a2      	mov	sl, r4
 8009718:	e7d2      	b.n	80096c0 <_svfiprintf_r+0x9c>
 800971a:	9b03      	ldr	r3, [sp, #12]
 800971c:	1d19      	adds	r1, r3, #4
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	9103      	str	r1, [sp, #12]
 8009722:	2b00      	cmp	r3, #0
 8009724:	bfbb      	ittet	lt
 8009726:	425b      	neglt	r3, r3
 8009728:	f042 0202 	orrlt.w	r2, r2, #2
 800972c:	9307      	strge	r3, [sp, #28]
 800972e:	9307      	strlt	r3, [sp, #28]
 8009730:	bfb8      	it	lt
 8009732:	9204      	strlt	r2, [sp, #16]
 8009734:	7823      	ldrb	r3, [r4, #0]
 8009736:	2b2e      	cmp	r3, #46	; 0x2e
 8009738:	d10c      	bne.n	8009754 <_svfiprintf_r+0x130>
 800973a:	7863      	ldrb	r3, [r4, #1]
 800973c:	2b2a      	cmp	r3, #42	; 0x2a
 800973e:	d135      	bne.n	80097ac <_svfiprintf_r+0x188>
 8009740:	9b03      	ldr	r3, [sp, #12]
 8009742:	1d1a      	adds	r2, r3, #4
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	9203      	str	r2, [sp, #12]
 8009748:	2b00      	cmp	r3, #0
 800974a:	bfb8      	it	lt
 800974c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009750:	3402      	adds	r4, #2
 8009752:	9305      	str	r3, [sp, #20]
 8009754:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009820 <_svfiprintf_r+0x1fc>
 8009758:	7821      	ldrb	r1, [r4, #0]
 800975a:	2203      	movs	r2, #3
 800975c:	4650      	mov	r0, sl
 800975e:	f7f6 fd5f 	bl	8000220 <memchr>
 8009762:	b140      	cbz	r0, 8009776 <_svfiprintf_r+0x152>
 8009764:	2340      	movs	r3, #64	; 0x40
 8009766:	eba0 000a 	sub.w	r0, r0, sl
 800976a:	fa03 f000 	lsl.w	r0, r3, r0
 800976e:	9b04      	ldr	r3, [sp, #16]
 8009770:	4303      	orrs	r3, r0
 8009772:	3401      	adds	r4, #1
 8009774:	9304      	str	r3, [sp, #16]
 8009776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800977a:	4826      	ldr	r0, [pc, #152]	; (8009814 <_svfiprintf_r+0x1f0>)
 800977c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009780:	2206      	movs	r2, #6
 8009782:	f7f6 fd4d 	bl	8000220 <memchr>
 8009786:	2800      	cmp	r0, #0
 8009788:	d038      	beq.n	80097fc <_svfiprintf_r+0x1d8>
 800978a:	4b23      	ldr	r3, [pc, #140]	; (8009818 <_svfiprintf_r+0x1f4>)
 800978c:	bb1b      	cbnz	r3, 80097d6 <_svfiprintf_r+0x1b2>
 800978e:	9b03      	ldr	r3, [sp, #12]
 8009790:	3307      	adds	r3, #7
 8009792:	f023 0307 	bic.w	r3, r3, #7
 8009796:	3308      	adds	r3, #8
 8009798:	9303      	str	r3, [sp, #12]
 800979a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800979c:	4433      	add	r3, r6
 800979e:	9309      	str	r3, [sp, #36]	; 0x24
 80097a0:	e767      	b.n	8009672 <_svfiprintf_r+0x4e>
 80097a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80097a6:	460c      	mov	r4, r1
 80097a8:	2001      	movs	r0, #1
 80097aa:	e7a5      	b.n	80096f8 <_svfiprintf_r+0xd4>
 80097ac:	2300      	movs	r3, #0
 80097ae:	3401      	adds	r4, #1
 80097b0:	9305      	str	r3, [sp, #20]
 80097b2:	4619      	mov	r1, r3
 80097b4:	f04f 0c0a 	mov.w	ip, #10
 80097b8:	4620      	mov	r0, r4
 80097ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097be:	3a30      	subs	r2, #48	; 0x30
 80097c0:	2a09      	cmp	r2, #9
 80097c2:	d903      	bls.n	80097cc <_svfiprintf_r+0x1a8>
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d0c5      	beq.n	8009754 <_svfiprintf_r+0x130>
 80097c8:	9105      	str	r1, [sp, #20]
 80097ca:	e7c3      	b.n	8009754 <_svfiprintf_r+0x130>
 80097cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80097d0:	4604      	mov	r4, r0
 80097d2:	2301      	movs	r3, #1
 80097d4:	e7f0      	b.n	80097b8 <_svfiprintf_r+0x194>
 80097d6:	ab03      	add	r3, sp, #12
 80097d8:	9300      	str	r3, [sp, #0]
 80097da:	462a      	mov	r2, r5
 80097dc:	4b0f      	ldr	r3, [pc, #60]	; (800981c <_svfiprintf_r+0x1f8>)
 80097de:	a904      	add	r1, sp, #16
 80097e0:	4638      	mov	r0, r7
 80097e2:	f3af 8000 	nop.w
 80097e6:	1c42      	adds	r2, r0, #1
 80097e8:	4606      	mov	r6, r0
 80097ea:	d1d6      	bne.n	800979a <_svfiprintf_r+0x176>
 80097ec:	89ab      	ldrh	r3, [r5, #12]
 80097ee:	065b      	lsls	r3, r3, #25
 80097f0:	f53f af2c 	bmi.w	800964c <_svfiprintf_r+0x28>
 80097f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097f6:	b01d      	add	sp, #116	; 0x74
 80097f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097fc:	ab03      	add	r3, sp, #12
 80097fe:	9300      	str	r3, [sp, #0]
 8009800:	462a      	mov	r2, r5
 8009802:	4b06      	ldr	r3, [pc, #24]	; (800981c <_svfiprintf_r+0x1f8>)
 8009804:	a904      	add	r1, sp, #16
 8009806:	4638      	mov	r0, r7
 8009808:	f000 f87a 	bl	8009900 <_printf_i>
 800980c:	e7eb      	b.n	80097e6 <_svfiprintf_r+0x1c2>
 800980e:	bf00      	nop
 8009810:	0800a6b6 	.word	0x0800a6b6
 8009814:	0800a6c0 	.word	0x0800a6c0
 8009818:	00000000 	.word	0x00000000
 800981c:	0800956d 	.word	0x0800956d
 8009820:	0800a6bc 	.word	0x0800a6bc

08009824 <_printf_common>:
 8009824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009828:	4616      	mov	r6, r2
 800982a:	4699      	mov	r9, r3
 800982c:	688a      	ldr	r2, [r1, #8]
 800982e:	690b      	ldr	r3, [r1, #16]
 8009830:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009834:	4293      	cmp	r3, r2
 8009836:	bfb8      	it	lt
 8009838:	4613      	movlt	r3, r2
 800983a:	6033      	str	r3, [r6, #0]
 800983c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009840:	4607      	mov	r7, r0
 8009842:	460c      	mov	r4, r1
 8009844:	b10a      	cbz	r2, 800984a <_printf_common+0x26>
 8009846:	3301      	adds	r3, #1
 8009848:	6033      	str	r3, [r6, #0]
 800984a:	6823      	ldr	r3, [r4, #0]
 800984c:	0699      	lsls	r1, r3, #26
 800984e:	bf42      	ittt	mi
 8009850:	6833      	ldrmi	r3, [r6, #0]
 8009852:	3302      	addmi	r3, #2
 8009854:	6033      	strmi	r3, [r6, #0]
 8009856:	6825      	ldr	r5, [r4, #0]
 8009858:	f015 0506 	ands.w	r5, r5, #6
 800985c:	d106      	bne.n	800986c <_printf_common+0x48>
 800985e:	f104 0a19 	add.w	sl, r4, #25
 8009862:	68e3      	ldr	r3, [r4, #12]
 8009864:	6832      	ldr	r2, [r6, #0]
 8009866:	1a9b      	subs	r3, r3, r2
 8009868:	42ab      	cmp	r3, r5
 800986a:	dc26      	bgt.n	80098ba <_printf_common+0x96>
 800986c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009870:	1e13      	subs	r3, r2, #0
 8009872:	6822      	ldr	r2, [r4, #0]
 8009874:	bf18      	it	ne
 8009876:	2301      	movne	r3, #1
 8009878:	0692      	lsls	r2, r2, #26
 800987a:	d42b      	bmi.n	80098d4 <_printf_common+0xb0>
 800987c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009880:	4649      	mov	r1, r9
 8009882:	4638      	mov	r0, r7
 8009884:	47c0      	blx	r8
 8009886:	3001      	adds	r0, #1
 8009888:	d01e      	beq.n	80098c8 <_printf_common+0xa4>
 800988a:	6823      	ldr	r3, [r4, #0]
 800988c:	68e5      	ldr	r5, [r4, #12]
 800988e:	6832      	ldr	r2, [r6, #0]
 8009890:	f003 0306 	and.w	r3, r3, #6
 8009894:	2b04      	cmp	r3, #4
 8009896:	bf08      	it	eq
 8009898:	1aad      	subeq	r5, r5, r2
 800989a:	68a3      	ldr	r3, [r4, #8]
 800989c:	6922      	ldr	r2, [r4, #16]
 800989e:	bf0c      	ite	eq
 80098a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098a4:	2500      	movne	r5, #0
 80098a6:	4293      	cmp	r3, r2
 80098a8:	bfc4      	itt	gt
 80098aa:	1a9b      	subgt	r3, r3, r2
 80098ac:	18ed      	addgt	r5, r5, r3
 80098ae:	2600      	movs	r6, #0
 80098b0:	341a      	adds	r4, #26
 80098b2:	42b5      	cmp	r5, r6
 80098b4:	d11a      	bne.n	80098ec <_printf_common+0xc8>
 80098b6:	2000      	movs	r0, #0
 80098b8:	e008      	b.n	80098cc <_printf_common+0xa8>
 80098ba:	2301      	movs	r3, #1
 80098bc:	4652      	mov	r2, sl
 80098be:	4649      	mov	r1, r9
 80098c0:	4638      	mov	r0, r7
 80098c2:	47c0      	blx	r8
 80098c4:	3001      	adds	r0, #1
 80098c6:	d103      	bne.n	80098d0 <_printf_common+0xac>
 80098c8:	f04f 30ff 	mov.w	r0, #4294967295
 80098cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098d0:	3501      	adds	r5, #1
 80098d2:	e7c6      	b.n	8009862 <_printf_common+0x3e>
 80098d4:	18e1      	adds	r1, r4, r3
 80098d6:	1c5a      	adds	r2, r3, #1
 80098d8:	2030      	movs	r0, #48	; 0x30
 80098da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80098de:	4422      	add	r2, r4
 80098e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80098e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80098e8:	3302      	adds	r3, #2
 80098ea:	e7c7      	b.n	800987c <_printf_common+0x58>
 80098ec:	2301      	movs	r3, #1
 80098ee:	4622      	mov	r2, r4
 80098f0:	4649      	mov	r1, r9
 80098f2:	4638      	mov	r0, r7
 80098f4:	47c0      	blx	r8
 80098f6:	3001      	adds	r0, #1
 80098f8:	d0e6      	beq.n	80098c8 <_printf_common+0xa4>
 80098fa:	3601      	adds	r6, #1
 80098fc:	e7d9      	b.n	80098b2 <_printf_common+0x8e>
	...

08009900 <_printf_i>:
 8009900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009904:	460c      	mov	r4, r1
 8009906:	4691      	mov	r9, r2
 8009908:	7e27      	ldrb	r7, [r4, #24]
 800990a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800990c:	2f78      	cmp	r7, #120	; 0x78
 800990e:	4680      	mov	r8, r0
 8009910:	469a      	mov	sl, r3
 8009912:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009916:	d807      	bhi.n	8009928 <_printf_i+0x28>
 8009918:	2f62      	cmp	r7, #98	; 0x62
 800991a:	d80a      	bhi.n	8009932 <_printf_i+0x32>
 800991c:	2f00      	cmp	r7, #0
 800991e:	f000 80d8 	beq.w	8009ad2 <_printf_i+0x1d2>
 8009922:	2f58      	cmp	r7, #88	; 0x58
 8009924:	f000 80a3 	beq.w	8009a6e <_printf_i+0x16e>
 8009928:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800992c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009930:	e03a      	b.n	80099a8 <_printf_i+0xa8>
 8009932:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009936:	2b15      	cmp	r3, #21
 8009938:	d8f6      	bhi.n	8009928 <_printf_i+0x28>
 800993a:	a001      	add	r0, pc, #4	; (adr r0, 8009940 <_printf_i+0x40>)
 800993c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009940:	08009999 	.word	0x08009999
 8009944:	080099ad 	.word	0x080099ad
 8009948:	08009929 	.word	0x08009929
 800994c:	08009929 	.word	0x08009929
 8009950:	08009929 	.word	0x08009929
 8009954:	08009929 	.word	0x08009929
 8009958:	080099ad 	.word	0x080099ad
 800995c:	08009929 	.word	0x08009929
 8009960:	08009929 	.word	0x08009929
 8009964:	08009929 	.word	0x08009929
 8009968:	08009929 	.word	0x08009929
 800996c:	08009ab9 	.word	0x08009ab9
 8009970:	080099dd 	.word	0x080099dd
 8009974:	08009a9b 	.word	0x08009a9b
 8009978:	08009929 	.word	0x08009929
 800997c:	08009929 	.word	0x08009929
 8009980:	08009adb 	.word	0x08009adb
 8009984:	08009929 	.word	0x08009929
 8009988:	080099dd 	.word	0x080099dd
 800998c:	08009929 	.word	0x08009929
 8009990:	08009929 	.word	0x08009929
 8009994:	08009aa3 	.word	0x08009aa3
 8009998:	680b      	ldr	r3, [r1, #0]
 800999a:	1d1a      	adds	r2, r3, #4
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	600a      	str	r2, [r1, #0]
 80099a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80099a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099a8:	2301      	movs	r3, #1
 80099aa:	e0a3      	b.n	8009af4 <_printf_i+0x1f4>
 80099ac:	6825      	ldr	r5, [r4, #0]
 80099ae:	6808      	ldr	r0, [r1, #0]
 80099b0:	062e      	lsls	r6, r5, #24
 80099b2:	f100 0304 	add.w	r3, r0, #4
 80099b6:	d50a      	bpl.n	80099ce <_printf_i+0xce>
 80099b8:	6805      	ldr	r5, [r0, #0]
 80099ba:	600b      	str	r3, [r1, #0]
 80099bc:	2d00      	cmp	r5, #0
 80099be:	da03      	bge.n	80099c8 <_printf_i+0xc8>
 80099c0:	232d      	movs	r3, #45	; 0x2d
 80099c2:	426d      	negs	r5, r5
 80099c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099c8:	485e      	ldr	r0, [pc, #376]	; (8009b44 <_printf_i+0x244>)
 80099ca:	230a      	movs	r3, #10
 80099cc:	e019      	b.n	8009a02 <_printf_i+0x102>
 80099ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80099d2:	6805      	ldr	r5, [r0, #0]
 80099d4:	600b      	str	r3, [r1, #0]
 80099d6:	bf18      	it	ne
 80099d8:	b22d      	sxthne	r5, r5
 80099da:	e7ef      	b.n	80099bc <_printf_i+0xbc>
 80099dc:	680b      	ldr	r3, [r1, #0]
 80099de:	6825      	ldr	r5, [r4, #0]
 80099e0:	1d18      	adds	r0, r3, #4
 80099e2:	6008      	str	r0, [r1, #0]
 80099e4:	0628      	lsls	r0, r5, #24
 80099e6:	d501      	bpl.n	80099ec <_printf_i+0xec>
 80099e8:	681d      	ldr	r5, [r3, #0]
 80099ea:	e002      	b.n	80099f2 <_printf_i+0xf2>
 80099ec:	0669      	lsls	r1, r5, #25
 80099ee:	d5fb      	bpl.n	80099e8 <_printf_i+0xe8>
 80099f0:	881d      	ldrh	r5, [r3, #0]
 80099f2:	4854      	ldr	r0, [pc, #336]	; (8009b44 <_printf_i+0x244>)
 80099f4:	2f6f      	cmp	r7, #111	; 0x6f
 80099f6:	bf0c      	ite	eq
 80099f8:	2308      	moveq	r3, #8
 80099fa:	230a      	movne	r3, #10
 80099fc:	2100      	movs	r1, #0
 80099fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a02:	6866      	ldr	r6, [r4, #4]
 8009a04:	60a6      	str	r6, [r4, #8]
 8009a06:	2e00      	cmp	r6, #0
 8009a08:	bfa2      	ittt	ge
 8009a0a:	6821      	ldrge	r1, [r4, #0]
 8009a0c:	f021 0104 	bicge.w	r1, r1, #4
 8009a10:	6021      	strge	r1, [r4, #0]
 8009a12:	b90d      	cbnz	r5, 8009a18 <_printf_i+0x118>
 8009a14:	2e00      	cmp	r6, #0
 8009a16:	d04d      	beq.n	8009ab4 <_printf_i+0x1b4>
 8009a18:	4616      	mov	r6, r2
 8009a1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a1e:	fb03 5711 	mls	r7, r3, r1, r5
 8009a22:	5dc7      	ldrb	r7, [r0, r7]
 8009a24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a28:	462f      	mov	r7, r5
 8009a2a:	42bb      	cmp	r3, r7
 8009a2c:	460d      	mov	r5, r1
 8009a2e:	d9f4      	bls.n	8009a1a <_printf_i+0x11a>
 8009a30:	2b08      	cmp	r3, #8
 8009a32:	d10b      	bne.n	8009a4c <_printf_i+0x14c>
 8009a34:	6823      	ldr	r3, [r4, #0]
 8009a36:	07df      	lsls	r7, r3, #31
 8009a38:	d508      	bpl.n	8009a4c <_printf_i+0x14c>
 8009a3a:	6923      	ldr	r3, [r4, #16]
 8009a3c:	6861      	ldr	r1, [r4, #4]
 8009a3e:	4299      	cmp	r1, r3
 8009a40:	bfde      	ittt	le
 8009a42:	2330      	movle	r3, #48	; 0x30
 8009a44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a4c:	1b92      	subs	r2, r2, r6
 8009a4e:	6122      	str	r2, [r4, #16]
 8009a50:	f8cd a000 	str.w	sl, [sp]
 8009a54:	464b      	mov	r3, r9
 8009a56:	aa03      	add	r2, sp, #12
 8009a58:	4621      	mov	r1, r4
 8009a5a:	4640      	mov	r0, r8
 8009a5c:	f7ff fee2 	bl	8009824 <_printf_common>
 8009a60:	3001      	adds	r0, #1
 8009a62:	d14c      	bne.n	8009afe <_printf_i+0x1fe>
 8009a64:	f04f 30ff 	mov.w	r0, #4294967295
 8009a68:	b004      	add	sp, #16
 8009a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a6e:	4835      	ldr	r0, [pc, #212]	; (8009b44 <_printf_i+0x244>)
 8009a70:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009a74:	6823      	ldr	r3, [r4, #0]
 8009a76:	680e      	ldr	r6, [r1, #0]
 8009a78:	061f      	lsls	r7, r3, #24
 8009a7a:	f856 5b04 	ldr.w	r5, [r6], #4
 8009a7e:	600e      	str	r6, [r1, #0]
 8009a80:	d514      	bpl.n	8009aac <_printf_i+0x1ac>
 8009a82:	07d9      	lsls	r1, r3, #31
 8009a84:	bf44      	itt	mi
 8009a86:	f043 0320 	orrmi.w	r3, r3, #32
 8009a8a:	6023      	strmi	r3, [r4, #0]
 8009a8c:	b91d      	cbnz	r5, 8009a96 <_printf_i+0x196>
 8009a8e:	6823      	ldr	r3, [r4, #0]
 8009a90:	f023 0320 	bic.w	r3, r3, #32
 8009a94:	6023      	str	r3, [r4, #0]
 8009a96:	2310      	movs	r3, #16
 8009a98:	e7b0      	b.n	80099fc <_printf_i+0xfc>
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	f043 0320 	orr.w	r3, r3, #32
 8009aa0:	6023      	str	r3, [r4, #0]
 8009aa2:	2378      	movs	r3, #120	; 0x78
 8009aa4:	4828      	ldr	r0, [pc, #160]	; (8009b48 <_printf_i+0x248>)
 8009aa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009aaa:	e7e3      	b.n	8009a74 <_printf_i+0x174>
 8009aac:	065e      	lsls	r6, r3, #25
 8009aae:	bf48      	it	mi
 8009ab0:	b2ad      	uxthmi	r5, r5
 8009ab2:	e7e6      	b.n	8009a82 <_printf_i+0x182>
 8009ab4:	4616      	mov	r6, r2
 8009ab6:	e7bb      	b.n	8009a30 <_printf_i+0x130>
 8009ab8:	680b      	ldr	r3, [r1, #0]
 8009aba:	6826      	ldr	r6, [r4, #0]
 8009abc:	6960      	ldr	r0, [r4, #20]
 8009abe:	1d1d      	adds	r5, r3, #4
 8009ac0:	600d      	str	r5, [r1, #0]
 8009ac2:	0635      	lsls	r5, r6, #24
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	d501      	bpl.n	8009acc <_printf_i+0x1cc>
 8009ac8:	6018      	str	r0, [r3, #0]
 8009aca:	e002      	b.n	8009ad2 <_printf_i+0x1d2>
 8009acc:	0671      	lsls	r1, r6, #25
 8009ace:	d5fb      	bpl.n	8009ac8 <_printf_i+0x1c8>
 8009ad0:	8018      	strh	r0, [r3, #0]
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	6123      	str	r3, [r4, #16]
 8009ad6:	4616      	mov	r6, r2
 8009ad8:	e7ba      	b.n	8009a50 <_printf_i+0x150>
 8009ada:	680b      	ldr	r3, [r1, #0]
 8009adc:	1d1a      	adds	r2, r3, #4
 8009ade:	600a      	str	r2, [r1, #0]
 8009ae0:	681e      	ldr	r6, [r3, #0]
 8009ae2:	6862      	ldr	r2, [r4, #4]
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	4630      	mov	r0, r6
 8009ae8:	f7f6 fb9a 	bl	8000220 <memchr>
 8009aec:	b108      	cbz	r0, 8009af2 <_printf_i+0x1f2>
 8009aee:	1b80      	subs	r0, r0, r6
 8009af0:	6060      	str	r0, [r4, #4]
 8009af2:	6863      	ldr	r3, [r4, #4]
 8009af4:	6123      	str	r3, [r4, #16]
 8009af6:	2300      	movs	r3, #0
 8009af8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009afc:	e7a8      	b.n	8009a50 <_printf_i+0x150>
 8009afe:	6923      	ldr	r3, [r4, #16]
 8009b00:	4632      	mov	r2, r6
 8009b02:	4649      	mov	r1, r9
 8009b04:	4640      	mov	r0, r8
 8009b06:	47d0      	blx	sl
 8009b08:	3001      	adds	r0, #1
 8009b0a:	d0ab      	beq.n	8009a64 <_printf_i+0x164>
 8009b0c:	6823      	ldr	r3, [r4, #0]
 8009b0e:	079b      	lsls	r3, r3, #30
 8009b10:	d413      	bmi.n	8009b3a <_printf_i+0x23a>
 8009b12:	68e0      	ldr	r0, [r4, #12]
 8009b14:	9b03      	ldr	r3, [sp, #12]
 8009b16:	4298      	cmp	r0, r3
 8009b18:	bfb8      	it	lt
 8009b1a:	4618      	movlt	r0, r3
 8009b1c:	e7a4      	b.n	8009a68 <_printf_i+0x168>
 8009b1e:	2301      	movs	r3, #1
 8009b20:	4632      	mov	r2, r6
 8009b22:	4649      	mov	r1, r9
 8009b24:	4640      	mov	r0, r8
 8009b26:	47d0      	blx	sl
 8009b28:	3001      	adds	r0, #1
 8009b2a:	d09b      	beq.n	8009a64 <_printf_i+0x164>
 8009b2c:	3501      	adds	r5, #1
 8009b2e:	68e3      	ldr	r3, [r4, #12]
 8009b30:	9903      	ldr	r1, [sp, #12]
 8009b32:	1a5b      	subs	r3, r3, r1
 8009b34:	42ab      	cmp	r3, r5
 8009b36:	dcf2      	bgt.n	8009b1e <_printf_i+0x21e>
 8009b38:	e7eb      	b.n	8009b12 <_printf_i+0x212>
 8009b3a:	2500      	movs	r5, #0
 8009b3c:	f104 0619 	add.w	r6, r4, #25
 8009b40:	e7f5      	b.n	8009b2e <_printf_i+0x22e>
 8009b42:	bf00      	nop
 8009b44:	0800a6c7 	.word	0x0800a6c7
 8009b48:	0800a6d8 	.word	0x0800a6d8

08009b4c <memcpy>:
 8009b4c:	440a      	add	r2, r1
 8009b4e:	4291      	cmp	r1, r2
 8009b50:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b54:	d100      	bne.n	8009b58 <memcpy+0xc>
 8009b56:	4770      	bx	lr
 8009b58:	b510      	push	{r4, lr}
 8009b5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b62:	4291      	cmp	r1, r2
 8009b64:	d1f9      	bne.n	8009b5a <memcpy+0xe>
 8009b66:	bd10      	pop	{r4, pc}

08009b68 <memmove>:
 8009b68:	4288      	cmp	r0, r1
 8009b6a:	b510      	push	{r4, lr}
 8009b6c:	eb01 0402 	add.w	r4, r1, r2
 8009b70:	d902      	bls.n	8009b78 <memmove+0x10>
 8009b72:	4284      	cmp	r4, r0
 8009b74:	4623      	mov	r3, r4
 8009b76:	d807      	bhi.n	8009b88 <memmove+0x20>
 8009b78:	1e43      	subs	r3, r0, #1
 8009b7a:	42a1      	cmp	r1, r4
 8009b7c:	d008      	beq.n	8009b90 <memmove+0x28>
 8009b7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b86:	e7f8      	b.n	8009b7a <memmove+0x12>
 8009b88:	4402      	add	r2, r0
 8009b8a:	4601      	mov	r1, r0
 8009b8c:	428a      	cmp	r2, r1
 8009b8e:	d100      	bne.n	8009b92 <memmove+0x2a>
 8009b90:	bd10      	pop	{r4, pc}
 8009b92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b9a:	e7f7      	b.n	8009b8c <memmove+0x24>

08009b9c <_free_r>:
 8009b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b9e:	2900      	cmp	r1, #0
 8009ba0:	d048      	beq.n	8009c34 <_free_r+0x98>
 8009ba2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ba6:	9001      	str	r0, [sp, #4]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	f1a1 0404 	sub.w	r4, r1, #4
 8009bae:	bfb8      	it	lt
 8009bb0:	18e4      	addlt	r4, r4, r3
 8009bb2:	f000 f8d3 	bl	8009d5c <__malloc_lock>
 8009bb6:	4a20      	ldr	r2, [pc, #128]	; (8009c38 <_free_r+0x9c>)
 8009bb8:	9801      	ldr	r0, [sp, #4]
 8009bba:	6813      	ldr	r3, [r2, #0]
 8009bbc:	4615      	mov	r5, r2
 8009bbe:	b933      	cbnz	r3, 8009bce <_free_r+0x32>
 8009bc0:	6063      	str	r3, [r4, #4]
 8009bc2:	6014      	str	r4, [r2, #0]
 8009bc4:	b003      	add	sp, #12
 8009bc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bca:	f000 b8cd 	b.w	8009d68 <__malloc_unlock>
 8009bce:	42a3      	cmp	r3, r4
 8009bd0:	d90b      	bls.n	8009bea <_free_r+0x4e>
 8009bd2:	6821      	ldr	r1, [r4, #0]
 8009bd4:	1862      	adds	r2, r4, r1
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	bf04      	itt	eq
 8009bda:	681a      	ldreq	r2, [r3, #0]
 8009bdc:	685b      	ldreq	r3, [r3, #4]
 8009bde:	6063      	str	r3, [r4, #4]
 8009be0:	bf04      	itt	eq
 8009be2:	1852      	addeq	r2, r2, r1
 8009be4:	6022      	streq	r2, [r4, #0]
 8009be6:	602c      	str	r4, [r5, #0]
 8009be8:	e7ec      	b.n	8009bc4 <_free_r+0x28>
 8009bea:	461a      	mov	r2, r3
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	b10b      	cbz	r3, 8009bf4 <_free_r+0x58>
 8009bf0:	42a3      	cmp	r3, r4
 8009bf2:	d9fa      	bls.n	8009bea <_free_r+0x4e>
 8009bf4:	6811      	ldr	r1, [r2, #0]
 8009bf6:	1855      	adds	r5, r2, r1
 8009bf8:	42a5      	cmp	r5, r4
 8009bfa:	d10b      	bne.n	8009c14 <_free_r+0x78>
 8009bfc:	6824      	ldr	r4, [r4, #0]
 8009bfe:	4421      	add	r1, r4
 8009c00:	1854      	adds	r4, r2, r1
 8009c02:	42a3      	cmp	r3, r4
 8009c04:	6011      	str	r1, [r2, #0]
 8009c06:	d1dd      	bne.n	8009bc4 <_free_r+0x28>
 8009c08:	681c      	ldr	r4, [r3, #0]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	6053      	str	r3, [r2, #4]
 8009c0e:	4421      	add	r1, r4
 8009c10:	6011      	str	r1, [r2, #0]
 8009c12:	e7d7      	b.n	8009bc4 <_free_r+0x28>
 8009c14:	d902      	bls.n	8009c1c <_free_r+0x80>
 8009c16:	230c      	movs	r3, #12
 8009c18:	6003      	str	r3, [r0, #0]
 8009c1a:	e7d3      	b.n	8009bc4 <_free_r+0x28>
 8009c1c:	6825      	ldr	r5, [r4, #0]
 8009c1e:	1961      	adds	r1, r4, r5
 8009c20:	428b      	cmp	r3, r1
 8009c22:	bf04      	itt	eq
 8009c24:	6819      	ldreq	r1, [r3, #0]
 8009c26:	685b      	ldreq	r3, [r3, #4]
 8009c28:	6063      	str	r3, [r4, #4]
 8009c2a:	bf04      	itt	eq
 8009c2c:	1949      	addeq	r1, r1, r5
 8009c2e:	6021      	streq	r1, [r4, #0]
 8009c30:	6054      	str	r4, [r2, #4]
 8009c32:	e7c7      	b.n	8009bc4 <_free_r+0x28>
 8009c34:	b003      	add	sp, #12
 8009c36:	bd30      	pop	{r4, r5, pc}
 8009c38:	200007b0 	.word	0x200007b0

08009c3c <_malloc_r>:
 8009c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c3e:	1ccd      	adds	r5, r1, #3
 8009c40:	f025 0503 	bic.w	r5, r5, #3
 8009c44:	3508      	adds	r5, #8
 8009c46:	2d0c      	cmp	r5, #12
 8009c48:	bf38      	it	cc
 8009c4a:	250c      	movcc	r5, #12
 8009c4c:	2d00      	cmp	r5, #0
 8009c4e:	4606      	mov	r6, r0
 8009c50:	db01      	blt.n	8009c56 <_malloc_r+0x1a>
 8009c52:	42a9      	cmp	r1, r5
 8009c54:	d903      	bls.n	8009c5e <_malloc_r+0x22>
 8009c56:	230c      	movs	r3, #12
 8009c58:	6033      	str	r3, [r6, #0]
 8009c5a:	2000      	movs	r0, #0
 8009c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c5e:	f000 f87d 	bl	8009d5c <__malloc_lock>
 8009c62:	4921      	ldr	r1, [pc, #132]	; (8009ce8 <_malloc_r+0xac>)
 8009c64:	680a      	ldr	r2, [r1, #0]
 8009c66:	4614      	mov	r4, r2
 8009c68:	b99c      	cbnz	r4, 8009c92 <_malloc_r+0x56>
 8009c6a:	4f20      	ldr	r7, [pc, #128]	; (8009cec <_malloc_r+0xb0>)
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	b923      	cbnz	r3, 8009c7a <_malloc_r+0x3e>
 8009c70:	4621      	mov	r1, r4
 8009c72:	4630      	mov	r0, r6
 8009c74:	f000 f862 	bl	8009d3c <_sbrk_r>
 8009c78:	6038      	str	r0, [r7, #0]
 8009c7a:	4629      	mov	r1, r5
 8009c7c:	4630      	mov	r0, r6
 8009c7e:	f000 f85d 	bl	8009d3c <_sbrk_r>
 8009c82:	1c43      	adds	r3, r0, #1
 8009c84:	d123      	bne.n	8009cce <_malloc_r+0x92>
 8009c86:	230c      	movs	r3, #12
 8009c88:	6033      	str	r3, [r6, #0]
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	f000 f86c 	bl	8009d68 <__malloc_unlock>
 8009c90:	e7e3      	b.n	8009c5a <_malloc_r+0x1e>
 8009c92:	6823      	ldr	r3, [r4, #0]
 8009c94:	1b5b      	subs	r3, r3, r5
 8009c96:	d417      	bmi.n	8009cc8 <_malloc_r+0x8c>
 8009c98:	2b0b      	cmp	r3, #11
 8009c9a:	d903      	bls.n	8009ca4 <_malloc_r+0x68>
 8009c9c:	6023      	str	r3, [r4, #0]
 8009c9e:	441c      	add	r4, r3
 8009ca0:	6025      	str	r5, [r4, #0]
 8009ca2:	e004      	b.n	8009cae <_malloc_r+0x72>
 8009ca4:	6863      	ldr	r3, [r4, #4]
 8009ca6:	42a2      	cmp	r2, r4
 8009ca8:	bf0c      	ite	eq
 8009caa:	600b      	streq	r3, [r1, #0]
 8009cac:	6053      	strne	r3, [r2, #4]
 8009cae:	4630      	mov	r0, r6
 8009cb0:	f000 f85a 	bl	8009d68 <__malloc_unlock>
 8009cb4:	f104 000b 	add.w	r0, r4, #11
 8009cb8:	1d23      	adds	r3, r4, #4
 8009cba:	f020 0007 	bic.w	r0, r0, #7
 8009cbe:	1ac2      	subs	r2, r0, r3
 8009cc0:	d0cc      	beq.n	8009c5c <_malloc_r+0x20>
 8009cc2:	1a1b      	subs	r3, r3, r0
 8009cc4:	50a3      	str	r3, [r4, r2]
 8009cc6:	e7c9      	b.n	8009c5c <_malloc_r+0x20>
 8009cc8:	4622      	mov	r2, r4
 8009cca:	6864      	ldr	r4, [r4, #4]
 8009ccc:	e7cc      	b.n	8009c68 <_malloc_r+0x2c>
 8009cce:	1cc4      	adds	r4, r0, #3
 8009cd0:	f024 0403 	bic.w	r4, r4, #3
 8009cd4:	42a0      	cmp	r0, r4
 8009cd6:	d0e3      	beq.n	8009ca0 <_malloc_r+0x64>
 8009cd8:	1a21      	subs	r1, r4, r0
 8009cda:	4630      	mov	r0, r6
 8009cdc:	f000 f82e 	bl	8009d3c <_sbrk_r>
 8009ce0:	3001      	adds	r0, #1
 8009ce2:	d1dd      	bne.n	8009ca0 <_malloc_r+0x64>
 8009ce4:	e7cf      	b.n	8009c86 <_malloc_r+0x4a>
 8009ce6:	bf00      	nop
 8009ce8:	200007b0 	.word	0x200007b0
 8009cec:	200007b4 	.word	0x200007b4

08009cf0 <_realloc_r>:
 8009cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf2:	4607      	mov	r7, r0
 8009cf4:	4614      	mov	r4, r2
 8009cf6:	460e      	mov	r6, r1
 8009cf8:	b921      	cbnz	r1, 8009d04 <_realloc_r+0x14>
 8009cfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009cfe:	4611      	mov	r1, r2
 8009d00:	f7ff bf9c 	b.w	8009c3c <_malloc_r>
 8009d04:	b922      	cbnz	r2, 8009d10 <_realloc_r+0x20>
 8009d06:	f7ff ff49 	bl	8009b9c <_free_r>
 8009d0a:	4625      	mov	r5, r4
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d10:	f000 f830 	bl	8009d74 <_malloc_usable_size_r>
 8009d14:	42a0      	cmp	r0, r4
 8009d16:	d20f      	bcs.n	8009d38 <_realloc_r+0x48>
 8009d18:	4621      	mov	r1, r4
 8009d1a:	4638      	mov	r0, r7
 8009d1c:	f7ff ff8e 	bl	8009c3c <_malloc_r>
 8009d20:	4605      	mov	r5, r0
 8009d22:	2800      	cmp	r0, #0
 8009d24:	d0f2      	beq.n	8009d0c <_realloc_r+0x1c>
 8009d26:	4631      	mov	r1, r6
 8009d28:	4622      	mov	r2, r4
 8009d2a:	f7ff ff0f 	bl	8009b4c <memcpy>
 8009d2e:	4631      	mov	r1, r6
 8009d30:	4638      	mov	r0, r7
 8009d32:	f7ff ff33 	bl	8009b9c <_free_r>
 8009d36:	e7e9      	b.n	8009d0c <_realloc_r+0x1c>
 8009d38:	4635      	mov	r5, r6
 8009d3a:	e7e7      	b.n	8009d0c <_realloc_r+0x1c>

08009d3c <_sbrk_r>:
 8009d3c:	b538      	push	{r3, r4, r5, lr}
 8009d3e:	4d06      	ldr	r5, [pc, #24]	; (8009d58 <_sbrk_r+0x1c>)
 8009d40:	2300      	movs	r3, #0
 8009d42:	4604      	mov	r4, r0
 8009d44:	4608      	mov	r0, r1
 8009d46:	602b      	str	r3, [r5, #0]
 8009d48:	f7fb f874 	bl	8004e34 <_sbrk>
 8009d4c:	1c43      	adds	r3, r0, #1
 8009d4e:	d102      	bne.n	8009d56 <_sbrk_r+0x1a>
 8009d50:	682b      	ldr	r3, [r5, #0]
 8009d52:	b103      	cbz	r3, 8009d56 <_sbrk_r+0x1a>
 8009d54:	6023      	str	r3, [r4, #0]
 8009d56:	bd38      	pop	{r3, r4, r5, pc}
 8009d58:	20000d9c 	.word	0x20000d9c

08009d5c <__malloc_lock>:
 8009d5c:	4801      	ldr	r0, [pc, #4]	; (8009d64 <__malloc_lock+0x8>)
 8009d5e:	f000 b811 	b.w	8009d84 <__retarget_lock_acquire_recursive>
 8009d62:	bf00      	nop
 8009d64:	20000da4 	.word	0x20000da4

08009d68 <__malloc_unlock>:
 8009d68:	4801      	ldr	r0, [pc, #4]	; (8009d70 <__malloc_unlock+0x8>)
 8009d6a:	f000 b80c 	b.w	8009d86 <__retarget_lock_release_recursive>
 8009d6e:	bf00      	nop
 8009d70:	20000da4 	.word	0x20000da4

08009d74 <_malloc_usable_size_r>:
 8009d74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d78:	1f18      	subs	r0, r3, #4
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	bfbc      	itt	lt
 8009d7e:	580b      	ldrlt	r3, [r1, r0]
 8009d80:	18c0      	addlt	r0, r0, r3
 8009d82:	4770      	bx	lr

08009d84 <__retarget_lock_acquire_recursive>:
 8009d84:	4770      	bx	lr

08009d86 <__retarget_lock_release_recursive>:
 8009d86:	4770      	bx	lr

08009d88 <log>:
 8009d88:	b538      	push	{r3, r4, r5, lr}
 8009d8a:	ed2d 8b02 	vpush	{d8}
 8009d8e:	ec55 4b10 	vmov	r4, r5, d0
 8009d92:	f000 f841 	bl	8009e18 <__ieee754_log>
 8009d96:	4b1e      	ldr	r3, [pc, #120]	; (8009e10 <log+0x88>)
 8009d98:	eeb0 8a40 	vmov.f32	s16, s0
 8009d9c:	eef0 8a60 	vmov.f32	s17, s1
 8009da0:	f993 3000 	ldrsb.w	r3, [r3]
 8009da4:	3301      	adds	r3, #1
 8009da6:	d01a      	beq.n	8009dde <log+0x56>
 8009da8:	4622      	mov	r2, r4
 8009daa:	462b      	mov	r3, r5
 8009dac:	4620      	mov	r0, r4
 8009dae:	4629      	mov	r1, r5
 8009db0:	f7f6 fedc 	bl	8000b6c <__aeabi_dcmpun>
 8009db4:	b998      	cbnz	r0, 8009dde <log+0x56>
 8009db6:	2200      	movs	r2, #0
 8009db8:	2300      	movs	r3, #0
 8009dba:	4620      	mov	r0, r4
 8009dbc:	4629      	mov	r1, r5
 8009dbe:	f7f6 fecb 	bl	8000b58 <__aeabi_dcmpgt>
 8009dc2:	b960      	cbnz	r0, 8009dde <log+0x56>
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	4620      	mov	r0, r4
 8009dca:	4629      	mov	r1, r5
 8009dcc:	f7f6 fe9c 	bl	8000b08 <__aeabi_dcmpeq>
 8009dd0:	b160      	cbz	r0, 8009dec <log+0x64>
 8009dd2:	f7ff fb79 	bl	80094c8 <__errno>
 8009dd6:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8009e08 <log+0x80>
 8009dda:	2322      	movs	r3, #34	; 0x22
 8009ddc:	6003      	str	r3, [r0, #0]
 8009dde:	eeb0 0a48 	vmov.f32	s0, s16
 8009de2:	eef0 0a68 	vmov.f32	s1, s17
 8009de6:	ecbd 8b02 	vpop	{d8}
 8009dea:	bd38      	pop	{r3, r4, r5, pc}
 8009dec:	f7ff fb6c 	bl	80094c8 <__errno>
 8009df0:	ecbd 8b02 	vpop	{d8}
 8009df4:	2321      	movs	r3, #33	; 0x21
 8009df6:	6003      	str	r3, [r0, #0]
 8009df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dfc:	4805      	ldr	r0, [pc, #20]	; (8009e14 <log+0x8c>)
 8009dfe:	f000 b9c7 	b.w	800a190 <nan>
 8009e02:	bf00      	nop
 8009e04:	f3af 8000 	nop.w
 8009e08:	00000000 	.word	0x00000000
 8009e0c:	fff00000 	.word	0xfff00000
 8009e10:	2000073c 	.word	0x2000073c
 8009e14:	0800a6bb 	.word	0x0800a6bb

08009e18 <__ieee754_log>:
 8009e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e1c:	ec51 0b10 	vmov	r0, r1, d0
 8009e20:	ed2d 8b04 	vpush	{d8-d9}
 8009e24:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8009e28:	b083      	sub	sp, #12
 8009e2a:	460d      	mov	r5, r1
 8009e2c:	da29      	bge.n	8009e82 <__ieee754_log+0x6a>
 8009e2e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009e32:	4303      	orrs	r3, r0
 8009e34:	ee10 2a10 	vmov	r2, s0
 8009e38:	d10c      	bne.n	8009e54 <__ieee754_log+0x3c>
 8009e3a:	49cf      	ldr	r1, [pc, #828]	; (800a178 <__ieee754_log+0x360>)
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	2300      	movs	r3, #0
 8009e40:	2000      	movs	r0, #0
 8009e42:	f7f6 fd23 	bl	800088c <__aeabi_ddiv>
 8009e46:	ec41 0b10 	vmov	d0, r0, r1
 8009e4a:	b003      	add	sp, #12
 8009e4c:	ecbd 8b04 	vpop	{d8-d9}
 8009e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e54:	2900      	cmp	r1, #0
 8009e56:	da05      	bge.n	8009e64 <__ieee754_log+0x4c>
 8009e58:	460b      	mov	r3, r1
 8009e5a:	f7f6 fa35 	bl	80002c8 <__aeabi_dsub>
 8009e5e:	2200      	movs	r2, #0
 8009e60:	2300      	movs	r3, #0
 8009e62:	e7ee      	b.n	8009e42 <__ieee754_log+0x2a>
 8009e64:	4bc5      	ldr	r3, [pc, #788]	; (800a17c <__ieee754_log+0x364>)
 8009e66:	2200      	movs	r2, #0
 8009e68:	f7f6 fbe6 	bl	8000638 <__aeabi_dmul>
 8009e6c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8009e70:	460d      	mov	r5, r1
 8009e72:	4ac3      	ldr	r2, [pc, #780]	; (800a180 <__ieee754_log+0x368>)
 8009e74:	4295      	cmp	r5, r2
 8009e76:	dd06      	ble.n	8009e86 <__ieee754_log+0x6e>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	f7f6 fa26 	bl	80002cc <__adddf3>
 8009e80:	e7e1      	b.n	8009e46 <__ieee754_log+0x2e>
 8009e82:	2300      	movs	r3, #0
 8009e84:	e7f5      	b.n	8009e72 <__ieee754_log+0x5a>
 8009e86:	152c      	asrs	r4, r5, #20
 8009e88:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009e8c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8009e90:	441c      	add	r4, r3
 8009e92:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8009e96:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8009e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e9e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8009ea2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8009ea6:	ea42 0105 	orr.w	r1, r2, r5
 8009eaa:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8009eae:	2200      	movs	r2, #0
 8009eb0:	4bb4      	ldr	r3, [pc, #720]	; (800a184 <__ieee754_log+0x36c>)
 8009eb2:	f7f6 fa09 	bl	80002c8 <__aeabi_dsub>
 8009eb6:	1cab      	adds	r3, r5, #2
 8009eb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ebc:	2b02      	cmp	r3, #2
 8009ebe:	4682      	mov	sl, r0
 8009ec0:	468b      	mov	fp, r1
 8009ec2:	f04f 0200 	mov.w	r2, #0
 8009ec6:	dc53      	bgt.n	8009f70 <__ieee754_log+0x158>
 8009ec8:	2300      	movs	r3, #0
 8009eca:	f7f6 fe1d 	bl	8000b08 <__aeabi_dcmpeq>
 8009ece:	b1d0      	cbz	r0, 8009f06 <__ieee754_log+0xee>
 8009ed0:	2c00      	cmp	r4, #0
 8009ed2:	f000 8122 	beq.w	800a11a <__ieee754_log+0x302>
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f7f6 fb44 	bl	8000564 <__aeabi_i2d>
 8009edc:	a390      	add	r3, pc, #576	; (adr r3, 800a120 <__ieee754_log+0x308>)
 8009ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee2:	4606      	mov	r6, r0
 8009ee4:	460f      	mov	r7, r1
 8009ee6:	f7f6 fba7 	bl	8000638 <__aeabi_dmul>
 8009eea:	a38f      	add	r3, pc, #572	; (adr r3, 800a128 <__ieee754_log+0x310>)
 8009eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef0:	4604      	mov	r4, r0
 8009ef2:	460d      	mov	r5, r1
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	4639      	mov	r1, r7
 8009ef8:	f7f6 fb9e 	bl	8000638 <__aeabi_dmul>
 8009efc:	4602      	mov	r2, r0
 8009efe:	460b      	mov	r3, r1
 8009f00:	4620      	mov	r0, r4
 8009f02:	4629      	mov	r1, r5
 8009f04:	e7ba      	b.n	8009e7c <__ieee754_log+0x64>
 8009f06:	a38a      	add	r3, pc, #552	; (adr r3, 800a130 <__ieee754_log+0x318>)
 8009f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0c:	4650      	mov	r0, sl
 8009f0e:	4659      	mov	r1, fp
 8009f10:	f7f6 fb92 	bl	8000638 <__aeabi_dmul>
 8009f14:	4602      	mov	r2, r0
 8009f16:	460b      	mov	r3, r1
 8009f18:	2000      	movs	r0, #0
 8009f1a:	499b      	ldr	r1, [pc, #620]	; (800a188 <__ieee754_log+0x370>)
 8009f1c:	f7f6 f9d4 	bl	80002c8 <__aeabi_dsub>
 8009f20:	4652      	mov	r2, sl
 8009f22:	4606      	mov	r6, r0
 8009f24:	460f      	mov	r7, r1
 8009f26:	465b      	mov	r3, fp
 8009f28:	4650      	mov	r0, sl
 8009f2a:	4659      	mov	r1, fp
 8009f2c:	f7f6 fb84 	bl	8000638 <__aeabi_dmul>
 8009f30:	4602      	mov	r2, r0
 8009f32:	460b      	mov	r3, r1
 8009f34:	4630      	mov	r0, r6
 8009f36:	4639      	mov	r1, r7
 8009f38:	f7f6 fb7e 	bl	8000638 <__aeabi_dmul>
 8009f3c:	4606      	mov	r6, r0
 8009f3e:	460f      	mov	r7, r1
 8009f40:	b914      	cbnz	r4, 8009f48 <__ieee754_log+0x130>
 8009f42:	4632      	mov	r2, r6
 8009f44:	463b      	mov	r3, r7
 8009f46:	e0a2      	b.n	800a08e <__ieee754_log+0x276>
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f7f6 fb0b 	bl	8000564 <__aeabi_i2d>
 8009f4e:	a374      	add	r3, pc, #464	; (adr r3, 800a120 <__ieee754_log+0x308>)
 8009f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f54:	4680      	mov	r8, r0
 8009f56:	4689      	mov	r9, r1
 8009f58:	f7f6 fb6e 	bl	8000638 <__aeabi_dmul>
 8009f5c:	a372      	add	r3, pc, #456	; (adr r3, 800a128 <__ieee754_log+0x310>)
 8009f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f62:	4604      	mov	r4, r0
 8009f64:	460d      	mov	r5, r1
 8009f66:	4640      	mov	r0, r8
 8009f68:	4649      	mov	r1, r9
 8009f6a:	f7f6 fb65 	bl	8000638 <__aeabi_dmul>
 8009f6e:	e0a7      	b.n	800a0c0 <__ieee754_log+0x2a8>
 8009f70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009f74:	f7f6 f9aa 	bl	80002cc <__adddf3>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	4650      	mov	r0, sl
 8009f7e:	4659      	mov	r1, fp
 8009f80:	f7f6 fc84 	bl	800088c <__aeabi_ddiv>
 8009f84:	ec41 0b18 	vmov	d8, r0, r1
 8009f88:	4620      	mov	r0, r4
 8009f8a:	f7f6 faeb 	bl	8000564 <__aeabi_i2d>
 8009f8e:	ec53 2b18 	vmov	r2, r3, d8
 8009f92:	ec41 0b19 	vmov	d9, r0, r1
 8009f96:	ec51 0b18 	vmov	r0, r1, d8
 8009f9a:	f7f6 fb4d 	bl	8000638 <__aeabi_dmul>
 8009f9e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8009fa2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8009fa6:	9301      	str	r3, [sp, #4]
 8009fa8:	4602      	mov	r2, r0
 8009faa:	460b      	mov	r3, r1
 8009fac:	4680      	mov	r8, r0
 8009fae:	4689      	mov	r9, r1
 8009fb0:	f7f6 fb42 	bl	8000638 <__aeabi_dmul>
 8009fb4:	a360      	add	r3, pc, #384	; (adr r3, 800a138 <__ieee754_log+0x320>)
 8009fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fba:	4606      	mov	r6, r0
 8009fbc:	460f      	mov	r7, r1
 8009fbe:	f7f6 fb3b 	bl	8000638 <__aeabi_dmul>
 8009fc2:	a35f      	add	r3, pc, #380	; (adr r3, 800a140 <__ieee754_log+0x328>)
 8009fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc8:	f7f6 f980 	bl	80002cc <__adddf3>
 8009fcc:	4632      	mov	r2, r6
 8009fce:	463b      	mov	r3, r7
 8009fd0:	f7f6 fb32 	bl	8000638 <__aeabi_dmul>
 8009fd4:	a35c      	add	r3, pc, #368	; (adr r3, 800a148 <__ieee754_log+0x330>)
 8009fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fda:	f7f6 f977 	bl	80002cc <__adddf3>
 8009fde:	4632      	mov	r2, r6
 8009fe0:	463b      	mov	r3, r7
 8009fe2:	f7f6 fb29 	bl	8000638 <__aeabi_dmul>
 8009fe6:	a35a      	add	r3, pc, #360	; (adr r3, 800a150 <__ieee754_log+0x338>)
 8009fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fec:	f7f6 f96e 	bl	80002cc <__adddf3>
 8009ff0:	4642      	mov	r2, r8
 8009ff2:	464b      	mov	r3, r9
 8009ff4:	f7f6 fb20 	bl	8000638 <__aeabi_dmul>
 8009ff8:	a357      	add	r3, pc, #348	; (adr r3, 800a158 <__ieee754_log+0x340>)
 8009ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffe:	4680      	mov	r8, r0
 800a000:	4689      	mov	r9, r1
 800a002:	4630      	mov	r0, r6
 800a004:	4639      	mov	r1, r7
 800a006:	f7f6 fb17 	bl	8000638 <__aeabi_dmul>
 800a00a:	a355      	add	r3, pc, #340	; (adr r3, 800a160 <__ieee754_log+0x348>)
 800a00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a010:	f7f6 f95c 	bl	80002cc <__adddf3>
 800a014:	4632      	mov	r2, r6
 800a016:	463b      	mov	r3, r7
 800a018:	f7f6 fb0e 	bl	8000638 <__aeabi_dmul>
 800a01c:	a352      	add	r3, pc, #328	; (adr r3, 800a168 <__ieee754_log+0x350>)
 800a01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a022:	f7f6 f953 	bl	80002cc <__adddf3>
 800a026:	4632      	mov	r2, r6
 800a028:	463b      	mov	r3, r7
 800a02a:	f7f6 fb05 	bl	8000638 <__aeabi_dmul>
 800a02e:	460b      	mov	r3, r1
 800a030:	4602      	mov	r2, r0
 800a032:	4649      	mov	r1, r9
 800a034:	4640      	mov	r0, r8
 800a036:	f7f6 f949 	bl	80002cc <__adddf3>
 800a03a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800a03e:	9b01      	ldr	r3, [sp, #4]
 800a040:	3551      	adds	r5, #81	; 0x51
 800a042:	431d      	orrs	r5, r3
 800a044:	2d00      	cmp	r5, #0
 800a046:	4680      	mov	r8, r0
 800a048:	4689      	mov	r9, r1
 800a04a:	dd48      	ble.n	800a0de <__ieee754_log+0x2c6>
 800a04c:	4b4e      	ldr	r3, [pc, #312]	; (800a188 <__ieee754_log+0x370>)
 800a04e:	2200      	movs	r2, #0
 800a050:	4650      	mov	r0, sl
 800a052:	4659      	mov	r1, fp
 800a054:	f7f6 faf0 	bl	8000638 <__aeabi_dmul>
 800a058:	4652      	mov	r2, sl
 800a05a:	465b      	mov	r3, fp
 800a05c:	f7f6 faec 	bl	8000638 <__aeabi_dmul>
 800a060:	4602      	mov	r2, r0
 800a062:	460b      	mov	r3, r1
 800a064:	4606      	mov	r6, r0
 800a066:	460f      	mov	r7, r1
 800a068:	4640      	mov	r0, r8
 800a06a:	4649      	mov	r1, r9
 800a06c:	f7f6 f92e 	bl	80002cc <__adddf3>
 800a070:	ec53 2b18 	vmov	r2, r3, d8
 800a074:	f7f6 fae0 	bl	8000638 <__aeabi_dmul>
 800a078:	4680      	mov	r8, r0
 800a07a:	4689      	mov	r9, r1
 800a07c:	b964      	cbnz	r4, 800a098 <__ieee754_log+0x280>
 800a07e:	4602      	mov	r2, r0
 800a080:	460b      	mov	r3, r1
 800a082:	4630      	mov	r0, r6
 800a084:	4639      	mov	r1, r7
 800a086:	f7f6 f91f 	bl	80002c8 <__aeabi_dsub>
 800a08a:	4602      	mov	r2, r0
 800a08c:	460b      	mov	r3, r1
 800a08e:	4650      	mov	r0, sl
 800a090:	4659      	mov	r1, fp
 800a092:	f7f6 f919 	bl	80002c8 <__aeabi_dsub>
 800a096:	e6d6      	b.n	8009e46 <__ieee754_log+0x2e>
 800a098:	a321      	add	r3, pc, #132	; (adr r3, 800a120 <__ieee754_log+0x308>)
 800a09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09e:	ec51 0b19 	vmov	r0, r1, d9
 800a0a2:	f7f6 fac9 	bl	8000638 <__aeabi_dmul>
 800a0a6:	a320      	add	r3, pc, #128	; (adr r3, 800a128 <__ieee754_log+0x310>)
 800a0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ac:	4604      	mov	r4, r0
 800a0ae:	460d      	mov	r5, r1
 800a0b0:	ec51 0b19 	vmov	r0, r1, d9
 800a0b4:	f7f6 fac0 	bl	8000638 <__aeabi_dmul>
 800a0b8:	4642      	mov	r2, r8
 800a0ba:	464b      	mov	r3, r9
 800a0bc:	f7f6 f906 	bl	80002cc <__adddf3>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	4630      	mov	r0, r6
 800a0c6:	4639      	mov	r1, r7
 800a0c8:	f7f6 f8fe 	bl	80002c8 <__aeabi_dsub>
 800a0cc:	4652      	mov	r2, sl
 800a0ce:	465b      	mov	r3, fp
 800a0d0:	f7f6 f8fa 	bl	80002c8 <__aeabi_dsub>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	4620      	mov	r0, r4
 800a0da:	4629      	mov	r1, r5
 800a0dc:	e7d9      	b.n	800a092 <__ieee754_log+0x27a>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	4650      	mov	r0, sl
 800a0e4:	4659      	mov	r1, fp
 800a0e6:	f7f6 f8ef 	bl	80002c8 <__aeabi_dsub>
 800a0ea:	ec53 2b18 	vmov	r2, r3, d8
 800a0ee:	f7f6 faa3 	bl	8000638 <__aeabi_dmul>
 800a0f2:	4606      	mov	r6, r0
 800a0f4:	460f      	mov	r7, r1
 800a0f6:	2c00      	cmp	r4, #0
 800a0f8:	f43f af23 	beq.w	8009f42 <__ieee754_log+0x12a>
 800a0fc:	a308      	add	r3, pc, #32	; (adr r3, 800a120 <__ieee754_log+0x308>)
 800a0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a102:	ec51 0b19 	vmov	r0, r1, d9
 800a106:	f7f6 fa97 	bl	8000638 <__aeabi_dmul>
 800a10a:	a307      	add	r3, pc, #28	; (adr r3, 800a128 <__ieee754_log+0x310>)
 800a10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a110:	4604      	mov	r4, r0
 800a112:	460d      	mov	r5, r1
 800a114:	ec51 0b19 	vmov	r0, r1, d9
 800a118:	e727      	b.n	8009f6a <__ieee754_log+0x152>
 800a11a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800a170 <__ieee754_log+0x358>
 800a11e:	e694      	b.n	8009e4a <__ieee754_log+0x32>
 800a120:	fee00000 	.word	0xfee00000
 800a124:	3fe62e42 	.word	0x3fe62e42
 800a128:	35793c76 	.word	0x35793c76
 800a12c:	3dea39ef 	.word	0x3dea39ef
 800a130:	55555555 	.word	0x55555555
 800a134:	3fd55555 	.word	0x3fd55555
 800a138:	df3e5244 	.word	0xdf3e5244
 800a13c:	3fc2f112 	.word	0x3fc2f112
 800a140:	96cb03de 	.word	0x96cb03de
 800a144:	3fc74664 	.word	0x3fc74664
 800a148:	94229359 	.word	0x94229359
 800a14c:	3fd24924 	.word	0x3fd24924
 800a150:	55555593 	.word	0x55555593
 800a154:	3fe55555 	.word	0x3fe55555
 800a158:	d078c69f 	.word	0xd078c69f
 800a15c:	3fc39a09 	.word	0x3fc39a09
 800a160:	1d8e78af 	.word	0x1d8e78af
 800a164:	3fcc71c5 	.word	0x3fcc71c5
 800a168:	9997fa04 	.word	0x9997fa04
 800a16c:	3fd99999 	.word	0x3fd99999
	...
 800a178:	c3500000 	.word	0xc3500000
 800a17c:	43500000 	.word	0x43500000
 800a180:	7fefffff 	.word	0x7fefffff
 800a184:	3ff00000 	.word	0x3ff00000
 800a188:	3fe00000 	.word	0x3fe00000
 800a18c:	00000000 	.word	0x00000000

0800a190 <nan>:
 800a190:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a198 <nan+0x8>
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	00000000 	.word	0x00000000
 800a19c:	7ff80000 	.word	0x7ff80000

0800a1a0 <_init>:
 800a1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1a2:	bf00      	nop
 800a1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1a6:	bc08      	pop	{r3}
 800a1a8:	469e      	mov	lr, r3
 800a1aa:	4770      	bx	lr

0800a1ac <_fini>:
 800a1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ae:	bf00      	nop
 800a1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1b2:	bc08      	pop	{r3}
 800a1b4:	469e      	mov	lr, r3
 800a1b6:	4770      	bx	lr
