
solar_lv_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ae0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000678  08008cb0  08008cb0  00018cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009328  08009328  00020510  2**0
                  CONTENTS
  4 .ARM          00000008  08009328  08009328  00019328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009330  08009330  00020510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009330  08009330  00019330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009334  08009334  00019334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000510  20000000  08009338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  20000510  08009848  00020510  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200009dc  08009848  000209dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020510  2**0
                  CONTENTS, READONLY
 12 .debug_line   00033dc8  00000000  00000000  00020540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0003b021  00000000  00000000  00054308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000068a2  00000000  00000000  0008f329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001808  00000000  00000000  00095bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f3ce7  00000000  00000000  000973d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000035f8  00000000  00000000  0018b0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    0001ae5e  00000000  00000000  0018e6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002bf2e  00000000  00000000  001a9516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000cf  00000000  00000000  001d5444  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004cb8  00000000  00000000  001d5514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000510 	.word	0x20000510
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008c98 	.word	0x08008c98

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000514 	.word	0x20000514
 800020c:	08008c98 	.word	0x08008c98

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b974 	b.w	8000fc8 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468e      	mov	lr, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14d      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4694      	mov	ip, r2
 8000d0a:	d969      	bls.n	8000de0 <__udivmoddi4+0xe8>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b152      	cbz	r2, 8000d28 <__udivmoddi4+0x30>
 8000d12:	fa01 f302 	lsl.w	r3, r1, r2
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	ea41 0e03 	orr.w	lr, r1, r3
 8000d26:	4094      	lsls	r4, r2
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	0c21      	lsrs	r1, r4, #16
 8000d2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d32:	fa1f f78c 	uxth.w	r7, ip
 8000d36:	fb08 e316 	mls	r3, r8, r6, lr
 8000d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d3e:	fb06 f107 	mul.w	r1, r6, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4e:	f080 811f 	bcs.w	8000f90 <__udivmoddi4+0x298>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 811c 	bls.w	8000f90 <__udivmoddi4+0x298>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f707 	mul.w	r7, r0, r7
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x92>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7c:	f080 810a 	bcs.w	8000f94 <__udivmoddi4+0x29c>
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	f240 8107 	bls.w	8000f94 <__udivmoddi4+0x29c>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	2600      	movs	r6, #0
 8000d92:	b11d      	cbz	r5, 8000d9c <__udivmoddi4+0xa4>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c5 4300 	strd	r4, r3, [r5]
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xc2>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80ef 	beq.w	8000f8a <__udivmoddi4+0x292>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x160>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd4>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80f9 	bhi.w	8000fbe <__udivmoddi4+0x2c6>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa4>
 8000dda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xec>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 8092 	bne.w	8000f12 <__udivmoddi4+0x21a>
 8000dee:	eba1 010c 	sub.w	r1, r1, ip
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	0c20      	lsrs	r0, r4, #16
 8000dfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e02:	fb07 1113 	mls	r1, r7, r3, r1
 8000e06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0a:	fb0e f003 	mul.w	r0, lr, r3
 8000e0e:	4288      	cmp	r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x12a>
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2c0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x156>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x154>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2ca>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x9a>
 8000e58:	f1c6 0720 	rsb	r7, r6, #32
 8000e5c:	40b3      	lsls	r3, r6
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa20 f407 	lsr.w	r4, r0, r7
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e76:	fa00 f306 	lsl.w	r3, r0, r6
 8000e7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fb09 1118 	mls	r1, r9, r8, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e90:	4288      	cmp	r0, r1
 8000e92:	fa02 f206 	lsl.w	r2, r2, r6
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b8>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2bc>
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2bc>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ebc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1e2>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2b4>
 8000ed2:	458e      	cmp	lr, r1
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2b4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ede:	fba0 9402 	umull	r9, r4, r0, r2
 8000ee2:	eba1 010e 	sub.w	r1, r1, lr
 8000ee6:	42a1      	cmp	r1, r4
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46a6      	mov	lr, r4
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x2a4>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x2a0>
 8000ef0:	b15d      	cbz	r5, 8000f0a <__udivmoddi4+0x212>
 8000ef2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef6:	eb61 010e 	sbc.w	r1, r1, lr
 8000efa:	fa01 f707 	lsl.w	r7, r1, r7
 8000efe:	fa22 f306 	lsr.w	r3, r2, r6
 8000f02:	40f1      	lsrs	r1, r6
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	f1c2 0320 	rsb	r3, r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4091      	lsls	r1, r2
 8000f22:	4301      	orrs	r1, r0
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f30:	fb07 3610 	mls	r6, r7, r0, r3
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	fa04 f402 	lsl.w	r4, r4, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x260>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4463      	add	r3, ip
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	b289      	uxth	r1, r1
 8000f5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f60:	fb07 3316 	mls	r3, r7, r6, r3
 8000f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f68:	fb06 f30e 	mul.w	r3, r6, lr
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x28a>
 8000f70:	eb1c 0101 	adds.w	r1, ip, r1
 8000f74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7e:	3e02      	subs	r6, #2
 8000f80:	4461      	add	r1, ip
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0x104>
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e705      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e3      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6f8      	b.n	8000d8a <__udivmoddi4+0x92>
 8000f98:	454b      	cmp	r3, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f8>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f8>
 8000fa8:	4646      	mov	r6, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x28a>
 8000fac:	4620      	mov	r0, r4
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1e2>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x260>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b8>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x12c>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e709      	b.n	8000dd6 <__udivmoddi4+0xde>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x156>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001004 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fd0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fd2:	e003      	b.n	8000fdc <LoopCopyDataInit>

08000fd4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fd6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fd8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fda:	3104      	adds	r1, #4

08000fdc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fdc:	480b      	ldr	r0, [pc, #44]	; (800100c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fe0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fe2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fe4:	d3f6      	bcc.n	8000fd4 <CopyDataInit>
  ldr  r2, =_sbss
 8000fe6:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fe8:	e002      	b.n	8000ff0 <LoopFillZerobss>

08000fea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fec:	f842 3b04 	str.w	r3, [r2], #4

08000ff0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ff2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ff4:	d3f9      	bcc.n	8000fea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ff6:	f003 fab3 	bl	8004560 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ffa:	f006 ffad 	bl	8007f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ffe:	f000 fe5f 	bl	8001cc0 <main>
  bx  lr    
 8001002:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001004:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001008:	08009338 	.word	0x08009338
  ldr  r0, =_sdata
 800100c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001010:	20000510 	.word	0x20000510
  ldr  r2, =_sbss
 8001014:	20000510 	.word	0x20000510
  ldr  r3, = _ebss
 8001018:	200009dc 	.word	0x200009dc

0800101c <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800101c:	e7fe      	b.n	800101c <BusFault_Handler>
	...

08001020 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//CAN data receiver
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001020:	b538      	push	{r3, r4, r5, lr}
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CANRxHeader, CANRxData);
 8001022:	4c0a      	ldr	r4, [pc, #40]	; (800104c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001024:	4d0a      	ldr	r5, [pc, #40]	; (8001050 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001026:	4622      	mov	r2, r4
 8001028:	462b      	mov	r3, r5
 800102a:	2100      	movs	r1, #0
 800102c:	f003 fef8 	bl	8004e20 <HAL_CAN_GetRxMessage>

	if (CANRxHeader.StdId == CANRXBASEID + 1)
 8001030:	6822      	ldr	r2, [r4, #0]
 8001032:	f240 4301 	movw	r3, #1025	; 0x401
 8001036:	429a      	cmp	r2, r3
 8001038:	d000      	beq.n	800103c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
	{
		CANRx_velocity.velocity_int = CANRxData[0] | (CANRxData[1] << 8) | (CANRxData[2] << 16) | (CANRxData[3] << 24);
		CANRx_current.current_int   = CANRxData[4] | (CANRxData[5] << 8) | (CANRxData[6] << 16) | (CANRxData[7] << 24);
	}
}
 800103a:	bd38      	pop	{r3, r4, r5, pc}
		CANRx_current.current_int   = CANRxData[4] | (CANRxData[5] << 8) | (CANRxData[6] << 16) | (CANRxData[7] << 24);
 800103c:	e9d5 0200 	ldrd	r0, r2, [r5]
		CANRx_velocity.velocity_int = CANRxData[0] | (CANRxData[1] << 8) | (CANRxData[2] << 16) | (CANRxData[3] << 24);
 8001040:	4904      	ldr	r1, [pc, #16]	; (8001054 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
		CANRx_current.current_int   = CANRxData[4] | (CANRxData[5] << 8) | (CANRxData[6] << 16) | (CANRxData[7] << 24);
 8001042:	4b05      	ldr	r3, [pc, #20]	; (8001058 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
		CANRx_velocity.velocity_int = CANRxData[0] | (CANRxData[1] << 8) | (CANRxData[2] << 16) | (CANRxData[3] << 24);
 8001044:	6008      	str	r0, [r1, #0]
		CANRx_current.current_int   = CANRxData[4] | (CANRxData[5] << 8) | (CANRxData[6] << 16) | (CANRxData[7] << 24);
 8001046:	601a      	str	r2, [r3, #0]
}
 8001048:	bd38      	pop	{r3, r4, r5, pc}
 800104a:	bf00      	nop
 800104c:	20000534 	.word	0x20000534
 8001050:	2000052c 	.word	0x2000052c
 8001054:	20000554 	.word	0x20000554
 8001058:	20000550 	.word	0x20000550
 800105c:	00000000 	.word	0x00000000

08001060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001060:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	2300      	movs	r3, #0
{
 8001064:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001066:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800106a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001072:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	4928      	ldr	r1, [pc, #160]	; (8001118 <SystemClock_Config+0xb8>)
 8001078:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800107a:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107c:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800107e:	4a27      	ldr	r2, [pc, #156]	; (800111c <SystemClock_Config+0xbc>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001080:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8001084:	6408      	str	r0, [r1, #64]	; 0x40
 8001086:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001088:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800108c:	9100      	str	r1, [sp, #0]
 800108e:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	6811      	ldr	r1, [r2, #0]
 8001094:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8001098:	6011      	str	r1, [r2, #0]
 800109a:	6812      	ldr	r2, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800109c:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 8001108 <SystemClock_Config+0xa8>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a0:	2302      	movs	r3, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a2:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010aa:	9201      	str	r2, [sp, #4]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ac:	e9cd 300e 	strd	r3, r0, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010b0:	2104      	movs	r1, #4
  RCC_OscInitStruct.PLL.PLLN = 180;
 80010b2:	22b4      	movs	r2, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b4:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b6:	ed8d 7b08 	vstr	d7, [sp, #32]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ba:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010be:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c2:	9c01      	ldr	r4, [sp, #4]
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010c4:	9110      	str	r1, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c6:	f004 fb73 	bl	80057b0 <HAL_RCC_OscConfig>
 80010ca:	b108      	cbz	r0, 80010d0 <SystemClock_Config+0x70>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010cc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ce:	e7fe      	b.n	80010ce <SystemClock_Config+0x6e>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010d0:	f004 fa1e 	bl	8005510 <HAL_PWREx_EnableOverDrive>
 80010d4:	b108      	cbz	r0, 80010da <SystemClock_Config+0x7a>
 80010d6:	b672      	cpsid	i
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010da:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8001110 <SystemClock_Config+0xb0>
 80010de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010e2:	2200      	movs	r2, #0
 80010e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010e8:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010ee:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f0:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010f4:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010f6:	f004 fa47 	bl	8005588 <HAL_RCC_ClockConfig>
 80010fa:	b108      	cbz	r0, 8001100 <SystemClock_Config+0xa0>
 80010fc:	b672      	cpsid	i
  while (1)
 80010fe:	e7fe      	b.n	80010fe <SystemClock_Config+0x9e>
}
 8001100:	b016      	add	sp, #88	; 0x58
 8001102:	bd10      	pop	{r4, pc}
 8001104:	f3af 8000 	nop.w
 8001108:	00000001 	.word	0x00000001
 800110c:	00010000 	.word	0x00010000
 8001110:	0000000f 	.word	0x0000000f
 8001114:	00000002 	.word	0x00000002
 8001118:	40023800 	.word	0x40023800
 800111c:	40007000 	.word	0x40007000

08001120 <state405>:
{
 8001120:	b570      	push	{r4, r5, r6, lr}
	if (currentWDTime - lastWDTime > WDTIMERLIM)
 8001122:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <state405+0xa0>)
 8001124:	4c27      	ldr	r4, [pc, #156]	; (80011c4 <state405+0xa4>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	8821      	ldrh	r1, [r4, #0]
	state = 406;
 800112a:	4d27      	ldr	r5, [pc, #156]	; (80011c8 <state405+0xa8>)
	if (currentWDTime - lastWDTime > WDTIMERLIM)
 800112c:	1a5b      	subs	r3, r3, r1
	state = 406;
 800112e:	f44f 72cb 	mov.w	r2, #406	; 0x196
	if (currentWDTime - lastWDTime > WDTIMERLIM)
 8001132:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
	state = 406;
 8001136:	802a      	strh	r2, [r5, #0]
	if (currentWDTime - lastWDTime > WDTIMERLIM)
 8001138:	dd36      	ble.n	80011a8 <state405+0x88>
	MC_StopMotor1();
 800113a:	f002 f8cf 	bl	80032dc <MC_StopMotor1>
	HAL_GPIO_WritePin(FLT_OUT_GPIO_Port, FLT_OUT_Pin, GPIO_PIN_SET); //Set FLT_OUT high, turning on the LED
 800113e:	4823      	ldr	r0, [pc, #140]	; (80011cc <state405+0xac>)
		sprintf(msg_debug, "WD timeout\r\n");
 8001140:	4c23      	ldr	r4, [pc, #140]	; (80011d0 <state405+0xb0>)
	HAL_GPIO_WritePin(FLT_OUT_GPIO_Port, FLT_OUT_Pin, GPIO_PIN_SET); //Set FLT_OUT high, turning on the LED
 8001142:	2201      	movs	r2, #1
 8001144:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001148:	f004 f9de 	bl	8005508 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_DIS_GPIO_Port, DRV_DIS_Pin, GPIO_PIN_SET); //Set DRV_DIS high, disabling the FETs
 800114c:	4821      	ldr	r0, [pc, #132]	; (80011d4 <state405+0xb4>)
 800114e:	2201      	movs	r2, #1
 8001150:	2102      	movs	r1, #2
 8001152:	f004 f9d9 	bl	8005508 <HAL_GPIO_WritePin>
	sprintf(msg_debug, "State %hu\r\n", state);
 8001156:	882a      	ldrh	r2, [r5, #0]
 8001158:	491f      	ldr	r1, [pc, #124]	; (80011d8 <state405+0xb8>)
 800115a:	481d      	ldr	r0, [pc, #116]	; (80011d0 <state405+0xb0>)
		CANTx_ErrorFlags |= 1<<20; //Communication fault: 20th bit
 800115c:	4d1f      	ldr	r5, [pc, #124]	; (80011dc <state405+0xbc>)
	sprintf(msg_debug, "State %hu\r\n", state);
 800115e:	f006 ff27 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001162:	481b      	ldr	r0, [pc, #108]	; (80011d0 <state405+0xb0>)
 8001164:	f7ff f854 	bl	8000210 <strlen>
 8001168:	4919      	ldr	r1, [pc, #100]	; (80011d0 <state405+0xb0>)
 800116a:	b282      	uxth	r2, r0
 800116c:	f04f 33ff 	mov.w	r3, #4294967295
 8001170:	481b      	ldr	r0, [pc, #108]	; (80011e0 <state405+0xc0>)
 8001172:	f005 f991 	bl	8006498 <HAL_UART_Transmit>
	HAL_Delay(250);
 8001176:	20fa      	movs	r0, #250	; 0xfa
 8001178:	f003 fa50 	bl	800461c <HAL_Delay>
		sprintf(msg_debug, "WD timeout\r\n");
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <state405+0xc4>)
 800117e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001180:	c407      	stmia	r4!, {r0, r1, r2}
 8001182:	4620      	mov	r0, r4
 8001184:	f800 390c 	strb.w	r3, [r0], #-12
		CANTx_ErrorFlags |= 1<<20; //Communication fault: 20th bit
 8001188:	682b      	ldr	r3, [r5, #0]
 800118a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800118e:	602b      	str	r3, [r5, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001190:	f7ff f83e 	bl	8000210 <strlen>
 8001194:	f1a4 010c 	sub.w	r1, r4, #12
 8001198:	b282      	uxth	r2, r0
}
 800119a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 800119e:	4810      	ldr	r0, [pc, #64]	; (80011e0 <state405+0xc0>)
 80011a0:	f04f 33ff 	mov.w	r3, #4294967295
 80011a4:	f005 b978 	b.w	8006498 <HAL_UART_Transmit>
		lastWDTime = HAL_GetTick();
 80011a8:	f003 fa32 	bl	8004610 <HAL_GetTick>
		if(((CANTx_ErrorFlags>>20) & 1) == 1) //If error flag was set but no error is still present
 80011ac:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <state405+0xbc>)
		lastWDTime = HAL_GetTick();
 80011ae:	8020      	strh	r0, [r4, #0]
		if(((CANTx_ErrorFlags>>20) & 1) == 1) //If error flag was set but no error is still present
 80011b0:	6813      	ldr	r3, [r2, #0]
 80011b2:	02d9      	lsls	r1, r3, #11
			CANTx_ErrorFlags &= ~(1<<20); //Clear error flag bit if it was previously set
 80011b4:	bf44      	itt	mi
 80011b6:	f423 1380 	bicmi.w	r3, r3, #1048576	; 0x100000
 80011ba:	6013      	strmi	r3, [r2, #0]
}
 80011bc:	bd70      	pop	{r4, r5, r6, pc}
 80011be:	bf00      	nop
 80011c0:	2000060a 	.word	0x2000060a
 80011c4:	200007a4 	.word	0x200007a4
 80011c8:	200008fc 	.word	0x200008fc
 80011cc:	40020000 	.word	0x40020000
 80011d0:	200007ac 	.word	0x200007ac
 80011d4:	40020400 	.word	0x40020400
 80011d8:	08008cb0 	.word	0x08008cb0
 80011dc:	2000057c 	.word	0x2000057c
 80011e0:	20000760 	.word	0x20000760
 80011e4:	08008cec 	.word	0x08008cec

080011e8 <state406>:
{
 80011e8:	b570      	push	{r4, r5, r6, lr}
	state = 407;
 80011ea:	4d24      	ldr	r5, [pc, #144]	; (800127c <state406+0x94>)
 80011ec:	f240 1397 	movw	r3, #407	; 0x197
 80011f0:	802b      	strh	r3, [r5, #0]
	if (MC_GetCurrentFaultsMotor1() > 0 || MC_GetOccurredFaultsMotor1() > 0)
 80011f2:	f002 f8a3 	bl	800333c <MC_GetCurrentFaultsMotor1>
 80011f6:	b918      	cbnz	r0, 8001200 <state406+0x18>
 80011f8:	f002 f89a 	bl	8003330 <MC_GetOccurredFaultsMotor1>
 80011fc:	2800      	cmp	r0, #0
 80011fe:	d035      	beq.n	800126c <state406+0x84>
	sprintf(msg_debug, "State %hu\r\n", state);
 8001200:	4c1f      	ldr	r4, [pc, #124]	; (8001280 <state406+0x98>)
	MC_StopMotor1();
 8001202:	f002 f86b 	bl	80032dc <MC_StopMotor1>
	HAL_GPIO_WritePin(FLT_OUT_GPIO_Port, FLT_OUT_Pin, GPIO_PIN_SET); //Set FLT_OUT high, turning on the LED
 8001206:	481f      	ldr	r0, [pc, #124]	; (8001284 <state406+0x9c>)
 8001208:	2201      	movs	r2, #1
 800120a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800120e:	f004 f97b 	bl	8005508 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_DIS_GPIO_Port, DRV_DIS_Pin, GPIO_PIN_SET); //Set DRV_DIS high, disabling the FETs
 8001212:	481d      	ldr	r0, [pc, #116]	; (8001288 <state406+0xa0>)
 8001214:	2201      	movs	r2, #1
 8001216:	2102      	movs	r1, #2
 8001218:	f004 f976 	bl	8005508 <HAL_GPIO_WritePin>
	sprintf(msg_debug, "State %hu\r\n", state);
 800121c:	882a      	ldrh	r2, [r5, #0]
 800121e:	491b      	ldr	r1, [pc, #108]	; (800128c <state406+0xa4>)
 8001220:	4620      	mov	r0, r4
 8001222:	f006 fec5 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001226:	4620      	mov	r0, r4
 8001228:	f7fe fff2 	bl	8000210 <strlen>
 800122c:	4621      	mov	r1, r4
 800122e:	b282      	uxth	r2, r0
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
 8001234:	4816      	ldr	r0, [pc, #88]	; (8001290 <state406+0xa8>)
 8001236:	f005 f92f 	bl	8006498 <HAL_UART_Transmit>
	HAL_Delay(250);
 800123a:	20fa      	movs	r0, #250	; 0xfa
 800123c:	f003 f9ee 	bl	800461c <HAL_Delay>
		CANTx_ErrorFlags |= 1<<19; //Control fault: 19th bit
 8001240:	4914      	ldr	r1, [pc, #80]	; (8001294 <state406+0xac>)
		sprintf(msg_debug, "Control fault\r\n");
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <state406+0xb0>)
		CANTx_ErrorFlags |= 1<<19; //Control fault: 19th bit
 8001244:	680a      	ldr	r2, [r1, #0]
 8001246:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800124a:	600a      	str	r2, [r1, #0]
		sprintf(msg_debug, "Control fault\r\n");
 800124c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800124e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001252:	4620      	mov	r0, r4
 8001254:	f7fe ffdc 	bl	8000210 <strlen>
 8001258:	4602      	mov	r2, r0
 800125a:	4621      	mov	r1, r4
 800125c:	480c      	ldr	r0, [pc, #48]	; (8001290 <state406+0xa8>)
}
 800125e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001262:	f04f 33ff 	mov.w	r3, #4294967295
 8001266:	b292      	uxth	r2, r2
 8001268:	f005 b916 	b.w	8006498 <HAL_UART_Transmit>
		if(((CANTx_ErrorFlags>>19) & 1) == 1) //If error flag was set but no error is still present
 800126c:	4a09      	ldr	r2, [pc, #36]	; (8001294 <state406+0xac>)
 800126e:	6813      	ldr	r3, [r2, #0]
 8001270:	0319      	lsls	r1, r3, #12
			CANTx_ErrorFlags &= ~(1<<19); //Clear error flag bit if it was previously set
 8001272:	bf44      	itt	mi
 8001274:	f423 2300 	bicmi.w	r3, r3, #524288	; 0x80000
 8001278:	6013      	strmi	r3, [r2, #0]
}
 800127a:	bd70      	pop	{r4, r5, r6, pc}
 800127c:	200008fc 	.word	0x200008fc
 8001280:	200007ac 	.word	0x200007ac
 8001284:	40020000 	.word	0x40020000
 8001288:	40020400 	.word	0x40020400
 800128c:	08008cb0 	.word	0x08008cb0
 8001290:	20000760 	.word	0x20000760
 8001294:	2000057c 	.word	0x2000057c
 8001298:	08008cfc 	.word	0x08008cfc
 800129c:	00000000 	.word	0x00000000

080012a0 <state501>:
{
 80012a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (CANRx_velocity.velocity_float > 0)
 80012a4:	4c96      	ldr	r4, [pc, #600]	; (8001500 <state501+0x260>)
		userDirectionFlag = 1;
 80012a6:	4a97      	ldr	r2, [pc, #604]	; (8001504 <state501+0x264>)
	if (CANRx_velocity.velocity_float > 0)
 80012a8:	edd4 7a00 	vldr	s15, [r4]
 80012ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b4:	f340 80d3 	ble.w	800145e <state501+0x1be>
		userDirectionFlag = 1;
 80012b8:	2301      	movs	r3, #1
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	2102      	movs	r1, #2
 80012be:	2000      	movs	r0, #0
	if (CANTx_mtrVelocity.mtrVelocity_float > 0 && CANTx_mtrVelocity.mtrVelocity_float < NMAX)
 80012c0:	4a91      	ldr	r2, [pc, #580]	; (8001508 <state501+0x268>)
 80012c2:	edd2 7a00 	vldr	s15, [r2]
 80012c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ce:	dd2a      	ble.n	8001326 <state501+0x86>
 80012d0:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 800150c <state501+0x26c>
 80012d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012dc:	d523      	bpl.n	8001326 <state501+0x86>
		mtrDirectionFlag = 1;
 80012de:	4b8c      	ldr	r3, [pc, #560]	; (8001510 <state501+0x270>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	460b      	mov	r3, r1
	if (userDirectionFlag + mtrDirectionFlag == 0)
 80012e6:	bb4b      	cbnz	r3, 800133c <state501+0x9c>
		CANRx_current.current_float = 0;
 80012e8:	488a      	ldr	r0, [pc, #552]	; (8001514 <state501+0x274>)
	state = 502;
 80012ea:	4a8b      	ldr	r2, [pc, #556]	; (8001518 <state501+0x278>)
		CANRx_velocity.velocity_float = 0;
 80012ec:	2300      	movs	r3, #0
	state = 502;
 80012ee:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
		CANRx_velocity.velocity_float = 0;
 80012f2:	6023      	str	r3, [r4, #0]
		CANRx_current.current_float = 0;
 80012f4:	6003      	str	r3, [r0, #0]
	state = 502;
 80012f6:	8011      	strh	r1, [r2, #0]
		sprintf(msg_debug, "Torque ramp requested\r\n");
 80012f8:	4e88      	ldr	r6, [pc, #544]	; (800151c <state501+0x27c>)
 80012fa:	4c89      	ldr	r4, [pc, #548]	; (8001520 <state501+0x280>)
 80012fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001300:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001304:	e884 0003 	stmia.w	r4, {r0, r1}
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001308:	f1a4 0010 	sub.w	r0, r4, #16
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 800130c:	f7fe ff80 	bl	8000210 <strlen>
 8001310:	4602      	mov	r2, r0
 8001312:	f1a4 0110 	sub.w	r1, r4, #16
 8001316:	4883      	ldr	r0, [pc, #524]	; (8001524 <state501+0x284>)
}
 8001318:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 800131c:	f04f 33ff 	mov.w	r3, #4294967295
 8001320:	b292      	uxth	r2, r2
 8001322:	f005 b8b9 	b.w	8006498 <HAL_UART_Transmit>
	else if(CANTx_mtrVelocity.mtrVelocity_float < 0 && CANTx_mtrVelocity.mtrVelocity_float > -1*NMAX)
 8001326:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800132a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132e:	f100 8088 	bmi.w	8001442 <state501+0x1a2>
		mtrDirectionFlag = 0;
 8001332:	4a77      	ldr	r2, [pc, #476]	; (8001510 <state501+0x270>)
 8001334:	2100      	movs	r1, #0
 8001336:	6011      	str	r1, [r2, #0]
	if (userDirectionFlag + mtrDirectionFlag == 0)
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0d5      	beq.n	80012e8 <state501+0x48>
	if (CANRx_current.current_float > IMAXP + ITOLP)
 800133c:	4d75      	ldr	r5, [pc, #468]	; (8001514 <state501+0x274>)
	state = 502;
 800133e:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8001518 <state501+0x278>
	if (CANRx_current.current_float > IMAXP + ITOLP)
 8001342:	6828      	ldr	r0, [r5, #0]
 8001344:	f7ff f920 	bl	8000588 <__aeabi_f2d>
	state = 502;
 8001348:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
 800134c:	f8a8 3000 	strh.w	r3, [r8]
	if (CANRx_current.current_float > IMAXP + ITOLP)
 8001350:	a35f      	add	r3, pc, #380	; (adr r3, 80014d0 <state501+0x230>)
 8001352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001356:	4606      	mov	r6, r0
 8001358:	460f      	mov	r7, r1
 800135a:	f7ff fbfd 	bl	8000b58 <__aeabi_dcmpgt>
 800135e:	2800      	cmp	r0, #0
 8001360:	d15a      	bne.n	8001418 <state501+0x178>
	else if (CANRx_current.current_float <= ITOLP)
 8001362:	a35d      	add	r3, pc, #372	; (adr r3, 80014d8 <state501+0x238>)
 8001364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001368:	4630      	mov	r0, r6
 800136a:	4639      	mov	r1, r7
 800136c:	f7ff fbe0 	bl	8000b30 <__aeabi_dcmple>
 8001370:	2800      	cmp	r0, #0
 8001372:	d1c1      	bne.n	80012f8 <state501+0x58>
	else if (CANRx_current.current_float >= IMAXP - ITOLP
 8001374:	a35a      	add	r3, pc, #360	; (adr r3, 80014e0 <state501+0x240>)
 8001376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137a:	4630      	mov	r0, r6
 800137c:	4639      	mov	r1, r7
 800137e:	f7ff fbe1 	bl	8000b44 <__aeabi_dcmpge>
 8001382:	2800      	cmp	r0, #0
 8001384:	d172      	bne.n	800146c <state501+0x1cc>
			&& CANRx_velocity.velocity_float < VMAX - VTOL)
 8001386:	6820      	ldr	r0, [r4, #0]
 8001388:	f7ff f8fe 	bl	8000588 <__aeabi_f2d>
 800138c:	a356      	add	r3, pc, #344	; (adr r3, 80014e8 <state501+0x248>)
 800138e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001392:	f7ff fbc3 	bl	8000b1c <__aeabi_dcmplt>
 8001396:	2800      	cmp	r0, #0
 8001398:	d051      	beq.n	800143e <state501+0x19e>
		sprintf(msg_debug, "Speed ramp requested\r\n");
 800139a:	4e63      	ldr	r6, [pc, #396]	; (8001528 <state501+0x288>)
 800139c:	4d60      	ldr	r5, [pc, #384]	; (8001520 <state501+0x280>)
		state = 503;
 800139e:	f240 13f7 	movw	r3, #503	; 0x1f7
 80013a2:	f8a8 3000 	strh.w	r3, [r8]
		sprintf(msg_debug, "Speed ramp requested\r\n");
 80013a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013aa:	e896 0003 	ldmia.w	r6, {r0, r1}
 80013ae:	f845 0b04 	str.w	r0, [r5], #4
 80013b2:	f825 1b02 	strh.w	r1, [r5], #2
 80013b6:	4628      	mov	r0, r5
 80013b8:	0c0b      	lsrs	r3, r1, #16
 80013ba:	f800 3916 	strb.w	r3, [r0], #-22
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80013be:	f7fe ff27 	bl	8000210 <strlen>
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
 80013c6:	b282      	uxth	r2, r0
 80013c8:	f1a5 0116 	sub.w	r1, r5, #22
 80013cc:	4855      	ldr	r0, [pc, #340]	; (8001524 <state501+0x284>)
 80013ce:	f005 f863 	bl	8006498 <HAL_UART_Transmit>
		if (CANRx_velocity.velocity_float < VTOL)
 80013d2:	6820      	ldr	r0, [r4, #0]
 80013d4:	f7ff f8d8 	bl	8000588 <__aeabi_f2d>
 80013d8:	a345      	add	r3, pc, #276	; (adr r3, 80014f0 <state501+0x250>)
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	f7ff fb9d 	bl	8000b1c <__aeabi_dcmplt>
 80013e2:	b360      	cbz	r0, 800143e <state501+0x19e>
			sprintf(msg_debug, "Regen requested\r\n");
 80013e4:	4e51      	ldr	r6, [pc, #324]	; (800152c <state501+0x28c>)
			state = 504;
 80013e6:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80013ea:	f8a8 3000 	strh.w	r3, [r8]
			sprintf(msg_debug, "Regen requested\r\n");
 80013ee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013f0:	f1a5 0416 	sub.w	r4, r5, #22
 80013f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013f6:	4620      	mov	r0, r4
 80013f8:	6833      	ldr	r3, [r6, #0]
 80013fa:	f820 3910 	strh.w	r3, [r0], #-16
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80013fe:	f7fe ff07 	bl	8000210 <strlen>
 8001402:	4602      	mov	r2, r0
 8001404:	f1a5 0116 	sub.w	r1, r5, #22
 8001408:	4846      	ldr	r0, [pc, #280]	; (8001524 <state501+0x284>)
}
 800140a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
 8001412:	b292      	uxth	r2, r2
 8001414:	f005 b840 	b.w	8006498 <HAL_UART_Transmit>
		sprintf(msg_debug, "State DNE\r\n");
 8001418:	4b45      	ldr	r3, [pc, #276]	; (8001530 <state501+0x290>)
 800141a:	4e41      	ldr	r6, [pc, #260]	; (8001520 <state501+0x280>)
 800141c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001420:	e886 0007 	stmia.w	r6, {r0, r1, r2}
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001424:	4630      	mov	r0, r6
 8001426:	f7fe fef3 	bl	8000210 <strlen>
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
 800142e:	b282      	uxth	r2, r0
 8001430:	4631      	mov	r1, r6
 8001432:	483c      	ldr	r0, [pc, #240]	; (8001524 <state501+0x284>)
 8001434:	f005 f830 	bl	8006498 <HAL_UART_Transmit>
		CANRx_current.current_float = 0.0;
 8001438:	2300      	movs	r3, #0
 800143a:	602b      	str	r3, [r5, #0]
		CANRx_velocity.velocity_float = 0.0;
 800143c:	6023      	str	r3, [r4, #0]
}
 800143e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if(CANTx_mtrVelocity.mtrVelocity_float < 0 && CANTx_mtrVelocity.mtrVelocity_float > -1*NMAX)
 8001442:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001534 <state501+0x294>
 8001446:	eef4 7ac7 	vcmpe.f32	s15, s14
 800144a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144e:	f77f af70 	ble.w	8001332 <state501+0x92>
		mtrDirectionFlag = -1;
 8001452:	4b2f      	ldr	r3, [pc, #188]	; (8001510 <state501+0x270>)
 8001454:	f04f 32ff 	mov.w	r2, #4294967295
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	4603      	mov	r3, r0
 800145c:	e743      	b.n	80012e6 <state501+0x46>
	else if (CANRx_velocity.velocity_float < 0)
 800145e:	d41e      	bmi.n	800149e <state501+0x1fe>
		userDirectionFlag = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	2101      	movs	r1, #1
 8001466:	f04f 30ff 	mov.w	r0, #4294967295
 800146a:	e729      	b.n	80012c0 <state501+0x20>
			&& CANRx_velocity.velocity_float <= VMAX + VTOL)
 800146c:	6820      	ldr	r0, [r4, #0]
 800146e:	f7ff f88b 	bl	8000588 <__aeabi_f2d>
 8001472:	a321      	add	r3, pc, #132	; (adr r3, 80014f8 <state501+0x258>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	4604      	mov	r4, r0
 800147a:	460d      	mov	r5, r1
 800147c:	f7ff fb58 	bl	8000b30 <__aeabi_dcmple>
 8001480:	2800      	cmp	r0, #0
 8001482:	d0dc      	beq.n	800143e <state501+0x19e>
		if (CANRx_velocity.velocity_float < VTOL)
 8001484:	a31a      	add	r3, pc, #104	; (adr r3, 80014f0 <state501+0x250>)
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	4620      	mov	r0, r4
 800148c:	4629      	mov	r1, r5
 800148e:	f7ff fb45 	bl	8000b1c <__aeabi_dcmplt>
 8001492:	b978      	cbnz	r0, 80014b4 <state501+0x214>
		state = 503;
 8001494:	f240 13f7 	movw	r3, #503	; 0x1f7
 8001498:	f8a8 3000 	strh.w	r3, [r8]
 800149c:	e7cf      	b.n	800143e <state501+0x19e>
		userDirectionFlag = -1;
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
		CANRx_velocity.velocity_float = fabs(CANRx_velocity.velocity_float);
 80014a2:	eef0 7ae7 	vabs.f32	s15, s15
 80014a6:	edc4 7a00 	vstr	s15, [r4]
		userDirectionFlag = -1;
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	2100      	movs	r1, #0
 80014ae:	f06f 0001 	mvn.w	r0, #1
 80014b2:	e705      	b.n	80012c0 <state501+0x20>
			sprintf(msg_debug, "Regen requested\r\n");
 80014b4:	4d1d      	ldr	r5, [pc, #116]	; (800152c <state501+0x28c>)
 80014b6:	4c1a      	ldr	r4, [pc, #104]	; (8001520 <state501+0x280>)
			state = 504;
 80014b8:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80014bc:	f8a8 3000 	strh.w	r3, [r8]
			sprintf(msg_debug, "Regen requested\r\n");
 80014c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014c4:	4620      	mov	r0, r4
 80014c6:	682b      	ldr	r3, [r5, #0]
 80014c8:	f820 3910 	strh.w	r3, [r0], #-16
 80014cc:	e71e      	b.n	800130c <state501+0x6c>
 80014ce:	bf00      	nop
 80014d0:	9999999a 	.word	0x9999999a
 80014d4:	3ff19999 	.word	0x3ff19999
 80014d8:	9999999a 	.word	0x9999999a
 80014dc:	3fb99999 	.word	0x3fb99999
 80014e0:	cccccccd 	.word	0xcccccccd
 80014e4:	3feccccc 	.word	0x3feccccc
 80014e8:	3c89f40b 	.word	0x3c89f40b
 80014ec:	3ffaba49 	.word	0x3ffaba49
 80014f0:	c699f47a 	.word	0xc699f47a
 80014f4:	3f712609 	.word	0x3f712609
 80014f8:	501727f3 	.word	0x501727f3
 80014fc:	3ffadc95 	.word	0x3ffadc95
 8001500:	20000554 	.word	0x20000554
 8001504:	20000904 	.word	0x20000904
 8001508:	20000594 	.word	0x20000594
 800150c:	457a0000 	.word	0x457a0000
 8001510:	200008f4 	.word	0x200008f4
 8001514:	20000550 	.word	0x20000550
 8001518:	200008fc 	.word	0x200008fc
 800151c:	08008d30 	.word	0x08008d30
 8001520:	200007ac 	.word	0x200007ac
 8001524:	20000760 	.word	0x20000760
 8001528:	08008d5c 	.word	0x08008d5c
 800152c:	08008d48 	.word	0x08008d48
 8001530:	08008d24 	.word	0x08008d24
 8001534:	c57a0000 	.word	0xc57a0000

08001538 <state505>:
{
 8001538:	b570      	push	{r4, r5, r6, lr}
 800153a:	ed2d 8b02 	vpush	{d8}
	int motorState = MC_GetSTMStateMotor1();
 800153e:	f001 ff03 	bl	8003348 <MC_GetSTMStateMotor1>
	if (CANRx_velocity.velocity_float < VTOL || CANRx_current.current_float < ITOLP) userSpin = 0;
 8001542:	4a73      	ldr	r2, [pc, #460]	; (8001710 <state505+0x1d8>)
	int motorSpeed = (int) fabs(CANTx_mtrVelocity.mtrVelocity_float); //[RPM]
 8001544:	4b73      	ldr	r3, [pc, #460]	; (8001714 <state505+0x1dc>)
	int motorState = MC_GetSTMStateMotor1();
 8001546:	4604      	mov	r4, r0
	if (CANRx_velocity.velocity_float < VTOL || CANRx_current.current_float < ITOLP) userSpin = 0;
 8001548:	6810      	ldr	r0, [r2, #0]
	int motorSpeed = (int) fabs(CANTx_mtrVelocity.mtrVelocity_float); //[RPM]
 800154a:	ed93 8a00 	vldr	s16, [r3]
	if (CANRx_velocity.velocity_float < VTOL || CANRx_current.current_float < ITOLP) userSpin = 0;
 800154e:	f7ff f81b 	bl	8000588 <__aeabi_f2d>
 8001552:	a36b      	add	r3, pc, #428	; (adr r3, 8001700 <state505+0x1c8>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	f7ff fae0 	bl	8000b1c <__aeabi_dcmplt>
	int motorState = MC_GetSTMStateMotor1();
 800155c:	4626      	mov	r6, r4
	if (CANRx_velocity.velocity_float < VTOL || CANRx_current.current_float < ITOLP) userSpin = 0;
 800155e:	2800      	cmp	r0, #0
 8001560:	d13c      	bne.n	80015dc <state505+0xa4>
 8001562:	4b6d      	ldr	r3, [pc, #436]	; (8001718 <state505+0x1e0>)
 8001564:	6818      	ldr	r0, [r3, #0]
 8001566:	f7ff f80f 	bl	8000588 <__aeabi_f2d>
 800156a:	a367      	add	r3, pc, #412	; (adr r3, 8001708 <state505+0x1d0>)
 800156c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001570:	f7ff fae8 	bl	8000b44 <__aeabi_dcmpge>
 8001574:	1e05      	subs	r5, r0, #0
 8001576:	bf18      	it	ne
 8001578:	2501      	movne	r5, #1
	if (!(motorState == 0 || motorState == 7)) STMSpin = 1; //States in state_machine.h
 800157a:	b114      	cbz	r4, 8001582 <state505+0x4a>
 800157c:	1fe6      	subs	r6, r4, #7
 800157e:	bf18      	it	ne
 8001580:	2601      	movne	r6, #1
	state = 600;
 8001582:	4b66      	ldr	r3, [pc, #408]	; (800171c <state505+0x1e4>)
	if(motorSpinupFlag == 0)
 8001584:	4c66      	ldr	r4, [pc, #408]	; (8001720 <state505+0x1e8>)
	state = 600;
 8001586:	f44f 7216 	mov.w	r2, #600	; 0x258
 800158a:	801a      	strh	r2, [r3, #0]
	if(motorSpinupFlag == 0)
 800158c:	6823      	ldr	r3, [r4, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d146      	bne.n	8001620 <state505+0xe8>
	int motorSpeed = (int) fabs(CANTx_mtrVelocity.mtrVelocity_float); //[RPM]
 8001592:	eeb0 8ac8 	vabs.f32	s16, s16
 8001596:	eebd 8ac8 	vcvt.s32.f32	s16, s16
		if      (motorSpin == 1 && userSpin == 1 && STMSpin == 1)
 800159a:	f640 729e 	movw	r2, #3998	; 0xf9e
	if (motorSpeed > 0 && motorSpeed < NMAX)
 800159e:	ee18 3a10 	vmov	r3, s16
 80015a2:	3b01      	subs	r3, #1
		if      (motorSpin == 1 && userSpin == 1 && STMSpin == 1)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d91b      	bls.n	80015e0 <state505+0xa8>
		else if (motorSpin == 0 && userSpin == 1 && STMSpin == 1)
 80015a8:	2d00      	cmp	r5, #0
 80015aa:	d144      	bne.n	8001636 <state505+0xfe>
		else if (motorSpin == 0 && userSpin == 0 && STMSpin == 1)
 80015ac:	2e01      	cmp	r6, #1
 80015ae:	d13f      	bne.n	8001630 <state505+0xf8>
			MC_StopMotor1();
 80015b0:	f001 fe94 	bl	80032dc <MC_StopMotor1>
			sprintf(msg_debug, "Motor stopped\r\n");
 80015b4:	4b5b      	ldr	r3, [pc, #364]	; (8001724 <state505+0x1ec>)
 80015b6:	4c5c      	ldr	r4, [pc, #368]	; (8001728 <state505+0x1f0>)
 80015b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80015be:	4620      	mov	r0, r4
 80015c0:	f7fe fe26 	bl	8000210 <strlen>
}
 80015c4:	ecbd 8b02 	vpop	{d8}
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80015c8:	4602      	mov	r2, r0
 80015ca:	4621      	mov	r1, r4
 80015cc:	4857      	ldr	r0, [pc, #348]	; (800172c <state505+0x1f4>)
}
 80015ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
 80015d6:	b292      	uxth	r2, r2
 80015d8:	f004 bf5e 	b.w	8006498 <HAL_UART_Transmit>
	if (CANRx_velocity.velocity_float < VTOL || CANRx_current.current_float < ITOLP) userSpin = 0;
 80015dc:	2500      	movs	r5, #0
 80015de:	e7cc      	b.n	800157a <state505+0x42>
		if      (motorSpin == 1 && userSpin == 1 && STMSpin == 1)
 80015e0:	2d00      	cmp	r5, #0
 80015e2:	d141      	bne.n	8001668 <state505+0x130>
		else if (motorSpin == 1 && userSpin == 0 && STMSpin == 1)
 80015e4:	2e01      	cmp	r6, #1
 80015e6:	d123      	bne.n	8001630 <state505+0xf8>
			sprintf(msg_debug, "User says motor should not be spinning\r\n");
 80015e8:	4d51      	ldr	r5, [pc, #324]	; (8001730 <state505+0x1f8>)
 80015ea:	4c4f      	ldr	r4, [pc, #316]	; (8001728 <state505+0x1f0>)
 80015ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015f8:	c403      	stmia	r4!, {r0, r1}
 80015fa:	4620      	mov	r0, r4
 80015fc:	f800 2928 	strb.w	r2, [r0], #-40
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001600:	f7fe fe06 	bl	8000210 <strlen>
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
 8001608:	b282      	uxth	r2, r0
 800160a:	f1a4 0128 	sub.w	r1, r4, #40	; 0x28
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 800160e:	4847      	ldr	r0, [pc, #284]	; (800172c <state505+0x1f4>)
 8001610:	f004 ff42 	bl	8006498 <HAL_UART_Transmit>
}
 8001614:	ecbd 8b02 	vpop	{d8}
 8001618:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			MC_StopMotor1();
 800161c:	f001 be5e 	b.w	80032dc <MC_StopMotor1>
		if (HAL_GetTick() - delayTimer >= MOTORSPINUPTIME)
 8001620:	f002 fff6 	bl	8004610 <HAL_GetTick>
 8001624:	4b43      	ldr	r3, [pc, #268]	; (8001734 <state505+0x1fc>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	1ac0      	subs	r0, r0, r3
 800162a:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 800162e:	d236      	bcs.n	800169e <state505+0x166>
}
 8001630:	ecbd 8b02 	vpop	{d8}
 8001634:	bd70      	pop	{r4, r5, r6, pc}
		else if (motorSpin == 0 && userSpin == 1 && STMSpin == 1)
 8001636:	2e01      	cmp	r6, #1
 8001638:	d04a      	beq.n	80016d0 <state505+0x198>
			MC_StartMotor1();
 800163a:	f001 fe49 	bl	80032d0 <MC_StartMotor1>
			sprintf(msg_debug, "Motor started\r\n");
 800163e:	4b3e      	ldr	r3, [pc, #248]	; (8001738 <state505+0x200>)
 8001640:	4e39      	ldr	r6, [pc, #228]	; (8001728 <state505+0x1f0>)
 8001642:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001644:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001648:	4630      	mov	r0, r6
 800164a:	f7fe fde1 	bl	8000210 <strlen>
 800164e:	f04f 33ff 	mov.w	r3, #4294967295
 8001652:	b282      	uxth	r2, r0
 8001654:	4631      	mov	r1, r6
 8001656:	4835      	ldr	r0, [pc, #212]	; (800172c <state505+0x1f4>)
 8001658:	f004 ff1e 	bl	8006498 <HAL_UART_Transmit>
			motorSpinupFlag = 1;
 800165c:	6025      	str	r5, [r4, #0]
			delayTimer = HAL_GetTick();
 800165e:	f002 ffd7 	bl	8004610 <HAL_GetTick>
 8001662:	4b34      	ldr	r3, [pc, #208]	; (8001734 <state505+0x1fc>)
 8001664:	8018      	strh	r0, [r3, #0]
 8001666:	e7e3      	b.n	8001630 <state505+0xf8>
		if      (motorSpin == 1 && userSpin == 1 && STMSpin == 1)
 8001668:	2e01      	cmp	r6, #1
 800166a:	d1e1      	bne.n	8001630 <state505+0xf8>
			sprintf(msg_debug, "Motor spinning as expected\r\n");
 800166c:	4d33      	ldr	r5, [pc, #204]	; (800173c <state505+0x204>)
 800166e:	4c2e      	ldr	r4, [pc, #184]	; (8001728 <state505+0x1f0>)
 8001670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001674:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001678:	c407      	stmia	r4!, {r0, r1, r2}
 800167a:	4620      	mov	r0, r4
 800167c:	f800 391c 	strb.w	r3, [r0], #-28
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001680:	f7fe fdc6 	bl	8000210 <strlen>
}
 8001684:	ecbd 8b02 	vpop	{d8}
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001688:	4602      	mov	r2, r0
 800168a:	f1a4 011c 	sub.w	r1, r4, #28
 800168e:	4827      	ldr	r0, [pc, #156]	; (800172c <state505+0x1f4>)
}
 8001690:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001694:	f04f 33ff 	mov.w	r3, #4294967295
 8001698:	b292      	uxth	r2, r2
 800169a:	f004 befd 	b.w	8006498 <HAL_UART_Transmit>
			sprintf(msg_debug, "Spinup flag reset\r\n");
 800169e:	4e28      	ldr	r6, [pc, #160]	; (8001740 <state505+0x208>)
 80016a0:	4d21      	ldr	r5, [pc, #132]	; (8001728 <state505+0x1f0>)
			motorSpinupFlag = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	6023      	str	r3, [r4, #0]
			sprintf(msg_debug, "Spinup flag reset\r\n");
 80016a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80016a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016aa:	4628      	mov	r0, r5
 80016ac:	6833      	ldr	r3, [r6, #0]
 80016ae:	f840 3910 	str.w	r3, [r0], #-16
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80016b2:	f7fe fdad 	bl	8000210 <strlen>
}
 80016b6:	ecbd 8b02 	vpop	{d8}
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80016ba:	4602      	mov	r2, r0
 80016bc:	f1a5 0110 	sub.w	r1, r5, #16
 80016c0:	481a      	ldr	r0, [pc, #104]	; (800172c <state505+0x1f4>)
}
 80016c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ca:	b292      	uxth	r2, r2
 80016cc:	f004 bee4 	b.w	8006498 <HAL_UART_Transmit>
			sprintf(msg_debug, "Motor not spinning. Stopping STM\r\n");
 80016d0:	4d1c      	ldr	r5, [pc, #112]	; (8001744 <state505+0x20c>)
 80016d2:	4c15      	ldr	r4, [pc, #84]	; (8001728 <state505+0x1f0>)
 80016d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016dc:	682b      	ldr	r3, [r5, #0]
 80016de:	f824 3b02 	strh.w	r3, [r4], #2
 80016e2:	4620      	mov	r0, r4
 80016e4:	0c1a      	lsrs	r2, r3, #16
 80016e6:	f800 2922 	strb.w	r2, [r0], #-34
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80016ea:	f7fe fd91 	bl	8000210 <strlen>
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
 80016f2:	b282      	uxth	r2, r0
 80016f4:	f1a4 0122 	sub.w	r1, r4, #34	; 0x22
 80016f8:	e789      	b.n	800160e <state505+0xd6>
 80016fa:	bf00      	nop
 80016fc:	f3af 8000 	nop.w
 8001700:	c699f47a 	.word	0xc699f47a
 8001704:	3f712609 	.word	0x3f712609
 8001708:	9999999a 	.word	0x9999999a
 800170c:	3fb99999 	.word	0x3fb99999
 8001710:	20000554 	.word	0x20000554
 8001714:	20000594 	.word	0x20000594
 8001718:	20000550 	.word	0x20000550
 800171c:	200008fc 	.word	0x200008fc
 8001720:	200007a8 	.word	0x200007a8
 8001724:	08008e30 	.word	0x08008e30
 8001728:	200007ac 	.word	0x200007ac
 800172c:	20000760 	.word	0x20000760
 8001730:	08008dd0 	.word	0x08008dd0
 8001734:	2000060c 	.word	0x2000060c
 8001738:	08008e20 	.word	0x08008e20
 800173c:	08008db0 	.word	0x08008db0
 8001740:	08008e40 	.word	0x08008e40
 8001744:	08008dfc 	.word	0x08008dfc

08001748 <state699>:
{
 8001748:	b538      	push	{r3, r4, r5, lr}
	sprintf(msg_debug, "100x CANRx_velocity float (m/s): %hu\r\n", (int) (CANRx_velocity.velocity_float*100.0));
 800174a:	4b71      	ldr	r3, [pc, #452]	; (8001910 <state699+0x1c8>)
 800174c:	4c71      	ldr	r4, [pc, #452]	; (8001914 <state699+0x1cc>)
 800174e:	6818      	ldr	r0, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001750:	4d71      	ldr	r5, [pc, #452]	; (8001918 <state699+0x1d0>)
	sprintf(msg_debug, "100x CANRx_velocity float (m/s): %hu\r\n", (int) (CANRx_velocity.velocity_float*100.0));
 8001752:	f7fe ff19 	bl	8000588 <__aeabi_f2d>
 8001756:	4b71      	ldr	r3, [pc, #452]	; (800191c <state699+0x1d4>)
 8001758:	2200      	movs	r2, #0
 800175a:	f7fe ff6d 	bl	8000638 <__aeabi_dmul>
 800175e:	f7ff fa1b 	bl	8000b98 <__aeabi_d2iz>
 8001762:	496f      	ldr	r1, [pc, #444]	; (8001920 <state699+0x1d8>)
 8001764:	4602      	mov	r2, r0
 8001766:	4620      	mov	r0, r4
 8001768:	f006 fc22 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 800176c:	4620      	mov	r0, r4
 800176e:	f7fe fd4f 	bl	8000210 <strlen>
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
 8001776:	b282      	uxth	r2, r0
 8001778:	4621      	mov	r1, r4
 800177a:	4628      	mov	r0, r5
 800177c:	f004 fe8c 	bl	8006498 <HAL_UART_Transmit>
	sprintf(msg_debug, "100x CANRx_current float: %hu\r\n", (int) (100.0*CANRx_current.current_float));
 8001780:	4b68      	ldr	r3, [pc, #416]	; (8001924 <state699+0x1dc>)
 8001782:	6818      	ldr	r0, [r3, #0]
 8001784:	f7fe ff00 	bl	8000588 <__aeabi_f2d>
 8001788:	4b64      	ldr	r3, [pc, #400]	; (800191c <state699+0x1d4>)
 800178a:	2200      	movs	r2, #0
 800178c:	f7fe ff54 	bl	8000638 <__aeabi_dmul>
 8001790:	f7ff fa02 	bl	8000b98 <__aeabi_d2iz>
 8001794:	4964      	ldr	r1, [pc, #400]	; (8001928 <state699+0x1e0>)
 8001796:	4602      	mov	r2, r0
 8001798:	4620      	mov	r0, r4
 800179a:	f006 fc09 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 800179e:	4620      	mov	r0, r4
 80017a0:	f7fe fd36 	bl	8000210 <strlen>
 80017a4:	f04f 33ff 	mov.w	r3, #4294967295
 80017a8:	b282      	uxth	r2, r0
 80017aa:	4621      	mov	r1, r4
 80017ac:	4628      	mov	r0, r5
 80017ae:	f004 fe73 	bl	8006498 <HAL_UART_Transmit>
	sprintf(msg_debug, "100x DC current: %hu\r\n", (int) (100.0*CANTx_busCurrent.busCurrent_float));
 80017b2:	4b5e      	ldr	r3, [pc, #376]	; (800192c <state699+0x1e4>)
 80017b4:	6818      	ldr	r0, [r3, #0]
 80017b6:	f7fe fee7 	bl	8000588 <__aeabi_f2d>
 80017ba:	4b58      	ldr	r3, [pc, #352]	; (800191c <state699+0x1d4>)
 80017bc:	2200      	movs	r2, #0
 80017be:	f7fe ff3b 	bl	8000638 <__aeabi_dmul>
 80017c2:	f7ff f9e9 	bl	8000b98 <__aeabi_d2iz>
 80017c6:	495a      	ldr	r1, [pc, #360]	; (8001930 <state699+0x1e8>)
 80017c8:	4602      	mov	r2, r0
 80017ca:	4620      	mov	r0, r4
 80017cc:	f006 fbf0 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80017d0:	4620      	mov	r0, r4
 80017d2:	f7fe fd1d 	bl	8000210 <strlen>
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295
 80017da:	b282      	uxth	r2, r0
 80017dc:	4621      	mov	r1, r4
 80017de:	4628      	mov	r0, r5
 80017e0:	f004 fe5a 	bl	8006498 <HAL_UART_Transmit>
	sprintf(msg_debug, "100x DC voltage: %hu\r\n", (int) (100.0*CANTx_busVoltage.busVoltage_float));
 80017e4:	4b53      	ldr	r3, [pc, #332]	; (8001934 <state699+0x1ec>)
 80017e6:	6818      	ldr	r0, [r3, #0]
 80017e8:	f7fe fece 	bl	8000588 <__aeabi_f2d>
 80017ec:	4b4b      	ldr	r3, [pc, #300]	; (800191c <state699+0x1d4>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	f7fe ff22 	bl	8000638 <__aeabi_dmul>
 80017f4:	f7ff f9d0 	bl	8000b98 <__aeabi_d2iz>
 80017f8:	494f      	ldr	r1, [pc, #316]	; (8001938 <state699+0x1f0>)
 80017fa:	4602      	mov	r2, r0
 80017fc:	4620      	mov	r0, r4
 80017fe:	f006 fbd7 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001802:	4620      	mov	r0, r4
 8001804:	f7fe fd04 	bl	8000210 <strlen>
 8001808:	f04f 33ff 	mov.w	r3, #4294967295
 800180c:	b282      	uxth	r2, r0
 800180e:	4621      	mov	r1, r4
 8001810:	4628      	mov	r0, r5
 8001812:	f004 fe41 	bl	8006498 <HAL_UART_Transmit>
	sprintf(msg_debug, "Current motor speed (RPM): %hu\r\n", (int) CANTx_mtrVelocity.mtrVelocity_float);
 8001816:	4b49      	ldr	r3, [pc, #292]	; (800193c <state699+0x1f4>)
 8001818:	4949      	ldr	r1, [pc, #292]	; (8001940 <state699+0x1f8>)
 800181a:	edd3 7a00 	vldr	s15, [r3]
 800181e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001822:	4620      	mov	r0, r4
 8001824:	ee17 2a90 	vmov	r2, s15
 8001828:	f006 fbc2 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 800182c:	4620      	mov	r0, r4
 800182e:	f7fe fcef 	bl	8000210 <strlen>
 8001832:	f04f 33ff 	mov.w	r3, #4294967295
 8001836:	b282      	uxth	r2, r0
 8001838:	4621      	mov	r1, r4
 800183a:	4628      	mov	r0, r5
 800183c:	f004 fe2c 	bl	8006498 <HAL_UART_Transmit>
	sprintf(msg_debug, "Current vehicle speed (m/s): %hu\r\n", (int) CANTx_carVelocity.carVelocity_float);
 8001840:	4b40      	ldr	r3, [pc, #256]	; (8001944 <state699+0x1fc>)
 8001842:	4941      	ldr	r1, [pc, #260]	; (8001948 <state699+0x200>)
 8001844:	edd3 7a00 	vldr	s15, [r3]
 8001848:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800184c:	4620      	mov	r0, r4
 800184e:	ee17 2a90 	vmov	r2, s15
 8001852:	f006 fbad 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001856:	4620      	mov	r0, r4
 8001858:	f7fe fcda 	bl	8000210 <strlen>
 800185c:	f04f 33ff 	mov.w	r3, #4294967295
 8001860:	b282      	uxth	r2, r0
 8001862:	4621      	mov	r1, r4
 8001864:	4628      	mov	r0, r5
 8001866:	f004 fe17 	bl	8006498 <HAL_UART_Transmit>
	sprintf(msg_debug, "100x Motor phase current: %hu\r\n", (int) (100.0*CANTx_phaseCurrent.phaseCurrent_float));
 800186a:	4b38      	ldr	r3, [pc, #224]	; (800194c <state699+0x204>)
 800186c:	6818      	ldr	r0, [r3, #0]
 800186e:	f7fe fe8b 	bl	8000588 <__aeabi_f2d>
 8001872:	4b2a      	ldr	r3, [pc, #168]	; (800191c <state699+0x1d4>)
 8001874:	2200      	movs	r2, #0
 8001876:	f7fe fedf 	bl	8000638 <__aeabi_dmul>
 800187a:	f7ff f98d 	bl	8000b98 <__aeabi_d2iz>
 800187e:	4934      	ldr	r1, [pc, #208]	; (8001950 <state699+0x208>)
 8001880:	4602      	mov	r2, r0
 8001882:	4620      	mov	r0, r4
 8001884:	f006 fb94 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001888:	4620      	mov	r0, r4
 800188a:	f7fe fcc1 	bl	8000210 <strlen>
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
 8001892:	b282      	uxth	r2, r0
 8001894:	4621      	mov	r1, r4
 8001896:	4628      	mov	r0, r5
 8001898:	f004 fdfe 	bl	8006498 <HAL_UART_Transmit>
	sprintf(msg_debug, "10x Motor temp: %hu\r\n", (int) (10.0*CANTx_mtrTemp.mtrTemp_float));
 800189c:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <state699+0x20c>)
 800189e:	6818      	ldr	r0, [r3, #0]
 80018a0:	f7fe fe72 	bl	8000588 <__aeabi_f2d>
 80018a4:	4b2c      	ldr	r3, [pc, #176]	; (8001958 <state699+0x210>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	f7fe fec6 	bl	8000638 <__aeabi_dmul>
 80018ac:	f7ff f974 	bl	8000b98 <__aeabi_d2iz>
 80018b0:	492a      	ldr	r1, [pc, #168]	; (800195c <state699+0x214>)
 80018b2:	4602      	mov	r2, r0
 80018b4:	4620      	mov	r0, r4
 80018b6:	f006 fb7b 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80018ba:	4620      	mov	r0, r4
 80018bc:	f7fe fca8 	bl	8000210 <strlen>
 80018c0:	f04f 33ff 	mov.w	r3, #4294967295
 80018c4:	b282      	uxth	r2, r0
 80018c6:	4621      	mov	r1, r4
 80018c8:	4628      	mov	r0, r5
 80018ca:	f004 fde5 	bl	8006498 <HAL_UART_Transmit>
	sprintf(msg_debug, "10x FET temp: %hu\r\n", (int) (10.0*CANTx_FETTemp.FETTemp_float));
 80018ce:	4b24      	ldr	r3, [pc, #144]	; (8001960 <state699+0x218>)
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	f7fe fe59 	bl	8000588 <__aeabi_f2d>
 80018d6:	4b20      	ldr	r3, [pc, #128]	; (8001958 <state699+0x210>)
 80018d8:	2200      	movs	r2, #0
 80018da:	f7fe fead 	bl	8000638 <__aeabi_dmul>
 80018de:	f7ff f95b 	bl	8000b98 <__aeabi_d2iz>
 80018e2:	4920      	ldr	r1, [pc, #128]	; (8001964 <state699+0x21c>)
 80018e4:	4602      	mov	r2, r0
 80018e6:	4620      	mov	r0, r4
 80018e8:	f006 fb62 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80018ec:	4620      	mov	r0, r4
 80018ee:	f7fe fc8f 	bl	8000210 <strlen>
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
 80018f6:	b282      	uxth	r2, r0
 80018f8:	4621      	mov	r1, r4
 80018fa:	4628      	mov	r0, r5
 80018fc:	f004 fdcc 	bl	8006498 <HAL_UART_Transmit>
	HAL_Delay(100);
 8001900:	2064      	movs	r0, #100	; 0x64
 8001902:	f002 fe8b 	bl	800461c <HAL_Delay>
	state = 000;
 8001906:	4b18      	ldr	r3, [pc, #96]	; (8001968 <state699+0x220>)
 8001908:	2200      	movs	r2, #0
 800190a:	801a      	strh	r2, [r3, #0]
}
 800190c:	bd38      	pop	{r3, r4, r5, pc}
 800190e:	bf00      	nop
 8001910:	20000554 	.word	0x20000554
 8001914:	200007ac 	.word	0x200007ac
 8001918:	20000760 	.word	0x20000760
 800191c:	40590000 	.word	0x40590000
 8001920:	08008e9c 	.word	0x08008e9c
 8001924:	20000550 	.word	0x20000550
 8001928:	08008ec4 	.word	0x08008ec4
 800192c:	20000584 	.word	0x20000584
 8001930:	08008ee4 	.word	0x08008ee4
 8001934:	20000588 	.word	0x20000588
 8001938:	08008efc 	.word	0x08008efc
 800193c:	20000594 	.word	0x20000594
 8001940:	08008f14 	.word	0x08008f14
 8001944:	2000058c 	.word	0x2000058c
 8001948:	08008f38 	.word	0x08008f38
 800194c:	20000598 	.word	0x20000598
 8001950:	08008f5c 	.word	0x08008f5c
 8001954:	20000590 	.word	0x20000590
 8001958:	40240000 	.word	0x40240000
 800195c:	08008f7c 	.word	0x08008f7c
 8001960:	20000580 	.word	0x20000580
 8001964:	08008f94 	.word	0x08008f94
 8001968:	200008fc 	.word	0x200008fc

0800196c <fsmInit>:
	Pot1Conv.regADC = ADC1; /* to be modify to match your ADC */
 800196c:	4823      	ldr	r0, [pc, #140]	; (80019fc <fsmInit+0x90>)
{
 800196e:	b538      	push	{r3, r4, r5, lr}
	Pot1Conv.samplingTime = ADC_SAMPLETIME_3CYCLES; /* to be modify to match your sampling time */
 8001970:	2400      	movs	r4, #0
	Pot1Conv.regADC = ADC1; /* to be modify to match your ADC */
 8001972:	4d23      	ldr	r5, [pc, #140]	; (8001a00 <fsmInit+0x94>)
 8001974:	6005      	str	r5, [r0, #0]
	Pot1Conv.channel = ADC_CHANNEL_8;/* to be modify to match your ADC channel */
 8001976:	2308      	movs	r3, #8
 8001978:	7103      	strb	r3, [r0, #4]
	Pot1Conv.samplingTime = ADC_SAMPLETIME_3CYCLES; /* to be modify to match your sampling time */
 800197a:	6084      	str	r4, [r0, #8]
	Pot1Handle = RCM_RegisterRegConv (&Pot1Conv);
 800197c:	f002 f9b4 	bl	8003ce8 <RCM_RegisterRegConv>
	Pot2Conv.regADC = ADC1; /* to be modify to match your ADC */
 8001980:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <fsmInit+0x98>)
	Pot1Handle = RCM_RegisterRegConv (&Pot1Conv);
 8001982:	4a21      	ldr	r2, [pc, #132]	; (8001a08 <fsmInit+0x9c>)
	Pot2Conv.regADC = ADC1; /* to be modify to match your ADC */
 8001984:	601d      	str	r5, [r3, #0]
	Pot1Handle = RCM_RegisterRegConv (&Pot1Conv);
 8001986:	7010      	strb	r0, [r2, #0]
	Pot2Conv.channel = ADC_CHANNEL_7;/* to be modify to match your ADC channel */
 8001988:	2207      	movs	r2, #7
	Pot2Handle = RCM_RegisterRegConv (&Pot2Conv);
 800198a:	4618      	mov	r0, r3
	Pot2Conv.channel = ADC_CHANNEL_7;/* to be modify to match your ADC channel */
 800198c:	711a      	strb	r2, [r3, #4]
	Pot2Conv.samplingTime = ADC_SAMPLETIME_3CYCLES; /* to be modify to match your sampling time */
 800198e:	609c      	str	r4, [r3, #8]
	Pot2Handle = RCM_RegisterRegConv (&Pot2Conv);
 8001990:	f002 f9aa 	bl	8003ce8 <RCM_RegisterRegConv>
	DCCurrConv.regADC = ADC1;
 8001994:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <fsmInit+0xa0>)
	Pot2Handle = RCM_RegisterRegConv (&Pot2Conv);
 8001996:	4a1e      	ldr	r2, [pc, #120]	; (8001a10 <fsmInit+0xa4>)
	DCCurrConv.regADC = ADC1;
 8001998:	601d      	str	r5, [r3, #0]
	Pot2Handle = RCM_RegisterRegConv (&Pot2Conv);
 800199a:	7010      	strb	r0, [r2, #0]
	DCCurrHandle = RCM_RegisterRegConv (&DCCurrConv);
 800199c:	4618      	mov	r0, r3
	DCCurrConv.channel = ADC_CHANNEL_0;
 800199e:	711c      	strb	r4, [r3, #4]
	DCCurrConv.samplingTime = ADC_SAMPLETIME_3CYCLES;
 80019a0:	609c      	str	r4, [r3, #8]
	DCCurrHandle = RCM_RegisterRegConv (&DCCurrConv);
 80019a2:	f002 f9a1 	bl	8003ce8 <RCM_RegisterRegConv>
	ThermAHConv.regADC = ADC1;
 80019a6:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <fsmInit+0xa8>)
	DCCurrHandle = RCM_RegisterRegConv (&DCCurrConv);
 80019a8:	4a1b      	ldr	r2, [pc, #108]	; (8001a18 <fsmInit+0xac>)
	ThermAHConv.regADC = ADC1;
 80019aa:	601d      	str	r5, [r3, #0]
	DCCurrHandle = RCM_RegisterRegConv (&DCCurrConv);
 80019ac:	7010      	strb	r0, [r2, #0]
	ThermAHConv.channel = ADC_CHANNEL_12;
 80019ae:	220c      	movs	r2, #12
	ThermAHHandle = RCM_RegisterRegConv (&ThermAHConv);
 80019b0:	4618      	mov	r0, r3
	ThermAHConv.channel = ADC_CHANNEL_12;
 80019b2:	711a      	strb	r2, [r3, #4]
	ThermAHConv.samplingTime = ADC_SAMPLETIME_3CYCLES;
 80019b4:	609c      	str	r4, [r3, #8]
	ThermAHHandle = RCM_RegisterRegConv (&ThermAHConv);
 80019b6:	f002 f997 	bl	8003ce8 <RCM_RegisterRegConv>
	ThermALConv.regADC = ADC1;
 80019ba:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <fsmInit+0xb0>)
	ThermAHHandle = RCM_RegisterRegConv (&ThermAHConv);
 80019bc:	4a18      	ldr	r2, [pc, #96]	; (8001a20 <fsmInit+0xb4>)
	ThermALConv.regADC = ADC1;
 80019be:	601d      	str	r5, [r3, #0]
	ThermAHHandle = RCM_RegisterRegConv (&ThermAHConv);
 80019c0:	7010      	strb	r0, [r2, #0]
	ThermALConv.channel = ADC_CHANNEL_13;
 80019c2:	220d      	movs	r2, #13
	ThermALHandle = RCM_RegisterRegConv (&ThermALConv);
 80019c4:	4618      	mov	r0, r3
	ThermALConv.channel = ADC_CHANNEL_13;
 80019c6:	711a      	strb	r2, [r3, #4]
	ThermALConv.samplingTime = ADC_SAMPLETIME_3CYCLES;
 80019c8:	609c      	str	r4, [r3, #8]
	ThermALHandle = RCM_RegisterRegConv (&ThermALConv);
 80019ca:	f002 f98d 	bl	8003ce8 <RCM_RegisterRegConv>
	ThermBHConv.regADC = ADC1;
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <fsmInit+0xb8>)
	ThermALHandle = RCM_RegisterRegConv (&ThermALConv);
 80019d0:	4a15      	ldr	r2, [pc, #84]	; (8001a28 <fsmInit+0xbc>)
	ThermBHConv.regADC = ADC1;
 80019d2:	601d      	str	r5, [r3, #0]
	ThermALHandle = RCM_RegisterRegConv (&ThermALConv);
 80019d4:	7010      	strb	r0, [r2, #0]
	ThermBHConv.channel = ADC_CHANNEL_11;
 80019d6:	220b      	movs	r2, #11
	ThermBHHandle = RCM_RegisterRegConv (&ThermBHConv);
 80019d8:	4618      	mov	r0, r3
	ThermBHConv.channel = ADC_CHANNEL_11;
 80019da:	711a      	strb	r2, [r3, #4]
	ThermBHConv.samplingTime = ADC_SAMPLETIME_3CYCLES;
 80019dc:	609c      	str	r4, [r3, #8]
	ThermBHHandle = RCM_RegisterRegConv (&ThermBHConv);
 80019de:	f002 f983 	bl	8003ce8 <RCM_RegisterRegConv>
	ThermBLConv.regADC = ADC1;
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <fsmInit+0xc0>)
	ThermBHHandle = RCM_RegisterRegConv (&ThermBHConv);
 80019e4:	4912      	ldr	r1, [pc, #72]	; (8001a30 <fsmInit+0xc4>)
	ThermBLConv.regADC = ADC1;
 80019e6:	601d      	str	r5, [r3, #0]
	ThermBLConv.channel = ADC_CHANNEL_10;
 80019e8:	220a      	movs	r2, #10
	ThermBHHandle = RCM_RegisterRegConv (&ThermBHConv);
 80019ea:	7008      	strb	r0, [r1, #0]
	ThermBLHandle = RCM_RegisterRegConv (&ThermBLConv);
 80019ec:	4618      	mov	r0, r3
	ThermBLConv.channel = ADC_CHANNEL_10;
 80019ee:	711a      	strb	r2, [r3, #4]
	ThermBLConv.samplingTime = ADC_SAMPLETIME_3CYCLES;
 80019f0:	609c      	str	r4, [r3, #8]
	ThermBLHandle = RCM_RegisterRegConv (&ThermBLConv);
 80019f2:	f002 f979 	bl	8003ce8 <RCM_RegisterRegConv>
 80019f6:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <fsmInit+0xc8>)
 80019f8:	7018      	strb	r0, [r3, #0]
}
 80019fa:	bd38      	pop	{r3, r4, r5, pc}
 80019fc:	200005ac 	.word	0x200005ac
 8001a00:	40012000 	.word	0x40012000
 8001a04:	200005bc 	.word	0x200005bc
 8001a08:	200005b8 	.word	0x200005b8
 8001a0c:	2000059c 	.word	0x2000059c
 8001a10:	200005c8 	.word	0x200005c8
 8001a14:	200005cc 	.word	0x200005cc
 8001a18:	200005a8 	.word	0x200005a8
 8001a1c:	200005dc 	.word	0x200005dc
 8001a20:	200005d8 	.word	0x200005d8
 8001a24:	200005ec 	.word	0x200005ec
 8001a28:	200005e8 	.word	0x200005e8
 8001a2c:	200005fc 	.word	0x200005fc
 8001a30:	200005f8 	.word	0x200005f8
 8001a34:	20000608 	.word	0x20000608

08001a38 <sendCANMessage>:
{
 8001a38:	b570      	push	{r4, r5, r6, lr}
	CANTxData[0] = (LowDataByte & 0x000000ff) >>  0;
 8001a3a:	4c12      	ldr	r4, [pc, #72]	; (8001a84 <sendCANMessage+0x4c>)
	CANTxHeader.StdId = CANTXBASEID + IDBonus;
 8001a3c:	4d12      	ldr	r5, [pc, #72]	; (8001a88 <sendCANMessage+0x50>)
	if( HAL_CAN_AddTxMessage(&hcan1, &CANTxHeader, CANTxData, &CANTxMailbox) != HAL_OK)
 8001a3e:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <sendCANMessage+0x54>)
{
 8001a40:	460e      	mov	r6, r1
	CANTxHeader.StdId = CANTXBASEID + IDBonus;
 8001a42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
	CANTxData[4] = (HighDataByte & 0x000000ff) >>  0;
 8001a46:	e9c4 0600 	strd	r0, r6, [r4]
	CANTxHeader.StdId = CANTXBASEID + IDBonus;
 8001a4a:	602a      	str	r2, [r5, #0]
	if( HAL_CAN_AddTxMessage(&hcan1, &CANTxHeader, CANTxData, &CANTxMailbox) != HAL_OK)
 8001a4c:	4810      	ldr	r0, [pc, #64]	; (8001a90 <sendCANMessage+0x58>)
 8001a4e:	4629      	mov	r1, r5
 8001a50:	4622      	mov	r2, r4
 8001a52:	f003 f981 	bl	8004d58 <HAL_CAN_AddTxMessage>
 8001a56:	b900      	cbnz	r0, 8001a5a <sendCANMessage+0x22>
}
 8001a58:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(msg_debug, "Send error\r\n");
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <sendCANMessage+0x5c>)
 8001a5c:	4c0e      	ldr	r4, [pc, #56]	; (8001a98 <sendCANMessage+0x60>)
 8001a5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a60:	c407      	stmia	r4!, {r0, r1, r2}
 8001a62:	4620      	mov	r0, r4
 8001a64:	f800 390c 	strb.w	r3, [r0], #-12
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001a68:	f7fe fbd2 	bl	8000210 <strlen>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	f1a4 010c 	sub.w	r1, r4, #12
 8001a72:	480a      	ldr	r0, [pc, #40]	; (8001a9c <sendCANMessage+0x64>)
}
 8001a74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001a78:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7c:	b292      	uxth	r2, r2
 8001a7e:	f004 bd0b 	b.w	8006498 <HAL_UART_Transmit>
 8001a82:	bf00      	nop
 8001a84:	20000558 	.word	0x20000558
 8001a88:	20000560 	.word	0x20000560
 8001a8c:	20000578 	.word	0x20000578
 8001a90:	200006a8 	.word	0x200006a8
 8001a94:	08008e54 	.word	0x08008e54
 8001a98:	200007ac 	.word	0x200007ac
 8001a9c:	20000760 	.word	0x20000760

08001aa0 <state602>:
{
 8001aa0:	b570      	push	{r4, r5, r6, lr}
	sendCANMessage(CANTx_busVoltage.busVoltage_int, CANTx_busCurrent.busCurrent_int, 2);
 8001aa2:	4c1f      	ldr	r4, [pc, #124]	; (8001b20 <state602+0x80>)
 8001aa4:	4e1f      	ldr	r6, [pc, #124]	; (8001b24 <state602+0x84>)
 8001aa6:	6820      	ldr	r0, [r4, #0]
 8001aa8:	6831      	ldr	r1, [r6, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001aaa:	4d1f      	ldr	r5, [pc, #124]	; (8001b28 <state602+0x88>)
	sendCANMessage(CANTx_busVoltage.busVoltage_int, CANTx_busCurrent.busCurrent_int, 2);
 8001aac:	2202      	movs	r2, #2
 8001aae:	f7ff ffc3 	bl	8001a38 <sendCANMessage>
	sprintf(msg_debug, "10x Bus voltage sent: %lu\r\n", (uint32_t) (10.0 * CANTx_busVoltage.busVoltage_float));
 8001ab2:	6820      	ldr	r0, [r4, #0]
 8001ab4:	4c1d      	ldr	r4, [pc, #116]	; (8001b2c <state602+0x8c>)
 8001ab6:	f7fe fd67 	bl	8000588 <__aeabi_f2d>
 8001aba:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <state602+0x90>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	f7fe fdbb 	bl	8000638 <__aeabi_dmul>
 8001ac2:	f7ff f891 	bl	8000be8 <__aeabi_d2uiz>
 8001ac6:	491b      	ldr	r1, [pc, #108]	; (8001b34 <state602+0x94>)
 8001ac8:	4602      	mov	r2, r0
 8001aca:	4620      	mov	r0, r4
 8001acc:	f006 fa70 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	f7fe fb9d 	bl	8000210 <strlen>
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ada:	b282      	uxth	r2, r0
 8001adc:	4621      	mov	r1, r4
 8001ade:	4628      	mov	r0, r5
 8001ae0:	f004 fcda 	bl	8006498 <HAL_UART_Transmit>
	sprintf(msg_debug, "100x Bus current sent: %lu\r\n", (uint32_t) (100.0 * CANTx_busCurrent.busCurrent_float));
 8001ae4:	6830      	ldr	r0, [r6, #0]
 8001ae6:	f7fe fd4f 	bl	8000588 <__aeabi_f2d>
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <state602+0x98>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	f7fe fda3 	bl	8000638 <__aeabi_dmul>
 8001af2:	f7ff f879 	bl	8000be8 <__aeabi_d2uiz>
 8001af6:	4911      	ldr	r1, [pc, #68]	; (8001b3c <state602+0x9c>)
 8001af8:	4602      	mov	r2, r0
 8001afa:	4620      	mov	r0, r4
 8001afc:	f006 fa58 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001b00:	4620      	mov	r0, r4
 8001b02:	f7fe fb85 	bl	8000210 <strlen>
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0a:	b282      	uxth	r2, r0
 8001b0c:	4621      	mov	r1, r4
 8001b0e:	4628      	mov	r0, r5
 8001b10:	f004 fcc2 	bl	8006498 <HAL_UART_Transmit>
	state = 603;
 8001b14:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <state602+0xa0>)
 8001b16:	f240 225b 	movw	r2, #603	; 0x25b
 8001b1a:	801a      	strh	r2, [r3, #0]
}
 8001b1c:	bd70      	pop	{r4, r5, r6, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000588 	.word	0x20000588
 8001b24:	20000584 	.word	0x20000584
 8001b28:	20000760 	.word	0x20000760
 8001b2c:	200007ac 	.word	0x200007ac
 8001b30:	40240000 	.word	0x40240000
 8001b34:	08008fa8 	.word	0x08008fa8
 8001b38:	40590000 	.word	0x40590000
 8001b3c:	08008fc4 	.word	0x08008fc4
 8001b40:	200008fc 	.word	0x200008fc

08001b44 <state603>:
{
 8001b44:	b570      	push	{r4, r5, r6, lr}
	sendCANMessage(CANTx_mtrVelocity.mtrVelocity_int, CANTx_carVelocity.carVelocity_int, 3);
 8001b46:	4c1f      	ldr	r4, [pc, #124]	; (8001bc4 <state603+0x80>)
 8001b48:	4e1f      	ldr	r6, [pc, #124]	; (8001bc8 <state603+0x84>)
 8001b4a:	6820      	ldr	r0, [r4, #0]
 8001b4c:	6831      	ldr	r1, [r6, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001b4e:	4d1f      	ldr	r5, [pc, #124]	; (8001bcc <state603+0x88>)
	sendCANMessage(CANTx_mtrVelocity.mtrVelocity_int, CANTx_carVelocity.carVelocity_int, 3);
 8001b50:	2203      	movs	r2, #3
 8001b52:	f7ff ff71 	bl	8001a38 <sendCANMessage>
	sprintf(msg_debug, "100x Motor velocity sent: %lu\r\n", (uint32_t) (100.0 * CANTx_mtrVelocity.mtrVelocity_float));
 8001b56:	6820      	ldr	r0, [r4, #0]
 8001b58:	4c1d      	ldr	r4, [pc, #116]	; (8001bd0 <state603+0x8c>)
 8001b5a:	f7fe fd15 	bl	8000588 <__aeabi_f2d>
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <state603+0x90>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	f7fe fd69 	bl	8000638 <__aeabi_dmul>
 8001b66:	f7ff f83f 	bl	8000be8 <__aeabi_d2uiz>
 8001b6a:	491b      	ldr	r1, [pc, #108]	; (8001bd8 <state603+0x94>)
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	4620      	mov	r0, r4
 8001b70:	f006 fa1e 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001b74:	4620      	mov	r0, r4
 8001b76:	f7fe fb4b 	bl	8000210 <strlen>
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7e:	b282      	uxth	r2, r0
 8001b80:	4621      	mov	r1, r4
 8001b82:	4628      	mov	r0, r5
 8001b84:	f004 fc88 	bl	8006498 <HAL_UART_Transmit>
	sprintf(msg_debug, "100x Car velocity sent: %lu\r\n", (uint32_t) (100.0 * CANTx_carVelocity.carVelocity_float));
 8001b88:	6830      	ldr	r0, [r6, #0]
 8001b8a:	f7fe fcfd 	bl	8000588 <__aeabi_f2d>
 8001b8e:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <state603+0x90>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	f7fe fd51 	bl	8000638 <__aeabi_dmul>
 8001b96:	f7ff f827 	bl	8000be8 <__aeabi_d2uiz>
 8001b9a:	4910      	ldr	r1, [pc, #64]	; (8001bdc <state603+0x98>)
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	f006 fa06 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	f7fe fb33 	bl	8000210 <strlen>
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bae:	b282      	uxth	r2, r0
 8001bb0:	4621      	mov	r1, r4
 8001bb2:	4628      	mov	r0, r5
 8001bb4:	f004 fc70 	bl	8006498 <HAL_UART_Transmit>
	state = 604;
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <state603+0x9c>)
 8001bba:	f44f 7217 	mov.w	r2, #604	; 0x25c
 8001bbe:	801a      	strh	r2, [r3, #0]
}
 8001bc0:	bd70      	pop	{r4, r5, r6, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000594 	.word	0x20000594
 8001bc8:	2000058c 	.word	0x2000058c
 8001bcc:	20000760 	.word	0x20000760
 8001bd0:	200007ac 	.word	0x200007ac
 8001bd4:	40590000 	.word	0x40590000
 8001bd8:	08008fe4 	.word	0x08008fe4
 8001bdc:	08009004 	.word	0x08009004
 8001be0:	200008fc 	.word	0x200008fc

08001be4 <state605>:
{
 8001be4:	b570      	push	{r4, r5, r6, lr}
	sendCANMessage(CANTx_mtrTemp.mtrTemp_int, CANTx_FETTemp.FETTemp_int, 11);
 8001be6:	4c1e      	ldr	r4, [pc, #120]	; (8001c60 <state605+0x7c>)
 8001be8:	4e1e      	ldr	r6, [pc, #120]	; (8001c64 <state605+0x80>)
 8001bea:	6820      	ldr	r0, [r4, #0]
 8001bec:	6831      	ldr	r1, [r6, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001bee:	4d1e      	ldr	r5, [pc, #120]	; (8001c68 <state605+0x84>)
	sendCANMessage(CANTx_mtrTemp.mtrTemp_int, CANTx_FETTemp.FETTemp_int, 11);
 8001bf0:	220b      	movs	r2, #11
 8001bf2:	f7ff ff21 	bl	8001a38 <sendCANMessage>
	sprintf(msg_debug, "10x Motor temp sent: %lu\r\n", (uint32_t) (10.0 * CANTx_mtrTemp.mtrTemp_float));
 8001bf6:	6820      	ldr	r0, [r4, #0]
 8001bf8:	4c1c      	ldr	r4, [pc, #112]	; (8001c6c <state605+0x88>)
 8001bfa:	f7fe fcc5 	bl	8000588 <__aeabi_f2d>
 8001bfe:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <state605+0x8c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	f7fe fd19 	bl	8000638 <__aeabi_dmul>
 8001c06:	f7fe ffef 	bl	8000be8 <__aeabi_d2uiz>
 8001c0a:	491a      	ldr	r1, [pc, #104]	; (8001c74 <state605+0x90>)
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	4620      	mov	r0, r4
 8001c10:	f006 f9ce 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001c14:	4620      	mov	r0, r4
 8001c16:	f7fe fafb 	bl	8000210 <strlen>
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1e:	b282      	uxth	r2, r0
 8001c20:	4621      	mov	r1, r4
 8001c22:	4628      	mov	r0, r5
 8001c24:	f004 fc38 	bl	8006498 <HAL_UART_Transmit>
	sprintf(msg_debug, "10x FET temp sent: %lu\r\n", (uint32_t) (10.0 * CANTx_FETTemp.FETTemp_float));
 8001c28:	6830      	ldr	r0, [r6, #0]
 8001c2a:	f7fe fcad 	bl	8000588 <__aeabi_f2d>
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <state605+0x8c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	f7fe fd01 	bl	8000638 <__aeabi_dmul>
 8001c36:	f7fe ffd7 	bl	8000be8 <__aeabi_d2uiz>
 8001c3a:	490f      	ldr	r1, [pc, #60]	; (8001c78 <state605+0x94>)
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4620      	mov	r0, r4
 8001c40:	f006 f9b6 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001c44:	4620      	mov	r0, r4
 8001c46:	f7fe fae3 	bl	8000210 <strlen>
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4e:	b282      	uxth	r2, r0
 8001c50:	4621      	mov	r1, r4
 8001c52:	4628      	mov	r0, r5
 8001c54:	f004 fc20 	bl	8006498 <HAL_UART_Transmit>
	state = 0;
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <state605+0x98>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	801a      	strh	r2, [r3, #0]
}
 8001c5e:	bd70      	pop	{r4, r5, r6, pc}
 8001c60:	20000590 	.word	0x20000590
 8001c64:	20000580 	.word	0x20000580
 8001c68:	20000760 	.word	0x20000760
 8001c6c:	200007ac 	.word	0x200007ac
 8001c70:	40240000 	.word	0x40240000
 8001c74:	08009024 	.word	0x08009024
 8001c78:	08009040 	.word	0x08009040
 8001c7c:	200008fc 	.word	0x200008fc

08001c80 <printState>:
{
 8001c80:	b510      	push	{r4, lr}
	sprintf(msg_debug, "State %hu\r\n", state);
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <printState+0x30>)
 8001c84:	4c0b      	ldr	r4, [pc, #44]	; (8001cb4 <printState+0x34>)
 8001c86:	881a      	ldrh	r2, [r3, #0]
 8001c88:	490b      	ldr	r1, [pc, #44]	; (8001cb8 <printState+0x38>)
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	f006 f990 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001c90:	4620      	mov	r0, r4
 8001c92:	f7fe fabd 	bl	8000210 <strlen>
 8001c96:	4602      	mov	r2, r0
 8001c98:	4621      	mov	r1, r4
 8001c9a:	4808      	ldr	r0, [pc, #32]	; (8001cbc <printState+0x3c>)
 8001c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca0:	b292      	uxth	r2, r2
 8001ca2:	f004 fbf9 	bl	8006498 <HAL_UART_Transmit>
}
 8001ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(250);
 8001caa:	20fa      	movs	r0, #250	; 0xfa
 8001cac:	f002 bcb6 	b.w	800461c <HAL_Delay>
 8001cb0:	200008fc 	.word	0x200008fc
 8001cb4:	200007ac 	.word	0x200007ac
 8001cb8:	08008cb0 	.word	0x08008cb0
 8001cbc:	20000760 	.word	0x20000760

08001cc0 <main>:
{
 8001cc0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	2400      	movs	r4, #0
{
 8001cc6:	b0a1      	sub	sp, #132	; 0x84
  HAL_Init();
 8001cc8:	f002 fc7c 	bl	80045c4 <HAL_Init>
  fsmInit();
 8001ccc:	f7ff fe4e 	bl	800196c <fsmInit>
  SystemClock_Config();
 8001cd0:	f7ff f9c6 	bl	8001060 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 8001cd8:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cdc:	4bac      	ldr	r3, [pc, #688]	; (8001f90 <main+0x2d0>)
 8001cde:	9402      	str	r4, [sp, #8]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	941a      	str	r4, [sp, #104]	; 0x68
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(DRV_DIS_GPIO_Port, DRV_DIS_Pin, GPIO_PIN_RESET);
 8001ce4:	48ab      	ldr	r0, [pc, #684]	; (8001f94 <main+0x2d4>)
  hadc1.Instance = ADC1;
 8001ce6:	4dac      	ldr	r5, [pc, #688]	; (8001f98 <main+0x2d8>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ce8:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 8001fb8 <main+0x2f8>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cf0:	631a      	str	r2, [r3, #48]	; 0x30
 8001cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cf4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001cf8:	9202      	str	r2, [sp, #8]
 8001cfa:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfc:	9403      	str	r4, [sp, #12]
 8001cfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d00:	f042 0204 	orr.w	r2, r2, #4
 8001d04:	631a      	str	r2, [r3, #48]	; 0x30
 8001d06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d08:	f002 0204 	and.w	r2, r2, #4
 8001d0c:	9203      	str	r2, [sp, #12]
 8001d0e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d10:	9404      	str	r4, [sp, #16]
 8001d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d14:	f042 0201 	orr.w	r2, r2, #1
 8001d18:	631a      	str	r2, [r3, #48]	; 0x30
 8001d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d1c:	f002 0201 	and.w	r2, r2, #1
 8001d20:	9204      	str	r2, [sp, #16]
 8001d22:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d24:	9405      	str	r4, [sp, #20]
 8001d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(DRV_DIS_GPIO_Port, DRV_DIS_Pin, GPIO_PIN_RESET);
 8001d28:	2102      	movs	r1, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d30:	400b      	ands	r3, r1
  HAL_GPIO_WritePin(DRV_DIS_GPIO_Port, DRV_DIS_Pin, GPIO_PIN_RESET);
 8001d32:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d34:	9305      	str	r3, [sp, #20]
 8001d36:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(DRV_DIS_GPIO_Port, DRV_DIS_Pin, GPIO_PIN_RESET);
 8001d38:	f003 fbe6 	bl	8005508 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, FLT_OUT_Pin|HALLA_OUT_Pin, GPIO_PIN_RESET);
 8001d3c:	4622      	mov	r2, r4
 8001d3e:	4897      	ldr	r0, [pc, #604]	; (8001f9c <main+0x2dc>)
 8001d40:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8001d44:	f003 fbe0 	bl	8005508 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIO_OUT_GPIO_Port, GPIO_OUT_Pin, GPIO_PIN_RESET);
 8001d48:	4622      	mov	r2, r4
 8001d4a:	4895      	ldr	r0, [pc, #596]	; (8001fa0 <main+0x2e0>)
 8001d4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d50:	f003 fbda 	bl	8005508 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = DRV_DIS_Pin;
 8001d54:	2600      	movs	r6, #0
 8001d56:	2700      	movs	r7, #0
 8001d58:	2202      	movs	r2, #2
 8001d5a:	2301      	movs	r3, #1
  HAL_GPIO_Init(DRV_DIS_GPIO_Port, &GPIO_InitStruct);
 8001d5c:	488d      	ldr	r0, [pc, #564]	; (8001f94 <main+0x2d4>)
 8001d5e:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = DRV_DIS_Pin;
 8001d60:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8001d64:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(DRV_DIS_GPIO_Port, &GPIO_InitStruct);
 8001d68:	f003 fab6 	bl	80052d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MTR_OC_Pin|HV_OV_Pin;
 8001d6c:	f44f 5282 	mov.w	r2, #4160	; 0x1040
 8001d70:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d72:	4888      	ldr	r0, [pc, #544]	; (8001f94 <main+0x2d4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d76:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = MTR_OC_Pin|HV_OV_Pin;
 8001d78:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7c:	f003 faac 	bl	80052d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FET_OT_Pin;
 8001d80:	2280      	movs	r2, #128	; 0x80
 8001d82:	2300      	movs	r3, #0
  HAL_GPIO_Init(FET_OT_GPIO_Port, &GPIO_InitStruct);
 8001d84:	4886      	ldr	r0, [pc, #536]	; (8001fa0 <main+0x2e0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(FET_OT_GPIO_Port, &GPIO_InitStruct);
 8001d88:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = FET_OT_Pin;
 8001d8a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(FET_OT_GPIO_Port, &GPIO_InitStruct);
 8001d8e:	f003 faa3 	bl	80052d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MTR_OT_Pin;
 8001d92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d96:	2300      	movs	r3, #0
  HAL_GPIO_Init(MTR_OT_GPIO_Port, &GPIO_InitStruct);
 8001d98:	4880      	ldr	r0, [pc, #512]	; (8001f9c <main+0x2dc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(MTR_OT_GPIO_Port, &GPIO_InitStruct);
 8001d9c:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = MTR_OT_Pin;
 8001d9e:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(MTR_OT_GPIO_Port, &GPIO_InitStruct);
 8001da2:	f003 fa99 	bl	80052d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FLT_OUT_Pin|HALLA_OUT_Pin;
 8001da6:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 8001daa:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dac:	487b      	ldr	r0, [pc, #492]	; (8001f9c <main+0x2dc>)
 8001dae:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = FLT_OUT_Pin|HALLA_OUT_Pin;
 8001db0:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
 8001db4:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db8:	f003 fa8e 	bl	80052d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_OUT_Pin;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
 8001dc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  HAL_GPIO_Init(GPIO_OUT_GPIO_Port, &GPIO_InitStruct);
 8001dc6:	4876      	ldr	r0, [pc, #472]	; (8001fa0 <main+0x2e0>)
 8001dc8:	a916      	add	r1, sp, #88	; 0x58
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001dca:	2620      	movs	r6, #32
  GPIO_InitStruct.Pin = GPIO_OUT_Pin;
 8001dcc:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIO_OUT_GPIO_Port, &GPIO_InitStruct);
 8001dd0:	f003 fa82 	bl	80052d8 <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001dd4:	4621      	mov	r1, r4
 8001dd6:	4632      	mov	r2, r6
 8001dd8:	a816      	add	r0, sp, #88	; 0x58
 8001dda:	f006 f8e1 	bl	8007fa0 <memset>
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dde:	f04f 0b00 	mov.w	fp, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001de2:	4b70      	ldr	r3, [pc, #448]	; (8001fa4 <main+0x2e4>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001de4:	60ac      	str	r4, [r5, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001de6:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8001dea:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001dee:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001df0:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001df4:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001df8:	f44f 3880 	mov.w	r8, #65536	; 0x10000
  hadc1.Init.ScanConvMode = ENABLE;
 8001dfc:	2401      	movs	r4, #1
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001dfe:	f44f 6700 	mov.w	r7, #2048	; 0x800
  hadc1.Init.NbrOfConversion = 2;
 8001e02:	f04f 0902 	mov.w	r9, #2
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e06:	e9c5 ab0a 	strd	sl, fp, [r5, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e0a:	4628      	mov	r0, r5
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e0c:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e10:	e9c5 3800 	strd	r3, r8, [r5]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001e14:	60ef      	str	r7, [r5, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001e16:	f8c5 901c 	str.w	r9, [r5, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e1a:	f002 fc11 	bl	8004640 <HAL_ADC_Init>
 8001e1e:	b108      	cbz	r0, 8001e24 <main+0x164>
 8001e20:	b672      	cpsid	i
  while (1)
 8001e22:	e7fe      	b.n	8001e22 <main+0x162>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8001e24:	ed9f 8b58 	vldr	d8, [pc, #352]	; 8001f88 <main+0x2c8>
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001e28:	f8ad 006c 	strh.w	r0, [sp, #108]	; 0x6c
  sConfigInjected.InjectedOffset = 0;
 8001e2c:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001e2e:	a916      	add	r1, sp, #88	; 0x58
 8001e30:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = 1;
 8001e32:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8001e36:	ed8d 8b1c 	vstr	d8, [sp, #112]	; 0x70
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001e3a:	941a      	str	r4, [sp, #104]	; 0x68
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001e3c:	9418      	str	r4, [sp, #96]	; 0x60
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001e3e:	f002 fd6b 	bl	8004918 <HAL_ADCEx_InjectedConfigChannel>
 8001e42:	b108      	cbz	r0, 8001e48 <main+0x188>
 8001e44:	b672      	cpsid	i
  while (1)
 8001e46:	e7fe      	b.n	8001e46 <main+0x186>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e48:	9010      	str	r0, [sp, #64]	; 0x40
  sConfig.Channel = ADC_CHANNEL_15;
 8001e4a:	220f      	movs	r2, #15
 8001e4c:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e4e:	a90e      	add	r1, sp, #56	; 0x38
 8001e50:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_15;
 8001e52:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e56:	f002 fca1 	bl	800479c <HAL_ADC_ConfigChannel>
 8001e5a:	b108      	cbz	r0, 8001e60 <main+0x1a0>
 8001e5c:	b672      	cpsid	i
  while (1)
 8001e5e:	e7fe      	b.n	8001e5e <main+0x19e>
  sConfig.Channel = ADC_CHANNEL_14;
 8001e60:	220e      	movs	r2, #14
 8001e62:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e64:	4628      	mov	r0, r5
 8001e66:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001e68:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  sConfig.Channel = ADC_CHANNEL_14;
 8001e6c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e70:	f002 fc94 	bl	800479c <HAL_ADC_ConfigChannel>
 8001e74:	4681      	mov	r9, r0
 8001e76:	b108      	cbz	r0, 8001e7c <main+0x1bc>
 8001e78:	b672      	cpsid	i
  while (1)
 8001e7a:	e7fe      	b.n	8001e7a <main+0x1ba>
  hadc2.Instance = ADC2;
 8001e7c:	4d4a      	ldr	r5, [pc, #296]	; (8001fa8 <main+0x2e8>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001e7e:	4601      	mov	r1, r0
 8001e80:	4632      	mov	r2, r6
 8001e82:	a816      	add	r0, sp, #88	; 0x58
 8001e84:	f006 f88c 	bl	8007fa0 <memset>
  hadc2.Instance = ADC2;
 8001e88:	4b48      	ldr	r3, [pc, #288]	; (8001fac <main+0x2ec>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e8a:	f8c5 8004 	str.w	r8, [r5, #4]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e8e:	e9c5 ab0a 	strd	sl, fp, [r5, #40]	; 0x28
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001e92:	4628      	mov	r0, r5
  ADC_ChannelConfTypeDef sConfig = {0};
 8001e94:	e9cd 990e 	strd	r9, r9, [sp, #56]	; 0x38
 8001e98:	e9cd 9910 	strd	r9, r9, [sp, #64]	; 0x40
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001e9c:	60ef      	str	r7, [r5, #12]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001e9e:	f8c5 9008 	str.w	r9, [r5, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001ea2:	612c      	str	r4, [r5, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001ea4:	f885 9018 	strb.w	r9, [r5, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001ea8:	f885 9020 	strb.w	r9, [r5, #32]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001eac:	f885 9030 	strb.w	r9, [r5, #48]	; 0x30
  hadc2.Init.NbrOfConversion = 1;
 8001eb0:	61ec      	str	r4, [r5, #28]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001eb2:	616c      	str	r4, [r5, #20]
  hadc2.Instance = ADC2;
 8001eb4:	602b      	str	r3, [r5, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001eb6:	f002 fbc3 	bl	8004640 <HAL_ADC_Init>
 8001eba:	b108      	cbz	r0, 8001ec0 <main+0x200>
 8001ebc:	b672      	cpsid	i
  while (1)
 8001ebe:	e7fe      	b.n	8001ebe <main+0x1fe>
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001ec0:	f8ad 006c 	strh.w	r0, [sp, #108]	; 0x6c
  sConfigInjected.InjectedOffset = 0;
 8001ec4:	9019      	str	r0, [sp, #100]	; 0x64
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8001ec6:	2304      	movs	r3, #4
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001ec8:	a916      	add	r1, sp, #88	; 0x58
 8001eca:	4628      	mov	r0, r5
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8001ecc:	ed8d 8b1c 	vstr	d8, [sp, #112]	; 0x70
  sConfigInjected.InjectedRank = 1;
 8001ed0:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001ed2:	941a      	str	r4, [sp, #104]	; 0x68
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001ed4:	9418      	str	r4, [sp, #96]	; 0x60
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8001ed6:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001ed8:	f002 fd1e 	bl	8004918 <HAL_ADCEx_InjectedConfigChannel>
 8001edc:	b108      	cbz	r0, 8001ee2 <main+0x222>
 8001ede:	b672      	cpsid	i
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <main+0x220>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001ee2:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_4;
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001ee8:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_4;
 8001eea:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001eee:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001ef0:	f002 fc54 	bl	800479c <HAL_ADC_ConfigChannel>
 8001ef4:	4605      	mov	r5, r0
 8001ef6:	b108      	cbz	r0, 8001efc <main+0x23c>
 8001ef8:	b672      	cpsid	i
  while (1)
 8001efa:	e7fe      	b.n	8001efa <main+0x23a>
  htim1.Instance = TIM1;
 8001efc:	4f2c      	ldr	r7, [pc, #176]	; (8001fb0 <main+0x2f0>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001efe:	9008      	str	r0, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f00:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8001f04:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 8001f08:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001f0c:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8001f10:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f14:	9006      	str	r0, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f16:	9014      	str	r0, [sp, #80]	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f18:	9007      	str	r0, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f1a:	4601      	mov	r1, r0
 8001f1c:	4632      	mov	r2, r6
 8001f1e:	a816      	add	r0, sp, #88	; 0x58
 8001f20:	f006 f83e 	bl	8007fa0 <memset>
  htim1.Instance = TIM1;
 8001f24:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <main+0x2f4>)
 8001f26:	603b      	str	r3, [r7, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001f28:	f241 1894 	movw	r8, #4500	; 0x1194
 8001f2c:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f30:	4638      	mov	r0, r7
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001f32:	e9c7 8303 	strd	r8, r3, [r7, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001f36:	60be      	str	r6, [r7, #8]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8001f38:	617c      	str	r4, [r7, #20]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8001f3a:	607d      	str	r5, [r7, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f3c:	61bd      	str	r5, [r7, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f3e:	f003 fe3d 	bl	8005bbc <HAL_TIM_Base_Init>
 8001f42:	b108      	cbz	r0, 8001f48 <main+0x288>
 8001f44:	b672      	cpsid	i
  while (1)
 8001f46:	e7fe      	b.n	8001f46 <main+0x286>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f48:	4638      	mov	r0, r7
 8001f4a:	f003 fec7 	bl	8005cdc <HAL_TIM_PWM_Init>
 8001f4e:	b108      	cbz	r0, 8001f54 <main+0x294>
 8001f50:	b672      	cpsid	i
  while (1)
 8001f52:	e7fe      	b.n	8001f52 <main+0x292>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001f54:	2206      	movs	r2, #6
 8001f56:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001f58:	a908      	add	r1, sp, #32
 8001f5a:	4638      	mov	r0, r7
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001f5c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001f60:	f004 f90a 	bl	8006178 <HAL_TIM_SlaveConfigSynchro>
 8001f64:	b108      	cbz	r0, 8001f6a <main+0x2aa>
 8001f66:	b672      	cpsid	i
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <main+0x2a8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f6e:	4810      	ldr	r0, [pc, #64]	; (8001fb0 <main+0x2f0>)
 8001f70:	a906      	add	r1, sp, #24
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f72:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f76:	f004 f98b 	bl	8006290 <HAL_TIMEx_MasterConfigSynchronization>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	b1f0      	cbz	r0, 8001fbc <main+0x2fc>
 8001f7e:	b672      	cpsid	i
  while (1)
 8001f80:	e7fe      	b.n	8001f80 <main+0x2c0>
 8001f82:	bf00      	nop
 8001f84:	f3af 8000 	nop.w
 8001f88:	00000000 	.word	0x00000000
 8001f8c:	00100000 	.word	0x00100000
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40020400 	.word	0x40020400
 8001f98:	20000618 	.word	0x20000618
 8001f9c:	40020000 	.word	0x40020000
 8001fa0:	40020800 	.word	0x40020800
 8001fa4:	40012000 	.word	0x40012000
 8001fa8:	20000660 	.word	0x20000660
 8001fac:	40012100 	.word	0x40012100
 8001fb0:	200006d0 	.word	0x200006d0
 8001fb4:	40010000 	.word	0x40010000
 8001fb8:	0f000001 	.word	0x0f000001
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fbc:	2060      	movs	r0, #96	; 0x60
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8001fc4:	2600      	movs	r6, #0
 8001fc6:	2700      	movs	r7, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fc8:	484b      	ldr	r0, [pc, #300]	; (80020f8 <main+0x438>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fca:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fcc:	a90e      	add	r1, sp, #56	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fce:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8001fd2:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fd6:	f003 ff0f 	bl	8005df8 <HAL_TIM_PWM_ConfigChannel>
 8001fda:	b108      	cbz	r0, 8001fe0 <main+0x320>
 8001fdc:	b672      	cpsid	i
  while (1)
 8001fde:	e7fe      	b.n	8001fde <main+0x31e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fe0:	4845      	ldr	r0, [pc, #276]	; (80020f8 <main+0x438>)
 8001fe2:	2204      	movs	r2, #4
 8001fe4:	a90e      	add	r1, sp, #56	; 0x38
 8001fe6:	f003 ff07 	bl	8005df8 <HAL_TIM_PWM_ConfigChannel>
 8001fea:	b108      	cbz	r0, 8001ff0 <main+0x330>
 8001fec:	b672      	cpsid	i
  while (1)
 8001fee:	e7fe      	b.n	8001fee <main+0x32e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ff0:	4841      	ldr	r0, [pc, #260]	; (80020f8 <main+0x438>)
 8001ff2:	2208      	movs	r2, #8
 8001ff4:	a90e      	add	r1, sp, #56	; 0x38
 8001ff6:	f003 feff 	bl	8005df8 <HAL_TIM_PWM_ConfigChannel>
 8001ffa:	b108      	cbz	r0, 8002000 <main+0x340>
 8001ffc:	b672      	cpsid	i
  while (1)
 8001ffe:	e7fe      	b.n	8001ffe <main+0x33e>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002000:	2270      	movs	r2, #112	; 0x70
 8002002:	f241 1393 	movw	r3, #4499	; 0x1193
 8002006:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800200a:	483b      	ldr	r0, [pc, #236]	; (80020f8 <main+0x438>)
 800200c:	220c      	movs	r2, #12
 800200e:	a90e      	add	r1, sp, #56	; 0x38
 8002010:	f003 fef2 	bl	8005df8 <HAL_TIM_PWM_ConfigChannel>
 8002014:	b108      	cbz	r0, 800201a <main+0x35a>
 8002016:	b672      	cpsid	i
  while (1)
 8002018:	e7fe      	b.n	8002018 <main+0x358>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800201a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800201e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002022:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8002026:	f44f 7280 	mov.w	r2, #256	; 0x100
 800202a:	2348      	movs	r3, #72	; 0x48
 800202c:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002030:	901d      	str	r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8002032:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002036:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800203a:	482f      	ldr	r0, [pc, #188]	; (80020f8 <main+0x438>)
 800203c:	a916      	add	r1, sp, #88	; 0x58
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800203e:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002042:	f004 f965 	bl	8006310 <HAL_TIMEx_ConfigBreakDeadTime>
 8002046:	4604      	mov	r4, r0
 8002048:	b108      	cbz	r0, 800204e <main+0x38e>
 800204a:	b672      	cpsid	i
  while (1)
 800204c:	e7fe      	b.n	800204c <main+0x38c>
  htim2.Instance = TIM2;
 800204e:	4d2b      	ldr	r5, [pc, #172]	; (80020fc <main+0x43c>)
  HAL_TIM_MspPostInit(&htim1);
 8002050:	4829      	ldr	r0, [pc, #164]	; (80020f8 <main+0x438>)
 8002052:	f002 f8e3 	bl	800421c <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8002056:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800205a:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800205c:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 8002060:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002064:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002068:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800206c:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800206e:	61ac      	str	r4, [r5, #24]
  htim2.Instance = TIM2;
 8002070:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002072:	f003 fda3 	bl	8005bbc <HAL_TIM_Base_Init>
 8002076:	b108      	cbz	r0, 800207c <main+0x3bc>
 8002078:	b672      	cpsid	i
  while (1)
 800207a:	e7fe      	b.n	800207a <main+0x3ba>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800207c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002080:	a916      	add	r1, sp, #88	; 0x58
 8002082:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002084:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002086:	f003 ffc7 	bl	8006018 <HAL_TIM_ConfigClockSource>
 800208a:	b108      	cbz	r0, 8002090 <main+0x3d0>
 800208c:	b672      	cpsid	i
  while (1)
 800208e:	e7fe      	b.n	800208e <main+0x3ce>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002090:	a90e      	add	r1, sp, #56	; 0x38
 8002092:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002094:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002098:	f004 f8fa 	bl	8006290 <HAL_TIMEx_MasterConfigSynchronization>
 800209c:	4602      	mov	r2, r0
 800209e:	b108      	cbz	r0, 80020a4 <main+0x3e4>
 80020a0:	b672      	cpsid	i
  while (1)
 80020a2:	e7fe      	b.n	80020a2 <main+0x3e2>
  huart2.Instance = USART2;
 80020a4:	4b16      	ldr	r3, [pc, #88]	; (8002100 <main+0x440>)
  huart2.Init.BaudRate = 115200;
 80020a6:	4817      	ldr	r0, [pc, #92]	; (8002104 <main+0x444>)
 80020a8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80020ac:	e9c3 0100 	strd	r0, r1, [r3]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020b0:	210c      	movs	r1, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020b2:	4618      	mov	r0, r3
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020b4:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020b8:	e9c3 2104 	strd	r2, r1, [r3, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020bc:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020c0:	f004 f950 	bl	8006364 <HAL_UART_Init>
 80020c4:	b108      	cbz	r0, 80020ca <main+0x40a>
 80020c6:	b672      	cpsid	i
  while (1)
 80020c8:	e7fe      	b.n	80020c8 <main+0x408>
  hcan1.Instance = CAN1;
 80020ca:	4c0f      	ldr	r4, [pc, #60]	; (8002108 <main+0x448>)
  hcan1.Init.Prescaler = 18;
 80020cc:	4a0f      	ldr	r2, [pc, #60]	; (800210c <main+0x44c>)
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80020ce:	2300      	movs	r3, #0
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80020d0:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80020d4:	61a3      	str	r3, [r4, #24]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80020d6:	83a3      	strh	r3, [r4, #28]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80020d8:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 80020dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  hcan1.Init.Prescaler = 18;
 80020e0:	2512      	movs	r5, #18
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80020e2:	4620      	mov	r0, r4
  hcan1.Init.Prescaler = 18;
 80020e4:	e9c4 2500 	strd	r2, r5, [r4]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80020e8:	e9c4 c304 	strd	ip, r3, [r4, #16]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80020ec:	f002 fcf0 	bl	8004ad0 <HAL_CAN_Init>
 80020f0:	4606      	mov	r6, r0
 80020f2:	b168      	cbz	r0, 8002110 <main+0x450>
 80020f4:	b672      	cpsid	i
  while (1)
 80020f6:	e7fe      	b.n	80020f6 <main+0x436>
 80020f8:	200006d0 	.word	0x200006d0
 80020fc:	20000718 	.word	0x20000718
 8002100:	20000760 	.word	0x20000760
 8002104:	40004400 	.word	0x40004400
 8002108:	200006a8 	.word	0x200006a8
 800210c:	40006400 	.word	0x40006400
  canfilterconfig.FilterIdHigh = CANRXBASEID<<5;
 8002110:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002114:	2300      	movs	r3, #0
 8002116:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800211a:	2200      	movs	r2, #0
 800211c:	2300      	movs	r3, #0
 800211e:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8002122:	2200      	movs	r2, #0
 8002124:	2312      	movs	r3, #18
 8002126:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 800212a:	2200      	movs	r2, #0
 800212c:	2301      	movs	r3, #1
 800212e:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8002132:	a916      	add	r1, sp, #88	; 0x58
  canfilterconfig.FilterIdHigh = CANRXBASEID<<5;
 8002134:	2314      	movs	r3, #20
 8002136:	2201      	movs	r2, #1
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8002138:	4620      	mov	r0, r4
  canfilterconfig.FilterIdHigh = CANRXBASEID<<5;
 800213a:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800213e:	f002 fd47 	bl	8004bd0 <HAL_CAN_ConfigFilter>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8002142:	4632      	mov	r2, r6
 8002144:	2102      	movs	r1, #2
 8002146:	4628      	mov	r0, r5
 8002148:	f003 f85a 	bl	8005200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 800214c:	4628      	mov	r0, r5
 800214e:	f003 f895 	bl	800527c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002152:	4632      	mov	r2, r6
 8002154:	4631      	mov	r1, r6
 8002156:	2019      	movs	r0, #25
 8002158:	f003 f852 	bl	8005200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800215c:	2019      	movs	r0, #25
 800215e:	f003 f88d 	bl	800527c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 1);
 8002162:	2104      	movs	r1, #4
 8002164:	2201      	movs	r2, #1
 8002166:	2018      	movs	r0, #24
 8002168:	f003 f84a 	bl	8005200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800216c:	2018      	movs	r0, #24
 800216e:	f003 f885 	bl	800527c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8002172:	4632      	mov	r2, r6
 8002174:	2103      	movs	r1, #3
 8002176:	201c      	movs	r0, #28
 8002178:	f003 f842 	bl	8005200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800217c:	201c      	movs	r0, #28
 800217e:	f003 f87d 	bl	800527c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8002182:	2201      	movs	r2, #1
 8002184:	2103      	movs	r1, #3
 8002186:	2026      	movs	r0, #38	; 0x26
 8002188:	f003 f83a 	bl	8005200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800218c:	2026      	movs	r0, #38	; 0x26
 800218e:	f003 f875 	bl	800527c <HAL_NVIC_EnableIRQ>
  HAL_CAN_Start(&hcan1);
 8002192:	4620      	mov	r0, r4
 8002194:	f002 fdae 	bl	8004cf4 <HAL_CAN_Start>
  CANTxHeader.DLC = 8;  // data length
 8002198:	f8df b288 	ldr.w	fp, [pc, #648]	; 8002424 <main+0x764>
	state = 500; //Drive commands
 800219c:	4d94      	ldr	r5, [pc, #592]	; (80023f0 <main+0x730>)
 800219e:	f8df a288 	ldr.w	sl, [pc, #648]	; 8002428 <main+0x768>
 80021a2:	f8df 9288 	ldr.w	r9, [pc, #648]	; 800242c <main+0x76c>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80021a6:	2102      	movs	r1, #2
 80021a8:	4620      	mov	r0, r4
 80021aa:	f002 fec3 	bl	8004f34 <HAL_CAN_ActivateNotification>
  CANTxHeader.DLC = 8;  // data length
 80021ae:	2208      	movs	r2, #8
  CANTxHeader.StdId = CANTXBASEID;  // ID
 80021b0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  CANTxHeader.RTR = CAN_RTR_DATA;
 80021b4:	e9cb 6602 	strd	r6, r6, [fp, #8]
  CANTxHeader.DLC = 8;  // data length
 80021b8:	f8cb 2010 	str.w	r2, [fp, #16]
  CANTxHeader.StdId = CANTXBASEID;  // ID
 80021bc:	f8cb 3000 	str.w	r3, [fp]
	printState();
 80021c0:	f7ff fd5e 	bl	8001c80 <printState>
	state = 500; //Drive commands
 80021c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80021c8:	802b      	strh	r3, [r5, #0]
	printState();
 80021ca:	f7ff fd59 	bl	8001c80 <printState>
 80021ce:	4c89      	ldr	r4, [pc, #548]	; (80023f4 <main+0x734>)
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80021d0:	4e89      	ldr	r6, [pc, #548]	; (80023f8 <main+0x738>)
	  switch (state)
 80021d2:	882a      	ldrh	r2, [r5, #0]
 80021d4:	f5b2 7f98 	cmp.w	r2, #304	; 0x130
 80021d8:	f080 83f0 	bcs.w	80029bc <main+0xcfc>
 80021dc:	f5b2 7f95 	cmp.w	r2, #298	; 0x12a
 80021e0:	f080 839e 	bcs.w	8002920 <main+0xc60>
 80021e4:	2aca      	cmp	r2, #202	; 0xca
 80021e6:	f200 808d 	bhi.w	8002304 <main+0x644>
 80021ea:	2a62      	cmp	r2, #98	; 0x62
 80021ec:	f240 8385 	bls.w	80028fa <main+0xc3a>
 80021f0:	3a63      	subs	r2, #99	; 0x63
 80021f2:	2a67      	cmp	r2, #103	; 0x67
 80021f4:	f200 8086 	bhi.w	8002304 <main+0x644>
 80021f8:	e8df f012 	tbh	[pc, r2, lsl #1]
 80021fc:	038f04f0 	.word	0x038f04f0
 8002200:	03400348 	.word	0x03400348
 8002204:	030d0323 	.word	0x030d0323
 8002208:	02400248 	.word	0x02400248
 800220c:	00e200ec 	.word	0x00e200ec
 8002210:	00d600d9 	.word	0x00d600d9
 8002214:	008400d3 	.word	0x008400d3
 8002218:	00840084 	.word	0x00840084
 800221c:	00840084 	.word	0x00840084
 8002220:	00840084 	.word	0x00840084
 8002224:	00840084 	.word	0x00840084
 8002228:	00840084 	.word	0x00840084
 800222c:	00840084 	.word	0x00840084
 8002230:	00840084 	.word	0x00840084
 8002234:	00840084 	.word	0x00840084
 8002238:	00840084 	.word	0x00840084
 800223c:	00840084 	.word	0x00840084
 8002240:	00840084 	.word	0x00840084
 8002244:	00840084 	.word	0x00840084
 8002248:	00840084 	.word	0x00840084
 800224c:	00840084 	.word	0x00840084
 8002250:	00840084 	.word	0x00840084
 8002254:	00840084 	.word	0x00840084
 8002258:	00840084 	.word	0x00840084
 800225c:	00840084 	.word	0x00840084
 8002260:	00840084 	.word	0x00840084
 8002264:	00840084 	.word	0x00840084
 8002268:	00840084 	.word	0x00840084
 800226c:	00840084 	.word	0x00840084
 8002270:	00840084 	.word	0x00840084
 8002274:	00840084 	.word	0x00840084
 8002278:	00840084 	.word	0x00840084
 800227c:	00840084 	.word	0x00840084
 8002280:	00840084 	.word	0x00840084
 8002284:	00840084 	.word	0x00840084
 8002288:	00840084 	.word	0x00840084
 800228c:	00840084 	.word	0x00840084
 8002290:	00840084 	.word	0x00840084
 8002294:	00840084 	.word	0x00840084
 8002298:	00840084 	.word	0x00840084
 800229c:	00840084 	.word	0x00840084
 80022a0:	00840084 	.word	0x00840084
 80022a4:	00840084 	.word	0x00840084
 80022a8:	00840084 	.word	0x00840084
 80022ac:	00840084 	.word	0x00840084
 80022b0:	00840084 	.word	0x00840084
 80022b4:	00840084 	.word	0x00840084
 80022b8:	00840084 	.word	0x00840084
 80022bc:	00840084 	.word	0x00840084
 80022c0:	00840084 	.word	0x00840084
 80022c4:	00d00084 	.word	0x00d00084
 80022c8:	008100c9 	.word	0x008100c9
	else if (RCM_GetUserConvState() == RCM_USERCONV_EOC)
 80022cc:	f001 fe6a 	bl	8003fa4 <RCM_GetUserConvState>
 80022d0:	2802      	cmp	r0, #2
 80022d2:	d117      	bne.n	8002304 <main+0x644>
		pot2_value = RCM_GetUserConv();
 80022d4:	f001 fe2e 	bl	8003f34 <RCM_GetUserConv>
		CANRx_current.current_float = ((float) pot2_value) / 45535.0;
 80022d8:	ee07 0a90 	vmov	s15, r0
		pot2_value = RCM_GetUserConv();
 80022dc:	4b47      	ldr	r3, [pc, #284]	; (80023fc <main+0x73c>)
		CANRx_current.current_float = ((float) pot2_value) / 45535.0;
 80022de:	eef8 7a67 	vcvt.f32.u32	s15, s15
		pot2_value = RCM_GetUserConv();
 80022e2:	8018      	strh	r0, [r3, #0]
		CANRx_current.current_float = ((float) pot2_value) / 45535.0;
 80022e4:	ee17 0a90 	vmov	r0, s15
 80022e8:	f7fe f94e 	bl	8000588 <__aeabi_f2d>
 80022ec:	a33e      	add	r3, pc, #248	; (adr r3, 80023e8 <main+0x728>)
 80022ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f2:	f7fe f9a1 	bl	8000638 <__aeabi_dmul>
 80022f6:	f7fe fc97 	bl	8000c28 <__aeabi_d2f>
 80022fa:	f8c9 0000 	str.w	r0, [r9]
		state = 300;
 80022fe:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002302:	802b      	strh	r3, [r5, #0]
	  sprintf(msg_debug, "car velocity (float 100x m/s): %lu\r\n", (uint32_t) (100.0*CANRx_velocity.velocity_float));
 8002304:	4b3e      	ldr	r3, [pc, #248]	; (8002400 <main+0x740>)
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	f7fe f93e 	bl	8000588 <__aeabi_f2d>
 800230c:	4b3d      	ldr	r3, [pc, #244]	; (8002404 <main+0x744>)
 800230e:	2200      	movs	r2, #0
 8002310:	f7fe f992 	bl	8000638 <__aeabi_dmul>
 8002314:	f7fe fc68 	bl	8000be8 <__aeabi_d2uiz>
 8002318:	493b      	ldr	r1, [pc, #236]	; (8002408 <main+0x748>)
 800231a:	4602      	mov	r2, r0
 800231c:	4620      	mov	r0, r4
 800231e:	f005 fe47 	bl	8007fb0 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8002322:	4620      	mov	r0, r4
 8002324:	f7fd ff74 	bl	8000210 <strlen>
 8002328:	4621      	mov	r1, r4
 800232a:	b282      	uxth	r2, r0
 800232c:	f04f 33ff 	mov.w	r3, #4294967295
 8002330:	4630      	mov	r0, r6
 8002332:	f004 f8b1 	bl	8006498 <HAL_UART_Transmit>
	  sprintf(msg_debug, "mtr current (float perc): %lu\r\n", (uint32_t) (100.0*CANRx_current.current_float));
 8002336:	f8d9 0000 	ldr.w	r0, [r9]
 800233a:	f7fe f925 	bl	8000588 <__aeabi_f2d>
 800233e:	4b31      	ldr	r3, [pc, #196]	; (8002404 <main+0x744>)
 8002340:	2200      	movs	r2, #0
 8002342:	f7fe f979 	bl	8000638 <__aeabi_dmul>
 8002346:	f7fe fc4f 	bl	8000be8 <__aeabi_d2uiz>
 800234a:	4930      	ldr	r1, [pc, #192]	; (800240c <main+0x74c>)
 800234c:	4602      	mov	r2, r0
 800234e:	4620      	mov	r0, r4
 8002350:	f005 fe2e 	bl	8007fb0 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8002354:	4620      	mov	r0, r4
 8002356:	f7fd ff5b 	bl	8000210 <strlen>
 800235a:	f04f 33ff 	mov.w	r3, #4294967295
 800235e:	b282      	uxth	r2, r0
 8002360:	4621      	mov	r1, r4
 8002362:	4630      	mov	r0, r6
 8002364:	f004 f898 	bl	8006498 <HAL_UART_Transmit>
	sprintf(msg_debug, "State %hu\r\n", state);
 8002368:	882a      	ldrh	r2, [r5, #0]
 800236a:	4929      	ldr	r1, [pc, #164]	; (8002410 <main+0x750>)
 800236c:	4620      	mov	r0, r4
 800236e:	f005 fe1f 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8002372:	4620      	mov	r0, r4
 8002374:	f7fd ff4c 	bl	8000210 <strlen>
 8002378:	f04f 33ff 	mov.w	r3, #4294967295
 800237c:	b282      	uxth	r2, r0
 800237e:	4621      	mov	r1, r4
 8002380:	4630      	mov	r0, r6
 8002382:	f004 f889 	bl	8006498 <HAL_UART_Transmit>
	HAL_Delay(250);
 8002386:	20fa      	movs	r0, #250	; 0xfa
 8002388:	f002 f948 	bl	800461c <HAL_Delay>
}
 800238c:	e721      	b.n	80021d2 <main+0x512>
	currentWDTime = HAL_GetTick();
 800238e:	f002 f93f 	bl	8004610 <HAL_GetTick>
 8002392:	4b20      	ldr	r3, [pc, #128]	; (8002414 <main+0x754>)
 8002394:	8018      	strh	r0, [r3, #0]
	state = 202; //CAN implementation
 8002396:	23ca      	movs	r3, #202	; 0xca
 8002398:	802b      	strh	r3, [r5, #0]
}
 800239a:	e7b3      	b.n	8002304 <main+0x644>
	state = 201;
 800239c:	23c9      	movs	r3, #201	; 0xc9
 800239e:	802b      	strh	r3, [r5, #0]
}
 80023a0:	e7b0      	b.n	8002304 <main+0x644>
	state = 200;
 80023a2:	23c8      	movs	r3, #200	; 0xc8
 80023a4:	802b      	strh	r3, [r5, #0]
}
 80023a6:	e7ad      	b.n	8002304 <main+0x644>
	state = 111;
 80023a8:	236f      	movs	r3, #111	; 0x6f
 80023aa:	802b      	strh	r3, [r5, #0]
}
 80023ac:	e7aa      	b.n	8002304 <main+0x644>
	if (RCM_GetUserConvState() == RCM_USERCONV_IDLE)
 80023ae:	f001 fdf9 	bl	8003fa4 <RCM_GetUserConvState>
 80023b2:	2800      	cmp	r0, #0
 80023b4:	d13c      	bne.n	8002430 <main+0x770>
		RCM_RequestUserConv(ThermBLHandle);
 80023b6:	4b18      	ldr	r3, [pc, #96]	; (8002418 <main+0x758>)
 80023b8:	7818      	ldrb	r0, [r3, #0]
 80023ba:	f001 fdab 	bl	8003f14 <RCM_RequestUserConv>
 80023be:	e7a1      	b.n	8002304 <main+0x644>
	if (RCM_GetUserConvState() == RCM_USERCONV_IDLE)
 80023c0:	f001 fdf0 	bl	8003fa4 <RCM_GetUserConvState>
 80023c4:	2800      	cmp	r0, #0
 80023c6:	f040 8095 	bne.w	80024f4 <main+0x834>
		RCM_RequestUserConv(ThermBHHandle);
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <main+0x75c>)
 80023cc:	7818      	ldrb	r0, [r3, #0]
 80023ce:	f001 fda1 	bl	8003f14 <RCM_RequestUserConv>
 80023d2:	e797      	b.n	8002304 <main+0x644>
	if (RCM_GetUserConvState() == RCM_USERCONV_IDLE)
 80023d4:	f001 fde6 	bl	8003fa4 <RCM_GetUserConvState>
 80023d8:	2800      	cmp	r0, #0
 80023da:	f040 80ed 	bne.w	80025b8 <main+0x8f8>
		RCM_RequestUserConv(ThermALHandle);
 80023de:	4b10      	ldr	r3, [pc, #64]	; (8002420 <main+0x760>)
 80023e0:	7818      	ldrb	r0, [r3, #0]
 80023e2:	f001 fd97 	bl	8003f14 <RCM_RequestUserConv>
 80023e6:	e78d      	b.n	8002304 <main+0x644>
 80023e8:	47a16a26 	.word	0x47a16a26
 80023ec:	3ef70725 	.word	0x3ef70725
 80023f0:	200008fc 	.word	0x200008fc
 80023f4:	200007ac 	.word	0x200007ac
 80023f8:	20000760 	.word	0x20000760
 80023fc:	200008fa 	.word	0x200008fa
 8002400:	20000554 	.word	0x20000554
 8002404:	40590000 	.word	0x40590000
 8002408:	0800905c 	.word	0x0800905c
 800240c:	08009084 	.word	0x08009084
 8002410:	08008cb0 	.word	0x08008cb0
 8002414:	2000060a 	.word	0x2000060a
 8002418:	20000608 	.word	0x20000608
 800241c:	200005f8 	.word	0x200005f8
 8002420:	200005e8 	.word	0x200005e8
 8002424:	20000560 	.word	0x20000560
 8002428:	20000580 	.word	0x20000580
 800242c:	20000550 	.word	0x20000550
	else if (RCM_GetUserConvState() == RCM_USERCONV_EOC)
 8002430:	f001 fdb8 	bl	8003fa4 <RCM_GetUserConvState>
 8002434:	2802      	cmp	r0, #2
 8002436:	f47f af65 	bne.w	8002304 <main+0x644>
		thermBL_temp = convertTempVal(RCM_GetUserConv());
 800243a:	f001 fd7b 	bl	8003f34 <RCM_GetUserConv>
	thermXX_value = thermXX_value / 16.0; // Convert left-aligned to right-aligned (0-4096)
 800243e:	f7fe f891 	bl	8000564 <__aeabi_i2d>
 8002442:	4bc3      	ldr	r3, [pc, #780]	; (8002750 <main+0xa90>)
 8002444:	2200      	movs	r2, #0
 8002446:	f7fe f8f7 	bl	8000638 <__aeabi_dmul>
 800244a:	f7fe fbcd 	bl	8000be8 <__aeabi_d2uiz>
	float thermXX_voltage = thermXX_value * 3300.0 / 4096.0; //Convert to mV (to avoid decimal places)
 800244e:	b280      	uxth	r0, r0
 8002450:	f7fe f888 	bl	8000564 <__aeabi_i2d>
 8002454:	a3b8      	add	r3, pc, #736	; (adr r3, 8002738 <main+0xa78>)
 8002456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245a:	f7fe f8ed 	bl	8000638 <__aeabi_dmul>
 800245e:	f7fe fbe3 	bl	8000c28 <__aeabi_d2f>
	float thermXX_resistance = 3300.0 * 3300 / thermXX_voltage;
 8002462:	eddf 7abc 	vldr	s15, [pc, #752]	; 8002754 <main+0xa94>
 8002466:	ee07 0a10 	vmov	s14, r0
 800246a:	ee87 7a87 	vdiv.f32	s14, s15, s14
	thermXX_resistance = thermXX_resistance - 3300;
 800246e:	eddf 7aba 	vldr	s15, [pc, #744]	; 8002758 <main+0xa98>
	float thermXX_temp = 1000.0*(log(thermXX_resistance / 10000.0) + (3435.0/298.0));
 8002472:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002476:	ee17 0a90 	vmov	r0, s15
 800247a:	f7fe f885 	bl	8000588 <__aeabi_f2d>
 800247e:	a3b0      	add	r3, pc, #704	; (adr r3, 8002740 <main+0xa80>)
 8002480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002484:	f7fe f8d8 	bl	8000638 <__aeabi_dmul>
 8002488:	ec41 0b10 	vmov	d0, r0, r1
 800248c:	f006 fa00 	bl	8008890 <log>
 8002490:	a3ad      	add	r3, pc, #692	; (adr r3, 8002748 <main+0xa88>)
 8002492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002496:	ec51 0b10 	vmov	r0, r1, d0
 800249a:	f7fd ff17 	bl	80002cc <__adddf3>
 800249e:	4baf      	ldr	r3, [pc, #700]	; (800275c <main+0xa9c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	f7fe f8c9 	bl	8000638 <__aeabi_dmul>
 80024a6:	f7fe fbbf 	bl	8000c28 <__aeabi_d2f>
	thermXX_temp = 1000.0 * 3435.0 / thermXX_temp;
 80024aa:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8002760 <main+0xaa0>
	thermXX_temp = thermXX_temp - 273.0;
 80024ae:	eddf 6aad 	vldr	s13, [pc, #692]	; 8002764 <main+0xaa4>
		thermBL_temp = convertTempVal(RCM_GetUserConv());
 80024b2:	4aad      	ldr	r2, [pc, #692]	; (8002768 <main+0xaa8>)
	thermXX_temp = 1000.0 * 3435.0 / thermXX_temp;
 80024b4:	ee07 0a90 	vmov	s15, r0
 80024b8:	eec7 7a27 	vdiv.f32	s15, s14, s15
		if (thermBL_temp > CANTx_FETTemp.FETTemp_float) CANTx_FETTemp.FETTemp_float = thermBL_temp;
 80024bc:	ed9a 7a00 	vldr	s14, [sl]
	thermXX_temp = thermXX_temp - 273.0;
 80024c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
		thermBL_temp = convertTempVal(RCM_GetUserConv());
 80024c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024c8:	ee17 3a90 	vmov	r3, s15
 80024cc:	b29b      	uxth	r3, r3
		if (thermBL_temp > CANTx_FETTemp.FETTemp_float) CANTx_FETTemp.FETTemp_float = thermBL_temp;
 80024ce:	ee07 3a90 	vmov	s15, r3
 80024d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		thermBL_temp = convertTempVal(RCM_GetUserConv());
 80024d6:	8013      	strh	r3, [r2, #0]
		if (thermBL_temp > CANTx_FETTemp.FETTemp_float) CANTx_FETTemp.FETTemp_float = thermBL_temp;
 80024d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e0:	dd05      	ble.n	80024ee <main+0x82e>
 80024e2:	ee07 3a90 	vmov	s15, r3
 80024e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ea:	edca 7a00 	vstr	s15, [sl]
		state = 110;
 80024ee:	236e      	movs	r3, #110	; 0x6e
 80024f0:	802b      	strh	r3, [r5, #0]
}
 80024f2:	e707      	b.n	8002304 <main+0x644>
	else if (RCM_GetUserConvState() == RCM_USERCONV_EOC)
 80024f4:	f001 fd56 	bl	8003fa4 <RCM_GetUserConvState>
 80024f8:	2802      	cmp	r0, #2
 80024fa:	f47f af03 	bne.w	8002304 <main+0x644>
		thermBH_temp = convertTempVal(RCM_GetUserConv());
 80024fe:	f001 fd19 	bl	8003f34 <RCM_GetUserConv>
	thermXX_value = thermXX_value / 16.0; // Convert left-aligned to right-aligned (0-4096)
 8002502:	f7fe f82f 	bl	8000564 <__aeabi_i2d>
 8002506:	4b92      	ldr	r3, [pc, #584]	; (8002750 <main+0xa90>)
 8002508:	2200      	movs	r2, #0
 800250a:	f7fe f895 	bl	8000638 <__aeabi_dmul>
 800250e:	f7fe fb6b 	bl	8000be8 <__aeabi_d2uiz>
	float thermXX_voltage = thermXX_value * 3300.0 / 4096.0; //Convert to mV (to avoid decimal places)
 8002512:	b280      	uxth	r0, r0
 8002514:	f7fe f826 	bl	8000564 <__aeabi_i2d>
 8002518:	a387      	add	r3, pc, #540	; (adr r3, 8002738 <main+0xa78>)
 800251a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251e:	f7fe f88b 	bl	8000638 <__aeabi_dmul>
 8002522:	f7fe fb81 	bl	8000c28 <__aeabi_d2f>
	float thermXX_resistance = 3300.0 * 3300 / thermXX_voltage;
 8002526:	eddf 7a8b 	vldr	s15, [pc, #556]	; 8002754 <main+0xa94>
 800252a:	ee07 0a10 	vmov	s14, r0
 800252e:	ee87 7a87 	vdiv.f32	s14, s15, s14
	thermXX_resistance = thermXX_resistance - 3300;
 8002532:	eddf 7a89 	vldr	s15, [pc, #548]	; 8002758 <main+0xa98>
	float thermXX_temp = 1000.0*(log(thermXX_resistance / 10000.0) + (3435.0/298.0));
 8002536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800253a:	ee17 0a90 	vmov	r0, s15
 800253e:	f7fe f823 	bl	8000588 <__aeabi_f2d>
 8002542:	a37f      	add	r3, pc, #508	; (adr r3, 8002740 <main+0xa80>)
 8002544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002548:	f7fe f876 	bl	8000638 <__aeabi_dmul>
 800254c:	ec41 0b10 	vmov	d0, r0, r1
 8002550:	f006 f99e 	bl	8008890 <log>
 8002554:	a37c      	add	r3, pc, #496	; (adr r3, 8002748 <main+0xa88>)
 8002556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255a:	ec51 0b10 	vmov	r0, r1, d0
 800255e:	f7fd feb5 	bl	80002cc <__adddf3>
 8002562:	4b7e      	ldr	r3, [pc, #504]	; (800275c <main+0xa9c>)
 8002564:	2200      	movs	r2, #0
 8002566:	f7fe f867 	bl	8000638 <__aeabi_dmul>
 800256a:	f7fe fb5d 	bl	8000c28 <__aeabi_d2f>
	thermXX_temp = 1000.0 * 3435.0 / thermXX_temp;
 800256e:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002760 <main+0xaa0>
	thermXX_temp = thermXX_temp - 273.0;
 8002572:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8002764 <main+0xaa4>
		thermBH_temp = convertTempVal(RCM_GetUserConv());
 8002576:	4a7d      	ldr	r2, [pc, #500]	; (800276c <main+0xaac>)
	thermXX_temp = 1000.0 * 3435.0 / thermXX_temp;
 8002578:	ee07 0a90 	vmov	s15, r0
 800257c:	eec7 7a27 	vdiv.f32	s15, s14, s15
		if (thermBH_temp > CANTx_FETTemp.FETTemp_float) CANTx_FETTemp.FETTemp_float = thermBH_temp;
 8002580:	ed9a 7a00 	vldr	s14, [sl]
	thermXX_temp = thermXX_temp - 273.0;
 8002584:	ee77 7ae6 	vsub.f32	s15, s15, s13
		thermBH_temp = convertTempVal(RCM_GetUserConv());
 8002588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800258c:	ee17 3a90 	vmov	r3, s15
 8002590:	b29b      	uxth	r3, r3
		if (thermBH_temp > CANTx_FETTemp.FETTemp_float) CANTx_FETTemp.FETTemp_float = thermBH_temp;
 8002592:	ee07 3a90 	vmov	s15, r3
 8002596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		thermBH_temp = convertTempVal(RCM_GetUserConv());
 800259a:	8013      	strh	r3, [r2, #0]
		if (thermBH_temp > CANTx_FETTemp.FETTemp_float) CANTx_FETTemp.FETTemp_float = thermBH_temp;
 800259c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a4:	dd05      	ble.n	80025b2 <main+0x8f2>
 80025a6:	ee07 3a90 	vmov	s15, r3
 80025aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ae:	edca 7a00 	vstr	s15, [sl]
		state = 109;
 80025b2:	236d      	movs	r3, #109	; 0x6d
 80025b4:	802b      	strh	r3, [r5, #0]
}
 80025b6:	e6a5      	b.n	8002304 <main+0x644>
	else if (RCM_GetUserConvState() == RCM_USERCONV_EOC)
 80025b8:	f001 fcf4 	bl	8003fa4 <RCM_GetUserConvState>
 80025bc:	2802      	cmp	r0, #2
 80025be:	f47f aea1 	bne.w	8002304 <main+0x644>
		thermAL_temp = convertTempVal(RCM_GetUserConv());
 80025c2:	f001 fcb7 	bl	8003f34 <RCM_GetUserConv>
	thermXX_value = thermXX_value / 16.0; // Convert left-aligned to right-aligned (0-4096)
 80025c6:	f7fd ffcd 	bl	8000564 <__aeabi_i2d>
 80025ca:	4b61      	ldr	r3, [pc, #388]	; (8002750 <main+0xa90>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	f7fe f833 	bl	8000638 <__aeabi_dmul>
 80025d2:	f7fe fb09 	bl	8000be8 <__aeabi_d2uiz>
	float thermXX_voltage = thermXX_value * 3300.0 / 4096.0; //Convert to mV (to avoid decimal places)
 80025d6:	b280      	uxth	r0, r0
 80025d8:	f7fd ffc4 	bl	8000564 <__aeabi_i2d>
 80025dc:	a356      	add	r3, pc, #344	; (adr r3, 8002738 <main+0xa78>)
 80025de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e2:	f7fe f829 	bl	8000638 <__aeabi_dmul>
 80025e6:	f7fe fb1f 	bl	8000c28 <__aeabi_d2f>
	float thermXX_resistance = 3300.0 * 3300 / thermXX_voltage;
 80025ea:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8002754 <main+0xa94>
 80025ee:	ee07 0a10 	vmov	s14, r0
 80025f2:	ee87 7a87 	vdiv.f32	s14, s15, s14
	thermXX_resistance = thermXX_resistance - 3300;
 80025f6:	eddf 7a58 	vldr	s15, [pc, #352]	; 8002758 <main+0xa98>
	float thermXX_temp = 1000.0*(log(thermXX_resistance / 10000.0) + (3435.0/298.0));
 80025fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025fe:	ee17 0a90 	vmov	r0, s15
 8002602:	f7fd ffc1 	bl	8000588 <__aeabi_f2d>
 8002606:	a34e      	add	r3, pc, #312	; (adr r3, 8002740 <main+0xa80>)
 8002608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260c:	f7fe f814 	bl	8000638 <__aeabi_dmul>
 8002610:	ec41 0b10 	vmov	d0, r0, r1
 8002614:	f006 f93c 	bl	8008890 <log>
 8002618:	a34b      	add	r3, pc, #300	; (adr r3, 8002748 <main+0xa88>)
 800261a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261e:	ec51 0b10 	vmov	r0, r1, d0
 8002622:	f7fd fe53 	bl	80002cc <__adddf3>
 8002626:	4b4d      	ldr	r3, [pc, #308]	; (800275c <main+0xa9c>)
 8002628:	2200      	movs	r2, #0
 800262a:	f7fe f805 	bl	8000638 <__aeabi_dmul>
 800262e:	f7fe fafb 	bl	8000c28 <__aeabi_d2f>
	thermXX_temp = 1000.0 * 3435.0 / thermXX_temp;
 8002632:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002760 <main+0xaa0>
	thermXX_temp = thermXX_temp - 273.0;
 8002636:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8002764 <main+0xaa4>
		thermAL_temp = convertTempVal(RCM_GetUserConv());
 800263a:	4a4d      	ldr	r2, [pc, #308]	; (8002770 <main+0xab0>)
	thermXX_temp = 1000.0 * 3435.0 / thermXX_temp;
 800263c:	ee07 0a90 	vmov	s15, r0
 8002640:	eec7 7a27 	vdiv.f32	s15, s14, s15
		if (thermAL_temp > CANTx_FETTemp.FETTemp_float) CANTx_FETTemp.FETTemp_float = thermAL_temp;
 8002644:	ed9a 7a00 	vldr	s14, [sl]
	thermXX_temp = thermXX_temp - 273.0;
 8002648:	ee77 7ae6 	vsub.f32	s15, s15, s13
		thermAL_temp = convertTempVal(RCM_GetUserConv());
 800264c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002650:	ee17 3a90 	vmov	r3, s15
 8002654:	b29b      	uxth	r3, r3
		if (thermAL_temp > CANTx_FETTemp.FETTemp_float) CANTx_FETTemp.FETTemp_float = thermAL_temp;
 8002656:	ee07 3a90 	vmov	s15, r3
 800265a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		thermAL_temp = convertTempVal(RCM_GetUserConv());
 800265e:	8013      	strh	r3, [r2, #0]
		if (thermAL_temp > CANTx_FETTemp.FETTemp_float) CANTx_FETTemp.FETTemp_float = thermAL_temp;
 8002660:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002668:	dd05      	ble.n	8002676 <main+0x9b6>
 800266a:	ee07 3a90 	vmov	s15, r3
 800266e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002672:	edca 7a00 	vstr	s15, [sl]
		state = 108;
 8002676:	236c      	movs	r3, #108	; 0x6c
 8002678:	802b      	strh	r3, [r5, #0]
}
 800267a:	e643      	b.n	8002304 <main+0x644>
	if (RCM_GetUserConvState() == RCM_USERCONV_IDLE)
 800267c:	f001 fc92 	bl	8003fa4 <RCM_GetUserConvState>
 8002680:	b968      	cbnz	r0, 800269e <main+0x9de>
		RCM_RequestUserConv(ThermAHHandle);
 8002682:	4b3c      	ldr	r3, [pc, #240]	; (8002774 <main+0xab4>)
 8002684:	7818      	ldrb	r0, [r3, #0]
 8002686:	f001 fc45 	bl	8003f14 <RCM_RequestUserConv>
 800268a:	e63b      	b.n	8002304 <main+0x644>
	if (RCM_GetUserConvState() == RCM_USERCONV_IDLE)
 800268c:	f001 fc8a 	bl	8003fa4 <RCM_GetUserConvState>
 8002690:	2800      	cmp	r0, #0
 8002692:	d173      	bne.n	800277c <main+0xabc>
		RCM_RequestUserConv(ThermMTRHandle);
 8002694:	4b38      	ldr	r3, [pc, #224]	; (8002778 <main+0xab8>)
 8002696:	7818      	ldrb	r0, [r3, #0]
 8002698:	f001 fc3c 	bl	8003f14 <RCM_RequestUserConv>
 800269c:	e632      	b.n	8002304 <main+0x644>
	else if (RCM_GetUserConvState() == RCM_USERCONV_EOC)
 800269e:	f001 fc81 	bl	8003fa4 <RCM_GetUserConvState>
 80026a2:	2802      	cmp	r0, #2
 80026a4:	f47f ae2e 	bne.w	8002304 <main+0x644>
		CANTx_FETTemp.FETTemp_float = convertTempVal(RCM_GetUserConv());
 80026a8:	f001 fc44 	bl	8003f34 <RCM_GetUserConv>
	thermXX_value = thermXX_value / 16.0; // Convert left-aligned to right-aligned (0-4096)
 80026ac:	f7fd ff5a 	bl	8000564 <__aeabi_i2d>
 80026b0:	4b27      	ldr	r3, [pc, #156]	; (8002750 <main+0xa90>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	f7fd ffc0 	bl	8000638 <__aeabi_dmul>
 80026b8:	f7fe fa96 	bl	8000be8 <__aeabi_d2uiz>
	float thermXX_voltage = thermXX_value * 3300.0 / 4096.0; //Convert to mV (to avoid decimal places)
 80026bc:	b280      	uxth	r0, r0
 80026be:	f7fd ff51 	bl	8000564 <__aeabi_i2d>
 80026c2:	a31d      	add	r3, pc, #116	; (adr r3, 8002738 <main+0xa78>)
 80026c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c8:	f7fd ffb6 	bl	8000638 <__aeabi_dmul>
 80026cc:	f7fe faac 	bl	8000c28 <__aeabi_d2f>
	float thermXX_resistance = 3300.0 * 3300 / thermXX_voltage;
 80026d0:	eddf 7a20 	vldr	s15, [pc, #128]	; 8002754 <main+0xa94>
 80026d4:	ee07 0a10 	vmov	s14, r0
 80026d8:	ee87 7a87 	vdiv.f32	s14, s15, s14
	thermXX_resistance = thermXX_resistance - 3300;
 80026dc:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8002758 <main+0xa98>
	float thermXX_temp = 1000.0*(log(thermXX_resistance / 10000.0) + (3435.0/298.0));
 80026e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026e4:	ee17 0a90 	vmov	r0, s15
 80026e8:	f7fd ff4e 	bl	8000588 <__aeabi_f2d>
 80026ec:	a314      	add	r3, pc, #80	; (adr r3, 8002740 <main+0xa80>)
 80026ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f2:	f7fd ffa1 	bl	8000638 <__aeabi_dmul>
 80026f6:	ec41 0b10 	vmov	d0, r0, r1
 80026fa:	f006 f8c9 	bl	8008890 <log>
 80026fe:	a312      	add	r3, pc, #72	; (adr r3, 8002748 <main+0xa88>)
 8002700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002704:	ec51 0b10 	vmov	r0, r1, d0
 8002708:	f7fd fde0 	bl	80002cc <__adddf3>
 800270c:	4b13      	ldr	r3, [pc, #76]	; (800275c <main+0xa9c>)
 800270e:	2200      	movs	r2, #0
 8002710:	f7fd ff92 	bl	8000638 <__aeabi_dmul>
 8002714:	f7fe fa88 	bl	8000c28 <__aeabi_d2f>
	thermXX_temp = 1000.0 * 3435.0 / thermXX_temp;
 8002718:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002760 <main+0xaa0>
 800271c:	ee07 0a90 	vmov	s15, r0
 8002720:	eec7 7a27 	vdiv.f32	s15, s14, s15
		state = 107;
 8002724:	236b      	movs	r3, #107	; 0x6b
 8002726:	802b      	strh	r3, [r5, #0]
	thermXX_temp = thermXX_temp - 273.0;
 8002728:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002764 <main+0xaa4>
 800272c:	ee77 7ac7 	vsub.f32	s15, s15, s14
		CANTx_FETTemp.FETTemp_float = convertTempVal(RCM_GetUserConv());
 8002730:	edca 7a00 	vstr	s15, [sl]
		state = 107;
 8002734:	e5e6      	b.n	8002304 <main+0x644>
 8002736:	bf00      	nop
 8002738:	00000000 	.word	0x00000000
 800273c:	3fe9c800 	.word	0x3fe9c800
 8002740:	eb1c432d 	.word	0xeb1c432d
 8002744:	3f1a36e2 	.word	0x3f1a36e2
 8002748:	b61eed1a 	.word	0xb61eed1a
 800274c:	40270dbe 	.word	0x40270dbe
 8002750:	3fb00000 	.word	0x3fb00000
 8002754:	4b262b10 	.word	0x4b262b10
 8002758:	454e4000 	.word	0x454e4000
 800275c:	408f4000 	.word	0x408f4000
 8002760:	4a51a7e0 	.word	0x4a51a7e0
 8002764:	43888000 	.word	0x43888000
 8002768:	20000902 	.word	0x20000902
 800276c:	20000900 	.word	0x20000900
 8002770:	200008fe 	.word	0x200008fe
 8002774:	200005d8 	.word	0x200005d8
 8002778:	20000609 	.word	0x20000609
	else if (RCM_GetUserConvState() == RCM_USERCONV_EOC)
 800277c:	f001 fc12 	bl	8003fa4 <RCM_GetUserConvState>
 8002780:	2802      	cmp	r0, #2
 8002782:	f47f adbf 	bne.w	8002304 <main+0x644>
		CANTx_mtrTemp.mtrTemp_float = convertTempVal(RCM_GetUserConv());
 8002786:	f001 fbd5 	bl	8003f34 <RCM_GetUserConv>
	thermXX_value = thermXX_value / 16.0; // Convert left-aligned to right-aligned (0-4096)
 800278a:	f7fd feeb 	bl	8000564 <__aeabi_i2d>
 800278e:	4b7a      	ldr	r3, [pc, #488]	; (8002978 <main+0xcb8>)
 8002790:	2200      	movs	r2, #0
 8002792:	f7fd ff51 	bl	8000638 <__aeabi_dmul>
 8002796:	f7fe fa27 	bl	8000be8 <__aeabi_d2uiz>
	float thermXX_voltage = thermXX_value * 3300.0 / 4096.0; //Convert to mV (to avoid decimal places)
 800279a:	b280      	uxth	r0, r0
 800279c:	f7fd fee2 	bl	8000564 <__aeabi_i2d>
 80027a0:	a367      	add	r3, pc, #412	; (adr r3, 8002940 <main+0xc80>)
 80027a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a6:	f7fd ff47 	bl	8000638 <__aeabi_dmul>
 80027aa:	f7fe fa3d 	bl	8000c28 <__aeabi_d2f>
	float thermXX_resistance = 3300.0 * 3300 / thermXX_voltage;
 80027ae:	eddf 7a73 	vldr	s15, [pc, #460]	; 800297c <main+0xcbc>
 80027b2:	ee07 0a10 	vmov	s14, r0
 80027b6:	ee87 7a87 	vdiv.f32	s14, s15, s14
	thermXX_resistance = thermXX_resistance - 3300;
 80027ba:	eddf 7a71 	vldr	s15, [pc, #452]	; 8002980 <main+0xcc0>
	float thermXX_temp = 1000.0*(log(thermXX_resistance / 10000.0) + (3435.0/298.0));
 80027be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027c2:	ee17 0a90 	vmov	r0, s15
 80027c6:	f7fd fedf 	bl	8000588 <__aeabi_f2d>
 80027ca:	a35f      	add	r3, pc, #380	; (adr r3, 8002948 <main+0xc88>)
 80027cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d0:	f7fd ff32 	bl	8000638 <__aeabi_dmul>
 80027d4:	ec41 0b10 	vmov	d0, r0, r1
 80027d8:	f006 f85a 	bl	8008890 <log>
 80027dc:	a35c      	add	r3, pc, #368	; (adr r3, 8002950 <main+0xc90>)
 80027de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e2:	ec51 0b10 	vmov	r0, r1, d0
 80027e6:	f7fd fd71 	bl	80002cc <__adddf3>
 80027ea:	4b66      	ldr	r3, [pc, #408]	; (8002984 <main+0xcc4>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	f7fd ff23 	bl	8000638 <__aeabi_dmul>
 80027f2:	f7fe fa19 	bl	8000c28 <__aeabi_d2f>
	thermXX_temp = 1000.0 * 3435.0 / thermXX_temp;
 80027f6:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8002988 <main+0xcc8>
		CANTx_mtrTemp.mtrTemp_float = convertTempVal(RCM_GetUserConv());
 80027fa:	4b64      	ldr	r3, [pc, #400]	; (800298c <main+0xccc>)
	thermXX_temp = 1000.0 * 3435.0 / thermXX_temp;
 80027fc:	ee07 0a90 	vmov	s15, r0
 8002800:	eec7 7a27 	vdiv.f32	s15, s14, s15
	thermXX_temp = thermXX_temp - 273.0;
 8002804:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8002990 <main+0xcd0>
 8002808:	ee77 7ac7 	vsub.f32	s15, s15, s14
		CANTx_mtrTemp.mtrTemp_float = convertTempVal(RCM_GetUserConv());
 800280c:	edc3 7a00 	vstr	s15, [r3]
		state = 106;
 8002810:	236a      	movs	r3, #106	; 0x6a
 8002812:	802b      	strh	r3, [r5, #0]
 8002814:	e576      	b.n	8002304 <main+0x644>
	CANTx_phaseCurrent.phaseCurrent_float = ((float) MC_GetPhaseCurrentAmplitudeMotor1()) * S16ACONVFACTORINV;
 8002816:	f000 fd85 	bl	8003324 <MC_GetPhaseCurrentAmplitudeMotor1>
 800281a:	ee07 0a90 	vmov	s15, r0
 800281e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002822:	ee17 0a90 	vmov	r0, s15
 8002826:	f7fd feaf 	bl	8000588 <__aeabi_f2d>
 800282a:	a34b      	add	r3, pc, #300	; (adr r3, 8002958 <main+0xc98>)
 800282c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002830:	f7fd ff02 	bl	8000638 <__aeabi_dmul>
 8002834:	f7fe f9f8 	bl	8000c28 <__aeabi_d2f>
 8002838:	4b56      	ldr	r3, [pc, #344]	; (8002994 <main+0xcd4>)
 800283a:	6018      	str	r0, [r3, #0]
	state = 105;
 800283c:	2369      	movs	r3, #105	; 0x69
 800283e:	802b      	strh	r3, [r5, #0]
}
 8002840:	e560      	b.n	8002304 <main+0x644>
	CANTx_mtrVelocity.mtrVelocity_float = (float) 6*MC_GetMecSpeedAverageMotor1(); //Multiply by 6 to convert from dHz to RPM;
 8002842:	f000 fd69 	bl	8003318 <MC_GetMecSpeedAverageMotor1>
 8002846:	ee07 0a90 	vmov	s15, r0
 800284a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800284e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002852:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002856:	4b50      	ldr	r3, [pc, #320]	; (8002998 <main+0xcd8>)
	CANTx_carVelocity.carVelocity_float = CANTx_mtrVelocity.mtrVelocity_float * WHEELRAD * PI / 30.0; //[m/s]
 8002858:	ee17 0a90 	vmov	r0, s15
	CANTx_mtrVelocity.mtrVelocity_float = (float) 6*MC_GetMecSpeedAverageMotor1(); //Multiply by 6 to convert from dHz to RPM;
 800285c:	edc3 7a00 	vstr	s15, [r3]
	CANTx_carVelocity.carVelocity_float = CANTx_mtrVelocity.mtrVelocity_float * WHEELRAD * PI / 30.0; //[m/s]
 8002860:	f7fd fe92 	bl	8000588 <__aeabi_f2d>
 8002864:	a33e      	add	r3, pc, #248	; (adr r3, 8002960 <main+0xca0>)
 8002866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286a:	f7fd fee5 	bl	8000638 <__aeabi_dmul>
 800286e:	f7fe f9db 	bl	8000c28 <__aeabi_d2f>
 8002872:	4b4a      	ldr	r3, [pc, #296]	; (800299c <main+0xcdc>)
 8002874:	6018      	str	r0, [r3, #0]
	state = 104;
 8002876:	2368      	movs	r3, #104	; 0x68
 8002878:	802b      	strh	r3, [r5, #0]
}
 800287a:	e543      	b.n	8002304 <main+0x644>
	if (RCM_GetUserConvState() == RCM_USERCONV_IDLE)
 800287c:	f001 fb92 	bl	8003fa4 <RCM_GetUserConvState>
 8002880:	b9e8      	cbnz	r0, 80028be <main+0xbfe>
		RCM_RequestUserConv(DCCurrHandle);
 8002882:	4b47      	ldr	r3, [pc, #284]	; (80029a0 <main+0xce0>)
 8002884:	7818      	ldrb	r0, [r3, #0]
 8002886:	f001 fb45 	bl	8003f14 <RCM_RequestUserConv>
 800288a:	e53b      	b.n	8002304 <main+0x644>
	CANTx_busVoltage.busVoltage_float = ((float) PQD_MotorPowMeasM1.pVBS->AvBusVoltage_d) * ((float) PQD_MotorPowMeasM1.pVBS->ConversionFactor) / 65536.0;
 800288c:	4b45      	ldr	r3, [pc, #276]	; (80029a4 <main+0xce4>)
 800288e:	eddf 6a46 	vldr	s13, [pc, #280]	; 80029a8 <main+0xce8>
 8002892:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	state = 102;
 8002896:	2266      	movs	r2, #102	; 0x66
 8002898:	802a      	strh	r2, [r5, #0]
	CANTx_busVoltage.busVoltage_float = ((float) PQD_MotorPowMeasM1.pVBS->AvBusVoltage_d) * ((float) PQD_MotorPowMeasM1.pVBS->ConversionFactor) / 65536.0;
 800289a:	885a      	ldrh	r2, [r3, #2]
 800289c:	88db      	ldrh	r3, [r3, #6]
 800289e:	ee07 2a10 	vmov	s14, r2
 80028a2:	ee07 3a90 	vmov	s15, r3
 80028a6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80028aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ae:	4b3f      	ldr	r3, [pc, #252]	; (80029ac <main+0xcec>)
 80028b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028b8:	edc3 7a00 	vstr	s15, [r3]
}
 80028bc:	e522      	b.n	8002304 <main+0x644>
	else if (RCM_GetUserConvState() == RCM_USERCONV_EOC)
 80028be:	f001 fb71 	bl	8003fa4 <RCM_GetUserConvState>
 80028c2:	2802      	cmp	r0, #2
 80028c4:	f47f ad1e 	bne.w	8002304 <main+0x644>
		CANTx_busCurrent.busCurrent_float = ((RCM_GetUserConv() * 3.3 / 65535.0) - 2.5) / ISENSORGAIN;
 80028c8:	f001 fb34 	bl	8003f34 <RCM_GetUserConv>
 80028cc:	f7fd fe4a 	bl	8000564 <__aeabi_i2d>
 80028d0:	a325      	add	r3, pc, #148	; (adr r3, 8002968 <main+0xca8>)
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	f7fd feaf 	bl	8000638 <__aeabi_dmul>
 80028da:	4b35      	ldr	r3, [pc, #212]	; (80029b0 <main+0xcf0>)
 80028dc:	2200      	movs	r2, #0
 80028de:	f7fd fcf3 	bl	80002c8 <__aeabi_dsub>
 80028e2:	a323      	add	r3, pc, #140	; (adr r3, 8002970 <main+0xcb0>)
 80028e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e8:	f7fd fea6 	bl	8000638 <__aeabi_dmul>
 80028ec:	f7fe f99c 	bl	8000c28 <__aeabi_d2f>
 80028f0:	4b30      	ldr	r3, [pc, #192]	; (80029b4 <main+0xcf4>)
 80028f2:	6018      	str	r0, [r3, #0]
		state = 103;
 80028f4:	2367      	movs	r3, #103	; 0x67
 80028f6:	802b      	strh	r3, [r5, #0]
}
 80028f8:	e504      	b.n	8002304 <main+0x644>
	  switch (state)
 80028fa:	2a00      	cmp	r2, #0
 80028fc:	f000 8182 	beq.w	8002c04 <main+0xf44>
 8002900:	2a01      	cmp	r2, #1
 8002902:	f47f acff 	bne.w	8002304 <main+0x644>
	HAL_Delay(250); //Short delay to account for startup transients (DC voltage spike)
 8002906:	20fa      	movs	r0, #250	; 0xfa
 8002908:	f001 fe88 	bl	800461c <HAL_Delay>
	lastWDTime = HAL_GetTick();
 800290c:	f001 fe80 	bl	8004610 <HAL_GetTick>
 8002910:	4b29      	ldr	r3, [pc, #164]	; (80029b8 <main+0xcf8>)
 8002912:	8018      	strh	r0, [r3, #0]
	state = 100;
 8002914:	2364      	movs	r3, #100	; 0x64
 8002916:	802b      	strh	r3, [r5, #0]
}
 8002918:	e4f4      	b.n	8002304 <main+0x644>
	state = 101;
 800291a:	2365      	movs	r3, #101	; 0x65
 800291c:	802b      	strh	r3, [r5, #0]
}
 800291e:	e4f1      	b.n	8002304 <main+0x644>
	  switch (state)
 8002920:	f46f 7095 	mvn.w	r0, #298	; 0x12a
 8002924:	4402      	add	r2, r0
 8002926:	2a04      	cmp	r2, #4
 8002928:	f200 8473 	bhi.w	8003212 <main+0x1552>
 800292c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002930:	01410146 	.word	0x01410146
 8002934:	012a012f 	.word	0x012a012f
 8002938:	0151      	.short	0x0151
 800293a:	bf00      	nop
 800293c:	f3af 8000 	nop.w
 8002940:	00000000 	.word	0x00000000
 8002944:	3fe9c800 	.word	0x3fe9c800
 8002948:	eb1c432d 	.word	0xeb1c432d
 800294c:	3f1a36e2 	.word	0x3f1a36e2
 8002950:	b61eed1a 	.word	0xb61eed1a
 8002954:	40270dbe 	.word	0x40270dbe
 8002958:	db6db6db 	.word	0xdb6db6db
 800295c:	3f456db6 	.word	0x3f456db6
 8002960:	a4298729 	.word	0xa4298729
 8002964:	3f3b700f 	.word	0x3f3b700f
 8002968:	cce7334d 	.word	0xcce7334d
 800296c:	3f0a6680 	.word	0x3f0a6680
 8002970:	c427e567 	.word	0xc427e567
 8002974:	4029f959 	.word	0x4029f959
 8002978:	3fb00000 	.word	0x3fb00000
 800297c:	4b262b10 	.word	0x4b262b10
 8002980:	454e4000 	.word	0x454e4000
 8002984:	408f4000 	.word	0x408f4000
 8002988:	4a51a7e0 	.word	0x4a51a7e0
 800298c:	20000590 	.word	0x20000590
 8002990:	43888000 	.word	0x43888000
 8002994:	20000598 	.word	0x20000598
 8002998:	20000594 	.word	0x20000594
 800299c:	2000058c 	.word	0x2000058c
 80029a0:	200005a8 	.word	0x200005a8
 80029a4:	20000000 	.word	0x20000000
 80029a8:	37800000 	.word	0x37800000
 80029ac:	20000588 	.word	0x20000588
 80029b0:	40040000 	.word	0x40040000
 80029b4:	20000584 	.word	0x20000584
 80029b8:	200007a4 	.word	0x200007a4
 80029bc:	f5b2 7ffd 	cmp.w	r2, #506	; 0x1fa
 80029c0:	f080 82e1 	bcs.w	8002f86 <main+0x12c6>
 80029c4:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 80029c8:	f4ff ac9c 	bcc.w	8002304 <main+0x644>
 80029cc:	f5a2 72c8 	sub.w	r2, r2, #400	; 0x190
 80029d0:	2a69      	cmp	r2, #105	; 0x69
 80029d2:	f63f ac97 	bhi.w	8002304 <main+0x644>
 80029d6:	a301      	add	r3, pc, #4	; (adr r3, 80029dc <main+0xd1c>)
 80029d8:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80029dc:	08002f7d 	.word	0x08002f7d
 80029e0:	08002f15 	.word	0x08002f15
 80029e4:	08002e1d 	.word	0x08002e1d
 80029e8:	080030af 	.word	0x080030af
 80029ec:	08002fb3 	.word	0x08002fb3
 80029f0:	08003027 	.word	0x08003027
 80029f4:	08002e15 	.word	0x08002e15
 80029f8:	08002de5 	.word	0x08002de5
 80029fc:	08002305 	.word	0x08002305
 8002a00:	08002305 	.word	0x08002305
 8002a04:	08002305 	.word	0x08002305
 8002a08:	08002305 	.word	0x08002305
 8002a0c:	08002305 	.word	0x08002305
 8002a10:	08002305 	.word	0x08002305
 8002a14:	08002305 	.word	0x08002305
 8002a18:	08002305 	.word	0x08002305
 8002a1c:	08002305 	.word	0x08002305
 8002a20:	08002305 	.word	0x08002305
 8002a24:	08002305 	.word	0x08002305
 8002a28:	08002305 	.word	0x08002305
 8002a2c:	08002305 	.word	0x08002305
 8002a30:	08002305 	.word	0x08002305
 8002a34:	08002305 	.word	0x08002305
 8002a38:	08002305 	.word	0x08002305
 8002a3c:	08002305 	.word	0x08002305
 8002a40:	08002305 	.word	0x08002305
 8002a44:	08002305 	.word	0x08002305
 8002a48:	08002305 	.word	0x08002305
 8002a4c:	08002305 	.word	0x08002305
 8002a50:	08002305 	.word	0x08002305
 8002a54:	08002305 	.word	0x08002305
 8002a58:	08002305 	.word	0x08002305
 8002a5c:	08002305 	.word	0x08002305
 8002a60:	08002305 	.word	0x08002305
 8002a64:	08002305 	.word	0x08002305
 8002a68:	08002305 	.word	0x08002305
 8002a6c:	08002305 	.word	0x08002305
 8002a70:	08002305 	.word	0x08002305
 8002a74:	08002305 	.word	0x08002305
 8002a78:	08002305 	.word	0x08002305
 8002a7c:	08002305 	.word	0x08002305
 8002a80:	08002305 	.word	0x08002305
 8002a84:	08002305 	.word	0x08002305
 8002a88:	08002305 	.word	0x08002305
 8002a8c:	08002305 	.word	0x08002305
 8002a90:	08002305 	.word	0x08002305
 8002a94:	08002305 	.word	0x08002305
 8002a98:	08002305 	.word	0x08002305
 8002a9c:	08002305 	.word	0x08002305
 8002aa0:	08002305 	.word	0x08002305
 8002aa4:	08002305 	.word	0x08002305
 8002aa8:	08002305 	.word	0x08002305
 8002aac:	08002305 	.word	0x08002305
 8002ab0:	08002305 	.word	0x08002305
 8002ab4:	08002305 	.word	0x08002305
 8002ab8:	08002305 	.word	0x08002305
 8002abc:	08002305 	.word	0x08002305
 8002ac0:	08002305 	.word	0x08002305
 8002ac4:	08002305 	.word	0x08002305
 8002ac8:	08002305 	.word	0x08002305
 8002acc:	08002305 	.word	0x08002305
 8002ad0:	08002305 	.word	0x08002305
 8002ad4:	08002305 	.word	0x08002305
 8002ad8:	08002305 	.word	0x08002305
 8002adc:	08002305 	.word	0x08002305
 8002ae0:	08002305 	.word	0x08002305
 8002ae4:	08002305 	.word	0x08002305
 8002ae8:	08002305 	.word	0x08002305
 8002aec:	08002305 	.word	0x08002305
 8002af0:	08002305 	.word	0x08002305
 8002af4:	08002305 	.word	0x08002305
 8002af8:	08002305 	.word	0x08002305
 8002afc:	08002305 	.word	0x08002305
 8002b00:	08002305 	.word	0x08002305
 8002b04:	08002305 	.word	0x08002305
 8002b08:	08002305 	.word	0x08002305
 8002b0c:	08002305 	.word	0x08002305
 8002b10:	08002305 	.word	0x08002305
 8002b14:	08002305 	.word	0x08002305
 8002b18:	08002305 	.word	0x08002305
 8002b1c:	08002305 	.word	0x08002305
 8002b20:	08002305 	.word	0x08002305
 8002b24:	08002305 	.word	0x08002305
 8002b28:	08002305 	.word	0x08002305
 8002b2c:	08002305 	.word	0x08002305
 8002b30:	08002305 	.word	0x08002305
 8002b34:	08002305 	.word	0x08002305
 8002b38:	08002305 	.word	0x08002305
 8002b3c:	08002305 	.word	0x08002305
 8002b40:	08002305 	.word	0x08002305
 8002b44:	08002305 	.word	0x08002305
 8002b48:	08002305 	.word	0x08002305
 8002b4c:	08002305 	.word	0x08002305
 8002b50:	08002305 	.word	0x08002305
 8002b54:	08002305 	.word	0x08002305
 8002b58:	08002305 	.word	0x08002305
 8002b5c:	08002305 	.word	0x08002305
 8002b60:	08002305 	.word	0x08002305
 8002b64:	08002305 	.word	0x08002305
 8002b68:	08002dab 	.word	0x08002dab
 8002b6c:	08002da1 	.word	0x08002da1
 8002b70:	08002d99 	.word	0x08002d99
 8002b74:	08002d2d 	.word	0x08002d2d
 8002b78:	08002caf 	.word	0x08002caf
 8002b7c:	08002c39 	.word	0x08002c39
 8002b80:	08002c31 	.word	0x08002c31
	state = 303;
 8002b84:	f240 132f 	movw	r3, #303	; 0x12f
 8002b88:	802b      	strh	r3, [r5, #0]
}
 8002b8a:	f7ff bbbb 	b.w	8002304 <main+0x644>
	fanDutyCycle = FANPWMSLOPE * CANTx_FETTemp.FETTemp_float;
 8002b8e:	f8da 0000 	ldr.w	r0, [sl]
 8002b92:	f7fd fcf9 	bl	8000588 <__aeabi_f2d>
 8002b96:	a3dc      	add	r3, pc, #880	; (adr r3, 8002f08 <main+0x1248>)
 8002b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9c:	f7fd fd4c 	bl	8000638 <__aeabi_dmul>
 8002ba0:	f7fe f842 	bl	8000c28 <__aeabi_d2f>
 8002ba4:	4bc8      	ldr	r3, [pc, #800]	; (8002ec8 <main+0x1208>)
 8002ba6:	6018      	str	r0, [r3, #0]
	state = 302;
 8002ba8:	f44f 7397 	mov.w	r3, #302	; 0x12e
 8002bac:	802b      	strh	r3, [r5, #0]
}
 8002bae:	f7ff bba9 	b.w	8002304 <main+0x644>
	state = 301;
 8002bb2:	f240 132d 	movw	r3, #301	; 0x12d
 8002bb6:	802b      	strh	r3, [r5, #0]
}
 8002bb8:	f7ff bba4 	b.w	8002304 <main+0x644>
	if (RCM_GetUserConvState() == RCM_USERCONV_IDLE)
 8002bbc:	f001 f9f2 	bl	8003fa4 <RCM_GetUserConvState>
 8002bc0:	2800      	cmp	r0, #0
 8002bc2:	f47f ab83 	bne.w	80022cc <main+0x60c>
		RCM_RequestUserConv(Pot2Handle);
 8002bc6:	4bc1      	ldr	r3, [pc, #772]	; (8002ecc <main+0x120c>)
 8002bc8:	7818      	ldrb	r0, [r3, #0]
 8002bca:	f001 f9a3 	bl	8003f14 <RCM_RequestUserConv>
 8002bce:	f7ff bb99 	b.w	8002304 <main+0x644>
	state = 400;
 8002bd2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002bd6:	802b      	strh	r3, [r5, #0]
}
 8002bd8:	f7ff bb94 	b.w	8002304 <main+0x644>
	sprintf(msg_debug, "State %hu\r\n", state);
 8002bdc:	49bc      	ldr	r1, [pc, #752]	; (8002ed0 <main+0x1210>)
 8002bde:	2263      	movs	r2, #99	; 0x63
 8002be0:	4620      	mov	r0, r4
 8002be2:	f005 f9e5 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8002be6:	4620      	mov	r0, r4
 8002be8:	f7fd fb12 	bl	8000210 <strlen>
 8002bec:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf0:	b282      	uxth	r2, r0
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	4630      	mov	r0, r6
 8002bf6:	f003 fc4f 	bl	8006498 <HAL_UART_Transmit>
	HAL_Delay(250);
 8002bfa:	20fa      	movs	r0, #250	; 0xfa
 8002bfc:	f001 fd0e 	bl	800461c <HAL_Delay>
}
 8002c00:	f7ff bb80 	b.w	8002304 <main+0x644>
	sprintf(msg_debug, "State %hu\r\n", state);
 8002c04:	49b2      	ldr	r1, [pc, #712]	; (8002ed0 <main+0x1210>)
 8002c06:	4620      	mov	r0, r4
 8002c08:	f005 f9d2 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	f7fd faff 	bl	8000210 <strlen>
 8002c12:	4621      	mov	r1, r4
 8002c14:	b282      	uxth	r2, r0
 8002c16:	f04f 33ff 	mov.w	r3, #4294967295
 8002c1a:	4630      	mov	r0, r6
 8002c1c:	f003 fc3c 	bl	8006498 <HAL_UART_Transmit>
	HAL_Delay(250);
 8002c20:	20fa      	movs	r0, #250	; 0xfa
 8002c22:	f001 fcfb 	bl	800461c <HAL_Delay>
	state = 500; //Drive commands
 8002c26:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
	sprintf(msg_debug, "State %hu\r\n", state);
 8002c2a:	49a9      	ldr	r1, [pc, #676]	; (8002ed0 <main+0x1210>)
	state = 500; //Drive commands
 8002c2c:	802a      	strh	r2, [r5, #0]
	sprintf(msg_debug, "State %hu\r\n", state);
 8002c2e:	e7d7      	b.n	8002be0 <main+0xf20>
	  	  case 505: state505(); break;
 8002c30:	f7fe fc82 	bl	8001538 <state505>
 8002c34:	f7ff bb66 	b.w	8002304 <main+0x644>
	float regenEnergy = 0.5 * CARMASS * vehicleSpeed * vehicleSpeed; //1/2 mV^2
 8002c38:	4ba6      	ldr	r3, [pc, #664]	; (8002ed4 <main+0x1214>)
 8002c3a:	6818      	ldr	r0, [r3, #0]
 8002c3c:	f7fd fca4 	bl	8000588 <__aeabi_f2d>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	f7fd fcf8 	bl	8000638 <__aeabi_dmul>
 8002c48:	2200      	movs	r2, #0
 8002c4a:	4ba3      	ldr	r3, [pc, #652]	; (8002ed8 <main+0x1218>)
 8002c4c:	f7fd fcf4 	bl	8000638 <__aeabi_dmul>
 8002c50:	f7fd ffea 	bl	8000c28 <__aeabi_d2f>
	float regenPower = Vbat * IREGENMAX * CANRx_current.current_float; //P = VI
 8002c54:	4ba1      	ldr	r3, [pc, #644]	; (8002edc <main+0x121c>)
	float regenEnergy = 0.5 * CARMASS * vehicleSpeed * vehicleSpeed; //1/2 mV^2
 8002c56:	ee08 0a10 	vmov	s16, r0
	float regenPower = Vbat * IREGENMAX * CANRx_current.current_float; //P = VI
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	f7fd fc94 	bl	8000588 <__aeabi_f2d>
 8002c60:	4607      	mov	r7, r0
 8002c62:	f8d9 0000 	ldr.w	r0, [r9]
 8002c66:	4688      	mov	r8, r1
 8002c68:	f7fd fc8e 	bl	8000588 <__aeabi_f2d>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4638      	mov	r0, r7
 8002c72:	4641      	mov	r1, r8
 8002c74:	f7fd fce0 	bl	8000638 <__aeabi_dmul>
 8002c78:	4b99      	ldr	r3, [pc, #612]	; (8002ee0 <main+0x1220>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f7fd fcdc 	bl	8000638 <__aeabi_dmul>
 8002c80:	f7fd ffd2 	bl	8000c28 <__aeabi_d2f>
	float regenTime = regenEnergy / regenPower; //[s]
 8002c84:	ee07 0a90 	vmov	s15, r0
 8002c88:	eec8 7a27 	vdiv.f32	s15, s16, s15
	MC_ProgramSpeedRampMotor1(0, regenTimeMS);
 8002c8c:	2000      	movs	r0, #0
	float regenTimeMS = regenTime * 1000.0; //[ms]
 8002c8e:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8002ee4 <main+0x1224>
 8002c92:	ee67 7a87 	vmul.f32	s15, s15, s14
	MC_ProgramSpeedRampMotor1(0, regenTimeMS);
 8002c96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c9a:	ee17 3a90 	vmov	r3, s15
 8002c9e:	b299      	uxth	r1, r3
 8002ca0:	f000 fb22 	bl	80032e8 <MC_ProgramSpeedRampMotor1>
	state = 600;
 8002ca4:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002ca8:	802b      	strh	r3, [r5, #0]
}
 8002caa:	f7ff bb2b 	b.w	8002304 <main+0x644>
	float finalSpeed = userDirectionFlag * CANRx_velocity.velocity_float * 30.0 / (PI * WHEELRAD); //RPM
 8002cae:	4b8e      	ldr	r3, [pc, #568]	; (8002ee8 <main+0x1228>)
 8002cb0:	ed93 7a00 	vldr	s14, [r3]
 8002cb4:	4b8d      	ldr	r3, [pc, #564]	; (8002eec <main+0x122c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	9301      	str	r3, [sp, #4]
 8002cba:	ee07 3a90 	vmov	s15, r3
 8002cbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cc6:	ee17 0a90 	vmov	r0, s15
 8002cca:	f7fd fc5d 	bl	8000588 <__aeabi_f2d>
 8002cce:	a378      	add	r3, pc, #480	; (adr r3, 8002eb0 <main+0x11f0>)
 8002cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd4:	f7fd fcb0 	bl	8000638 <__aeabi_dmul>
 8002cd8:	f7fd ffa6 	bl	8000c28 <__aeabi_d2f>
 8002cdc:	ee08 0a10 	vmov	s16, r0
	sprintf(msg_debug, "Speed ramp value (RPM): %hu\r\n", (int) finalSpeed);
 8002ce0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8002ce4:	4982      	ldr	r1, [pc, #520]	; (8002ef0 <main+0x1230>)
 8002ce6:	ee17 2a90 	vmov	r2, s15
 8002cea:	4620      	mov	r0, r4
 8002cec:	f005 f960 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8002cf0:	4620      	mov	r0, r4
 8002cf2:	f7fd fa8d 	bl	8000210 <strlen>
 8002cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfa:	b282      	uxth	r2, r0
 8002cfc:	4621      	mov	r1, r4
 8002cfe:	4630      	mov	r0, r6
 8002d00:	f003 fbca 	bl	8006498 <HAL_UART_Transmit>
	MC_ProgramSpeedRampMotor1(finalSpeed/6.0, SPEEDRAMPTIME);
 8002d04:	ee18 0a10 	vmov	r0, s16
 8002d08:	f7fd fc3e 	bl	8000588 <__aeabi_f2d>
 8002d0c:	a36a      	add	r3, pc, #424	; (adr r3, 8002eb8 <main+0x11f8>)
 8002d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d12:	f7fd fc91 	bl	8000638 <__aeabi_dmul>
 8002d16:	f7fd ff3f 	bl	8000b98 <__aeabi_d2iz>
 8002d1a:	2196      	movs	r1, #150	; 0x96
 8002d1c:	b200      	sxth	r0, r0
 8002d1e:	f000 fae3 	bl	80032e8 <MC_ProgramSpeedRampMotor1>
	state = 600;
 8002d22:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002d26:	802b      	strh	r3, [r5, #0]
}
 8002d28:	f7ff baec 	b.w	8002304 <main+0x644>
	float finalTorque = userDirectionFlag * CANRx_current.current_float * IQMAXS16A;
 8002d2c:	4b6f      	ldr	r3, [pc, #444]	; (8002eec <main+0x122c>)
 8002d2e:	ed99 7a00 	vldr	s14, [r9]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	9301      	str	r3, [sp, #4]
 8002d36:	ee07 3a90 	vmov	s15, r3
 8002d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d42:	ee17 0a90 	vmov	r0, s15
 8002d46:	f7fd fc1f 	bl	8000588 <__aeabi_f2d>
 8002d4a:	a35d      	add	r3, pc, #372	; (adr r3, 8002ec0 <main+0x1200>)
 8002d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d50:	f7fd fc72 	bl	8000638 <__aeabi_dmul>
 8002d54:	f7fd ff68 	bl	8000c28 <__aeabi_d2f>
	sprintf(msg_debug, "Torque ramp value: %hu\r\n", (int) finalTorque);
 8002d58:	ee07 0a90 	vmov	s15, r0
 8002d5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d60:	4964      	ldr	r1, [pc, #400]	; (8002ef4 <main+0x1234>)
 8002d62:	ee17 2a90 	vmov	r2, s15
 8002d66:	4620      	mov	r0, r4
 8002d68:	ee17 8a90 	vmov	r8, s15
 8002d6c:	f005 f920 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8002d70:	4620      	mov	r0, r4
 8002d72:	f7fd fa4d 	bl	8000210 <strlen>
 8002d76:	4621      	mov	r1, r4
 8002d78:	b282      	uxth	r2, r0
 8002d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7e:	4630      	mov	r0, r6
 8002d80:	f003 fb8a 	bl	8006498 <HAL_UART_Transmit>
	MC_ProgramTorqueRampMotor1((int) finalTorque, TORQUERAMPTIME);
 8002d84:	fa0f f088 	sxth.w	r0, r8
 8002d88:	2196      	movs	r1, #150	; 0x96
 8002d8a:	f000 fab9 	bl	8003300 <MC_ProgramTorqueRampMotor1>
	state = 600;
 8002d8e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002d92:	802b      	strh	r3, [r5, #0]
}
 8002d94:	f7ff bab6 	b.w	8002304 <main+0x644>
	  	  case 501: state501(); break;
 8002d98:	f7fe fa82 	bl	80012a0 <state501>
 8002d9c:	f7ff bab2 	b.w	8002304 <main+0x644>
	state = 501;
 8002da0:	f240 13f5 	movw	r3, #501	; 0x1f5
 8002da4:	802b      	strh	r3, [r5, #0]
}
 8002da6:	f7ff baad 	b.w	8002304 <main+0x644>
	if (CANTx_ErrorFlags > 0)
 8002daa:	4b53      	ldr	r3, [pc, #332]	; (8002ef8 <main+0x1238>)
 8002dac:	681a      	ldr	r2, [r3, #0]
	state = 500;
 8002dae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002db2:	802b      	strh	r3, [r5, #0]
	if (CANTx_ErrorFlags > 0)
 8002db4:	2a00      	cmp	r2, #0
 8002db6:	d1ea      	bne.n	8002d8e <main+0x10ce>
		if(HAL_GPIO_ReadPin(FLT_OUT_GPIO_Port, FLT_OUT_Pin))
 8002db8:	4850      	ldr	r0, [pc, #320]	; (8002efc <main+0x123c>)
 8002dba:	9201      	str	r2, [sp, #4]
 8002dbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dc0:	f002 fb9c 	bl	80054fc <HAL_GPIO_ReadPin>
 8002dc4:	9a01      	ldr	r2, [sp, #4]
 8002dc6:	2800      	cmp	r0, #0
 8002dc8:	f43f aa9c 	beq.w	8002304 <main+0x644>
	HAL_GPIO_WritePin(FLT_OUT_GPIO_Port, FLT_OUT_Pin, GPIO_PIN_RESET); //Set FLT_OUT low, turning off the LED
 8002dcc:	484b      	ldr	r0, [pc, #300]	; (8002efc <main+0x123c>)
 8002dce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dd2:	f002 fb99 	bl	8005508 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_DIS_GPIO_Port, DRV_DIS_Pin, GPIO_PIN_RESET); //Set DRV_DIS low, enabling the FETs
 8002dd6:	9a01      	ldr	r2, [sp, #4]
 8002dd8:	4849      	ldr	r0, [pc, #292]	; (8002f00 <main+0x1240>)
 8002dda:	2102      	movs	r1, #2
 8002ddc:	f002 fb94 	bl	8005508 <HAL_GPIO_WritePin>
}
 8002de0:	f7ff ba90 	b.w	8002304 <main+0x644>
	if (CANTx_busVoltage.busVoltage_float < VBUSMIN)
 8002de4:	4b3d      	ldr	r3, [pc, #244]	; (8002edc <main+0x121c>)
 8002de6:	ed93 7a00 	vldr	s14, [r3]
 8002dea:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 8002dee:	eeb4 7ae7 	vcmpe.f32	s14, s15
	state = 499;
 8002df2:	f240 13f3 	movw	r3, #499	; 0x1f3
	if (CANTx_busVoltage.busVoltage_float < VBUSMIN)
 8002df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	state = 499;
 8002dfa:	802b      	strh	r3, [r5, #0]
	if (CANTx_busVoltage.busVoltage_float < VBUSMIN)
 8002dfc:	f100 8117 	bmi.w	800302e <main+0x136e>
		if(((CANTx_ErrorFlags>>5) & 1) == 1) //If error flag was set but no error is still present
 8002e00:	4a3d      	ldr	r2, [pc, #244]	; (8002ef8 <main+0x1238>)
 8002e02:	6813      	ldr	r3, [r2, #0]
 8002e04:	0699      	lsls	r1, r3, #26
 8002e06:	f57f aa7d 	bpl.w	8002304 <main+0x644>
			CANTx_ErrorFlags &= ~(1<<5); //Clear error flag bit if it was previously set
 8002e0a:	f023 0320 	bic.w	r3, r3, #32
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	f7ff ba78 	b.w	8002304 <main+0x644>
	  	  case 406: state406(); break;
 8002e14:	f7fe f9e8 	bl	80011e8 <state406>
 8002e18:	f7ff ba74 	b.w	8002304 <main+0x644>
	state = 403;
 8002e1c:	f240 1393 	movw	r3, #403	; 0x193
	if (HAL_GPIO_ReadPin(MTR_OC_GPIO_Port, MTR_OC_Pin) == 0)
 8002e20:	4837      	ldr	r0, [pc, #220]	; (8002f00 <main+0x1240>)
	state = 403;
 8002e22:	802b      	strh	r3, [r5, #0]
	if (HAL_GPIO_ReadPin(MTR_OC_GPIO_Port, MTR_OC_Pin) == 0)
 8002e24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e28:	f002 fb68 	bl	80054fc <HAL_GPIO_ReadPin>
 8002e2c:	2800      	cmp	r0, #0
 8002e2e:	f47f aa69 	bne.w	8002304 <main+0x644>
	MC_StopMotor1();
 8002e32:	f000 fa53 	bl	80032dc <MC_StopMotor1>
	HAL_GPIO_WritePin(FLT_OUT_GPIO_Port, FLT_OUT_Pin, GPIO_PIN_SET); //Set FLT_OUT high, turning on the LED
 8002e36:	4831      	ldr	r0, [pc, #196]	; (8002efc <main+0x123c>)
		sprintf(msg_debug, "MOTOR OC\r\n");
 8002e38:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8002f10 <main+0x1250>
	HAL_GPIO_WritePin(FLT_OUT_GPIO_Port, FLT_OUT_Pin, GPIO_PIN_SET); //Set FLT_OUT high, turning on the LED
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e42:	f002 fb61 	bl	8005508 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_DIS_GPIO_Port, DRV_DIS_Pin, GPIO_PIN_SET); //Set DRV_DIS high, disabling the FETs
 8002e46:	482e      	ldr	r0, [pc, #184]	; (8002f00 <main+0x1240>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	2102      	movs	r1, #2
 8002e4c:	f002 fb5c 	bl	8005508 <HAL_GPIO_WritePin>
	sprintf(msg_debug, "State %hu\r\n", state);
 8002e50:	882a      	ldrh	r2, [r5, #0]
 8002e52:	491f      	ldr	r1, [pc, #124]	; (8002ed0 <main+0x1210>)
 8002e54:	4620      	mov	r0, r4
 8002e56:	f005 f8ab 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	f7fd f9d8 	bl	8000210 <strlen>
 8002e60:	f04f 33ff 	mov.w	r3, #4294967295
 8002e64:	b282      	uxth	r2, r0
 8002e66:	4621      	mov	r1, r4
 8002e68:	4630      	mov	r0, r6
 8002e6a:	f003 fb15 	bl	8006498 <HAL_UART_Transmit>
	HAL_Delay(250);
 8002e6e:	20fa      	movs	r0, #250	; 0xfa
 8002e70:	f001 fbd4 	bl	800461c <HAL_Delay>
		CANTx_ErrorFlags |= 1<<16; //MTR OC: 16th bit
 8002e74:	4a20      	ldr	r2, [pc, #128]	; (8002ef8 <main+0x1238>)
 8002e76:	6813      	ldr	r3, [r2, #0]
 8002e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7c:	6013      	str	r3, [r2, #0]
		sprintf(msg_debug, "MOTOR OC\r\n");
 8002e7e:	4b21      	ldr	r3, [pc, #132]	; (8002f04 <main+0x1244>)
 8002e80:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e84:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8002e88:	4640      	mov	r0, r8
 8002e8a:	0c13      	lsrs	r3, r2, #16
 8002e8c:	f820 2908 	strh.w	r2, [r0], #-8
 8002e90:	f888 3002 	strb.w	r3, [r8, #2]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8002e94:	f7fd f9bc 	bl	8000210 <strlen>
 8002e98:	f1a8 0108 	sub.w	r1, r8, #8
 8002e9c:	b282      	uxth	r2, r0
 8002e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea2:	4630      	mov	r0, r6
 8002ea4:	f003 faf8 	bl	8006498 <HAL_UART_Transmit>
 8002ea8:	f7ff ba2c 	b.w	8002304 <main+0x644>
 8002eac:	f3af 8000 	nop.w
 8002eb0:	efb1bb84 	.word	0xefb1bb84
 8002eb4:	40a2a911 	.word	0x40a2a911
 8002eb8:	55555555 	.word	0x55555555
 8002ebc:	3fc55555 	.word	0x3fc55555
 8002ec0:	8f4e2dd2 	.word	0x8f4e2dd2
 8002ec4:	40c0e480 	.word	0x40c0e480
 8002ec8:	20000610 	.word	0x20000610
 8002ecc:	200005c8 	.word	0x200005c8
 8002ed0:	08008cb0 	.word	0x08008cb0
 8002ed4:	2000058c 	.word	0x2000058c
 8002ed8:	40040000 	.word	0x40040000
 8002edc:	20000588 	.word	0x20000588
 8002ee0:	40200000 	.word	0x40200000
 8002ee4:	447a0000 	.word	0x447a0000
 8002ee8:	20000554 	.word	0x20000554
 8002eec:	20000904 	.word	0x20000904
 8002ef0:	08008d90 	.word	0x08008d90
 8002ef4:	08008d74 	.word	0x08008d74
 8002ef8:	2000057c 	.word	0x2000057c
 8002efc:	40020000 	.word	0x40020000
 8002f00:	40020400 	.word	0x40020400
 8002f04:	08008cc8 	.word	0x08008cc8
 8002f08:	b4e81b4f 	.word	0xb4e81b4f
 8002f0c:	3f8b4e81 	.word	0x3f8b4e81
 8002f10:	200007ac 	.word	0x200007ac
	state = 402;
 8002f14:	f44f 73c9 	mov.w	r3, #402	; 0x192
	if (HAL_GPIO_ReadPin(MTR_OT_GPIO_Port, MTR_OT_Pin) == 1)
 8002f18:	48c5      	ldr	r0, [pc, #788]	; (8003230 <main+0x1570>)
	state = 402;
 8002f1a:	802b      	strh	r3, [r5, #0]
	if (HAL_GPIO_ReadPin(MTR_OT_GPIO_Port, MTR_OT_Pin) == 1)
 8002f1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f20:	f002 faec 	bl	80054fc <HAL_GPIO_ReadPin>
 8002f24:	2801      	cmp	r0, #1
 8002f26:	f47f a9ed 	bne.w	8002304 <main+0x644>
	MC_StopMotor1();
 8002f2a:	9001      	str	r0, [sp, #4]
 8002f2c:	f000 f9d6 	bl	80032dc <MC_StopMotor1>
	HAL_GPIO_WritePin(FLT_OUT_GPIO_Port, FLT_OUT_Pin, GPIO_PIN_SET); //Set FLT_OUT high, turning on the LED
 8002f30:	9a01      	ldr	r2, [sp, #4]
 8002f32:	48bf      	ldr	r0, [pc, #764]	; (8003230 <main+0x1570>)
		sprintf(msg_debug, "MOTOR OT\r\n");
 8002f34:	f8df 8340 	ldr.w	r8, [pc, #832]	; 8003278 <main+0x15b8>
	HAL_GPIO_WritePin(FLT_OUT_GPIO_Port, FLT_OUT_Pin, GPIO_PIN_SET); //Set FLT_OUT high, turning on the LED
 8002f38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f3c:	f002 fae4 	bl	8005508 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_DIS_GPIO_Port, DRV_DIS_Pin, GPIO_PIN_SET); //Set DRV_DIS high, disabling the FETs
 8002f40:	9a01      	ldr	r2, [sp, #4]
 8002f42:	48bc      	ldr	r0, [pc, #752]	; (8003234 <main+0x1574>)
 8002f44:	2102      	movs	r1, #2
 8002f46:	f002 fadf 	bl	8005508 <HAL_GPIO_WritePin>
	sprintf(msg_debug, "State %hu\r\n", state);
 8002f4a:	882a      	ldrh	r2, [r5, #0]
 8002f4c:	49ba      	ldr	r1, [pc, #744]	; (8003238 <main+0x1578>)
 8002f4e:	4620      	mov	r0, r4
 8002f50:	f005 f82e 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8002f54:	4620      	mov	r0, r4
 8002f56:	f7fd f95b 	bl	8000210 <strlen>
 8002f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5e:	b282      	uxth	r2, r0
 8002f60:	4621      	mov	r1, r4
 8002f62:	4630      	mov	r0, r6
 8002f64:	f003 fa98 	bl	8006498 <HAL_UART_Transmit>
	HAL_Delay(250);
 8002f68:	20fa      	movs	r0, #250	; 0xfa
 8002f6a:	f001 fb57 	bl	800461c <HAL_Delay>
		CANTx_ErrorFlags |= 1<<22; //MTR OT: 22nd bit
 8002f6e:	4ab3      	ldr	r2, [pc, #716]	; (800323c <main+0x157c>)
 8002f70:	6813      	ldr	r3, [r2, #0]
 8002f72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f76:	6013      	str	r3, [r2, #0]
		sprintf(msg_debug, "MOTOR OT\r\n");
 8002f78:	4bb1      	ldr	r3, [pc, #708]	; (8003240 <main+0x1580>)
 8002f7a:	e781      	b.n	8002e80 <main+0x11c0>
	state = 500;
 8002f7c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002f80:	802b      	strh	r3, [r5, #0]
}
 8002f82:	f7ff b9bf 	b.w	8002304 <main+0x644>
	  switch (state)
 8002f86:	f240 235d 	movw	r3, #605	; 0x25d
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	f200 8138 	bhi.w	8003200 <main+0x1540>
 8002f90:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
 8002f94:	f4ff a9b6 	bcc.w	8002304 <main+0x644>
 8002f98:	f46f 7716 	mvn.w	r7, #600	; 0x258
 8002f9c:	443a      	add	r2, r7
 8002f9e:	2a04      	cmp	r2, #4
 8002fa0:	f200 8140 	bhi.w	8003224 <main+0x1564>
 8002fa4:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002fa8:	00ea00ee 	.word	0x00ea00ee
 8002fac:	00c300e6 	.word	0x00c300e6
 8002fb0:	0128      	.short	0x0128
	state = 405;
 8002fb2:	f240 1395 	movw	r3, #405	; 0x195
	if (HAL_GPIO_ReadPin(FET_OT_GPIO_Port, FET_OT_Pin) == 1)
 8002fb6:	48a3      	ldr	r0, [pc, #652]	; (8003244 <main+0x1584>)
	state = 405;
 8002fb8:	802b      	strh	r3, [r5, #0]
	if (HAL_GPIO_ReadPin(FET_OT_GPIO_Port, FET_OT_Pin) == 1)
 8002fba:	2180      	movs	r1, #128	; 0x80
 8002fbc:	f002 fa9e 	bl	80054fc <HAL_GPIO_ReadPin>
 8002fc0:	2801      	cmp	r0, #1
 8002fc2:	f47f a99f 	bne.w	8002304 <main+0x644>
	MC_StopMotor1();
 8002fc6:	9001      	str	r0, [sp, #4]
 8002fc8:	f000 f988 	bl	80032dc <MC_StopMotor1>
	HAL_GPIO_WritePin(FLT_OUT_GPIO_Port, FLT_OUT_Pin, GPIO_PIN_SET); //Set FLT_OUT high, turning on the LED
 8002fcc:	9a01      	ldr	r2, [sp, #4]
 8002fce:	4898      	ldr	r0, [pc, #608]	; (8003230 <main+0x1570>)
		sprintf(msg_debug, "FET OT\r\n");
 8002fd0:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8003278 <main+0x15b8>
	HAL_GPIO_WritePin(FLT_OUT_GPIO_Port, FLT_OUT_Pin, GPIO_PIN_SET); //Set FLT_OUT high, turning on the LED
 8002fd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fd8:	f002 fa96 	bl	8005508 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_DIS_GPIO_Port, DRV_DIS_Pin, GPIO_PIN_SET); //Set DRV_DIS high, disabling the FETs
 8002fdc:	9a01      	ldr	r2, [sp, #4]
 8002fde:	4895      	ldr	r0, [pc, #596]	; (8003234 <main+0x1574>)
 8002fe0:	2102      	movs	r1, #2
 8002fe2:	f002 fa91 	bl	8005508 <HAL_GPIO_WritePin>
	sprintf(msg_debug, "State %hu\r\n", state);
 8002fe6:	882a      	ldrh	r2, [r5, #0]
 8002fe8:	4993      	ldr	r1, [pc, #588]	; (8003238 <main+0x1578>)
 8002fea:	4620      	mov	r0, r4
 8002fec:	f004 ffe0 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8002ff0:	4620      	mov	r0, r4
 8002ff2:	f7fd f90d 	bl	8000210 <strlen>
 8002ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffa:	b282      	uxth	r2, r0
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	4630      	mov	r0, r6
 8003000:	f003 fa4a 	bl	8006498 <HAL_UART_Transmit>
	HAL_Delay(250);
 8003004:	20fa      	movs	r0, #250	; 0xfa
 8003006:	f001 fb09 	bl	800461c <HAL_Delay>
		CANTx_ErrorFlags |= 1<<6; //FET OT: 6th bit
 800300a:	4a8c      	ldr	r2, [pc, #560]	; (800323c <main+0x157c>)
 800300c:	6813      	ldr	r3, [r2, #0]
 800300e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003012:	6013      	str	r3, [r2, #0]
		sprintf(msg_debug, "FET OT\r\n");
 8003014:	4b8c      	ldr	r3, [pc, #560]	; (8003248 <main+0x1588>)
 8003016:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800301a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800301e:	4640      	mov	r0, r8
 8003020:	f800 2908 	strb.w	r2, [r0], #-8
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8003024:	e736      	b.n	8002e94 <main+0x11d4>
	  	  case 405: state405(); break;
 8003026:	f7fe f87b 	bl	8001120 <state405>
 800302a:	f7ff b96b 	b.w	8002304 <main+0x644>
	MC_StopMotor1();
 800302e:	f000 f955 	bl	80032dc <MC_StopMotor1>
	HAL_GPIO_WritePin(FLT_OUT_GPIO_Port, FLT_OUT_Pin, GPIO_PIN_SET); //Set FLT_OUT high, turning on the LED
 8003032:	487f      	ldr	r0, [pc, #508]	; (8003230 <main+0x1570>)
		sprintf(msg_debug, "DC voltage missing\r\n");
 8003034:	f8df 8240 	ldr.w	r8, [pc, #576]	; 8003278 <main+0x15b8>
	HAL_GPIO_WritePin(FLT_OUT_GPIO_Port, FLT_OUT_Pin, GPIO_PIN_SET); //Set FLT_OUT high, turning on the LED
 8003038:	2201      	movs	r2, #1
 800303a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800303e:	f002 fa63 	bl	8005508 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_DIS_GPIO_Port, DRV_DIS_Pin, GPIO_PIN_SET); //Set DRV_DIS high, disabling the FETs
 8003042:	487c      	ldr	r0, [pc, #496]	; (8003234 <main+0x1574>)
 8003044:	2201      	movs	r2, #1
 8003046:	2102      	movs	r1, #2
 8003048:	f002 fa5e 	bl	8005508 <HAL_GPIO_WritePin>
	sprintf(msg_debug, "State %hu\r\n", state);
 800304c:	882a      	ldrh	r2, [r5, #0]
 800304e:	497a      	ldr	r1, [pc, #488]	; (8003238 <main+0x1578>)
 8003050:	4620      	mov	r0, r4
 8003052:	f004 ffad 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8003056:	4620      	mov	r0, r4
 8003058:	f7fd f8da 	bl	8000210 <strlen>
 800305c:	4621      	mov	r1, r4
 800305e:	b282      	uxth	r2, r0
 8003060:	f04f 33ff 	mov.w	r3, #4294967295
 8003064:	4630      	mov	r0, r6
 8003066:	f003 fa17 	bl	8006498 <HAL_UART_Transmit>
	HAL_Delay(250);
 800306a:	20fa      	movs	r0, #250	; 0xfa
 800306c:	f001 fad6 	bl	800461c <HAL_Delay>
		CANTx_ErrorFlags |= 1<<5; //DC undervoltage: 5th bit
 8003070:	4a72      	ldr	r2, [pc, #456]	; (800323c <main+0x157c>)
		sprintf(msg_debug, "DC voltage missing\r\n");
 8003072:	f8df c208 	ldr.w	ip, [pc, #520]	; 800327c <main+0x15bc>
		CANTx_ErrorFlags |= 1<<5; //DC undervoltage: 5th bit
 8003076:	6813      	ldr	r3, [r2, #0]
 8003078:	f043 0320 	orr.w	r3, r3, #32
 800307c:	6013      	str	r3, [r2, #0]
		sprintf(msg_debug, "DC voltage missing\r\n");
 800307e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003082:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8003086:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800308a:	f8c8 0000 	str.w	r0, [r8]
 800308e:	f888 1004 	strb.w	r1, [r8, #4]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8003092:	f1a8 0010 	sub.w	r0, r8, #16
 8003096:	f7fd f8bb 	bl	8000210 <strlen>
 800309a:	f1a8 0110 	sub.w	r1, r8, #16
 800309e:	b282      	uxth	r2, r0
 80030a0:	f04f 33ff 	mov.w	r3, #4294967295
 80030a4:	4630      	mov	r0, r6
 80030a6:	f003 f9f7 	bl	8006498 <HAL_UART_Transmit>
 80030aa:	f7ff b92b 	b.w	8002304 <main+0x644>
	state = 404;
 80030ae:	f44f 73ca 	mov.w	r3, #404	; 0x194
	if (HAL_GPIO_ReadPin(HV_OV_GPIO_Port, HV_OV_Pin) == 1)
 80030b2:	4860      	ldr	r0, [pc, #384]	; (8003234 <main+0x1574>)
	state = 404;
 80030b4:	802b      	strh	r3, [r5, #0]
	if (HAL_GPIO_ReadPin(HV_OV_GPIO_Port, HV_OV_Pin) == 1)
 80030b6:	2140      	movs	r1, #64	; 0x40
 80030b8:	f002 fa20 	bl	80054fc <HAL_GPIO_ReadPin>
 80030bc:	2801      	cmp	r0, #1
 80030be:	f47f a921 	bne.w	8002304 <main+0x644>
	MC_StopMotor1();
 80030c2:	9001      	str	r0, [sp, #4]
 80030c4:	f000 f90a 	bl	80032dc <MC_StopMotor1>
	HAL_GPIO_WritePin(FLT_OUT_GPIO_Port, FLT_OUT_Pin, GPIO_PIN_SET); //Set FLT_OUT high, turning on the LED
 80030c8:	9a01      	ldr	r2, [sp, #4]
 80030ca:	4859      	ldr	r0, [pc, #356]	; (8003230 <main+0x1570>)
 80030cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030d0:	f002 fa1a 	bl	8005508 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_DIS_GPIO_Port, DRV_DIS_Pin, GPIO_PIN_SET); //Set DRV_DIS high, disabling the FETs
 80030d4:	9a01      	ldr	r2, [sp, #4]
 80030d6:	4857      	ldr	r0, [pc, #348]	; (8003234 <main+0x1574>)
 80030d8:	2102      	movs	r1, #2
 80030da:	f002 fa15 	bl	8005508 <HAL_GPIO_WritePin>
	sprintf(msg_debug, "State %hu\r\n", state);
 80030de:	882a      	ldrh	r2, [r5, #0]
 80030e0:	4955      	ldr	r1, [pc, #340]	; (8003238 <main+0x1578>)
 80030e2:	4620      	mov	r0, r4
 80030e4:	f004 ff64 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80030e8:	4620      	mov	r0, r4
 80030ea:	f7fd f891 	bl	8000210 <strlen>
 80030ee:	4621      	mov	r1, r4
 80030f0:	b282      	uxth	r2, r0
 80030f2:	f04f 33ff 	mov.w	r3, #4294967295
 80030f6:	4630      	mov	r0, r6
 80030f8:	f003 f9ce 	bl	8006498 <HAL_UART_Transmit>
	HAL_Delay(250);
 80030fc:	20fa      	movs	r0, #250	; 0xfa
 80030fe:	f001 fa8d 	bl	800461c <HAL_Delay>
		CANTx_ErrorFlags |= 1<<18; //HV OV: 18th bit
 8003102:	4a4e      	ldr	r2, [pc, #312]	; (800323c <main+0x157c>)
 8003104:	6813      	ldr	r3, [r2, #0]
 8003106:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800310a:	6013      	str	r3, [r2, #0]
		sprintf(msg_debug, "DC BUS OV\r\n");
 800310c:	4b4f      	ldr	r3, [pc, #316]	; (800324c <main+0x158c>)
 800310e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003112:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8003116:	4620      	mov	r0, r4
 8003118:	f7fd f87a 	bl	8000210 <strlen>
 800311c:	f04f 33ff 	mov.w	r3, #4294967295
 8003120:	b282      	uxth	r2, r0
 8003122:	4621      	mov	r1, r4
 8003124:	4630      	mov	r0, r6
 8003126:	f003 f9b7 	bl	8006498 <HAL_UART_Transmit>
 800312a:	f7ff b8eb 	b.w	8002304 <main+0x644>
	sendCANMessage(CANTx_phaseCurrent.phaseCurrent_int, CANTx_phaseCurrent.phaseCurrent_int, 4);
 800312e:	4f48      	ldr	r7, [pc, #288]	; (8003250 <main+0x1590>)
 8003130:	6839      	ldr	r1, [r7, #0]
 8003132:	2204      	movs	r2, #4
 8003134:	4608      	mov	r0, r1
 8003136:	f7fe fc7f 	bl	8001a38 <sendCANMessage>
	sprintf(msg_debug, "100x Phase current sent: %lu\r\n", (uint32_t) (100.0 * CANTx_phaseCurrent.phaseCurrent_float));
 800313a:	6838      	ldr	r0, [r7, #0]
 800313c:	f7fd fa24 	bl	8000588 <__aeabi_f2d>
 8003140:	4b44      	ldr	r3, [pc, #272]	; (8003254 <main+0x1594>)
 8003142:	2200      	movs	r2, #0
 8003144:	f7fd fa78 	bl	8000638 <__aeabi_dmul>
 8003148:	f7fd fd4e 	bl	8000be8 <__aeabi_d2uiz>
 800314c:	4942      	ldr	r1, [pc, #264]	; (8003258 <main+0x1598>)
 800314e:	4602      	mov	r2, r0
 8003150:	4620      	mov	r0, r4
 8003152:	f004 ff2d 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8003156:	4620      	mov	r0, r4
 8003158:	f7fd f85a 	bl	8000210 <strlen>
 800315c:	f04f 33ff 	mov.w	r3, #4294967295
 8003160:	b282      	uxth	r2, r0
 8003162:	4621      	mov	r1, r4
 8003164:	4630      	mov	r0, r6
 8003166:	f003 f997 	bl	8006498 <HAL_UART_Transmit>
	state = 605;
 800316a:	f240 235d 	movw	r3, #605	; 0x25d
 800316e:	802b      	strh	r3, [r5, #0]
}
 8003170:	f7ff b8c8 	b.w	8002304 <main+0x644>
	  	  case 603: state603(); break;
 8003174:	f7fe fce6 	bl	8001b44 <state603>
 8003178:	f7ff b8c4 	b.w	8002304 <main+0x644>
	  	  case 602: state602(); break;
 800317c:	f7fe fc90 	bl	8001aa0 <state602>
 8003180:	f7ff b8c0 	b.w	8002304 <main+0x644>
	CANTxData[0] = (LowDataByte & 0x000000ff) >>  0;
 8003184:	4b2d      	ldr	r3, [pc, #180]	; (800323c <main+0x157c>)
 8003186:	4a35      	ldr	r2, [pc, #212]	; (800325c <main+0x159c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6013      	str	r3, [r2, #0]
	CANTxData[4] = (HighDataByte & 0x000000ff) >>  0;
 800318c:	f04f 0c00 	mov.w	ip, #0
 8003190:	f8c2 c004 	str.w	ip, [r2, #4]
	if( HAL_CAN_AddTxMessage(&hcan1, &CANTxHeader, CANTxData, &CANTxMailbox) != HAL_OK)
 8003194:	4b32      	ldr	r3, [pc, #200]	; (8003260 <main+0x15a0>)
 8003196:	4933      	ldr	r1, [pc, #204]	; (8003264 <main+0x15a4>)
 8003198:	4833      	ldr	r0, [pc, #204]	; (8003268 <main+0x15a8>)
	CANTxHeader.StdId = CANTXBASEID + IDBonus;
 800319a:	f240 5c01 	movw	ip, #1281	; 0x501
 800319e:	f8cb c000 	str.w	ip, [fp]
	if( HAL_CAN_AddTxMessage(&hcan1, &CANTxHeader, CANTxData, &CANTxMailbox) != HAL_OK)
 80031a2:	f001 fdd9 	bl	8004d58 <HAL_CAN_AddTxMessage>
 80031a6:	b190      	cbz	r0, 80031ce <main+0x150e>
		sprintf(msg_debug, "Send error\r\n");
 80031a8:	4b30      	ldr	r3, [pc, #192]	; (800326c <main+0x15ac>)
 80031aa:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8003278 <main+0x15b8>
 80031ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031b0:	e8a8 0007 	stmia.w	r8!, {r0, r1, r2}
 80031b4:	4640      	mov	r0, r8
 80031b6:	f800 390c 	strb.w	r3, [r0], #-12
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80031ba:	f7fd f829 	bl	8000210 <strlen>
 80031be:	f1a8 010c 	sub.w	r1, r8, #12
 80031c2:	b282      	uxth	r2, r0
 80031c4:	f04f 33ff 	mov.w	r3, #4294967295
 80031c8:	4630      	mov	r0, r6
 80031ca:	f003 f965 	bl	8006498 <HAL_UART_Transmit>
	sprintf(msg_debug, "Error flags sent: %lu\r\n", CANTx_ErrorFlags);
 80031ce:	4b1b      	ldr	r3, [pc, #108]	; (800323c <main+0x157c>)
 80031d0:	4927      	ldr	r1, [pc, #156]	; (8003270 <main+0x15b0>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	4620      	mov	r0, r4
 80031d6:	f004 feeb 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80031da:	4620      	mov	r0, r4
 80031dc:	f7fd f818 	bl	8000210 <strlen>
 80031e0:	f04f 33ff 	mov.w	r3, #4294967295
 80031e4:	b282      	uxth	r2, r0
 80031e6:	4621      	mov	r1, r4
 80031e8:	4630      	mov	r0, r6
 80031ea:	f003 f955 	bl	8006498 <HAL_UART_Transmit>
	state = 602;
 80031ee:	f240 235a 	movw	r3, #602	; 0x25a
 80031f2:	802b      	strh	r3, [r5, #0]
}
 80031f4:	f7ff b886 	b.w	8002304 <main+0x644>
	  	  case 605: state605(); break;
 80031f8:	f7fe fcf4 	bl	8001be4 <state605>
 80031fc:	f7ff b882 	b.w	8002304 <main+0x644>
	  switch (state)
 8003200:	f240 23bb 	movw	r3, #699	; 0x2bb
 8003204:	429a      	cmp	r2, r3
 8003206:	f47f a87d 	bne.w	8002304 <main+0x644>
	  	  case 699: state699(); break;
 800320a:	f7fe fa9d 	bl	8001748 <state699>
 800320e:	f7ff b879 	b.w	8002304 <main+0x644>
	if (RCM_GetUserConvState() == RCM_USERCONV_IDLE)
 8003212:	f000 fec7 	bl	8003fa4 <RCM_GetUserConvState>
 8003216:	bb98      	cbnz	r0, 8003280 <main+0x15c0>
		RCM_RequestUserConv(Pot1Handle);
 8003218:	4b16      	ldr	r3, [pc, #88]	; (8003274 <main+0x15b4>)
 800321a:	7818      	ldrb	r0, [r3, #0]
 800321c:	f000 fe7a 	bl	8003f14 <RCM_RequestUserConv>
 8003220:	f7ff b870 	b.w	8002304 <main+0x644>
	state = 601; //CAN implementation
 8003224:	f240 2359 	movw	r3, #601	; 0x259
 8003228:	802b      	strh	r3, [r5, #0]
}
 800322a:	f7ff b86b 	b.w	8002304 <main+0x644>
 800322e:	bf00      	nop
 8003230:	40020000 	.word	0x40020000
 8003234:	40020400 	.word	0x40020400
 8003238:	08008cb0 	.word	0x08008cb0
 800323c:	2000057c 	.word	0x2000057c
 8003240:	08008cbc 	.word	0x08008cbc
 8003244:	40020800 	.word	0x40020800
 8003248:	08008ce0 	.word	0x08008ce0
 800324c:	08008cd4 	.word	0x08008cd4
 8003250:	20000598 	.word	0x20000598
 8003254:	40590000 	.word	0x40590000
 8003258:	08008e7c 	.word	0x08008e7c
 800325c:	20000558 	.word	0x20000558
 8003260:	20000578 	.word	0x20000578
 8003264:	20000560 	.word	0x20000560
 8003268:	200006a8 	.word	0x200006a8
 800326c:	08008e54 	.word	0x08008e54
 8003270:	08008e64 	.word	0x08008e64
 8003274:	200005b8 	.word	0x200005b8
 8003278:	200007ac 	.word	0x200007ac
 800327c:	08008d0c 	.word	0x08008d0c
	else if (RCM_GetUserConvState() == RCM_USERCONV_EOC)
 8003280:	f000 fe90 	bl	8003fa4 <RCM_GetUserConvState>
 8003284:	2802      	cmp	r0, #2
 8003286:	f47f a83d 	bne.w	8002304 <main+0x644>
		pot1_value = RCM_GetUserConv();
 800328a:	f000 fe53 	bl	8003f34 <RCM_GetUserConv>
		CANRx_velocity.velocity_float = ((float) pot1_value) / 45535.0 * VMAX;
 800328e:	ee07 0a90 	vmov	s15, r0
		pot1_value = RCM_GetUserConv();
 8003292:	4b0d      	ldr	r3, [pc, #52]	; (80032c8 <main+0x1608>)
		CANRx_velocity.velocity_float = ((float) pot1_value) / 45535.0 * VMAX;
 8003294:	eef8 7a67 	vcvt.f32.u32	s15, s15
		pot1_value = RCM_GetUserConv();
 8003298:	8018      	strh	r0, [r3, #0]
		CANRx_velocity.velocity_float = ((float) pot1_value) / 45535.0 * VMAX;
 800329a:	ee17 0a90 	vmov	r0, s15
 800329e:	f7fd f973 	bl	8000588 <__aeabi_f2d>
 80032a2:	a307      	add	r3, pc, #28	; (adr r3, 80032c0 <main+0x1600>)
 80032a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a8:	f7fd f9c6 	bl	8000638 <__aeabi_dmul>
 80032ac:	f7fd fcbc 	bl	8000c28 <__aeabi_d2f>
 80032b0:	4b06      	ldr	r3, [pc, #24]	; (80032cc <main+0x160c>)
 80032b2:	6018      	str	r0, [r3, #0]
		state = 299;
 80032b4:	f240 132b 	movw	r3, #299	; 0x12b
 80032b8:	802b      	strh	r3, [r5, #0]
}
 80032ba:	f7ff b823 	b.w	8002304 <main+0x644>
 80032be:	bf00      	nop
 80032c0:	b2147849 	.word	0xb2147849
 80032c4:	3f034833 	.word	0x3f034833
 80032c8:	200008f8 	.word	0x200008f8
 80032cc:	20000554 	.word	0x20000554

080032d0 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 80032d0:	4b01      	ldr	r3, [pc, #4]	; (80032d8 <MC_StartMotor1+0x8>)
 80032d2:	6818      	ldr	r0, [r3, #0]
 80032d4:	f000 b852 	b.w	800337c <MCI_StartMotor>
 80032d8:	20000988 	.word	0x20000988

080032dc <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 80032dc:	4b01      	ldr	r3, [pc, #4]	; (80032e4 <MC_StopMotor1+0x8>)
 80032de:	6818      	ldr	r0, [r3, #0]
 80032e0:	f000 b856 	b.w	8003390 <MCI_StopMotor>
 80032e4:	20000988 	.word	0x20000988

080032e8 <MC_ProgramSpeedRampMotor1>:
  * @param  hDurationms Duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1( int16_t hFinalSpeed, uint16_t hDurationms )
{
 80032e8:	b410      	push	{r4}
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 80032ea:	4c04      	ldr	r4, [pc, #16]	; (80032fc <MC_ProgramSpeedRampMotor1+0x14>)
{
 80032ec:	4603      	mov	r3, r0
 80032ee:	460a      	mov	r2, r1
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 80032f0:	6820      	ldr	r0, [r4, #0]
}
 80032f2:	f85d 4b04 	ldr.w	r4, [sp], #4
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 80032f6:	4619      	mov	r1, r3
 80032f8:	f000 b82c 	b.w	8003354 <MCI_ExecSpeedRamp>
 80032fc:	20000988 	.word	0x20000988

08003300 <MC_ProgramTorqueRampMotor1>:
  * @param  hDurationms Duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the torque
  *         value.
  */
__weak void MC_ProgramTorqueRampMotor1( int16_t hFinalTorque, uint16_t hDurationms )
{
 8003300:	b410      	push	{r4}
	MCI_ExecTorqueRamp( pMCI[M1], hFinalTorque, hDurationms );
 8003302:	4c04      	ldr	r4, [pc, #16]	; (8003314 <MC_ProgramTorqueRampMotor1+0x14>)
{
 8003304:	4603      	mov	r3, r0
 8003306:	460a      	mov	r2, r1
	MCI_ExecTorqueRamp( pMCI[M1], hFinalTorque, hDurationms );
 8003308:	6820      	ldr	r0, [r4, #0]
}
 800330a:	f85d 4b04 	ldr.w	r4, [sp], #4
	MCI_ExecTorqueRamp( pMCI[M1], hFinalTorque, hDurationms );
 800330e:	4619      	mov	r1, r3
 8003310:	f000 b82a 	b.w	8003368 <MCI_ExecTorqueRamp>
 8003314:	20000988 	.word	0x20000988

08003318 <MC_GetMecSpeedAverageMotor1>:
/**
 * @brief Returns the last computed average mechanical rotor speed for Motor 1, expressed in the unit defined by #SPEED_UNIT
 */
__weak int16_t MC_GetMecSpeedAverageMotor1(void)
{
	return MCI_GetAvrgMecSpeedUnit( pMCI[M1] );
 8003318:	4b01      	ldr	r3, [pc, #4]	; (8003320 <MC_GetMecSpeedAverageMotor1+0x8>)
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	f000 b8aa 	b.w	8003474 <MCI_GetAvrgMecSpeedUnit>
 8003320:	20000988 	.word	0x20000988

08003324 <MC_GetPhaseCurrentAmplitudeMotor1>:
 * @f]
 *
 */
__weak int16_t MC_GetPhaseCurrentAmplitudeMotor1(void)
{
	return MCI_GetPhaseCurrentAmplitude( pMCI[M1] );
 8003324:	4b01      	ldr	r3, [pc, #4]	; (800332c <MC_GetPhaseCurrentAmplitudeMotor1+0x8>)
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	f000 b8ac 	b.w	8003484 <MCI_GetPhaseCurrentAmplitude>
 800332c:	20000988 	.word	0x20000988

08003330 <MC_GetOccurredFaultsMotor1>:
 * See \link Fault_generation_error_codes Motor Control Faults\endlink for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetOccurredFaultsMotor1(void)
{
	return MCI_GetOccurredFaults( pMCI[M1] );
 8003330:	4b01      	ldr	r3, [pc, #4]	; (8003338 <MC_GetOccurredFaultsMotor1+0x8>)
 8003332:	6818      	ldr	r0, [r3, #0]
 8003334:	f000 b870 	b.w	8003418 <MCI_GetOccurredFaults>
 8003338:	20000988 	.word	0x20000988

0800333c <MC_GetCurrentFaultsMotor1>:
 * See \link Fault_generation_error_codes Motor Control Faults\endlink for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetCurrentFaultsMotor1(void)
{
	return MCI_GetCurrentFaults( pMCI[M1] );
 800333c:	4b01      	ldr	r3, [pc, #4]	; (8003344 <MC_GetCurrentFaultsMotor1+0x8>)
 800333e:	6818      	ldr	r0, [r3, #0]
 8003340:	f000 b870 	b.w	8003424 <MCI_GetCurrentFaults>
 8003344:	20000988 	.word	0x20000988

08003348 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8003348:	4b01      	ldr	r3, [pc, #4]	; (8003350 <MC_GetSTMStateMotor1+0x8>)
 800334a:	6818      	ldr	r0, [r3, #0]
 800334c:	f000 b860 	b.w	8003410 <MCI_GetSTMState>
 8003350:	20000988 	.word	0x20000988

08003354 <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8003354:	f04f 0c01 	mov.w	ip, #1
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8003358:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 800335c:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8003360:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 8003362:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8003364:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8003366:	4770      	bx	lr

08003368 <MCI_ExecTorqueRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8003368:	f04f 0c02 	mov.w	ip, #2
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800336c:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 800336e:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8003372:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 8003374:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8003376:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop

0800337c <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 800337c:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 800337e:	2103      	movs	r1, #3
{
 8003380:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8003382:	6800      	ldr	r0, [r0, #0]
 8003384:	f003 ff92 	bl	80072ac <STM_NextState>

  if ( RetVal == true )
 8003388:	b108      	cbz	r0, 800338e <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800338a:	2301      	movs	r3, #1
 800338c:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 800338e:	bd10      	pop	{r4, pc}

08003390 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8003390:	6800      	ldr	r0, [r0, #0]
 8003392:	2107      	movs	r1, #7
 8003394:	f003 bf8a 	b.w	80072ac <STM_NextState>

08003398 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8003398:	b178      	cbz	r0, 80033ba <MCI_ExecBufferedCommands+0x22>
{
 800339a:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 800339c:	7e03      	ldrb	r3, [r0, #24]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	4604      	mov	r4, r0
 80033a2:	d000      	beq.n	80033a6 <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 80033a4:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 80033a6:	7b01      	ldrb	r1, [r0, #12]
 80033a8:	2902      	cmp	r1, #2
 80033aa:	d020      	beq.n	80033ee <MCI_ExecBufferedCommands+0x56>
 80033ac:	2903      	cmp	r1, #3
 80033ae:	d005      	beq.n	80033bc <MCI_ExecBufferedCommands+0x24>
 80033b0:	2901      	cmp	r1, #1
 80033b2:	d00c      	beq.n	80033ce <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 80033b4:	2303      	movs	r3, #3
 80033b6:	7623      	strb	r3, [r4, #24]
}
 80033b8:	bd10      	pop	{r4, pc}
 80033ba:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80033bc:	6882      	ldr	r2, [r0, #8]
 80033be:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80033c2:	f8d0 3012 	ldr.w	r3, [r0, #18]
 80033c6:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 80033c8:	2302      	movs	r3, #2
 80033ca:	7623      	strb	r3, [r4, #24]
}
 80033cc:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80033ce:	6883      	ldr	r3, [r0, #8]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 80033d6:	6840      	ldr	r0, [r0, #4]
 80033d8:	f003 fec6 	bl	8007168 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 80033dc:	8ae2      	ldrh	r2, [r4, #22]
 80033de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033e2:	6860      	ldr	r0, [r4, #4]
 80033e4:	f003 fec4 	bl	8007170 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 80033e8:	2800      	cmp	r0, #0
 80033ea:	d0e3      	beq.n	80033b4 <MCI_ExecBufferedCommands+0x1c>
 80033ec:	e7ec      	b.n	80033c8 <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80033ee:	6883      	ldr	r3, [r0, #8]
 80033f0:	2100      	movs	r1, #0
 80033f2:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 80033f6:	6840      	ldr	r0, [r0, #4]
 80033f8:	f003 feb6 	bl	8007168 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 80033fc:	8ae2      	ldrh	r2, [r4, #22]
 80033fe:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8003402:	6860      	ldr	r0, [r4, #4]
 8003404:	f003 feb4 	bl	8007170 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8003408:	2800      	cmp	r0, #0
 800340a:	d0d3      	beq.n	80033b4 <MCI_ExecBufferedCommands+0x1c>
 800340c:	e7dc      	b.n	80033c8 <MCI_ExecBufferedCommands+0x30>
 800340e:	bf00      	nop

08003410 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8003410:	6800      	ldr	r0, [r0, #0]
 8003412:	f003 bfbf 	b.w	8007394 <STM_GetState>
 8003416:	bf00      	nop

08003418 <MCI_GetOccurredFaults>:
  *         historically occurred since the state machine has been moved into
  *         FAULT_NOW state.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults( MCI_Handle_t * pHandle )
{
 8003418:	b508      	push	{r3, lr}
  return ( uint16_t )( STM_GetFaultState( pHandle->pSTM ) );
 800341a:	6800      	ldr	r0, [r0, #0]
 800341c:	f003 ffbc 	bl	8007398 <STM_GetFaultState>
}
 8003420:	b280      	uxth	r0, r0
 8003422:	bd08      	pop	{r3, pc}

08003424 <MCI_GetCurrentFaults>:
  * @retval uint16_t  16 bit fields with information about about currently
  *         present faults.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetCurrentFaults( MCI_Handle_t * pHandle )
{
 8003424:	b508      	push	{r3, lr}
  return ( uint16_t )( STM_GetFaultState( pHandle->pSTM ) >> 16 );
 8003426:	6800      	ldr	r0, [r0, #0]
 8003428:	f003 ffb6 	bl	8007398 <STM_GetFaultState>
}
 800342c:	0c00      	lsrs	r0, r0, #16
 800342e:	bd08      	pop	{r3, pc}

08003430 <MCI_GetImposedMotorDirection>:
  */
__weak int16_t MCI_GetImposedMotorDirection( MCI_Handle_t * pHandle )
{
  int16_t retVal = 1;

  switch ( pHandle->lastCommand )
 8003430:	7b03      	ldrb	r3, [r0, #12]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d005      	beq.n	8003442 <MCI_GetImposedMotorDirection+0x12>
 8003436:	2b03      	cmp	r3, #3
 8003438:	d013      	beq.n	8003462 <MCI_GetImposedMotorDirection+0x32>
 800343a:	2b01      	cmp	r3, #1
 800343c:	d009      	beq.n	8003452 <MCI_GetImposedMotorDirection+0x22>
 800343e:	2001      	movs	r0, #1
      break;
    default:
      break;
  }
  return retVal;
}
 8003440:	4770      	bx	lr
      if ( pHandle->hFinalTorque < 0 )
 8003442:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
        retVal = -1;
 8003446:	2b00      	cmp	r3, #0
 8003448:	bfac      	ite	ge
 800344a:	2001      	movge	r0, #1
 800344c:	f04f 30ff 	movlt.w	r0, #4294967295
 8003450:	4770      	bx	lr
      if ( pHandle->hFinalSpeed < 0 )
 8003452:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
        retVal = -1;
 8003456:	2b00      	cmp	r3, #0
 8003458:	bfac      	ite	ge
 800345a:	2001      	movge	r0, #1
 800345c:	f04f 30ff 	movlt.w	r0, #4294967295
 8003460:	4770      	bx	lr
      if ( pHandle->Iqdref.q < 0 )
 8003462:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
        retVal = -1;
 8003466:	2b00      	cmp	r3, #0
 8003468:	bfac      	ite	ge
 800346a:	2001      	movge	r0, #1
 800346c:	f04f 30ff 	movlt.w	r0, #4294967295
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop

08003474 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8003474:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8003476:	6840      	ldr	r0, [r0, #4]
 8003478:	f003 fe64 	bl	8007144 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 800347c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8003480:	f003 be20 	b.w	80070c4 <SPD_GetAvrgMecSpeedUnit>

08003484 <MCI_GetPhaseCurrentAmplitude>:
__weak int16_t MCI_GetPhaseCurrentAmplitude( MCI_Handle_t * pHandle )
{
  alphabeta_t Local_Curr;
  int32_t wAux1, wAux2;

  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 8003484:	6882      	ldr	r2, [r0, #8]
{
 8003486:	b508      	push	{r3, lr}
  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 8003488:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800348c:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
  wAux1 = ( int32_t )( Local_Curr.alpha ) * Local_Curr.alpha;
  wAux2 = ( int32_t )( Local_Curr.beta ) * Local_Curr.beta;
 8003490:	fb03 f303 	mul.w	r3, r3, r3

  wAux1 += wAux2;
  wAux1 = MCM_Sqrt( wAux1 );
 8003494:	fb00 3000 	mla	r0, r0, r0, r3
 8003498:	f000 f8e2 	bl	8003660 <MCM_Sqrt>
  if ( wAux1 > INT16_MAX )
  {
    wAux1 = ( int32_t ) INT16_MAX;
  }

  return ( ( int16_t )wAux1 );
 800349c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80034a0:	4298      	cmp	r0, r3
 80034a2:	bfa8      	it	ge
 80034a4:	4618      	movge	r0, r3
}
 80034a6:	b200      	sxth	r0, r0
 80034a8:	bd08      	pop	{r3, pc}
 80034aa:	bf00      	nop

080034ac <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 80034ac:	f644 11e6 	movw	r1, #18918	; 0x49e6
 80034b0:	b203      	sxth	r3, r0
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 80034b2:	fb13 f201 	smulbb	r2, r3, r1
{
 80034b6:	f3c0 400f 	ubfx	r0, r0, #16, #16
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 80034ba:	fb10 f101 	smulbb	r1, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 80034be:	4250      	negs	r0, r2
 80034c0:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 80034c4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 80034c8:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 80034ca:	da05      	bge.n	80034d8 <MCM_Clarke+0x2c>
 80034cc:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 80034ce:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 80034d2:	da0c      	bge.n	80034ee <MCM_Clarke+0x42>
 80034d4:	4a09      	ldr	r2, [pc, #36]	; (80034fc <MCM_Clarke+0x50>)
 80034d6:	e001      	b.n	80034dc <MCM_Clarke+0x30>
 80034d8:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2000      	movs	r0, #0
 80034e0:	f363 000f 	bfi	r0, r3, #0, #16
 80034e4:	b293      	uxth	r3, r2
 80034e6:	f363 401f 	bfi	r0, r3, #16, #16
}
 80034ea:	b004      	add	sp, #16
 80034ec:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 80034ee:	4803      	ldr	r0, [pc, #12]	; (80034fc <MCM_Clarke+0x50>)
 80034f0:	b20a      	sxth	r2, r1
 80034f2:	4282      	cmp	r2, r0
 80034f4:	bfb8      	it	lt
 80034f6:	4602      	movlt	r2, r0
 80034f8:	e7f0      	b.n	80034dc <MCM_Clarke+0x30>
 80034fa:	bf00      	nop
 80034fc:	ffff8001 	.word	0xffff8001

08003500 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8003500:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 8003504:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8003508:	f400 7140 	and.w	r1, r0, #768	; 0x300
 800350c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
{
 8003510:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8003512:	d028      	beq.n	8003566 <MCM_Trig_Functions+0x66>
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	461a      	mov	r2, r3
 800351a:	d816      	bhi.n	800354a <MCM_Trig_Functions+0x4a>
 800351c:	b361      	cbz	r1, 8003578 <MCM_Trig_Functions+0x78>
 800351e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003522:	d109      	bne.n	8003538 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8003524:	b2c0      	uxtb	r0, r0
 8003526:	43c2      	mvns	r2, r0
 8003528:	491a      	ldr	r1, [pc, #104]	; (8003594 <MCM_Trig_Functions+0x94>)
 800352a:	b2d2      	uxtb	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 800352c:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8003530:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003534:	4252      	negs	r2, r2
 8003536:	b212      	sxth	r2, r2
      break;
    default:
      break;
  }
  return ( Local_Components );
 8003538:	b29b      	uxth	r3, r3
 800353a:	2000      	movs	r0, #0
 800353c:	f363 000f 	bfi	r0, r3, #0, #16
 8003540:	b292      	uxth	r2, r2
 8003542:	f362 401f 	bfi	r0, r2, #16, #16
}
 8003546:	b002      	add	sp, #8
 8003548:	4770      	bx	lr
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 800354a:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800354e:	d1f3      	bne.n	8003538 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8003550:	4910      	ldr	r1, [pc, #64]	; (8003594 <MCM_Trig_Functions+0x94>)
 8003552:	b2c0      	uxtb	r0, r0
 8003554:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8003556:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800355a:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800355c:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800355e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8003562:	b21b      	sxth	r3, r3
      break;
 8003564:	e7e8      	b.n	8003538 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8003566:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8003568:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800356a:	490a      	ldr	r1, [pc, #40]	; (8003594 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800356c:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800356e:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8003572:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      break;
 8003576:	e7df      	b.n	8003538 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8003578:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800357a:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800357c:	4905      	ldr	r1, [pc, #20]	; (8003594 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800357e:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8003580:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8003584:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8003588:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800358a:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800358c:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800358e:	b21b      	sxth	r3, r3
      break;
 8003590:	e7d2      	b.n	8003538 <MCM_Trig_Functions+0x38>
 8003592:	bf00      	nop
 8003594:	080090a4 	.word	0x080090a4

08003598 <MCM_Park>:
{
 8003598:	b530      	push	{r4, r5, lr}
 800359a:	b085      	sub	sp, #20
 800359c:	4603      	mov	r3, r0
 800359e:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80035a0:	4608      	mov	r0, r1
 80035a2:	141c      	asrs	r4, r3, #16
{
 80035a4:	9301      	str	r3, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80035a6:	f7ff ffab 	bl	8003500 <MCM_Trig_Functions>
 80035aa:	b22d      	sxth	r5, r5
 80035ac:	fa0f fc80 	sxth.w	ip, r0
 80035b0:	1403      	asrs	r3, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 80035b2:	fb05 f10c 	mul.w	r1, r5, ip
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 80035b6:	fb04 1113 	mls	r1, r4, r3, r1
  if ( wqd_tmp > INT16_MAX )
 80035ba:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80035be:	da05      	bge.n	80035cc <MCM_Park+0x34>
 80035c0:	13ca      	asrs	r2, r1, #15
  else if ( wqd_tmp < ( -32768 ) )
 80035c2:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 80035c6:	da22      	bge.n	800360e <MCM_Park+0x76>
 80035c8:	4914      	ldr	r1, [pc, #80]	; (800361c <MCM_Park+0x84>)
 80035ca:	e001      	b.n	80035d0 <MCM_Park+0x38>
 80035cc:	f647 71ff 	movw	r1, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 80035d0:	fb0c f404 	mul.w	r4, ip, r4
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 80035d4:	fb05 4403 	mla	r4, r5, r3, r4
  if ( wqd_tmp > INT16_MAX )
 80035d8:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 80035dc:	ea4f 32e4 	mov.w	r2, r4, asr #15
  if ( wqd_tmp > INT16_MAX )
 80035e0:	da04      	bge.n	80035ec <MCM_Park+0x54>
  else if ( wqd_tmp < ( -32768 ) )
 80035e2:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 80035e6:	da0c      	bge.n	8003602 <MCM_Park+0x6a>
 80035e8:	4b0c      	ldr	r3, [pc, #48]	; (800361c <MCM_Park+0x84>)
 80035ea:	e001      	b.n	80035f0 <MCM_Park+0x58>
 80035ec:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 80035f0:	b28a      	uxth	r2, r1
 80035f2:	2000      	movs	r0, #0
 80035f4:	f362 000f 	bfi	r0, r2, #0, #16
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	f363 401f 	bfi	r0, r3, #16, #16
}
 80035fe:	b005      	add	sp, #20
 8003600:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8003602:	4806      	ldr	r0, [pc, #24]	; (800361c <MCM_Park+0x84>)
 8003604:	b213      	sxth	r3, r2
 8003606:	4283      	cmp	r3, r0
 8003608:	bfb8      	it	lt
 800360a:	4603      	movlt	r3, r0
 800360c:	e7f0      	b.n	80035f0 <MCM_Park+0x58>
    hqd_tmp = ( int16_t )( wqd_tmp );
 800360e:	4903      	ldr	r1, [pc, #12]	; (800361c <MCM_Park+0x84>)
 8003610:	b212      	sxth	r2, r2
 8003612:	4291      	cmp	r1, r2
 8003614:	bfb8      	it	lt
 8003616:	4611      	movlt	r1, r2
 8003618:	e7da      	b.n	80035d0 <MCM_Park+0x38>
 800361a:	bf00      	nop
 800361c:	ffff8001 	.word	0xffff8001

08003620 <MCM_Rev_Park>:
{
 8003620:	b530      	push	{r4, r5, lr}
 8003622:	b085      	sub	sp, #20
 8003624:	4604      	mov	r4, r0
 8003626:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8003628:	4608      	mov	r0, r1
{
 800362a:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 800362c:	f7ff ff68 	bl	8003500 <MCM_Trig_Functions>
 8003630:	1424      	asrs	r4, r4, #16
 8003632:	1402      	asrs	r2, r0, #16
 8003634:	b22d      	sxth	r5, r5
 8003636:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8003638:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 800363c:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8003640:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8003644:	fb05 4412 	mls	r4, r5, r2, r4
  return ( Output );
 8003648:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 800364c:	2000      	movs	r0, #0
 800364e:	f363 000f 	bfi	r0, r3, #0, #16
 8003652:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8003656:	f364 401f 	bfi	r0, r4, #16, #16
}
 800365a:	b005      	add	sp, #20
 800365c:	bd30      	pop	{r4, r5, pc}
 800365e:	bf00      	nop

08003660 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt( int32_t wInput )
{
  int32_t wtemprootnew;

  if ( wInput > 0 )
 8003660:	1e03      	subs	r3, r0, #0
 8003662:	dd32      	ble.n	80036ca <MCM_Sqrt+0x6a>
    {
      wtemproot = ( int32_t )128;
    }
    else
    {
      wtemproot = ( int32_t )8192;
 8003664:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003668:	bfd4      	ite	le
 800366a:	2080      	movle	r0, #128	; 0x80
 800366c:	f44f 5000 	movgt.w	r0, #8192	; 0x2000
    }

    do
    {
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8003670:	fb93 f2f0 	sdiv	r2, r3, r0
 8003674:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 8003676:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800367a:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 800367e:	d025      	beq.n	80036cc <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8003680:	fb93 f2f1 	sdiv	r2, r3, r1
 8003684:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 8003686:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800368a:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 800368e:	d01d      	beq.n	80036cc <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8003690:	fb93 f2f0 	sdiv	r2, r3, r0
 8003694:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 8003696:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800369a:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 800369e:	d015      	beq.n	80036cc <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80036a0:	fb93 f2f1 	sdiv	r2, r3, r1
 80036a4:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 80036a6:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80036aa:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 80036ae:	d00d      	beq.n	80036cc <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80036b0:	fb93 f2f0 	sdiv	r2, r3, r0
 80036b4:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 80036b6:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80036ba:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 80036be:	d005      	beq.n	80036cc <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80036c0:	fb93 f0f1 	sdiv	r0, r3, r1
 80036c4:	4408      	add	r0, r1
 80036c6:	1040      	asrs	r0, r0, #1
      if ( wtemprootnew == wtemproot )
 80036c8:	4770      	bx	lr
    while ( biter < 6u );

  }
  else
  {
    wtemprootnew = ( int32_t )0;
 80036ca:	2000      	movs	r0, #0
  }

  return ( wtemprootnew );
}
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop

080036d0 <FOC_Clear>:
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 80036d0:	2226      	movs	r2, #38	; 0x26
{
 80036d2:	b538      	push	{r3, r4, r5, lr}
 80036d4:	fb00 f202 	mul.w	r2, r0, r2
 80036d8:	4b15      	ldr	r3, [pc, #84]	; (8003730 <FOC_Clear+0x60>)
  FOCVars[bMotor].Iab = NULL_ab;
 80036da:	2400      	movs	r4, #0
 80036dc:	509c      	str	r4, [r3, r2]
{
 80036de:	4605      	mov	r5, r0
 80036e0:	f102 0108 	add.w	r1, r2, #8
 80036e4:	1898      	adds	r0, r3, r2
 80036e6:	3210      	adds	r2, #16
 80036e8:	4419      	add	r1, r3
 80036ea:	4413      	add	r3, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 80036ec:	4a11      	ldr	r2, [pc, #68]	; (8003734 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 80036ee:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 80036f0:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 80036f4:	604c      	str	r4, [r1, #4]
 80036f6:	608c      	str	r4, [r1, #8]
  FOCVars[bMotor].Vqd = NULL_qd;
 80036f8:	f8c3 4006 	str.w	r4, [r3, #6]
 80036fc:	f8c3 400a 	str.w	r4, [r3, #10]
 8003700:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8003704:	4621      	mov	r1, r4
 8003706:	f003 f9fb 	bl	8006b00 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 800370a:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <FOC_Clear+0x68>)
 800370c:	4621      	mov	r1, r4
 800370e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003712:	f003 f9f5 	bl	8006b00 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8003716:	4b09      	ldr	r3, [pc, #36]	; (800373c <FOC_Clear+0x6c>)
 8003718:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800371c:	f003 fd14 	bl	8007148 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8003720:	4b07      	ldr	r3, [pc, #28]	; (8003740 <FOC_Clear+0x70>)
 8003722:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8003726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800372a:	f003 bbc9 	b.w	8006ec0 <PWMC_SwitchOffPWM>
 800372e:	bf00      	nop
 8003730:	20000908 	.word	0x20000908
 8003734:	20000970 	.word	0x20000970
 8003738:	2000096c 	.word	0x2000096c
 800373c:	2000097c 	.word	0x2000097c
 8003740:	20000984 	.word	0x20000984

08003744 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop

08003748 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8003748:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 800374a:	4c08      	ldr	r4, [pc, #32]	; (800376c <FOC_CalcCurrRef+0x24>)
 800374c:	2326      	movs	r3, #38	; 0x26
 800374e:	fb03 4400 	mla	r4, r3, r0, r4
 8003752:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003756:	b103      	cbz	r3, 800375a <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8003758:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 800375a:	4b05      	ldr	r3, [pc, #20]	; (8003770 <FOC_CalcCurrRef+0x28>)
 800375c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003760:	f003 fd4e 	bl	8007200 <STC_CalcTorqueReference>
 8003764:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8003766:	8220      	strh	r0, [r4, #16]
}
 8003768:	bd10      	pop	{r4, pc}
 800376a:	bf00      	nop
 800376c:	20000908 	.word	0x20000908
 8003770:	2000097c 	.word	0x2000097c

08003774 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8003774:	4b01      	ldr	r3, [pc, #4]	; (800377c <TSK_SetStopPermanencyTimeM1+0x8>)
 8003776:	8018      	strh	r0, [r3, #0]
}
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	20000958 	.word	0x20000958

08003780 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8003780:	4b03      	ldr	r3, [pc, #12]	; (8003790 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8003782:	8818      	ldrh	r0, [r3, #0]
 8003784:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8003786:	fab0 f080 	clz	r0, r0
 800378a:	0940      	lsrs	r0, r0, #5
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	20000958 	.word	0x20000958

08003794 <TSK_MediumFrequencyTaskM1>:
{
 8003794:	b530      	push	{r4, r5, lr}
  PQD_CalcElMotorPower( pMPM[M1] );
 8003796:	4c8f      	ldr	r4, [pc, #572]	; (80039d4 <TSK_MediumFrequencyTaskM1+0x240>)
  (void) STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8003798:	488f      	ldr	r0, [pc, #572]	; (80039d8 <TSK_MediumFrequencyTaskM1+0x244>)
{
 800379a:	b083      	sub	sp, #12
  int16_t wAux = 0;
 800379c:	2300      	movs	r3, #0
  (void) STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 800379e:	4669      	mov	r1, sp
  int16_t wAux = 0;
 80037a0:	f8ad 3000 	strh.w	r3, [sp]
  (void) STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 80037a4:	f004 fa7e 	bl	8007ca4 <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 80037a8:	6820      	ldr	r0, [r4, #0]
 80037aa:	f003 f9f3 	bl	8006b94 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 80037ae:	488b      	ldr	r0, [pc, #556]	; (80039dc <TSK_MediumFrequencyTaskM1+0x248>)
 80037b0:	f003 fdf0 	bl	8007394 <STM_GetState>
  switch ( StateM1 )
 80037b4:	3803      	subs	r0, #3
 80037b6:	2810      	cmp	r0, #16
 80037b8:	d81e      	bhi.n	80037f8 <TSK_MediumFrequencyTaskM1+0x64>
 80037ba:	e8df f010 	tbh	[pc, r0, lsl #1]
 80037be:	0042      	.short	0x0042
 80037c0:	009a0054 	.word	0x009a0054
 80037c4:	00b900b1 	.word	0x00b900b1
 80037c8:	001100cc 	.word	0x001100cc
 80037cc:	001d001d 	.word	0x001d001d
 80037d0:	001d001d 	.word	0x001d001d
 80037d4:	001d001d 	.word	0x001d001d
 80037d8:	00d6001d 	.word	0x00d6001d
 80037dc:	001f00e3 	.word	0x001f00e3
    STC_SetSpeedSensor( pSTC[M1],&VirtualSpeedSensorM1._Super );  	/*  sensor-less */
 80037e0:	4b7f      	ldr	r3, [pc, #508]	; (80039e0 <TSK_MediumFrequencyTaskM1+0x24c>)
 80037e2:	4980      	ldr	r1, [pc, #512]	; (80039e4 <TSK_MediumFrequencyTaskM1+0x250>)
 80037e4:	6818      	ldr	r0, [r3, #0]
 80037e6:	f003 fcab 	bl	8007140 <STC_SetSpeedSensor>
    VSS_Clear( &VirtualSpeedSensorM1 ); /* Reset measured speed in IDLE */
 80037ea:	487e      	ldr	r0, [pc, #504]	; (80039e4 <TSK_MediumFrequencyTaskM1+0x250>)
 80037ec:	f003 fee8 	bl	80075c0 <VSS_Clear>
    STM_NextState( &STM[M1], IDLE );
 80037f0:	487a      	ldr	r0, [pc, #488]	; (80039dc <TSK_MediumFrequencyTaskM1+0x248>)
 80037f2:	2100      	movs	r1, #0
 80037f4:	f003 fd5a 	bl	80072ac <STM_NextState>
}
 80037f8:	b003      	add	sp, #12
 80037fa:	bd30      	pop	{r4, r5, pc}
      if ( ! RUC_OTF_Exec( &RevUpControlM1 ) )
 80037fc:	487a      	ldr	r0, [pc, #488]	; (80039e8 <TSK_MediumFrequencyTaskM1+0x254>)
 80037fe:	f004 f83f 	bl	8007880 <RUC_OTF_Exec>
 8003802:	2800      	cmp	r0, #0
 8003804:	f000 80df 	beq.w	80039c6 <TSK_MediumFrequencyTaskM1+0x232>
        LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1,&hForcedMecSpeedUnit);
 8003808:	4876      	ldr	r0, [pc, #472]	; (80039e4 <TSK_MediumFrequencyTaskM1+0x250>)
 800380a:	a901      	add	r1, sp, #4
 800380c:	f003 ff3a 	bl	8007684 <VSS_CalcAvrgMecSpeedUnit>
 8003810:	4604      	mov	r4, r0
        LoopClosed |= VSS_TransitionEnded( &VirtualSpeedSensorM1 );
 8003812:	4874      	ldr	r0, [pc, #464]	; (80039e4 <TSK_MediumFrequencyTaskM1+0x250>)
 8003814:	f003 ffe4 	bl	80077e0 <VSS_TransitionEnded>
        if ( LoopClosed == true )
 8003818:	b90c      	cbnz	r4, 800381e <TSK_MediumFrequencyTaskM1+0x8a>
 800381a:	2800      	cmp	r0, #0
 800381c:	d0ec      	beq.n	80037f8 <TSK_MediumFrequencyTaskM1+0x64>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 800381e:	4a73      	ldr	r2, [pc, #460]	; (80039ec <TSK_MediumFrequencyTaskM1+0x258>)
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 8003820:	4b73      	ldr	r3, [pc, #460]	; (80039f0 <TSK_MediumFrequencyTaskM1+0x25c>)
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8003822:	6814      	ldr	r4, [r2, #0]
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 8003824:	f9b3 5010 	ldrsh.w	r5, [r3, #16]
 8003828:	4620      	mov	r0, r4
 800382a:	f003 f96b 	bl	8006b04 <PID_GetKIDivisor>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 800382e:	fb05 f100 	mul.w	r1, r5, r0
 8003832:	4620      	mov	r0, r4
 8003834:	f003 f964 	bl	8006b00 <PID_SetIntegralTerm>
          STM_NextState( &STM[M1], START_RUN );
 8003838:	2105      	movs	r1, #5
 800383a:	4868      	ldr	r0, [pc, #416]	; (80039dc <TSK_MediumFrequencyTaskM1+0x248>)
 800383c:	f003 fd36 	bl	80072ac <STM_NextState>
    break;
 8003840:	e7da      	b.n	80037f8 <TSK_MediumFrequencyTaskM1+0x64>
    RUC_Clear( &RevUpControlM1, MCI_GetImposedMotorDirection( oMCInterface[M1] ) );
 8003842:	4b6c      	ldr	r3, [pc, #432]	; (80039f4 <TSK_MediumFrequencyTaskM1+0x260>)
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	f7ff fdf3 	bl	8003430 <MCI_GetImposedMotorDirection>
 800384a:	4601      	mov	r1, r0
 800384c:	4866      	ldr	r0, [pc, #408]	; (80039e8 <TSK_MediumFrequencyTaskM1+0x254>)
 800384e:	f003 ffcf 	bl	80077f0 <RUC_Clear>
    PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8003852:	4b69      	ldr	r3, [pc, #420]	; (80039f8 <TSK_MediumFrequencyTaskM1+0x264>)
 8003854:	2100      	movs	r1, #0
 8003856:	6818      	ldr	r0, [r3, #0]
 8003858:	f003 fb36 	bl	8006ec8 <PWMC_CurrentReadingCalibr>
    STM_NextState( &STM[M1], OFFSET_CALIB );
 800385c:	2111      	movs	r1, #17
 800385e:	485f      	ldr	r0, [pc, #380]	; (80039dc <TSK_MediumFrequencyTaskM1+0x248>)
 8003860:	f003 fd24 	bl	80072ac <STM_NextState>
    break;
 8003864:	e7c8      	b.n	80037f8 <TSK_MediumFrequencyTaskM1+0x64>
      if ( ! RUC_OTF_Exec( &RevUpControlM1 ) )
 8003866:	4860      	ldr	r0, [pc, #384]	; (80039e8 <TSK_MediumFrequencyTaskM1+0x254>)
 8003868:	f004 f80a 	bl	8007880 <RUC_OTF_Exec>
 800386c:	2800      	cmp	r0, #0
 800386e:	f000 80a4 	beq.w	80039ba <TSK_MediumFrequencyTaskM1+0x226>
        IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 8003872:	4b5b      	ldr	r3, [pc, #364]	; (80039e0 <TSK_MediumFrequencyTaskM1+0x24c>)
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	f003 fcc3 	bl	8007200 <STC_CalcTorqueReference>
        IqdRef.d = FOCVars[M1].UserIdref;
 800387a:	4b5d      	ldr	r3, [pc, #372]	; (80039f0 <TSK_MediumFrequencyTaskM1+0x25c>)
 800387c:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
        FOCVars[M1].Iqdref = IqdRef;
 8003880:	8218      	strh	r0, [r3, #16]
 8003882:	825a      	strh	r2, [r3, #18]
      (void) VSS_CalcAvrgMecSpeedUnit( &VirtualSpeedSensorM1, &hForcedMecSpeedUnit );
 8003884:	f10d 0102 	add.w	r1, sp, #2
 8003888:	4856      	ldr	r0, [pc, #344]	; (80039e4 <TSK_MediumFrequencyTaskM1+0x250>)
 800388a:	f003 fefb 	bl	8007684 <VSS_CalcAvrgMecSpeedUnit>
        ObserverConverged = STO_PLL_IsObserverConverged( &STO_PLL_M1,hForcedMecSpeedUnit );
 800388e:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8003892:	4851      	ldr	r0, [pc, #324]	; (80039d8 <TSK_MediumFrequencyTaskM1+0x244>)
 8003894:	f004 fafe 	bl	8007e94 <STO_PLL_IsObserverConverged>
 8003898:	4604      	mov	r4, r0
        STO_SetDirection(&STO_PLL_M1, MCI_GetImposedMotorDirection( &Mci[M1]));
 800389a:	4858      	ldr	r0, [pc, #352]	; (80039fc <TSK_MediumFrequencyTaskM1+0x268>)
 800389c:	f7ff fdc8 	bl	8003430 <MCI_GetImposedMotorDirection>
 80038a0:	b2c1      	uxtb	r1, r0
 80038a2:	484d      	ldr	r0, [pc, #308]	; (80039d8 <TSK_MediumFrequencyTaskM1+0x244>)
 80038a4:	f004 fb4e 	bl	8007f44 <STO_SetDirection>
        (void) VSS_SetStartTransition( &VirtualSpeedSensorM1, ObserverConverged );
 80038a8:	484e      	ldr	r0, [pc, #312]	; (80039e4 <TSK_MediumFrequencyTaskM1+0x250>)
 80038aa:	4621      	mov	r1, r4
 80038ac:	f003 ff8a 	bl	80077c4 <VSS_SetStartTransition>
      if ( ObserverConverged )
 80038b0:	2c00      	cmp	r4, #0
 80038b2:	d0a1      	beq.n	80037f8 <TSK_MediumFrequencyTaskM1+0x64>
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 80038b4:	4848      	ldr	r0, [pc, #288]	; (80039d8 <TSK_MediumFrequencyTaskM1+0x244>)
 80038b6:	4d4e      	ldr	r5, [pc, #312]	; (80039f0 <TSK_MediumFrequencyTaskM1+0x25c>)
        REMNG_Init( pREMNG[M1] );
 80038b8:	4c51      	ldr	r4, [pc, #324]	; (8003a00 <TSK_MediumFrequencyTaskM1+0x26c>)
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 80038ba:	f003 fbff 	bl	80070bc <SPD_GetElAngle>
 80038be:	4601      	mov	r1, r0
 80038c0:	6868      	ldr	r0, [r5, #4]
 80038c2:	f7ff fe69 	bl	8003598 <MCM_Park>
 80038c6:	4603      	mov	r3, r0
        REMNG_Init( pREMNG[M1] );
 80038c8:	6820      	ldr	r0, [r4, #0]
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 80038ca:	9301      	str	r3, [sp, #4]
        REMNG_Init( pREMNG[M1] );
 80038cc:	f003 fb6c 	bl	8006fa8 <REMNG_Init>
        REMNG_ExecRamp( pREMNG[M1], FOCVars[M1].Iqdref.q, 0 );
 80038d0:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
 80038d4:	6820      	ldr	r0, [r4, #0]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f003 fbac 	bl	8007034 <REMNG_ExecRamp>
        REMNG_ExecRamp( pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION );
 80038dc:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 80038e0:	6820      	ldr	r0, [r4, #0]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f003 fba6 	bl	8007034 <REMNG_ExecRamp>
        STM_NextState( &STM[M1], SWITCH_OVER );
 80038e8:	2113      	movs	r1, #19
 80038ea:	483c      	ldr	r0, [pc, #240]	; (80039dc <TSK_MediumFrequencyTaskM1+0x248>)
 80038ec:	f003 fcde 	bl	80072ac <STM_NextState>
    break;
 80038f0:	e782      	b.n	80037f8 <TSK_MediumFrequencyTaskM1+0x64>
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 80038f2:	4c3b      	ldr	r4, [pc, #236]	; (80039e0 <TSK_MediumFrequencyTaskM1+0x24c>)
 80038f4:	4938      	ldr	r1, [pc, #224]	; (80039d8 <TSK_MediumFrequencyTaskM1+0x244>)
 80038f6:	6820      	ldr	r0, [r4, #0]
 80038f8:	f003 fc22 	bl	8007140 <STC_SetSpeedSensor>
	  FOC_InitAdditionalMethods(M1);
 80038fc:	2000      	movs	r0, #0
 80038fe:	f7ff ff21 	bl	8003744 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8003902:	2000      	movs	r0, #0
 8003904:	f7ff ff20 	bl	8003748 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8003908:	2106      	movs	r1, #6
 800390a:	4834      	ldr	r0, [pc, #208]	; (80039dc <TSK_MediumFrequencyTaskM1+0x248>)
 800390c:	f003 fcce 	bl	80072ac <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8003910:	6820      	ldr	r0, [r4, #0]
 8003912:	f003 fca7 	bl	8007264 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8003916:	4b37      	ldr	r3, [pc, #220]	; (80039f4 <TSK_MediumFrequencyTaskM1+0x260>)
 8003918:	6818      	ldr	r0, [r3, #0]
 800391a:	f7ff fd3d 	bl	8003398 <MCI_ExecBufferedCommands>
    break;
 800391e:	e76b      	b.n	80037f8 <TSK_MediumFrequencyTaskM1+0x64>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8003920:	4b34      	ldr	r3, [pc, #208]	; (80039f4 <TSK_MediumFrequencyTaskM1+0x260>)
 8003922:	6818      	ldr	r0, [r3, #0]
 8003924:	f7ff fd38 	bl	8003398 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8003928:	2000      	movs	r0, #0
 800392a:	f7ff ff0d 	bl	8003748 <FOC_CalcCurrRef>
    break;
 800392e:	e763      	b.n	80037f8 <TSK_MediumFrequencyTaskM1+0x64>
    ICS_SwitchOffPWM( pwmcHandle[M1] );
 8003930:	4b31      	ldr	r3, [pc, #196]	; (80039f8 <TSK_MediumFrequencyTaskM1+0x264>)
 8003932:	6818      	ldr	r0, [r3, #0]
 8003934:	f002 ff88 	bl	8006848 <ICS_SwitchOffPWM>
    FOC_Clear( M1 );
 8003938:	2000      	movs	r0, #0
 800393a:	f7ff fec9 	bl	80036d0 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 800393e:	6820      	ldr	r0, [r4, #0]
 8003940:	f003 f888 	bl	8006a54 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8003944:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003948:	f7ff ff14 	bl	8003774 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 800394c:	2108      	movs	r1, #8
 800394e:	4823      	ldr	r0, [pc, #140]	; (80039dc <TSK_MediumFrequencyTaskM1+0x248>)
 8003950:	f003 fcac 	bl	80072ac <STM_NextState>
    break;
 8003954:	e750      	b.n	80037f8 <TSK_MediumFrequencyTaskM1+0x64>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8003956:	f7ff ff13 	bl	8003780 <TSK_StopPermanencyTimeHasElapsedM1>
 800395a:	2800      	cmp	r0, #0
 800395c:	f43f af4c 	beq.w	80037f8 <TSK_MediumFrequencyTaskM1+0x64>
      STM_NextState( &STM[M1], STOP_IDLE );
 8003960:	2109      	movs	r1, #9
 8003962:	481e      	ldr	r0, [pc, #120]	; (80039dc <TSK_MediumFrequencyTaskM1+0x248>)
 8003964:	f003 fca2 	bl	80072ac <STM_NextState>
 8003968:	e746      	b.n	80037f8 <TSK_MediumFrequencyTaskM1+0x64>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 800396a:	4b23      	ldr	r3, [pc, #140]	; (80039f8 <TSK_MediumFrequencyTaskM1+0x264>)
 800396c:	2101      	movs	r1, #1
 800396e:	6818      	ldr	r0, [r3, #0]
 8003970:	f003 faaa 	bl	8006ec8 <PWMC_CurrentReadingCalibr>
 8003974:	2800      	cmp	r0, #0
 8003976:	f43f af3f 	beq.w	80037f8 <TSK_MediumFrequencyTaskM1+0x64>
      STM_NextState( &STM[M1], CLEAR );
 800397a:	2112      	movs	r1, #18
 800397c:	4817      	ldr	r0, [pc, #92]	; (80039dc <TSK_MediumFrequencyTaskM1+0x248>)
 800397e:	f003 fc95 	bl	80072ac <STM_NextState>
 8003982:	e739      	b.n	80037f8 <TSK_MediumFrequencyTaskM1+0x64>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8003984:	4a16      	ldr	r2, [pc, #88]	; (80039e0 <TSK_MediumFrequencyTaskM1+0x24c>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8003986:	4b1a      	ldr	r3, [pc, #104]	; (80039f0 <TSK_MediumFrequencyTaskM1+0x25c>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8003988:	6810      	ldr	r0, [r2, #0]
 800398a:	4916      	ldr	r1, [pc, #88]	; (80039e4 <TSK_MediumFrequencyTaskM1+0x250>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8003992:	f003 fbd5 	bl	8007140 <STC_SetSpeedSensor>
    STO_PLL_Clear( &STO_PLL_M1 );
 8003996:	4810      	ldr	r0, [pc, #64]	; (80039d8 <TSK_MediumFrequencyTaskM1+0x244>)
 8003998:	f004 fa4e 	bl	8007e38 <STO_PLL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 800399c:	480f      	ldr	r0, [pc, #60]	; (80039dc <TSK_MediumFrequencyTaskM1+0x248>)
 800399e:	2104      	movs	r1, #4
 80039a0:	f003 fc84 	bl	80072ac <STM_NextState>
 80039a4:	2800      	cmp	r0, #0
 80039a6:	f43f af27 	beq.w	80037f8 <TSK_MediumFrequencyTaskM1+0x64>
      FOC_Clear( M1 );
 80039aa:	2000      	movs	r0, #0
 80039ac:	f7ff fe90 	bl	80036d0 <FOC_Clear>
      ICS_SwitchOnPWM( pwmcHandle[M1] );
 80039b0:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <TSK_MediumFrequencyTaskM1+0x264>)
 80039b2:	6818      	ldr	r0, [r3, #0]
 80039b4:	f002 ff04 	bl	80067c0 <ICS_SwitchOnPWM>
 80039b8:	e71e      	b.n	80037f8 <TSK_MediumFrequencyTaskM1+0x64>
        STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 80039ba:	4602      	mov	r2, r0
 80039bc:	2110      	movs	r1, #16
 80039be:	4807      	ldr	r0, [pc, #28]	; (80039dc <TSK_MediumFrequencyTaskM1+0x248>)
 80039c0:	f003 fc58 	bl	8007274 <STM_FaultProcessing>
 80039c4:	e75e      	b.n	8003884 <TSK_MediumFrequencyTaskM1+0xf0>
          STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 80039c6:	4602      	mov	r2, r0
 80039c8:	2110      	movs	r1, #16
 80039ca:	4804      	ldr	r0, [pc, #16]	; (80039dc <TSK_MediumFrequencyTaskM1+0x248>)
 80039cc:	f003 fc52 	bl	8007274 <STM_FaultProcessing>
 80039d0:	e712      	b.n	80037f8 <TSK_MediumFrequencyTaskM1+0x64>
 80039d2:	bf00      	nop
 80039d4:	20000968 	.word	0x20000968
 80039d8:	20000200 	.word	0x20000200
 80039dc:	2000094c 	.word	0x2000094c
 80039e0:	2000097c 	.word	0x2000097c
 80039e4:	20000328 	.word	0x20000328
 80039e8:	20000188 	.word	0x20000188
 80039ec:	20000974 	.word	0x20000974
 80039f0:	20000908 	.word	0x20000908
 80039f4:	2000095c 	.word	0x2000095c
 80039f8:	20000984 	.word	0x20000984
 80039fc:	20000930 	.word	0x20000930
 8003a00:	20000978 	.word	0x20000978

08003a04 <MC_Scheduler>:
{
 8003a04:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 8003a06:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <MC_Scheduler+0x48>)
 8003a08:	781c      	ldrb	r4, [r3, #0]
 8003a0a:	2c01      	cmp	r4, #1
 8003a0c:	d000      	beq.n	8003a10 <MC_Scheduler+0xc>
}
 8003a0e:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 8003a10:	4d0f      	ldr	r5, [pc, #60]	; (8003a50 <MC_Scheduler+0x4c>)
 8003a12:	882b      	ldrh	r3, [r5, #0]
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	b1ab      	cbz	r3, 8003a44 <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 8003a18:	882b      	ldrh	r3, [r5, #0]
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8003a20:	4a0c      	ldr	r2, [pc, #48]	; (8003a54 <MC_Scheduler+0x50>)
 8003a22:	8813      	ldrh	r3, [r2, #0]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	b11b      	cbz	r3, 8003a30 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 8003a28:	8813      	ldrh	r3, [r2, #0]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8003a30:	4a09      	ldr	r2, [pc, #36]	; (8003a58 <MC_Scheduler+0x54>)
 8003a32:	8813      	ldrh	r3, [r2, #0]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0e9      	beq.n	8003a0e <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 8003a3a:	8813      	ldrh	r3, [r2, #0]
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	8013      	strh	r3, [r2, #0]
}
 8003a42:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 8003a44:	f7ff fea6 	bl	8003794 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8003a48:	802c      	strh	r4, [r5, #0]
 8003a4a:	e7e9      	b.n	8003a20 <MC_Scheduler+0x1c>
 8003a4c:	20000952 	.word	0x20000952
 8003a50:	20000956 	.word	0x20000956
 8003a54:	20000954 	.word	0x20000954
 8003a58:	20000958 	.word	0x20000958

08003a5c <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8003a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  uint16_t hState;  /*  only if sensorless main*/
  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
  if ( STM[M1].bState == SWITCH_OVER )
 8003a60:	4b57      	ldr	r3, [pc, #348]	; (8003bc0 <TSK_HighFrequencyTask+0x164>)
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8003a62:	4c58      	ldr	r4, [pc, #352]	; (8003bc4 <TSK_HighFrequencyTask+0x168>)
  if ( STM[M1].bState == SWITCH_OVER )
 8003a64:	781b      	ldrb	r3, [r3, #0]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8003a66:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 8003a6a:	b089      	sub	sp, #36	; 0x24
  if ( STM[M1].bState == SWITCH_OVER )
 8003a6c:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8003a6e:	9005      	str	r0, [sp, #20]
  if ( STM[M1].bState == SWITCH_OVER )
 8003a70:	f000 8092 	beq.w	8003b98 <TSK_HighFrequencyTask+0x13c>
    if (!REMNG_RampCompleted(pREMNG[M1]))
    {
      FOCVars[M1].Iqdref.q = REMNG_Calc(pREMNG[M1]);
    }
  }
  if(!RUC_Get_SCLowsideOTF_Status(&RevUpControlM1))
 8003a74:	4854      	ldr	r0, [pc, #336]	; (8003bc8 <TSK_HighFrequencyTask+0x16c>)
 8003a76:	f004 f827 	bl	8007ac8 <RUC_Get_SCLowsideOTF_Status>
 8003a7a:	4605      	mov	r5, r0
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	d156      	bne.n	8003b2e <TSK_HighFrequencyTask+0xd2>

  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8003a80:	4b52      	ldr	r3, [pc, #328]	; (8003bcc <TSK_HighFrequencyTask+0x170>)
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8003a82:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8003bec <TSK_HighFrequencyTask+0x190>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8003a86:	6818      	ldr	r0, [r3, #0]
 8003a88:	f003 fb5c 	bl	8007144 <STC_GetSpeedSensor>
 8003a8c:	4606      	mov	r6, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8003a8e:	f003 fb15 	bl	80070bc <SPD_GetElAngle>
 8003a92:	4607      	mov	r7, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8003a94:	4630      	mov	r0, r6
 8003a96:	f003 fb19 	bl	80070cc <SPD_GetInstElSpeedDpp>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8003a9a:	a902      	add	r1, sp, #8
 8003a9c:	f8d8 0000 	ldr.w	r0, [r8]
 8003aa0:	f003 f8d6 	bl	8006c50 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 8003aa4:	9802      	ldr	r0, [sp, #8]
 8003aa6:	f7ff fd01 	bl	80034ac <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8003aaa:	4639      	mov	r1, r7
  Ialphabeta = MCM_Clarke(Iab);
 8003aac:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8003aae:	f7ff fd73 	bl	8003598 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8003ab2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8003ab6:	9000      	str	r0, [sp, #0]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8003ab8:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 8003aba:	1ac9      	subs	r1, r1, r3
 8003abc:	4b44      	ldr	r3, [pc, #272]	; (8003bd0 <TSK_HighFrequencyTask+0x174>)
 8003abe:	6818      	ldr	r0, [r3, #0]
 8003ac0:	f003 f822 	bl	8006b08 <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8003ac4:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8003ac8:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.d = PI_Controller(pPIDId[M1],
 8003acc:	1ac9      	subs	r1, r1, r3
 8003ace:	4b41      	ldr	r3, [pc, #260]	; (8003bd4 <TSK_HighFrequencyTask+0x178>)
  Vqd.q = PI_Controller(pPIDIq[M1],
 8003ad0:	4681      	mov	r9, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	f003 f818 	bl	8006b08 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8003ad8:	4b3f      	ldr	r3, [pc, #252]	; (8003bd8 <TSK_HighFrequencyTask+0x17c>)
 8003ada:	f8ad 9004 	strh.w	r9, [sp, #4]
 8003ade:	f8ad 0006 	strh.w	r0, [sp, #6]
 8003ae2:	9901      	ldr	r1, [sp, #4]
 8003ae4:	6818      	ldr	r0, [r3, #0]
 8003ae6:	f002 fd8d 	bl	8006604 <Circle_Limitation>
 8003aea:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8003aec:	4630      	mov	r0, r6
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8003aee:	fa0f f983 	sxth.w	r9, r3
 8003af2:	141e      	asrs	r6, r3, #16
 8003af4:	9301      	str	r3, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8003af6:	f003 fae9 	bl	80070cc <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8003afa:	4639      	mov	r1, r7
 8003afc:	9801      	ldr	r0, [sp, #4]
 8003afe:	f7ff fd8f 	bl	8003620 <MCM_Rev_Park>
 8003b02:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8003b04:	f8d8 0000 	ldr.w	r0, [r8]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8003b08:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8003b0a:	f003 f8a3 	bl	8006c54 <PWMC_SetPhaseVoltage>
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8003b0e:	9b02      	ldr	r3, [sp, #8]
 8003b10:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8003b12:	4601      	mov	r1, r0
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8003b14:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Iqd = Iqd;
  FOCVars[M1].Valphabeta = Valphabeta;
 8003b16:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8003b18:	6063      	str	r3, [r4, #4]
  if(hFOCreturn == MC_FOC_DURATION)
 8003b1a:	2901      	cmp	r1, #1
  FOCVars[M1].Iqd = Iqd;
 8003b1c:	9b00      	ldr	r3, [sp, #0]
  FOCVars[M1].Vqd = Vqd;
 8003b1e:	f8a4 9016 	strh.w	r9, [r4, #22]
 8003b22:	8326      	strh	r6, [r4, #24]
  FOCVars[M1].Iqd = Iqd;
 8003b24:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8003b26:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 8003b2a:	8427      	strh	r7, [r4, #32]
  if(hFOCreturn == MC_FOC_DURATION)
 8003b2c:	d040      	beq.n	8003bb0 <TSK_HighFrequencyTask+0x154>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8003b2e:	4826      	ldr	r0, [pc, #152]	; (8003bc8 <TSK_HighFrequencyTask+0x16c>)
 8003b30:	f003 ffc0 	bl	8007ab4 <RUC_FirstAccelerationStageReached>
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8003b34:	4929      	ldr	r1, [pc, #164]	; (8003bdc <TSK_HighFrequencyTask+0x180>)
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8003b36:	6862      	ldr	r2, [r4, #4]
 8003b38:	9206      	str	r2, [sp, #24]
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8003b3a:	4603      	mov	r3, r0
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8003b3c:	6808      	ldr	r0, [r1, #0]
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8003b3e:	461c      	mov	r4, r3
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8003b40:	f002 fd58 	bl	80065f4 <VBS_GetAvBusVoltage_d>
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8003b44:	a905      	add	r1, sp, #20
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8003b46:	4603      	mov	r3, r0
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8003b48:	4825      	ldr	r0, [pc, #148]	; (8003be0 <TSK_HighFrequencyTask+0x184>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8003b4a:	f8ad 301c 	strh.w	r3, [sp, #28]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8003b4e:	f003 ffbf 	bl	8007ad0 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1); /*  Only in case of Sensor-less */
 8003b52:	4823      	ldr	r0, [pc, #140]	; (8003be0 <TSK_HighFrequencyTask+0x184>)
 8003b54:	f004 f946 	bl	8007de4 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (IsAccelerationStageReached == false)
 8003b58:	b1d4      	cbz	r4, 8003b90 <TSK_HighFrequencyTask+0x134>
    hState = STM_GetState(&STM[M1]);
 8003b5a:	4819      	ldr	r0, [pc, #100]	; (8003bc0 <TSK_HighFrequencyTask+0x164>)
 8003b5c:	f003 fc1a 	bl	8007394 <STM_GetState>
    if((hState == START) || (hState == SWITCH_OVER) || (hState == START_RUN)) /*  only for sensor-less*/
 8003b60:	1f03      	subs	r3, r0, #4
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d905      	bls.n	8003b74 <TSK_HighFrequencyTask+0x118>
 8003b68:	2813      	cmp	r0, #19
 8003b6a:	d003      	beq.n	8003b74 <TSK_HighFrequencyTask+0x118>
}
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	b009      	add	sp, #36	; 0x24
 8003b70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8003b74:	481a      	ldr	r0, [pc, #104]	; (8003be0 <TSK_HighFrequencyTask+0x184>)
 8003b76:	f003 faa1 	bl	80070bc <SPD_GetElAngle>
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8003b7a:	a904      	add	r1, sp, #16
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8003b7c:	4603      	mov	r3, r0
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8003b7e:	4819      	ldr	r0, [pc, #100]	; (8003be4 <TSK_HighFrequencyTask+0x188>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8003b80:	f8ad 3010 	strh.w	r3, [sp, #16]
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8003b84:	f003 fd2a 	bl	80075dc <VSS_CalcElAngle>
}
 8003b88:	2000      	movs	r0, #0
 8003b8a:	b009      	add	sp, #36	; 0x24
 8003b8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      STO_ResetPLL(&STO_PLL_M1);
 8003b90:	4813      	ldr	r0, [pc, #76]	; (8003be0 <TSK_HighFrequencyTask+0x184>)
 8003b92:	f004 f9d3 	bl	8007f3c <STO_ResetPLL>
 8003b96:	e7e0      	b.n	8003b5a <TSK_HighFrequencyTask+0xfe>
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8003b98:	4d13      	ldr	r5, [pc, #76]	; (8003be8 <TSK_HighFrequencyTask+0x18c>)
 8003b9a:	6828      	ldr	r0, [r5, #0]
 8003b9c:	f003 fa2e 	bl	8006ffc <REMNG_RampCompleted>
 8003ba0:	2800      	cmp	r0, #0
 8003ba2:	f47f af67 	bne.w	8003a74 <TSK_HighFrequencyTask+0x18>
      FOCVars[M1].Iqdref.q = REMNG_Calc(pREMNG[M1]);
 8003ba6:	6828      	ldr	r0, [r5, #0]
 8003ba8:	f003 fa06 	bl	8006fb8 <REMNG_Calc>
 8003bac:	8220      	strh	r0, [r4, #16]
 8003bae:	e761      	b.n	8003a74 <TSK_HighFrequencyTask+0x18>
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8003bb0:	462a      	mov	r2, r5
 8003bb2:	4803      	ldr	r0, [pc, #12]	; (8003bc0 <TSK_HighFrequencyTask+0x164>)
 8003bb4:	f003 fb5e 	bl	8007274 <STM_FaultProcessing>
}
 8003bb8:	2000      	movs	r0, #0
 8003bba:	b009      	add	sp, #36	; 0x24
 8003bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003bc0:	2000094c 	.word	0x2000094c
 8003bc4:	20000908 	.word	0x20000908
 8003bc8:	20000188 	.word	0x20000188
 8003bcc:	2000097c 	.word	0x2000097c
 8003bd0:	20000970 	.word	0x20000970
 8003bd4:	2000096c 	.word	0x2000096c
 8003bd8:	20000964 	.word	0x20000964
 8003bdc:	20000960 	.word	0x20000960
 8003be0:	20000200 	.word	0x20000200
 8003be4:	20000328 	.word	0x20000328
 8003be8:	20000978 	.word	0x20000978
 8003bec:	20000984 	.word	0x20000984

08003bf0 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8003bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8003bf2:	4b20      	ldr	r3, [pc, #128]	; (8003c74 <TSK_SafetyTask_PWMOFF+0x84>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8003bf4:	4e20      	ldr	r6, [pc, #128]	; (8003c78 <TSK_SafetyTask_PWMOFF+0x88>)
{
 8003bf6:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8003bf8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003bfc:	f002 ff64 	bl	8006ac8 <NTC_CalcAvTemp>
 8003c00:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8003c02:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003c06:	f003 f98b 	bl	8006f20 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8003c0a:	f025 050c 	bic.w	r5, r5, #12
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8003c0e:	4328      	orrs	r0, r5
 8003c10:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 8003c12:	b334      	cbz	r4, 8003c62 <TSK_SafetyTask_PWMOFF+0x72>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8003c14:	4f19      	ldr	r7, [pc, #100]	; (8003c7c <TSK_SafetyTask_PWMOFF+0x8c>)
 8003c16:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8003c1a:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8003c1e:	43ea      	mvns	r2, r5
 8003c20:	b292      	uxth	r2, r2
 8003c22:	4629      	mov	r1, r5
 8003c24:	4638      	mov	r0, r7
 8003c26:	f003 fb25 	bl	8007274 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8003c2a:	4638      	mov	r0, r7
 8003c2c:	f003 fbb2 	bl	8007394 <STM_GetState>
 8003c30:	280a      	cmp	r0, #10
 8003c32:	d002      	beq.n	8003c3a <TSK_SafetyTask_PWMOFF+0x4a>
 8003c34:	280b      	cmp	r0, #11
 8003c36:	d00e      	beq.n	8003c56 <TSK_SafetyTask_PWMOFF+0x66>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8003c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8003c3a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003c3e:	f003 f93f 	bl	8006ec0 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8003c42:	4620      	mov	r0, r4
 8003c44:	f7ff fd44 	bl	80036d0 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8003c48:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <TSK_SafetyTask_PWMOFF+0x90>)
 8003c4a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 8003c4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8003c52:	f002 beff 	b.w	8006a54 <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8003c56:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 8003c5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8003c5e:	f003 b92f 	b.w	8006ec0 <PWMC_SwitchOffPWM>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 8003c62:	4b08      	ldr	r3, [pc, #32]	; (8003c84 <TSK_SafetyTask_PWMOFF+0x94>)
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	f003 f969 	bl	8006f3c <RVBS_CalcAvVbus>
 8003c6a:	f020 000c 	bic.w	r0, r0, #12
 8003c6e:	4305      	orrs	r5, r0
 8003c70:	b2ad      	uxth	r5, r5
 8003c72:	e7cf      	b.n	8003c14 <TSK_SafetyTask_PWMOFF+0x24>
 8003c74:	20000980 	.word	0x20000980
 8003c78:	20000984 	.word	0x20000984
 8003c7c:	2000094c 	.word	0x2000094c
 8003c80:	20000968 	.word	0x20000968
 8003c84:	20000960 	.word	0x20000960

08003c88 <TSK_SafetyTask>:
{
 8003c88:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 8003c8a:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <TSK_SafetyTask+0x1c>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d000      	beq.n	8003c94 <TSK_SafetyTask+0xc>
}
 8003c92:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8003c94:	2000      	movs	r0, #0
 8003c96:	f7ff ffab 	bl	8003bf0 <TSK_SafetyTask_PWMOFF>
}
 8003c9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 8003c9e:	f000 b959 	b.w	8003f54 <RCM_ExecUserConv>
 8003ca2:	bf00      	nop
 8003ca4:	20000952 	.word	0x20000952

08003ca8 <MC_RunMotorControlTasks>:
{
 8003ca8:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 8003caa:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <MC_RunMotorControlTasks+0x1c>)
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	b903      	cbnz	r3, 8003cb2 <MC_RunMotorControlTasks+0xa>
}
 8003cb0:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8003cb2:	f7ff fea7 	bl	8003a04 <MC_Scheduler>
    TSK_SafetyTask();
 8003cb6:	f7ff ffe7 	bl	8003c88 <TSK_SafetyTask>
}
 8003cba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 8003cbe:	f000 bc21 	b.w	8004504 <UI_Scheduler>
 8003cc2:	bf00      	nop
 8003cc4:	20000952 	.word	0x20000952

08003cc8 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8003cc8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  ICS_SwitchOffPWM(pwmcHandle[M1]);
 8003cca:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <TSK_HardwareFaultTask+0x18>)
 8003ccc:	6818      	ldr	r0, [r3, #0]
 8003cce:	f002 fdbb 	bl	8006848 <ICS_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8003cd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8003cd6:	4803      	ldr	r0, [pc, #12]	; (8003ce4 <TSK_HardwareFaultTask+0x1c>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	2180      	movs	r1, #128	; 0x80
 8003cdc:	f003 baca 	b.w	8007274 <STM_FaultProcessing>
 8003ce0:	20000984 	.word	0x20000984
 8003ce4:	2000094c 	.word	0x2000094c

08003ce8 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003ce8:	4b6b      	ldr	r3, [pc, #428]	; (8003e98 <RCM_RegisterRegConv+0x1b0>)
 8003cea:	681a      	ldr	r2, [r3, #0]
{
 8003cec:	b570      	push	{r4, r5, r6, lr}
 8003cee:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003cf0:	2a00      	cmp	r2, #0
 8003cf2:	d02f      	beq.n	8003d54 <RCM_RegisterRegConv+0x6c>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003cf4:	f890 c004 	ldrb.w	ip, [r0, #4]
 8003cf8:	7910      	ldrb	r0, [r2, #4]
 8003cfa:	4584      	cmp	ip, r0
 8003cfc:	d01d      	beq.n	8003d3a <RCM_RegisterRegConv+0x52>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003cfe:	685c      	ldr	r4, [r3, #4]
 8003d00:	2c00      	cmp	r4, #0
 8003d02:	f000 80ac 	beq.w	8003e5e <RCM_RegisterRegConv+0x176>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003d06:	7922      	ldrb	r2, [r4, #4]
 8003d08:	4562      	cmp	r2, ip
  uint8_t handle=255;
 8003d0a:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003d0e:	d02b      	beq.n	8003d68 <RCM_RegisterRegConv+0x80>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003d10:	689c      	ldr	r4, [r3, #8]
 8003d12:	2c00      	cmp	r4, #0
 8003d14:	f000 808f 	beq.w	8003e36 <RCM_RegisterRegConv+0x14e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003d18:	7922      	ldrb	r2, [r4, #4]
 8003d1a:	4562      	cmp	r2, ip
 8003d1c:	d02a      	beq.n	8003d74 <RCM_RegisterRegConv+0x8c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003d1e:	68dc      	ldr	r4, [r3, #12]
 8003d20:	2c00      	cmp	r4, #0
 8003d22:	f000 8091 	beq.w	8003e48 <RCM_RegisterRegConv+0x160>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003d26:	7922      	ldrb	r2, [r4, #4]
 8003d28:	4562      	cmp	r2, ip
 8003d2a:	f000 8092 	beq.w	8003e52 <RCM_RegisterRegConv+0x16a>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8003d2e:	2803      	cmp	r0, #3
 8003d30:	bf88      	it	hi
 8003d32:	20ff      	movhi	r0, #255	; 0xff
 8003d34:	f240 80a1 	bls.w	8003e7a <RCM_RegisterRegConv+0x192>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8003d38:	bd70      	pop	{r4, r5, r6, pc}
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003d3a:	6810      	ldr	r0, [r2, #0]
 8003d3c:	680a      	ldr	r2, [r1, #0]
 8003d3e:	4290      	cmp	r0, r2
 8003d40:	d01e      	beq.n	8003d80 <RCM_RegisterRegConv+0x98>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003d42:	685c      	ldr	r4, [r3, #4]
 8003d44:	2c00      	cmp	r4, #0
 8003d46:	d1de      	bne.n	8003d06 <RCM_RegisterRegConv+0x1e>
 8003d48:	689c      	ldr	r4, [r3, #8]
 8003d4a:	2c00      	cmp	r4, #0
 8003d4c:	f000 809a 	beq.w	8003e84 <RCM_RegisterRegConv+0x19c>
      i++;
 8003d50:	2001      	movs	r0, #1
 8003d52:	e7e1      	b.n	8003d18 <RCM_RegisterRegConv+0x30>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003d54:	685c      	ldr	r4, [r3, #4]
 8003d56:	2c00      	cmp	r4, #0
 8003d58:	f000 808d 	beq.w	8003e76 <RCM_RegisterRegConv+0x18e>
 8003d5c:	f890 c004 	ldrb.w	ip, [r0, #4]
  uint8_t i=0;
 8003d60:	4610      	mov	r0, r2
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003d62:	7922      	ldrb	r2, [r4, #4]
 8003d64:	4562      	cmp	r2, ip
 8003d66:	d1d3      	bne.n	8003d10 <RCM_RegisterRegConv+0x28>
 8003d68:	6824      	ldr	r4, [r4, #0]
 8003d6a:	680a      	ldr	r2, [r1, #0]
 8003d6c:	4294      	cmp	r4, r2
 8003d6e:	d1cf      	bne.n	8003d10 <RCM_RegisterRegConv+0x28>
      i++;
 8003d70:	2001      	movs	r0, #1
    if (handle < RCM_MAX_CONV )
 8003d72:	e006      	b.n	8003d82 <RCM_RegisterRegConv+0x9a>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003d74:	6824      	ldr	r4, [r4, #0]
 8003d76:	680a      	ldr	r2, [r1, #0]
 8003d78:	4294      	cmp	r4, r2
 8003d7a:	d1d0      	bne.n	8003d1e <RCM_RegisterRegConv+0x36>
      i++;
 8003d7c:	2002      	movs	r0, #2
 8003d7e:	e000      	b.n	8003d82 <RCM_RegisterRegConv+0x9a>
  uint8_t i=0;
 8003d80:	2000      	movs	r0, #0
      RCM_handle_array [handle] = regConv;
 8003d82:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8003d86:	6893      	ldr	r3, [r2, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8003d88:	4c44      	ldr	r4, [pc, #272]	; (8003e9c <RCM_RegisterRegConv+0x1b4>)
 8003d8a:	2500      	movs	r5, #0
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8003d8c:	07db      	lsls	r3, r3, #31
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8003d8e:	f844 5030 	str.w	r5, [r4, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8003d92:	d411      	bmi.n	8003db8 <RCM_RegisterRegConv+0xd0>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8003d94:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8003d96:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8003d9a:	f023 0320 	bic.w	r3, r3, #32
 8003d9e:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8003da0:	6014      	str	r4, [r2, #0]
{
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8003da2:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8003da4:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8003da8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dac:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8003dae:	6014      	str	r4, [r2, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8003db0:	6893      	ldr	r3, [r2, #8]
 8003db2:	f043 0301 	orr.w	r3, r3, #1
 8003db6:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003db8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003dba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003dbe:	62d3      	str	r3, [r2, #44]	; 0x2c
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8003dc0:	790b      	ldrb	r3, [r1, #4]
 8003dc2:	2b09      	cmp	r3, #9
 8003dc4:	d82d      	bhi.n	8003e22 <RCM_RegisterRegConv+0x13a>
 8003dc6:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8003dca:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8003dce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dd2:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd6:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8003dda:	fa94 f4a4 	rbit	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8003dde:	fab4 f484 	clz	r4, r4
 8003de2:	fa2e fe04 	lsr.w	lr, lr, r4
 8003de6:	320c      	adds	r2, #12
  MODIFY_REG(*preg,
 8003de8:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8003dec:	f852 402e 	ldr.w	r4, [r2, lr, lsl #2]
 8003df0:	f04f 7cf8 	mov.w	ip, #32505856	; 0x1f00000
 8003df4:	fa9c f5ac 	rbit	r5, ip
 8003df8:	fab5 f585 	clz	r5, r5
 8003dfc:	fa9c fcac 	rbit	ip, ip
 8003e00:	688e      	ldr	r6, [r1, #8]
 8003e02:	fabc fc8c 	clz	ip, ip
 8003e06:	fa23 f105 	lsr.w	r1, r3, r5
 8003e0a:	fa23 f30c 	lsr.w	r3, r3, ip
 8003e0e:	fa06 f503 	lsl.w	r5, r6, r3
 8003e12:	2307      	movs	r3, #7
 8003e14:	408b      	lsls	r3, r1
 8003e16:	ea24 0303 	bic.w	r3, r4, r3
 8003e1a:	432b      	orrs	r3, r5
 8003e1c:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
}
 8003e20:	bd70      	pop	{r4, r5, r6, pc}
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8003e22:	2403      	movs	r4, #3
 8003e24:	f06f 051d 	mvn.w	r5, #29
 8003e28:	fb14 5403 	smlabb	r4, r4, r3, r5
 8003e2c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8003e30:	f003 7e00 	and.w	lr, r3, #33554432	; 0x2000000
 8003e34:	e7cf      	b.n	8003dd6 <RCM_RegisterRegConv+0xee>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003e36:	2804      	cmp	r0, #4
 8003e38:	d917      	bls.n	8003e6a <RCM_RegisterRegConv+0x182>
 8003e3a:	68dc      	ldr	r4, [r3, #12]
 8003e3c:	b114      	cbz	r4, 8003e44 <RCM_RegisterRegConv+0x15c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003e3e:	7922      	ldrb	r2, [r4, #4]
 8003e40:	4562      	cmp	r2, ip
 8003e42:	d01c      	beq.n	8003e7e <RCM_RegisterRegConv+0x196>
 8003e44:	680a      	ldr	r2, [r1, #0]
 8003e46:	e799      	b.n	8003d7c <RCM_RegisterRegConv+0x94>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003e48:	2804      	cmp	r0, #4
 8003e4a:	680a      	ldr	r2, [r1, #0]
 8003e4c:	d999      	bls.n	8003d82 <RCM_RegisterRegConv+0x9a>
      i++;
 8003e4e:	2003      	movs	r0, #3
 8003e50:	e797      	b.n	8003d82 <RCM_RegisterRegConv+0x9a>
 8003e52:	680a      	ldr	r2, [r1, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003e54:	6824      	ldr	r4, [r4, #0]
 8003e56:	4294      	cmp	r4, r2
 8003e58:	f47f af69 	bne.w	8003d2e <RCM_RegisterRegConv+0x46>
 8003e5c:	e7f7      	b.n	8003e4e <RCM_RegisterRegConv+0x166>
      i++;
 8003e5e:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003e60:	689c      	ldr	r4, [r3, #8]
 8003e62:	b11c      	cbz	r4, 8003e6c <RCM_RegisterRegConv+0x184>
 8003e64:	f891 c004 	ldrb.w	ip, [r1, #4]
 8003e68:	e756      	b.n	8003d18 <RCM_RegisterRegConv+0x30>
 8003e6a:	4620      	mov	r0, r4
 8003e6c:	68dc      	ldr	r4, [r3, #12]
 8003e6e:	b124      	cbz	r4, 8003e7a <RCM_RegisterRegConv+0x192>
 8003e70:	f891 c004 	ldrb.w	ip, [r1, #4]
 8003e74:	e757      	b.n	8003d26 <RCM_RegisterRegConv+0x3e>
  uint8_t i=0;
 8003e76:	4620      	mov	r0, r4
 8003e78:	e7f2      	b.n	8003e60 <RCM_RegisterRegConv+0x178>
 8003e7a:	680a      	ldr	r2, [r1, #0]
 8003e7c:	e781      	b.n	8003d82 <RCM_RegisterRegConv+0x9a>
 8003e7e:	680a      	ldr	r2, [r1, #0]
      i++;
 8003e80:	2002      	movs	r0, #2
 8003e82:	e7e7      	b.n	8003e54 <RCM_RegisterRegConv+0x16c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003e84:	68dc      	ldr	r4, [r3, #12]
 8003e86:	2c00      	cmp	r4, #0
 8003e88:	f43f af72 	beq.w	8003d70 <RCM_RegisterRegConv+0x88>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003e8c:	7920      	ldrb	r0, [r4, #4]
 8003e8e:	4560      	cmp	r0, ip
 8003e90:	f47f af6e 	bne.w	8003d70 <RCM_RegisterRegConv+0x88>
      i++;
 8003e94:	2001      	movs	r0, #1
 8003e96:	e7dd      	b.n	8003e54 <RCM_RegisterRegConv+0x16c>
 8003e98:	200009b0 	.word	0x200009b0
 8003e9c:	2000098c 	.word	0x2000098c

08003ea0 <RCM_ExecRegularConv>:
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003ea0:	4b1b      	ldr	r3, [pc, #108]	; (8003f10 <RCM_ExecRegularConv+0x70>)
 8003ea2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003ea6:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003ea8:	6812      	ldr	r2, [r2, #0]
 8003eaa:	2b09      	cmp	r3, #9
 8003eac:	d827      	bhi.n	8003efe <RCM_ExecRegularConv+0x5e>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003eae:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8003eb2:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003eb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003eba:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003ebe:	fa91 f1a1 	rbit	r1, r1
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8003ec2:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8003ec6:	fab1 f181 	clz	r1, r1
 8003eca:	f102 002c 	add.w	r0, r2, #44	; 0x2c
 8003ece:	fa2c fc01 	lsr.w	ip, ip, r1
  MODIFY_REG(*preg,
 8003ed2:	f003 031f 	and.w	r3, r3, #31
 8003ed6:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
 8003eda:	f021 011f 	bic.w	r1, r1, #31
 8003ede:	430b      	orrs	r3, r1

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 8003ee0:	0151      	lsls	r1, r2, #5
 8003ee2:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
 8003ee6:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 8003eea:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003eec:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8003eee:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8003ef2:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8003ef4:	079b      	lsls	r3, r3, #30
 8003ef6:	d5fc      	bpl.n	8003ef2 <RCM_ExecRegularConv+0x52>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003ef8:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
return retVal;
}
 8003efa:	b280      	uxth	r0, r0
 8003efc:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003efe:	2103      	movs	r1, #3
 8003f00:	f06f 001d 	mvn.w	r0, #29
 8003f04:	fb11 0103 	smlabb	r1, r1, r3, r0
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003f08:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8003f0c:	e7d5      	b.n	8003eba <RCM_ExecRegularConv+0x1a>
 8003f0e:	bf00      	nop
 8003f10:	200009b0 	.word	0x200009b0

08003f14 <RCM_RequestUserConv>:
 * @return true if the regular conversion could be scheduled and false otherwise.
 */
bool RCM_RequestUserConv(uint8_t handle)
{
  bool retVal = false;
  if (RCM_UserConvState == RCM_USERCONV_IDLE)
 8003f14:	4a05      	ldr	r2, [pc, #20]	; (8003f2c <RCM_RequestUserConv+0x18>)
 8003f16:	7813      	ldrb	r3, [r2, #0]
 8003f18:	b92b      	cbnz	r3, 8003f26 <RCM_RequestUserConv+0x12>
  {
    RCM_UserConvHandle = handle;
 8003f1a:	4905      	ldr	r1, [pc, #20]	; (8003f30 <RCM_RequestUserConv+0x1c>)
    /* must be done last so that RCM_UserConvHandle already has the right value */
    RCM_UserConvState = RCM_USERCONV_REQUESTED;
 8003f1c:	2301      	movs	r3, #1
    RCM_UserConvHandle = handle;
 8003f1e:	7008      	strb	r0, [r1, #0]
    RCM_UserConvState = RCM_USERCONV_REQUESTED;
 8003f20:	7013      	strb	r3, [r2, #0]
    retVal = true;
 8003f22:	4618      	mov	r0, r3
 8003f24:	4770      	bx	lr
  bool retVal = false;
 8003f26:	2000      	movs	r0, #0
  }
  return retVal;
}
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	200009ad 	.word	0x200009ad
 8003f30:	200009ac 	.word	0x200009ac

08003f34 <RCM_GetUserConv>:
 * @retval uint16_t The converted value or 0xFFFF in case of conversion error.
 */
uint16_t RCM_GetUserConv(void)
{
  uint16_t hRetVal = 0xFFFFu;
  if (RCM_UserConvState == RCM_USERCONV_EOC)
 8003f34:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <RCM_GetUserConv+0x18>)
 8003f36:	781a      	ldrb	r2, [r3, #0]
 8003f38:	2a02      	cmp	r2, #2
 8003f3a:	d002      	beq.n	8003f42 <RCM_GetUserConv+0xe>
  uint16_t hRetVal = 0xFFFFu;
 8003f3c:	f64f 70ff 	movw	r0, #65535	; 0xffff
  {
    hRetVal = RCM_UserConvValue;
    RCM_UserConvState = RCM_USERCONV_IDLE;
  }
  return hRetVal;
}
 8003f40:	4770      	bx	lr
    hRetVal = RCM_UserConvValue;
 8003f42:	4903      	ldr	r1, [pc, #12]	; (8003f50 <RCM_GetUserConv+0x1c>)
    RCM_UserConvState = RCM_USERCONV_IDLE;
 8003f44:	2200      	movs	r2, #0
    hRetVal = RCM_UserConvValue;
 8003f46:	8808      	ldrh	r0, [r1, #0]
    RCM_UserConvState = RCM_USERCONV_IDLE;
 8003f48:	701a      	strb	r2, [r3, #0]
 8003f4a:	4770      	bx	lr
 8003f4c:	200009ad 	.word	0x200009ad
 8003f50:	200009ae 	.word	0x200009ae

08003f54 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8003f54:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8003f56:	4c0f      	ldr	r4, [pc, #60]	; (8003f94 <RCM_ExecUserConv+0x40>)
 8003f58:	7823      	ldrb	r3, [r4, #0]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d000      	beq.n	8003f60 <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8003f5e:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003f60:	4d0d      	ldr	r5, [pc, #52]	; (8003f98 <RCM_ExecUserConv+0x44>)
 8003f62:	7828      	ldrb	r0, [r5, #0]
 8003f64:	f7ff ff9c 	bl	8003ea0 <RCM_ExecRegularConv>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8003f68:	f895 c000 	ldrb.w	ip, [r5]
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <RCM_ExecUserConv+0x48>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003f6e:	4a0c      	ldr	r2, [pc, #48]	; (8003fa0 <RCM_ExecUserConv+0x4c>)
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8003f70:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003f74:	8010      	strh	r0, [r2, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8003f76:	2202      	movs	r2, #2
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003f78:	4601      	mov	r1, r0
    RCM_UserConvState = RCM_USERCONV_EOC;
 8003f7a:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8003f7c:	2d00      	cmp	r5, #0
 8003f7e:	d0ee      	beq.n	8003f5e <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8003f80:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8003f84:	4660      	mov	r0, ip
 8003f86:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	7023      	strb	r3, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8003f8c:	462b      	mov	r3, r5
}
 8003f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8003f92:	4718      	bx	r3
 8003f94:	200009ad 	.word	0x200009ad
 8003f98:	200009ac 	.word	0x200009ac
 8003f9c:	2000098c 	.word	0x2000098c
 8003fa0:	200009ae 	.word	0x200009ae

08003fa4 <RCM_GetUserConvState>:
 *
 * @retval The state of the last user-defined regular conversion.
 */
RCM_UserConvState_t RCM_GetUserConvState(void)
{
  return RCM_UserConvState;
 8003fa4:	4b01      	ldr	r3, [pc, #4]	; (8003fac <RCM_GetUserConvState+0x8>)
}
 8003fa6:	7818      	ldrb	r0, [r3, #0]
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	200009ad 	.word	0x200009ad

08003fb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fb0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fb2:	4b0d      	ldr	r3, [pc, #52]	; (8003fe8 <HAL_MspInit+0x38>)
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	9100      	str	r1, [sp, #0]
 8003fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fbe:	645a      	str	r2, [r3, #68]	; 0x44
 8003fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fc2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003fc6:	9200      	str	r2, [sp, #0]
 8003fc8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fca:	9101      	str	r1, [sp, #4]
 8003fcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003fd2:	641a      	str	r2, [r3, #64]	; 0x40
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fda:	9301      	str	r3, [sp, #4]
 8003fdc:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003fde:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fe0:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003fe2:	f001 b8fb 	b.w	80051dc <HAL_NVIC_SetPriorityGrouping>
 8003fe6:	bf00      	nop
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	00000000 	.word	0x00000000

08003ff0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ff0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8003ff2:	6803      	ldr	r3, [r0, #0]
 8003ff4:	4a3c      	ldr	r2, [pc, #240]	; (80040e8 <HAL_ADC_MspInit+0xf8>)
{
 8003ff6:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff8:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8003ffa:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ffc:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8004000:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8004004:	940a      	str	r4, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 8004006:	d004      	beq.n	8004012 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8004008:	4a38      	ldr	r2, [pc, #224]	; (80040ec <HAL_ADC_MspInit+0xfc>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d046      	beq.n	800409c <HAL_ADC_MspInit+0xac>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800400e:	b00c      	add	sp, #48	; 0x30
 8004010:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004012:	4b37      	ldr	r3, [pc, #220]	; (80040f0 <HAL_ADC_MspInit+0x100>)
 8004014:	9400      	str	r4, [sp, #0]
 8004016:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004018:	4836      	ldr	r0, [pc, #216]	; (80040f4 <HAL_ADC_MspInit+0x104>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800401a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800401e:	645a      	str	r2, [r3, #68]	; 0x44
 8004020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004022:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8004026:	9200      	str	r2, [sp, #0]
 8004028:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800402a:	9401      	str	r4, [sp, #4]
 800402c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800402e:	f042 0204 	orr.w	r2, r2, #4
 8004032:	631a      	str	r2, [r3, #48]	; 0x30
 8004034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004036:	f002 0204 	and.w	r2, r2, #4
 800403a:	9201      	str	r2, [sp, #4]
 800403c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800403e:	9402      	str	r4, [sp, #8]
 8004040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004042:	f042 0201 	orr.w	r2, r2, #1
 8004046:	631a      	str	r2, [r3, #48]	; 0x30
 8004048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800404a:	f002 0201 	and.w	r2, r2, #1
 800404e:	9202      	str	r2, [sp, #8]
 8004050:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004052:	9403      	str	r4, [sp, #12]
 8004054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004056:	f042 0202 	orr.w	r2, r2, #2
 800405a:	631a      	str	r2, [r3, #48]	; 0x30
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004064:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = PHBL_TSENSE_Pin|PHBH_TSENSE_Pin|PHAH_TSENSE_Pin|PHAL_TSENSE_Pin
 8004066:	223f      	movs	r2, #63	; 0x3f
 8004068:	2303      	movs	r3, #3
 800406a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800406e:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004070:	f001 f932 	bl	80052d8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004074:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = DC_ISENSE_Pin|M1_CURR_AMPL_U_Pin|POT2_TEMP_Pin;
 8004076:	2283      	movs	r2, #131	; 0x83
 8004078:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800407a:	481f      	ldr	r0, [pc, #124]	; (80040f8 <HAL_ADC_MspInit+0x108>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407c:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = DC_ISENSE_Pin|M1_CURR_AMPL_U_Pin|POT2_TEMP_Pin;
 800407e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004082:	f001 f929 	bl	80052d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = POT1_Pin;
 8004086:	2201      	movs	r2, #1
 8004088:	2303      	movs	r3, #3
    HAL_GPIO_Init(POT1_GPIO_Port, &GPIO_InitStruct);
 800408a:	481c      	ldr	r0, [pc, #112]	; (80040fc <HAL_ADC_MspInit+0x10c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408c:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(POT1_GPIO_Port, &GPIO_InitStruct);
 800408e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = POT1_Pin;
 8004090:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(POT1_GPIO_Port, &GPIO_InitStruct);
 8004094:	f001 f920 	bl	80052d8 <HAL_GPIO_Init>
}
 8004098:	b00c      	add	sp, #48	; 0x30
 800409a:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 800409c:	4b14      	ldr	r3, [pc, #80]	; (80040f0 <HAL_ADC_MspInit+0x100>)
 800409e:	9404      	str	r4, [sp, #16]
 80040a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 80040a2:	4815      	ldr	r0, [pc, #84]	; (80040f8 <HAL_ADC_MspInit+0x108>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 80040a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a8:	645a      	str	r2, [r3, #68]	; 0x44
 80040aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040ac:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80040b0:	9204      	str	r2, [sp, #16]
 80040b2:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040b4:	9405      	str	r4, [sp, #20]
 80040b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040b8:	f042 0201 	orr.w	r2, r2, #1
 80040bc:	631a      	str	r2, [r3, #48]	; 0x30
 80040be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 80040c0:	ed9f 7b07 	vldr	d7, [pc, #28]	; 80040e0 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 80040ca:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 80040cc:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040d0:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 80040d2:	f001 f901 	bl	80052d8 <HAL_GPIO_Init>
}
 80040d6:	b00c      	add	sp, #48	; 0x30
 80040d8:	bd10      	pop	{r4, pc}
 80040da:	bf00      	nop
 80040dc:	f3af 8000 	nop.w
 80040e0:	00000010 	.word	0x00000010
 80040e4:	00000003 	.word	0x00000003
 80040e8:	40012000 	.word	0x40012000
 80040ec:	40012100 	.word	0x40012100
 80040f0:	40023800 	.word	0x40023800
 80040f4:	40020800 	.word	0x40020800
 80040f8:	40020000 	.word	0x40020000
 80040fc:	40020400 	.word	0x40020400

08004100 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004100:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcan->Instance==CAN1)
 8004102:	4b1d      	ldr	r3, [pc, #116]	; (8004178 <HAL_CAN_MspInit+0x78>)
 8004104:	6802      	ldr	r2, [r0, #0]
{
 8004106:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004108:	2400      	movs	r4, #0
  if(hcan->Instance==CAN1)
 800410a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800410c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8004110:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8004114:	9406      	str	r4, [sp, #24]
  if(hcan->Instance==CAN1)
 8004116:	d001      	beq.n	800411c <HAL_CAN_MspInit+0x1c>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004118:	b009      	add	sp, #36	; 0x24
 800411a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 800411c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004120:	9400      	str	r4, [sp, #0]
 8004122:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004124:	4815      	ldr	r0, [pc, #84]	; (800417c <HAL_CAN_MspInit+0x7c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004126:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800412a:	641a      	str	r2, [r3, #64]	; 0x40
 800412c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800412e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8004132:	9200      	str	r2, [sp, #0]
 8004134:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004136:	9401      	str	r4, [sp, #4]
 8004138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800413a:	f042 0202 	orr.w	r2, r2, #2
 800413e:	631a      	str	r2, [r3, #48]	; 0x30
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004148:	f44f 7240 	mov.w	r2, #768	; 0x300
 800414c:	2302      	movs	r3, #2
 800414e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004152:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004154:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004156:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004158:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800415c:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800415e:	f001 f8bb 	bl	80052d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8004162:	4622      	mov	r2, r4
 8004164:	4621      	mov	r1, r4
 8004166:	2014      	movs	r0, #20
 8004168:	f001 f84a 	bl	8005200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800416c:	2014      	movs	r0, #20
 800416e:	f001 f885 	bl	800527c <HAL_NVIC_EnableIRQ>
}
 8004172:	b009      	add	sp, #36	; 0x24
 8004174:	bd30      	pop	{r4, r5, pc}
 8004176:	bf00      	nop
 8004178:	40006400 	.word	0x40006400
 800417c:	40020400 	.word	0x40020400

08004180 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004180:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8004182:	6802      	ldr	r2, [r0, #0]
 8004184:	4922      	ldr	r1, [pc, #136]	; (8004210 <HAL_TIM_Base_MspInit+0x90>)
{
 8004186:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004188:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 800418a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800418c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004190:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8004194:	9308      	str	r3, [sp, #32]
  if(htim_base->Instance==TIM1)
 8004196:	d012      	beq.n	80041be <HAL_TIM_Base_MspInit+0x3e>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8004198:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800419c:	d001      	beq.n	80041a2 <HAL_TIM_Base_MspInit+0x22>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800419e:	b00a      	add	sp, #40	; 0x28
 80041a0:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041a2:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 80041a6:	9303      	str	r3, [sp, #12]
 80041a8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80041aa:	f043 0301 	orr.w	r3, r3, #1
 80041ae:	6413      	str	r3, [r2, #64]	; 0x40
 80041b0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	9303      	str	r3, [sp, #12]
 80041b8:	9b03      	ldr	r3, [sp, #12]
}
 80041ba:	b00a      	add	sp, #40	; 0x28
 80041bc:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80041be:	4a15      	ldr	r2, [pc, #84]	; (8004214 <HAL_TIM_Base_MspInit+0x94>)
 80041c0:	9301      	str	r3, [sp, #4]
 80041c2:	6c50      	ldr	r0, [r2, #68]	; 0x44
 80041c4:	f040 0001 	orr.w	r0, r0, #1
 80041c8:	6450      	str	r0, [r2, #68]	; 0x44
 80041ca:	6c50      	ldr	r0, [r2, #68]	; 0x44
 80041cc:	f000 0001 	and.w	r0, r0, #1
 80041d0:	9001      	str	r0, [sp, #4]
 80041d2:	9801      	ldr	r0, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041d4:	9302      	str	r3, [sp, #8]
 80041d6:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80041d8:	480f      	ldr	r0, [pc, #60]	; (8004218 <HAL_TIM_Base_MspInit+0x98>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041da:	f043 0301 	orr.w	r3, r3, #1
 80041de:	6313      	str	r3, [r2, #48]	; 0x30
 80041e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 80041e2:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8004208 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80041ec:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80041ee:	2301      	movs	r3, #1
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80041f0:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 80041f2:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041f6:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80041f8:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80041fa:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80041fc:	f001 f86c 	bl	80052d8 <HAL_GPIO_Init>
}
 8004200:	b00a      	add	sp, #40	; 0x28
 8004202:	bd10      	pop	{r4, pc}
 8004204:	f3af 8000 	nop.w
 8004208:	00000040 	.word	0x00000040
 800420c:	00000002 	.word	0x00000002
 8004210:	40010000 	.word	0x40010000
 8004214:	40023800 	.word	0x40023800
 8004218:	40020000 	.word	0x40020000

0800421c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800421c:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 800421e:	4a1f      	ldr	r2, [pc, #124]	; (800429c <HAL_TIM_MspPostInit+0x80>)
 8004220:	6801      	ldr	r1, [r0, #0]
{
 8004222:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004224:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8004226:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004228:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800422c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004230:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 8004232:	d001      	beq.n	8004238 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004234:	b008      	add	sp, #32
 8004236:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004238:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004240:	4817      	ldr	r0, [pc, #92]	; (80042a0 <HAL_TIM_MspPostInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004242:	f041 0102 	orr.w	r1, r1, #2
 8004246:	6311      	str	r1, [r2, #48]	; 0x30
 8004248:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800424a:	f001 0102 	and.w	r1, r1, #2
 800424e:	9100      	str	r1, [sp, #0]
 8004250:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004252:	9301      	str	r3, [sp, #4]
 8004254:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004256:	2401      	movs	r4, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004258:	4323      	orrs	r3, r4
 800425a:	6313      	str	r3, [r2, #48]	; 0x30
 800425c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800425e:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004260:	4023      	ands	r3, r4
 8004262:	9301      	str	r3, [sp, #4]
 8004264:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004266:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8004268:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800426c:	2302      	movs	r3, #2
 800426e:	2602      	movs	r6, #2
 8004270:	2702      	movs	r7, #2
 8004272:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004276:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800427a:	f001 f82d 	bl	80052d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800427e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004282:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004284:	4807      	ldr	r0, [pc, #28]	; (80042a4 <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004286:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004288:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800428a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800428e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004292:	f001 f821 	bl	80052d8 <HAL_GPIO_Init>
}
 8004296:	b008      	add	sp, #32
 8004298:	bdd0      	pop	{r4, r6, r7, pc}
 800429a:	bf00      	nop
 800429c:	40010000 	.word	0x40010000
 80042a0:	40020400 	.word	0x40020400
 80042a4:	40020000 	.word	0x40020000

080042a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042a8:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 80042aa:	4a1b      	ldr	r2, [pc, #108]	; (8004318 <HAL_UART_MspInit+0x70>)
 80042ac:	6801      	ldr	r1, [r0, #0]
{
 80042ae:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b0:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 80042b2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80042b8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80042bc:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART2)
 80042be:	d002      	beq.n	80042c6 <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80042c0:	b009      	add	sp, #36	; 0x24
 80042c2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80042c6:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80042ce:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80042d2:	6410      	str	r0, [r2, #64]	; 0x40
 80042d4:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80042d6:	f400 3000 	and.w	r0, r0, #131072	; 0x20000
 80042da:	9000      	str	r0, [sp, #0]
 80042dc:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042de:	9301      	str	r3, [sp, #4]
 80042e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042e2:	480e      	ldr	r0, [pc, #56]	; (800431c <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042e4:	f043 0301 	orr.w	r3, r3, #1
 80042e8:	6313      	str	r3, [r2, #48]	; 0x30
 80042ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80042ec:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8004310 <HAL_UART_MspInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042f6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80042f8:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80042fa:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042fe:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004300:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004302:	f000 ffe9 	bl	80052d8 <HAL_GPIO_Init>
}
 8004306:	b009      	add	sp, #36	; 0x24
 8004308:	f85d fb04 	ldr.w	pc, [sp], #4
 800430c:	f3af 8000 	nop.w
 8004310:	0000000c 	.word	0x0000000c
 8004314:	00000002 	.word	0x00000002
 8004318:	40004400 	.word	0x40004400
 800431c:	40020000 	.word	0x40020000

08004320 <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004320:	4801      	ldr	r0, [pc, #4]	; (8004328 <CAN1_RX0_IRQHandler+0x8>)
 8004322:	f000 be31 	b.w	8004f88 <HAL_CAN_IRQHandler>
 8004326:	bf00      	nop
 8004328:	200006a8 	.word	0x200006a8

0800432c <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 800432c:	4b08      	ldr	r3, [pc, #32]	; (8004350 <ADC_IRQHandler+0x24>)
 800432e:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 8004330:	0752      	lsls	r2, r2, #29
 8004332:	d505      	bpl.n	8004340 <ADC_IRQHandler+0x14>
  {
    // Clear Flags
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	f022 020c 	bic.w	r2, r2, #12
 800433a:	601a      	str	r2, [r3, #0]

    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 800433c:	f7ff bb8e 	b.w	8003a5c <TSK_HighFrequencyTask>
  }
#ifdef ADC3
  else
  {
    // Clear Flags
    ADC3->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8004340:	4a04      	ldr	r2, [pc, #16]	; (8004354 <ADC_IRQHandler+0x28>)
 8004342:	6813      	ldr	r3, [r2, #0]
 8004344:	f023 030c 	bic.w	r3, r3, #12
 8004348:	6013      	str	r3, [r2, #0]

    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 800434a:	f7ff bb87 	b.w	8003a5c <TSK_HighFrequencyTask>
 800434e:	bf00      	nop
 8004350:	40012000 	.word	0x40012000
 8004354:	40012200 	.word	0x40012200

08004358 <TIM1_UP_TIM10_IRQHandler>:
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 8004358:	4803      	ldr	r0, [pc, #12]	; (8004368 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800435a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800435c:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800435e:	f06f 0201 	mvn.w	r2, #1
 8004362:	611a      	str	r2, [r3, #16]
  ICS_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8004364:	f002 bb04 	b.w	8006970 <ICS_TIMx_UP_IRQHandler>
 8004368:	20000114 	.word	0x20000114

0800436c <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 800436c:	4807      	ldr	r0, [pc, #28]	; (800438c <TIM1_BRK_TIM9_IRQHandler+0x20>)
{
 800436e:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8004370:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8004372:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8004374:	691a      	ldr	r2, [r3, #16]
 8004376:	0612      	lsls	r2, r2, #24
 8004378:	d504      	bpl.n	8004384 <TIM1_BRK_TIM9_IRQHandler+0x18>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800437a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800437e:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    ICS_BRK_IRQHandler(&PWM_Handle_M1);
 8004380:	f002 fb42 	bl	8006a08 <ICS_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8004384:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8004388:	f7ff bb3c 	b.w	8003a04 <MC_Scheduler>
 800438c:	20000114 	.word	0x20000114

08004390 <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8004390:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8004392:	4c1f      	ldr	r4, [pc, #124]	; (8004410 <USART2_IRQHandler+0x80>)
 8004394:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	0691      	lsls	r1, r2, #26
{
 800439c:	b082      	sub	sp, #8
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 800439e:	d407      	bmi.n	80043b0 <USART2_IRQHandler+0x20>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80043a0:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80043a2:	0612      	lsls	r2, r2, #24
 80043a4:	d413      	bmi.n	80043ce <USART2_IRQHandler+0x3e>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80043a6:	681b      	ldr	r3, [r3, #0]
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80043a8:	071b      	lsls	r3, r3, #28
 80043aa:	d418      	bmi.n	80043de <USART2_IRQHandler+0x4e>
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 80043ac:	b002      	add	sp, #8
 80043ae:	bd10      	pop	{r4, pc}
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80043b0:	6859      	ldr	r1, [r3, #4]
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 80043b2:	4620      	mov	r0, r4
 80043b4:	b2c9      	uxtb	r1, r1
 80043b6:	f003 f887 	bl	80074c8 <UFCP_RX_IRQ_Handler>
 80043ba:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d021      	beq.n	8004404 <USART2_IRQHandler+0x74>
    if (retVal == 2)
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d01c      	beq.n	80043fe <USART2_IRQHandler+0x6e>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80043c4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	0612      	lsls	r2, r2, #24
 80043cc:	d5eb      	bpl.n	80043a6 <USART2_IRQHandler+0x16>
    UFCP_TX_IRQ_Handler(&pUSART);
 80043ce:	4810      	ldr	r0, [pc, #64]	; (8004410 <USART2_IRQHandler+0x80>)
 80043d0:	f002 ffe8 	bl	80073a4 <UFCP_TX_IRQ_Handler>
  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80043d4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	071b      	lsls	r3, r3, #28
 80043dc:	d5e6      	bpl.n	80043ac <USART2_IRQHandler+0x1c>
    UFCP_OVR_IRQ_Handler(&pUSART);
 80043de:	480c      	ldr	r0, [pc, #48]	; (8004410 <USART2_IRQHandler+0x80>)
 80043e0:	f003 f8de 	bl	80075a0 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 80043e4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 80043ec:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80043f2:	9b01      	ldr	r3, [sp, #4]
}
 80043f4:	b002      	add	sp, #8
 80043f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UI_SerialCommunicationTimeOutStop();
 80043fa:	f000 b8a5 	b.w	8004548 <UI_SerialCommunicationTimeOutStop>
      UI_SerialCommunicationTimeOutStop();
 80043fe:	f000 f8a3 	bl	8004548 <UI_SerialCommunicationTimeOutStop>
 8004402:	e7df      	b.n	80043c4 <USART2_IRQHandler+0x34>
      UI_SerialCommunicationTimeOutStart();
 8004404:	f000 f8a6 	bl	8004554 <UI_SerialCommunicationTimeOutStart>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8004408:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800440c:	e7c8      	b.n	80043a0 <USART2_IRQHandler+0x10>
 800440e:	bf00      	nop
 8004410:	20000360 	.word	0x20000360

08004414 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004414:	b510      	push	{r4, lr}
 8004416:	b082      	sub	sp, #8
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8004418:	f7ff fc56 	bl	8003cc8 <TSK_HardwareFaultTask>
 800441c:	4c1b      	ldr	r4, [pc, #108]	; (800448c <HardFault_Handler+0x78>)

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 800441e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	0712      	lsls	r2, r2, #28
 8004426:	d41d      	bmi.n	8004464 <HardFault_Handler+0x50>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8004428:	681a      	ldr	r2, [r3, #0]
        UFCP_OVR_IRQ_Handler(&pUSART);
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
        UI_SerialCommunicationTimeOutStop();
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 800442a:	0610      	lsls	r0, r2, #24
 800442c:	d40f      	bmi.n	800444e <HardFault_Handler+0x3a>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800442e:	681a      	ldr	r2, [r3, #0]
      {
        UFCP_TX_IRQ_Handler(&pUSART);
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8004430:	0692      	lsls	r2, r2, #26
 8004432:	d5f6      	bpl.n	8004422 <HardFault_Handler+0xe>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8004434:	6859      	ldr	r1, [r3, #4]
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8004436:	4620      	mov	r0, r4
 8004438:	b2c9      	uxtb	r1, r1
 800443a:	f003 f845 	bl	80074c8 <UFCP_RX_IRQ_Handler>
 800443e:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8004440:	2b01      	cmp	r3, #1
 8004442:	d01f      	beq.n	8004484 <HardFault_Handler+0x70>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8004444:	2b02      	cmp	r3, #2
 8004446:	d1ea      	bne.n	800441e <HardFault_Handler+0xa>
        {
          UI_SerialCommunicationTimeOutStop();
 8004448:	f000 f87e 	bl	8004548 <UI_SerialCommunicationTimeOutStop>
 800444c:	e7e7      	b.n	800441e <HardFault_Handler+0xa>
        UFCP_TX_IRQ_Handler(&pUSART);
 800444e:	4620      	mov	r0, r4
 8004450:	f002 ffa8 	bl	80073a4 <UFCP_TX_IRQ_Handler>
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8004454:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	0691      	lsls	r1, r2, #26
 800445c:	d4ea      	bmi.n	8004434 <HardFault_Handler+0x20>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800445e:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8004460:	0712      	lsls	r2, r2, #28
 8004462:	d5e1      	bpl.n	8004428 <HardFault_Handler+0x14>
        UFCP_OVR_IRQ_Handler(&pUSART);
 8004464:	4620      	mov	r0, r4
 8004466:	f003 f89b 	bl	80075a0 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 800446a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8004472:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8004478:	9b01      	ldr	r3, [sp, #4]
        UI_SerialCommunicationTimeOutStop();
 800447a:	f000 f865 	bl	8004548 <UI_SerialCommunicationTimeOutStop>
      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 800447e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004482:	e7d1      	b.n	8004428 <HardFault_Handler+0x14>
          UI_SerialCommunicationTimeOutStart();
 8004484:	f000 f866 	bl	8004554 <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 8004488:	e7c9      	b.n	800441e <HardFault_Handler+0xa>
 800448a:	bf00      	nop
 800448c:	20000360 	.word	0x20000360

08004490 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8004490:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8004492:	4c0a      	ldr	r4, [pc, #40]	; (80044bc <SysTick_Handler+0x2c>)
 8004494:	7823      	ldrb	r3, [r4, #0]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d006      	beq.n	80044a8 <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 800449a:	3301      	adds	r3, #1
 800449c:	b2db      	uxtb	r3, r3
 800449e:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 80044a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 80044a4:	f7ff bc00 	b.w	8003ca8 <MC_RunMotorControlTasks>
    HAL_IncTick();
 80044a8:	f000 f8a6 	bl	80045f8 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 80044ac:	f000 ff10 	bl	80052d0 <HAL_SYSTICK_IRQHandler>
 80044b0:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 80044b2:	7023      	strb	r3, [r4, #0]
}
 80044b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 80044b8:	f7ff bbf6 	b.w	8003ca8 <MC_RunMotorControlTasks>
 80044bc:	2000049c 	.word	0x2000049c

080044c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044c0:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044c2:	4c0c      	ldr	r4, [pc, #48]	; (80044f4 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044c4:	4b0c      	ldr	r3, [pc, #48]	; (80044f8 <_sbrk+0x38>)
 80044c6:	490d      	ldr	r1, [pc, #52]	; (80044fc <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 80044c8:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044ca:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 80044cc:	b12a      	cbz	r2, 80044da <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044ce:	4410      	add	r0, r2
 80044d0:	4288      	cmp	r0, r1
 80044d2:	d807      	bhi.n	80044e4 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80044d4:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 80044d6:	4610      	mov	r0, r2
 80044d8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80044da:	4a09      	ldr	r2, [pc, #36]	; (8004500 <_sbrk+0x40>)
 80044dc:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80044de:	4410      	add	r0, r2
 80044e0:	4288      	cmp	r0, r1
 80044e2:	d9f7      	bls.n	80044d4 <_sbrk+0x14>
    errno = ENOMEM;
 80044e4:	f003 fd32 	bl	8007f4c <__errno>
 80044e8:	230c      	movs	r3, #12
    return (void *)-1;
 80044ea:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 80044ee:	6003      	str	r3, [r0, #0]
}
 80044f0:	4610      	mov	r0, r2
 80044f2:	bd10      	pop	{r4, pc}
 80044f4:	200009c0 	.word	0x200009c0
 80044f8:	20020000 	.word	0x20020000
 80044fc:	00000400 	.word	0x00000400
 8004500:	200009e0 	.word	0x200009e0

08004504 <UI_Scheduler>:

}

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8004504:	4a0d      	ldr	r2, [pc, #52]	; (800453c <UI_Scheduler+0x38>)
 8004506:	8813      	ldrh	r3, [r2, #0]
 8004508:	b29b      	uxth	r3, r3
 800450a:	b11b      	cbz	r3, 8004514 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 800450c:	8813      	ldrh	r3, [r2, #0]
 800450e:	3b01      	subs	r3, #1
 8004510:	b29b      	uxth	r3, r3
 8004512:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8004514:	4a0a      	ldr	r2, [pc, #40]	; (8004540 <UI_Scheduler+0x3c>)
 8004516:	8813      	ldrh	r3, [r2, #0]
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b01      	cmp	r3, #1
 800451c:	d903      	bls.n	8004526 <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 800451e:	8813      	ldrh	r3, [r2, #0]
 8004520:	3b01      	subs	r3, #1
 8004522:	b29b      	uxth	r3, r3
 8004524:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8004526:	4a07      	ldr	r2, [pc, #28]	; (8004544 <UI_Scheduler+0x40>)
 8004528:	8813      	ldrh	r3, [r2, #0]
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	d903      	bls.n	8004538 <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 8004530:	8813      	ldrh	r3, [r2, #0]
 8004532:	3b01      	subs	r3, #1
 8004534:	b29b      	uxth	r3, r3
 8004536:	8013      	strh	r3, [r2, #0]
  }
}
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	200009c6 	.word	0x200009c6
 8004540:	200009c4 	.word	0x200009c4
 8004544:	2000049e 	.word	0x2000049e

08004548 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8004548:	4b01      	ldr	r3, [pc, #4]	; (8004550 <UI_SerialCommunicationTimeOutStop+0x8>)
 800454a:	2200      	movs	r2, #0
 800454c:	801a      	strh	r2, [r3, #0]
}
 800454e:	4770      	bx	lr
 8004550:	200009c4 	.word	0x200009c4

08004554 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8004554:	4b01      	ldr	r3, [pc, #4]	; (800455c <UI_SerialCommunicationTimeOutStart+0x8>)
 8004556:	224f      	movs	r2, #79	; 0x4f
 8004558:	801a      	strh	r2, [r3, #0]
}
 800455a:	4770      	bx	lr
 800455c:	200009c4 	.word	0x200009c4

08004560 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004560:	4b05      	ldr	r3, [pc, #20]	; (8004578 <SystemInit+0x18>)
 8004562:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004566:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800456a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800456e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004572:	6099      	str	r1, [r3, #8]
#endif
}
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	e000ed00 	.word	0xe000ed00

0800457c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800457c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800457e:	4a0e      	ldr	r2, [pc, #56]	; (80045b8 <HAL_InitTick+0x3c>)
 8004580:	4b0e      	ldr	r3, [pc, #56]	; (80045bc <HAL_InitTick+0x40>)
 8004582:	7812      	ldrb	r2, [r2, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
{
 8004586:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004588:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800458c:	fbb0 f0f2 	udiv	r0, r0, r2
 8004590:	fbb3 f0f0 	udiv	r0, r3, r0
 8004594:	f000 fe80 	bl	8005298 <HAL_SYSTICK_Config>
 8004598:	b908      	cbnz	r0, 800459e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800459a:	2d0f      	cmp	r5, #15
 800459c:	d901      	bls.n	80045a2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800459e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80045a0:	bd38      	pop	{r3, r4, r5, pc}
 80045a2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045a4:	4602      	mov	r2, r0
 80045a6:	4629      	mov	r1, r5
 80045a8:	f04f 30ff 	mov.w	r0, #4294967295
 80045ac:	f000 fe28 	bl	8005200 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045b0:	4b03      	ldr	r3, [pc, #12]	; (80045c0 <HAL_InitTick+0x44>)
 80045b2:	4620      	mov	r0, r4
 80045b4:	601d      	str	r5, [r3, #0]
}
 80045b6:	bd38      	pop	{r3, r4, r5, pc}
 80045b8:	200004a4 	.word	0x200004a4
 80045bc:	200004a0 	.word	0x200004a0
 80045c0:	200004a8 	.word	0x200004a8

080045c4 <HAL_Init>:
{
 80045c4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80045c6:	4b0b      	ldr	r3, [pc, #44]	; (80045f4 <HAL_Init+0x30>)
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ce:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045d6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045de:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045e0:	2003      	movs	r0, #3
 80045e2:	f000 fdfb 	bl	80051dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80045e6:	2004      	movs	r0, #4
 80045e8:	f7ff ffc8 	bl	800457c <HAL_InitTick>
  HAL_MspInit();
 80045ec:	f7ff fce0 	bl	8003fb0 <HAL_MspInit>
}
 80045f0:	2000      	movs	r0, #0
 80045f2:	bd08      	pop	{r3, pc}
 80045f4:	40023c00 	.word	0x40023c00

080045f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80045f8:	4a03      	ldr	r2, [pc, #12]	; (8004608 <HAL_IncTick+0x10>)
 80045fa:	4b04      	ldr	r3, [pc, #16]	; (800460c <HAL_IncTick+0x14>)
 80045fc:	6811      	ldr	r1, [r2, #0]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	440b      	add	r3, r1
 8004602:	6013      	str	r3, [r2, #0]
}
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	200009c8 	.word	0x200009c8
 800460c:	200004a4 	.word	0x200004a4

08004610 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004610:	4b01      	ldr	r3, [pc, #4]	; (8004618 <HAL_GetTick+0x8>)
 8004612:	6818      	ldr	r0, [r3, #0]
}
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	200009c8 	.word	0x200009c8

0800461c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800461c:	b538      	push	{r3, r4, r5, lr}
 800461e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004620:	f7ff fff6 	bl	8004610 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004624:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8004626:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8004628:	d002      	beq.n	8004630 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800462a:	4b04      	ldr	r3, [pc, #16]	; (800463c <HAL_Delay+0x20>)
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004630:	f7ff ffee 	bl	8004610 <HAL_GetTick>
 8004634:	1b43      	subs	r3, r0, r5
 8004636:	42a3      	cmp	r3, r4
 8004638:	d3fa      	bcc.n	8004630 <HAL_Delay+0x14>
  {
  }
}
 800463a:	bd38      	pop	{r3, r4, r5, pc}
 800463c:	200004a4 	.word	0x200004a4

08004640 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004640:	2800      	cmp	r0, #0
 8004642:	f000 809f 	beq.w	8004784 <HAL_ADC_Init+0x144>
{
 8004646:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004648:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800464a:	4604      	mov	r4, r0
 800464c:	b13d      	cbz	r5, 800465e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800464e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004650:	06db      	lsls	r3, r3, #27
 8004652:	d50c      	bpl.n	800466e <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004654:	2300      	movs	r3, #0
 8004656:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 800465a:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 800465c:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 800465e:	f7ff fcc7 	bl	8003ff0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004662:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004664:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8004666:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800466a:	06db      	lsls	r3, r3, #27
 800466c:	d4f2      	bmi.n	8004654 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 800466e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004670:	4a48      	ldr	r2, [pc, #288]	; (8004794 <HAL_ADC_Init+0x154>)
    ADC_STATE_CLR_SET(hadc->State,
 8004672:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004676:	f023 0302 	bic.w	r3, r3, #2
 800467a:	f043 0302 	orr.w	r3, r3, #2
 800467e:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004680:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004682:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004684:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8004688:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800468a:	6851      	ldr	r1, [r2, #4]
 800468c:	6860      	ldr	r0, [r4, #4]
 800468e:	4301      	orrs	r1, r0
 8004690:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004692:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004694:	6925      	ldr	r5, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004696:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004698:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800469c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800469e:	6859      	ldr	r1, [r3, #4]
 80046a0:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80046a4:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80046a6:	6859      	ldr	r1, [r3, #4]
 80046a8:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 80046ac:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	4302      	orrs	r2, r0
 80046b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80046b4:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80046b6:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80046b8:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80046bc:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80046be:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046c0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80046c2:	4302      	orrs	r2, r0
 80046c4:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046c6:	4a34      	ldr	r2, [pc, #208]	; (8004798 <HAL_ADC_Init+0x158>)
 80046c8:	4291      	cmp	r1, r2
 80046ca:	d052      	beq.n	8004772 <HAL_ADC_Init+0x132>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046cc:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80046ce:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046d0:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 80046d4:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	4311      	orrs	r1, r2
 80046da:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046dc:	6899      	ldr	r1, [r3, #8]
 80046de:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 80046e2:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	432a      	orrs	r2, r5
 80046e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	f022 0202 	bic.w	r2, r2, #2
 80046f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	7e21      	ldrb	r1, [r4, #24]
 80046f6:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80046fa:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80046fc:	f894 2020 	ldrb.w	r2, [r4, #32]
 8004700:	2a00      	cmp	r2, #0
 8004702:	d041      	beq.n	8004788 <HAL_ADC_Init+0x148>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004704:	6859      	ldr	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004706:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004708:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800470c:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800470e:	6858      	ldr	r0, [r3, #4]
 8004710:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8004714:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004716:	1e51      	subs	r1, r2, #1
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800471e:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004722:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004724:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004726:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800472a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800472c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800472e:	3901      	subs	r1, #1
 8004730:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8004734:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004736:	6899      	ldr	r1, [r3, #8]
 8004738:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 800473c:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800473e:	6899      	ldr	r1, [r3, #8]
 8004740:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8004744:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8004748:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800474a:	6899      	ldr	r1, [r3, #8]
 800474c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004750:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004752:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004754:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004756:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 800475a:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800475c:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800475e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004760:	f023 0303 	bic.w	r3, r3, #3
 8004764:	f043 0301 	orr.w	r3, r3, #1
 8004768:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800476a:	2300      	movs	r3, #0
 800476c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004770:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004778:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004780:	609a      	str	r2, [r3, #8]
 8004782:	e7b2      	b.n	80046ea <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 8004784:	2001      	movs	r0, #1
}
 8004786:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800478e:	605a      	str	r2, [r3, #4]
 8004790:	e7c6      	b.n	8004720 <HAL_ADC_Init+0xe0>
 8004792:	bf00      	nop
 8004794:	40012300 	.word	0x40012300
 8004798:	0f000001 	.word	0x0f000001

0800479c <HAL_ADC_ConfigChannel>:
{
 800479c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 800479e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80047a2:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 80047a4:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80047a6:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 80047a8:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80047aa:	f000 809b 	beq.w	80048e4 <HAL_ADC_ConfigChannel+0x148>
 80047ae:	2301      	movs	r3, #1
 80047b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80047b4:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80047b6:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 80047b8:	2c09      	cmp	r4, #9
 80047ba:	d82d      	bhi.n	8004818 <HAL_ADC_ConfigChannel+0x7c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80047bc:	691d      	ldr	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80047be:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80047c0:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 80047c4:	f04f 0c07 	mov.w	ip, #7
 80047c8:	fa0c fc0e 	lsl.w	ip, ip, lr
 80047cc:	ea25 050c 	bic.w	r5, r5, ip
 80047d0:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80047d2:	691d      	ldr	r5, [r3, #16]
 80047d4:	fa02 f20e 	lsl.w	r2, r2, lr
 80047d8:	432a      	orrs	r2, r5
 80047da:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 80047dc:	684a      	ldr	r2, [r1, #4]
 80047de:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80047e0:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 80047e2:	d82f      	bhi.n	8004844 <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80047e4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80047e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047ea:	3a05      	subs	r2, #5
 80047ec:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80047f0:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80047f4:	fa0e f202 	lsl.w	r2, lr, r2
 80047f8:	ea21 0202 	bic.w	r2, r1, r2
 80047fc:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80047fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004800:	ea4c 0202 	orr.w	r2, ip, r2
 8004804:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004806:	4a3f      	ldr	r2, [pc, #252]	; (8004904 <HAL_ADC_ConfigChannel+0x168>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d030      	beq.n	800486e <HAL_ADC_ConfigChannel+0xd2>
  __HAL_UNLOCK(hadc);
 800480c:	2300      	movs	r3, #0
 800480e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8004812:	4618      	mov	r0, r3
}
 8004814:	b003      	add	sp, #12
 8004816:	bd30      	pop	{r4, r5, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004818:	fa1f fc84 	uxth.w	ip, r4
 800481c:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8004820:	68dd      	ldr	r5, [r3, #12]
 8004822:	f1a2 0e1e 	sub.w	lr, r2, #30
 8004826:	2207      	movs	r2, #7
 8004828:	fa02 f20e 	lsl.w	r2, r2, lr
 800482c:	ea25 0202 	bic.w	r2, r5, r2
 8004830:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004832:	688a      	ldr	r2, [r1, #8]
 8004834:	68dd      	ldr	r5, [r3, #12]
 8004836:	fa02 f20e 	lsl.w	r2, r2, lr
 800483a:	432a      	orrs	r2, r5
 800483c:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 800483e:	684a      	ldr	r2, [r1, #4]
 8004840:	2a06      	cmp	r2, #6
 8004842:	d9cf      	bls.n	80047e4 <HAL_ADC_ConfigChannel+0x48>
  else if (sConfig->Rank < 13U)
 8004844:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004846:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 800484a:	d832      	bhi.n	80048b2 <HAL_ADC_ConfigChannel+0x116>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800484c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800484e:	3a23      	subs	r2, #35	; 0x23
 8004850:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004852:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004856:	fa05 f202 	lsl.w	r2, r5, r2
 800485a:	ea21 0202 	bic.w	r2, r1, r2
 800485e:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004862:	ea4c 0202 	orr.w	r2, ip, r2
 8004866:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004868:	4a26      	ldr	r2, [pc, #152]	; (8004904 <HAL_ADC_ConfigChannel+0x168>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d1ce      	bne.n	800480c <HAL_ADC_ConfigChannel+0x70>
 800486e:	2c12      	cmp	r4, #18
 8004870:	d02e      	beq.n	80048d0 <HAL_ADC_ConfigChannel+0x134>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004872:	4b25      	ldr	r3, [pc, #148]	; (8004908 <HAL_ADC_ConfigChannel+0x16c>)
 8004874:	429c      	cmp	r4, r3
 8004876:	d138      	bne.n	80048ea <HAL_ADC_ConfigChannel+0x14e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004878:	4a24      	ldr	r2, [pc, #144]	; (800490c <HAL_ADC_ConfigChannel+0x170>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800487a:	4b25      	ldr	r3, [pc, #148]	; (8004910 <HAL_ADC_ConfigChannel+0x174>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800487c:	6851      	ldr	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800487e:	4c25      	ldr	r4, [pc, #148]	; (8004914 <HAL_ADC_ConfigChannel+0x178>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004880:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 8004884:	6051      	str	r1, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004886:	6851      	ldr	r1, [r2, #4]
 8004888:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800488c:	6051      	str	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	fba4 2303 	umull	r2, r3, r4, r3
 8004894:	0c9b      	lsrs	r3, r3, #18
 8004896:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800489e:	9b01      	ldr	r3, [sp, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0b3      	beq.n	800480c <HAL_ADC_ConfigChannel+0x70>
        counter--;
 80048a4:	9b01      	ldr	r3, [sp, #4]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80048aa:	9b01      	ldr	r3, [sp, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1f9      	bne.n	80048a4 <HAL_ADC_ConfigChannel+0x108>
 80048b0:	e7ac      	b.n	800480c <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80048b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048b4:	3a41      	subs	r2, #65	; 0x41
 80048b6:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80048b8:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80048bc:	fa05 f202 	lsl.w	r2, r5, r2
 80048c0:	ea21 0202 	bic.w	r2, r1, r2
 80048c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80048c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c8:	ea4c 0202 	orr.w	r2, ip, r2
 80048cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80048ce:	e79a      	b.n	8004806 <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80048d0:	4b0e      	ldr	r3, [pc, #56]	; (800490c <HAL_ADC_ConfigChannel+0x170>)
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80048d8:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80048e0:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80048e2:	e793      	b.n	800480c <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 80048e4:	2002      	movs	r0, #2
}
 80048e6:	b003      	add	sp, #12
 80048e8:	bd30      	pop	{r4, r5, pc}
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80048ea:	2c11      	cmp	r4, #17
 80048ec:	d18e      	bne.n	800480c <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80048ee:	4b07      	ldr	r3, [pc, #28]	; (800490c <HAL_ADC_ConfigChannel+0x170>)
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80048f6:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80048fe:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004900:	e784      	b.n	800480c <HAL_ADC_ConfigChannel+0x70>
 8004902:	bf00      	nop
 8004904:	40012000 	.word	0x40012000
 8004908:	10000012 	.word	0x10000012
 800490c:	40012300 	.word	0x40012300
 8004910:	200004a0 	.word	0x200004a0
 8004914:	431bde83 	.word	0x431bde83

08004918 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8004918:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800491a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800491e:	698e      	ldr	r6, [r1, #24]
  __HAL_LOCK(hadc);
 8004920:	2b01      	cmp	r3, #1
 8004922:	f000 80ca 	beq.w	8004aba <HAL_ADCEx_InjectedConfigChannel+0x1a2>
 8004926:	2301      	movs	r3, #1
 8004928:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 800492c:	680d      	ldr	r5, [r1, #0]
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800492e:	6803      	ldr	r3, [r0, #0]
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004930:	2d09      	cmp	r5, #9
 8004932:	d868      	bhi.n	8004a06 <HAL_ADCEx_InjectedConfigChannel+0xee>
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8004934:	691c      	ldr	r4, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004936:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8004938:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 800493c:	2707      	movs	r7, #7
 800493e:	fa07 f70c 	lsl.w	r7, r7, ip
 8004942:	ea24 0407 	bic.w	r4, r4, r7
 8004946:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004948:	691c      	ldr	r4, [r3, #16]
 800494a:	fa02 f20c 	lsl.w	r2, r2, ip
 800494e:	4322      	orrs	r2, r4
 8004950:	611a      	str	r2, [r3, #16]
 8004952:	46ac      	mov	ip, r5
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8004954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004956:	f8d1 e010 	ldr.w	lr, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800495a:	684c      	ldr	r4, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800495c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004960:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004962:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8004964:	f10e 32ff 	add.w	r2, lr, #4294967295
 8004968:	ea47 5702 	orr.w	r7, r7, r2, lsl #20
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800496c:	1ce2      	adds	r2, r4, #3
 800496e:	eba2 020e 	sub.w	r2, r2, lr
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004972:	639f      	str	r7, [r3, #56]	; 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004974:	b2d2      	uxtb	r2, r2
 8004976:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8004978:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800497c:	f04f 0e1f 	mov.w	lr, #31
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004980:	fa0c fc02 	lsl.w	ip, ip, r2
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004984:	fa0e f202 	lsl.w	r2, lr, r2
 8004988:	ea27 0202 	bic.w	r2, r7, r2
 800498c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800498e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004990:	ea4c 0202 	orr.w	r2, ip, r2
 8004994:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004996:	4a4a      	ldr	r2, [pc, #296]	; (8004ac0 <HAL_ADCEx_InjectedConfigChannel+0x1a8>)
 8004998:	4296      	cmp	r6, r2
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80049a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80049a2:	689a      	ldr	r2, [r3, #8]
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80049a4:	d068      	beq.n	8004a78 <HAL_ADCEx_InjectedConfigChannel+0x160>
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80049a6:	4316      	orrs	r6, r2
 80049a8:	609e      	str	r6, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80049aa:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80049ac:	69ce      	ldr	r6, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80049ae:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80049b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	4332      	orrs	r2, r6
 80049b8:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80049ba:	7d4a      	ldrb	r2, [r1, #21]
 80049bc:	2a00      	cmp	r2, #0
 80049be:	d034      	beq.n	8004a2a <HAL_ADCEx_InjectedConfigChannel+0x112>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049c6:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80049c8:	7d0a      	ldrb	r2, [r1, #20]
 80049ca:	2a00      	cmp	r2, #0
 80049cc:	d034      	beq.n	8004a38 <HAL_ADCEx_InjectedConfigChannel+0x120>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80049ce:	685a      	ldr	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 80049d0:	2c02      	cmp	r4, #2
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80049d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049d6:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 80049d8:	d034      	beq.n	8004a44 <HAL_ADCEx_InjectedConfigChannel+0x12c>
 80049da:	2c03      	cmp	r4, #3
 80049dc:	d05b      	beq.n	8004a96 <HAL_ADCEx_InjectedConfigChannel+0x17e>
 80049de:	2c01      	cmp	r4, #1
 80049e0:	d04e      	beq.n	8004a80 <HAL_ADCEx_InjectedConfigChannel+0x168>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80049e2:	6a1a      	ldr	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80049e4:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80049e6:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80049ea:	f022 020f 	bic.w	r2, r2, #15
 80049ee:	621a      	str	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80049f0:	6a1a      	ldr	r2, [r3, #32]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80049f6:	4a33      	ldr	r2, [pc, #204]	; (8004ac4 <HAL_ADCEx_InjectedConfigChannel+0x1ac>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d030      	beq.n	8004a5e <HAL_ADCEx_InjectedConfigChannel+0x146>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049fc:	2300      	movs	r3, #0
 80049fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004a02:	4618      	mov	r0, r3
}
 8004a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8004a06:	fa1f fc85 	uxth.w	ip, r5
 8004a0a:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8004a0e:	f1a2 041e 	sub.w	r4, r2, #30
 8004a12:	2707      	movs	r7, #7
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	40a7      	lsls	r7, r4
 8004a18:	ea22 0207 	bic.w	r2, r2, r7
 8004a1c:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004a1e:	688a      	ldr	r2, [r1, #8]
 8004a20:	40a2      	lsls	r2, r4
 8004a22:	68dc      	ldr	r4, [r3, #12]
 8004a24:	4322      	orrs	r2, r4
 8004a26:	60da      	str	r2, [r3, #12]
 8004a28:	e794      	b.n	8004954 <HAL_ADCEx_InjectedConfigChannel+0x3c>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a30:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8004a32:	7d0a      	ldrb	r2, [r1, #20]
 8004a34:	2a00      	cmp	r2, #0
 8004a36:	d1ca      	bne.n	80049ce <HAL_ADCEx_InjectedConfigChannel+0xb6>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8004a38:	685a      	ldr	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8004a3a:	2c02      	cmp	r4, #2
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8004a3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a40:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8004a42:	d1ca      	bne.n	80049da <HAL_ADCEx_InjectedConfigChannel+0xc2>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8004a44:	699a      	ldr	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8004a46:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8004a48:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8004a4c:	f022 020f 	bic.w	r2, r2, #15
 8004a50:	619a      	str	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8004a52:	699a      	ldr	r2, [r3, #24]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8004a58:	4a1a      	ldr	r2, [pc, #104]	; (8004ac4 <HAL_ADCEx_InjectedConfigChannel+0x1ac>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d1ce      	bne.n	80049fc <HAL_ADCEx_InjectedConfigChannel+0xe4>
 8004a5e:	2d12      	cmp	r5, #18
 8004a60:	d024      	beq.n	8004aac <HAL_ADCEx_InjectedConfigChannel+0x194>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8004a62:	4b19      	ldr	r3, [pc, #100]	; (8004ac8 <HAL_ADCEx_InjectedConfigChannel+0x1b0>)
 8004a64:	429d      	cmp	r5, r3
 8004a66:	d001      	beq.n	8004a6c <HAL_ADCEx_InjectedConfigChannel+0x154>
 8004a68:	2d11      	cmp	r5, #17
 8004a6a:	d1c7      	bne.n	80049fc <HAL_ADCEx_InjectedConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004a6c:	4a17      	ldr	r2, [pc, #92]	; (8004acc <HAL_ADCEx_InjectedConfigChannel+0x1b4>)
 8004a6e:	6853      	ldr	r3, [r2, #4]
 8004a70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a74:	6053      	str	r3, [r2, #4]
 8004a76:	e7c1      	b.n	80049fc <HAL_ADCEx_InjectedConfigChannel+0xe4>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8004a78:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004a7c:	609a      	str	r2, [r3, #8]
 8004a7e:	e79c      	b.n	80049ba <HAL_ADCEx_InjectedConfigChannel+0xa2>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004a80:	695a      	ldr	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004a82:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004a84:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8004a88:	f022 020f 	bic.w	r2, r2, #15
 8004a8c:	615a      	str	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004a8e:	695a      	ldr	r2, [r3, #20]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	615a      	str	r2, [r3, #20]
      break;
 8004a94:	e7af      	b.n	80049f6 <HAL_ADCEx_InjectedConfigChannel+0xde>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8004a96:	69da      	ldr	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8004a98:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8004a9a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8004a9e:	f022 020f 	bic.w	r2, r2, #15
 8004aa2:	61da      	str	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8004aa4:	69da      	ldr	r2, [r3, #28]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	61da      	str	r2, [r3, #28]
      break;
 8004aaa:	e7a4      	b.n	80049f6 <HAL_ADCEx_InjectedConfigChannel+0xde>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004aac:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8004ab0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ab4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8004ab8:	e7a0      	b.n	80049fc <HAL_ADCEx_InjectedConfigChannel+0xe4>
  __HAL_LOCK(hadc);
 8004aba:	2002      	movs	r0, #2
}
 8004abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	000f0001 	.word	0x000f0001
 8004ac4:	40012000 	.word	0x40012000
 8004ac8:	10000012 	.word	0x10000012
 8004acc:	40012300 	.word	0x40012300

08004ad0 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004ad0:	2800      	cmp	r0, #0
 8004ad2:	d07b      	beq.n	8004bcc <HAL_CAN_Init+0xfc>
{
 8004ad4:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004ad6:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004ada:	4604      	mov	r4, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d072      	beq.n	8004bc6 <HAL_CAN_Init+0xf6>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004ae0:	6822      	ldr	r2, [r4, #0]
 8004ae2:	6813      	ldr	r3, [r2, #0]
 8004ae4:	f043 0301 	orr.w	r3, r3, #1
 8004ae8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004aea:	f7ff fd91 	bl	8004610 <HAL_GetTick>
 8004aee:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004af0:	e004      	b.n	8004afc <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004af2:	f7ff fd8d 	bl	8004610 <HAL_GetTick>
 8004af6:	1b43      	subs	r3, r0, r5
 8004af8:	2b0a      	cmp	r3, #10
 8004afa:	d85b      	bhi.n	8004bb4 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004afc:	6823      	ldr	r3, [r4, #0]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	07d1      	lsls	r1, r2, #31
 8004b02:	d5f6      	bpl.n	8004af2 <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	f022 0202 	bic.w	r2, r2, #2
 8004b0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b0c:	f7ff fd80 	bl	8004610 <HAL_GetTick>
 8004b10:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004b12:	e004      	b.n	8004b1e <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b14:	f7ff fd7c 	bl	8004610 <HAL_GetTick>
 8004b18:	1b40      	subs	r0, r0, r5
 8004b1a:	280a      	cmp	r0, #10
 8004b1c:	d84a      	bhi.n	8004bb4 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	0792      	lsls	r2, r2, #30
 8004b24:	d4f6      	bmi.n	8004b14 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004b26:	7e22      	ldrb	r2, [r4, #24]
 8004b28:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	bf0c      	ite	eq
 8004b2e:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004b32:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8004b36:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004b38:	7e62      	ldrb	r2, [r4, #25]
 8004b3a:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	bf0c      	ite	eq
 8004b40:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004b44:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8004b48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004b4a:	7ea2      	ldrb	r2, [r4, #26]
 8004b4c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	bf0c      	ite	eq
 8004b52:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004b56:	f022 0220 	bicne.w	r2, r2, #32
 8004b5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004b5c:	7ee2      	ldrb	r2, [r4, #27]
 8004b5e:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	bf0c      	ite	eq
 8004b64:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004b68:	f042 0210 	orrne.w	r2, r2, #16
 8004b6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004b6e:	7f22      	ldrb	r2, [r4, #28]
 8004b70:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	bf0c      	ite	eq
 8004b76:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004b7a:	f022 0208 	bicne.w	r2, r2, #8
 8004b7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004b80:	7f62      	ldrb	r2, [r4, #29]
 8004b82:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	bf0c      	ite	eq
 8004b88:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004b8c:	f022 0204 	bicne.w	r2, r2, #4
 8004b90:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004b92:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 8004b96:	6921      	ldr	r1, [r4, #16]
 8004b98:	4302      	orrs	r2, r0
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	6960      	ldr	r0, [r4, #20]
 8004b9e:	6861      	ldr	r1, [r4, #4]
 8004ba0:	4302      	orrs	r2, r0
 8004ba2:	3901      	subs	r1, #1
 8004ba4:	430a      	orrs	r2, r1
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004ba6:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004ba8:	2101      	movs	r1, #1
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004baa:	61da      	str	r2, [r3, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004bac:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8004bae:	f884 1020 	strb.w	r1, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8004bb2:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004bb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8004bb6:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bbc:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8004bbe:	f884 2020 	strb.w	r2, [r4, #32]
      return HAL_ERROR;
 8004bc2:	2001      	movs	r0, #1
}
 8004bc4:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8004bc6:	f7ff fa9b 	bl	8004100 <HAL_CAN_MspInit>
 8004bca:	e789      	b.n	8004ae0 <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 8004bcc:	2001      	movs	r0, #1
}
 8004bce:	4770      	bx	lr

08004bd0 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004bd0:	f890 2020 	ldrb.w	r2, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8004bd4:	3a01      	subs	r2, #1
 8004bd6:	2a01      	cmp	r2, #1
 8004bd8:	d906      	bls.n	8004be8 <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004bda:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004bdc:	4603      	mov	r3, r0
 8004bde:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

    return HAL_ERROR;
 8004be2:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004be4:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004be6:	4770      	bx	lr
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004be8:	4b41      	ldr	r3, [pc, #260]	; (8004cf0 <HAL_CAN_ConfigFilter+0x120>)
 8004bea:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
{
 8004bee:	b430      	push	{r4, r5}
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004bf0:	2401      	movs	r4, #1
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004bf2:	4322      	orrs	r2, r4
 8004bf4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004bf8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004bfc:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8004c00:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004c04:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004c08:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8004c0a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004c0e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004c12:	694a      	ldr	r2, [r1, #20]
 8004c14:	f002 001f 	and.w	r0, r2, #31
 8004c18:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004c1c:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
 8004c20:	ea24 0400 	bic.w	r4, r4, r0
 8004c24:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004c28:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004c2a:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004c2c:	2d00      	cmp	r5, #0
 8004c2e:	d145      	bne.n	8004cbc <HAL_CAN_ConfigFilter+0xec>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004c30:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8004c34:	4025      	ands	r5, r4
 8004c36:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c3a:	00d2      	lsls	r2, r2, #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004c3c:	68cd      	ldr	r5, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004c3e:	888b      	ldrh	r3, [r1, #4]
 8004c40:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004c44:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004c48:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c4c:	f8c2 3240 	str.w	r3, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c50:	688d      	ldr	r5, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004c52:	880b      	ldrh	r3, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c54:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c58:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004c5c:	698b      	ldr	r3, [r1, #24]
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004c5e:	4a24      	ldr	r2, [pc, #144]	; (8004cf0 <HAL_CAN_ConfigFilter+0x120>)
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004c60:	bb33      	cbnz	r3, 8004cb0 <HAL_CAN_ConfigFilter+0xe0>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004c62:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8004c66:	4023      	ands	r3, r4
 8004c68:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004c6c:	690b      	ldr	r3, [r1, #16]
 8004c6e:	b9c3      	cbnz	r3, 8004ca2 <HAL_CAN_ConfigFilter+0xd2>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004c70:	4b1f      	ldr	r3, [pc, #124]	; (8004cf0 <HAL_CAN_ConfigFilter+0x120>)
 8004c72:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004c76:	4014      	ands	r4, r2
 8004c78:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004c7c:	6a0b      	ldr	r3, [r1, #32]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d105      	bne.n	8004c8e <HAL_CAN_ConfigFilter+0xbe>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004c82:	4a1b      	ldr	r2, [pc, #108]	; (8004cf0 <HAL_CAN_ConfigFilter+0x120>)
 8004c84:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
 8004c88:	4318      	orrs	r0, r3
 8004c8a:	f8c2 021c 	str.w	r0, [r2, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004c8e:	4a18      	ldr	r2, [pc, #96]	; (8004cf0 <HAL_CAN_ConfigFilter+0x120>)
 8004c90:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8004c94:	f023 0301 	bic.w	r3, r3, #1
    return HAL_OK;
 8004c98:	2000      	movs	r0, #0
}
 8004c9a:	bc30      	pop	{r4, r5}
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004c9c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 8004ca0:	4770      	bx	lr
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004ca2:	4a13      	ldr	r2, [pc, #76]	; (8004cf0 <HAL_CAN_ConfigFilter+0x120>)
 8004ca4:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8004ca8:	4303      	orrs	r3, r0
 8004caa:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8004cae:	e7e5      	b.n	8004c7c <HAL_CAN_ConfigFilter+0xac>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004cb0:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8004cb4:	4303      	orrs	r3, r0
 8004cb6:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 8004cba:	e7d7      	b.n	8004c6c <HAL_CAN_ConfigFilter+0x9c>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004cbc:	2d01      	cmp	r5, #1
 8004cbe:	d1cd      	bne.n	8004c5c <HAL_CAN_ConfigFilter+0x8c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004cc0:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8004cc4:	4305      	orrs	r5, r0
 8004cc6:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004cca:	00d2      	lsls	r2, r2, #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004ccc:	680d      	ldr	r5, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004cce:	888b      	ldrh	r3, [r1, #4]
 8004cd0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004cd4:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004cd8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004cdc:	f8c2 3240 	str.w	r3, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004ce0:	688d      	ldr	r5, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004ce2:	898b      	ldrh	r3, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004ce4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ce8:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
 8004cec:	e7b6      	b.n	8004c5c <HAL_CAN_ConfigFilter+0x8c>
 8004cee:	bf00      	nop
 8004cf0:	40006400 	.word	0x40006400

08004cf4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004cf4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004cf6:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004cfa:	2b01      	cmp	r3, #1
{
 8004cfc:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8004cfe:	d006      	beq.n	8004d0e <HAL_CAN_Start+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004d00:	6a43      	ldr	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8004d02:	2601      	movs	r6, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004d04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d08:	6243      	str	r3, [r0, #36]	; 0x24
  }
}
 8004d0a:	4630      	mov	r0, r6
 8004d0c:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004d0e:	6802      	ldr	r2, [r0, #0]
 8004d10:	b2de      	uxtb	r6, r3
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004d12:	2302      	movs	r3, #2
 8004d14:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004d18:	6813      	ldr	r3, [r2, #0]
 8004d1a:	f023 0301 	bic.w	r3, r3, #1
 8004d1e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004d20:	f7ff fc76 	bl	8004610 <HAL_GetTick>
 8004d24:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004d26:	e004      	b.n	8004d32 <HAL_CAN_Start+0x3e>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d28:	f7ff fc72 	bl	8004610 <HAL_GetTick>
 8004d2c:	1b43      	subs	r3, r0, r5
 8004d2e:	2b0a      	cmp	r3, #10
 8004d30:	d808      	bhi.n	8004d44 <HAL_CAN_Start+0x50>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f013 0301 	ands.w	r3, r3, #1
 8004d3a:	d1f5      	bne.n	8004d28 <HAL_CAN_Start+0x34>
    return HAL_OK;
 8004d3c:	461e      	mov	r6, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004d3e:	6263      	str	r3, [r4, #36]	; 0x24
}
 8004d40:	4630      	mov	r0, r6
 8004d42:	bd70      	pop	{r4, r5, r6, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d44:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8004d46:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d4c:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8004d4e:	f884 2020 	strb.w	r2, [r4, #32]
}
 8004d52:	4630      	mov	r0, r6
 8004d54:	bd70      	pop	{r4, r5, r6, pc}
 8004d56:	bf00      	nop

08004d58 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004d58:	b430      	push	{r4, r5}
 8004d5a:	4684      	mov	ip, r0
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004d5c:	f890 0020 	ldrb.w	r0, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004d60:	f8dc 5000 	ldr.w	r5, [ip]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004d64:	3801      	subs	r0, #1
 8004d66:	2801      	cmp	r0, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004d68:	68ac      	ldr	r4, [r5, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8004d6a:	d835      	bhi.n	8004dd8 <HAL_CAN_AddTxMessage+0x80>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004d6c:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8004d70:	d03b      	beq.n	8004dea <HAL_CAN_AddTxMessage+0x92>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004d72:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004d76:	2c03      	cmp	r4, #3
 8004d78:	d049      	beq.n	8004e0e <HAL_CAN_AddTxMessage+0xb6>

        return HAL_ERROR;
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004d7a:	2001      	movs	r0, #1
 8004d7c:	40a0      	lsls	r0, r4
 8004d7e:	6018      	str	r0, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004d80:	688b      	ldr	r3, [r1, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d03a      	beq.n	8004dfc <HAL_CAN_AddTxMessage+0xa4>
                                                           pHeader->RTR);
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
                                                           pHeader->IDE |
 8004d86:	68c8      	ldr	r0, [r1, #12]
 8004d88:	4303      	orrs	r3, r0
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004d8a:	6848      	ldr	r0, [r1, #4]
                                                           pHeader->IDE |
 8004d8c:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004d90:	f104 0018 	add.w	r0, r4, #24
 8004d94:	0100      	lsls	r0, r0, #4
 8004d96:	502b      	str	r3, [r5, r0]
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004d98:	eb05 1c04 	add.w	ip, r5, r4, lsl #4
 8004d9c:	690b      	ldr	r3, [r1, #16]
 8004d9e:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004da2:	7d09      	ldrb	r1, [r1, #20]
 8004da4:	2901      	cmp	r1, #1
 8004da6:	ea4f 1304 	mov.w	r3, r4, lsl #4
 8004daa:	d105      	bne.n	8004db8 <HAL_CAN_AddTxMessage+0x60>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004dac:	f8dc 1184 	ldr.w	r1, [ip, #388]	; 0x184
 8004db0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004db4:	f8cc 1184 	str.w	r1, [ip, #388]	; 0x184
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004db8:	442b      	add	r3, r5
 8004dba:	6851      	ldr	r1, [r2, #4]
 8004dbc:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004dc0:	6812      	ldr	r2, [r2, #0]
 8004dc2:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004dc6:	f8dc 3180 	ldr.w	r3, [ip, #384]	; 0x180
 8004dca:	f043 0301 	orr.w	r3, r3, #1

      /* Return function status */
      return HAL_OK;
 8004dce:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8004dd0:	bc30      	pop	{r4, r5}
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004dd2:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
}
 8004dd6:	4770      	bx	lr
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004dd8:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8004ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    return HAL_ERROR;
 8004de0:	2001      	movs	r0, #1
}
 8004de2:	bc30      	pop	{r4, r5}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004de4:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 8004de8:	4770      	bx	lr
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004dea:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8004dee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
      return HAL_ERROR;
 8004df2:	2001      	movs	r0, #1
}
 8004df4:	bc30      	pop	{r4, r5}
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004df6:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 8004dfa:	4770      	bx	lr
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004dfc:	68cb      	ldr	r3, [r1, #12]
 8004dfe:	6808      	ldr	r0, [r1, #0]
 8004e00:	ea43 5040 	orr.w	r0, r3, r0, lsl #21
 8004e04:	f104 0318 	add.w	r3, r4, #24
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	50e8      	str	r0, [r5, r3]
 8004e0c:	e7c4      	b.n	8004d98 <HAL_CAN_AddTxMessage+0x40>
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004e0e:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8004e12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
        return HAL_ERROR;
 8004e16:	2001      	movs	r0, #1
}
 8004e18:	bc30      	pop	{r4, r5}
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004e1a:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 8004e1e:	4770      	bx	lr

08004e20 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004e20:	b570      	push	{r4, r5, r6, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8004e22:	f890 e020 	ldrb.w	lr, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004e26:	f10e 3eff 	add.w	lr, lr, #4294967295
 8004e2a:	f1be 0f01 	cmp.w	lr, #1
{
 8004e2e:	4684      	mov	ip, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8004e30:	d86d      	bhi.n	8004f0e <HAL_CAN_GetRxMessage+0xee>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004e32:	6800      	ldr	r0, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004e34:	b951      	cbnz	r1, 8004e4c <HAL_CAN_GetRxMessage+0x2c>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004e36:	68c4      	ldr	r4, [r0, #12]
 8004e38:	07a5      	lsls	r5, r4, #30
 8004e3a:	d10a      	bne.n	8004e52 <HAL_CAN_GetRxMessage+0x32>
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004e3c:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8004e40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000

        return HAL_ERROR;
 8004e44:	2001      	movs	r0, #1
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004e46:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8004e4a:	bd70      	pop	{r4, r5, r6, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004e4c:	6904      	ldr	r4, [r0, #16]
 8004e4e:	07a4      	lsls	r4, r4, #30
 8004e50:	d0f4      	beq.n	8004e3c <HAL_CAN_GetRxMessage+0x1c>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004e52:	eb00 1e01 	add.w	lr, r0, r1, lsl #4
 8004e56:	010c      	lsls	r4, r1, #4
 8004e58:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8004e5c:	f005 0504 	and.w	r5, r5, #4
 8004e60:	6095      	str	r5, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004e62:	2d00      	cmp	r5, #0
 8004e64:	d05a      	beq.n	8004f1c <HAL_CAN_GetRxMessage+0xfc>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004e66:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8004e6a:	08ed      	lsrs	r5, r5, #3
 8004e6c:	6055      	str	r5, [r2, #4]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004e6e:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8004e72:	f005 0502 	and.w	r5, r5, #2
 8004e76:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004e78:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004e7c:	f8de 61b4 	ldr.w	r6, [lr, #436]	; 0x1b4
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004e80:	f005 050f 	and.w	r5, r5, #15
 8004e84:	6115      	str	r5, [r2, #16]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004e86:	4420      	add	r0, r4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004e88:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004e8c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8004e90:	6196      	str	r6, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004e92:	0c2d      	lsrs	r5, r5, #16
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004e94:	f8d0 61b8 	ldr.w	r6, [r0, #440]	; 0x1b8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004e98:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004e9a:	701e      	strb	r6, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004e9c:	f8dc 2000 	ldr.w	r2, [ip]
 8004ea0:	4422      	add	r2, r4
 8004ea2:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8004ea6:	0a12      	lsrs	r2, r2, #8
 8004ea8:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004eaa:	f8dc 2000 	ldr.w	r2, [ip]
 8004eae:	4422      	add	r2, r4
 8004eb0:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8004eb4:	0c12      	lsrs	r2, r2, #16
 8004eb6:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004eb8:	f8dc 2000 	ldr.w	r2, [ip]
 8004ebc:	4422      	add	r2, r4
 8004ebe:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8004ec2:	0e12      	lsrs	r2, r2, #24
 8004ec4:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004ec6:	f8dc 2000 	ldr.w	r2, [ip]
 8004eca:	4422      	add	r2, r4
 8004ecc:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8004ed0:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004ed2:	f8dc 2000 	ldr.w	r2, [ip]
 8004ed6:	4422      	add	r2, r4
 8004ed8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8004edc:	0a12      	lsrs	r2, r2, #8
 8004ede:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004ee0:	f8dc 2000 	ldr.w	r2, [ip]
 8004ee4:	4422      	add	r2, r4
 8004ee6:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8004eea:	0c12      	lsrs	r2, r2, #16
 8004eec:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004eee:	f8dc 2000 	ldr.w	r2, [ip]
 8004ef2:	4422      	add	r2, r4
 8004ef4:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8004ef8:	0e12      	lsrs	r2, r2, #24
 8004efa:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004efc:	f8dc 2000 	ldr.w	r2, [ip]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004f00:	b989      	cbnz	r1, 8004f26 <HAL_CAN_GetRxMessage+0x106>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004f02:	68d3      	ldr	r3, [r2, #12]
 8004f04:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 8004f08:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004f0a:	60d3      	str	r3, [r2, #12]
}
 8004f0c:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f0e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    return HAL_ERROR;
 8004f14:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f16:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 8004f1a:	bd70      	pop	{r4, r5, r6, pc}
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004f1c:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8004f20:	0d6d      	lsrs	r5, r5, #21
 8004f22:	6015      	str	r5, [r2, #0]
 8004f24:	e7a3      	b.n	8004e6e <HAL_CAN_GetRxMessage+0x4e>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004f26:	6913      	ldr	r3, [r2, #16]
 8004f28:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 8004f2c:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004f2e:	6113      	str	r3, [r2, #16]
}
 8004f30:	bd70      	pop	{r4, r5, r6, pc}
 8004f32:	bf00      	nop

08004f34 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f34:	f890 2020 	ldrb.w	r2, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f38:	3a01      	subs	r2, #1
 8004f3a:	2a01      	cmp	r2, #1
{
 8004f3c:	4603      	mov	r3, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8004f3e:	d905      	bls.n	8004f4c <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f40:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004f42:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

    return HAL_ERROR;
 8004f46:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f48:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004f4a:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004f4c:	6802      	ldr	r2, [r0, #0]
 8004f4e:	6953      	ldr	r3, [r2, #20]
 8004f50:	4319      	orrs	r1, r3
    return HAL_OK;
 8004f52:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004f54:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8004f56:	4770      	bx	lr

08004f58 <HAL_CAN_TxMailbox0CompleteCallback>:
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop

08004f5c <HAL_CAN_TxMailbox1CompleteCallback>:
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop

08004f60 <HAL_CAN_TxMailbox2CompleteCallback>:
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop

08004f64 <HAL_CAN_TxMailbox0AbortCallback>:
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop

08004f68 <HAL_CAN_TxMailbox1AbortCallback>:
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop

08004f6c <HAL_CAN_TxMailbox2AbortCallback>:
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop

08004f70 <HAL_CAN_RxFifo0FullCallback>:
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop

08004f74 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop

08004f78 <HAL_CAN_RxFifo1FullCallback>:
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop

08004f7c <HAL_CAN_SleepCallback>:
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop

08004f80 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop

08004f84 <HAL_CAN_ErrorCallback>:
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop

08004f88 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004f88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004f8c:	6803      	ldr	r3, [r0, #0]
 8004f8e:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004f90:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004f94:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004f96:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004f9a:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004f9e:	f8d3 9018 	ldr.w	r9, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004fa2:	f014 0601 	ands.w	r6, r4, #1
{
 8004fa6:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004fa8:	d025      	beq.n	8004ff6 <HAL_CAN_IRQHandler+0x6e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004faa:	f017 0601 	ands.w	r6, r7, #1
 8004fae:	f040 808f 	bne.w	80050d0 <HAL_CAN_IRQHandler+0x148>
 8004fb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004fb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004fba:	05f8      	lsls	r0, r7, #23
 8004fbc:	d50d      	bpl.n	8004fda <HAL_CAN_IRQHandler+0x52>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004fbe:	682b      	ldr	r3, [r5, #0]
 8004fc0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004fc4:	6098      	str	r0, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004fc6:	05bb      	lsls	r3, r7, #22
 8004fc8:	f100 80be 	bmi.w	8005148 <HAL_CAN_IRQHandler+0x1c0>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004fcc:	0578      	lsls	r0, r7, #21
 8004fce:	f100 80e4 	bmi.w	800519a <HAL_CAN_IRQHandler+0x212>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004fd2:	053b      	lsls	r3, r7, #20
 8004fd4:	f140 80f0 	bpl.w	80051b8 <HAL_CAN_IRQHandler+0x230>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004fd8:	460e      	mov	r6, r1
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004fda:	03f8      	lsls	r0, r7, #15
 8004fdc:	d50b      	bpl.n	8004ff6 <HAL_CAN_IRQHandler+0x6e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004fde:	682b      	ldr	r3, [r5, #0]
 8004fe0:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004fe4:	03b9      	lsls	r1, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004fe6:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004fe8:	f100 80ba 	bmi.w	8005160 <HAL_CAN_IRQHandler+0x1d8>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004fec:	037a      	lsls	r2, r7, #13
 8004fee:	f140 80cf 	bpl.w	8005190 <HAL_CAN_IRQHandler+0x208>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004ff2:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004ff6:	0727      	lsls	r7, r4, #28
 8004ff8:	d502      	bpl.n	8005000 <HAL_CAN_IRQHandler+0x78>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004ffa:	f01b 0f10 	tst.w	fp, #16
 8004ffe:	d161      	bne.n	80050c4 <HAL_CAN_IRQHandler+0x13c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005000:	0760      	lsls	r0, r4, #29
 8005002:	d503      	bpl.n	800500c <HAL_CAN_IRQHandler+0x84>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005004:	f01b 0f08 	tst.w	fp, #8
 8005008:	f040 808c 	bne.w	8005124 <HAL_CAN_IRQHandler+0x19c>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800500c:	07a1      	lsls	r1, r4, #30
 800500e:	d504      	bpl.n	800501a <HAL_CAN_IRQHandler+0x92>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	079a      	lsls	r2, r3, #30
 8005016:	f040 808c 	bne.w	8005132 <HAL_CAN_IRQHandler+0x1aa>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800501a:	0663      	lsls	r3, r4, #25
 800501c:	d502      	bpl.n	8005024 <HAL_CAN_IRQHandler+0x9c>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800501e:	f01a 0f10 	tst.w	sl, #16
 8005022:	d149      	bne.n	80050b8 <HAL_CAN_IRQHandler+0x130>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005024:	06a7      	lsls	r7, r4, #26
 8005026:	d502      	bpl.n	800502e <HAL_CAN_IRQHandler+0xa6>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005028:	f01a 0f08 	tst.w	sl, #8
 800502c:	d173      	bne.n	8005116 <HAL_CAN_IRQHandler+0x18e>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800502e:	06e0      	lsls	r0, r4, #27
 8005030:	d503      	bpl.n	800503a <HAL_CAN_IRQHandler+0xb2>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005032:	682b      	ldr	r3, [r5, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	0799      	lsls	r1, r3, #30
 8005038:	d162      	bne.n	8005100 <HAL_CAN_IRQHandler+0x178>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800503a:	03a2      	lsls	r2, r4, #14
 800503c:	d502      	bpl.n	8005044 <HAL_CAN_IRQHandler+0xbc>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800503e:	f018 0f10 	tst.w	r8, #16
 8005042:	d161      	bne.n	8005108 <HAL_CAN_IRQHandler+0x180>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005044:	03e3      	lsls	r3, r4, #15
 8005046:	d502      	bpl.n	800504e <HAL_CAN_IRQHandler+0xc6>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005048:	f018 0f08 	tst.w	r8, #8
 800504c:	d175      	bne.n	800513a <HAL_CAN_IRQHandler+0x1b2>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800504e:	0427      	lsls	r7, r4, #16
 8005050:	d505      	bpl.n	800505e <HAL_CAN_IRQHandler+0xd6>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005052:	f018 0f04 	tst.w	r8, #4
 8005056:	d106      	bne.n	8005066 <HAL_CAN_IRQHandler+0xde>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005058:	682b      	ldr	r3, [r5, #0]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800505a:	2204      	movs	r2, #4
 800505c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800505e:	2e00      	cmp	r6, #0
 8005060:	d146      	bne.n	80050f0 <HAL_CAN_IRQHandler+0x168>
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005062:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005066:	05e0      	lsls	r0, r4, #23
 8005068:	d504      	bpl.n	8005074 <HAL_CAN_IRQHandler+0xec>
 800506a:	f019 0f01 	tst.w	r9, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 800506e:	bf18      	it	ne
 8005070:	f046 0601 	orrne.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005074:	05a1      	lsls	r1, r4, #22
 8005076:	d504      	bpl.n	8005082 <HAL_CAN_IRQHandler+0xfa>
 8005078:	f019 0f02 	tst.w	r9, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 800507c:	bf18      	it	ne
 800507e:	f046 0602 	orrne.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005082:	0562      	lsls	r2, r4, #21
 8005084:	d504      	bpl.n	8005090 <HAL_CAN_IRQHandler+0x108>
 8005086:	f019 0f04 	tst.w	r9, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 800508a:	bf18      	it	ne
 800508c:	f046 0604 	orrne.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005090:	0523      	lsls	r3, r4, #20
 8005092:	d5e1      	bpl.n	8005058 <HAL_CAN_IRQHandler+0xd0>
 8005094:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 8005098:	d0de      	beq.n	8005058 <HAL_CAN_IRQHandler+0xd0>
        switch (esrflags & CAN_ESR_LEC)
 800509a:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 800509e:	f000 809a 	beq.w	80051d6 <HAL_CAN_IRQHandler+0x24e>
 80050a2:	d861      	bhi.n	8005168 <HAL_CAN_IRQHandler+0x1e0>
 80050a4:	f1b9 0f20 	cmp.w	r9, #32
 80050a8:	f000 8083 	beq.w	80051b2 <HAL_CAN_IRQHandler+0x22a>
 80050ac:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 80050b0:	d168      	bne.n	8005184 <HAL_CAN_IRQHandler+0x1fc>
            errorcode |= HAL_CAN_ERROR_ACK;
 80050b2:	f046 0620 	orr.w	r6, r6, #32
            break;
 80050b6:	e05f      	b.n	8005178 <HAL_CAN_IRQHandler+0x1f0>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80050b8:	682b      	ldr	r3, [r5, #0]
 80050ba:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80050bc:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80050c0:	611a      	str	r2, [r3, #16]
 80050c2:	e7af      	b.n	8005024 <HAL_CAN_IRQHandler+0x9c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80050c4:	682b      	ldr	r3, [r5, #0]
 80050c6:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80050c8:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80050cc:	60da      	str	r2, [r3, #12]
 80050ce:	e797      	b.n	8005000 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80050d0:	2201      	movs	r2, #1
 80050d2:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80050d4:	07bb      	lsls	r3, r7, #30
 80050d6:	d43b      	bmi.n	8005150 <HAL_CAN_IRQHandler+0x1c8>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80050d8:	077e      	lsls	r6, r7, #29
 80050da:	d460      	bmi.n	800519e <HAL_CAN_IRQHandler+0x216>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80050dc:	f017 0608 	ands.w	r6, r7, #8
 80050e0:	d06e      	beq.n	80051c0 <HAL_CAN_IRQHandler+0x238>
 80050e2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80050e6:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80050ea:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 80050ee:	e764      	b.n	8004fba <HAL_CAN_IRQHandler+0x32>
    hcan->ErrorCode |= errorcode;
 80050f0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80050f2:	431e      	orrs	r6, r3
    HAL_CAN_ErrorCallback(hcan);
 80050f4:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 80050f6:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80050f8:	f7ff ff44 	bl	8004f84 <HAL_CAN_ErrorCallback>
}
 80050fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005100:	4628      	mov	r0, r5
 8005102:	f7ff ff37 	bl	8004f74 <HAL_CAN_RxFifo1MsgPendingCallback>
 8005106:	e798      	b.n	800503a <HAL_CAN_IRQHandler+0xb2>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005108:	682b      	ldr	r3, [r5, #0]
 800510a:	2210      	movs	r2, #16
 800510c:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 800510e:	4628      	mov	r0, r5
 8005110:	f7ff ff34 	bl	8004f7c <HAL_CAN_SleepCallback>
 8005114:	e796      	b.n	8005044 <HAL_CAN_IRQHandler+0xbc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005116:	682b      	ldr	r3, [r5, #0]
 8005118:	2208      	movs	r2, #8
 800511a:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 800511c:	4628      	mov	r0, r5
 800511e:	f7ff ff2b 	bl	8004f78 <HAL_CAN_RxFifo1FullCallback>
 8005122:	e784      	b.n	800502e <HAL_CAN_IRQHandler+0xa6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005124:	682b      	ldr	r3, [r5, #0]
 8005126:	2208      	movs	r2, #8
 8005128:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 800512a:	4628      	mov	r0, r5
 800512c:	f7ff ff20 	bl	8004f70 <HAL_CAN_RxFifo0FullCallback>
 8005130:	e76c      	b.n	800500c <HAL_CAN_IRQHandler+0x84>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005132:	4628      	mov	r0, r5
 8005134:	f7fb ff74 	bl	8001020 <HAL_CAN_RxFifo0MsgPendingCallback>
 8005138:	e76f      	b.n	800501a <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800513a:	682b      	ldr	r3, [r5, #0]
 800513c:	2208      	movs	r2, #8
 800513e:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005140:	4628      	mov	r0, r5
 8005142:	f7ff ff1d 	bl	8004f80 <HAL_CAN_WakeUpFromRxMsgCallback>
 8005146:	e782      	b.n	800504e <HAL_CAN_IRQHandler+0xc6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005148:	4628      	mov	r0, r5
 800514a:	f7ff ff07 	bl	8004f5c <HAL_CAN_TxMailbox1CompleteCallback>
 800514e:	e744      	b.n	8004fda <HAL_CAN_IRQHandler+0x52>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005150:	f7ff ff02 	bl	8004f58 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005154:	2600      	movs	r6, #0
 8005156:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800515a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800515e:	e72c      	b.n	8004fba <HAL_CAN_IRQHandler+0x32>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005160:	4628      	mov	r0, r5
 8005162:	f7ff fefd 	bl	8004f60 <HAL_CAN_TxMailbox2CompleteCallback>
 8005166:	e746      	b.n	8004ff6 <HAL_CAN_IRQHandler+0x6e>
        switch (esrflags & CAN_ESR_LEC)
 8005168:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 800516c:	d01e      	beq.n	80051ac <HAL_CAN_IRQHandler+0x224>
 800516e:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
            errorcode |= HAL_CAN_ERROR_CRC;
 8005172:	bf08      	it	eq
 8005174:	f446 7680 	orreq.w	r6, r6, #256	; 0x100
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005178:	682b      	ldr	r3, [r5, #0]
 800517a:	699a      	ldr	r2, [r3, #24]
 800517c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005180:	619a      	str	r2, [r3, #24]
 8005182:	e76a      	b.n	800505a <HAL_CAN_IRQHandler+0xd2>
        switch (esrflags & CAN_ESR_LEC)
 8005184:	f1b9 0f10 	cmp.w	r9, #16
 8005188:	d1f6      	bne.n	8005178 <HAL_CAN_IRQHandler+0x1f0>
            errorcode |= HAL_CAN_ERROR_STF;
 800518a:	f046 0608 	orr.w	r6, r6, #8
            break;
 800518e:	e7f3      	b.n	8005178 <HAL_CAN_IRQHandler+0x1f0>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005190:	033b      	lsls	r3, r7, #12
 8005192:	d51c      	bpl.n	80051ce <HAL_CAN_IRQHandler+0x246>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005194:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8005198:	e72d      	b.n	8004ff6 <HAL_CAN_IRQHandler+0x6e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800519a:	4616      	mov	r6, r2
 800519c:	e71d      	b.n	8004fda <HAL_CAN_IRQHandler+0x52>
 800519e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80051a2:	f44f 4190 	mov.w	r1, #18432	; 0x4800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80051a6:	f44f 6600 	mov.w	r6, #2048	; 0x800
 80051aa:	e706      	b.n	8004fba <HAL_CAN_IRQHandler+0x32>
            errorcode |= HAL_CAN_ERROR_BD;
 80051ac:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 80051b0:	e7e2      	b.n	8005178 <HAL_CAN_IRQHandler+0x1f0>
            errorcode |= HAL_CAN_ERROR_FOR;
 80051b2:	f046 0610 	orr.w	r6, r6, #16
            break;
 80051b6:	e7df      	b.n	8005178 <HAL_CAN_IRQHandler+0x1f0>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80051b8:	4628      	mov	r0, r5
 80051ba:	f7ff fed5 	bl	8004f68 <HAL_CAN_TxMailbox1AbortCallback>
 80051be:	e70c      	b.n	8004fda <HAL_CAN_IRQHandler+0x52>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80051c0:	f7ff fed0 	bl	8004f64 <HAL_CAN_TxMailbox0AbortCallback>
 80051c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80051c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051cc:	e6f5      	b.n	8004fba <HAL_CAN_IRQHandler+0x32>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80051ce:	4628      	mov	r0, r5
 80051d0:	f7ff fecc 	bl	8004f6c <HAL_CAN_TxMailbox2AbortCallback>
 80051d4:	e70f      	b.n	8004ff6 <HAL_CAN_IRQHandler+0x6e>
            errorcode |= HAL_CAN_ERROR_BR;
 80051d6:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 80051da:	e7cd      	b.n	8005178 <HAL_CAN_IRQHandler+0x1f0>

080051dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051dc:	4907      	ldr	r1, [pc, #28]	; (80051fc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80051de:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051e0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051e2:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051ea:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051ec:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80051ee:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80051f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80051f6:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	e000ed00 	.word	0xe000ed00

08005200 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005200:	4b1c      	ldr	r3, [pc, #112]	; (8005274 <HAL_NVIC_SetPriority+0x74>)
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005208:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800520a:	f1c3 0e07 	rsb	lr, r3, #7
 800520e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005212:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005216:	bf28      	it	cs
 8005218:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800521c:	f1bc 0f06 	cmp.w	ip, #6
 8005220:	d91b      	bls.n	800525a <HAL_NVIC_SetPriority+0x5a>
 8005222:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005224:	f04f 3cff 	mov.w	ip, #4294967295
 8005228:	fa0c fc03 	lsl.w	ip, ip, r3
 800522c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005230:	f04f 3cff 	mov.w	ip, #4294967295
 8005234:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005238:	ea21 010c 	bic.w	r1, r1, ip
 800523c:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800523e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005240:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8005244:	db0c      	blt.n	8005260 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005246:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800524a:	0109      	lsls	r1, r1, #4
 800524c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005250:	b2c9      	uxtb	r1, r1
 8005252:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005256:	f85d fb04 	ldr.w	pc, [sp], #4
 800525a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800525c:	4613      	mov	r3, r2
 800525e:	e7e7      	b.n	8005230 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005260:	4b05      	ldr	r3, [pc, #20]	; (8005278 <HAL_NVIC_SetPriority+0x78>)
 8005262:	f000 000f 	and.w	r0, r0, #15
 8005266:	0109      	lsls	r1, r1, #4
 8005268:	4403      	add	r3, r0
 800526a:	b2c9      	uxtb	r1, r1
 800526c:	7619      	strb	r1, [r3, #24]
 800526e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005272:	bf00      	nop
 8005274:	e000ed00 	.word	0xe000ed00
 8005278:	e000ecfc 	.word	0xe000ecfc

0800527c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800527c:	2800      	cmp	r0, #0
 800527e:	db08      	blt.n	8005292 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005280:	0941      	lsrs	r1, r0, #5
 8005282:	4a04      	ldr	r2, [pc, #16]	; (8005294 <HAL_NVIC_EnableIRQ+0x18>)
 8005284:	f000 001f 	and.w	r0, r0, #31
 8005288:	2301      	movs	r3, #1
 800528a:	fa03 f000 	lsl.w	r0, r3, r0
 800528e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005292:	4770      	bx	lr
 8005294:	e000e100 	.word	0xe000e100

08005298 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005298:	3801      	subs	r0, #1
 800529a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800529e:	d210      	bcs.n	80052c2 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052a0:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052a6:	4c08      	ldr	r4, [pc, #32]	; (80052c8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052a8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052aa:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 80052ae:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052b2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052b4:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052b6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052b8:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80052ba:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052be:	6119      	str	r1, [r3, #16]
 80052c0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80052c2:	2001      	movs	r0, #1
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	e000ed00 	.word	0xe000ed00

080052cc <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop

080052d0 <HAL_SYSTICK_IRQHandler>:
{
 80052d0:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80052d2:	f7ff fffb 	bl	80052cc <HAL_SYSTICK_Callback>
}
 80052d6:	bd08      	pop	{r3, pc}

080052d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052dc:	2200      	movs	r2, #0
 80052de:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052e0:	f8df a214 	ldr.w	sl, [pc, #532]	; 80054f8 <HAL_GPIO_Init+0x220>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052e4:	4e7d      	ldr	r6, [pc, #500]	; (80054dc <HAL_GPIO_Init+0x204>)
{
 80052e6:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052e8:	4613      	mov	r3, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052ea:	4689      	mov	r9, r1
 80052ec:	e005      	b.n	80052fa <HAL_GPIO_Init+0x22>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052ee:	3301      	adds	r3, #1
 80052f0:	2b10      	cmp	r3, #16
 80052f2:	f102 0202 	add.w	r2, r2, #2
 80052f6:	f000 8084 	beq.w	8005402 <HAL_GPIO_Init+0x12a>
    ioposition = 0x01U << position;
 80052fa:	2101      	movs	r1, #1
 80052fc:	4099      	lsls	r1, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052fe:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8005302:	43a1      	bics	r1, r4
 8005304:	d1f3      	bne.n	80052ee <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005306:	f8d9 c004 	ldr.w	ip, [r9, #4]
 800530a:	f00c 0103 	and.w	r1, ip, #3
 800530e:	1e4d      	subs	r5, r1, #1
 8005310:	2d01      	cmp	r5, #1
 8005312:	d979      	bls.n	8005408 <HAL_GPIO_Init+0x130>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005314:	2903      	cmp	r1, #3
 8005316:	f040 80b9 	bne.w	800548c <HAL_GPIO_Init+0x1b4>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800531a:	4091      	lsls	r1, r2
 800531c:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 800531e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005320:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005322:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005324:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8005328:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800532a:	d0e0      	beq.n	80052ee <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800532c:	2100      	movs	r1, #0
 800532e:	9103      	str	r1, [sp, #12]
 8005330:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 8005334:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8005338:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
 800533c:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 8005340:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8005344:	9103      	str	r1, [sp, #12]
 8005346:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005348:	f023 0103 	bic.w	r1, r3, #3
 800534c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005350:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005354:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8005358:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800535c:	00bf      	lsls	r7, r7, #2
 800535e:	250f      	movs	r5, #15
 8005360:	40bd      	lsls	r5, r7
 8005362:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005366:	4d5e      	ldr	r5, [pc, #376]	; (80054e0 <HAL_GPIO_Init+0x208>)
 8005368:	42a8      	cmp	r0, r5
 800536a:	d01f      	beq.n	80053ac <HAL_GPIO_Init+0xd4>
 800536c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005370:	42a8      	cmp	r0, r5
 8005372:	f000 808f 	beq.w	8005494 <HAL_GPIO_Init+0x1bc>
 8005376:	4d5b      	ldr	r5, [pc, #364]	; (80054e4 <HAL_GPIO_Init+0x20c>)
 8005378:	42a8      	cmp	r0, r5
 800537a:	f000 8092 	beq.w	80054a2 <HAL_GPIO_Init+0x1ca>
 800537e:	4d5a      	ldr	r5, [pc, #360]	; (80054e8 <HAL_GPIO_Init+0x210>)
 8005380:	42a8      	cmp	r0, r5
 8005382:	f000 8095 	beq.w	80054b0 <HAL_GPIO_Init+0x1d8>
 8005386:	4d59      	ldr	r5, [pc, #356]	; (80054ec <HAL_GPIO_Init+0x214>)
 8005388:	42a8      	cmp	r0, r5
 800538a:	f000 8098 	beq.w	80054be <HAL_GPIO_Init+0x1e6>
 800538e:	4d58      	ldr	r5, [pc, #352]	; (80054f0 <HAL_GPIO_Init+0x218>)
 8005390:	42a8      	cmp	r0, r5
 8005392:	f000 809b 	beq.w	80054cc <HAL_GPIO_Init+0x1f4>
 8005396:	4d57      	ldr	r5, [pc, #348]	; (80054f4 <HAL_GPIO_Init+0x21c>)
 8005398:	42a8      	cmp	r0, r5
 800539a:	bf0c      	ite	eq
 800539c:	f04f 0e06 	moveq.w	lr, #6
 80053a0:	f04f 0e07 	movne.w	lr, #7
 80053a4:	fa0e f707 	lsl.w	r7, lr, r7
 80053a8:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053ac:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->IMR;
 80053b0:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 80053b2:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053b6:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80053ba:	bf0c      	ite	eq
 80053bc:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 80053be:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->IMR = temp;
 80053c2:	6031      	str	r1, [r6, #0]

        temp = EXTI->EMR;
 80053c4:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053c6:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80053ca:	bf0c      	ite	eq
 80053cc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80053ce:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 80053d2:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053d4:	68b5      	ldr	r5, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053d6:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80053da:	bf0c      	ite	eq
 80053dc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80053de:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->RTSR = temp;
 80053e2:	60b5      	str	r5, [r6, #8]

        temp = EXTI->FTSR;
 80053e4:	68f1      	ldr	r1, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053e6:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053ea:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 80053ee:	bf0c      	ite	eq
 80053f0:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 80053f2:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053f6:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 80053f8:	60f1      	str	r1, [r6, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053fa:	f102 0202 	add.w	r2, r2, #2
 80053fe:	f47f af7c 	bne.w	80052fa <HAL_GPIO_Init+0x22>
      }
    }
  }
}
 8005402:	b005      	add	sp, #20
 8005404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005408:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 800540c:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800540e:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005412:	2503      	movs	r5, #3
 8005414:	fa05 fe02 	lsl.w	lr, r5, r2
 8005418:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 800541c:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 8005420:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8005422:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005424:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005428:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800542c:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8005430:	409f      	lsls	r7, r3
 8005432:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8005436:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8005438:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800543a:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800543e:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8005442:	4097      	lsls	r7, r2
 8005444:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005448:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 800544a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800544c:	fa01 f102 	lsl.w	r1, r1, r2
 8005450:	f47f af65 	bne.w	800531e <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3U];
 8005454:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8005458:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800545c:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8005460:	f8de 7020 	ldr.w	r7, [lr, #32]
 8005464:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005466:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800546a:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800546e:	fa07 f708 	lsl.w	r7, r7, r8
 8005472:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005474:	270f      	movs	r7, #15
 8005476:	fa07 f808 	lsl.w	r8, r7, r8
 800547a:	9f00      	ldr	r7, [sp, #0]
 800547c:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005480:	9f01      	ldr	r7, [sp, #4]
 8005482:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8005486:	f8ce 7020 	str.w	r7, [lr, #32]
 800548a:	e748      	b.n	800531e <HAL_GPIO_Init+0x46>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800548c:	2503      	movs	r5, #3
 800548e:	4095      	lsls	r5, r2
 8005490:	43ed      	mvns	r5, r5
 8005492:	e7d1      	b.n	8005438 <HAL_GPIO_Init+0x160>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005494:	f04f 0e01 	mov.w	lr, #1
 8005498:	fa0e f707 	lsl.w	r7, lr, r7
 800549c:	ea48 0807 	orr.w	r8, r8, r7
 80054a0:	e784      	b.n	80053ac <HAL_GPIO_Init+0xd4>
 80054a2:	f04f 0e02 	mov.w	lr, #2
 80054a6:	fa0e f707 	lsl.w	r7, lr, r7
 80054aa:	ea48 0807 	orr.w	r8, r8, r7
 80054ae:	e77d      	b.n	80053ac <HAL_GPIO_Init+0xd4>
 80054b0:	f04f 0e03 	mov.w	lr, #3
 80054b4:	fa0e f707 	lsl.w	r7, lr, r7
 80054b8:	ea48 0807 	orr.w	r8, r8, r7
 80054bc:	e776      	b.n	80053ac <HAL_GPIO_Init+0xd4>
 80054be:	f04f 0e04 	mov.w	lr, #4
 80054c2:	fa0e f707 	lsl.w	r7, lr, r7
 80054c6:	ea48 0807 	orr.w	r8, r8, r7
 80054ca:	e76f      	b.n	80053ac <HAL_GPIO_Init+0xd4>
 80054cc:	f04f 0e05 	mov.w	lr, #5
 80054d0:	fa0e f707 	lsl.w	r7, lr, r7
 80054d4:	ea48 0807 	orr.w	r8, r8, r7
 80054d8:	e768      	b.n	80053ac <HAL_GPIO_Init+0xd4>
 80054da:	bf00      	nop
 80054dc:	40013c00 	.word	0x40013c00
 80054e0:	40020000 	.word	0x40020000
 80054e4:	40020800 	.word	0x40020800
 80054e8:	40020c00 	.word	0x40020c00
 80054ec:	40021000 	.word	0x40021000
 80054f0:	40021400 	.word	0x40021400
 80054f4:	40021800 	.word	0x40021800
 80054f8:	40023800 	.word	0x40023800

080054fc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80054fc:	6903      	ldr	r3, [r0, #16]
 80054fe:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8005500:	bf14      	ite	ne
 8005502:	2001      	movne	r0, #1
 8005504:	2000      	moveq	r0, #0
 8005506:	4770      	bx	lr

08005508 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005508:	b902      	cbnz	r2, 800550c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800550a:	0409      	lsls	r1, r1, #16
 800550c:	6181      	str	r1, [r0, #24]
  }
}
 800550e:	4770      	bx	lr

08005510 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005510:	b530      	push	{r4, r5, lr}
 8005512:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8005514:	4b19      	ldr	r3, [pc, #100]	; (800557c <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005516:	491a      	ldr	r1, [pc, #104]	; (8005580 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005518:	4d1a      	ldr	r5, [pc, #104]	; (8005584 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800551a:	2200      	movs	r2, #0
 800551c:	9201      	str	r2, [sp, #4]
 800551e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005520:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005524:	641a      	str	r2, [r3, #64]	; 0x40
 8005526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800552c:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800552e:	2201      	movs	r2, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8005530:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005532:	640a      	str	r2, [r1, #64]	; 0x40
  tickstart = HAL_GetTick();
 8005534:	f7ff f86c 	bl	8004610 <HAL_GetTick>
 8005538:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800553a:	e005      	b.n	8005548 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800553c:	f7ff f868 	bl	8004610 <HAL_GetTick>
 8005540:	1b00      	subs	r0, r0, r4
 8005542:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005546:	d816      	bhi.n	8005576 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005548:	686b      	ldr	r3, [r5, #4]
 800554a:	03da      	lsls	r2, r3, #15
 800554c:	d5f6      	bpl.n	800553c <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800554e:	4b0c      	ldr	r3, [pc, #48]	; (8005580 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005550:	4d0c      	ldr	r5, [pc, #48]	; (8005584 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005552:	2201      	movs	r2, #1
 8005554:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 8005556:	f7ff f85b 	bl	8004610 <HAL_GetTick>
 800555a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800555c:	e005      	b.n	800556a <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800555e:	f7ff f857 	bl	8004610 <HAL_GetTick>
 8005562:	1b00      	subs	r0, r0, r4
 8005564:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005568:	d805      	bhi.n	8005576 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800556a:	686b      	ldr	r3, [r5, #4]
 800556c:	039b      	lsls	r3, r3, #14
 800556e:	d5f6      	bpl.n	800555e <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8005570:	2000      	movs	r0, #0
}
 8005572:	b003      	add	sp, #12
 8005574:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8005576:	2003      	movs	r0, #3
}
 8005578:	b003      	add	sp, #12
 800557a:	bd30      	pop	{r4, r5, pc}
 800557c:	40023800 	.word	0x40023800
 8005580:	420e0000 	.word	0x420e0000
 8005584:	40007000 	.word	0x40007000

08005588 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005588:	2800      	cmp	r0, #0
 800558a:	f000 8087 	beq.w	800569c <HAL_RCC_ClockConfig+0x114>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800558e:	4a48      	ldr	r2, [pc, #288]	; (80056b0 <HAL_RCC_ClockConfig+0x128>)
 8005590:	6813      	ldr	r3, [r2, #0]
 8005592:	f003 030f 	and.w	r3, r3, #15
 8005596:	428b      	cmp	r3, r1
{
 8005598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800559c:	460d      	mov	r5, r1
 800559e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055a0:	d209      	bcs.n	80055b6 <HAL_RCC_ClockConfig+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055a2:	b2cb      	uxtb	r3, r1
 80055a4:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055a6:	6813      	ldr	r3, [r2, #0]
 80055a8:	f003 030f 	and.w	r3, r3, #15
 80055ac:	428b      	cmp	r3, r1
 80055ae:	d002      	beq.n	80055b6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80055b0:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 80055b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	0798      	lsls	r0, r3, #30
 80055ba:	d514      	bpl.n	80055e6 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055bc:	0759      	lsls	r1, r3, #29
 80055be:	d504      	bpl.n	80055ca <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055c0:	493c      	ldr	r1, [pc, #240]	; (80056b4 <HAL_RCC_ClockConfig+0x12c>)
 80055c2:	688a      	ldr	r2, [r1, #8]
 80055c4:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80055c8:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ca:	071a      	lsls	r2, r3, #28
 80055cc:	d504      	bpl.n	80055d8 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055ce:	4939      	ldr	r1, [pc, #228]	; (80056b4 <HAL_RCC_ClockConfig+0x12c>)
 80055d0:	688a      	ldr	r2, [r1, #8]
 80055d2:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80055d6:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055d8:	4936      	ldr	r1, [pc, #216]	; (80056b4 <HAL_RCC_ClockConfig+0x12c>)
 80055da:	68a0      	ldr	r0, [r4, #8]
 80055dc:	688a      	ldr	r2, [r1, #8]
 80055de:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80055e2:	4302      	orrs	r2, r0
 80055e4:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055e6:	07df      	lsls	r7, r3, #31
 80055e8:	d521      	bpl.n	800562e <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055ea:	6862      	ldr	r2, [r4, #4]
 80055ec:	2a01      	cmp	r2, #1
 80055ee:	d057      	beq.n	80056a0 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055f0:	1e93      	subs	r3, r2, #2
 80055f2:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055f4:	4b2f      	ldr	r3, [pc, #188]	; (80056b4 <HAL_RCC_ClockConfig+0x12c>)
 80055f6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055f8:	d94d      	bls.n	8005696 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055fa:	0799      	lsls	r1, r3, #30
 80055fc:	d5d8      	bpl.n	80055b0 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055fe:	4e2d      	ldr	r6, [pc, #180]	; (80056b4 <HAL_RCC_ClockConfig+0x12c>)
 8005600:	68b3      	ldr	r3, [r6, #8]
 8005602:	f023 0303 	bic.w	r3, r3, #3
 8005606:	4313      	orrs	r3, r2
 8005608:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800560a:	f7ff f801 	bl	8004610 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800560e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8005612:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005614:	e004      	b.n	8005620 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005616:	f7fe fffb 	bl	8004610 <HAL_GetTick>
 800561a:	1bc0      	subs	r0, r0, r7
 800561c:	4540      	cmp	r0, r8
 800561e:	d844      	bhi.n	80056aa <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005620:	68b3      	ldr	r3, [r6, #8]
 8005622:	6862      	ldr	r2, [r4, #4]
 8005624:	f003 030c 	and.w	r3, r3, #12
 8005628:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800562c:	d1f3      	bne.n	8005616 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800562e:	4a20      	ldr	r2, [pc, #128]	; (80056b0 <HAL_RCC_ClockConfig+0x128>)
 8005630:	6813      	ldr	r3, [r2, #0]
 8005632:	f003 030f 	and.w	r3, r3, #15
 8005636:	42ab      	cmp	r3, r5
 8005638:	d906      	bls.n	8005648 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800563a:	b2eb      	uxtb	r3, r5
 800563c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800563e:	6813      	ldr	r3, [r2, #0]
 8005640:	f003 030f 	and.w	r3, r3, #15
 8005644:	42ab      	cmp	r3, r5
 8005646:	d1b3      	bne.n	80055b0 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	075a      	lsls	r2, r3, #29
 800564c:	d506      	bpl.n	800565c <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800564e:	4919      	ldr	r1, [pc, #100]	; (80056b4 <HAL_RCC_ClockConfig+0x12c>)
 8005650:	68e0      	ldr	r0, [r4, #12]
 8005652:	688a      	ldr	r2, [r1, #8]
 8005654:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8005658:	4302      	orrs	r2, r0
 800565a:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800565c:	071b      	lsls	r3, r3, #28
 800565e:	d507      	bpl.n	8005670 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005660:	4a14      	ldr	r2, [pc, #80]	; (80056b4 <HAL_RCC_ClockConfig+0x12c>)
 8005662:	6921      	ldr	r1, [r4, #16]
 8005664:	6893      	ldr	r3, [r2, #8]
 8005666:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800566a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800566e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005670:	f000 f848 	bl	8005704 <HAL_RCC_GetSysClockFreq>
 8005674:	4a0f      	ldr	r2, [pc, #60]	; (80056b4 <HAL_RCC_ClockConfig+0x12c>)
 8005676:	4c10      	ldr	r4, [pc, #64]	; (80056b8 <HAL_RCC_ClockConfig+0x130>)
 8005678:	6892      	ldr	r2, [r2, #8]
 800567a:	4910      	ldr	r1, [pc, #64]	; (80056bc <HAL_RCC_ClockConfig+0x134>)
 800567c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005680:	4603      	mov	r3, r0
 8005682:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8005684:	480e      	ldr	r0, [pc, #56]	; (80056c0 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005686:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8005688:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800568a:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 800568c:	f7fe ff76 	bl	800457c <HAL_InitTick>
  return HAL_OK;
 8005690:	2000      	movs	r0, #0
}
 8005692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005696:	0198      	lsls	r0, r3, #6
 8005698:	d4b1      	bmi.n	80055fe <HAL_RCC_ClockConfig+0x76>
 800569a:	e789      	b.n	80055b0 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 800569c:	2001      	movs	r0, #1
}
 800569e:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056a0:	4b04      	ldr	r3, [pc, #16]	; (80056b4 <HAL_RCC_ClockConfig+0x12c>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	039e      	lsls	r6, r3, #14
 80056a6:	d4aa      	bmi.n	80055fe <HAL_RCC_ClockConfig+0x76>
 80056a8:	e782      	b.n	80055b0 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 80056aa:	2003      	movs	r0, #3
 80056ac:	e781      	b.n	80055b2 <HAL_RCC_ClockConfig+0x2a>
 80056ae:	bf00      	nop
 80056b0:	40023c00 	.word	0x40023c00
 80056b4:	40023800 	.word	0x40023800
 80056b8:	080092d4 	.word	0x080092d4
 80056bc:	200004a0 	.word	0x200004a0
 80056c0:	200004a8 	.word	0x200004a8

080056c4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056c4:	4b04      	ldr	r3, [pc, #16]	; (80056d8 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80056c6:	4905      	ldr	r1, [pc, #20]	; (80056dc <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	4a05      	ldr	r2, [pc, #20]	; (80056e0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80056cc:	6808      	ldr	r0, [r1, #0]
 80056ce:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80056d2:	5cd3      	ldrb	r3, [r2, r3]
}
 80056d4:	40d8      	lsrs	r0, r3
 80056d6:	4770      	bx	lr
 80056d8:	40023800 	.word	0x40023800
 80056dc:	200004a0 	.word	0x200004a0
 80056e0:	080092e4 	.word	0x080092e4

080056e4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056e4:	4b04      	ldr	r3, [pc, #16]	; (80056f8 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80056e6:	4905      	ldr	r1, [pc, #20]	; (80056fc <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	4a05      	ldr	r2, [pc, #20]	; (8005700 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80056ec:	6808      	ldr	r0, [r1, #0]
 80056ee:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80056f2:	5cd3      	ldrb	r3, [r2, r3]
}
 80056f4:	40d8      	lsrs	r0, r3
 80056f6:	4770      	bx	lr
 80056f8:	40023800 	.word	0x40023800
 80056fc:	200004a0 	.word	0x200004a0
 8005700:	080092e4 	.word	0x080092e4

08005704 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005704:	4927      	ldr	r1, [pc, #156]	; (80057a4 <HAL_RCC_GetSysClockFreq+0xa0>)
{
 8005706:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005708:	688b      	ldr	r3, [r1, #8]
 800570a:	f003 030c 	and.w	r3, r3, #12
 800570e:	2b08      	cmp	r3, #8
 8005710:	d007      	beq.n	8005722 <HAL_RCC_GetSysClockFreq+0x1e>
 8005712:	2b0c      	cmp	r3, #12
 8005714:	d01d      	beq.n	8005752 <HAL_RCC_GetSysClockFreq+0x4e>
 8005716:	4a24      	ldr	r2, [pc, #144]	; (80057a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005718:	4824      	ldr	r0, [pc, #144]	; (80057ac <HAL_RCC_GetSysClockFreq+0xa8>)
 800571a:	2b04      	cmp	r3, #4
 800571c:	bf08      	it	eq
 800571e:	4610      	moveq	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005720:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005722:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005724:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005726:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005728:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800572c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005730:	d12e      	bne.n	8005790 <HAL_RCC_GetSysClockFreq+0x8c>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005732:	481e      	ldr	r0, [pc, #120]	; (80057ac <HAL_RCC_GetSysClockFreq+0xa8>)
 8005734:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005738:	fba1 0100 	umull	r0, r1, r1, r0
 800573c:	f7fb fac4 	bl	8000cc8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005740:	4b18      	ldr	r3, [pc, #96]	; (80057a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005748:	3301      	adds	r3, #1
 800574a:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800574c:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8005750:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005752:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005754:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005756:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005758:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800575c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005760:	d10d      	bne.n	800577e <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005762:	4812      	ldr	r0, [pc, #72]	; (80057ac <HAL_RCC_GetSysClockFreq+0xa8>)
 8005764:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005768:	fba1 0100 	umull	r0, r1, r1, r0
 800576c:	f7fb faac 	bl	8000cc8 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005770:	4b0c      	ldr	r3, [pc, #48]	; (80057a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 8005778:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800577c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800577e:	480a      	ldr	r0, [pc, #40]	; (80057a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005780:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005784:	2300      	movs	r3, #0
 8005786:	fba1 0100 	umull	r0, r1, r1, r0
 800578a:	f7fb fa9d 	bl	8000cc8 <__aeabi_uldivmod>
 800578e:	e7ef      	b.n	8005770 <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005790:	4805      	ldr	r0, [pc, #20]	; (80057a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005792:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005796:	2300      	movs	r3, #0
 8005798:	fba1 0100 	umull	r0, r1, r1, r0
 800579c:	f7fb fa94 	bl	8000cc8 <__aeabi_uldivmod>
 80057a0:	e7ce      	b.n	8005740 <HAL_RCC_GetSysClockFreq+0x3c>
 80057a2:	bf00      	nop
 80057a4:	40023800 	.word	0x40023800
 80057a8:	007a1200 	.word	0x007a1200
 80057ac:	00f42400 	.word	0x00f42400

080057b0 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057b0:	2800      	cmp	r0, #0
 80057b2:	f000 81b3 	beq.w	8005b1c <HAL_RCC_OscConfig+0x36c>
{
 80057b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057ba:	6803      	ldr	r3, [r0, #0]
 80057bc:	07da      	lsls	r2, r3, #31
{
 80057be:	b082      	sub	sp, #8
 80057c0:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057c2:	d536      	bpl.n	8005832 <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80057c4:	49a2      	ldr	r1, [pc, #648]	; (8005a50 <HAL_RCC_OscConfig+0x2a0>)
 80057c6:	688a      	ldr	r2, [r1, #8]
 80057c8:	f002 020c 	and.w	r2, r2, #12
 80057cc:	2a04      	cmp	r2, #4
 80057ce:	f000 80df 	beq.w	8005990 <HAL_RCC_OscConfig+0x1e0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80057d2:	688a      	ldr	r2, [r1, #8]
 80057d4:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80057d8:	2a08      	cmp	r2, #8
 80057da:	f000 80d5 	beq.w	8005988 <HAL_RCC_OscConfig+0x1d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057de:	499c      	ldr	r1, [pc, #624]	; (8005a50 <HAL_RCC_OscConfig+0x2a0>)
 80057e0:	688a      	ldr	r2, [r1, #8]
 80057e2:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80057e6:	2a0c      	cmp	r2, #12
 80057e8:	f000 8105 	beq.w	80059f6 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057ec:	6863      	ldr	r3, [r4, #4]
 80057ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057f2:	f000 8119 	beq.w	8005a28 <HAL_RCC_OscConfig+0x278>
 80057f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057fa:	f000 8196 	beq.w	8005b2a <HAL_RCC_OscConfig+0x37a>
 80057fe:	4d94      	ldr	r5, [pc, #592]	; (8005a50 <HAL_RCC_OscConfig+0x2a0>)
 8005800:	682a      	ldr	r2, [r5, #0]
 8005802:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005806:	602a      	str	r2, [r5, #0]
 8005808:	682a      	ldr	r2, [r5, #0]
 800580a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800580e:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005810:	2b00      	cmp	r3, #0
 8005812:	f040 810e 	bne.w	8005a32 <HAL_RCC_OscConfig+0x282>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005816:	f7fe fefb 	bl	8004610 <HAL_GetTick>
 800581a:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800581c:	e005      	b.n	800582a <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800581e:	f7fe fef7 	bl	8004610 <HAL_GetTick>
 8005822:	1b80      	subs	r0, r0, r6
 8005824:	2864      	cmp	r0, #100	; 0x64
 8005826:	f200 80fb 	bhi.w	8005a20 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800582a:	682b      	ldr	r3, [r5, #0]
 800582c:	0399      	lsls	r1, r3, #14
 800582e:	d4f6      	bmi.n	800581e <HAL_RCC_OscConfig+0x6e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	079a      	lsls	r2, r3, #30
 8005834:	d52f      	bpl.n	8005896 <HAL_RCC_OscConfig+0xe6>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005836:	4a86      	ldr	r2, [pc, #536]	; (8005a50 <HAL_RCC_OscConfig+0x2a0>)
 8005838:	6891      	ldr	r1, [r2, #8]
 800583a:	f011 0f0c 	tst.w	r1, #12
 800583e:	f000 8098 	beq.w	8005972 <HAL_RCC_OscConfig+0x1c2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005842:	6891      	ldr	r1, [r2, #8]
 8005844:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005848:	2908      	cmp	r1, #8
 800584a:	f000 808e 	beq.w	800596a <HAL_RCC_OscConfig+0x1ba>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800584e:	4980      	ldr	r1, [pc, #512]	; (8005a50 <HAL_RCC_OscConfig+0x2a0>)
 8005850:	688a      	ldr	r2, [r1, #8]
 8005852:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005856:	2a0c      	cmp	r2, #12
 8005858:	f000 8162 	beq.w	8005b20 <HAL_RCC_OscConfig+0x370>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800585c:	68e3      	ldr	r3, [r4, #12]
 800585e:	2b00      	cmp	r3, #0
 8005860:	f000 8114 	beq.w	8005a8c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005864:	4b7b      	ldr	r3, [pc, #492]	; (8005a54 <HAL_RCC_OscConfig+0x2a4>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005866:	4e7a      	ldr	r6, [pc, #488]	; (8005a50 <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_HSI_ENABLE();
 8005868:	2201      	movs	r2, #1
 800586a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800586c:	f7fe fed0 	bl	8004610 <HAL_GetTick>
 8005870:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005872:	e005      	b.n	8005880 <HAL_RCC_OscConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005874:	f7fe fecc 	bl	8004610 <HAL_GetTick>
 8005878:	1b40      	subs	r0, r0, r5
 800587a:	2802      	cmp	r0, #2
 800587c:	f200 80d0 	bhi.w	8005a20 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005880:	6833      	ldr	r3, [r6, #0]
 8005882:	0798      	lsls	r0, r3, #30
 8005884:	d5f6      	bpl.n	8005874 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005886:	6833      	ldr	r3, [r6, #0]
 8005888:	6922      	ldr	r2, [r4, #16]
 800588a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800588e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005892:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	071a      	lsls	r2, r3, #28
 8005898:	d451      	bmi.n	800593e <HAL_RCC_OscConfig+0x18e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800589a:	0758      	lsls	r0, r3, #29
 800589c:	d530      	bpl.n	8005900 <HAL_RCC_OscConfig+0x150>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800589e:	4a6c      	ldr	r2, [pc, #432]	; (8005a50 <HAL_RCC_OscConfig+0x2a0>)
 80058a0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80058a2:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 80058a6:	f000 809a 	beq.w	80059de <HAL_RCC_OscConfig+0x22e>
    FlagStatus       pwrclkchanged = RESET;
 80058aa:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ac:	4e6a      	ldr	r6, [pc, #424]	; (8005a58 <HAL_RCC_OscConfig+0x2a8>)
 80058ae:	6833      	ldr	r3, [r6, #0]
 80058b0:	05d9      	lsls	r1, r3, #23
 80058b2:	f140 80a5 	bpl.w	8005a00 <HAL_RCC_OscConfig+0x250>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058b6:	68a3      	ldr	r3, [r4, #8]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	f000 80cf 	beq.w	8005a5c <HAL_RCC_OscConfig+0x2ac>
 80058be:	2b05      	cmp	r3, #5
 80058c0:	f000 813d 	beq.w	8005b3e <HAL_RCC_OscConfig+0x38e>
 80058c4:	4e62      	ldr	r6, [pc, #392]	; (8005a50 <HAL_RCC_OscConfig+0x2a0>)
 80058c6:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80058c8:	f022 0201 	bic.w	r2, r2, #1
 80058cc:	6732      	str	r2, [r6, #112]	; 0x70
 80058ce:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80058d0:	f022 0204 	bic.w	r2, r2, #4
 80058d4:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f040 80c5 	bne.w	8005a66 <HAL_RCC_OscConfig+0x2b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058dc:	f7fe fe98 	bl	8004610 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058e0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80058e4:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058e6:	e005      	b.n	80058f4 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058e8:	f7fe fe92 	bl	8004610 <HAL_GetTick>
 80058ec:	1bc0      	subs	r0, r0, r7
 80058ee:	4540      	cmp	r0, r8
 80058f0:	f200 8096 	bhi.w	8005a20 <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058f4:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80058f6:	0798      	lsls	r0, r3, #30
 80058f8:	d4f6      	bmi.n	80058e8 <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058fa:	2d00      	cmp	r5, #0
 80058fc:	f040 8108 	bne.w	8005b10 <HAL_RCC_OscConfig+0x360>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005900:	69a0      	ldr	r0, [r4, #24]
 8005902:	b1c0      	cbz	r0, 8005936 <HAL_RCC_OscConfig+0x186>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005904:	4d52      	ldr	r5, [pc, #328]	; (8005a50 <HAL_RCC_OscConfig+0x2a0>)
 8005906:	68ab      	ldr	r3, [r5, #8]
 8005908:	f003 030c 	and.w	r3, r3, #12
 800590c:	2b08      	cmp	r3, #8
 800590e:	f000 80ce 	beq.w	8005aae <HAL_RCC_OscConfig+0x2fe>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005912:	4b50      	ldr	r3, [pc, #320]	; (8005a54 <HAL_RCC_OscConfig+0x2a4>)
 8005914:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005916:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005918:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800591a:	f000 811a 	beq.w	8005b52 <HAL_RCC_OscConfig+0x3a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800591e:	f7fe fe77 	bl	8004610 <HAL_GetTick>
 8005922:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005924:	e004      	b.n	8005930 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005926:	f7fe fe73 	bl	8004610 <HAL_GetTick>
 800592a:	1b00      	subs	r0, r0, r4
 800592c:	2802      	cmp	r0, #2
 800592e:	d877      	bhi.n	8005a20 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005930:	682b      	ldr	r3, [r5, #0]
 8005932:	019b      	lsls	r3, r3, #6
 8005934:	d4f7      	bmi.n	8005926 <HAL_RCC_OscConfig+0x176>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005936:	2000      	movs	r0, #0
}
 8005938:	b002      	add	sp, #8
 800593a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800593e:	6963      	ldr	r3, [r4, #20]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d02f      	beq.n	80059a4 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_LSI_ENABLE();
 8005944:	4b43      	ldr	r3, [pc, #268]	; (8005a54 <HAL_RCC_OscConfig+0x2a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005946:	4e42      	ldr	r6, [pc, #264]	; (8005a50 <HAL_RCC_OscConfig+0x2a0>)
      __HAL_RCC_LSI_ENABLE();
 8005948:	2201      	movs	r2, #1
 800594a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800594e:	f7fe fe5f 	bl	8004610 <HAL_GetTick>
 8005952:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005954:	e004      	b.n	8005960 <HAL_RCC_OscConfig+0x1b0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005956:	f7fe fe5b 	bl	8004610 <HAL_GetTick>
 800595a:	1b40      	subs	r0, r0, r5
 800595c:	2802      	cmp	r0, #2
 800595e:	d85f      	bhi.n	8005a20 <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005960:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8005962:	079b      	lsls	r3, r3, #30
 8005964:	d5f7      	bpl.n	8005956 <HAL_RCC_OscConfig+0x1a6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	e797      	b.n	800589a <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800596a:	6852      	ldr	r2, [r2, #4]
 800596c:	0257      	lsls	r7, r2, #9
 800596e:	f53f af6e 	bmi.w	800584e <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005972:	4a37      	ldr	r2, [pc, #220]	; (8005a50 <HAL_RCC_OscConfig+0x2a0>)
 8005974:	6812      	ldr	r2, [r2, #0]
 8005976:	0795      	lsls	r5, r2, #30
 8005978:	d525      	bpl.n	80059c6 <HAL_RCC_OscConfig+0x216>
 800597a:	68e2      	ldr	r2, [r4, #12]
 800597c:	2a01      	cmp	r2, #1
 800597e:	d022      	beq.n	80059c6 <HAL_RCC_OscConfig+0x216>
        return HAL_ERROR;
 8005980:	2001      	movs	r0, #1
}
 8005982:	b002      	add	sp, #8
 8005984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005988:	684a      	ldr	r2, [r1, #4]
 800598a:	0257      	lsls	r7, r2, #9
 800598c:	f57f af27 	bpl.w	80057de <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005990:	4a2f      	ldr	r2, [pc, #188]	; (8005a50 <HAL_RCC_OscConfig+0x2a0>)
 8005992:	6812      	ldr	r2, [r2, #0]
 8005994:	0395      	lsls	r5, r2, #14
 8005996:	f57f af4c 	bpl.w	8005832 <HAL_RCC_OscConfig+0x82>
 800599a:	6862      	ldr	r2, [r4, #4]
 800599c:	2a00      	cmp	r2, #0
 800599e:	f47f af48 	bne.w	8005832 <HAL_RCC_OscConfig+0x82>
 80059a2:	e7ed      	b.n	8005980 <HAL_RCC_OscConfig+0x1d0>
      __HAL_RCC_LSI_DISABLE();
 80059a4:	4a2b      	ldr	r2, [pc, #172]	; (8005a54 <HAL_RCC_OscConfig+0x2a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059a6:	4e2a      	ldr	r6, [pc, #168]	; (8005a50 <HAL_RCC_OscConfig+0x2a0>)
      __HAL_RCC_LSI_DISABLE();
 80059a8:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80059ac:	f7fe fe30 	bl	8004610 <HAL_GetTick>
 80059b0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059b2:	e004      	b.n	80059be <HAL_RCC_OscConfig+0x20e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059b4:	f7fe fe2c 	bl	8004610 <HAL_GetTick>
 80059b8:	1b40      	subs	r0, r0, r5
 80059ba:	2802      	cmp	r0, #2
 80059bc:	d830      	bhi.n	8005a20 <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059be:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80059c0:	079f      	lsls	r7, r3, #30
 80059c2:	d4f7      	bmi.n	80059b4 <HAL_RCC_OscConfig+0x204>
 80059c4:	e7cf      	b.n	8005966 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059c6:	4922      	ldr	r1, [pc, #136]	; (8005a50 <HAL_RCC_OscConfig+0x2a0>)
 80059c8:	6920      	ldr	r0, [r4, #16]
 80059ca:	680a      	ldr	r2, [r1, #0]
 80059cc:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80059d0:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80059d4:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059d6:	071a      	lsls	r2, r3, #28
 80059d8:	f57f af5f 	bpl.w	800589a <HAL_RCC_OscConfig+0xea>
 80059dc:	e7af      	b.n	800593e <HAL_RCC_OscConfig+0x18e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80059de:	9301      	str	r3, [sp, #4]
 80059e0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80059e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059e6:	6413      	str	r3, [r2, #64]	; 0x40
 80059e8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80059ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ee:	9301      	str	r3, [sp, #4]
 80059f0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80059f2:	2501      	movs	r5, #1
 80059f4:	e75a      	b.n	80058ac <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059f6:	684a      	ldr	r2, [r1, #4]
 80059f8:	0256      	lsls	r6, r2, #9
 80059fa:	f57f aef7 	bpl.w	80057ec <HAL_RCC_OscConfig+0x3c>
 80059fe:	e7c7      	b.n	8005990 <HAL_RCC_OscConfig+0x1e0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a00:	6833      	ldr	r3, [r6, #0]
 8005a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a06:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005a08:	f7fe fe02 	bl	8004610 <HAL_GetTick>
 8005a0c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a0e:	6833      	ldr	r3, [r6, #0]
 8005a10:	05da      	lsls	r2, r3, #23
 8005a12:	f53f af50 	bmi.w	80058b6 <HAL_RCC_OscConfig+0x106>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a16:	f7fe fdfb 	bl	8004610 <HAL_GetTick>
 8005a1a:	1bc0      	subs	r0, r0, r7
 8005a1c:	2802      	cmp	r0, #2
 8005a1e:	d9f6      	bls.n	8005a0e <HAL_RCC_OscConfig+0x25e>
            return HAL_TIMEOUT;
 8005a20:	2003      	movs	r0, #3
}
 8005a22:	b002      	add	sp, #8
 8005a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a28:	4a09      	ldr	r2, [pc, #36]	; (8005a50 <HAL_RCC_OscConfig+0x2a0>)
 8005a2a:	6813      	ldr	r3, [r2, #0]
 8005a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a30:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005a32:	f7fe fded 	bl	8004610 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a36:	4e06      	ldr	r6, [pc, #24]	; (8005a50 <HAL_RCC_OscConfig+0x2a0>)
        tickstart = HAL_GetTick();
 8005a38:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a3a:	e004      	b.n	8005a46 <HAL_RCC_OscConfig+0x296>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a3c:	f7fe fde8 	bl	8004610 <HAL_GetTick>
 8005a40:	1b40      	subs	r0, r0, r5
 8005a42:	2864      	cmp	r0, #100	; 0x64
 8005a44:	d8ec      	bhi.n	8005a20 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a46:	6833      	ldr	r3, [r6, #0]
 8005a48:	0398      	lsls	r0, r3, #14
 8005a4a:	d5f7      	bpl.n	8005a3c <HAL_RCC_OscConfig+0x28c>
 8005a4c:	e6f0      	b.n	8005830 <HAL_RCC_OscConfig+0x80>
 8005a4e:	bf00      	nop
 8005a50:	40023800 	.word	0x40023800
 8005a54:	42470000 	.word	0x42470000
 8005a58:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a5c:	4a55      	ldr	r2, [pc, #340]	; (8005bb4 <HAL_RCC_OscConfig+0x404>)
 8005a5e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8005a60:	f043 0301 	orr.w	r3, r3, #1
 8005a64:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8005a66:	f7fe fdd3 	bl	8004610 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a6a:	4f52      	ldr	r7, [pc, #328]	; (8005bb4 <HAL_RCC_OscConfig+0x404>)
      tickstart = HAL_GetTick();
 8005a6c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a6e:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a72:	e004      	b.n	8005a7e <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a74:	f7fe fdcc 	bl	8004610 <HAL_GetTick>
 8005a78:	1b80      	subs	r0, r0, r6
 8005a7a:	4540      	cmp	r0, r8
 8005a7c:	d8d0      	bhi.n	8005a20 <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a80:	079b      	lsls	r3, r3, #30
 8005a82:	d5f7      	bpl.n	8005a74 <HAL_RCC_OscConfig+0x2c4>
    if(pwrclkchanged == SET)
 8005a84:	2d00      	cmp	r5, #0
 8005a86:	f43f af3b 	beq.w	8005900 <HAL_RCC_OscConfig+0x150>
 8005a8a:	e041      	b.n	8005b10 <HAL_RCC_OscConfig+0x360>
        __HAL_RCC_HSI_DISABLE();
 8005a8c:	4a4a      	ldr	r2, [pc, #296]	; (8005bb8 <HAL_RCC_OscConfig+0x408>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a8e:	4e49      	ldr	r6, [pc, #292]	; (8005bb4 <HAL_RCC_OscConfig+0x404>)
        __HAL_RCC_HSI_DISABLE();
 8005a90:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005a92:	f7fe fdbd 	bl	8004610 <HAL_GetTick>
 8005a96:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a98:	e004      	b.n	8005aa4 <HAL_RCC_OscConfig+0x2f4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a9a:	f7fe fdb9 	bl	8004610 <HAL_GetTick>
 8005a9e:	1b40      	subs	r0, r0, r5
 8005aa0:	2802      	cmp	r0, #2
 8005aa2:	d8bd      	bhi.n	8005a20 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aa4:	6833      	ldr	r3, [r6, #0]
 8005aa6:	0799      	lsls	r1, r3, #30
 8005aa8:	d4f7      	bmi.n	8005a9a <HAL_RCC_OscConfig+0x2ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	e6f3      	b.n	8005896 <HAL_RCC_OscConfig+0xe6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005aae:	2801      	cmp	r0, #1
 8005ab0:	f43f af42 	beq.w	8005938 <HAL_RCC_OscConfig+0x188>
        pll_config = RCC->PLLCFGR;
 8005ab4:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ab6:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ab8:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005abc:	4291      	cmp	r1, r2
 8005abe:	f47f af5f 	bne.w	8005980 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ac2:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ac4:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ac8:	4291      	cmp	r1, r2
 8005aca:	f47f af59 	bne.w	8005980 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ace:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005ad0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8005ad4:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ad6:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005ada:	f47f af51 	bne.w	8005980 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ade:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005ae0:	0852      	lsrs	r2, r2, #1
 8005ae2:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8005ae6:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ae8:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005aec:	f47f af48 	bne.w	8005980 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005af0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005af2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005af6:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8005afa:	f47f af41 	bne.w	8005980 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005afe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005b00:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b04:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
  return HAL_OK;
 8005b08:	bf14      	ite	ne
 8005b0a:	2001      	movne	r0, #1
 8005b0c:	2000      	moveq	r0, #0
 8005b0e:	e713      	b.n	8005938 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b10:	4a28      	ldr	r2, [pc, #160]	; (8005bb4 <HAL_RCC_OscConfig+0x404>)
 8005b12:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b18:	6413      	str	r3, [r2, #64]	; 0x40
 8005b1a:	e6f1      	b.n	8005900 <HAL_RCC_OscConfig+0x150>
    return HAL_ERROR;
 8005b1c:	2001      	movs	r0, #1
}
 8005b1e:	4770      	bx	lr
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b20:	684a      	ldr	r2, [r1, #4]
 8005b22:	0256      	lsls	r6, r2, #9
 8005b24:	f53f ae9a 	bmi.w	800585c <HAL_RCC_OscConfig+0xac>
 8005b28:	e723      	b.n	8005972 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b2a:	4b22      	ldr	r3, [pc, #136]	; (8005bb4 <HAL_RCC_OscConfig+0x404>)
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005b3a:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b3c:	e779      	b.n	8005a32 <HAL_RCC_OscConfig+0x282>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b3e:	4b1d      	ldr	r3, [pc, #116]	; (8005bb4 <HAL_RCC_OscConfig+0x404>)
 8005b40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b42:	f042 0204 	orr.w	r2, r2, #4
 8005b46:	671a      	str	r2, [r3, #112]	; 0x70
 8005b48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b4a:	f042 0201 	orr.w	r2, r2, #1
 8005b4e:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b50:	e789      	b.n	8005a66 <HAL_RCC_OscConfig+0x2b6>
        tickstart = HAL_GetTick();
 8005b52:	f7fe fd5d 	bl	8004610 <HAL_GetTick>
 8005b56:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b58:	e005      	b.n	8005b66 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b5a:	f7fe fd59 	bl	8004610 <HAL_GetTick>
 8005b5e:	1b80      	subs	r0, r0, r6
 8005b60:	2802      	cmp	r0, #2
 8005b62:	f63f af5d 	bhi.w	8005a20 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b66:	682b      	ldr	r3, [r5, #0]
 8005b68:	0199      	lsls	r1, r3, #6
 8005b6a:	d4f6      	bmi.n	8005b5a <HAL_RCC_OscConfig+0x3aa>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b6c:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8005b70:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005b72:	430b      	orrs	r3, r1
 8005b74:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005b78:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 8005b7c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005b7e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005b82:	0852      	lsrs	r2, r2, #1
 8005b84:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8005b88:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8005b8a:	490b      	ldr	r1, [pc, #44]	; (8005bb8 <HAL_RCC_OscConfig+0x408>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8005b90:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b92:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005b94:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8005b96:	f7fe fd3b 	bl	8004610 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b9a:	4d06      	ldr	r5, [pc, #24]	; (8005bb4 <HAL_RCC_OscConfig+0x404>)
        tickstart = HAL_GetTick();
 8005b9c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b9e:	e005      	b.n	8005bac <HAL_RCC_OscConfig+0x3fc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ba0:	f7fe fd36 	bl	8004610 <HAL_GetTick>
 8005ba4:	1b00      	subs	r0, r0, r4
 8005ba6:	2802      	cmp	r0, #2
 8005ba8:	f63f af3a 	bhi.w	8005a20 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bac:	682b      	ldr	r3, [r5, #0]
 8005bae:	019a      	lsls	r2, r3, #6
 8005bb0:	d5f6      	bpl.n	8005ba0 <HAL_RCC_OscConfig+0x3f0>
 8005bb2:	e6c0      	b.n	8005936 <HAL_RCC_OscConfig+0x186>
 8005bb4:	40023800 	.word	0x40023800
 8005bb8:	42470000 	.word	0x42470000

08005bbc <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	f000 8087 	beq.w	8005cd0 <HAL_TIM_Base_Init+0x114>
{
 8005bc2:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bc4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005bc8:	4604      	mov	r4, r0
 8005bca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d079      	beq.n	8005cc6 <HAL_TIM_Base_Init+0x10a>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bd2:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bd4:	493f      	ldr	r1, [pc, #252]	; (8005cd4 <HAL_TIM_Base_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bdc:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8005bde:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005be0:	d05d      	beq.n	8005c9e <HAL_TIM_Base_Init+0xe2>
 8005be2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005be6:	d031      	beq.n	8005c4c <HAL_TIM_Base_Init+0x90>
 8005be8:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8005bec:	428a      	cmp	r2, r1
 8005bee:	d02d      	beq.n	8005c4c <HAL_TIM_Base_Init+0x90>
 8005bf0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005bf4:	428a      	cmp	r2, r1
 8005bf6:	d029      	beq.n	8005c4c <HAL_TIM_Base_Init+0x90>
 8005bf8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005bfc:	428a      	cmp	r2, r1
 8005bfe:	d025      	beq.n	8005c4c <HAL_TIM_Base_Init+0x90>
 8005c00:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8005c04:	428a      	cmp	r2, r1
 8005c06:	d04a      	beq.n	8005c9e <HAL_TIM_Base_Init+0xe2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c08:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8005c0c:	428a      	cmp	r2, r1
 8005c0e:	d021      	beq.n	8005c54 <HAL_TIM_Base_Init+0x98>
 8005c10:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c14:	428a      	cmp	r2, r1
 8005c16:	d01d      	beq.n	8005c54 <HAL_TIM_Base_Init+0x98>
 8005c18:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c1c:	428a      	cmp	r2, r1
 8005c1e:	d019      	beq.n	8005c54 <HAL_TIM_Base_Init+0x98>
 8005c20:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 8005c24:	428a      	cmp	r2, r1
 8005c26:	d015      	beq.n	8005c54 <HAL_TIM_Base_Init+0x98>
 8005c28:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c2c:	428a      	cmp	r2, r1
 8005c2e:	d011      	beq.n	8005c54 <HAL_TIM_Base_Init+0x98>
 8005c30:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c34:	428a      	cmp	r2, r1
 8005c36:	d00d      	beq.n	8005c54 <HAL_TIM_Base_Init+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c38:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c3a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c40:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8005c42:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c44:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c46:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005c48:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c4a:	e010      	b.n	8005c6e <HAL_TIM_Base_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 8005c4c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005c52:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c54:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c56:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c5c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c62:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c64:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005c66:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005c68:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c6a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005c6c:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c72:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c76:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005c7a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005c7e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005c82:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c8e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005c92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005c96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005c9a:	2000      	movs	r0, #0
}
 8005c9c:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8005c9e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ca0:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005ca6:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cac:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cae:	69a1      	ldr	r1, [r4, #24]
 8005cb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cb4:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005cb6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cb8:	68e3      	ldr	r3, [r4, #12]
 8005cba:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005cbc:	6863      	ldr	r3, [r4, #4]
 8005cbe:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005cc0:	6963      	ldr	r3, [r4, #20]
 8005cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8005cc4:	e7d3      	b.n	8005c6e <HAL_TIM_Base_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 8005cc6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005cca:	f7fe fa59 	bl	8004180 <HAL_TIM_Base_MspInit>
 8005cce:	e780      	b.n	8005bd2 <HAL_TIM_Base_Init+0x16>
    return HAL_ERROR;
 8005cd0:	2001      	movs	r0, #1
}
 8005cd2:	4770      	bx	lr
 8005cd4:	40010000 	.word	0x40010000

08005cd8 <HAL_TIM_PWM_MspInit>:
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop

08005cdc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	f000 8087 	beq.w	8005df0 <HAL_TIM_PWM_Init+0x114>
{
 8005ce2:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005ce4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005ce8:	4604      	mov	r4, r0
 8005cea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d079      	beq.n	8005de6 <HAL_TIM_PWM_Init+0x10a>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cf2:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cf4:	493f      	ldr	r1, [pc, #252]	; (8005df4 <HAL_TIM_PWM_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf6:	2302      	movs	r3, #2
 8005cf8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cfc:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8005cfe:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d00:	d05d      	beq.n	8005dbe <HAL_TIM_PWM_Init+0xe2>
 8005d02:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005d06:	d031      	beq.n	8005d6c <HAL_TIM_PWM_Init+0x90>
 8005d08:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8005d0c:	428a      	cmp	r2, r1
 8005d0e:	d02d      	beq.n	8005d6c <HAL_TIM_PWM_Init+0x90>
 8005d10:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d14:	428a      	cmp	r2, r1
 8005d16:	d029      	beq.n	8005d6c <HAL_TIM_PWM_Init+0x90>
 8005d18:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d1c:	428a      	cmp	r2, r1
 8005d1e:	d025      	beq.n	8005d6c <HAL_TIM_PWM_Init+0x90>
 8005d20:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8005d24:	428a      	cmp	r2, r1
 8005d26:	d04a      	beq.n	8005dbe <HAL_TIM_PWM_Init+0xe2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d28:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8005d2c:	428a      	cmp	r2, r1
 8005d2e:	d021      	beq.n	8005d74 <HAL_TIM_PWM_Init+0x98>
 8005d30:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d34:	428a      	cmp	r2, r1
 8005d36:	d01d      	beq.n	8005d74 <HAL_TIM_PWM_Init+0x98>
 8005d38:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d3c:	428a      	cmp	r2, r1
 8005d3e:	d019      	beq.n	8005d74 <HAL_TIM_PWM_Init+0x98>
 8005d40:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 8005d44:	428a      	cmp	r2, r1
 8005d46:	d015      	beq.n	8005d74 <HAL_TIM_PWM_Init+0x98>
 8005d48:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d4c:	428a      	cmp	r2, r1
 8005d4e:	d011      	beq.n	8005d74 <HAL_TIM_PWM_Init+0x98>
 8005d50:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d54:	428a      	cmp	r2, r1
 8005d56:	d00d      	beq.n	8005d74 <HAL_TIM_PWM_Init+0x98>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d58:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d5a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d60:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8005d62:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8005d64:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d66:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005d68:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d6a:	e010      	b.n	8005d8e <HAL_TIM_PWM_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 8005d6c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005d72:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d74:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d76:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d7c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d82:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d84:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005d86:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005d88:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d8a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005d8c:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d92:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d96:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005d9a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005d9e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005da2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005daa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005db2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005db6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005dba:	2000      	movs	r0, #0
}
 8005dbc:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8005dbe:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dc0:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005dc6:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dcc:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dce:	69a1      	ldr	r1, [r4, #24]
 8005dd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dd4:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005dd6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dd8:	68e3      	ldr	r3, [r4, #12]
 8005dda:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005ddc:	6863      	ldr	r3, [r4, #4]
 8005dde:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005de0:	6963      	ldr	r3, [r4, #20]
 8005de2:	6313      	str	r3, [r2, #48]	; 0x30
 8005de4:	e7d3      	b.n	8005d8e <HAL_TIM_PWM_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 8005de6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005dea:	f7ff ff75 	bl	8005cd8 <HAL_TIM_PWM_MspInit>
 8005dee:	e780      	b.n	8005cf2 <HAL_TIM_PWM_Init+0x16>
    return HAL_ERROR;
 8005df0:	2001      	movs	r0, #1
}
 8005df2:	4770      	bx	lr
 8005df4:	40010000 	.word	0x40010000

08005df8 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8005df8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	f000 80d2 	beq.w	8005fa6 <HAL_TIM_PWM_ConfigChannel+0x1ae>
 8005e02:	2301      	movs	r3, #1
{
 8005e04:	b570      	push	{r4, r5, r6, lr}
 8005e06:	4684      	mov	ip, r0
  __HAL_LOCK(htim);
 8005e08:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005e0c:	2a0c      	cmp	r2, #12
 8005e0e:	d808      	bhi.n	8005e22 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8005e10:	e8df f002 	tbb	[pc, r2]
 8005e14:	0707073e 	.word	0x0707073e
 8005e18:	0707076b 	.word	0x0707076b
 8005e1c:	0707079b 	.word	0x0707079b
 8005e20:	0c          	.byte	0x0c
 8005e21:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8005e22:	2300      	movs	r3, #0
 8005e24:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  switch (Channel)
 8005e28:	2001      	movs	r0, #1
}
 8005e2a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e2c:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e2e:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e30:	6a1a      	ldr	r2, [r3, #32]
 8005e32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e36:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005e38:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005e3a:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005e3c:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e3e:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e42:	ea40 2005 	orr.w	r0, r0, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e46:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005e48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e4c:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e50:	4d70      	ldr	r5, [pc, #448]	; (8006014 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8005e52:	42ab      	cmp	r3, r5
 8005e54:	f000 80c8 	beq.w	8005fe8 <HAL_TIM_PWM_ConfigChannel+0x1f0>
 8005e58:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005e5c:	42ab      	cmp	r3, r5
 8005e5e:	f000 80c3 	beq.w	8005fe8 <HAL_TIM_PWM_ConfigChannel+0x1f0>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e62:	605c      	str	r4, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e64:	61d8      	str	r0, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e66:	6848      	ldr	r0, [r1, #4]
 8005e68:	6418      	str	r0, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e6a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e6c:	69d8      	ldr	r0, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e6e:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e70:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8005e74:	61d8      	str	r0, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e76:	69d9      	ldr	r1, [r3, #28]
 8005e78:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005e7c:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e7e:	69da      	ldr	r2, [r3, #28]
 8005e80:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8005e84:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8005e86:	2300      	movs	r3, #0
 8005e88:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005e8c:	2000      	movs	r0, #0
}
 8005e8e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e90:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005e92:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e94:	6a1a      	ldr	r2, [r3, #32]
 8005e96:	f022 0201 	bic.w	r2, r2, #1
 8005e9a:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005e9c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005e9e:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8005ea0:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ea2:	f020 0073 	bic.w	r0, r0, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005ea6:	4328      	orrs	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8005ea8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8005eaa:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 8005eae:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005eb0:	4d58      	ldr	r5, [pc, #352]	; (8006014 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8005eb2:	42ab      	cmp	r3, r5
 8005eb4:	d079      	beq.n	8005faa <HAL_TIM_PWM_ConfigChannel+0x1b2>
 8005eb6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005eba:	42ab      	cmp	r3, r5
 8005ebc:	d075      	beq.n	8005faa <HAL_TIM_PWM_ConfigChannel+0x1b2>
  TIMx->CR2 = tmpcr2;
 8005ebe:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005ec0:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8005ec2:	6848      	ldr	r0, [r1, #4]
 8005ec4:	6358      	str	r0, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8005ec6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ec8:	6998      	ldr	r0, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005eca:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ecc:	f040 0008 	orr.w	r0, r0, #8
 8005ed0:	6198      	str	r0, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ed2:	6999      	ldr	r1, [r3, #24]
 8005ed4:	f021 0104 	bic.w	r1, r1, #4
 8005ed8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005eda:	699a      	ldr	r2, [r3, #24]
 8005edc:	4322      	orrs	r2, r4
 8005ede:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005ee6:	2000      	movs	r0, #0
}
 8005ee8:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005eea:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eec:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eee:	6a1a      	ldr	r2, [r3, #32]
 8005ef0:	f022 0210 	bic.w	r2, r2, #16
 8005ef4:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005ef6:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005ef8:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8005efa:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005efc:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f00:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f04:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005f06:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f0a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f0e:	4d41      	ldr	r5, [pc, #260]	; (8006014 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8005f10:	42ab      	cmp	r3, r5
 8005f12:	d059      	beq.n	8005fc8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8005f14:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005f18:	42ab      	cmp	r3, r5
 8005f1a:	d055      	beq.n	8005fc8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
  TIMx->CR2 = tmpcr2;
 8005f1c:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005f1e:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005f20:	6848      	ldr	r0, [r1, #4]
 8005f22:	6398      	str	r0, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005f24:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f26:	6998      	ldr	r0, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f28:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f2a:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8005f2e:	6198      	str	r0, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f30:	6999      	ldr	r1, [r3, #24]
 8005f32:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005f36:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f38:	699a      	ldr	r2, [r3, #24]
 8005f3a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8005f3e:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8005f40:	2300      	movs	r3, #0
 8005f42:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005f46:	2000      	movs	r0, #0
}
 8005f48:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f4a:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005f4c:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f4e:	6a1a      	ldr	r2, [r3, #32]
 8005f50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f54:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005f56:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005f58:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005f5a:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f5c:	f020 0073 	bic.w	r0, r0, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005f60:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f62:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005f64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f68:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f6c:	4d29      	ldr	r5, [pc, #164]	; (8006014 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8005f6e:	42ab      	cmp	r3, r5
 8005f70:	d040      	beq.n	8005ff4 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8005f72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005f76:	42ab      	cmp	r3, r5
 8005f78:	d03c      	beq.n	8005ff4 <HAL_TIM_PWM_ConfigChannel+0x1fc>
  TIMx->CR2 = tmpcr2;
 8005f7a:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005f7c:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8005f7e:	6848      	ldr	r0, [r1, #4]
 8005f80:	63d8      	str	r0, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8005f82:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f84:	69d8      	ldr	r0, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f86:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f88:	f040 0008 	orr.w	r0, r0, #8
 8005f8c:	61d8      	str	r0, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f8e:	69d9      	ldr	r1, [r3, #28]
 8005f90:	f021 0104 	bic.w	r1, r1, #4
 8005f94:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f96:	69da      	ldr	r2, [r3, #28]
 8005f98:	4322      	orrs	r2, r4
 8005f9a:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005fa2:	2000      	movs	r0, #0
}
 8005fa4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8005fa6:	2002      	movs	r0, #2
}
 8005fa8:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8005faa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fac:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005fb0:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fb2:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fb6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fba:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fbe:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fc2:	ea4e 0404 	orr.w	r4, lr, r4
 8005fc6:	e77a      	b.n	8005ebe <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fc8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fce:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fd2:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fd6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fda:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fe2:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
 8005fe6:	e799      	b.n	8005f1c <HAL_TIM_PWM_ConfigChannel+0x124>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fe8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fea:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fee:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8005ff2:	e736      	b.n	8005e62 <HAL_TIM_PWM_ConfigChannel+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ff4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ff6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ffa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ffe:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006002:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006006:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800600a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800600e:	ea44 140e 	orr.w	r4, r4, lr, lsl #4
 8006012:	e7b2      	b.n	8005f7a <HAL_TIM_PWM_ConfigChannel+0x182>
 8006014:	40010000 	.word	0x40010000

08006018 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006018:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800601c:	2b01      	cmp	r3, #1
 800601e:	d075      	beq.n	800610c <HAL_TIM_ConfigClockSource+0xf4>
 8006020:	4602      	mov	r2, r0
{
 8006022:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8006024:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8006026:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006028:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 800602c:	2001      	movs	r0, #1
 800602e:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8006032:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006034:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006038:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800603c:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800603e:	680b      	ldr	r3, [r1, #0]
 8006040:	2b60      	cmp	r3, #96	; 0x60
 8006042:	d065      	beq.n	8006110 <HAL_TIM_ConfigClockSource+0xf8>
 8006044:	d824      	bhi.n	8006090 <HAL_TIM_ConfigClockSource+0x78>
 8006046:	2b40      	cmp	r3, #64	; 0x40
 8006048:	d07c      	beq.n	8006144 <HAL_TIM_ConfigClockSource+0x12c>
 800604a:	d94b      	bls.n	80060e4 <HAL_TIM_ConfigClockSource+0xcc>
 800604c:	2b50      	cmp	r3, #80	; 0x50
 800604e:	d117      	bne.n	8006080 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006050:	6848      	ldr	r0, [r1, #4]
 8006052:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006054:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006056:	6a23      	ldr	r3, [r4, #32]
 8006058:	f023 0301 	bic.w	r3, r3, #1
 800605c:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800605e:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006060:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006064:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8006068:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800606a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800606e:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8006070:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006072:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006078:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 800607c:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800607e:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8006080:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8006082:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006084:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006088:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800608c:	bc30      	pop	{r4, r5}
 800608e:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8006090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006094:	d038      	beq.n	8006108 <HAL_TIM_ConfigClockSource+0xf0>
 8006096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800609a:	d110      	bne.n	80060be <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800609c:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80060a0:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060a2:	432b      	orrs	r3, r5
 80060a4:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060a6:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060aa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80060ae:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060b0:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060b2:	68a3      	ldr	r3, [r4, #8]
 80060b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 80060b8:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060ba:	60a3      	str	r3, [r4, #8]
      break;
 80060bc:	e7e0      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80060be:	2b70      	cmp	r3, #112	; 0x70
 80060c0:	d1de      	bne.n	8006080 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060c2:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80060c6:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060c8:	432b      	orrs	r3, r5
 80060ca:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060cc:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060d0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80060d4:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80060d6:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80060d8:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 80060de:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 80060e0:	60a3      	str	r3, [r4, #8]
      break;
 80060e2:	e7cd      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80060e4:	2b20      	cmp	r3, #32
 80060e6:	d002      	beq.n	80060ee <HAL_TIM_ConfigClockSource+0xd6>
 80060e8:	d90a      	bls.n	8006100 <HAL_TIM_ConfigClockSource+0xe8>
 80060ea:	2b30      	cmp	r3, #48	; 0x30
 80060ec:	d1c8      	bne.n	8006080 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 80060ee:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80060f0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060f4:	430b      	orrs	r3, r1
 80060f6:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 80060fa:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 80060fc:	60a3      	str	r3, [r4, #8]
}
 80060fe:	e7bf      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8006100:	f033 0110 	bics.w	r1, r3, #16
 8006104:	d1bc      	bne.n	8006080 <HAL_TIM_ConfigClockSource+0x68>
 8006106:	e7f2      	b.n	80060ee <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8006108:	2000      	movs	r0, #0
 800610a:	e7b9      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 800610c:	2002      	movs	r0, #2
}
 800610e:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006110:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006112:	68cb      	ldr	r3, [r1, #12]
 8006114:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006116:	f020 0010 	bic.w	r0, r0, #16
 800611a:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800611c:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800611e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006122:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 8006126:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8006128:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800612a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800612e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8006132:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8006134:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800613a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 800613e:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8006140:	60a3      	str	r3, [r4, #8]
}
 8006142:	e79d      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006144:	6848      	ldr	r0, [r1, #4]
 8006146:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8006148:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800614a:	6a23      	ldr	r3, [r4, #32]
 800614c:	f023 0301 	bic.w	r3, r3, #1
 8006150:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006152:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006154:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006158:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 800615c:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800615e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006162:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8006164:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8006166:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800616c:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8006170:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8006172:	60a3      	str	r3, [r4, #8]
}
 8006174:	e784      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x68>
 8006176:	bf00      	nop

08006178 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8006178:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800617c:	2a01      	cmp	r2, #1
 800617e:	d050      	beq.n	8006222 <HAL_TIM_SlaveConfigSynchro+0xaa>
 8006180:	4603      	mov	r3, r0
{
 8006182:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8006184:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8006186:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);
 800618c:	2001      	movs	r0, #1
 800618e:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8006192:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006194:	6848      	ldr	r0, [r1, #4]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006196:	680d      	ldr	r5, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006198:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800619c:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 800619e:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80061a2:	432a      	orrs	r2, r5
  switch (sSlaveConfig->InputTrigger)
 80061a4:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 80061a6:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 80061a8:	d060      	beq.n	800626c <HAL_TIM_SlaveConfigSynchro+0xf4>
 80061aa:	d90f      	bls.n	80061cc <HAL_TIM_SlaveConfigSynchro+0x54>
 80061ac:	2860      	cmp	r0, #96	; 0x60
 80061ae:	d03a      	beq.n	8006226 <HAL_TIM_SlaveConfigSynchro+0xae>
 80061b0:	2870      	cmp	r0, #112	; 0x70
 80061b2:	d10e      	bne.n	80061d2 <HAL_TIM_SlaveConfigSynchro+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061b4:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 80061b8:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061ba:	432a      	orrs	r2, r5
 80061bc:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061be:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061c2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80061c6:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80061c8:	60a2      	str	r2, [r4, #8]
 80061ca:	e00f      	b.n	80061ec <HAL_TIM_SlaveConfigSynchro+0x74>
  switch (sSlaveConfig->InputTrigger)
 80061cc:	2840      	cmp	r0, #64	; 0x40
 80061ce:	d03d      	beq.n	800624c <HAL_TIM_SlaveConfigSynchro+0xd4>
 80061d0:	d907      	bls.n	80061e2 <HAL_TIM_SlaveConfigSynchro+0x6a>
    htim->State = HAL_TIM_STATE_READY;
 80061d2:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 80061d4:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 80061d6:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80061da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80061de:	bc70      	pop	{r4, r5, r6}
 80061e0:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80061e2:	2820      	cmp	r0, #32
 80061e4:	d002      	beq.n	80061ec <HAL_TIM_SlaveConfigSynchro+0x74>
 80061e6:	d912      	bls.n	800620e <HAL_TIM_SlaveConfigSynchro+0x96>
 80061e8:	2830      	cmp	r0, #48	; 0x30
 80061ea:	d1f2      	bne.n	80061d2 <HAL_TIM_SlaveConfigSynchro+0x5a>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80061ec:	68e2      	ldr	r2, [r4, #12]
 80061ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061f2:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80061f4:	68e2      	ldr	r2, [r4, #12]
  __HAL_UNLOCK(htim);
 80061f6:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 80061f8:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80061fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061fe:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8006200:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006204:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
  return HAL_OK;
 8006208:	4608      	mov	r0, r1
}
 800620a:	bc70      	pop	{r4, r5, r6}
 800620c:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 800620e:	f030 0210 	bics.w	r2, r0, #16
 8006212:	d0eb      	beq.n	80061ec <HAL_TIM_SlaveConfigSynchro+0x74>
    htim->State = HAL_TIM_STATE_READY;
 8006214:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8006216:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8006218:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006220:	e7dd      	b.n	80061de <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 8006222:	2002      	movs	r0, #2
}
 8006224:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006226:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006228:	690a      	ldr	r2, [r1, #16]
 800622a:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800622c:	f020 0010 	bic.w	r0, r0, #16
 8006230:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006232:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006234:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006238:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 800623c:	6a22      	ldr	r2, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800623e:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006240:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006244:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 8006248:	6222      	str	r2, [r4, #32]
 800624a:	e7cf      	b.n	80061ec <HAL_TIM_SlaveConfigSynchro+0x74>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800624c:	2d05      	cmp	r5, #5
 800624e:	d0c0      	beq.n	80061d2 <HAL_TIM_SlaveConfigSynchro+0x5a>
      tmpccer = htim->Instance->CCER;
 8006250:	6a25      	ldr	r5, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006252:	6a20      	ldr	r0, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006254:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006256:	f020 0001 	bic.w	r0, r0, #1
 800625a:	6220      	str	r0, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800625c:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800625e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006262:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8006266:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8006268:	6225      	str	r5, [r4, #32]
      break;
 800626a:	e7bf      	b.n	80061ec <HAL_TIM_SlaveConfigSynchro+0x74>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800626c:	6888      	ldr	r0, [r1, #8]
 800626e:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8006270:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006272:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8006276:	4301      	orrs	r1, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006278:	6a20      	ldr	r0, [r4, #32]
 800627a:	f020 0001 	bic.w	r0, r0, #1
 800627e:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006280:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006282:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006286:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800628a:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 800628c:	6221      	str	r1, [r4, #32]
 800628e:	e7ad      	b.n	80061ec <HAL_TIM_SlaveConfigSynchro+0x74>

08006290 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006290:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006294:	2b01      	cmp	r3, #1
 8006296:	d037      	beq.n	8006308 <HAL_TIMEx_MasterConfigSynchronization+0x78>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006298:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800629a:	2202      	movs	r2, #2
{
 800629c:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800629e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80062a2:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062a4:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80062a6:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80062a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062ac:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062b0:	4a16      	ldr	r2, [pc, #88]	; (800630c <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d01a      	beq.n	80062ec <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 80062b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ba:	d017      	beq.n	80062ec <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 80062bc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d013      	beq.n	80062ec <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 80062c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d00f      	beq.n	80062ec <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 80062cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d00b      	beq.n	80062ec <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 80062d4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80062d8:	4293      	cmp	r3, r2
 80062da:	d007      	beq.n	80062ec <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 80062dc:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d003      	beq.n	80062ec <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 80062e4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d104      	bne.n	80062f6 <HAL_TIMEx_MasterConfigSynchronization+0x66>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062ec:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062ee:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062f2:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062f4:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80062f6:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80062f8:	2201      	movs	r2, #1
 80062fa:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80062fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8006302:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8006304:	4618      	mov	r0, r3
}
 8006306:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006308:	2002      	movs	r0, #2
}
 800630a:	4770      	bx	lr
 800630c:	40010000 	.word	0x40010000

08006310 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006310:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006314:	2b01      	cmp	r3, #1
 8006316:	d023      	beq.n	8006360 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
{
 8006318:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800631a:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 800631e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006322:	4602      	mov	r2, r0
 8006324:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006326:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006328:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800632a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800632e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006330:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006334:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006336:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006338:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800633c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800633e:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006340:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006342:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006346:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006348:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800634c:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 800634e:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006350:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 8006352:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8006354:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8006358:	4608      	mov	r0, r1
}
 800635a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800635e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006360:	2002      	movs	r0, #2
}
 8006362:	4770      	bx	lr

08006364 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006364:	2800      	cmp	r0, #0
 8006366:	f000 808f 	beq.w	8006488 <HAL_UART_Init+0x124>
{
 800636a:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800636c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006370:	4604      	mov	r4, r0
 8006372:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 8081 	beq.w	800647e <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800637c:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800637e:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8006380:	2224      	movs	r2, #36	; 0x24
 8006382:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8006386:	68da      	ldr	r2, [r3, #12]
 8006388:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800638c:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800638e:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006390:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006392:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8006396:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006398:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800639a:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800639c:	4302      	orrs	r2, r0
 800639e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80063a0:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063a2:	4302      	orrs	r2, r0
 80063a4:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 80063a6:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 80063aa:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063ae:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80063b0:	430a      	orrs	r2, r1
 80063b2:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063b4:	695a      	ldr	r2, [r3, #20]
 80063b6:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063b8:	4934      	ldr	r1, [pc, #208]	; (800648c <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063ba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80063be:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063c0:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063c2:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063c4:	d035      	beq.n	8006432 <HAL_UART_Init+0xce>
 80063c6:	4a32      	ldr	r2, [pc, #200]	; (8006490 <HAL_UART_Init+0x12c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d032      	beq.n	8006432 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80063cc:	f7ff f97a 	bl	80056c4 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063d0:	69e3      	ldr	r3, [r4, #28]
 80063d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063d6:	d032      	beq.n	800643e <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063d8:	6863      	ldr	r3, [r4, #4]
 80063da:	2119      	movs	r1, #25
 80063dc:	009a      	lsls	r2, r3, #2
 80063de:	fba0 0101 	umull	r0, r1, r0, r1
 80063e2:	0f9b      	lsrs	r3, r3, #30
 80063e4:	f7fa fc70 	bl	8000cc8 <__aeabi_uldivmod>
 80063e8:	492a      	ldr	r1, [pc, #168]	; (8006494 <HAL_UART_Init+0x130>)
 80063ea:	fba1 3200 	umull	r3, r2, r1, r0
 80063ee:	0952      	lsrs	r2, r2, #5
 80063f0:	2564      	movs	r5, #100	; 0x64
 80063f2:	fb05 0012 	mls	r0, r5, r2, r0
 80063f6:	0100      	lsls	r0, r0, #4
 80063f8:	3032      	adds	r0, #50	; 0x32
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	fba1 1000 	umull	r1, r0, r1, r0
 8006400:	0112      	lsls	r2, r2, #4
 8006402:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 8006406:	6098      	str	r0, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006408:	691a      	ldr	r2, [r3, #16]
 800640a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800640e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006410:	695a      	ldr	r2, [r3, #20]
 8006412:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006416:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8006418:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800641a:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 800641c:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 800641e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006422:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006424:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006426:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800642a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 800642e:	4628      	mov	r0, r5
}
 8006430:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8006432:	f7ff f957 	bl	80056e4 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006436:	69e3      	ldr	r3, [r4, #28]
 8006438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800643c:	d1cc      	bne.n	80063d8 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800643e:	6862      	ldr	r2, [r4, #4]
 8006440:	2119      	movs	r1, #25
 8006442:	1892      	adds	r2, r2, r2
 8006444:	f04f 0300 	mov.w	r3, #0
 8006448:	415b      	adcs	r3, r3
 800644a:	fba0 0101 	umull	r0, r1, r0, r1
 800644e:	f7fa fc3b 	bl	8000cc8 <__aeabi_uldivmod>
 8006452:	4b10      	ldr	r3, [pc, #64]	; (8006494 <HAL_UART_Init+0x130>)
 8006454:	fba3 2100 	umull	r2, r1, r3, r0
 8006458:	094d      	lsrs	r5, r1, #5
 800645a:	2264      	movs	r2, #100	; 0x64
 800645c:	fb02 0215 	mls	r2, r2, r5, r0
 8006460:	00d2      	lsls	r2, r2, #3
 8006462:	3232      	adds	r2, #50	; 0x32
 8006464:	fba3 3202 	umull	r3, r2, r3, r2
 8006468:	f3c2 1142 	ubfx	r1, r2, #5, #3
 800646c:	0912      	lsrs	r2, r2, #4
 800646e:	6823      	ldr	r3, [r4, #0]
 8006470:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8006474:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8006478:	440a      	add	r2, r1
 800647a:	609a      	str	r2, [r3, #8]
 800647c:	e7c4      	b.n	8006408 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 800647e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8006482:	f7fd ff11 	bl	80042a8 <HAL_UART_MspInit>
 8006486:	e779      	b.n	800637c <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8006488:	2001      	movs	r0, #1
}
 800648a:	4770      	bx	lr
 800648c:	40011000 	.word	0x40011000
 8006490:	40011400 	.word	0x40011400
 8006494:	51eb851f 	.word	0x51eb851f

08006498 <HAL_UART_Transmit>:
{
 8006498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800649c:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800649e:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 80064a2:	2820      	cmp	r0, #32
 80064a4:	d177      	bne.n	8006596 <HAL_UART_Transmit+0xfe>
    if ((pData == NULL) || (Size == 0U))
 80064a6:	4689      	mov	r9, r1
 80064a8:	2900      	cmp	r1, #0
 80064aa:	d040      	beq.n	800652e <HAL_UART_Transmit+0x96>
 80064ac:	4614      	mov	r4, r2
 80064ae:	2a00      	cmp	r2, #0
 80064b0:	d03d      	beq.n	800652e <HAL_UART_Transmit+0x96>
 80064b2:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 80064b4:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d06c      	beq.n	8006596 <HAL_UART_Transmit+0xfe>
 80064bc:	2301      	movs	r3, #1
 80064be:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c2:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064c6:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c8:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064cc:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80064d0:	f7fe f89e 	bl	8004610 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064d4:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize = Size;
 80064d6:	84ac      	strh	r4, [r5, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 80064dc:	84ec      	strh	r4, [r5, #38]	; 0x26
    tickstart = HAL_GetTick();
 80064de:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064e0:	d05c      	beq.n	800659c <HAL_UART_Transmit+0x104>
    while (huart->TxXferCount > 0U)
 80064e2:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    __HAL_UNLOCK(huart);
 80064e4:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 80064e6:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 80064e8:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d07e      	beq.n	80065ee <HAL_UART_Transmit+0x156>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064f0:	682c      	ldr	r4, [r5, #0]
 80064f2:	1c72      	adds	r2, r6, #1
 80064f4:	d11e      	bne.n	8006534 <HAL_UART_Transmit+0x9c>
 80064f6:	6822      	ldr	r2, [r4, #0]
 80064f8:	0613      	lsls	r3, r2, #24
 80064fa:	d5fc      	bpl.n	80064f6 <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 80064fc:	f1b9 0f00 	cmp.w	r9, #0
 8006500:	d044      	beq.n	800658c <HAL_UART_Transmit+0xf4>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006502:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006506:	6063      	str	r3, [r4, #4]
      huart->TxXferCount--;
 8006508:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800650a:	3b01      	subs	r3, #1
 800650c:	b29b      	uxth	r3, r3
 800650e:	84eb      	strh	r3, [r5, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006510:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8006512:	b29b      	uxth	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1ec      	bne.n	80064f2 <HAL_UART_Transmit+0x5a>
 8006518:	1c71      	adds	r1, r6, #1
 800651a:	d145      	bne.n	80065a8 <HAL_UART_Transmit+0x110>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	065a      	lsls	r2, r3, #25
 8006520:	d5fc      	bpl.n	800651c <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8006522:	2320      	movs	r3, #32
 8006524:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    return HAL_OK;
 8006528:	2000      	movs	r0, #0
}
 800652a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 800652e:	2001      	movs	r0, #1
}
 8006530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006534:	6823      	ldr	r3, [r4, #0]
 8006536:	0618      	lsls	r0, r3, #24
 8006538:	d4e0      	bmi.n	80064fc <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800653a:	b12e      	cbz	r6, 8006548 <HAL_UART_Transmit+0xb0>
 800653c:	f7fe f868 	bl	8004610 <HAL_GetTick>
 8006540:	1bc0      	subs	r0, r0, r7
 8006542:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006544:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006546:	d2d4      	bcs.n	80064f2 <HAL_UART_Transmit+0x5a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006548:	f104 030c 	add.w	r3, r4, #12
 800654c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006550:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006554:	f104 010c 	add.w	r1, r4, #12
 8006558:	e841 3200 	strex	r2, r3, [r1]
 800655c:	2a00      	cmp	r2, #0
 800655e:	d1f3      	bne.n	8006548 <HAL_UART_Transmit+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006560:	f104 0314 	add.w	r3, r4, #20
 8006564:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006568:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656c:	f104 0114 	add.w	r1, r4, #20
 8006570:	e841 3200 	strex	r2, r3, [r1]
 8006574:	2a00      	cmp	r2, #0
 8006576:	d1f3      	bne.n	8006560 <HAL_UART_Transmit+0xc8>
        huart->gState  = HAL_UART_STATE_READY;
 8006578:	2320      	movs	r3, #32
 800657a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 800657e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8006582:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      return HAL_TIMEOUT;
 8006586:	2003      	movs	r0, #3
}
 8006588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800658c:	f838 3b02 	ldrh.w	r3, [r8], #2
 8006590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006594:	e7b7      	b.n	8006506 <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 8006596:	2002      	movs	r0, #2
}
 8006598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800659c:	692b      	ldr	r3, [r5, #16]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d19f      	bne.n	80064e2 <HAL_UART_Transmit+0x4a>
 80065a2:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 80065a4:	4699      	mov	r9, r3
 80065a6:	e79c      	b.n	80064e2 <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	065b      	lsls	r3, r3, #25
 80065ac:	d4b9      	bmi.n	8006522 <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80065ae:	b12e      	cbz	r6, 80065bc <HAL_UART_Transmit+0x124>
 80065b0:	f7fe f82e 	bl	8004610 <HAL_GetTick>
 80065b4:	1bc0      	subs	r0, r0, r7
 80065b6:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065b8:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80065ba:	d2ad      	bcs.n	8006518 <HAL_UART_Transmit+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065bc:	f104 030c 	add.w	r3, r4, #12
 80065c0:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c8:	f104 010c 	add.w	r1, r4, #12
 80065cc:	e841 3200 	strex	r2, r3, [r1]
 80065d0:	2a00      	cmp	r2, #0
 80065d2:	d1f3      	bne.n	80065bc <HAL_UART_Transmit+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d4:	f104 0314 	add.w	r3, r4, #20
 80065d8:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065dc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e0:	f104 0114 	add.w	r1, r4, #20
 80065e4:	e841 3200 	strex	r2, r3, [r1]
 80065e8:	2a00      	cmp	r2, #0
 80065ea:	d1f3      	bne.n	80065d4 <HAL_UART_Transmit+0x13c>
 80065ec:	e7c4      	b.n	8006578 <HAL_UART_Transmit+0xe0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065ee:	682c      	ldr	r4, [r5, #0]
 80065f0:	e792      	b.n	8006518 <HAL_UART_Transmit+0x80>
 80065f2:	bf00      	nop

080065f4 <VBS_GetAvBusVoltage_d>:
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
__weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
  return ( pHandle->AvBusVoltage_d );
}
 80065f4:	88c0      	ldrh	r0, [r0, #6]
 80065f6:	4770      	bx	lr

080065f8 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 80065f8:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 80065fa:	8840      	ldrh	r0, [r0, #2]
 80065fc:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 8006600:	0c00      	lsrs	r0, r0, #16
 8006602:	4770      	bx	lr

08006604 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 8006604:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8006606:	8802      	ldrh	r2, [r0, #0]
 8006608:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 800660a:	fb03 fc03 	mul.w	ip, r3, r3
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 800660e:	fb01 cc01 	mla	ip, r1, r1, ip
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8006612:	fb02 f202 	mul.w	r2, r2, r2
 8006616:	4562      	cmp	r2, ip
{
 8006618:	b084      	sub	sp, #16
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 800661a:	d21a      	bcs.n	8006652 <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 800661c:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 8006620:	ebc2 6c1c 	rsb	ip, r2, ip, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 8006624:	fa5f fc8c 	uxtb.w	ip, ip
 8006628:	eb00 004c 	add.w	r0, r0, ip, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 800662c:	8882      	ldrh	r2, [r0, #4]
 800662e:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8006632:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 8006634:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8006638:	bfbc      	itt	lt
 800663a:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 800663e:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8006640:	2b00      	cmp	r3, #0
 8006642:	bfbc      	itt	lt
 8006644:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 8006648:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 800664a:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 800664e:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 8006652:	b289      	uxth	r1, r1
 8006654:	2000      	movs	r0, #0
 8006656:	f361 000f 	bfi	r0, r1, #0, #16
 800665a:	b29b      	uxth	r3, r3
 800665c:	f363 401f 	bfi	r0, r3, #16, #16
}
 8006660:	b004      	add	sp, #16
 8006662:	4770      	bx	lr

08006664 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8006664:	b190      	cbz	r0, 800668c <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 8006666:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8006668:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 800666a:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 800666c:	b151      	cbz	r1, 8006684 <FCP_CalcCRC+0x20>
 800666e:	1c82      	adds	r2, r0, #2
 8006670:	3901      	subs	r1, #1
 8006672:	3001      	adds	r0, #1
 8006674:	fa52 f181 	uxtab	r1, r2, r1
    {
      nSum += pFrame->Buffer[idx];
 8006678:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800667c:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 800667e:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 8006680:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8006682:	d1f9      	bne.n	8006678 <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 8006684:	eb03 2013 	add.w	r0, r3, r3, lsr #8
 8006688:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  }

  return nCRC ;
}
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop

08006690 <ICS_GetPhaseCurrents>:
__weak void ICS_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  int32_t aux;
  uint16_t reg;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006690:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8006692:	68da      	ldr	r2, [r3, #12]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006694:	6a13      	ldr	r3, [r2, #32]
{
 8006696:	b410      	push	{r4}
 8006698:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  /* Ia = (hPhaseAOffset)-(PHASE_A_ADC_CHANNEL vale)  */
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 800669c:	4c1f      	ldr	r4, [pc, #124]	; (800671c <ICS_GetPhaseCurrents+0x8c>)
 800669e:	6213      	str	r3, [r2, #32]
 80066a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 80066a2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c

  /* Saturation of Ia */
  if ( aux < -INT16_MAX )
 80066a4:	4c1e      	ldr	r4, [pc, #120]	; (8006720 <ICS_GetPhaseCurrents+0x90>)
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 80066a6:	005b      	lsls	r3, r3, #1
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	1a9b      	subs	r3, r3, r2
  if ( aux < -INT16_MAX )
 80066ac:	42a3      	cmp	r3, r4
 80066ae:	da1a      	bge.n	80066e6 <ICS_GetPhaseCurrents+0x56>
  {
    pStator_Currents->a = -INT16_MAX;
 80066b0:	800c      	strh	r4, [r1, #0]
 80066b2:	f248 0201 	movw	r2, #32769	; 0x8001
 80066b6:	46a4      	mov	ip, r4
  {
    pStator_Currents->a = ( int16_t )aux;
  }

  /* Ib = (hPhaseBOffset)-(PHASE_B_ADC_CHANNEL value) */
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 80066b8:	4b1a      	ldr	r3, [pc, #104]	; (8006724 <ICS_GetPhaseCurrents+0x94>)
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 80066ba:	6e04      	ldr	r4, [r0, #96]	; 0x60
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 80066bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066be:	005b      	lsls	r3, r3, #1
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	1b1b      	subs	r3, r3, r4

  /* Saturation of Ib */
  if ( aux < -INT16_MAX )
 80066c4:	4c16      	ldr	r4, [pc, #88]	; (8006720 <ICS_GetPhaseCurrents+0x90>)
 80066c6:	42a3      	cmp	r3, r4
 80066c8:	da16      	bge.n	80066f8 <ICS_GetPhaseCurrents+0x68>
  {
    pStator_Currents->b = -INT16_MAX;
 80066ca:	804c      	strh	r4, [r1, #2]
 80066cc:	f248 0301 	movw	r3, #32769	; 0x8001
    pStator_Currents->b = ( int16_t )aux;
  }

  pHandle->_Super.Ia = pStator_Currents->a;
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80066d0:	4413      	add	r3, r2
 80066d2:	425b      	negs	r3, r3
  pHandle->_Super.Ib = pStator_Currents->b;
 80066d4:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
  pHandle->_Super.Ia = pStator_Currents->a;
 80066d8:	f8a0 c048 	strh.w	ip, [r0, #72]	; 0x48

}
 80066dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80066e0:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 80066e4:	4770      	bx	lr
  else  if ( aux > INT16_MAX )
 80066e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066ea:	db11      	blt.n	8006710 <ICS_GetPhaseCurrents+0x80>
    pStator_Currents->a = INT16_MAX;
 80066ec:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80066f0:	461a      	mov	r2, r3
 80066f2:	800b      	strh	r3, [r1, #0]
 80066f4:	469c      	mov	ip, r3
 80066f6:	e7df      	b.n	80066b8 <ICS_GetPhaseCurrents+0x28>
  else  if ( aux > INT16_MAX )
 80066f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066fc:	db04      	blt.n	8006708 <ICS_GetPhaseCurrents+0x78>
    pStator_Currents->b = INT16_MAX;
 80066fe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006702:	804b      	strh	r3, [r1, #2]
 8006704:	461c      	mov	r4, r3
 8006706:	e7e3      	b.n	80066d0 <ICS_GetPhaseCurrents+0x40>
    pStator_Currents->b = ( int16_t )aux;
 8006708:	b21c      	sxth	r4, r3
 800670a:	804c      	strh	r4, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800670c:	b29b      	uxth	r3, r3
 800670e:	e7df      	b.n	80066d0 <ICS_GetPhaseCurrents+0x40>
    pStator_Currents->a = ( int16_t )aux;
 8006710:	fa0f fc83 	sxth.w	ip, r3
 8006714:	f8a1 c000 	strh.w	ip, [r1]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8006718:	b29a      	uxth	r2, r3
 800671a:	e7cd      	b.n	80066b8 <ICS_GetPhaseCurrents+0x28>
 800671c:	40012000 	.word	0x40012000
 8006720:	ffff8001 	.word	0xffff8001
 8006724:	40012100 	.word	0x40012100

08006728 <ICS_HFCurrentsCalibration>:
* @retval Always returns {0,0} in ab_t format
*/
__weak void ICS_HFCurrentsCalibration( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006728:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800672a:	68da      	ldr	r2, [r3, #12]
 800672c:	6a13      	ldr	r3, [r2, #32]
 800672e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006732:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH4 );

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8006734:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8006738:	2b0f      	cmp	r3, #15
 800673a:	d815      	bhi.n	8006768 <ICS_HFCurrentsCalibration+0x40>
  {
    pHandle->PhaseAOffset += ADC1->JDR1;
 800673c:	4a0c      	ldr	r2, [pc, #48]	; (8006770 <ICS_HFCurrentsCalibration+0x48>)
 800673e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
{
 8006740:	b410      	push	{r4}
    pHandle->PhaseAOffset += ADC1->JDR1;
 8006742:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 8006744:	4423      	add	r3, r4
 8006746:	65c3      	str	r3, [r0, #92]	; 0x5c
    pHandle->PhaseBOffset += ADC2->JDR1;
 8006748:	f8d2 413c 	ldr.w	r4, [r2, #316]	; 0x13c
    pHandle->PolarizationCounter++;
 800674c:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
    pHandle->PhaseBOffset += ADC2->JDR1;
 8006750:	6e02      	ldr	r2, [r0, #96]	; 0x60
    pHandle->PolarizationCounter++;
 8006752:	3301      	adds	r3, #1
 8006754:	b2db      	uxtb	r3, r3
    pHandle->PhaseBOffset += ADC2->JDR1;
 8006756:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8006758:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 800675c:	2300      	movs	r3, #0
    pHandle->PhaseBOffset += ADC2->JDR1;
 800675e:	6602      	str	r2, [r0, #96]	; 0x60
  pStator_Currents->b = 0;
}
 8006760:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 8006764:	600b      	str	r3, [r1, #0]
}
 8006766:	4770      	bx	lr
  pStator_Currents->a = 0;
 8006768:	2300      	movs	r3, #0
 800676a:	600b      	str	r3, [r1, #0]
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	40012000 	.word	0x40012000

08006774 <ICS_TurnOnLowSides>:
  * @param pHdl ICS F4xx PWM Current Feedback Handle
  */
__weak void ICS_TurnOnLowSides( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006774:	6f01      	ldr	r1, [r0, #112]	; 0x70

  pHandle->_Super.TurnOnLowSidesAction = true;
 8006776:	f04f 0c01 	mov.w	ip, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800677a:	68ca      	ldr	r2, [r1, #12]
  pHandle->_Super.TurnOnLowSidesAction = true;
 800677c:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006780:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006782:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006786:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006788:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800678a:	63d3      	str	r3, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800678c:	6110      	str	r0, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800678e:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0 );
  LL_TIM_OC_SetCompareCH2( TIMx, 0 );
  LL_TIM_OC_SetCompareCH3( TIMx, 0 );

  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET ) ;
 8006790:	07db      	lsls	r3, r3, #31
 8006792:	d5fc      	bpl.n	800678e <ICS_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006794:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8006796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800679a:	6453      	str	r3, [r2, #68]	; 0x44

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800679c:	7c0b      	ldrb	r3, [r1, #16]
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d000      	beq.n	80067a4 <ICS_TurnOnLowSides+0x30>
 80067a2:	4770      	bx	lr
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80067a4:	694a      	ldr	r2, [r1, #20]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80067a6:	69c8      	ldr	r0, [r1, #28]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80067a8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
{
 80067aa:	b410      	push	{r4}
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80067ac:	698c      	ldr	r4, [r1, #24]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80067ae:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80067b0:	6a0c      	ldr	r4, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80067b2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80067b4:	6184      	str	r4, [r0, #24]
  }
}
 80067b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067ba:	619a      	str	r2, [r3, #24]
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop

080067c0 <ICS_SwitchOnPWM>:
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOnPWM( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80067c0:	6f01      	ldr	r1, [r0, #112]	; 0x70

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80067c2:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80067c6:	68cb      	ldr	r3, [r1, #12]
  pHandle->_Super.TurnOnLowSidesAction = false;
 80067c8:	f04f 0c00 	mov.w	ip, #0
{
 80067cc:	b430      	push	{r4, r5}
  pHandle->_Super.TurnOnLowSidesAction = false;
 80067ce:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80067d2:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80067d4:	6358      	str	r0, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 80067d6:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 80067d8:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80067da:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80067dc:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 80067e0:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80067e2:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80067e4:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80067e6:	07d2      	lsls	r2, r2, #31
 80067e8:	d5fc      	bpl.n	80067e4 <ICS_SwitchOnPWM+0x24>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80067ea:	f06f 0201 	mvn.w	r2, #1
 80067ee:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80067f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067f6:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80067f8:	7c0a      	ldrb	r2, [r1, #16]
 80067fa:	2a02      	cmp	r2, #2
 80067fc:	d008      	beq.n	8006810 <ICS_SwitchOnPWM+0x50>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80067fe:	f06f 0201 	mvn.w	r2, #1
 8006802:	611a      	str	r2, [r3, #16]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006804:	68da      	ldr	r2, [r3, #12]
 8006806:	f042 0201 	orr.w	r2, r2, #1
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

}
 800680a:	bc30      	pop	{r4, r5}
 800680c:	60da      	str	r2, [r3, #12]
 800680e:	4770      	bx	lr
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8006810:	6a18      	ldr	r0, [r3, #32]
 8006812:	f240 5255 	movw	r2, #1365	; 0x555
 8006816:	4382      	bics	r2, r0
 8006818:	d00c      	beq.n	8006834 <ICS_SwitchOnPWM+0x74>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800681a:	698c      	ldr	r4, [r1, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800681c:	694d      	ldr	r5, [r1, #20]
 800681e:	6a08      	ldr	r0, [r1, #32]
 8006820:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8006822:	0424      	lsls	r4, r4, #16
 8006824:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006826:	69cd      	ldr	r5, [r1, #28]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006828:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800682a:	0400      	lsls	r0, r0, #16
 800682c:	0412      	lsls	r2, r2, #16
 800682e:	61a8      	str	r0, [r5, #24]
 8006830:	61a2      	str	r2, [r4, #24]
}
 8006832:	e7e4      	b.n	80067fe <ICS_SwitchOnPWM+0x3e>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006834:	694c      	ldr	r4, [r1, #20]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006836:	69c8      	ldr	r0, [r1, #28]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006838:	6a4a      	ldr	r2, [r1, #36]	; 0x24
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800683a:	698d      	ldr	r5, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800683c:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800683e:	6a0c      	ldr	r4, [r1, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006840:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8006842:	6184      	str	r4, [r0, #24]
 8006844:	6191      	str	r1, [r2, #24]
}
 8006846:	e7da      	b.n	80067fe <ICS_SwitchOnPWM+0x3e>

08006848 <ICS_SwitchOffPWM>:
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006848:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800684a:	68da      	ldr	r2, [r3, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_UPDATE(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800684c:	68d1      	ldr	r1, [r2, #12]
 800684e:	f021 0101 	bic.w	r1, r1, #1
 8006852:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006854:	6c51      	ldr	r1, [r2, #68]	; 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 8006856:	f04f 0c00 	mov.w	ip, #0
 800685a:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800685e:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
 8006862:	6451      	str	r1, [r2, #68]	; 0x44

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006864:	7c19      	ldrb	r1, [r3, #16]
 8006866:	2902      	cmp	r1, #2
 8006868:	d009      	beq.n	800687e <ICS_SwitchOffPWM+0x36>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800686a:	f06f 0301 	mvn.w	r3, #1
 800686e:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006870:	6913      	ldr	r3, [r2, #16]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8006872:	07db      	lsls	r3, r3, #31
 8006874:	d5fc      	bpl.n	8006870 <ICS_SwitchOffPWM+0x28>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006876:	f06f 0301 	mvn.w	r3, #1
 800687a:	6113      	str	r3, [r2, #16]
 800687c:	4770      	bx	lr
{
 800687e:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006880:	699c      	ldr	r4, [r3, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006882:	695d      	ldr	r5, [r3, #20]
 8006884:	6a18      	ldr	r0, [r3, #32]
 8006886:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006888:	0424      	lsls	r4, r4, #16
 800688a:	61ac      	str	r4, [r5, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800688c:	69dd      	ldr	r5, [r3, #28]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800688e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006890:	0400      	lsls	r0, r0, #16
 8006892:	0409      	lsls	r1, r1, #16
 8006894:	f06f 0301 	mvn.w	r3, #1
 8006898:	61a8      	str	r0, [r5, #24]
 800689a:	61a1      	str	r1, [r4, #24]
 800689c:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800689e:	6913      	ldr	r3, [r2, #16]
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80068a0:	07d9      	lsls	r1, r3, #31
 80068a2:	d5fc      	bpl.n	800689e <ICS_SwitchOffPWM+0x56>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80068a4:	f06f 0301 	mvn.w	r3, #1
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  return;
}
 80068a8:	bc30      	pop	{r4, r5}
 80068aa:	6113      	str	r3, [r2, #16]
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop

080068b0 <ICS_CurrentReadingCalibration>:
{
 80068b0:	b538      	push	{r3, r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80068b2:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pHandle->PhaseAOffset = 0u;
 80068b4:	2200      	movs	r2, #0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80068b6:	68dc      	ldr	r4, [r3, #12]
  pHandle->PolarizationCounter = 0u;
 80068b8:	f880 2066 	strb.w	r2, [r0, #102]	; 0x66
  CLEAR_BIT(TIMx->CCER, Channels);
 80068bc:	6a23      	ldr	r3, [r4, #32]
  pHandle->PhaseAOffset = 0u;
 80068be:	65c2      	str	r2, [r0, #92]	; 0x5c
 80068c0:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 80068c4:	f023 0305 	bic.w	r3, r3, #5
{
 80068c8:	4605      	mov	r5, r0
  pHandle->PhaseBOffset = 0u;
 80068ca:	6602      	str	r2, [r0, #96]	; 0x60
 80068cc:	6223      	str	r3, [r4, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsCalibration;
 80068ce:	4b1e      	ldr	r3, [pc, #120]	; (8006948 <ICS_CurrentReadingCalibration+0x98>)
 80068d0:	6043      	str	r3, [r0, #4]
  ICS_SwitchOnPWM( &pHandle->_Super );
 80068d2:	f7ff ff75 	bl	80067c0 <ICS_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 80068d6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80068d8:	f105 0366 	add.w	r3, r5, #102	; 0x66
 80068dc:	7a12      	ldrb	r2, [r2, #8]
 80068de:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80068e2:	4620      	mov	r0, r4
 80068e4:	f000 f98c 	bl	8006c00 <waitForPolarizationEnd>
  ICS_SwitchOffPWM( &pHandle->_Super );
 80068e8:	4628      	mov	r0, r5
 80068ea:	f7ff ffad 	bl	8006848 <ICS_SwitchOffPWM>
  pHandle->PhaseBOffset >>= 3;
 80068ee:	e9d5 2317 	ldrd	r2, r3, [r5, #92]	; 0x5c
  pHandle->PhaseAOffset >>= 3;
 80068f2:	08d2      	lsrs	r2, r2, #3
  pHandle->PhaseBOffset >>= 3;
 80068f4:	08db      	lsrs	r3, r3, #3
 80068f6:	e9c5 2317 	strd	r2, r3, [r5, #92]	; 0x5c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80068fa:	69a2      	ldr	r2, [r4, #24]
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->Half_PWMPeriod );
 80068fc:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 8006900:	f022 0208 	bic.w	r2, r2, #8
 8006904:	61a2      	str	r2, [r4, #24]
 8006906:	69a2      	ldr	r2, [r4, #24]
 8006908:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800690c:	61a2      	str	r2, [r4, #24]
 800690e:	69e2      	ldr	r2, [r4, #28]
 8006910:	f022 0208 	bic.w	r2, r2, #8
 8006914:	61e2      	str	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006916:	6363      	str	r3, [r4, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006918:	63a3      	str	r3, [r4, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800691a:	63e3      	str	r3, [r4, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800691c:	69a3      	ldr	r3, [r4, #24]
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_GetPhaseCurrents;
 800691e:	4a0b      	ldr	r2, [pc, #44]	; (800694c <ICS_CurrentReadingCalibration+0x9c>)
 8006920:	f043 0308 	orr.w	r3, r3, #8
 8006924:	61a3      	str	r3, [r4, #24]
 8006926:	69a3      	ldr	r3, [r4, #24]
 8006928:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800692c:	61a3      	str	r3, [r4, #24]
 800692e:	69e3      	ldr	r3, [r4, #28]
 8006930:	f043 0308 	orr.w	r3, r3, #8
 8006934:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006936:	6a23      	ldr	r3, [r4, #32]
 8006938:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 800693c:	f043 0305 	orr.w	r3, r3, #5
 8006940:	6223      	str	r3, [r4, #32]
 8006942:	606a      	str	r2, [r5, #4]
}
 8006944:	bd38      	pop	{r3, r4, r5, pc}
 8006946:	bf00      	nop
 8006948:	08006729 	.word	0x08006729
 800694c:	08006691 	.word	0x08006691

08006950 <ICS_WriteTIMRegisters>:
*/
__weak uint16_t ICS_WriteTIMRegisters( PWMC_Handle_t * pHdl )
{
  uint16_t aux;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006950:	6f03      	ldr	r3, [r0, #112]	; 0x70

  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
  LL_TIM_OC_SetCompareCH2( TIMx, pHandle->_Super.CntPhB );
 8006952:	8e81      	ldrh	r1, [r0, #52]	; 0x34
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006954:	68db      	ldr	r3, [r3, #12]
  LL_TIM_OC_SetCompareCH3( TIMx, pHandle->_Super.CntPhC );
 8006956:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
{
 8006958:	b410      	push	{r4}
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
 800695a:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 800695c:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800695e:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006960:	63da      	str	r2, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8006962:	6a18      	ldr	r0, [r3, #32]
  else
  {
    aux = MC_NO_ERROR;
  }
  return aux;
}
 8006964:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006968:	f3c0 3000 	ubfx	r0, r0, #12, #1
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop

08006970 <ICS_TIMx_UP_IRQHandler>:
__weak void * ICS_TIMx_UP_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{
  uint32_t adcinjflags;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;

  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 8006970:	4923      	ldr	r1, [pc, #140]	; (8006a00 <ICS_TIMx_UP_IRQHandler+0x90>)
 8006972:	680b      	ldr	r3, [r1, #0]
{
 8006974:	b430      	push	{r4, r5}
  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 8006976:	f003 030c 	and.w	r3, r3, #12
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800697a:	6f04      	ldr	r4, [r0, #112]	; 0x70

  if ( adcinjflags == CONV_STARTED )
 800697c:	2b08      	cmp	r3, #8
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800697e:	68e2      	ldr	r2, [r4, #12]
  if ( adcinjflags == CONV_STARTED )
 8006980:	d028      	beq.n	80069d4 <ICS_TIMx_UP_IRQHandler+0x64>
    {
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
    }
    while ( adcinjflags != CONV_FINISHED );
  }
  else if ( adcinjflags == FLAGS_CLEARED )
 8006982:	b94b      	cbnz	r3, 8006998 <ICS_TIMx_UP_IRQHandler+0x28>
  {
    while ( ( TIMx->CNT ) < ( pHandle->pParams_str->Tw ) )
 8006984:	8861      	ldrh	r1, [r4, #2]
 8006986:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006988:	428b      	cmp	r3, r1
 800698a:	d3fc      	bcc.n	8006986 <ICS_TIMx_UP_IRQHandler+0x16>
    {}
    adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 800698c:	491c      	ldr	r1, [pc, #112]	; (8006a00 <ICS_TIMx_UP_IRQHandler+0x90>)
 800698e:	680b      	ldr	r3, [r1, #0]
 8006990:	f003 030c 	and.w	r3, r3, #12

    if ( adcinjflags == CONV_STARTED )
 8006994:	2b08      	cmp	r3, #8
 8006996:	d028      	beq.n	80069ea <ICS_TIMx_UP_IRQHandler+0x7a>
  MODIFY_REG(ADCx->CR2, ADC_CR2_JEXTSEL, (TriggerSource & ADC_CR2_JEXTSEL));
 8006998:	4d19      	ldr	r5, [pc, #100]	; (8006a00 <ICS_TIMx_UP_IRQHandler+0x90>)
 800699a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800699c:	68a9      	ldr	r1, [r5, #8]
 800699e:	f403 2c70 	and.w	ip, r3, #983040	; 0xf0000
 80069a2:	f421 2170 	bic.w	r1, r1, #983040	; 0xf0000
 80069a6:	ea41 010c 	orr.w	r1, r1, ip
 80069aa:	60a9      	str	r1, [r5, #8]
 80069ac:	4915      	ldr	r1, [pc, #84]	; (8006a04 <ICS_TIMx_UP_IRQHandler+0x94>)
 80069ae:	688b      	ldr	r3, [r1, #8]
 80069b0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80069b4:	ea43 030c 	orr.w	r3, r3, ip
 80069b8:	608b      	str	r3, [r1, #8]
  /* It re-initilize AD converter in run time when using dual MC */
  LL_ADC_INJ_SetTriggerSource(ADC1, pHandle->ADCTriggerSet);
  LL_ADC_INJ_SetTriggerSource(ADC2, pHandle->ADCTriggerSet);

  /* Change channels keeping equal to 1 element the sequencer lenght */
  ADC1->JSQR = ( uint32_t )( pHandle->pParams_str->IaChannel ) << 15;
 80069ba:	79a3      	ldrb	r3, [r4, #6]
 80069bc:	03db      	lsls	r3, r3, #15
 80069be:	63ab      	str	r3, [r5, #56]	; 0x38
  ADC2->JSQR = ( uint32_t )( pHandle->pParams_str->IbChannel ) << 15;
 80069c0:	79e3      	ldrb	r3, [r4, #7]
 80069c2:	03db      	lsls	r3, r3, #15
 80069c4:	638b      	str	r3, [r1, #56]	; 0x38
  SET_BIT(TIMx->CCER, Channels);
 80069c6:	6a13      	ldr	r3, [r2, #32]
 80069c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000

  LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH4 );

  return &( pHandle->_Super.Motor );
}
 80069cc:	3046      	adds	r0, #70	; 0x46
 80069ce:	bc30      	pop	{r4, r5}
 80069d0:	6213      	str	r3, [r2, #32]
 80069d2:	4770      	bx	lr
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 80069d4:	680b      	ldr	r3, [r1, #0]
 80069d6:	f003 030c 	and.w	r3, r3, #12
    while ( adcinjflags != CONV_FINISHED );
 80069da:	2b0c      	cmp	r3, #12
 80069dc:	d0dc      	beq.n	8006998 <ICS_TIMx_UP_IRQHandler+0x28>
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 80069de:	680b      	ldr	r3, [r1, #0]
 80069e0:	f003 030c 	and.w	r3, r3, #12
    while ( adcinjflags != CONV_FINISHED );
 80069e4:	2b0c      	cmp	r3, #12
 80069e6:	d1f5      	bne.n	80069d4 <ICS_TIMx_UP_IRQHandler+0x64>
 80069e8:	e7d6      	b.n	8006998 <ICS_TIMx_UP_IRQHandler+0x28>
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 80069ea:	680b      	ldr	r3, [r1, #0]
 80069ec:	f003 030c 	and.w	r3, r3, #12
      while ( adcinjflags != CONV_FINISHED );
 80069f0:	2b0c      	cmp	r3, #12
 80069f2:	d0d1      	beq.n	8006998 <ICS_TIMx_UP_IRQHandler+0x28>
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 80069f4:	680b      	ldr	r3, [r1, #0]
 80069f6:	f003 030c 	and.w	r3, r3, #12
      while ( adcinjflags != CONV_FINISHED );
 80069fa:	2b0c      	cmp	r3, #12
 80069fc:	d1f5      	bne.n	80069ea <ICS_TIMx_UP_IRQHandler+0x7a>
 80069fe:	e7cb      	b.n	8006998 <ICS_TIMx_UP_IRQHandler+0x28>
 8006a00:	40012000 	.word	0x40012000
 8006a04:	40012100 	.word	0x40012100

08006a08 <ICS_BRK_IRQHandler>:
 * @retval none
 */
__weak void * ICS_BRK_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006a08:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8006a0a:	7c1a      	ldrb	r2, [r3, #16]
 8006a0c:	2a02      	cmp	r2, #2
 8006a0e:	d004      	beq.n	8006a1a <ICS_BRK_IRQHandler+0x12>
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
  }
  pHandle->OverCurrentFlag = true;
 8006a10:	2301      	movs	r3, #1
 8006a12:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c

  return &( pHandle->_Super.Motor );
}
 8006a16:	3046      	adds	r0, #70	; 0x46
 8006a18:	4770      	bx	lr
{
 8006a1a:	b430      	push	{r4, r5}
 8006a1c:	699c      	ldr	r4, [r3, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006a1e:	695d      	ldr	r5, [r3, #20]
 8006a20:	6a19      	ldr	r1, [r3, #32]
 8006a22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a24:	0424      	lsls	r4, r4, #16
 8006a26:	61ac      	str	r4, [r5, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006a28:	69dd      	ldr	r5, [r3, #28]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006a2a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006a2c:	0409      	lsls	r1, r1, #16
 8006a2e:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 8006a30:	2301      	movs	r3, #1
 8006a32:	61a9      	str	r1, [r5, #24]
}
 8006a34:	3046      	adds	r0, #70	; 0x46
 8006a36:	61a2      	str	r2, [r4, #24]
  pHandle->OverCurrentFlag = true;
 8006a38:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
}
 8006a3c:	bc30      	pop	{r4, r5}
 8006a3e:	4770      	bx	lr

08006a40 <ICS_IsOverCurrentOccurred>:
__weak uint16_t ICS_IsOverCurrentOccurred( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  uint16_t retval = MC_NO_FAULTS;

  if ( pHandle->OverCurrentFlag == true )
 8006a40:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 8006a44:	b90b      	cbnz	r3, 8006a4a <ICS_IsOverCurrentOccurred+0xa>
  uint16_t retval = MC_NO_FAULTS;
 8006a46:	4618      	mov	r0, r3
  {
    retval = MC_BREAK_IN;
    pHandle->OverCurrentFlag = false;
  }
  return retval;
}
 8006a48:	4770      	bx	lr
    pHandle->OverCurrentFlag = false;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
    retval = MC_BREAK_IN;
 8006a50:	2040      	movs	r0, #64	; 0x40
 8006a52:	4770      	bx	lr

08006a54 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8006a54:	b510      	push	{r4, lr}
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
 8006a56:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 8006a5a:	4604      	mov	r4, r0
    pHandle->hMeasBuffer[i] = 0;
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	f001 fa9f 	bl	8007fa0 <memset>
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8006a62:	2300      	movs	r3, #0
 8006a64:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8006a68:	bd10      	pop	{r4, pc}
 8006a6a:	bf00      	nop

08006a6c <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8006a6c:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8006a70:	1c53      	adds	r3, r2, #1
 8006a72:	b29b      	uxth	r3, r3
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8006a74:	2b7f      	cmp	r3, #127	; 0x7f
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8006a76:	bf88      	it	hi
 8006a78:	2300      	movhi	r3, #0
{
 8006a7a:	b500      	push	{lr}
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8006a7c:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8006a80:	f100 0efe 	add.w	lr, r0, #254	; 0xfe
 8006a84:	f8a0 2102 	strh.w	r2, [r0, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8006a88:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
  int32_t wAux = 0;
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	1e83      	subs	r3, r0, #2
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8006a90:	f933 cf02 	ldrsh.w	ip, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8006a94:	4573      	cmp	r3, lr
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8006a96:	4462      	add	r2, ip
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8006a98:	d1fa      	bne.n	8006a90 <MPM_CalcElMotorPower+0x24>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8006a9a:	2a00      	cmp	r2, #0
 8006a9c:	bfb8      	it	lt
 8006a9e:	327f      	addlt	r2, #127	; 0x7f
 8006aa0:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8006aa2:	f8a0 2104 	strh.w	r2, [r0, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8006aa6:	4608      	mov	r0, r1
 8006aa8:	f85d fb04 	ldr.w	pc, [sp], #4

08006aac <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8006aac:	8a03      	ldrh	r3, [r0, #16]
 8006aae:	8b42      	ldrh	r2, [r0, #26]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d306      	bcc.n	8006ac2 <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8006ab4:	8b82      	ldrh	r2, [r0, #28]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d901      	bls.n	8006abe <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 8006aba:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 8006abc:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 8006abe:	8ac0      	ldrh	r0, [r0, #22]
 8006ac0:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8006ac2:	2008      	movs	r0, #8
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop

08006ac8 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8006ac8:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8006aca:	7803      	ldrb	r3, [r0, #0]
{
 8006acc:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8006ace:	b113      	cbz	r3, 8006ad6 <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8006ad0:	2000      	movs	r0, #0
 8006ad2:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 8006ad4:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8006ad6:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8006ada:	f7fd f9e1 	bl	8003ea0 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8006ade:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ae2:	4298      	cmp	r0, r3
 8006ae4:	d007      	beq.n	8006af6 <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8006ae6:	8b23      	ldrh	r3, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8006ae8:	8a22      	ldrh	r2, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8006aea:	1e59      	subs	r1, r3, #1
      wtemp += hAux;
 8006aec:	fb01 0002 	mla	r0, r1, r2, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8006af0:	fbb0 f0f3 	udiv	r0, r0, r3
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8006af4:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8006af6:	4620      	mov	r0, r4
 8006af8:	f7ff ffd8 	bl	8006aac <NTC_SetFaultState>
 8006afc:	82e0      	strh	r0, [r4, #22]
}
 8006afe:	bd10      	pop	{r4, pc}

08006b00 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8006b00:	6081      	str	r1, [r0, #8]

  return;
}
 8006b02:	4770      	bx	lr

08006b04 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8006b04:	8b40      	ldrh	r0, [r0, #26]
 8006b06:	4770      	bx	lr

08006b08 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006b08:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8006b0c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8006b10:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
{
 8006b14:	b510      	push	{r4, lr}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006b16:	fb01 f303 	mul.w	r3, r1, r3
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8006b1a:	f9b0 e016 	ldrsh.w	lr, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 8006b1e:	b162      	cbz	r2, 8006b3a <PI_Controller+0x32>
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8006b20:	fb01 f202 	mul.w	r2, r1, r2
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8006b24:	6881      	ldr	r1, [r0, #8]

    if ( wIntegral_sum_temp < 0 )
 8006b26:	188c      	adds	r4, r1, r2
 8006b28:	d420      	bmi.n	8006b6c <PI_Controller+0x64>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8006b2a:	2900      	cmp	r1, #0
 8006b2c:	db2a      	blt.n	8006b84 <PI_Controller+0x7c>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8006b2e:	68c2      	ldr	r2, [r0, #12]
 8006b30:	42a2      	cmp	r2, r4
 8006b32:	db02      	blt.n	8006b3a <PI_Controller+0x32>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8006b34:	6902      	ldr	r2, [r0, #16]
 8006b36:	42a2      	cmp	r2, r4
 8006b38:	dd22      	ble.n	8006b80 <PI_Controller+0x78>
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8006b3a:	8b81      	ldrh	r1, [r0, #28]
 8006b3c:	410b      	asrs	r3, r1
 8006b3e:	8bc1      	ldrh	r1, [r0, #30]
 8006b40:	fa42 f101 	asr.w	r1, r2, r1
 8006b44:	440b      	add	r3, r1
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8006b46:	459c      	cmp	ip, r3
 8006b48:	da05      	bge.n	8006b56 <PI_Controller+0x4e>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8006b4a:	ebac 0303 	sub.w	r3, ip, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8006b4e:	441a      	add	r2, r3
 8006b50:	6082      	str	r2, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8006b52:	4660      	mov	r0, ip
 8006b54:	bd10      	pop	{r4, pc}
  else if ( wOutput_32 < hLowerOutputLimit )
 8006b56:	459e      	cmp	lr, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
 8006b58:	bfc9      	itett	gt
 8006b5a:	ebae 0303 	subgt.w	r3, lr, r3
  return ( ( int16_t )( wOutput_32 ) );
 8006b5e:	fa0f fc83 	sxthle.w	ip, r3
  pHandle->wIntegralTerm += wDischarge;
 8006b62:	18d2      	addgt	r2, r2, r3
 8006b64:	46f4      	movgt	ip, lr
 8006b66:	6082      	str	r2, [r0, #8]
}
 8006b68:	4660      	mov	r0, ip
 8006b6a:	bd10      	pop	{r4, pc}
      if ( pHandle->wIntegralTerm > 0 )
 8006b6c:	2900      	cmp	r1, #0
 8006b6e:	ddde      	ble.n	8006b2e <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 8006b70:	2a00      	cmp	r2, #0
 8006b72:	dddc      	ble.n	8006b2e <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8006b74:	68c2      	ldr	r2, [r0, #12]
 8006b76:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b7a:	428a      	cmp	r2, r1
 8006b7c:	d1dd      	bne.n	8006b3a <PI_Controller+0x32>
          wIntegral_sum_temp = INT32_MAX;
 8006b7e:	4614      	mov	r4, r2
 8006b80:	4622      	mov	r2, r4
 8006b82:	e7da      	b.n	8006b3a <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 8006b84:	4902      	ldr	r1, [pc, #8]	; (8006b90 <PI_Controller+0x88>)
 8006b86:	ea34 0422 	bics.w	r4, r4, r2, asr #32
 8006b8a:	bf28      	it	cs
 8006b8c:	460c      	movcs	r4, r1
 8006b8e:	e7ce      	b.n	8006b2e <PI_Controller+0x26>
 8006b90:	80000001 	.word	0x80000001

08006b94 <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8006b94:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
{
 8006b98:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8006b9a:	8b11      	ldrh	r1, [r2, #24]
 8006b9c:	89d4      	ldrh	r4, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8006b9e:	8993      	ldrh	r3, [r2, #12]
 8006ba0:	8ad2      	ldrh	r2, [r2, #22]
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006ba2:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
{
 8006ba6:	4605      	mov	r5, r0
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8006ba8:	fb14 f401 	smulbb	r4, r4, r1
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006bac:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8006bb0:	fb13 4402 	smlabb	r4, r3, r2, r4
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006bb4:	f7ff fd20 	bl	80065f8 <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 8006bb8:	1e23      	subs	r3, r4, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006bba:	490f      	ldr	r1, [pc, #60]	; (8006bf8 <PQD_CalcElMotorPower+0x64>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006bbc:	fb06 f000 	mul.w	r0, r6, r0
  wAux /= 65536;
 8006bc0:	bfb8      	it	lt
 8006bc2:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006bc6:	ea4f 72e0 	mov.w	r2, r0, asr #31
  wAux /= 65536;
 8006bca:	bfb8      	it	lt
 8006bcc:	33ff      	addlt	r3, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006bce:	fb81 1000 	smull	r1, r0, r1, r0
 8006bd2:	ebc2 10a0 	rsb	r0, r2, r0, asr #6
  wAux /= 65536;
 8006bd6:	141b      	asrs	r3, r3, #16

  wAux3 = wAux * wAux2;
 8006bd8:	fb00 f303 	mul.w	r3, r0, r3
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8006bdc:	4907      	ldr	r1, [pc, #28]	; (8006bfc <PQD_CalcElMotorPower+0x68>)
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8006bde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006be2:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8006be4:	fb81 2103 	smull	r2, r1, r1, r3
 8006be8:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8006bea:	4628      	mov	r0, r5
 8006bec:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8006bf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8006bf4:	f7ff bf3a 	b.w	8006a6c <MPM_CalcElMotorPower>
 8006bf8:	1b4e81b5 	.word	0x1b4e81b5
 8006bfc:	66666667 	.word	0x66666667

08006c00 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8006c00:	b570      	push	{r4, r5, r6, lr}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 8006c02:	6804      	ldr	r4, [r0, #0]
  if (counter_mode == 0U)
 8006c04:	f014 0460 	ands.w	r4, r4, #96	; 0x60
 8006c08:	d11c      	bne.n	8006c44 <waitForPolarizationEnd+0x44>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8006c0a:	6804      	ldr	r4, [r0, #0]
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8006c0c:	3201      	adds	r2, #1
 8006c0e:	0855      	lsrs	r5, r2, #1
 8006c10:	016d      	lsls	r5, r5, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8006c12:	f06f 0602 	mvn.w	r6, #2
 8006c16:	6106      	str	r6, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8006c18:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 8006c1a:	f893 c000 	ldrb.w	ip, [r3]
 8006c1e:	f1bc 0f0f 	cmp.w	ip, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8006c22:	f102 0e01 	add.w	lr, r2, #1
  while (*cnt < NB_CONVERSIONS)
 8006c26:	d80c      	bhi.n	8006c42 <waitForPolarizationEnd+0x42>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8006c28:	6904      	ldr	r4, [r0, #16]
 8006c2a:	07a4      	lsls	r4, r4, #30
 8006c2c:	d5f5      	bpl.n	8006c1a <waitForPolarizationEnd+0x1a>
      hCalibrationPeriodCounter++;
 8006c2e:	fa1f f28e 	uxth.w	r2, lr
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8006c32:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8006c34:	6106      	str	r6, [r0, #16]
 8006c36:	d8f0      	bhi.n	8006c1a <waitForPolarizationEnd+0x1a>
      {
        if (*cnt < NB_CONVERSIONS)
 8006c38:	781c      	ldrb	r4, [r3, #0]
 8006c3a:	2c0f      	cmp	r4, #15
 8006c3c:	d8ed      	bhi.n	8006c1a <waitForPolarizationEnd+0x1a>
        {
          *SWerror = 1u;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8006c42:	bd70      	pop	{r4, r5, r6, pc}
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8006c44:	2c60      	cmp	r4, #96	; 0x60
 8006c46:	d1e1      	bne.n	8006c0c <waitForPolarizationEnd+0xc>
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8006c48:	3201      	adds	r2, #1
 8006c4a:	0155      	lsls	r5, r2, #5
 8006c4c:	e7e1      	b.n	8006c12 <waitForPolarizationEnd+0x12>
 8006c4e:	bf00      	nop

08006c50 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8006c50:	6843      	ldr	r3, [r0, #4]
 8006c52:	4718      	bx	r3

08006c54 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8006c54:	b510      	push	{r4, lr}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006c56:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8006c5a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
 8006c5c:	b082      	sub	sp, #8
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006c5e:	ea4f 4c21 	mov.w	ip, r1, asr #16
{
 8006c62:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006c64:	fb04 fc0c 	mul.w	ip, r4, ip
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8006c68:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006c6a:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8006c6e:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8006c72:	eb01 034c 	add.w	r3, r1, ip, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006c76:	ebc1 014c 	rsb	r1, r1, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8006c7a:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006c7e:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8006c82:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006c86:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8006c8a:	ea4f 0e6e 	mov.w	lr, lr, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006c8e:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 8006c92:	db7d      	blt.n	8006d90 <PWMC_SetPhaseVoltage+0x13c>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8006c94:	f1b1 3fff 	cmp.w	r1, #4294967295
 8006c98:	db51      	blt.n	8006d3e <PWMC_SetPhaseVoltage+0xea>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006c9a:	ebbe 0e02 	subs.w	lr, lr, r2
 8006c9e:	bf44      	itt	mi
 8006ca0:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8006ca4:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8006ca8:	2900      	cmp	r1, #0
 8006caa:	bfbc      	itt	lt
 8006cac:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8006cb0:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	bfb8      	it	lt
 8006cb8:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006cbc:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8006cc0:	eb02 42ae 	add.w	r2, r2, lr, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006cc4:	bfb8      	it	lt
 8006cc6:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 8006cca:	f04f 0c01 	mov.w	ip, #1
      wTimePhB = wTimePhA + wZ / 131072;
 8006cce:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006cd2:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 8006cd6:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
 8006cda:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8006cdc:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhC;
 8006cde:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8006ce2:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 8006ce6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8006cea:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8006cee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006cf2:	b292      	uxth	r2, r2
 8006cf4:	b289      	uxth	r1, r1
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8006cfa:	8642      	strh	r2, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8006cfc:	8681      	strh	r1, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8006cfe:	86c3      	strh	r3, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 8006d00:	d118      	bne.n	8006d34 <PWMC_SetPhaseVoltage+0xe0>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8006d02:	f9b0 4048 	ldrsh.w	r4, [r0, #72]	; 0x48
 8006d06:	2c00      	cmp	r4, #0
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 8006d08:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 8006d0c:	bfcc      	ite	gt
 8006d0e:	1912      	addgt	r2, r2, r4
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8006d10:	1b12      	suble	r2, r2, r4
 8006d12:	b292      	uxth	r2, r2
 8006d14:	8642      	strh	r2, [r0, #50]	; 0x32
    }

    if ( pHandle->Ib > 0 )
 8006d16:	f9b0 204a 	ldrsh.w	r2, [r0, #74]	; 0x4a
 8006d1a:	2a00      	cmp	r2, #0
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8006d1c:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
      pHandle->CntPhB += pHandle->DTCompCnt;
 8006d20:	bfcc      	ite	gt
 8006d22:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8006d24:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 8006d26:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8006d28:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8006d2a:	bfcc      	ite	gt
 8006d2c:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8006d2e:	1b1b      	suble	r3, r3, r4
 8006d30:	8681      	strh	r1, [r0, #52]	; 0x34
 8006d32:	86c3      	strh	r3, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8006d34:	6983      	ldr	r3, [r0, #24]
}
 8006d36:	b002      	add	sp, #8
 8006d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8006d3c:	4718      	bx	r3
      if ( wX <= 0 )
 8006d3e:	f1bc 0f00 	cmp.w	ip, #0
 8006d42:	dd4b      	ble.n	8006ddc <PWMC_SetPhaseVoltage+0x188>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006d44:	ebbc 0e02 	subs.w	lr, ip, r2
 8006d48:	bf44      	itt	mi
 8006d4a:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8006d4e:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8006d52:	2900      	cmp	r1, #0
 8006d54:	bfb8      	it	lt
 8006d56:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 8006d5a:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 8006d5e:	bfb8      	it	lt
 8006d60:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 8006d64:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006d68:	08a2      	lsrs	r2, r4, #2
        wTimePhC = wTimePhB - wX / 131072;
 8006d6a:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006d6e:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006d72:	bfb8      	it	lt
 8006d74:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8006d78:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006d7c:	bfb8      	it	lt
 8006d7e:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8006d82:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhA;
 8006d86:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8006d88:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 8006d8a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8006d8e:	e7a8      	b.n	8006ce2 <PWMC_SetPhaseVoltage+0x8e>
    if ( wZ < 0 )
 8006d90:	f1b1 3fff 	cmp.w	r1, #4294967295
 8006d94:	db6f      	blt.n	8006e76 <PWMC_SetPhaseVoltage+0x222>
      if ( wX <= 0 )
 8006d96:	f1bc 0f00 	cmp.w	ip, #0
 8006d9a:	dd46      	ble.n	8006e2a <PWMC_SetPhaseVoltage+0x1d6>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006d9c:	ebbe 0e0c 	subs.w	lr, lr, ip
 8006da0:	bf48      	it	mi
 8006da2:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8006da6:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006daa:	bf48      	it	mi
 8006dac:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	bfb8      	it	lt
 8006db4:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8006db8:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006dbc:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8006dc0:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8006dc4:	bfb8      	it	lt
 8006dc6:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8006dca:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8006dce:	eb03 416c 	add.w	r1, r3, ip, asr #17
        pHandle->lowDuty = wTimePhB;
 8006dd2:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8006dd4:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8006dd6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8006dda:	e782      	b.n	8006ce2 <PWMC_SetPhaseVoltage+0x8e>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006ddc:	ebbe 0e0c 	subs.w	lr, lr, ip
 8006de0:	bf44      	itt	mi
 8006de2:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8006de6:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	bfb8      	it	lt
 8006dee:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 8006df2:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 8006df6:	bfb8      	it	lt
 8006df8:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 8006dfc:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 8006e00:	f1bc 0100 	subs.w	r1, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006e04:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8006e08:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8006e0c:	bfb8      	it	lt
 8006e0e:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8006e12:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8006e16:	bfb8      	it	lt
 8006e18:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8006e1c:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->lowDuty = wTimePhA;
 8006e20:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8006e22:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 8006e24:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8006e28:	e75b      	b.n	8006ce2 <PWMC_SetPhaseVoltage+0x8e>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006e2a:	ebbc 0e02 	subs.w	lr, ip, r2
 8006e2e:	bf44      	itt	mi
 8006e30:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8006e34:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8006e38:	2900      	cmp	r1, #0
 8006e3a:	bfb8      	it	lt
 8006e3c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 8006e40:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 8006e44:	bfb8      	it	lt
 8006e46:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 8006e4a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006e4e:	08a2      	lsrs	r2, r4, #2
        wTimePhC = wTimePhB - wX / 131072;
 8006e50:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006e54:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006e58:	bfb8      	it	lt
 8006e5a:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8006e5e:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006e62:	bfb8      	it	lt
 8006e64:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8006e68:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 8006e6c:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8006e6e:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8006e70:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8006e74:	e735      	b.n	8006ce2 <PWMC_SetPhaseVoltage+0x8e>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006e76:	ebbe 0e02 	subs.w	lr, lr, r2
 8006e7a:	bf44      	itt	mi
 8006e7c:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8006e80:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8006e84:	2900      	cmp	r1, #0
 8006e86:	bfbc      	itt	lt
 8006e88:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8006e8c:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	bfb8      	it	lt
 8006e94:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006e98:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8006e9c:	eb02 42ae 	add.w	r2, r2, lr, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006ea0:	bfb8      	it	lt
 8006ea2:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 8006ea6:	f04f 0c04 	mov.w	ip, #4
      wTimePhB = wTimePhA + wZ / 131072;
 8006eaa:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006eae:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 8006eb2:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 8006eb6:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8006eb8:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 8006eba:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8006ebe:	e710      	b.n	8006ce2 <PWMC_SetPhaseVoltage+0x8e>

08006ec0 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8006ec0:	6883      	ldr	r3, [r0, #8]
 8006ec2:	4718      	bx	r3

08006ec4 <PWMC_SwitchOnPWM>:
  * @brief  Switches PWM generation on
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOnPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOnPwm( pHandle );
 8006ec4:	68c3      	ldr	r3, [r0, #12]
 8006ec6:	4718      	bx	r3

08006ec8 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8006ec8:	b510      	push	{r4, lr}
 8006eca:	4604      	mov	r4, r0
 8006ecc:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 8006ece:	b199      	cbz	r1, 8006ef8 <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8006ed0:	2901      	cmp	r1, #1
 8006ed2:	d002      	beq.n	8006eda <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8006ed4:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8006ed6:	b002      	add	sp, #8
 8006ed8:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8006eda:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8006ede:	b1cb      	cbz	r3, 8006f14 <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	9101      	str	r1, [sp, #4]
 8006ee6:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1f2      	bne.n	8006ed4 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 8006eee:	6903      	ldr	r3, [r0, #16]
 8006ef0:	4798      	blx	r3
        retVal = true;
 8006ef2:	9901      	ldr	r1, [sp, #4]
 8006ef4:	4608      	mov	r0, r1
 8006ef6:	e7ee      	b.n	8006ed6 <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 8006ef8:	f7ff ffe2 	bl	8006ec0 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8006efc:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8006f00:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1e5      	bne.n	8006ed4 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8006f08:	4620      	mov	r0, r4
 8006f0a:	6923      	ldr	r3, [r4, #16]
 8006f0c:	4798      	blx	r3
      retVal = true;
 8006f0e:	2001      	movs	r0, #1
}
 8006f10:	b002      	add	sp, #8
 8006f12:	bd10      	pop	{r4, pc}
      retVal = true;
 8006f14:	4608      	mov	r0, r1
}
 8006f16:	b002      	add	sp, #8
 8006f18:	bd10      	pop	{r4, pc}
 8006f1a:	bf00      	nop

08006f1c <PWMC_TurnOnLowSides>:
  *
  * @param  pHandle: handle on the target instance of the PWMC component
  */
__weak void PWMC_TurnOnLowSides( PWMC_Handle_t * pHandle )
{
  pHandle->pFctTurnOnLowSides( pHandle );
 8006f1c:	6943      	ldr	r3, [r0, #20]
 8006f1e:	4718      	bx	r3

08006f20 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8006f20:	69c3      	ldr	r3, [r0, #28]
 8006f22:	4718      	bx	r3

08006f24 <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8006f24:	88c3      	ldrh	r3, [r0, #6]
 8006f26:	8b42      	ldrh	r2, [r0, #26]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d305      	bcc.n	8006f38 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8006f2c:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 8006f2e:	4298      	cmp	r0, r3
 8006f30:	bf8c      	ite	hi
 8006f32:	2004      	movhi	r0, #4
 8006f34:	2000      	movls	r0, #0
 8006f36:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 8006f38:	2002      	movs	r0, #2
  }
  return fault;
}
 8006f3a:	4770      	bx	lr

08006f3c <RVBS_CalcAvVbus>:
{
 8006f3c:	b570      	push	{r4, r5, r6, lr}
 8006f3e:	4604      	mov	r4, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8006f40:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8006f44:	f7fc ffac 	bl	8003ea0 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 8006f48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f4c:	4298      	cmp	r0, r3
 8006f4e:	d01b      	beq.n	8006f88 <RVBS_CalcAvVbus+0x4c>
    pHandle->aBuffer[pHandle->index] = hAux;
 8006f50:	6a26      	ldr	r6, [r4, #32]
 8006f52:	f894 e025 	ldrb.w	lr, [r4, #37]	; 0x25
 8006f56:	f826 001e 	strh.w	r0, [r6, lr, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8006f5a:	8b25      	ldrh	r5, [r4, #24]
 8006f5c:	b1cd      	cbz	r5, 8006f92 <RVBS_CalcAvVbus+0x56>
 8006f5e:	2300      	movs	r3, #0
    wtemp = 0;
 8006f60:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 8006f62:	f836 c013 	ldrh.w	ip, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8006f66:	3301      	adds	r3, #1
 8006f68:	b2d9      	uxtb	r1, r3
 8006f6a:	42a9      	cmp	r1, r5
      wtemp += pHandle->aBuffer[i];
 8006f6c:	4462      	add	r2, ip
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8006f6e:	460b      	mov	r3, r1
 8006f70:	d3f7      	bcc.n	8006f62 <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 8006f72:	fbb2 f2f5 	udiv	r2, r2, r5
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8006f76:	1e6b      	subs	r3, r5, #1
 8006f78:	459e      	cmp	lr, r3
    pHandle->_Super.LatestConv = hAux;
 8006f7a:	80a0      	strh	r0, [r4, #4]
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8006f7c:	80e2      	strh	r2, [r4, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8006f7e:	da0a      	bge.n	8006f96 <RVBS_CalcAvVbus+0x5a>
      pHandle->index++;
 8006f80:	f10e 0e01 	add.w	lr, lr, #1
 8006f84:	f884 e025 	strb.w	lr, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f7ff ffcb 	bl	8006f24 <RVBS_CheckFaultState>
 8006f8e:	8120      	strh	r0, [r4, #8]
}
 8006f90:	bd70      	pop	{r4, r5, r6, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8006f92:	80e5      	strh	r5, [r4, #6]
    pHandle->_Super.LatestConv = hAux;
 8006f94:	80a0      	strh	r0, [r4, #4]
      pHandle->index = 0;
 8006f96:	2300      	movs	r3, #0
 8006f98:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f7ff ffc1 	bl	8006f24 <RVBS_CheckFaultState>
 8006fa2:	8120      	strh	r0, [r4, #8]
}
 8006fa4:	bd70      	pop	{r4, r5, r6, pc}
 8006fa6:	bf00      	nop

08006fa8 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8006fa8:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8006faa:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 8006fac:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8006fb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 8006fb4:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 8006fb6:	4770      	bx	lr

08006fb8 <REMNG_Calc>:
__weak int32_t REMNG_Calc( RampExtMngr_Handle_t * pHandle )
{
  int32_t ret_val;
  int32_t current_ref;

  current_ref = pHandle->Ext;
 8006fb8:	e9d0 3102 	ldrd	r3, r1, [r0, #8]

  /* Update the variable and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8006fbc:	2901      	cmp	r1, #1
 8006fbe:	d90c      	bls.n	8006fda <REMNG_Calc+0x22>
{
 8006fc0:	b410      	push	{r4}
  {
    /* Increment/decrement the reference value. */
    current_ref += pHandle->IncDecAmount;
 8006fc2:	e9d0 4204 	ldrd	r4, r2, [r0, #16]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep --;
 8006fc6:	3901      	subs	r1, #1
    current_ref += pHandle->IncDecAmount;
 8006fc8:	4423      	add	r3, r4
    pHandle->RampRemainingStep --;
 8006fca:	60c1      	str	r1, [r0, #12]
  else
  {
    /* Do nothing. */
  }

  pHandle->Ext = current_ref;
 8006fcc:	6083      	str	r3, [r0, #8]

#ifdef FASTDIV
  ret_val = FD_FastDiv( & ( pHandle->fd ), pHandle->Ext, ( int32_t )( pHandle->ScalingFactor ) );
#else
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8006fce:	fb93 f2f2 	sdiv	r2, r3, r2
#endif

  return ret_val;
}
 8006fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fd6:	4610      	mov	r0, r2
 8006fd8:	4770      	bx	lr
  else if ( pHandle->RampRemainingStep == 1u )
 8006fda:	d005      	beq.n	8006fe8 <REMNG_Calc+0x30>
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8006fdc:	6942      	ldr	r2, [r0, #20]
  pHandle->Ext = current_ref;
 8006fde:	6083      	str	r3, [r0, #8]
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8006fe0:	fb93 f2f2 	sdiv	r2, r3, r2
}
 8006fe4:	4610      	mov	r0, r2
 8006fe6:	4770      	bx	lr
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8006fe8:	6842      	ldr	r2, [r0, #4]
 8006fea:	6943      	ldr	r3, [r0, #20]
    pHandle->RampRemainingStep = 0u;
 8006fec:	2100      	movs	r1, #0
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8006fee:	fb02 f303 	mul.w	r3, r2, r3
    pHandle->RampRemainingStep = 0u;
 8006ff2:	60c1      	str	r1, [r0, #12]
  pHandle->Ext = current_ref;
 8006ff4:	6083      	str	r3, [r0, #8]
}
 8006ff6:	4610      	mov	r0, r2
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop

08006ffc <REMNG_RampCompleted>:
  * @retval bool It returns true if the ramp is completed, false otherwise.
  */
__weak bool REMNG_RampCompleted( RampExtMngr_Handle_t * pHandle )
{
  bool retVal = false;
  if ( pHandle->RampRemainingStep == 0u )
 8006ffc:	68c0      	ldr	r0, [r0, #12]
  {
    retVal = true;
  }
  return retVal;
}
 8006ffe:	fab0 f080 	clz	r0, r0
 8007002:	0940      	lsrs	r0, r0, #5
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop

08007008 <getScalingFactor>:
  uint32_t TargetAbs;
  int32_t aux;

  if ( Target < 0 )
  {
    aux = -Target;
 8007008:	2800      	cmp	r0, #0
 800700a:	bfb8      	it	lt
 800700c:	4240      	neglt	r0, r0
{
 800700e:	2301      	movs	r3, #1
  {
    TargetAbs = ( uint32_t )( Target );
  }
  for ( i = 1u; i < 32u; i++ )
  {
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8007010:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007014:	e002      	b.n	800701c <getScalingFactor+0x14>
  for ( i = 1u; i < 32u; i++ )
 8007016:	3301      	adds	r3, #1
 8007018:	2b20      	cmp	r3, #32
 800701a:	d007      	beq.n	800702c <getScalingFactor+0x24>
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 800701c:	fa21 f203 	lsr.w	r2, r1, r3
    if ( TargetAbs >= limit )
 8007020:	4290      	cmp	r0, r2
 8007022:	d3f8      	bcc.n	8007016 <getScalingFactor+0xe>
    {
      break;
    }
  }
  return ( ( uint32_t )( 1u ) << ( i - 1u ) );
 8007024:	3b01      	subs	r3, #1
 8007026:	2001      	movs	r0, #1
 8007028:	4098      	lsls	r0, r3
}
 800702a:	4770      	bx	lr
 800702c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop

08007034 <REMNG_ExecRamp>:
{
 8007034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007038:	4605      	mov	r5, r0
 800703a:	460e      	mov	r6, r1
  if ( Durationms == 0u )
 800703c:	4614      	mov	r4, r2
 800703e:	b95a      	cbnz	r2, 8007058 <REMNG_ExecRamp+0x24>
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 8007040:	4608      	mov	r0, r1
 8007042:	f7ff ffe1 	bl	8007008 <getScalingFactor>
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8007046:	fb00 f606 	mul.w	r6, r0, r6
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 800704a:	6168      	str	r0, [r5, #20]
    pHandle->RampRemainingStep = 0u;
 800704c:	e9c5 6402 	strd	r6, r4, [r5, #8]
    pHandle->IncDecAmount = 0;
 8007050:	612c      	str	r4, [r5, #16]
}
 8007052:	2001      	movs	r0, #1
 8007054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8007058:	6943      	ldr	r3, [r0, #20]
 800705a:	6887      	ldr	r7, [r0, #8]
 800705c:	fb97 f7f3 	sdiv	r7, r7, r3
    uint32_t wScalingFactor = getScalingFactor( TargetFinal - current_ref );
 8007060:	eba1 0807 	sub.w	r8, r1, r7
 8007064:	4640      	mov	r0, r8
 8007066:	f7ff ffcf 	bl	8007008 <getScalingFactor>
 800706a:	4682      	mov	sl, r0
    uint32_t wScalingFactor2 = getScalingFactor( current_ref );
 800706c:	4638      	mov	r0, r7
 800706e:	f7ff ffcb 	bl	8007008 <getScalingFactor>
 8007072:	4681      	mov	r9, r0
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 8007074:	4630      	mov	r0, r6
 8007076:	f7ff ffc7 	bl	8007008 <getScalingFactor>
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 800707a:	682a      	ldr	r2, [r5, #0]
    pHandle->TargetFinal = TargetFinal;
 800707c:	606e      	str	r6, [r5, #4]
    if ( wScalingFactor <  wScalingFactor2 )
 800707e:	45ca      	cmp	sl, r9
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8007080:	fb02 f404 	mul.w	r4, r2, r4
    aux /= 1000u;
 8007084:	4a0c      	ldr	r2, [pc, #48]	; (80070b8 <REMNG_ExecRamp+0x84>)
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 8007086:	4603      	mov	r3, r0
      if ( wScalingFactor < wScalingFactor3 )
 8007088:	bf2c      	ite	cs
 800708a:	4648      	movcs	r0, r9
 800708c:	4650      	movcc	r0, sl
      if ( wScalingFactor2 < wScalingFactor3 )
 800708e:	4298      	cmp	r0, r3
    aux /= 1000u;
 8007090:	fba2 2404 	umull	r2, r4, r2, r4
 8007094:	bf28      	it	cs
 8007096:	4618      	movcs	r0, r3
 8007098:	09a4      	lsrs	r4, r4, #6
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 800709a:	fb00 f707 	mul.w	r7, r0, r7
    pHandle->RampRemainingStep++;
 800709e:	3401      	adds	r4, #1
    aux1 = ( TargetFinal - current_ref ) * ( int32_t )( pHandle->ScalingFactor );
 80070a0:	fb00 f308 	mul.w	r3, r0, r8
    pHandle->ScalingFactor = wScalingFactorMin;
 80070a4:	6168      	str	r0, [r5, #20]
    pHandle->RampRemainingStep++;
 80070a6:	60ec      	str	r4, [r5, #12]
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 80070a8:	60af      	str	r7, [r5, #8]
    aux1 /= ( int32_t )( pHandle->RampRemainingStep );
 80070aa:	fb93 f4f4 	sdiv	r4, r3, r4
}
 80070ae:	2001      	movs	r0, #1
    pHandle->IncDecAmount = aux1;
 80070b0:	612c      	str	r4, [r5, #16]
}
 80070b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b6:	bf00      	nop
 80070b8:	10624dd3 	.word	0x10624dd3

080070bc <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 80070bc:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop

080070c4 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 80070c4:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop

080070cc <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 80070cc:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop

080070d4 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 80070d4:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 80070d8:	8a81      	ldrh	r1, [r0, #20]
{
 80070da:	b500      	push	{lr}
  if ( *pMecSpeedUnit < 0 )
 80070dc:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 80070de:	bfb8      	it	lt
 80070e0:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 80070e2:	f8b0 e016 	ldrh.w	lr, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 80070e6:	f890 c003 	ldrb.w	ip, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 80070ea:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 80070ec:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 80070ee:	459e      	cmp	lr, r3
 80070f0:	d819      	bhi.n	8007126 <SPD_IsMecSpeedReliable+0x52>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 80070f2:	4299      	cmp	r1, r3
 80070f4:	bf2c      	ite	cs
 80070f6:	2300      	movcs	r3, #0
 80070f8:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 80070fa:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 80070fe:	f8b0 e018 	ldrh.w	lr, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 8007102:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 8007104:	bfb8      	it	lt
 8007106:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 8007108:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800710a:	458e      	cmp	lr, r1
 800710c:	d300      	bcc.n	8007110 <SPD_IsMecSpeedReliable+0x3c>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 800710e:	b163      	cbz	r3, 800712a <SPD_IsMecSpeedReliable+0x56>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8007110:	4594      	cmp	ip, r2
 8007112:	d901      	bls.n	8007118 <SPD_IsMecSpeedReliable+0x44>
    {
      bSpeedErrorNumber++;
 8007114:	3201      	adds	r2, #1
 8007116:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8007118:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 800711a:	ebb2 000c 	subs.w	r0, r2, ip
 800711e:	bf18      	it	ne
 8007120:	2001      	movne	r0, #1
 8007122:	f85d fb04 	ldr.w	pc, [sp], #4
    SpeedError = true;
 8007126:	2301      	movs	r3, #1
 8007128:	e7e7      	b.n	80070fa <SPD_IsMecSpeedReliable+0x26>
      bSpeedErrorNumber = 0u;
 800712a:	4594      	cmp	ip, r2
 800712c:	bf88      	it	hi
 800712e:	2200      	movhi	r2, #0
  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8007130:	7002      	strb	r2, [r0, #0]
}
 8007132:	ebb2 000c 	subs.w	r0, r2, ip
 8007136:	bf18      	it	ne
 8007138:	2001      	movne	r0, #1
 800713a:	f85d fb04 	ldr.w	pc, [sp], #4
 800713e:	bf00      	nop

08007140 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 8007140:	6141      	str	r1, [r0, #20]
}
 8007142:	4770      	bx	lr

08007144 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8007144:	6940      	ldr	r0, [r0, #20]
 8007146:	4770      	bx	lr

08007148 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 8007148:	7803      	ldrb	r3, [r0, #0]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d000      	beq.n	8007150 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 800714e:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8007150:	6900      	ldr	r0, [r0, #16]
 8007152:	2100      	movs	r1, #0
 8007154:	f7ff bcd4 	b.w	8006b00 <PID_SetIntegralTerm>

08007158 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8007158:	6880      	ldr	r0, [r0, #8]
 800715a:	2800      	cmp	r0, #0
 800715c:	bfbc      	itt	lt
 800715e:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8007162:	30ff      	addlt	r0, #255	; 0xff
}
 8007164:	1400      	asrs	r0, r0, #16
 8007166:	4770      	bx	lr

08007168 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8007168:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 800716a:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800716c:	60c3      	str	r3, [r0, #12]
}
 800716e:	4770      	bx	lr

08007170 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8007170:	b570      	push	{r4, r5, r6, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8007172:	7803      	ldrb	r3, [r0, #0]
{
 8007174:	4604      	mov	r4, r0
 8007176:	460d      	mov	r5, r1
 8007178:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800717a:	b323      	cbz	r3, 80071c6 <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800717c:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800717e:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8007180:	2800      	cmp	r0, #0
 8007182:	bfbc      	itt	lt
 8007184:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8007188:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800718a:	4299      	cmp	r1, r3
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800718c:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8007190:	dd01      	ble.n	8007196 <STC_ExecRamp+0x26>
      AllowedRange = false;
 8007192:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8007194:	bd70      	pop	{r4, r5, r6, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 8007196:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 800719a:	428b      	cmp	r3, r1
 800719c:	dcf9      	bgt.n	8007192 <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 800719e:	8c23      	ldrh	r3, [r4, #32]
 80071a0:	4299      	cmp	r1, r3
 80071a2:	da03      	bge.n	80071ac <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 80071a4:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 80071a8:	428b      	cmp	r3, r1
 80071aa:	dbf2      	blt.n	8007192 <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 80071ac:	b9ae      	cbnz	r6, 80071da <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 80071ae:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 80071b0:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 80071b2:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 80071b4:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 80071b8:	bf0c      	ite	eq
 80071ba:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 80071bc:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 80071be:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 80071c0:	61a3      	str	r3, [r4, #24]
 80071c2:	2001      	movs	r0, #1
}
 80071c4:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 80071c6:	f7ff ffc7 	bl	8007158 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 80071ca:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80071cc:	429d      	cmp	r5, r3
 80071ce:	dce0      	bgt.n	8007192 <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 80071d0:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 80071d4:	42ab      	cmp	r3, r5
 80071d6:	dcdc      	bgt.n	8007192 <STC_ExecRamp+0x22>
 80071d8:	e7e8      	b.n	80071ac <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 80071da:	8ba3      	ldrh	r3, [r4, #28]
      pHandle->TargetFinal = hTargetFinal;
 80071dc:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 80071de:	fb06 f303 	mul.w	r3, r6, r3
      wAux /= 1000u;
 80071e2:	4e06      	ldr	r6, [pc, #24]	; (80071fc <STC_ExecRamp+0x8c>)
 80071e4:	fba6 2303 	umull	r2, r3, r6, r3
 80071e8:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 80071ea:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 80071ec:	1a28      	subs	r0, r5, r0
 80071ee:	0400      	lsls	r0, r0, #16
      pHandle->RampRemainingStep++;
 80071f0:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 80071f2:	fb90 f0f3 	sdiv	r0, r0, r3
      pHandle->IncDecAmount = wAux1;
 80071f6:	61a0      	str	r0, [r4, #24]
 80071f8:	2001      	movs	r0, #1
}
 80071fa:	bd70      	pop	{r4, r5, r6, pc}
 80071fc:	10624dd3 	.word	0x10624dd3

08007200 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 8007200:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 8007202:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8007206:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8007208:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 800720a:	2a00      	cmp	r2, #0
 800720c:	bf08      	it	eq
 800720e:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 8007210:	2b01      	cmp	r3, #1
{
 8007212:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 8007214:	d90c      	bls.n	8007230 <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8007216:	6981      	ldr	r1, [r0, #24]
 8007218:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 800721a:	3b01      	subs	r3, #1
  if ( pHandle->Mode == STC_SPEED_MODE )
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 800721c:	2e00      	cmp	r6, #0
    pHandle->RampRemainingStep--;
 800721e:	60c3      	str	r3, [r0, #12]
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8007220:	4630      	mov	r0, r6
 8007222:	db09      	blt.n	8007238 <STC_CalcTorqueReference+0x38>
 8007224:	1405      	asrs	r5, r0, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 8007226:	2a01      	cmp	r2, #1
 8007228:	d00a      	beq.n	8007240 <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 800722a:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 800722c:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 800722e:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 8007230:	d012      	beq.n	8007258 <STC_CalcTorqueReference+0x58>
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8007232:	2e00      	cmp	r6, #0
 8007234:	4630      	mov	r0, r6
 8007236:	daf5      	bge.n	8007224 <STC_CalcTorqueReference+0x24>
 8007238:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 800723c:	30ff      	adds	r0, #255	; 0xff
 800723e:	e7f1      	b.n	8007224 <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8007240:	6960      	ldr	r0, [r4, #20]
 8007242:	f7ff ff3f 	bl	80070c4 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8007246:	1a29      	subs	r1, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8007248:	b209      	sxth	r1, r1
 800724a:	6920      	ldr	r0, [r4, #16]
 800724c:	f7ff fc5c 	bl	8006b08 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8007250:	0403      	lsls	r3, r0, #16
 8007252:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 8007256:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8007258:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 800725c:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800725e:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 8007260:	60c3      	str	r3, [r0, #12]
 8007262:	e7e0      	b.n	8007226 <STC_CalcTorqueReference+0x26>

08007264 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8007264:	b510      	push	{r4, lr}
 8007266:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8007268:	6940      	ldr	r0, [r0, #20]
 800726a:	f7ff ff2b 	bl	80070c4 <SPD_GetAvrgMecSpeedUnit>
 800726e:	0400      	lsls	r0, r0, #16
 8007270:	6060      	str	r0, [r4, #4]
}
 8007272:	bd10      	pop	{r4, pc}

08007274 <STM_FaultProcessing>:
                             hResetErrors )
{
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8007274:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8007276:	f8b0 c004 	ldrh.w	ip, [r0, #4]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800727a:	430b      	orrs	r3, r1
 800727c:	ea23 0202 	bic.w	r2, r3, r2
  State_t LocalState =  pHandle->bState;
 8007280:	7803      	ldrb	r3, [r0, #0]
  pHandle->hFaultOccurred |= hSetErrors;
 8007282:	ea41 010c 	orr.w	r1, r1, ip
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8007286:	b292      	uxth	r2, r2

  if ( LocalState == FAULT_NOW )
 8007288:	2b0a      	cmp	r3, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800728a:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 800728c:	8081      	strh	r1, [r0, #4]
  if ( LocalState == FAULT_NOW )
 800728e:	d006      	beq.n	800729e <STM_FaultProcessing+0x2a>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 8007290:	b90a      	cbnz	r2, 8007296 <STM_FaultProcessing+0x22>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 8007292:	4618      	mov	r0, r3
 8007294:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 8007296:	230a      	movs	r3, #10
 8007298:	7003      	strb	r3, [r0, #0]
}
 800729a:	4618      	mov	r0, r3
 800729c:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 800729e:	2a00      	cmp	r2, #0
 80072a0:	d1f7      	bne.n	8007292 <STM_FaultProcessing+0x1e>
      pHandle->bState = FAULT_OVER;
 80072a2:	230b      	movs	r3, #11
 80072a4:	7003      	strb	r3, [r0, #0]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop

080072ac <STM_NextState>:
{
 80072ac:	b508      	push	{r3, lr}
  switch ( bCurrentState )
 80072ae:	7803      	ldrb	r3, [r0, #0]
 80072b0:	2b14      	cmp	r3, #20
 80072b2:	d810      	bhi.n	80072d6 <STM_NextState+0x2a>
 80072b4:	e8df f003 	tbb	[pc, r3]
 80072b8:	200d3457 	.word	0x200d3457
 80072bc:	500d532a 	.word	0x500d532a
 80072c0:	0f0f484d 	.word	0x0f0f484d
 80072c4:	455e0b1b 	.word	0x455e0b1b
 80072c8:	3b3f6342 	.word	0x3b3f6342
 80072cc:	31          	.byte	0x31
 80072cd:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 80072ce:	290e      	cmp	r1, #14
 80072d0:	d00f      	beq.n	80072f2 <STM_NextState+0x46>
      if ( bState == ANY_STOP )
 80072d2:	2907      	cmp	r1, #7
 80072d4:	d00d      	beq.n	80072f2 <STM_NextState+0x46>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80072d6:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d014      	beq.n	8007308 <STM_NextState+0x5c>
 80072de:	2907      	cmp	r1, #7
 80072e0:	d012      	beq.n	8007308 <STM_NextState+0x5c>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 80072e2:	2200      	movs	r2, #0
 80072e4:	2180      	movs	r1, #128	; 0x80
 80072e6:	f7ff ffc5 	bl	8007274 <STM_FaultProcessing>
 80072ea:	2000      	movs	r0, #0
}
 80072ec:	bd08      	pop	{r3, pc}
      if ( bState == IDLE )
 80072ee:	2900      	cmp	r1, #0
 80072f0:	d1f1      	bne.n	80072d6 <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 80072f2:	7001      	strb	r1, [r0, #0]
 80072f4:	2001      	movs	r0, #1
}
 80072f6:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 80072f8:	2911      	cmp	r1, #17
 80072fa:	d8f2      	bhi.n	80072e2 <STM_NextState+0x36>
 80072fc:	4b23      	ldr	r3, [pc, #140]	; (800738c <STM_NextState+0xe0>)
 80072fe:	40cb      	lsrs	r3, r1
 8007300:	07da      	lsls	r2, r3, #31
 8007302:	d4f6      	bmi.n	80072f2 <STM_NextState+0x46>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8007304:	2903      	cmp	r1, #3
 8007306:	d1ec      	bne.n	80072e2 <STM_NextState+0x36>
 8007308:	2000      	movs	r0, #0
}
 800730a:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800730c:	2913      	cmp	r1, #19
 800730e:	d0f0      	beq.n	80072f2 <STM_NextState+0x46>
 8007310:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8007314:	2b05      	cmp	r3, #5
 8007316:	d1e0      	bne.n	80072da <STM_NextState+0x2e>
 8007318:	e7eb      	b.n	80072f2 <STM_NextState+0x46>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 800731a:	2912      	cmp	r1, #18
 800731c:	d1d9      	bne.n	80072d2 <STM_NextState+0x26>
 800731e:	e7e8      	b.n	80072f2 <STM_NextState+0x46>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8007320:	2907      	cmp	r1, #7
 8007322:	d0e6      	beq.n	80072f2 <STM_NextState+0x46>
 8007324:	f1a1 030d 	sub.w	r3, r1, #13
 8007328:	2b01      	cmp	r3, #1
 800732a:	d8d4      	bhi.n	80072d6 <STM_NextState+0x2a>
 800732c:	e7e1      	b.n	80072f2 <STM_NextState+0x46>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800732e:	1f0b      	subs	r3, r1, #4
 8007330:	2b01      	cmp	r3, #1
 8007332:	d8ce      	bhi.n	80072d2 <STM_NextState+0x26>
 8007334:	e7dd      	b.n	80072f2 <STM_NextState+0x46>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8007336:	2904      	cmp	r1, #4
 8007338:	d1cb      	bne.n	80072d2 <STM_NextState+0x26>
 800733a:	e7da      	b.n	80072f2 <STM_NextState+0x46>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800733c:	2911      	cmp	r1, #17
 800733e:	d1c8      	bne.n	80072d2 <STM_NextState+0x26>
 8007340:	e7d7      	b.n	80072f2 <STM_NextState+0x46>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8007342:	2902      	cmp	r1, #2
 8007344:	d1c5      	bne.n	80072d2 <STM_NextState+0x26>
 8007346:	e7d4      	b.n	80072f2 <STM_NextState+0x46>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8007348:	2900      	cmp	r1, #0
 800734a:	d0d2      	beq.n	80072f2 <STM_NextState+0x46>
 800734c:	290c      	cmp	r1, #12
 800734e:	d1c2      	bne.n	80072d6 <STM_NextState+0x2a>
 8007350:	e7cf      	b.n	80072f2 <STM_NextState+0x46>
      if ( bState == STOP_IDLE )
 8007352:	2909      	cmp	r1, #9
 8007354:	d1bf      	bne.n	80072d6 <STM_NextState+0x2a>
 8007356:	e7cc      	b.n	80072f2 <STM_NextState+0x46>
      if ( bState == STOP )
 8007358:	2908      	cmp	r1, #8
 800735a:	d1bc      	bne.n	80072d6 <STM_NextState+0x2a>
 800735c:	e7c9      	b.n	80072f2 <STM_NextState+0x46>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 800735e:	1f8b      	subs	r3, r1, #6
 8007360:	2b01      	cmp	r3, #1
 8007362:	d8b8      	bhi.n	80072d6 <STM_NextState+0x2a>
 8007364:	e7c5      	b.n	80072f2 <STM_NextState+0x46>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8007366:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 800736a:	2b01      	cmp	r3, #1
 800736c:	d0c1      	beq.n	80072f2 <STM_NextState+0x46>
           || ( bState == ICLWAIT ) )
 800736e:	290c      	cmp	r1, #12
 8007370:	d1b5      	bne.n	80072de <STM_NextState+0x32>
 8007372:	e7be      	b.n	80072f2 <STM_NextState+0x46>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 8007374:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 8007378:	2b07      	cmp	r3, #7
 800737a:	d1ac      	bne.n	80072d6 <STM_NextState+0x2a>
 800737c:	e7b9      	b.n	80072f2 <STM_NextState+0x46>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 800737e:	2914      	cmp	r1, #20
 8007380:	d8a9      	bhi.n	80072d6 <STM_NextState+0x2a>
 8007382:	4b03      	ldr	r3, [pc, #12]	; (8007390 <STM_NextState+0xe4>)
 8007384:	40cb      	lsrs	r3, r1
 8007386:	07db      	lsls	r3, r3, #31
 8007388:	d4b3      	bmi.n	80072f2 <STM_NextState+0x46>
 800738a:	e7a4      	b.n	80072d6 <STM_NextState+0x2a>
 800738c:	00030092 	.word	0x00030092
 8007390:	00140080 	.word	0x00140080

08007394 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 8007394:	7800      	ldrb	r0, [r0, #0]
 8007396:	4770      	bx	lr

08007398 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 8007398:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 800739a:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 800739c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop

080073a4 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 80073a4:	f890 3097 	ldrb.w	r3, [r0, #151]	; 0x97
 80073a8:	b16b      	cbz	r3, 80073c6 <UFCP_TX_IRQ_Handler+0x22>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 80073aa:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 80073ae:	4602      	mov	r2, r0
 80073b0:	b1a3      	cbz	r3, 80073dc <UFCP_TX_IRQ_Handler+0x38>
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d108      	bne.n	80073c8 <UFCP_TX_IRQ_Handler+0x24>
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
        break;

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 80073b6:	7d41      	ldrb	r1, [r0, #21]
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 80073b8:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 80073bc:	6041      	str	r1, [r0, #4]

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 80073be:	3301      	adds	r3, #1
 80073c0:	f882 3098 	strb.w	r3, [r2, #152]	; 0x98
 80073c4:	4770      	bx	lr
 80073c6:	4770      	bx	lr
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 80073c8:	7d41      	ldrb	r1, [r0, #21]
 80073ca:	3101      	adds	r1, #1
 80073cc:	428b      	cmp	r3, r1
 80073ce:	dc07      	bgt.n	80073e0 <UFCP_TX_IRQ_Handler+0x3c>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 80073d0:	18c1      	adds	r1, r0, r3
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 80073d2:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
 80073d6:	7d09      	ldrb	r1, [r1, #20]
 80073d8:	6041      	str	r1, [r0, #4]
    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 80073da:	e7f0      	b.n	80073be <UFCP_TX_IRQ_Handler+0x1a>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 80073dc:	7d01      	ldrb	r1, [r0, #20]
        break;
 80073de:	e7eb      	b.n	80073b8 <UFCP_TX_IRQ_Handler+0x14>
{
 80073e0:	b410      	push	{r4}
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 80073e2:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
 80073e6:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
 80073ea:	604b      	str	r3, [r1, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80073ec:	310c      	adds	r1, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ee:	e851 3f00 	ldrex	r3, [r1]
 80073f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f6:	e841 3400 	strex	r4, r3, [r1]
 80073fa:	2c00      	cmp	r4, #0
 80073fc:	d1f7      	bne.n	80073ee <UFCP_TX_IRQ_Handler+0x4a>
    }
    else
    {
      LL_USART_DisableIT_TXE(pHandle->USARTx);
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 80073fe:	f882 4097 	strb.w	r4, [r2, #151]	; 0x97

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8007402:	e9d2 0300 	ldrd	r0, r3, [r2]
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 8007406:	f85d 4b04 	ldr.w	r4, [sp], #4
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800740a:	4718      	bx	r3

0800740c <UFCP_Send>:

  return ret_val;
}

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 800740c:	b570      	push	{r4, r5, r6, lr}
 800740e:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8007410:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 8007414:	2800      	cmp	r0, #0
 8007416:	d148      	bne.n	80074aa <UFCP_Send+0x9e>
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
    uint8_t *dest = pHandle->TxFrame.Buffer;

    pHandle->TxFrame.Code = code;
    pHandle->TxFrame.Size = size;
    while ( size-- ) *dest++ = *buffer++;
 8007418:	1e58      	subs	r0, r3, #1
    uint8_t *dest = pHandle->TxFrame.Buffer;
 800741a:	f104 0616 	add.w	r6, r4, #22
    pHandle->TxFrame.Code = code;
 800741e:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 8007420:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8007422:	b2c0      	uxtb	r0, r0
 8007424:	b343      	cbz	r3, 8007478 <UFCP_Send+0x6c>
 8007426:	1c51      	adds	r1, r2, #1
 8007428:	1a75      	subs	r5, r6, r1
 800742a:	2d02      	cmp	r5, #2
 800742c:	d93f      	bls.n	80074ae <UFCP_Send+0xa2>
 800742e:	2807      	cmp	r0, #7
 8007430:	d93d      	bls.n	80074ae <UFCP_Send+0xa2>
 8007432:	089d      	lsrs	r5, r3, #2
 8007434:	3d01      	subs	r5, #1
 8007436:	b2e9      	uxtb	r1, r5
 8007438:	1d15      	adds	r5, r2, #4
 800743a:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 800743e:	46b4      	mov	ip, r6
 8007440:	4611      	mov	r1, r2
 8007442:	f851 eb04 	ldr.w	lr, [r1], #4
 8007446:	f84c eb04 	str.w	lr, [ip], #4
 800744a:	42a9      	cmp	r1, r5
 800744c:	d1f9      	bne.n	8007442 <UFCP_Send+0x36>
 800744e:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 8007452:	1a40      	subs	r0, r0, r1
 8007454:	428b      	cmp	r3, r1
 8007456:	b2c0      	uxtb	r0, r0
 8007458:	eb02 0c01 	add.w	ip, r2, r1
 800745c:	eb06 0501 	add.w	r5, r6, r1
 8007460:	d00a      	beq.n	8007478 <UFCP_Send+0x6c>
 8007462:	5c53      	ldrb	r3, [r2, r1]
 8007464:	5473      	strb	r3, [r6, r1]
 8007466:	b138      	cbz	r0, 8007478 <UFCP_Send+0x6c>
 8007468:	f89c 3001 	ldrb.w	r3, [ip, #1]
 800746c:	706b      	strb	r3, [r5, #1]
 800746e:	2801      	cmp	r0, #1
 8007470:	d002      	beq.n	8007478 <UFCP_Send+0x6c>
 8007472:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8007476:	70ab      	strb	r3, [r5, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8007478:	f104 0014 	add.w	r0, r4, #20
 800747c:	f7ff f8f2 	bl	8006664 <FCP_CalcCRC>
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8007480:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8007484:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96

    pHandle->TxFrameLevel = 0;
 8007488:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 800748a:	2301      	movs	r3, #1
    pHandle->TxFrameLevel = 0;
 800748c:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8007490:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
 8007494:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007496:	e852 3f00 	ldrex	r3, [r2]
 800749a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749e:	e842 3100 	strex	r1, r3, [r2]
 80074a2:	2900      	cmp	r1, #0
 80074a4:	d1f7      	bne.n	8007496 <UFCP_Send+0x8a>
 80074a6:	2002      	movs	r0, #2
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
  }

  return ret_val;
}
 80074a8:	bd70      	pop	{r4, r5, r6, pc}
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 80074aa:	2001      	movs	r0, #1
}
 80074ac:	bd70      	pop	{r4, r5, r6, pc}
 80074ae:	f104 0015 	add.w	r0, r4, #21
 80074b2:	4413      	add	r3, r2
 80074b4:	e000      	b.n	80074b8 <UFCP_Send+0xac>
 80074b6:	3101      	adds	r1, #1
    while ( size-- ) *dest++ = *buffer++;
 80074b8:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 80074bc:	f800 2f01 	strb.w	r2, [r0, #1]!
 80074c0:	4299      	cmp	r1, r3
 80074c2:	d1f8      	bne.n	80074b6 <UFCP_Send+0xaa>
 80074c4:	e7d8      	b.n	8007478 <UFCP_Send+0x6c>
 80074c6:	bf00      	nop

080074c8 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 80074c8:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 80074cc:	b90b      	cbnz	r3, 80074d2 <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 80074ce:	4831      	ldr	r0, [pc, #196]	; (8007594 <UFCP_RX_IRQ_Handler+0xcc>)
}
 80074d0:	4770      	bx	lr
{
 80074d2:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 80074d4:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
{
 80074d8:	b083      	sub	sp, #12
 80074da:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 80074dc:	fa5f fc81 	uxtb.w	ip, r1
    switch ( pBaseHandle->RxFrameLevel )
 80074e0:	b39b      	cbz	r3, 800754a <UFCP_RX_IRQ_Handler+0x82>
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d03b      	beq.n	800755e <UFCP_RX_IRQ_Handler+0x96>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 80074e6:	f890 209a 	ldrb.w	r2, [r0, #154]	; 0x9a
 80074ea:	3201      	adds	r2, #1
 80074ec:	4293      	cmp	r3, r2
 80074ee:	dc08      	bgt.n	8007502 <UFCP_RX_IRQ_Handler+0x3a>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 80074f0:	18c2      	adds	r2, r0, r3
          pBaseHandle->RxFrameLevel++;
 80074f2:	3301      	adds	r3, #1
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 80074f4:	4827      	ldr	r0, [pc, #156]	; (8007594 <UFCP_RX_IRQ_Handler+0xcc>)
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 80074f6:	f882 c099 	strb.w	ip, [r2, #153]	; 0x99
          pBaseHandle->RxFrameLevel++;
 80074fa:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 80074fe:	b003      	add	sp, #12
 8007500:	bd30      	pop	{r4, r5, pc}
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8007502:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 8007506:	f880 c11b 	strb.w	ip, [r0, #283]	; 0x11b
          pBaseHandle->RxTimeoutCountdown = 0;
 800750a:	2300      	movs	r3, #0
 800750c:	8243      	strh	r3, [r0, #18]
 800750e:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007510:	e852 3f00 	ldrex	r3, [r2]
 8007514:	f023 0320 	bic.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007518:	e842 3100 	strex	r1, r3, [r2]
 800751c:	2900      	cmp	r1, #0
 800751e:	d1f7      	bne.n	8007510 <UFCP_RX_IRQ_Handler+0x48>
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8007520:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8007524:	f104 0099 	add.w	r0, r4, #153	; 0x99
 8007528:	f7ff f89c 	bl	8006664 <FCP_CalcCRC>
 800752c:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 8007530:	4283      	cmp	r3, r0
 8007532:	d122      	bne.n	800757a <UFCP_RX_IRQ_Handler+0xb2>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8007534:	6820      	ldr	r0, [r4, #0]
 8007536:	68a5      	ldr	r5, [r4, #8]
 8007538:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800753c:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 8007540:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 8007544:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8007546:	4814      	ldr	r0, [pc, #80]	; (8007598 <UFCP_RX_IRQ_Handler+0xd0>)
 8007548:	e7d9      	b.n	80074fe <UFCP_RX_IRQ_Handler+0x36>
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 800754a:	8a02      	ldrh	r2, [r0, #16]
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 800754c:	4813      	ldr	r0, [pc, #76]	; (800759c <UFCP_RX_IRQ_Handler+0xd4>)
        pBaseHandle->RxFrame.Code = rx_byte;
 800754e:	f884 c099 	strb.w	ip, [r4, #153]	; 0x99
        pBaseHandle->RxFrameLevel++;
 8007552:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8007554:	8262      	strh	r2, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 8007556:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 800755a:	b003      	add	sp, #12
 800755c:	bd30      	pop	{r4, r5, pc}
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 800755e:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrame.Size = rx_byte;
 8007560:	f880 c09a 	strb.w	ip, [r0, #154]	; 0x9a
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 8007564:	d404      	bmi.n	8007570 <UFCP_RX_IRQ_Handler+0xa8>
        pBaseHandle->RxFrameLevel++;
 8007566:	2302      	movs	r3, #2
 8007568:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800756c:	4809      	ldr	r0, [pc, #36]	; (8007594 <UFCP_RX_IRQ_Handler+0xcc>)
 800756e:	e7c6      	b.n	80074fe <UFCP_RX_IRQ_Handler+0x36>
          pBaseHandle->RxFrameLevel =0 ;
 8007570:	2300      	movs	r3, #0
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8007572:	4808      	ldr	r0, [pc, #32]	; (8007594 <UFCP_RX_IRQ_Handler+0xcc>)
          pBaseHandle->RxFrameLevel =0 ;
 8007574:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
 8007578:	e7c1      	b.n	80074fe <UFCP_RX_IRQ_Handler+0x36>
            error_code = FCP_MSG_RX_BAD_CRC;
 800757a:	250a      	movs	r5, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800757c:	2301      	movs	r3, #1
 800757e:	f10d 0207 	add.w	r2, sp, #7
 8007582:	21ff      	movs	r1, #255	; 0xff
 8007584:	4620      	mov	r0, r4
            error_code = FCP_MSG_RX_BAD_CRC;
 8007586:	f88d 5007 	strb.w	r5, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800758a:	f7ff ff3f 	bl	800740c <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 800758e:	4802      	ldr	r0, [pc, #8]	; (8007598 <UFCP_RX_IRQ_Handler+0xd0>)
  return ret_val;
 8007590:	e7b5      	b.n	80074fe <UFCP_RX_IRQ_Handler+0x36>
 8007592:	bf00      	nop
 8007594:	080092ec 	.word	0x080092ec
 8007598:	080092f0 	.word	0x080092f0
 800759c:	080092ee 	.word	0x080092ee

080075a0 <UFCP_OVR_IRQ_Handler>:
{
 80075a0:	b500      	push	{lr}
 80075a2:	b083      	sub	sp, #12
  error_code = UFCP_MSG_OVERRUN;
 80075a4:	f04f 0c08 	mov.w	ip, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80075a8:	2301      	movs	r3, #1
 80075aa:	f10d 0207 	add.w	r2, sp, #7
 80075ae:	21ff      	movs	r1, #255	; 0xff
  error_code = UFCP_MSG_OVERRUN;
 80075b0:	f88d c007 	strb.w	ip, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80075b4:	f7ff ff2a 	bl	800740c <UFCP_Send>
}
 80075b8:	b003      	add	sp, #12
 80075ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80075be:	bf00      	nop

080075c0 <VSS_Clear>:
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 80075c0:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 80075c2:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
  pHandle->_Super.bSpeedErrorNumber = 0u;
 80075c4:	7003      	strb	r3, [r0, #0]
  pHandle->wElSpeedDpp32 = 0;
 80075c6:	e9c0 3308 	strd	r3, r3, [r0, #32]
  pHandle->_Super.hElAngle = 0;
 80075ca:	6043      	str	r3, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 80075cc:	60c3      	str	r3, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = 0;
 80075ce:	8243      	strh	r3, [r0, #18]
  pHandle->hRemainingStep = 0u;
 80075d0:	8503      	strh	r3, [r0, #40]	; 0x28
  pHandle->bTransitionStarted = false;
 80075d2:	8583      	strh	r3, [r0, #44]	; 0x2c
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 80075d4:	85c2      	strh	r2, [r0, #46]	; 0x2e
  pHandle->hElAngleAccu = 0;
 80075d6:	6303      	str	r3, [r0, #48]	; 0x30
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop

080075dc <VSS_CalcElAngle>:
  int16_t hAngleDiff;
  int16_t hAngleCorr;
  int32_t wAux;
  int16_t hSignCorr = 1;

  if ( pHandle->bCopyObserver == true )
 80075dc:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 80075e0:	b123      	cbz	r3, 80075ec <VSS_CalcElAngle+0x10>
  {
    hRetAngle = *( int16_t * )pInputVars_str;
 80075e2:	f9b1 3000 	ldrsh.w	r3, [r1]
    {
      hRetAngle = pHandle->hElAngleAccu;
    }
  }

  pHandle->_Super.hElAngle = hRetAngle;
 80075e6:	8083      	strh	r3, [r0, #4]
  return hRetAngle;
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	4770      	bx	lr
{
 80075ec:	b530      	push	{r4, r5, lr}
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 80075ee:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 80075f2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 80075f4:	88c5      	ldrh	r5, [r0, #6]
    if ( pHandle->bTransitionStarted == true )
 80075f6:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
                                 ( int16_t )pHandle->_Super.bElToMecRatio;
 80075fa:	7842      	ldrb	r2, [r0, #1]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 80075fc:	fb9c f2f2 	sdiv	r2, ip, r2
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8007600:	4463      	add	r3, ip
 8007602:	fa1f fe83 	uxth.w	lr, r3
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8007606:	442a      	add	r2, r5
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8007608:	b21b      	sxth	r3, r3
 800760a:	8603      	strh	r3, [r0, #48]	; 0x30
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 800760c:	80c2      	strh	r2, [r0, #6]
    if ( pHandle->bTransitionStarted == true )
 800760e:	b1fc      	cbz	r4, 8007650 <VSS_CalcElAngle+0x74>
      if ( pHandle->hTransitionRemainingSteps == 0 )
 8007610:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
 8007614:	b1fa      	cbz	r2, 8007656 <VSS_CalcElAngle+0x7a>
        pHandle->hTransitionRemainingSteps--;
 8007616:	3a01      	subs	r2, #1
 8007618:	b212      	sxth	r2, r2
 800761a:	85c2      	strh	r2, [r0, #46]	; 0x2e
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 800761c:	f1bc 0f00 	cmp.w	ip, #0
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 8007620:	8809      	ldrh	r1, [r1, #0]
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 8007622:	db28      	blt.n	8007676 <VSS_CalcElAngle+0x9a>
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 8007624:	eba1 0e0e 	sub.w	lr, r1, lr
 8007628:	fa0f fe8e 	sxth.w	lr, lr
 800762c:	2501      	movs	r5, #1
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 800762e:	f9b0 4036 	ldrsh.w	r4, [r0, #54]	; 0x36
        wAux = ( int32_t )hAngleDiff * pHandle->hTransitionRemainingSteps;
 8007632:	fb0e f202 	mul.w	r2, lr, r2
        if ( hAngleDiff >= 0 )
 8007636:	f1be 0f00 	cmp.w	lr, #0
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 800763a:	fb92 f2f4 	sdiv	r2, r2, r4
        hAngleCorr *= hSignCorr;
 800763e:	fb12 f205 	smulbb	r2, r2, r5
 8007642:	b292      	uxth	r2, r2
        if ( hAngleDiff >= 0 )
 8007644:	db10      	blt.n	8007668 <VSS_CalcElAngle+0x8c>
          pHandle->bTransitionLocked = true;
 8007646:	2301      	movs	r3, #1
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 8007648:	1a8a      	subs	r2, r1, r2
          pHandle->bTransitionLocked = true;
 800764a:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 800764e:	b213      	sxth	r3, r2
  pHandle->_Super.hElAngle = hRetAngle;
 8007650:	8083      	strh	r3, [r0, #4]
}
 8007652:	4618      	mov	r0, r3
 8007654:	bd30      	pop	{r4, r5, pc}
        hRetAngle = *( int16_t * )pInputVars_str;
 8007656:	f9b1 3000 	ldrsh.w	r3, [r1]
        pHandle->_Super.bSpeedErrorNumber = 0u;
 800765a:	7002      	strb	r2, [r0, #0]
        pHandle->bTransitionEnded = true;
 800765c:	2401      	movs	r4, #1
 800765e:	f880 402d 	strb.w	r4, [r0, #45]	; 0x2d
  pHandle->_Super.hElAngle = hRetAngle;
 8007662:	8083      	strh	r3, [r0, #4]
}
 8007664:	4618      	mov	r0, r3
 8007666:	bd30      	pop	{r4, r5, pc}
          if ( pHandle->bTransitionLocked == false )
 8007668:	f890 4032 	ldrb.w	r4, [r0, #50]	; 0x32
 800766c:	2c00      	cmp	r4, #0
 800766e:	d0ef      	beq.n	8007650 <VSS_CalcElAngle+0x74>
            hRetAngle = *( int16_t * )pInputVars_str + hAngleCorr;
 8007670:	440a      	add	r2, r1
 8007672:	b213      	sxth	r3, r2
 8007674:	e7ec      	b.n	8007650 <VSS_CalcElAngle+0x74>
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
 8007676:	ebae 0e01 	sub.w	lr, lr, r1
 800767a:	fa0f fe8e 	sxth.w	lr, lr
 800767e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8007682:	e7d4      	b.n	800762e <VSS_CalcElAngle+0x52>

08007684 <VSS_CalcAvrgMecSpeedUnit>:
  */
__weak bool VSS_CalcAvrgMecSpeedUnit( VirtualSpeedSensor_Handle_t * pHandle, int16_t * hMecSpeedUnit )
{
  bool SpeedSensorReliability = false;

  if ( pHandle->hRemainingStep > 1u )
 8007684:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8007686:	2b01      	cmp	r3, #1
 8007688:	d929      	bls.n	80076de <VSS_CalcAvrgMecSpeedUnit+0x5a>
  {
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800768a:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
 800768e:	4413      	add	r3, r2
{
 8007690:	b500      	push	{lr}
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8007692:	6243      	str	r3, [r0, #36]	; 0x24
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8007694:	2b00      	cmp	r3, #0
 8007696:	db1e      	blt.n	80076d6 <VSS_CalcAvrgMecSpeedUnit+0x52>

    /* Convert dpp into MecUnit */
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8007698:	8b42      	ldrh	r2, [r0, #26]
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 800769a:	f890 e001 	ldrb.w	lr, [r0, #1]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 800769e:	ea4f 4c23 	mov.w	ip, r3, asr #16
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 80076a2:	fb0c f202 	mul.w	r2, ip, r2
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 80076a6:	eb02 0382 	add.w	r3, r2, r2, lsl #2
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80076aa:	69c2      	ldr	r2, [r0, #28]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 80076ac:	f8a0 c00e 	strh.w	ip, [r0, #14]
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80076b0:	fb02 f20e 	mul.w	r2, r2, lr
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 80076b4:	005b      	lsls	r3, r3, #1
 80076b6:	fb93 f3f2 	sdiv	r3, r3, r2
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 80076ba:	b21b      	sxth	r3, r3
 80076bc:	800b      	strh	r3, [r1, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;

    pHandle->hRemainingStep--;
 80076be:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80076c0:	8183      	strh	r3, [r0, #12]
    pHandle->hRemainingStep--;
 80076c2:	1e53      	subs	r3, r2, #1
 80076c4:	8503      	strh	r3, [r0, #40]	; 0x28
  else
  {
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
  }
  /* If the transition is not done yet, we already know that speed is not reliable */
  if ( pHandle->bTransitionEnded == false )
 80076c6:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80076ca:	b99b      	cbnz	r3, 80076f4 <VSS_CalcAvrgMecSpeedUnit+0x70>
  {
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80076cc:	78c2      	ldrb	r2, [r0, #3]
 80076ce:	7002      	strb	r2, [r0, #0]
  {
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
  }

  return ( SpeedSensorReliability );
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	f85d fb04 	ldr.w	pc, [sp], #4
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 80076d6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80076da:	33ff      	adds	r3, #255	; 0xff
 80076dc:	e7dc      	b.n	8007698 <VSS_CalcAvrgMecSpeedUnit+0x14>
  else if ( pHandle->hRemainingStep == 1u )
 80076de:	d00d      	beq.n	80076fc <VSS_CalcAvrgMecSpeedUnit+0x78>
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 80076e0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80076e4:	800b      	strh	r3, [r1, #0]
  if ( pHandle->bTransitionEnded == false )
 80076e6:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80076ea:	bb03      	cbnz	r3, 800772e <VSS_CalcAvrgMecSpeedUnit+0xaa>
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80076ec:	78c2      	ldrb	r2, [r0, #3]
 80076ee:	7002      	strb	r2, [r0, #0]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	4770      	bx	lr
 80076f4:	f85d eb04 	ldr.w	lr, [sp], #4
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
 80076f8:	f7ff bcec 	b.w	80070d4 <SPD_IsMecSpeedReliable>
    *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 80076fc:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	; 0x2a
 8007700:	f8a1 c000 	strh.w	ip, [r1]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007704:	8b43      	ldrh	r3, [r0, #26]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 8007706:	69c2      	ldr	r2, [r0, #28]
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8007708:	f8a0 c00c 	strh.w	ip, [r0, #12]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800770c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 8007710:	fb02 f20c 	mul.w	r2, r2, ip
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007714:	005b      	lsls	r3, r3, #1
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 8007716:	fb92 f3f3 	sdiv	r3, r2, r3
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800771a:	7842      	ldrb	r2, [r0, #1]
 800771c:	fb12 f303 	smulbb	r3, r2, r3
 8007720:	81c3      	strh	r3, [r0, #14]
  if ( pHandle->bTransitionEnded == false )
 8007722:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
    pHandle->hRemainingStep = 0u;
 8007726:	2200      	movs	r2, #0
 8007728:	8502      	strh	r2, [r0, #40]	; 0x28
  if ( pHandle->bTransitionEnded == false )
 800772a:	2b00      	cmp	r3, #0
 800772c:	d0de      	beq.n	80076ec <VSS_CalcAvrgMecSpeedUnit+0x68>
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
 800772e:	f7ff bcd1 	b.w	80070d4 <SPD_IsMecSpeedReliable>
 8007732:	bf00      	nop

08007734 <VSS_SetMecAngle>:
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8007734:	7843      	ldrb	r3, [r0, #1]
  pHandle->hElAngleAccu = hMecAngle;
 8007736:	8601      	strh	r1, [r0, #48]	; 0x30
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8007738:	fb91 f3f3 	sdiv	r3, r1, r3
  pHandle->_Super.hElAngle = hMecAngle;
 800773c:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 800773e:	80c3      	strh	r3, [r0, #6]
}
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop

08007744 <VSS_SetMecAcceleration>:
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 8007744:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8007748:	b99b      	cbnz	r3, 8007772 <VSS_SetMecAcceleration+0x2e>
{
 800774a:	b510      	push	{r4, lr}
  {
    if ( hDurationms == 0u )
 800774c:	b992      	cbnz	r2, 8007774 <VSS_SetMecAcceleration+0x30>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800774e:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8007750:	69c4      	ldr	r4, [r0, #28]
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8007752:	8181      	strh	r1, [r0, #12]
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007754:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8007758:	fb04 fc01 	mul.w	ip, r4, r1
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800775c:	005b      	lsls	r3, r3, #1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800775e:	fb9c f3f3 	sdiv	r3, ip, r3

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8007762:	f890 c001 	ldrb.w	ip, [r0, #1]

      pHandle->hRemainingStep = 0u;
 8007766:	8502      	strh	r2, [r0, #40]	; 0x28
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8007768:	fb1c f303 	smulbb	r3, ip, r3
 800776c:	81c3      	strh	r3, [r0, #14]

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800776e:	8541      	strh	r1, [r0, #42]	; 0x2a
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 8007770:	bd10      	pop	{r4, pc}
 8007772:	4770      	bx	lr
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8007774:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8007776:	4c12      	ldr	r4, [pc, #72]	; (80077c0 <VSS_SetMecAcceleration+0x7c>)
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8007778:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 800777c:	f890 c001 	ldrb.w	ip, [r0, #1]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8007780:	8541      	strh	r1, [r0, #42]	; 0x2a
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8007782:	fb03 f202 	mul.w	r2, r3, r2
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8007786:	fba4 2302 	umull	r2, r3, r4, r2
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800778a:	f3c3 138f 	ubfx	r3, r3, #6, #16
      hNbrStep++;
 800778e:	3301      	adds	r3, #1
 8007790:	b29a      	uxth	r2, r3
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007792:	8b43      	ldrh	r3, [r0, #26]
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8007794:	69c4      	ldr	r4, [r0, #28]
      pHandle->hRemainingStep = hNbrStep;
 8007796:	8502      	strh	r2, [r0, #40]	; 0x28
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007798:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800779c:	fb04 f101 	mul.w	r1, r4, r1
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 80077a0:	005b      	lsls	r3, r3, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 80077a2:	fb91 f3f3 	sdiv	r3, r1, r3
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 80077a6:	fb9e f1fc 	sdiv	r1, lr, ip
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 80077aa:	1a5b      	subs	r3, r3, r1
 80077ac:	041b      	lsls	r3, r3, #16
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 80077ae:	ea4f 410e 	mov.w	r1, lr, lsl #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 80077b2:	fb93 f3f2 	sdiv	r3, r3, r2
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 80077b6:	fb0c f303 	mul.w	r3, ip, r3
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 80077ba:	e9c0 3108 	strd	r3, r1, [r0, #32]
}
 80077be:	bd10      	pop	{r4, pc}
 80077c0:	10624dd3 	.word	0x10624dd3

080077c4 <VSS_SetStartTransition>:
            (parameter hTransitionSteps = 0)
  */
__weak bool VSS_SetStartTransition( VirtualSpeedSensor_Handle_t * pHandle, bool bCommand )
{
  bool bAux = true;
  if ( bCommand == true )
 80077c4:	b151      	cbz	r1, 80077dc <VSS_SetStartTransition+0x18>
  {
    pHandle->bTransitionStarted = true;

    if ( pHandle->hTransitionSteps == 0 )
 80077c6:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	; 0x36
    pHandle->bTransitionStarted = true;
 80077ca:	2201      	movs	r2, #1
 80077cc:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    if ( pHandle->hTransitionSteps == 0 )
 80077d0:	b923      	cbnz	r3, 80077dc <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionEnded = true;
 80077d2:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
      pHandle->_Super.bSpeedErrorNumber = 0u;
 80077d6:	7003      	strb	r3, [r0, #0]
      bAux = false;
 80077d8:	4618      	mov	r0, r3
    }
  }
  return bAux;
}
 80077da:	4770      	bx	lr
  bool bAux = true;
 80077dc:	2001      	movs	r0, #1
 80077de:	4770      	bx	lr

080077e0 <VSS_TransitionEnded>:
}

__weak bool VSS_TransitionEnded( VirtualSpeedSensor_Handle_t * pHandle )
{
    return pHandle->bTransitionEnded;
}
 80077e0:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop

080077e8 <VSS_SetCopyObserver>:
  * @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
  * @retval none
  */
__weak void VSS_SetCopyObserver( VirtualSpeedSensor_Handle_t * pHandle )
{
  pHandle->bCopyObserver = true;
 80077e8:	2301      	movs	r3, #1
 80077ea:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
 80077ee:	4770      	bx	lr

080077f0 <RUC_Clear>:
 80077f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077f4:	4604      	mov	r4, r0
 80077f6:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
 80077f8:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
 80077fc:	80e1      	strh	r1, [r4, #6]
 80077fe:	2500      	movs	r5, #0
 8007800:	4638      	mov	r0, r7
 8007802:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
 8007806:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 800780a:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 800780e:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 8007812:	460e      	mov	r6, r1
 8007814:	f7ff fed4 	bl	80075c0 <VSS_Clear>
 8007818:	4629      	mov	r1, r5
 800781a:	4640      	mov	r0, r8
 800781c:	f7ff fca4 	bl	8007168 <STC_SetControlMode>
 8007820:	8861      	ldrh	r1, [r4, #2]
 8007822:	b2b6      	uxth	r6, r6
 8007824:	fb11 f106 	smulbb	r1, r1, r6
 8007828:	b209      	sxth	r1, r1
 800782a:	4638      	mov	r0, r7
 800782c:	f7ff ff82 	bl	8007734 <VSS_SetMecAngle>
 8007830:	462a      	mov	r2, r5
 8007832:	4629      	mov	r1, r5
 8007834:	4640      	mov	r0, r8
 8007836:	f7ff fc9b 	bl	8007170 <STC_ExecRamp>
 800783a:	8a21      	ldrh	r1, [r4, #16]
 800783c:	89a2      	ldrh	r2, [r4, #12]
 800783e:	fb11 f106 	smulbb	r1, r1, r6
 8007842:	b209      	sxth	r1, r1
 8007844:	4640      	mov	r0, r8
 8007846:	f7ff fc93 	bl	8007170 <STC_ExecRamp>
 800784a:	89e1      	ldrh	r1, [r4, #14]
 800784c:	89a2      	ldrh	r2, [r4, #12]
 800784e:	fb11 f106 	smulbb	r1, r1, r6
 8007852:	4638      	mov	r0, r7
 8007854:	b209      	sxth	r1, r1
 8007856:	f7ff ff75 	bl	8007744 <VSS_SetMecAcceleration>
 800785a:	89a0      	ldrh	r0, [r4, #12]
 800785c:	8823      	ldrh	r3, [r4, #0]
 800785e:	4907      	ldr	r1, [pc, #28]	; (800787c <RUC_Clear+0x8c>)
 8007860:	6962      	ldr	r2, [r4, #20]
 8007862:	f884 5057 	strb.w	r5, [r4, #87]	; 0x57
 8007866:	fb03 f300 	mul.w	r3, r3, r0
 800786a:	fba1 1303 	umull	r1, r3, r1, r3
 800786e:	099b      	lsrs	r3, r3, #6
 8007870:	3301      	adds	r3, #1
 8007872:	80a3      	strh	r3, [r4, #4]
 8007874:	60a2      	str	r2, [r4, #8]
 8007876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800787a:	bf00      	nop
 800787c:	10624dd3 	.word	0x10624dd3

08007880 <RUC_OTF_Exec>:
 8007880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007882:	8883      	ldrh	r3, [r0, #4]
 8007884:	f890 5058 	ldrb.w	r5, [r0, #88]	; 0x58
 8007888:	4604      	mov	r4, r0
 800788a:	b183      	cbz	r3, 80078ae <RUC_OTF_Exec+0x2e>
 800788c:	3b01      	subs	r3, #1
 800788e:	b29b      	uxth	r3, r3
 8007890:	8083      	strh	r3, [r0, #4]
 8007892:	b93d      	cbnz	r5, 80078a4 <RUC_OTF_Exec+0x24>
 8007894:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
 8007898:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800789a:	2b00      	cmp	r3, #0
 800789c:	d05b      	beq.n	8007956 <RUC_OTF_Exec+0xd6>
 800789e:	6843      	ldr	r3, [r0, #4]
 80078a0:	4798      	blx	r3
 80078a2:	88a3      	ldrh	r3, [r4, #4]
 80078a4:	b10b      	cbz	r3, 80078aa <RUC_OTF_Exec+0x2a>
 80078a6:	2001      	movs	r0, #1
 80078a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078aa:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
 80078ae:	68a3      	ldr	r3, [r4, #8]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d02d      	beq.n	8007910 <RUC_OTF_Exec+0x90>
 80078b4:	2d00      	cmp	r5, #0
 80078b6:	d03f      	beq.n	8007938 <RUC_OTF_Exec+0xb8>
 80078b8:	2d01      	cmp	r5, #1
 80078ba:	d035      	beq.n	8007928 <RUC_OTF_Exec+0xa8>
 80078bc:	88e5      	ldrh	r5, [r4, #6]
 80078be:	8899      	ldrh	r1, [r3, #4]
 80078c0:	881a      	ldrh	r2, [r3, #0]
 80078c2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80078c4:	fb11 f105 	smulbb	r1, r1, r5
 80078c8:	b209      	sxth	r1, r1
 80078ca:	f7ff fc51 	bl	8007170 <STC_ExecRamp>
 80078ce:	68a3      	ldr	r3, [r4, #8]
 80078d0:	88e5      	ldrh	r5, [r4, #6]
 80078d2:	8859      	ldrh	r1, [r3, #2]
 80078d4:	881a      	ldrh	r2, [r3, #0]
 80078d6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80078d8:	fb11 f105 	smulbb	r1, r1, r5
 80078dc:	b209      	sxth	r1, r1
 80078de:	f7ff ff31 	bl	8007744 <VSS_SetMecAcceleration>
 80078e2:	68a2      	ldr	r2, [r4, #8]
 80078e4:	8823      	ldrh	r3, [r4, #0]
 80078e6:	8810      	ldrh	r0, [r2, #0]
 80078e8:	4971      	ldr	r1, [pc, #452]	; (8007ab0 <RUC_OTF_Exec+0x230>)
 80078ea:	6892      	ldr	r2, [r2, #8]
 80078ec:	60a2      	str	r2, [r4, #8]
 80078ee:	fb03 f300 	mul.w	r3, r3, r0
 80078f2:	fba1 2303 	umull	r2, r3, r1, r3
 80078f6:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 80078fa:	099b      	lsrs	r3, r3, #6
 80078fc:	3201      	adds	r2, #1
 80078fe:	3301      	adds	r3, #1
 8007900:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8007904:	80a3      	strh	r3, [r4, #4]
 8007906:	2001      	movs	r0, #1
 8007908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800790a:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
 800790e:	80a0      	strh	r0, [r4, #4]
 8007910:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8007914:	3b01      	subs	r3, #1
 8007916:	429d      	cmp	r5, r3
 8007918:	d01b      	beq.n	8007952 <RUC_OTF_Exec+0xd2>
 800791a:	2d07      	cmp	r5, #7
 800791c:	d1c3      	bne.n	80078a6 <RUC_OTF_Exec+0x26>
 800791e:	2300      	movs	r3, #0
 8007920:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8007924:	80a3      	strh	r3, [r4, #4]
 8007926:	e7be      	b.n	80078a6 <RUC_OTF_Exec+0x26>
 8007928:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800792a:	f7ff facb 	bl	8006ec4 <PWMC_SwitchOnPWM>
 800792e:	2200      	movs	r2, #0
 8007930:	68a3      	ldr	r3, [r4, #8]
 8007932:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8007936:	e7c1      	b.n	80078bc <RUC_OTF_Exec+0x3c>
 8007938:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800793a:	f7ff fac1 	bl	8006ec0 <PWMC_SwitchOffPWM>
 800793e:	2301      	movs	r3, #1
 8007940:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8007944:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8007946:	f7ff fae9 	bl	8006f1c <PWMC_TurnOnLowSides>
 800794a:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 800794e:	68a3      	ldr	r3, [r4, #8]
 8007950:	e7b4      	b.n	80078bc <RUC_OTF_Exec+0x3c>
 8007952:	2000      	movs	r0, #0
 8007954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007956:	68c2      	ldr	r2, [r0, #12]
 8007958:	b17a      	cbz	r2, 800797a <RUC_OTF_Exec+0xfa>
 800795a:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 800795e:	f894 1056 	ldrb.w	r1, [r4, #86]	; 0x56
 8007962:	3301      	adds	r3, #1
 8007964:	b2db      	uxtb	r3, r3
 8007966:	4299      	cmp	r1, r3
 8007968:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 800796c:	d205      	bcs.n	800797a <RUC_OTF_Exec+0xfa>
 800796e:	4790      	blx	r2
 8007970:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007972:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 8007976:	f884 5057 	strb.w	r5, [r4, #87]	; 0x57
 800797a:	6903      	ldr	r3, [r0, #16]
 800797c:	4798      	blx	r3
 800797e:	b350      	cbz	r0, 80079d6 <RUC_OTF_Exec+0x156>
 8007980:	f894 5053 	ldrb.w	r5, [r4, #83]	; 0x53
 8007984:	2d7e      	cmp	r5, #126	; 0x7e
 8007986:	d803      	bhi.n	8007990 <RUC_OTF_Exec+0x110>
 8007988:	3501      	adds	r5, #1
 800798a:	b2ed      	uxtb	r5, r5
 800798c:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 8007990:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007992:	68da      	ldr	r2, [r3, #12]
 8007994:	b36a      	cbz	r2, 80079f2 <RUC_OTF_Exec+0x172>
 8007996:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 800799a:	ebb5 0f52 	cmp.w	r5, r2, lsr #1
 800799e:	d180      	bne.n	80078a2 <RUC_OTF_Exec+0x22>
 80079a0:	6818      	ldr	r0, [r3, #0]
 80079a2:	f7ff fb8f 	bl	80070c4 <SPD_GetAvrgMecSpeedUnit>
 80079a6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	4606      	mov	r6, r0
 80079ae:	dd19      	ble.n	80079e4 <RUC_OTF_Exec+0x164>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	dd19      	ble.n	80079e8 <RUC_OTF_Exec+0x168>
 80079b4:	ea86 75e6 	eor.w	r5, r6, r6, asr #31
 80079b8:	eba5 75e6 	sub.w	r5, r5, r6, asr #31
 80079bc:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 80079c0:	b2ab      	uxth	r3, r5
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d218      	bcs.n	80079f8 <RUC_OTF_Exec+0x178>
 80079c6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80079c8:	6843      	ldr	r3, [r0, #4]
 80079ca:	4798      	blx	r3
 80079cc:	2301      	movs	r3, #1
 80079ce:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 80079d2:	88a3      	ldrh	r3, [r4, #4]
 80079d4:	e766      	b.n	80078a4 <RUC_OTF_Exec+0x24>
 80079d6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80079d8:	f884 0053 	strb.w	r0, [r4, #83]	; 0x53
 80079dc:	68da      	ldr	r2, [r3, #12]
 80079de:	2a00      	cmp	r2, #0
 80079e0:	d1d9      	bne.n	8007996 <RUC_OTF_Exec+0x116>
 80079e2:	e75e      	b.n	80078a2 <RUC_OTF_Exec+0x22>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	dbe5      	blt.n	80079b4 <RUC_OTF_Exec+0x134>
 80079e8:	2300      	movs	r3, #0
 80079ea:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
 80079ee:	88a3      	ldrh	r3, [r4, #4]
 80079f0:	e758      	b.n	80078a4 <RUC_OTF_Exec+0x24>
 80079f2:	2d7f      	cmp	r5, #127	; 0x7f
 80079f4:	d0d4      	beq.n	80079a0 <RUC_OTF_Exec+0x120>
 80079f6:	e754      	b.n	80078a2 <RUC_OTF_Exec+0x22>
 80079f8:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80079fc:	429a      	cmp	r2, r3
 80079fe:	f4bf af50 	bcs.w	80078a2 <RUC_OTF_Exec+0x22>
 8007a02:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007a04:	f7ff fef0 	bl	80077e8 <VSS_SetCopyObserver>
 8007a08:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007a0a:	6883      	ldr	r3, [r0, #8]
 8007a0c:	4798      	blx	r3
 8007a0e:	68a0      	ldr	r0, [r4, #8]
 8007a10:	4603      	mov	r3, r0
 8007a12:	2800      	cmp	r0, #0
 8007a14:	f43f af79 	beq.w	800790a <RUC_OTF_Exec+0x8a>
 8007a18:	f9b0 7002 	ldrsh.w	r7, [r0, #2]
 8007a1c:	b22a      	sxth	r2, r5
 8007a1e:	42ba      	cmp	r2, r7
 8007a20:	dd42      	ble.n	8007aa8 <RUC_OTF_Exec+0x228>
 8007a22:	6881      	ldr	r1, [r0, #8]
 8007a24:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
 8007a28:	2900      	cmp	r1, #0
 8007a2a:	d037      	beq.n	8007a9c <RUC_OTF_Exec+0x21c>
 8007a2c:	3501      	adds	r5, #1
 8007a2e:	b2eb      	uxtb	r3, r5
 8007a30:	e008      	b.n	8007a44 <RUC_OTF_Exec+0x1c4>
 8007a32:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	462f      	mov	r7, r5
 8007a3a:	4608      	mov	r0, r1
 8007a3c:	f1bc 0f00 	cmp.w	ip, #0
 8007a40:	d028      	beq.n	8007a94 <RUC_OTF_Exec+0x214>
 8007a42:	4661      	mov	r1, ip
 8007a44:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8007a48:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8007a4c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8007a50:	4295      	cmp	r5, r2
 8007a52:	f103 0301 	add.w	r3, r3, #1
 8007a56:	dbec      	blt.n	8007a32 <RUC_OTF_Exec+0x1b2>
 8007a58:	60a1      	str	r1, [r4, #8]
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8007a60:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8007a64:	88e2      	ldrh	r2, [r4, #6]
 8007a66:	1a2b      	subs	r3, r5, r0
 8007a68:	1bcf      	subs	r7, r1, r7
 8007a6a:	fb06 f303 	mul.w	r3, r6, r3
 8007a6e:	fb93 f3f7 	sdiv	r3, r3, r7
 8007a72:	4403      	add	r3, r0
 8007a74:	fb12 f303 	smulbb	r3, r2, r3
 8007a78:	b219      	sxth	r1, r3
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8007a7e:	f7ff fb77 	bl	8007170 <STC_ExecRamp>
 8007a82:	2306      	movs	r3, #6
 8007a84:	2001      	movs	r0, #1
 8007a86:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 8007a8a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8007a8e:	80a0      	strh	r0, [r4, #4]
 8007a90:	60a2      	str	r2, [r4, #8]
 8007a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a94:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
 8007a98:	60a1      	str	r1, [r4, #8]
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	80a2      	strh	r2, [r4, #4]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f47f af07 	bne.w	80078b4 <RUC_OTF_Exec+0x34>
 8007aa6:	e733      	b.n	8007910 <RUC_OTF_Exec+0x90>
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	4607      	mov	r7, r0
 8007aac:	e7d6      	b.n	8007a5c <RUC_OTF_Exec+0x1dc>
 8007aae:	bf00      	nop
 8007ab0:	10624dd3 	.word	0x10624dd3

08007ab4 <RUC_FirstAccelerationStageReached>:
 8007ab4:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8007ab8:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
 8007abc:	4282      	cmp	r2, r0
 8007abe:	bf34      	ite	cc
 8007ac0:	2000      	movcc	r0, #0
 8007ac2:	2001      	movcs	r0, #1
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop

08007ac8 <RUC_Get_SCLowsideOTF_Status>:
 8007ac8:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop

08007ad0 <STO_PLL_CalcElAngle>:
 8007ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad4:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 8007ad8:	f8d0 e068 	ldr.w	lr, [r0, #104]	; 0x68
 8007adc:	4604      	mov	r4, r0
 8007ade:	03d8      	lsls	r0, r3, #15
 8007ae0:	1ac2      	subs	r2, r0, r3
 8007ae2:	4596      	cmp	lr, r2
 8007ae4:	b089      	sub	sp, #36	; 0x24
 8007ae6:	f340 80c1 	ble.w	8007c6c <STO_PLL_CalcElAngle+0x19c>
 8007aea:	66a2      	str	r2, [r4, #104]	; 0x68
 8007aec:	4696      	mov	lr, r2
 8007aee:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
 8007af2:	f8d4 c06c 	ldr.w	ip, [r4, #108]	; 0x6c
 8007af6:	fa4e f605 	asr.w	r6, lr, r5
 8007afa:	9603      	str	r6, [sp, #12]
 8007afc:	4562      	cmp	r2, ip
 8007afe:	b236      	sxth	r6, r6
 8007b00:	9601      	str	r6, [sp, #4]
 8007b02:	f280 80c8 	bge.w	8007c96 <STO_PLL_CalcElAngle+0x1c6>
 8007b06:	66e2      	str	r2, [r4, #108]	; 0x6c
 8007b08:	4694      	mov	ip, r2
 8007b0a:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8007b0e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8007b10:	03de      	lsls	r6, r3, #15
 8007b12:	fa4c f205 	asr.w	r2, ip, r5
 8007b16:	1af5      	subs	r5, r6, r3
 8007b18:	9204      	str	r2, [sp, #16]
 8007b1a:	42a8      	cmp	r0, r5
 8007b1c:	b212      	sxth	r2, r2
 8007b1e:	9202      	str	r2, [sp, #8]
 8007b20:	f340 80b3 	ble.w	8007c8a <STO_PLL_CalcElAngle+0x1ba>
 8007b24:	6625      	str	r5, [r4, #96]	; 0x60
 8007b26:	4628      	mov	r0, r5
 8007b28:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b2a:	4295      	cmp	r5, r2
 8007b2c:	f280 80a7 	bge.w	8007c7e <STO_PLL_CalcElAngle+0x1ae>
 8007b30:	6665      	str	r5, [r4, #100]	; 0x64
 8007b32:	462a      	mov	r2, r5
 8007b34:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
 8007b38:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 8007b3c:	890d      	ldrh	r5, [r1, #8]
 8007b3e:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
 8007b42:	888e      	ldrh	r6, [r1, #4]
 8007b44:	f9b1 7000 	ldrsh.w	r7, [r1]
 8007b48:	f9b4 9020 	ldrsh.w	r9, [r4, #32]
 8007b4c:	9901      	ldr	r1, [sp, #4]
 8007b4e:	f8a4 1070 	strh.w	r1, [r4, #112]	; 0x70
 8007b52:	fa40 f103 	asr.w	r1, r0, r3
 8007b56:	fa42 f303 	asr.w	r3, r2, r3
 8007b5a:	1b8e      	subs	r6, r1, r6
 8007b5c:	fb11 f109 	smulbb	r1, r1, r9
 8007b60:	fb13 f909 	smulbb	r9, r3, r9
 8007b64:	eba3 030a 	sub.w	r3, r3, sl
 8007b68:	9305      	str	r3, [sp, #20]
 8007b6a:	f9b4 b022 	ldrsh.w	fp, [r4, #34]	; 0x22
 8007b6e:	9b02      	ldr	r3, [sp, #8]
 8007b70:	f9b4 a028 	ldrsh.w	sl, [r4, #40]	; 0x28
 8007b74:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 8007b78:	b236      	sxth	r6, r6
 8007b7a:	1a41      	subs	r1, r0, r1
 8007b7c:	fb05 f707 	mul.w	r7, r5, r7
 8007b80:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8007b84:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8007b86:	eba2 0209 	sub.w	r2, r2, r9
 8007b8a:	fb0b 1106 	mla	r1, fp, r6, r1
 8007b8e:	143f      	asrs	r7, r7, #16
 8007b90:	fb0b 2b03 	mla	fp, fp, r3, r2
 8007b94:	fb0a 1107 	mla	r1, sl, r7, r1
 8007b98:	fb05 f508 	mul.w	r5, r5, r8
 8007b9c:	9a01      	ldr	r2, [sp, #4]
 8007b9e:	9f02      	ldr	r7, [sp, #8]
 8007ba0:	f9b4 802a 	ldrsh.w	r8, [r4, #42]	; 0x2a
 8007ba4:	f9b4 9026 	ldrsh.w	r9, [r4, #38]	; 0x26
 8007ba8:	142d      	asrs	r5, r5, #16
 8007baa:	fb0a b505 	mla	r5, sl, r5, fp
 8007bae:	4107      	asrs	r7, r0
 8007bb0:	f9b4 a00e 	ldrsh.w	sl, [r4, #14]
 8007bb4:	f9b4 b024 	ldrsh.w	fp, [r4, #36]	; 0x24
 8007bb8:	fa42 f000 	asr.w	r0, r2, r0
 8007bbc:	fb06 e609 	mla	r6, r6, r9, lr
 8007bc0:	fb09 c303 	mla	r3, r9, r3, ip
 8007bc4:	fb07 f708 	mul.w	r7, r7, r8
 8007bc8:	fb00 f008 	mul.w	r0, r0, r8
 8007bcc:	fb07 670a 	mla	r7, r7, sl, r6
 8007bd0:	fb00 361a 	mls	r6, r0, sl, r3
 8007bd4:	9b01      	ldr	r3, [sp, #4]
 8007bd6:	f994 2124 	ldrsb.w	r2, [r4, #292]	; 0x124
 8007bda:	fb0b 1813 	mls	r8, fp, r3, r1
 8007bde:	9b02      	ldr	r3, [sp, #8]
 8007be0:	fb0b 5513 	mls	r5, fp, r3, r5
 8007be4:	2a00      	cmp	r2, #0
 8007be6:	d147      	bne.n	8007c78 <STO_PLL_CalcElAngle+0x1a8>
 8007be8:	f1ba 0f00 	cmp.w	sl, #0
 8007bec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007bf0:	bfb4      	ite	lt
 8007bf2:	4691      	movlt	r9, r2
 8007bf4:	f04f 0901 	movge.w	r9, #1
 8007bf8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8007bfc:	f7fb fc80 	bl	8003500 <MCM_Trig_Functions>
 8007c00:	9b04      	ldr	r3, [sp, #16]
 8007c02:	9a03      	ldr	r2, [sp, #12]
 8007c04:	fb13 f309 	smulbb	r3, r3, r9
 8007c08:	fb12 f109 	smulbb	r1, r2, r9
 8007c0c:	425b      	negs	r3, r3
 8007c0e:	fb10 f303 	smulbb	r3, r0, r3
 8007c12:	fb10 f021 	smultb	r0, r0, r1
 8007c16:	f343 33cf 	sbfx	r3, r3, #15, #16
 8007c1a:	f340 31cf 	sbfx	r1, r0, #15, #16
 8007c1e:	1a59      	subs	r1, r3, r1
 8007c20:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8007c24:	f7fe ff70 	bl	8006b08 <PI_Controller>
 8007c28:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
 8007c2c:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
 8007c30:	8220      	strh	r0, [r4, #16]
 8007c32:	3301      	adds	r3, #1
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	429a      	cmp	r2, r3
 8007c38:	bf0a      	itet	eq
 8007c3a:	2200      	moveq	r2, #0
 8007c3c:	461a      	movne	r2, r3
 8007c3e:	4613      	moveq	r3, r2
 8007c40:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8007c44:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 8007c48:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 8007c4c:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
 8007c50:	88a2      	ldrh	r2, [r4, #4]
 8007c52:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
 8007c56:	4410      	add	r0, r2
 8007c58:	b200      	sxth	r0, r0
 8007c5a:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
 8007c5e:	e9c4 5719 	strd	r5, r7, [r4, #100]	; 0x64
 8007c62:	66e6      	str	r6, [r4, #108]	; 0x6c
 8007c64:	80a0      	strh	r0, [r4, #4]
 8007c66:	b009      	add	sp, #36	; 0x24
 8007c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c6c:	1a1d      	subs	r5, r3, r0
 8007c6e:	45ae      	cmp	lr, r5
 8007c70:	bfdc      	itt	le
 8007c72:	66a5      	strle	r5, [r4, #104]	; 0x68
 8007c74:	46ae      	movle	lr, r5
 8007c76:	e73a      	b.n	8007aee <STO_PLL_CalcElAngle+0x1e>
 8007c78:	fa1f f982 	uxth.w	r9, r2
 8007c7c:	e7bc      	b.n	8007bf8 <STO_PLL_CalcElAngle+0x128>
 8007c7e:	1b9b      	subs	r3, r3, r6
 8007c80:	429a      	cmp	r2, r3
 8007c82:	bfdc      	itt	le
 8007c84:	6663      	strle	r3, [r4, #100]	; 0x64
 8007c86:	461a      	movle	r2, r3
 8007c88:	e754      	b.n	8007b34 <STO_PLL_CalcElAngle+0x64>
 8007c8a:	1b9a      	subs	r2, r3, r6
 8007c8c:	4290      	cmp	r0, r2
 8007c8e:	bfdc      	itt	le
 8007c90:	6622      	strle	r2, [r4, #96]	; 0x60
 8007c92:	4610      	movle	r0, r2
 8007c94:	e748      	b.n	8007b28 <STO_PLL_CalcElAngle+0x58>
 8007c96:	1a1b      	subs	r3, r3, r0
 8007c98:	459c      	cmp	ip, r3
 8007c9a:	bfdc      	itt	le
 8007c9c:	66e3      	strle	r3, [r4, #108]	; 0x6c
 8007c9e:	469c      	movle	ip, r3
 8007ca0:	e733      	b.n	8007b0a <STO_PLL_CalcElAngle+0x3a>
 8007ca2:	bf00      	nop

08007ca4 <STO_PLL_CalcAvrgMecSpeedUnit>:
 8007ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ca6:	f890 c10e 	ldrb.w	ip, [r0, #270]	; 0x10e
 8007caa:	f1bc 0f00 	cmp.w	ip, #0
 8007cae:	f000 8095 	beq.w	8007ddc <STO_PLL_CalcAvrgMecSpeedUnit+0x138>
 8007cb2:	f10c 37ff 	add.w	r7, ip, #4294967295
 8007cb6:	b2fb      	uxtb	r3, r7
 8007cb8:	f100 0672 	add.w	r6, r0, #114	; 0x72
 8007cbc:	f100 0774 	add.w	r7, r0, #116	; 0x74
 8007cc0:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8007cc4:	4632      	mov	r2, r6
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	f932 5f02 	ldrsh.w	r5, [r2, #2]!
 8007ccc:	4297      	cmp	r7, r2
 8007cce:	442b      	add	r3, r5
 8007cd0:	d1fa      	bne.n	8007cc8 <STO_PLL_CalcAvrgMecSpeedUnit+0x24>
 8007cd2:	fb93 f5fc 	sdiv	r5, r3, ip
 8007cd6:	2400      	movs	r4, #0
 8007cd8:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
 8007cdc:	1b5b      	subs	r3, r3, r5
 8007cde:	42b2      	cmp	r2, r6
 8007ce0:	fb03 4403 	mla	r4, r3, r3, r4
 8007ce4:	d1f8      	bne.n	8007cd8 <STO_PLL_CalcAvrgMecSpeedUnit+0x34>
 8007ce6:	fb94 f4fc 	sdiv	r4, r4, ip
 8007cea:	fb05 fc05 	mul.w	ip, r5, r5
 8007cee:	f8b0 2110 	ldrh.w	r2, [r0, #272]	; 0x110
 8007cf2:	8b43      	ldrh	r3, [r0, #26]
 8007cf4:	7887      	ldrb	r7, [r0, #2]
 8007cf6:	f890 6104 	ldrb.w	r6, [r0, #260]	; 0x104
 8007cfa:	fb0c fc02 	mul.w	ip, ip, r2
 8007cfe:	ea4f 1cec 	mov.w	ip, ip, asr #7
 8007d02:	fb05 f303 	mul.w	r3, r5, r3
 8007d06:	45a4      	cmp	ip, r4
 8007d08:	69c2      	ldr	r2, [r0, #28]
 8007d0a:	bfd4      	ite	le
 8007d0c:	2500      	movle	r5, #0
 8007d0e:	2501      	movgt	r5, #1
 8007d10:	fb03 f307 	mul.w	r3, r3, r7
 8007d14:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d18:	7842      	ldrb	r2, [r0, #1]
 8007d1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d1e:	b21a      	sxth	r2, r3
 8007d20:	800a      	strh	r2, [r1, #0]
 8007d22:	f880 50f5 	strb.w	r5, [r0, #245]	; 0xf5
 8007d26:	8182      	strh	r2, [r0, #12]
 8007d28:	f890 50f8 	ldrb.w	r5, [r0, #248]	; 0xf8
 8007d2c:	b99e      	cbnz	r6, 8007d56 <STO_PLL_CalcAvrgMecSpeedUnit+0xb2>
 8007d2e:	b355      	cbz	r5, 8007d86 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 8007d30:	45a4      	cmp	ip, r4
 8007d32:	dc25      	bgt.n	8007d80 <STO_PLL_CalcAvrgMecSpeedUnit+0xdc>
 8007d34:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
 8007d38:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	429a      	cmp	r2, r3
 8007d42:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 8007d46:	d81e      	bhi.n	8007d86 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	78c2      	ldrb	r2, [r0, #3]
 8007d4c:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 8007d50:	7002      	strb	r2, [r0, #0]
 8007d52:	4618      	mov	r0, r3
 8007d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f8b0 211a 	ldrh.w	r2, [r0, #282]	; 0x11a
 8007d5c:	bfb8      	it	lt
 8007d5e:	425b      	neglt	r3, r3
 8007d60:	429a      	cmp	r2, r3
 8007d62:	dc14      	bgt.n	8007d8e <STO_PLL_CalcAvrgMecSpeedUnit+0xea>
 8007d64:	2200      	movs	r2, #0
 8007d66:	4613      	mov	r3, r2
 8007d68:	4616      	mov	r6, r2
 8007d6a:	f880 20f9 	strb.w	r2, [r0, #249]	; 0xf9
 8007d6e:	f8c0 60fc 	str.w	r6, [r0, #252]	; 0xfc
 8007d72:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8007d76:	b135      	cbz	r5, 8007d86 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 8007d78:	45a4      	cmp	ip, r4
 8007d7a:	dddb      	ble.n	8007d34 <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 8007d7c:	2a00      	cmp	r2, #0
 8007d7e:	d0d9      	beq.n	8007d34 <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 8007d80:	2300      	movs	r3, #0
 8007d82:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 8007d86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007d8a:	f7ff b9a3 	b.w	80070d4 <SPD_IsMecSpeedReliable>
 8007d8e:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
 8007d92:	f9b0 e014 	ldrsh.w	lr, [r0, #20]
 8007d96:	f9b0 7070 	ldrsh.w	r7, [r0, #112]	; 0x70
 8007d9a:	f9b0 6072 	ldrsh.w	r6, [r0, #114]	; 0x72
 8007d9e:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8007da2:	fb93 f3fe 	sdiv	r3, r3, lr
 8007da6:	fb03 f202 	mul.w	r2, r3, r2
 8007daa:	2a00      	cmp	r2, #0
 8007dac:	bfb8      	it	lt
 8007dae:	323f      	addlt	r2, #63	; 0x3f
 8007db0:	1192      	asrs	r2, r2, #6
 8007db2:	fb02 f303 	mul.w	r3, r2, r3
 8007db6:	fb07 f707 	mul.w	r7, r7, r7
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	fb06 7606 	mla	r6, r6, r6, r7
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	f890 7118 	ldrb.w	r7, [r0, #280]	; 0x118
 8007dc6:	bfb8      	it	lt
 8007dc8:	f103 023f 	addlt.w	r2, r3, #63	; 0x3f
 8007dcc:	1192      	asrs	r2, r2, #6
 8007dce:	fb07 3212 	mls	r2, r7, r2, r3
 8007dd2:	4296      	cmp	r6, r2
 8007dd4:	bfd4      	ite	le
 8007dd6:	2200      	movle	r2, #0
 8007dd8:	2201      	movgt	r2, #1
 8007dda:	e7c6      	b.n	8007d6a <STO_PLL_CalcAvrgMecSpeedUnit+0xc6>
 8007ddc:	4664      	mov	r4, ip
 8007dde:	4665      	mov	r5, ip
 8007de0:	e785      	b.n	8007cee <STO_PLL_CalcAvrgMecSpeedUnit+0x4a>
 8007de2:	bf00      	nop

08007de4 <STO_PLL_CalcAvrgElSpeedDpp>:
 8007de4:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
 8007de8:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
 8007dec:	b470      	push	{r4, r5, r6}
 8007dee:	f890 410e 	ldrb.w	r4, [r0, #270]	; 0x10e
 8007df2:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
 8007df6:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 8007dfa:	b2a6      	uxth	r6, r4
 8007dfc:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	; 0x74
 8007e00:	1af3      	subs	r3, r6, r3
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	442a      	add	r2, r5
 8007e06:	b19b      	cbz	r3, 8007e30 <STO_PLL_CalcAvrgElSpeedDpp+0x4c>
 8007e08:	440b      	add	r3, r1
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	b219      	sxth	r1, r3
 8007e0e:	428c      	cmp	r4, r1
 8007e10:	bfdc      	itt	le
 8007e12:	1b9b      	suble	r3, r3, r6
 8007e14:	b219      	sxthle	r1, r3
 8007e16:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 8007e1a:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
 8007e24:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8007e28:	4113      	asrs	r3, r2
 8007e2a:	81c3      	strh	r3, [r0, #14]
 8007e2c:	bc70      	pop	{r4, r5, r6}
 8007e2e:	4770      	bx	lr
 8007e30:	f9b0 310c 	ldrsh.w	r3, [r0, #268]	; 0x10c
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	e7f3      	b.n	8007e20 <STO_PLL_CalcAvrgElSpeedDpp+0x3c>

08007e38 <STO_PLL_Clear>:
 8007e38:	b510      	push	{r4, lr}
 8007e3a:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
 8007e3e:	2100      	movs	r1, #0
 8007e40:	4604      	mov	r4, r0
 8007e42:	e9c0 1118 	strd	r1, r1, [r0, #96]	; 0x60
 8007e46:	e9c0 111a 	strd	r1, r1, [r0, #104]	; 0x68
 8007e4a:	8081      	strh	r1, [r0, #4]
 8007e4c:	81c1      	strh	r1, [r0, #14]
 8007e4e:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
 8007e52:	f880 10f8 	strb.w	r1, [r0, #248]	; 0xf8
 8007e56:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
 8007e5a:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
 8007e5e:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
 8007e62:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
 8007e66:	f880 1122 	strb.w	r1, [r0, #290]	; 0x122
 8007e6a:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
 8007e6e:	b132      	cbz	r2, 8007e7e <STO_PLL_Clear+0x46>
 8007e70:	3a01      	subs	r2, #1
 8007e72:	b2d2      	uxtb	r2, r2
 8007e74:	3201      	adds	r2, #1
 8007e76:	0052      	lsls	r2, r2, #1
 8007e78:	3074      	adds	r0, #116	; 0x74
 8007e7a:	f000 f891 	bl	8007fa0 <memset>
 8007e7e:	2100      	movs	r1, #0
 8007e80:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
 8007e84:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 8007e88:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8007e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e90:	f7fe be36 	b.w	8006b00 <PID_SetIntegralTerm>

08007e94 <STO_PLL_IsObserverConverged>:
 8007e94:	f890 2123 	ldrb.w	r2, [r0, #291]	; 0x123
 8007e98:	4603      	mov	r3, r0
 8007e9a:	b10a      	cbz	r2, 8007ea0 <STO_PLL_IsObserverConverged+0xc>
 8007e9c:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8007ea0:	f893 0122 	ldrb.w	r0, [r3, #290]	; 0x122
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	d143      	bne.n	8007f30 <STO_PLL_IsObserverConverged+0x9c>
 8007ea8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8007eac:	b430      	push	{r4, r5}
 8007eae:	fb02 f501 	mul.w	r5, r2, r1
 8007eb2:	2d00      	cmp	r5, #0
 8007eb4:	460c      	mov	r4, r1
 8007eb6:	dd34      	ble.n	8007f22 <STO_PLL_IsObserverConverged+0x8e>
 8007eb8:	2a00      	cmp	r2, #0
 8007eba:	bfbc      	itt	lt
 8007ebc:	4252      	neglt	r2, r2
 8007ebe:	b212      	sxthlt	r2, r2
 8007ec0:	2900      	cmp	r1, #0
 8007ec2:	bfbc      	itt	lt
 8007ec4:	4249      	neglt	r1, r1
 8007ec6:	b20c      	sxthlt	r4, r1
 8007ec8:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
 8007ecc:	b359      	cbz	r1, 8007f26 <STO_PLL_IsObserverConverged+0x92>
 8007ece:	f8b3 5114 	ldrh.w	r5, [r3, #276]	; 0x114
 8007ed2:	b291      	uxth	r1, r2
 8007ed4:	428d      	cmp	r5, r1
 8007ed6:	d226      	bcs.n	8007f26 <STO_PLL_IsObserverConverged+0x92>
 8007ed8:	f893 1113 	ldrb.w	r1, [r3, #275]	; 0x113
 8007edc:	fb04 f101 	mul.w	r1, r4, r1
 8007ee0:	2900      	cmp	r1, #0
 8007ee2:	bfb8      	it	lt
 8007ee4:	310f      	addlt	r1, #15
 8007ee6:	f341 110f 	sbfx	r1, r1, #4, #16
 8007eea:	428a      	cmp	r2, r1
 8007eec:	db1b      	blt.n	8007f26 <STO_PLL_IsObserverConverged+0x92>
 8007eee:	f893 1112 	ldrb.w	r1, [r3, #274]	; 0x112
 8007ef2:	fb04 f101 	mul.w	r1, r4, r1
 8007ef6:	2900      	cmp	r1, #0
 8007ef8:	bfb8      	it	lt
 8007efa:	310f      	addlt	r1, #15
 8007efc:	f341 110f 	sbfx	r1, r1, #4, #16
 8007f00:	428a      	cmp	r2, r1
 8007f02:	dc10      	bgt.n	8007f26 <STO_PLL_IsObserverConverged+0x92>
 8007f04:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
 8007f08:	f893 1116 	ldrb.w	r1, [r3, #278]	; 0x116
 8007f0c:	3201      	adds	r2, #1
 8007f0e:	b2d2      	uxtb	r2, r2
 8007f10:	4291      	cmp	r1, r2
 8007f12:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 8007f16:	d804      	bhi.n	8007f22 <STO_PLL_IsObserverConverged+0x8e>
 8007f18:	2001      	movs	r0, #1
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 8007f20:	701a      	strb	r2, [r3, #0]
 8007f22:	bc30      	pop	{r4, r5}
 8007f24:	4770      	bx	lr
 8007f26:	2200      	movs	r2, #0
 8007f28:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 8007f2c:	bc30      	pop	{r4, r5}
 8007f2e:	4770      	bx	lr
 8007f30:	2001      	movs	r0, #1
 8007f32:	2200      	movs	r2, #0
 8007f34:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 8007f38:	701a      	strb	r2, [r3, #0]
 8007f3a:	4770      	bx	lr

08007f3c <STO_ResetPLL>:
 8007f3c:	3034      	adds	r0, #52	; 0x34
 8007f3e:	2100      	movs	r1, #0
 8007f40:	f7fe bdde 	b.w	8006b00 <PID_SetIntegralTerm>

08007f44 <STO_SetDirection>:
 8007f44:	f880 1124 	strb.w	r1, [r0, #292]	; 0x124
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop

08007f4c <__errno>:
 8007f4c:	4b01      	ldr	r3, [pc, #4]	; (8007f54 <__errno+0x8>)
 8007f4e:	6818      	ldr	r0, [r3, #0]
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	200004ac 	.word	0x200004ac

08007f58 <__libc_init_array>:
 8007f58:	b570      	push	{r4, r5, r6, lr}
 8007f5a:	4d0d      	ldr	r5, [pc, #52]	; (8007f90 <__libc_init_array+0x38>)
 8007f5c:	4c0d      	ldr	r4, [pc, #52]	; (8007f94 <__libc_init_array+0x3c>)
 8007f5e:	1b64      	subs	r4, r4, r5
 8007f60:	10a4      	asrs	r4, r4, #2
 8007f62:	2600      	movs	r6, #0
 8007f64:	42a6      	cmp	r6, r4
 8007f66:	d109      	bne.n	8007f7c <__libc_init_array+0x24>
 8007f68:	4d0b      	ldr	r5, [pc, #44]	; (8007f98 <__libc_init_array+0x40>)
 8007f6a:	4c0c      	ldr	r4, [pc, #48]	; (8007f9c <__libc_init_array+0x44>)
 8007f6c:	f000 fe94 	bl	8008c98 <_init>
 8007f70:	1b64      	subs	r4, r4, r5
 8007f72:	10a4      	asrs	r4, r4, #2
 8007f74:	2600      	movs	r6, #0
 8007f76:	42a6      	cmp	r6, r4
 8007f78:	d105      	bne.n	8007f86 <__libc_init_array+0x2e>
 8007f7a:	bd70      	pop	{r4, r5, r6, pc}
 8007f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f80:	4798      	blx	r3
 8007f82:	3601      	adds	r6, #1
 8007f84:	e7ee      	b.n	8007f64 <__libc_init_array+0xc>
 8007f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f8a:	4798      	blx	r3
 8007f8c:	3601      	adds	r6, #1
 8007f8e:	e7f2      	b.n	8007f76 <__libc_init_array+0x1e>
 8007f90:	08009330 	.word	0x08009330
 8007f94:	08009330 	.word	0x08009330
 8007f98:	08009330 	.word	0x08009330
 8007f9c:	08009334 	.word	0x08009334

08007fa0 <memset>:
 8007fa0:	4402      	add	r2, r0
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d100      	bne.n	8007faa <memset+0xa>
 8007fa8:	4770      	bx	lr
 8007faa:	f803 1b01 	strb.w	r1, [r3], #1
 8007fae:	e7f9      	b.n	8007fa4 <memset+0x4>

08007fb0 <siprintf>:
 8007fb0:	b40e      	push	{r1, r2, r3}
 8007fb2:	b500      	push	{lr}
 8007fb4:	b09c      	sub	sp, #112	; 0x70
 8007fb6:	ab1d      	add	r3, sp, #116	; 0x74
 8007fb8:	9002      	str	r0, [sp, #8]
 8007fba:	9006      	str	r0, [sp, #24]
 8007fbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007fc0:	4809      	ldr	r0, [pc, #36]	; (8007fe8 <siprintf+0x38>)
 8007fc2:	9107      	str	r1, [sp, #28]
 8007fc4:	9104      	str	r1, [sp, #16]
 8007fc6:	4909      	ldr	r1, [pc, #36]	; (8007fec <siprintf+0x3c>)
 8007fc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fcc:	9105      	str	r1, [sp, #20]
 8007fce:	6800      	ldr	r0, [r0, #0]
 8007fd0:	9301      	str	r3, [sp, #4]
 8007fd2:	a902      	add	r1, sp, #8
 8007fd4:	f000 f868 	bl	80080a8 <_svfiprintf_r>
 8007fd8:	9b02      	ldr	r3, [sp, #8]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	701a      	strb	r2, [r3, #0]
 8007fde:	b01c      	add	sp, #112	; 0x70
 8007fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fe4:	b003      	add	sp, #12
 8007fe6:	4770      	bx	lr
 8007fe8:	200004ac 	.word	0x200004ac
 8007fec:	ffff0208 	.word	0xffff0208

08007ff0 <__ssputs_r>:
 8007ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff4:	688e      	ldr	r6, [r1, #8]
 8007ff6:	429e      	cmp	r6, r3
 8007ff8:	4682      	mov	sl, r0
 8007ffa:	460c      	mov	r4, r1
 8007ffc:	4690      	mov	r8, r2
 8007ffe:	461f      	mov	r7, r3
 8008000:	d838      	bhi.n	8008074 <__ssputs_r+0x84>
 8008002:	898a      	ldrh	r2, [r1, #12]
 8008004:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008008:	d032      	beq.n	8008070 <__ssputs_r+0x80>
 800800a:	6825      	ldr	r5, [r4, #0]
 800800c:	6909      	ldr	r1, [r1, #16]
 800800e:	eba5 0901 	sub.w	r9, r5, r1
 8008012:	6965      	ldr	r5, [r4, #20]
 8008014:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008018:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800801c:	3301      	adds	r3, #1
 800801e:	444b      	add	r3, r9
 8008020:	106d      	asrs	r5, r5, #1
 8008022:	429d      	cmp	r5, r3
 8008024:	bf38      	it	cc
 8008026:	461d      	movcc	r5, r3
 8008028:	0553      	lsls	r3, r2, #21
 800802a:	d531      	bpl.n	8008090 <__ssputs_r+0xa0>
 800802c:	4629      	mov	r1, r5
 800802e:	f000 fb63 	bl	80086f8 <_malloc_r>
 8008032:	4606      	mov	r6, r0
 8008034:	b950      	cbnz	r0, 800804c <__ssputs_r+0x5c>
 8008036:	230c      	movs	r3, #12
 8008038:	f8ca 3000 	str.w	r3, [sl]
 800803c:	89a3      	ldrh	r3, [r4, #12]
 800803e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008042:	81a3      	strh	r3, [r4, #12]
 8008044:	f04f 30ff 	mov.w	r0, #4294967295
 8008048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800804c:	6921      	ldr	r1, [r4, #16]
 800804e:	464a      	mov	r2, r9
 8008050:	f000 fabe 	bl	80085d0 <memcpy>
 8008054:	89a3      	ldrh	r3, [r4, #12]
 8008056:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800805a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800805e:	81a3      	strh	r3, [r4, #12]
 8008060:	6126      	str	r6, [r4, #16]
 8008062:	6165      	str	r5, [r4, #20]
 8008064:	444e      	add	r6, r9
 8008066:	eba5 0509 	sub.w	r5, r5, r9
 800806a:	6026      	str	r6, [r4, #0]
 800806c:	60a5      	str	r5, [r4, #8]
 800806e:	463e      	mov	r6, r7
 8008070:	42be      	cmp	r6, r7
 8008072:	d900      	bls.n	8008076 <__ssputs_r+0x86>
 8008074:	463e      	mov	r6, r7
 8008076:	6820      	ldr	r0, [r4, #0]
 8008078:	4632      	mov	r2, r6
 800807a:	4641      	mov	r1, r8
 800807c:	f000 fab6 	bl	80085ec <memmove>
 8008080:	68a3      	ldr	r3, [r4, #8]
 8008082:	1b9b      	subs	r3, r3, r6
 8008084:	60a3      	str	r3, [r4, #8]
 8008086:	6823      	ldr	r3, [r4, #0]
 8008088:	4433      	add	r3, r6
 800808a:	6023      	str	r3, [r4, #0]
 800808c:	2000      	movs	r0, #0
 800808e:	e7db      	b.n	8008048 <__ssputs_r+0x58>
 8008090:	462a      	mov	r2, r5
 8008092:	f000 fba5 	bl	80087e0 <_realloc_r>
 8008096:	4606      	mov	r6, r0
 8008098:	2800      	cmp	r0, #0
 800809a:	d1e1      	bne.n	8008060 <__ssputs_r+0x70>
 800809c:	6921      	ldr	r1, [r4, #16]
 800809e:	4650      	mov	r0, sl
 80080a0:	f000 fabe 	bl	8008620 <_free_r>
 80080a4:	e7c7      	b.n	8008036 <__ssputs_r+0x46>
	...

080080a8 <_svfiprintf_r>:
 80080a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ac:	4698      	mov	r8, r3
 80080ae:	898b      	ldrh	r3, [r1, #12]
 80080b0:	061b      	lsls	r3, r3, #24
 80080b2:	b09d      	sub	sp, #116	; 0x74
 80080b4:	4607      	mov	r7, r0
 80080b6:	460d      	mov	r5, r1
 80080b8:	4614      	mov	r4, r2
 80080ba:	d50e      	bpl.n	80080da <_svfiprintf_r+0x32>
 80080bc:	690b      	ldr	r3, [r1, #16]
 80080be:	b963      	cbnz	r3, 80080da <_svfiprintf_r+0x32>
 80080c0:	2140      	movs	r1, #64	; 0x40
 80080c2:	f000 fb19 	bl	80086f8 <_malloc_r>
 80080c6:	6028      	str	r0, [r5, #0]
 80080c8:	6128      	str	r0, [r5, #16]
 80080ca:	b920      	cbnz	r0, 80080d6 <_svfiprintf_r+0x2e>
 80080cc:	230c      	movs	r3, #12
 80080ce:	603b      	str	r3, [r7, #0]
 80080d0:	f04f 30ff 	mov.w	r0, #4294967295
 80080d4:	e0d1      	b.n	800827a <_svfiprintf_r+0x1d2>
 80080d6:	2340      	movs	r3, #64	; 0x40
 80080d8:	616b      	str	r3, [r5, #20]
 80080da:	2300      	movs	r3, #0
 80080dc:	9309      	str	r3, [sp, #36]	; 0x24
 80080de:	2320      	movs	r3, #32
 80080e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80080e8:	2330      	movs	r3, #48	; 0x30
 80080ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008294 <_svfiprintf_r+0x1ec>
 80080ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080f2:	f04f 0901 	mov.w	r9, #1
 80080f6:	4623      	mov	r3, r4
 80080f8:	469a      	mov	sl, r3
 80080fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080fe:	b10a      	cbz	r2, 8008104 <_svfiprintf_r+0x5c>
 8008100:	2a25      	cmp	r2, #37	; 0x25
 8008102:	d1f9      	bne.n	80080f8 <_svfiprintf_r+0x50>
 8008104:	ebba 0b04 	subs.w	fp, sl, r4
 8008108:	d00b      	beq.n	8008122 <_svfiprintf_r+0x7a>
 800810a:	465b      	mov	r3, fp
 800810c:	4622      	mov	r2, r4
 800810e:	4629      	mov	r1, r5
 8008110:	4638      	mov	r0, r7
 8008112:	f7ff ff6d 	bl	8007ff0 <__ssputs_r>
 8008116:	3001      	adds	r0, #1
 8008118:	f000 80aa 	beq.w	8008270 <_svfiprintf_r+0x1c8>
 800811c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800811e:	445a      	add	r2, fp
 8008120:	9209      	str	r2, [sp, #36]	; 0x24
 8008122:	f89a 3000 	ldrb.w	r3, [sl]
 8008126:	2b00      	cmp	r3, #0
 8008128:	f000 80a2 	beq.w	8008270 <_svfiprintf_r+0x1c8>
 800812c:	2300      	movs	r3, #0
 800812e:	f04f 32ff 	mov.w	r2, #4294967295
 8008132:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008136:	f10a 0a01 	add.w	sl, sl, #1
 800813a:	9304      	str	r3, [sp, #16]
 800813c:	9307      	str	r3, [sp, #28]
 800813e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008142:	931a      	str	r3, [sp, #104]	; 0x68
 8008144:	4654      	mov	r4, sl
 8008146:	2205      	movs	r2, #5
 8008148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800814c:	4851      	ldr	r0, [pc, #324]	; (8008294 <_svfiprintf_r+0x1ec>)
 800814e:	f7f8 f867 	bl	8000220 <memchr>
 8008152:	9a04      	ldr	r2, [sp, #16]
 8008154:	b9d8      	cbnz	r0, 800818e <_svfiprintf_r+0xe6>
 8008156:	06d0      	lsls	r0, r2, #27
 8008158:	bf44      	itt	mi
 800815a:	2320      	movmi	r3, #32
 800815c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008160:	0711      	lsls	r1, r2, #28
 8008162:	bf44      	itt	mi
 8008164:	232b      	movmi	r3, #43	; 0x2b
 8008166:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800816a:	f89a 3000 	ldrb.w	r3, [sl]
 800816e:	2b2a      	cmp	r3, #42	; 0x2a
 8008170:	d015      	beq.n	800819e <_svfiprintf_r+0xf6>
 8008172:	9a07      	ldr	r2, [sp, #28]
 8008174:	4654      	mov	r4, sl
 8008176:	2000      	movs	r0, #0
 8008178:	f04f 0c0a 	mov.w	ip, #10
 800817c:	4621      	mov	r1, r4
 800817e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008182:	3b30      	subs	r3, #48	; 0x30
 8008184:	2b09      	cmp	r3, #9
 8008186:	d94e      	bls.n	8008226 <_svfiprintf_r+0x17e>
 8008188:	b1b0      	cbz	r0, 80081b8 <_svfiprintf_r+0x110>
 800818a:	9207      	str	r2, [sp, #28]
 800818c:	e014      	b.n	80081b8 <_svfiprintf_r+0x110>
 800818e:	eba0 0308 	sub.w	r3, r0, r8
 8008192:	fa09 f303 	lsl.w	r3, r9, r3
 8008196:	4313      	orrs	r3, r2
 8008198:	9304      	str	r3, [sp, #16]
 800819a:	46a2      	mov	sl, r4
 800819c:	e7d2      	b.n	8008144 <_svfiprintf_r+0x9c>
 800819e:	9b03      	ldr	r3, [sp, #12]
 80081a0:	1d19      	adds	r1, r3, #4
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	9103      	str	r1, [sp, #12]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	bfbb      	ittet	lt
 80081aa:	425b      	neglt	r3, r3
 80081ac:	f042 0202 	orrlt.w	r2, r2, #2
 80081b0:	9307      	strge	r3, [sp, #28]
 80081b2:	9307      	strlt	r3, [sp, #28]
 80081b4:	bfb8      	it	lt
 80081b6:	9204      	strlt	r2, [sp, #16]
 80081b8:	7823      	ldrb	r3, [r4, #0]
 80081ba:	2b2e      	cmp	r3, #46	; 0x2e
 80081bc:	d10c      	bne.n	80081d8 <_svfiprintf_r+0x130>
 80081be:	7863      	ldrb	r3, [r4, #1]
 80081c0:	2b2a      	cmp	r3, #42	; 0x2a
 80081c2:	d135      	bne.n	8008230 <_svfiprintf_r+0x188>
 80081c4:	9b03      	ldr	r3, [sp, #12]
 80081c6:	1d1a      	adds	r2, r3, #4
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	9203      	str	r2, [sp, #12]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	bfb8      	it	lt
 80081d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80081d4:	3402      	adds	r4, #2
 80081d6:	9305      	str	r3, [sp, #20]
 80081d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80082a4 <_svfiprintf_r+0x1fc>
 80081dc:	7821      	ldrb	r1, [r4, #0]
 80081de:	2203      	movs	r2, #3
 80081e0:	4650      	mov	r0, sl
 80081e2:	f7f8 f81d 	bl	8000220 <memchr>
 80081e6:	b140      	cbz	r0, 80081fa <_svfiprintf_r+0x152>
 80081e8:	2340      	movs	r3, #64	; 0x40
 80081ea:	eba0 000a 	sub.w	r0, r0, sl
 80081ee:	fa03 f000 	lsl.w	r0, r3, r0
 80081f2:	9b04      	ldr	r3, [sp, #16]
 80081f4:	4303      	orrs	r3, r0
 80081f6:	3401      	adds	r4, #1
 80081f8:	9304      	str	r3, [sp, #16]
 80081fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081fe:	4826      	ldr	r0, [pc, #152]	; (8008298 <_svfiprintf_r+0x1f0>)
 8008200:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008204:	2206      	movs	r2, #6
 8008206:	f7f8 f80b 	bl	8000220 <memchr>
 800820a:	2800      	cmp	r0, #0
 800820c:	d038      	beq.n	8008280 <_svfiprintf_r+0x1d8>
 800820e:	4b23      	ldr	r3, [pc, #140]	; (800829c <_svfiprintf_r+0x1f4>)
 8008210:	bb1b      	cbnz	r3, 800825a <_svfiprintf_r+0x1b2>
 8008212:	9b03      	ldr	r3, [sp, #12]
 8008214:	3307      	adds	r3, #7
 8008216:	f023 0307 	bic.w	r3, r3, #7
 800821a:	3308      	adds	r3, #8
 800821c:	9303      	str	r3, [sp, #12]
 800821e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008220:	4433      	add	r3, r6
 8008222:	9309      	str	r3, [sp, #36]	; 0x24
 8008224:	e767      	b.n	80080f6 <_svfiprintf_r+0x4e>
 8008226:	fb0c 3202 	mla	r2, ip, r2, r3
 800822a:	460c      	mov	r4, r1
 800822c:	2001      	movs	r0, #1
 800822e:	e7a5      	b.n	800817c <_svfiprintf_r+0xd4>
 8008230:	2300      	movs	r3, #0
 8008232:	3401      	adds	r4, #1
 8008234:	9305      	str	r3, [sp, #20]
 8008236:	4619      	mov	r1, r3
 8008238:	f04f 0c0a 	mov.w	ip, #10
 800823c:	4620      	mov	r0, r4
 800823e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008242:	3a30      	subs	r2, #48	; 0x30
 8008244:	2a09      	cmp	r2, #9
 8008246:	d903      	bls.n	8008250 <_svfiprintf_r+0x1a8>
 8008248:	2b00      	cmp	r3, #0
 800824a:	d0c5      	beq.n	80081d8 <_svfiprintf_r+0x130>
 800824c:	9105      	str	r1, [sp, #20]
 800824e:	e7c3      	b.n	80081d8 <_svfiprintf_r+0x130>
 8008250:	fb0c 2101 	mla	r1, ip, r1, r2
 8008254:	4604      	mov	r4, r0
 8008256:	2301      	movs	r3, #1
 8008258:	e7f0      	b.n	800823c <_svfiprintf_r+0x194>
 800825a:	ab03      	add	r3, sp, #12
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	462a      	mov	r2, r5
 8008260:	4b0f      	ldr	r3, [pc, #60]	; (80082a0 <_svfiprintf_r+0x1f8>)
 8008262:	a904      	add	r1, sp, #16
 8008264:	4638      	mov	r0, r7
 8008266:	f3af 8000 	nop.w
 800826a:	1c42      	adds	r2, r0, #1
 800826c:	4606      	mov	r6, r0
 800826e:	d1d6      	bne.n	800821e <_svfiprintf_r+0x176>
 8008270:	89ab      	ldrh	r3, [r5, #12]
 8008272:	065b      	lsls	r3, r3, #25
 8008274:	f53f af2c 	bmi.w	80080d0 <_svfiprintf_r+0x28>
 8008278:	9809      	ldr	r0, [sp, #36]	; 0x24
 800827a:	b01d      	add	sp, #116	; 0x74
 800827c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008280:	ab03      	add	r3, sp, #12
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	462a      	mov	r2, r5
 8008286:	4b06      	ldr	r3, [pc, #24]	; (80082a0 <_svfiprintf_r+0x1f8>)
 8008288:	a904      	add	r1, sp, #16
 800828a:	4638      	mov	r0, r7
 800828c:	f000 f87a 	bl	8008384 <_printf_i>
 8008290:	e7eb      	b.n	800826a <_svfiprintf_r+0x1c2>
 8008292:	bf00      	nop
 8008294:	080092f2 	.word	0x080092f2
 8008298:	080092fc 	.word	0x080092fc
 800829c:	00000000 	.word	0x00000000
 80082a0:	08007ff1 	.word	0x08007ff1
 80082a4:	080092f8 	.word	0x080092f8

080082a8 <_printf_common>:
 80082a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082ac:	4616      	mov	r6, r2
 80082ae:	4699      	mov	r9, r3
 80082b0:	688a      	ldr	r2, [r1, #8]
 80082b2:	690b      	ldr	r3, [r1, #16]
 80082b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082b8:	4293      	cmp	r3, r2
 80082ba:	bfb8      	it	lt
 80082bc:	4613      	movlt	r3, r2
 80082be:	6033      	str	r3, [r6, #0]
 80082c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082c4:	4607      	mov	r7, r0
 80082c6:	460c      	mov	r4, r1
 80082c8:	b10a      	cbz	r2, 80082ce <_printf_common+0x26>
 80082ca:	3301      	adds	r3, #1
 80082cc:	6033      	str	r3, [r6, #0]
 80082ce:	6823      	ldr	r3, [r4, #0]
 80082d0:	0699      	lsls	r1, r3, #26
 80082d2:	bf42      	ittt	mi
 80082d4:	6833      	ldrmi	r3, [r6, #0]
 80082d6:	3302      	addmi	r3, #2
 80082d8:	6033      	strmi	r3, [r6, #0]
 80082da:	6825      	ldr	r5, [r4, #0]
 80082dc:	f015 0506 	ands.w	r5, r5, #6
 80082e0:	d106      	bne.n	80082f0 <_printf_common+0x48>
 80082e2:	f104 0a19 	add.w	sl, r4, #25
 80082e6:	68e3      	ldr	r3, [r4, #12]
 80082e8:	6832      	ldr	r2, [r6, #0]
 80082ea:	1a9b      	subs	r3, r3, r2
 80082ec:	42ab      	cmp	r3, r5
 80082ee:	dc26      	bgt.n	800833e <_printf_common+0x96>
 80082f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082f4:	1e13      	subs	r3, r2, #0
 80082f6:	6822      	ldr	r2, [r4, #0]
 80082f8:	bf18      	it	ne
 80082fa:	2301      	movne	r3, #1
 80082fc:	0692      	lsls	r2, r2, #26
 80082fe:	d42b      	bmi.n	8008358 <_printf_common+0xb0>
 8008300:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008304:	4649      	mov	r1, r9
 8008306:	4638      	mov	r0, r7
 8008308:	47c0      	blx	r8
 800830a:	3001      	adds	r0, #1
 800830c:	d01e      	beq.n	800834c <_printf_common+0xa4>
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	68e5      	ldr	r5, [r4, #12]
 8008312:	6832      	ldr	r2, [r6, #0]
 8008314:	f003 0306 	and.w	r3, r3, #6
 8008318:	2b04      	cmp	r3, #4
 800831a:	bf08      	it	eq
 800831c:	1aad      	subeq	r5, r5, r2
 800831e:	68a3      	ldr	r3, [r4, #8]
 8008320:	6922      	ldr	r2, [r4, #16]
 8008322:	bf0c      	ite	eq
 8008324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008328:	2500      	movne	r5, #0
 800832a:	4293      	cmp	r3, r2
 800832c:	bfc4      	itt	gt
 800832e:	1a9b      	subgt	r3, r3, r2
 8008330:	18ed      	addgt	r5, r5, r3
 8008332:	2600      	movs	r6, #0
 8008334:	341a      	adds	r4, #26
 8008336:	42b5      	cmp	r5, r6
 8008338:	d11a      	bne.n	8008370 <_printf_common+0xc8>
 800833a:	2000      	movs	r0, #0
 800833c:	e008      	b.n	8008350 <_printf_common+0xa8>
 800833e:	2301      	movs	r3, #1
 8008340:	4652      	mov	r2, sl
 8008342:	4649      	mov	r1, r9
 8008344:	4638      	mov	r0, r7
 8008346:	47c0      	blx	r8
 8008348:	3001      	adds	r0, #1
 800834a:	d103      	bne.n	8008354 <_printf_common+0xac>
 800834c:	f04f 30ff 	mov.w	r0, #4294967295
 8008350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008354:	3501      	adds	r5, #1
 8008356:	e7c6      	b.n	80082e6 <_printf_common+0x3e>
 8008358:	18e1      	adds	r1, r4, r3
 800835a:	1c5a      	adds	r2, r3, #1
 800835c:	2030      	movs	r0, #48	; 0x30
 800835e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008362:	4422      	add	r2, r4
 8008364:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008368:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800836c:	3302      	adds	r3, #2
 800836e:	e7c7      	b.n	8008300 <_printf_common+0x58>
 8008370:	2301      	movs	r3, #1
 8008372:	4622      	mov	r2, r4
 8008374:	4649      	mov	r1, r9
 8008376:	4638      	mov	r0, r7
 8008378:	47c0      	blx	r8
 800837a:	3001      	adds	r0, #1
 800837c:	d0e6      	beq.n	800834c <_printf_common+0xa4>
 800837e:	3601      	adds	r6, #1
 8008380:	e7d9      	b.n	8008336 <_printf_common+0x8e>
	...

08008384 <_printf_i>:
 8008384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008388:	7e0f      	ldrb	r7, [r1, #24]
 800838a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800838c:	2f78      	cmp	r7, #120	; 0x78
 800838e:	4691      	mov	r9, r2
 8008390:	4680      	mov	r8, r0
 8008392:	460c      	mov	r4, r1
 8008394:	469a      	mov	sl, r3
 8008396:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800839a:	d807      	bhi.n	80083ac <_printf_i+0x28>
 800839c:	2f62      	cmp	r7, #98	; 0x62
 800839e:	d80a      	bhi.n	80083b6 <_printf_i+0x32>
 80083a0:	2f00      	cmp	r7, #0
 80083a2:	f000 80d8 	beq.w	8008556 <_printf_i+0x1d2>
 80083a6:	2f58      	cmp	r7, #88	; 0x58
 80083a8:	f000 80a3 	beq.w	80084f2 <_printf_i+0x16e>
 80083ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083b4:	e03a      	b.n	800842c <_printf_i+0xa8>
 80083b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083ba:	2b15      	cmp	r3, #21
 80083bc:	d8f6      	bhi.n	80083ac <_printf_i+0x28>
 80083be:	a101      	add	r1, pc, #4	; (adr r1, 80083c4 <_printf_i+0x40>)
 80083c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083c4:	0800841d 	.word	0x0800841d
 80083c8:	08008431 	.word	0x08008431
 80083cc:	080083ad 	.word	0x080083ad
 80083d0:	080083ad 	.word	0x080083ad
 80083d4:	080083ad 	.word	0x080083ad
 80083d8:	080083ad 	.word	0x080083ad
 80083dc:	08008431 	.word	0x08008431
 80083e0:	080083ad 	.word	0x080083ad
 80083e4:	080083ad 	.word	0x080083ad
 80083e8:	080083ad 	.word	0x080083ad
 80083ec:	080083ad 	.word	0x080083ad
 80083f0:	0800853d 	.word	0x0800853d
 80083f4:	08008461 	.word	0x08008461
 80083f8:	0800851f 	.word	0x0800851f
 80083fc:	080083ad 	.word	0x080083ad
 8008400:	080083ad 	.word	0x080083ad
 8008404:	0800855f 	.word	0x0800855f
 8008408:	080083ad 	.word	0x080083ad
 800840c:	08008461 	.word	0x08008461
 8008410:	080083ad 	.word	0x080083ad
 8008414:	080083ad 	.word	0x080083ad
 8008418:	08008527 	.word	0x08008527
 800841c:	682b      	ldr	r3, [r5, #0]
 800841e:	1d1a      	adds	r2, r3, #4
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	602a      	str	r2, [r5, #0]
 8008424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800842c:	2301      	movs	r3, #1
 800842e:	e0a3      	b.n	8008578 <_printf_i+0x1f4>
 8008430:	6820      	ldr	r0, [r4, #0]
 8008432:	6829      	ldr	r1, [r5, #0]
 8008434:	0606      	lsls	r6, r0, #24
 8008436:	f101 0304 	add.w	r3, r1, #4
 800843a:	d50a      	bpl.n	8008452 <_printf_i+0xce>
 800843c:	680e      	ldr	r6, [r1, #0]
 800843e:	602b      	str	r3, [r5, #0]
 8008440:	2e00      	cmp	r6, #0
 8008442:	da03      	bge.n	800844c <_printf_i+0xc8>
 8008444:	232d      	movs	r3, #45	; 0x2d
 8008446:	4276      	negs	r6, r6
 8008448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800844c:	485e      	ldr	r0, [pc, #376]	; (80085c8 <_printf_i+0x244>)
 800844e:	230a      	movs	r3, #10
 8008450:	e019      	b.n	8008486 <_printf_i+0x102>
 8008452:	680e      	ldr	r6, [r1, #0]
 8008454:	602b      	str	r3, [r5, #0]
 8008456:	f010 0f40 	tst.w	r0, #64	; 0x40
 800845a:	bf18      	it	ne
 800845c:	b236      	sxthne	r6, r6
 800845e:	e7ef      	b.n	8008440 <_printf_i+0xbc>
 8008460:	682b      	ldr	r3, [r5, #0]
 8008462:	6820      	ldr	r0, [r4, #0]
 8008464:	1d19      	adds	r1, r3, #4
 8008466:	6029      	str	r1, [r5, #0]
 8008468:	0601      	lsls	r1, r0, #24
 800846a:	d501      	bpl.n	8008470 <_printf_i+0xec>
 800846c:	681e      	ldr	r6, [r3, #0]
 800846e:	e002      	b.n	8008476 <_printf_i+0xf2>
 8008470:	0646      	lsls	r6, r0, #25
 8008472:	d5fb      	bpl.n	800846c <_printf_i+0xe8>
 8008474:	881e      	ldrh	r6, [r3, #0]
 8008476:	4854      	ldr	r0, [pc, #336]	; (80085c8 <_printf_i+0x244>)
 8008478:	2f6f      	cmp	r7, #111	; 0x6f
 800847a:	bf0c      	ite	eq
 800847c:	2308      	moveq	r3, #8
 800847e:	230a      	movne	r3, #10
 8008480:	2100      	movs	r1, #0
 8008482:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008486:	6865      	ldr	r5, [r4, #4]
 8008488:	60a5      	str	r5, [r4, #8]
 800848a:	2d00      	cmp	r5, #0
 800848c:	bfa2      	ittt	ge
 800848e:	6821      	ldrge	r1, [r4, #0]
 8008490:	f021 0104 	bicge.w	r1, r1, #4
 8008494:	6021      	strge	r1, [r4, #0]
 8008496:	b90e      	cbnz	r6, 800849c <_printf_i+0x118>
 8008498:	2d00      	cmp	r5, #0
 800849a:	d04d      	beq.n	8008538 <_printf_i+0x1b4>
 800849c:	4615      	mov	r5, r2
 800849e:	fbb6 f1f3 	udiv	r1, r6, r3
 80084a2:	fb03 6711 	mls	r7, r3, r1, r6
 80084a6:	5dc7      	ldrb	r7, [r0, r7]
 80084a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80084ac:	4637      	mov	r7, r6
 80084ae:	42bb      	cmp	r3, r7
 80084b0:	460e      	mov	r6, r1
 80084b2:	d9f4      	bls.n	800849e <_printf_i+0x11a>
 80084b4:	2b08      	cmp	r3, #8
 80084b6:	d10b      	bne.n	80084d0 <_printf_i+0x14c>
 80084b8:	6823      	ldr	r3, [r4, #0]
 80084ba:	07de      	lsls	r6, r3, #31
 80084bc:	d508      	bpl.n	80084d0 <_printf_i+0x14c>
 80084be:	6923      	ldr	r3, [r4, #16]
 80084c0:	6861      	ldr	r1, [r4, #4]
 80084c2:	4299      	cmp	r1, r3
 80084c4:	bfde      	ittt	le
 80084c6:	2330      	movle	r3, #48	; 0x30
 80084c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80084cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80084d0:	1b52      	subs	r2, r2, r5
 80084d2:	6122      	str	r2, [r4, #16]
 80084d4:	f8cd a000 	str.w	sl, [sp]
 80084d8:	464b      	mov	r3, r9
 80084da:	aa03      	add	r2, sp, #12
 80084dc:	4621      	mov	r1, r4
 80084de:	4640      	mov	r0, r8
 80084e0:	f7ff fee2 	bl	80082a8 <_printf_common>
 80084e4:	3001      	adds	r0, #1
 80084e6:	d14c      	bne.n	8008582 <_printf_i+0x1fe>
 80084e8:	f04f 30ff 	mov.w	r0, #4294967295
 80084ec:	b004      	add	sp, #16
 80084ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084f2:	4835      	ldr	r0, [pc, #212]	; (80085c8 <_printf_i+0x244>)
 80084f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80084f8:	6829      	ldr	r1, [r5, #0]
 80084fa:	6823      	ldr	r3, [r4, #0]
 80084fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008500:	6029      	str	r1, [r5, #0]
 8008502:	061d      	lsls	r5, r3, #24
 8008504:	d514      	bpl.n	8008530 <_printf_i+0x1ac>
 8008506:	07df      	lsls	r7, r3, #31
 8008508:	bf44      	itt	mi
 800850a:	f043 0320 	orrmi.w	r3, r3, #32
 800850e:	6023      	strmi	r3, [r4, #0]
 8008510:	b91e      	cbnz	r6, 800851a <_printf_i+0x196>
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	f023 0320 	bic.w	r3, r3, #32
 8008518:	6023      	str	r3, [r4, #0]
 800851a:	2310      	movs	r3, #16
 800851c:	e7b0      	b.n	8008480 <_printf_i+0xfc>
 800851e:	6823      	ldr	r3, [r4, #0]
 8008520:	f043 0320 	orr.w	r3, r3, #32
 8008524:	6023      	str	r3, [r4, #0]
 8008526:	2378      	movs	r3, #120	; 0x78
 8008528:	4828      	ldr	r0, [pc, #160]	; (80085cc <_printf_i+0x248>)
 800852a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800852e:	e7e3      	b.n	80084f8 <_printf_i+0x174>
 8008530:	0659      	lsls	r1, r3, #25
 8008532:	bf48      	it	mi
 8008534:	b2b6      	uxthmi	r6, r6
 8008536:	e7e6      	b.n	8008506 <_printf_i+0x182>
 8008538:	4615      	mov	r5, r2
 800853a:	e7bb      	b.n	80084b4 <_printf_i+0x130>
 800853c:	682b      	ldr	r3, [r5, #0]
 800853e:	6826      	ldr	r6, [r4, #0]
 8008540:	6961      	ldr	r1, [r4, #20]
 8008542:	1d18      	adds	r0, r3, #4
 8008544:	6028      	str	r0, [r5, #0]
 8008546:	0635      	lsls	r5, r6, #24
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	d501      	bpl.n	8008550 <_printf_i+0x1cc>
 800854c:	6019      	str	r1, [r3, #0]
 800854e:	e002      	b.n	8008556 <_printf_i+0x1d2>
 8008550:	0670      	lsls	r0, r6, #25
 8008552:	d5fb      	bpl.n	800854c <_printf_i+0x1c8>
 8008554:	8019      	strh	r1, [r3, #0]
 8008556:	2300      	movs	r3, #0
 8008558:	6123      	str	r3, [r4, #16]
 800855a:	4615      	mov	r5, r2
 800855c:	e7ba      	b.n	80084d4 <_printf_i+0x150>
 800855e:	682b      	ldr	r3, [r5, #0]
 8008560:	1d1a      	adds	r2, r3, #4
 8008562:	602a      	str	r2, [r5, #0]
 8008564:	681d      	ldr	r5, [r3, #0]
 8008566:	6862      	ldr	r2, [r4, #4]
 8008568:	2100      	movs	r1, #0
 800856a:	4628      	mov	r0, r5
 800856c:	f7f7 fe58 	bl	8000220 <memchr>
 8008570:	b108      	cbz	r0, 8008576 <_printf_i+0x1f2>
 8008572:	1b40      	subs	r0, r0, r5
 8008574:	6060      	str	r0, [r4, #4]
 8008576:	6863      	ldr	r3, [r4, #4]
 8008578:	6123      	str	r3, [r4, #16]
 800857a:	2300      	movs	r3, #0
 800857c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008580:	e7a8      	b.n	80084d4 <_printf_i+0x150>
 8008582:	6923      	ldr	r3, [r4, #16]
 8008584:	462a      	mov	r2, r5
 8008586:	4649      	mov	r1, r9
 8008588:	4640      	mov	r0, r8
 800858a:	47d0      	blx	sl
 800858c:	3001      	adds	r0, #1
 800858e:	d0ab      	beq.n	80084e8 <_printf_i+0x164>
 8008590:	6823      	ldr	r3, [r4, #0]
 8008592:	079b      	lsls	r3, r3, #30
 8008594:	d413      	bmi.n	80085be <_printf_i+0x23a>
 8008596:	68e0      	ldr	r0, [r4, #12]
 8008598:	9b03      	ldr	r3, [sp, #12]
 800859a:	4298      	cmp	r0, r3
 800859c:	bfb8      	it	lt
 800859e:	4618      	movlt	r0, r3
 80085a0:	e7a4      	b.n	80084ec <_printf_i+0x168>
 80085a2:	2301      	movs	r3, #1
 80085a4:	4632      	mov	r2, r6
 80085a6:	4649      	mov	r1, r9
 80085a8:	4640      	mov	r0, r8
 80085aa:	47d0      	blx	sl
 80085ac:	3001      	adds	r0, #1
 80085ae:	d09b      	beq.n	80084e8 <_printf_i+0x164>
 80085b0:	3501      	adds	r5, #1
 80085b2:	68e3      	ldr	r3, [r4, #12]
 80085b4:	9903      	ldr	r1, [sp, #12]
 80085b6:	1a5b      	subs	r3, r3, r1
 80085b8:	42ab      	cmp	r3, r5
 80085ba:	dcf2      	bgt.n	80085a2 <_printf_i+0x21e>
 80085bc:	e7eb      	b.n	8008596 <_printf_i+0x212>
 80085be:	2500      	movs	r5, #0
 80085c0:	f104 0619 	add.w	r6, r4, #25
 80085c4:	e7f5      	b.n	80085b2 <_printf_i+0x22e>
 80085c6:	bf00      	nop
 80085c8:	08009303 	.word	0x08009303
 80085cc:	08009314 	.word	0x08009314

080085d0 <memcpy>:
 80085d0:	440a      	add	r2, r1
 80085d2:	4291      	cmp	r1, r2
 80085d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80085d8:	d100      	bne.n	80085dc <memcpy+0xc>
 80085da:	4770      	bx	lr
 80085dc:	b510      	push	{r4, lr}
 80085de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085e6:	4291      	cmp	r1, r2
 80085e8:	d1f9      	bne.n	80085de <memcpy+0xe>
 80085ea:	bd10      	pop	{r4, pc}

080085ec <memmove>:
 80085ec:	4288      	cmp	r0, r1
 80085ee:	b510      	push	{r4, lr}
 80085f0:	eb01 0402 	add.w	r4, r1, r2
 80085f4:	d902      	bls.n	80085fc <memmove+0x10>
 80085f6:	4284      	cmp	r4, r0
 80085f8:	4623      	mov	r3, r4
 80085fa:	d807      	bhi.n	800860c <memmove+0x20>
 80085fc:	1e43      	subs	r3, r0, #1
 80085fe:	42a1      	cmp	r1, r4
 8008600:	d008      	beq.n	8008614 <memmove+0x28>
 8008602:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008606:	f803 2f01 	strb.w	r2, [r3, #1]!
 800860a:	e7f8      	b.n	80085fe <memmove+0x12>
 800860c:	4402      	add	r2, r0
 800860e:	4601      	mov	r1, r0
 8008610:	428a      	cmp	r2, r1
 8008612:	d100      	bne.n	8008616 <memmove+0x2a>
 8008614:	bd10      	pop	{r4, pc}
 8008616:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800861a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800861e:	e7f7      	b.n	8008610 <memmove+0x24>

08008620 <_free_r>:
 8008620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008622:	2900      	cmp	r1, #0
 8008624:	d044      	beq.n	80086b0 <_free_r+0x90>
 8008626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800862a:	9001      	str	r0, [sp, #4]
 800862c:	2b00      	cmp	r3, #0
 800862e:	f1a1 0404 	sub.w	r4, r1, #4
 8008632:	bfb8      	it	lt
 8008634:	18e4      	addlt	r4, r4, r3
 8008636:	f000 f913 	bl	8008860 <__malloc_lock>
 800863a:	4a1e      	ldr	r2, [pc, #120]	; (80086b4 <_free_r+0x94>)
 800863c:	9801      	ldr	r0, [sp, #4]
 800863e:	6813      	ldr	r3, [r2, #0]
 8008640:	b933      	cbnz	r3, 8008650 <_free_r+0x30>
 8008642:	6063      	str	r3, [r4, #4]
 8008644:	6014      	str	r4, [r2, #0]
 8008646:	b003      	add	sp, #12
 8008648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800864c:	f000 b90e 	b.w	800886c <__malloc_unlock>
 8008650:	42a3      	cmp	r3, r4
 8008652:	d908      	bls.n	8008666 <_free_r+0x46>
 8008654:	6825      	ldr	r5, [r4, #0]
 8008656:	1961      	adds	r1, r4, r5
 8008658:	428b      	cmp	r3, r1
 800865a:	bf01      	itttt	eq
 800865c:	6819      	ldreq	r1, [r3, #0]
 800865e:	685b      	ldreq	r3, [r3, #4]
 8008660:	1949      	addeq	r1, r1, r5
 8008662:	6021      	streq	r1, [r4, #0]
 8008664:	e7ed      	b.n	8008642 <_free_r+0x22>
 8008666:	461a      	mov	r2, r3
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	b10b      	cbz	r3, 8008670 <_free_r+0x50>
 800866c:	42a3      	cmp	r3, r4
 800866e:	d9fa      	bls.n	8008666 <_free_r+0x46>
 8008670:	6811      	ldr	r1, [r2, #0]
 8008672:	1855      	adds	r5, r2, r1
 8008674:	42a5      	cmp	r5, r4
 8008676:	d10b      	bne.n	8008690 <_free_r+0x70>
 8008678:	6824      	ldr	r4, [r4, #0]
 800867a:	4421      	add	r1, r4
 800867c:	1854      	adds	r4, r2, r1
 800867e:	42a3      	cmp	r3, r4
 8008680:	6011      	str	r1, [r2, #0]
 8008682:	d1e0      	bne.n	8008646 <_free_r+0x26>
 8008684:	681c      	ldr	r4, [r3, #0]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	6053      	str	r3, [r2, #4]
 800868a:	4421      	add	r1, r4
 800868c:	6011      	str	r1, [r2, #0]
 800868e:	e7da      	b.n	8008646 <_free_r+0x26>
 8008690:	d902      	bls.n	8008698 <_free_r+0x78>
 8008692:	230c      	movs	r3, #12
 8008694:	6003      	str	r3, [r0, #0]
 8008696:	e7d6      	b.n	8008646 <_free_r+0x26>
 8008698:	6825      	ldr	r5, [r4, #0]
 800869a:	1961      	adds	r1, r4, r5
 800869c:	428b      	cmp	r3, r1
 800869e:	bf04      	itt	eq
 80086a0:	6819      	ldreq	r1, [r3, #0]
 80086a2:	685b      	ldreq	r3, [r3, #4]
 80086a4:	6063      	str	r3, [r4, #4]
 80086a6:	bf04      	itt	eq
 80086a8:	1949      	addeq	r1, r1, r5
 80086aa:	6021      	streq	r1, [r4, #0]
 80086ac:	6054      	str	r4, [r2, #4]
 80086ae:	e7ca      	b.n	8008646 <_free_r+0x26>
 80086b0:	b003      	add	sp, #12
 80086b2:	bd30      	pop	{r4, r5, pc}
 80086b4:	200009cc 	.word	0x200009cc

080086b8 <sbrk_aligned>:
 80086b8:	b570      	push	{r4, r5, r6, lr}
 80086ba:	4e0e      	ldr	r6, [pc, #56]	; (80086f4 <sbrk_aligned+0x3c>)
 80086bc:	460c      	mov	r4, r1
 80086be:	6831      	ldr	r1, [r6, #0]
 80086c0:	4605      	mov	r5, r0
 80086c2:	b911      	cbnz	r1, 80086ca <sbrk_aligned+0x12>
 80086c4:	f000 f8bc 	bl	8008840 <_sbrk_r>
 80086c8:	6030      	str	r0, [r6, #0]
 80086ca:	4621      	mov	r1, r4
 80086cc:	4628      	mov	r0, r5
 80086ce:	f000 f8b7 	bl	8008840 <_sbrk_r>
 80086d2:	1c43      	adds	r3, r0, #1
 80086d4:	d00a      	beq.n	80086ec <sbrk_aligned+0x34>
 80086d6:	1cc4      	adds	r4, r0, #3
 80086d8:	f024 0403 	bic.w	r4, r4, #3
 80086dc:	42a0      	cmp	r0, r4
 80086de:	d007      	beq.n	80086f0 <sbrk_aligned+0x38>
 80086e0:	1a21      	subs	r1, r4, r0
 80086e2:	4628      	mov	r0, r5
 80086e4:	f000 f8ac 	bl	8008840 <_sbrk_r>
 80086e8:	3001      	adds	r0, #1
 80086ea:	d101      	bne.n	80086f0 <sbrk_aligned+0x38>
 80086ec:	f04f 34ff 	mov.w	r4, #4294967295
 80086f0:	4620      	mov	r0, r4
 80086f2:	bd70      	pop	{r4, r5, r6, pc}
 80086f4:	200009d0 	.word	0x200009d0

080086f8 <_malloc_r>:
 80086f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086fc:	1ccd      	adds	r5, r1, #3
 80086fe:	f025 0503 	bic.w	r5, r5, #3
 8008702:	3508      	adds	r5, #8
 8008704:	2d0c      	cmp	r5, #12
 8008706:	bf38      	it	cc
 8008708:	250c      	movcc	r5, #12
 800870a:	2d00      	cmp	r5, #0
 800870c:	4607      	mov	r7, r0
 800870e:	db01      	blt.n	8008714 <_malloc_r+0x1c>
 8008710:	42a9      	cmp	r1, r5
 8008712:	d905      	bls.n	8008720 <_malloc_r+0x28>
 8008714:	230c      	movs	r3, #12
 8008716:	603b      	str	r3, [r7, #0]
 8008718:	2600      	movs	r6, #0
 800871a:	4630      	mov	r0, r6
 800871c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008720:	4e2e      	ldr	r6, [pc, #184]	; (80087dc <_malloc_r+0xe4>)
 8008722:	f000 f89d 	bl	8008860 <__malloc_lock>
 8008726:	6833      	ldr	r3, [r6, #0]
 8008728:	461c      	mov	r4, r3
 800872a:	bb34      	cbnz	r4, 800877a <_malloc_r+0x82>
 800872c:	4629      	mov	r1, r5
 800872e:	4638      	mov	r0, r7
 8008730:	f7ff ffc2 	bl	80086b8 <sbrk_aligned>
 8008734:	1c43      	adds	r3, r0, #1
 8008736:	4604      	mov	r4, r0
 8008738:	d14d      	bne.n	80087d6 <_malloc_r+0xde>
 800873a:	6834      	ldr	r4, [r6, #0]
 800873c:	4626      	mov	r6, r4
 800873e:	2e00      	cmp	r6, #0
 8008740:	d140      	bne.n	80087c4 <_malloc_r+0xcc>
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	4631      	mov	r1, r6
 8008746:	4638      	mov	r0, r7
 8008748:	eb04 0803 	add.w	r8, r4, r3
 800874c:	f000 f878 	bl	8008840 <_sbrk_r>
 8008750:	4580      	cmp	r8, r0
 8008752:	d13a      	bne.n	80087ca <_malloc_r+0xd2>
 8008754:	6821      	ldr	r1, [r4, #0]
 8008756:	3503      	adds	r5, #3
 8008758:	1a6d      	subs	r5, r5, r1
 800875a:	f025 0503 	bic.w	r5, r5, #3
 800875e:	3508      	adds	r5, #8
 8008760:	2d0c      	cmp	r5, #12
 8008762:	bf38      	it	cc
 8008764:	250c      	movcc	r5, #12
 8008766:	4629      	mov	r1, r5
 8008768:	4638      	mov	r0, r7
 800876a:	f7ff ffa5 	bl	80086b8 <sbrk_aligned>
 800876e:	3001      	adds	r0, #1
 8008770:	d02b      	beq.n	80087ca <_malloc_r+0xd2>
 8008772:	6823      	ldr	r3, [r4, #0]
 8008774:	442b      	add	r3, r5
 8008776:	6023      	str	r3, [r4, #0]
 8008778:	e00e      	b.n	8008798 <_malloc_r+0xa0>
 800877a:	6822      	ldr	r2, [r4, #0]
 800877c:	1b52      	subs	r2, r2, r5
 800877e:	d41e      	bmi.n	80087be <_malloc_r+0xc6>
 8008780:	2a0b      	cmp	r2, #11
 8008782:	d916      	bls.n	80087b2 <_malloc_r+0xba>
 8008784:	1961      	adds	r1, r4, r5
 8008786:	42a3      	cmp	r3, r4
 8008788:	6025      	str	r5, [r4, #0]
 800878a:	bf18      	it	ne
 800878c:	6059      	strne	r1, [r3, #4]
 800878e:	6863      	ldr	r3, [r4, #4]
 8008790:	bf08      	it	eq
 8008792:	6031      	streq	r1, [r6, #0]
 8008794:	5162      	str	r2, [r4, r5]
 8008796:	604b      	str	r3, [r1, #4]
 8008798:	4638      	mov	r0, r7
 800879a:	f104 060b 	add.w	r6, r4, #11
 800879e:	f000 f865 	bl	800886c <__malloc_unlock>
 80087a2:	f026 0607 	bic.w	r6, r6, #7
 80087a6:	1d23      	adds	r3, r4, #4
 80087a8:	1af2      	subs	r2, r6, r3
 80087aa:	d0b6      	beq.n	800871a <_malloc_r+0x22>
 80087ac:	1b9b      	subs	r3, r3, r6
 80087ae:	50a3      	str	r3, [r4, r2]
 80087b0:	e7b3      	b.n	800871a <_malloc_r+0x22>
 80087b2:	6862      	ldr	r2, [r4, #4]
 80087b4:	42a3      	cmp	r3, r4
 80087b6:	bf0c      	ite	eq
 80087b8:	6032      	streq	r2, [r6, #0]
 80087ba:	605a      	strne	r2, [r3, #4]
 80087bc:	e7ec      	b.n	8008798 <_malloc_r+0xa0>
 80087be:	4623      	mov	r3, r4
 80087c0:	6864      	ldr	r4, [r4, #4]
 80087c2:	e7b2      	b.n	800872a <_malloc_r+0x32>
 80087c4:	4634      	mov	r4, r6
 80087c6:	6876      	ldr	r6, [r6, #4]
 80087c8:	e7b9      	b.n	800873e <_malloc_r+0x46>
 80087ca:	230c      	movs	r3, #12
 80087cc:	603b      	str	r3, [r7, #0]
 80087ce:	4638      	mov	r0, r7
 80087d0:	f000 f84c 	bl	800886c <__malloc_unlock>
 80087d4:	e7a1      	b.n	800871a <_malloc_r+0x22>
 80087d6:	6025      	str	r5, [r4, #0]
 80087d8:	e7de      	b.n	8008798 <_malloc_r+0xa0>
 80087da:	bf00      	nop
 80087dc:	200009cc 	.word	0x200009cc

080087e0 <_realloc_r>:
 80087e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087e4:	4680      	mov	r8, r0
 80087e6:	4614      	mov	r4, r2
 80087e8:	460e      	mov	r6, r1
 80087ea:	b921      	cbnz	r1, 80087f6 <_realloc_r+0x16>
 80087ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087f0:	4611      	mov	r1, r2
 80087f2:	f7ff bf81 	b.w	80086f8 <_malloc_r>
 80087f6:	b92a      	cbnz	r2, 8008804 <_realloc_r+0x24>
 80087f8:	f7ff ff12 	bl	8008620 <_free_r>
 80087fc:	4625      	mov	r5, r4
 80087fe:	4628      	mov	r0, r5
 8008800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008804:	f000 f838 	bl	8008878 <_malloc_usable_size_r>
 8008808:	4284      	cmp	r4, r0
 800880a:	4607      	mov	r7, r0
 800880c:	d802      	bhi.n	8008814 <_realloc_r+0x34>
 800880e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008812:	d812      	bhi.n	800883a <_realloc_r+0x5a>
 8008814:	4621      	mov	r1, r4
 8008816:	4640      	mov	r0, r8
 8008818:	f7ff ff6e 	bl	80086f8 <_malloc_r>
 800881c:	4605      	mov	r5, r0
 800881e:	2800      	cmp	r0, #0
 8008820:	d0ed      	beq.n	80087fe <_realloc_r+0x1e>
 8008822:	42bc      	cmp	r4, r7
 8008824:	4622      	mov	r2, r4
 8008826:	4631      	mov	r1, r6
 8008828:	bf28      	it	cs
 800882a:	463a      	movcs	r2, r7
 800882c:	f7ff fed0 	bl	80085d0 <memcpy>
 8008830:	4631      	mov	r1, r6
 8008832:	4640      	mov	r0, r8
 8008834:	f7ff fef4 	bl	8008620 <_free_r>
 8008838:	e7e1      	b.n	80087fe <_realloc_r+0x1e>
 800883a:	4635      	mov	r5, r6
 800883c:	e7df      	b.n	80087fe <_realloc_r+0x1e>
	...

08008840 <_sbrk_r>:
 8008840:	b538      	push	{r3, r4, r5, lr}
 8008842:	4d06      	ldr	r5, [pc, #24]	; (800885c <_sbrk_r+0x1c>)
 8008844:	2300      	movs	r3, #0
 8008846:	4604      	mov	r4, r0
 8008848:	4608      	mov	r0, r1
 800884a:	602b      	str	r3, [r5, #0]
 800884c:	f7fb fe38 	bl	80044c0 <_sbrk>
 8008850:	1c43      	adds	r3, r0, #1
 8008852:	d102      	bne.n	800885a <_sbrk_r+0x1a>
 8008854:	682b      	ldr	r3, [r5, #0]
 8008856:	b103      	cbz	r3, 800885a <_sbrk_r+0x1a>
 8008858:	6023      	str	r3, [r4, #0]
 800885a:	bd38      	pop	{r3, r4, r5, pc}
 800885c:	200009d4 	.word	0x200009d4

08008860 <__malloc_lock>:
 8008860:	4801      	ldr	r0, [pc, #4]	; (8008868 <__malloc_lock+0x8>)
 8008862:	f000 b811 	b.w	8008888 <__retarget_lock_acquire_recursive>
 8008866:	bf00      	nop
 8008868:	200009d8 	.word	0x200009d8

0800886c <__malloc_unlock>:
 800886c:	4801      	ldr	r0, [pc, #4]	; (8008874 <__malloc_unlock+0x8>)
 800886e:	f000 b80c 	b.w	800888a <__retarget_lock_release_recursive>
 8008872:	bf00      	nop
 8008874:	200009d8 	.word	0x200009d8

08008878 <_malloc_usable_size_r>:
 8008878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800887c:	1f18      	subs	r0, r3, #4
 800887e:	2b00      	cmp	r3, #0
 8008880:	bfbc      	itt	lt
 8008882:	580b      	ldrlt	r3, [r1, r0]
 8008884:	18c0      	addlt	r0, r0, r3
 8008886:	4770      	bx	lr

08008888 <__retarget_lock_acquire_recursive>:
 8008888:	4770      	bx	lr

0800888a <__retarget_lock_release_recursive>:
 800888a:	4770      	bx	lr
 800888c:	0000      	movs	r0, r0
	...

08008890 <log>:
 8008890:	b538      	push	{r3, r4, r5, lr}
 8008892:	ed2d 8b02 	vpush	{d8}
 8008896:	ec55 4b10 	vmov	r4, r5, d0
 800889a:	f000 f839 	bl	8008910 <__ieee754_log>
 800889e:	4622      	mov	r2, r4
 80088a0:	462b      	mov	r3, r5
 80088a2:	4620      	mov	r0, r4
 80088a4:	4629      	mov	r1, r5
 80088a6:	eeb0 8a40 	vmov.f32	s16, s0
 80088aa:	eef0 8a60 	vmov.f32	s17, s1
 80088ae:	f7f8 f95d 	bl	8000b6c <__aeabi_dcmpun>
 80088b2:	b998      	cbnz	r0, 80088dc <log+0x4c>
 80088b4:	2200      	movs	r2, #0
 80088b6:	2300      	movs	r3, #0
 80088b8:	4620      	mov	r0, r4
 80088ba:	4629      	mov	r1, r5
 80088bc:	f7f8 f94c 	bl	8000b58 <__aeabi_dcmpgt>
 80088c0:	b960      	cbnz	r0, 80088dc <log+0x4c>
 80088c2:	2200      	movs	r2, #0
 80088c4:	2300      	movs	r3, #0
 80088c6:	4620      	mov	r0, r4
 80088c8:	4629      	mov	r1, r5
 80088ca:	f7f8 f91d 	bl	8000b08 <__aeabi_dcmpeq>
 80088ce:	b160      	cbz	r0, 80088ea <log+0x5a>
 80088d0:	f7ff fb3c 	bl	8007f4c <__errno>
 80088d4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8008900 <log+0x70>
 80088d8:	2322      	movs	r3, #34	; 0x22
 80088da:	6003      	str	r3, [r0, #0]
 80088dc:	eeb0 0a48 	vmov.f32	s0, s16
 80088e0:	eef0 0a68 	vmov.f32	s1, s17
 80088e4:	ecbd 8b02 	vpop	{d8}
 80088e8:	bd38      	pop	{r3, r4, r5, pc}
 80088ea:	f7ff fb2f 	bl	8007f4c <__errno>
 80088ee:	ecbd 8b02 	vpop	{d8}
 80088f2:	2321      	movs	r3, #33	; 0x21
 80088f4:	6003      	str	r3, [r0, #0]
 80088f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088fa:	4803      	ldr	r0, [pc, #12]	; (8008908 <log+0x78>)
 80088fc:	f000 b9c4 	b.w	8008c88 <nan>
 8008900:	00000000 	.word	0x00000000
 8008904:	fff00000 	.word	0xfff00000
 8008908:	080092f7 	.word	0x080092f7
 800890c:	00000000 	.word	0x00000000

08008910 <__ieee754_log>:
 8008910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008914:	ec51 0b10 	vmov	r0, r1, d0
 8008918:	ed2d 8b04 	vpush	{d8-d9}
 800891c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008920:	b083      	sub	sp, #12
 8008922:	460d      	mov	r5, r1
 8008924:	da29      	bge.n	800897a <__ieee754_log+0x6a>
 8008926:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800892a:	4303      	orrs	r3, r0
 800892c:	ee10 2a10 	vmov	r2, s0
 8008930:	d10c      	bne.n	800894c <__ieee754_log+0x3c>
 8008932:	49cf      	ldr	r1, [pc, #828]	; (8008c70 <__ieee754_log+0x360>)
 8008934:	2200      	movs	r2, #0
 8008936:	2300      	movs	r3, #0
 8008938:	2000      	movs	r0, #0
 800893a:	f7f7 ffa7 	bl	800088c <__aeabi_ddiv>
 800893e:	ec41 0b10 	vmov	d0, r0, r1
 8008942:	b003      	add	sp, #12
 8008944:	ecbd 8b04 	vpop	{d8-d9}
 8008948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800894c:	2900      	cmp	r1, #0
 800894e:	da05      	bge.n	800895c <__ieee754_log+0x4c>
 8008950:	460b      	mov	r3, r1
 8008952:	f7f7 fcb9 	bl	80002c8 <__aeabi_dsub>
 8008956:	2200      	movs	r2, #0
 8008958:	2300      	movs	r3, #0
 800895a:	e7ee      	b.n	800893a <__ieee754_log+0x2a>
 800895c:	4bc5      	ldr	r3, [pc, #788]	; (8008c74 <__ieee754_log+0x364>)
 800895e:	2200      	movs	r2, #0
 8008960:	f7f7 fe6a 	bl	8000638 <__aeabi_dmul>
 8008964:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8008968:	460d      	mov	r5, r1
 800896a:	4ac3      	ldr	r2, [pc, #780]	; (8008c78 <__ieee754_log+0x368>)
 800896c:	4295      	cmp	r5, r2
 800896e:	dd06      	ble.n	800897e <__ieee754_log+0x6e>
 8008970:	4602      	mov	r2, r0
 8008972:	460b      	mov	r3, r1
 8008974:	f7f7 fcaa 	bl	80002cc <__adddf3>
 8008978:	e7e1      	b.n	800893e <__ieee754_log+0x2e>
 800897a:	2300      	movs	r3, #0
 800897c:	e7f5      	b.n	800896a <__ieee754_log+0x5a>
 800897e:	152c      	asrs	r4, r5, #20
 8008980:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008984:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008988:	441c      	add	r4, r3
 800898a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800898e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8008992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008996:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800899a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800899e:	ea42 0105 	orr.w	r1, r2, r5
 80089a2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80089a6:	2200      	movs	r2, #0
 80089a8:	4bb4      	ldr	r3, [pc, #720]	; (8008c7c <__ieee754_log+0x36c>)
 80089aa:	f7f7 fc8d 	bl	80002c8 <__aeabi_dsub>
 80089ae:	1cab      	adds	r3, r5, #2
 80089b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	4682      	mov	sl, r0
 80089b8:	468b      	mov	fp, r1
 80089ba:	f04f 0200 	mov.w	r2, #0
 80089be:	dc53      	bgt.n	8008a68 <__ieee754_log+0x158>
 80089c0:	2300      	movs	r3, #0
 80089c2:	f7f8 f8a1 	bl	8000b08 <__aeabi_dcmpeq>
 80089c6:	b1d0      	cbz	r0, 80089fe <__ieee754_log+0xee>
 80089c8:	2c00      	cmp	r4, #0
 80089ca:	f000 8122 	beq.w	8008c12 <__ieee754_log+0x302>
 80089ce:	4620      	mov	r0, r4
 80089d0:	f7f7 fdc8 	bl	8000564 <__aeabi_i2d>
 80089d4:	a390      	add	r3, pc, #576	; (adr r3, 8008c18 <__ieee754_log+0x308>)
 80089d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089da:	4606      	mov	r6, r0
 80089dc:	460f      	mov	r7, r1
 80089de:	f7f7 fe2b 	bl	8000638 <__aeabi_dmul>
 80089e2:	a38f      	add	r3, pc, #572	; (adr r3, 8008c20 <__ieee754_log+0x310>)
 80089e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e8:	4604      	mov	r4, r0
 80089ea:	460d      	mov	r5, r1
 80089ec:	4630      	mov	r0, r6
 80089ee:	4639      	mov	r1, r7
 80089f0:	f7f7 fe22 	bl	8000638 <__aeabi_dmul>
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	4620      	mov	r0, r4
 80089fa:	4629      	mov	r1, r5
 80089fc:	e7ba      	b.n	8008974 <__ieee754_log+0x64>
 80089fe:	a38a      	add	r3, pc, #552	; (adr r3, 8008c28 <__ieee754_log+0x318>)
 8008a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a04:	4650      	mov	r0, sl
 8008a06:	4659      	mov	r1, fp
 8008a08:	f7f7 fe16 	bl	8000638 <__aeabi_dmul>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	460b      	mov	r3, r1
 8008a10:	2000      	movs	r0, #0
 8008a12:	499b      	ldr	r1, [pc, #620]	; (8008c80 <__ieee754_log+0x370>)
 8008a14:	f7f7 fc58 	bl	80002c8 <__aeabi_dsub>
 8008a18:	4652      	mov	r2, sl
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	460f      	mov	r7, r1
 8008a1e:	465b      	mov	r3, fp
 8008a20:	4650      	mov	r0, sl
 8008a22:	4659      	mov	r1, fp
 8008a24:	f7f7 fe08 	bl	8000638 <__aeabi_dmul>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	4639      	mov	r1, r7
 8008a30:	f7f7 fe02 	bl	8000638 <__aeabi_dmul>
 8008a34:	4606      	mov	r6, r0
 8008a36:	460f      	mov	r7, r1
 8008a38:	b914      	cbnz	r4, 8008a40 <__ieee754_log+0x130>
 8008a3a:	4632      	mov	r2, r6
 8008a3c:	463b      	mov	r3, r7
 8008a3e:	e0a2      	b.n	8008b86 <__ieee754_log+0x276>
 8008a40:	4620      	mov	r0, r4
 8008a42:	f7f7 fd8f 	bl	8000564 <__aeabi_i2d>
 8008a46:	a374      	add	r3, pc, #464	; (adr r3, 8008c18 <__ieee754_log+0x308>)
 8008a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4c:	4680      	mov	r8, r0
 8008a4e:	4689      	mov	r9, r1
 8008a50:	f7f7 fdf2 	bl	8000638 <__aeabi_dmul>
 8008a54:	a372      	add	r3, pc, #456	; (adr r3, 8008c20 <__ieee754_log+0x310>)
 8008a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	460d      	mov	r5, r1
 8008a5e:	4640      	mov	r0, r8
 8008a60:	4649      	mov	r1, r9
 8008a62:	f7f7 fde9 	bl	8000638 <__aeabi_dmul>
 8008a66:	e0a7      	b.n	8008bb8 <__ieee754_log+0x2a8>
 8008a68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a6c:	f7f7 fc2e 	bl	80002cc <__adddf3>
 8008a70:	4602      	mov	r2, r0
 8008a72:	460b      	mov	r3, r1
 8008a74:	4650      	mov	r0, sl
 8008a76:	4659      	mov	r1, fp
 8008a78:	f7f7 ff08 	bl	800088c <__aeabi_ddiv>
 8008a7c:	ec41 0b18 	vmov	d8, r0, r1
 8008a80:	4620      	mov	r0, r4
 8008a82:	f7f7 fd6f 	bl	8000564 <__aeabi_i2d>
 8008a86:	ec53 2b18 	vmov	r2, r3, d8
 8008a8a:	ec41 0b19 	vmov	d9, r0, r1
 8008a8e:	ec51 0b18 	vmov	r0, r1, d8
 8008a92:	f7f7 fdd1 	bl	8000638 <__aeabi_dmul>
 8008a96:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8008a9a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8008a9e:	9301      	str	r3, [sp, #4]
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	4680      	mov	r8, r0
 8008aa6:	4689      	mov	r9, r1
 8008aa8:	f7f7 fdc6 	bl	8000638 <__aeabi_dmul>
 8008aac:	a360      	add	r3, pc, #384	; (adr r3, 8008c30 <__ieee754_log+0x320>)
 8008aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab2:	4606      	mov	r6, r0
 8008ab4:	460f      	mov	r7, r1
 8008ab6:	f7f7 fdbf 	bl	8000638 <__aeabi_dmul>
 8008aba:	a35f      	add	r3, pc, #380	; (adr r3, 8008c38 <__ieee754_log+0x328>)
 8008abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac0:	f7f7 fc04 	bl	80002cc <__adddf3>
 8008ac4:	4632      	mov	r2, r6
 8008ac6:	463b      	mov	r3, r7
 8008ac8:	f7f7 fdb6 	bl	8000638 <__aeabi_dmul>
 8008acc:	a35c      	add	r3, pc, #368	; (adr r3, 8008c40 <__ieee754_log+0x330>)
 8008ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad2:	f7f7 fbfb 	bl	80002cc <__adddf3>
 8008ad6:	4632      	mov	r2, r6
 8008ad8:	463b      	mov	r3, r7
 8008ada:	f7f7 fdad 	bl	8000638 <__aeabi_dmul>
 8008ade:	a35a      	add	r3, pc, #360	; (adr r3, 8008c48 <__ieee754_log+0x338>)
 8008ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae4:	f7f7 fbf2 	bl	80002cc <__adddf3>
 8008ae8:	4642      	mov	r2, r8
 8008aea:	464b      	mov	r3, r9
 8008aec:	f7f7 fda4 	bl	8000638 <__aeabi_dmul>
 8008af0:	a357      	add	r3, pc, #348	; (adr r3, 8008c50 <__ieee754_log+0x340>)
 8008af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af6:	4680      	mov	r8, r0
 8008af8:	4689      	mov	r9, r1
 8008afa:	4630      	mov	r0, r6
 8008afc:	4639      	mov	r1, r7
 8008afe:	f7f7 fd9b 	bl	8000638 <__aeabi_dmul>
 8008b02:	a355      	add	r3, pc, #340	; (adr r3, 8008c58 <__ieee754_log+0x348>)
 8008b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b08:	f7f7 fbe0 	bl	80002cc <__adddf3>
 8008b0c:	4632      	mov	r2, r6
 8008b0e:	463b      	mov	r3, r7
 8008b10:	f7f7 fd92 	bl	8000638 <__aeabi_dmul>
 8008b14:	a352      	add	r3, pc, #328	; (adr r3, 8008c60 <__ieee754_log+0x350>)
 8008b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1a:	f7f7 fbd7 	bl	80002cc <__adddf3>
 8008b1e:	4632      	mov	r2, r6
 8008b20:	463b      	mov	r3, r7
 8008b22:	f7f7 fd89 	bl	8000638 <__aeabi_dmul>
 8008b26:	460b      	mov	r3, r1
 8008b28:	4602      	mov	r2, r0
 8008b2a:	4649      	mov	r1, r9
 8008b2c:	4640      	mov	r0, r8
 8008b2e:	f7f7 fbcd 	bl	80002cc <__adddf3>
 8008b32:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8008b36:	9b01      	ldr	r3, [sp, #4]
 8008b38:	3551      	adds	r5, #81	; 0x51
 8008b3a:	431d      	orrs	r5, r3
 8008b3c:	2d00      	cmp	r5, #0
 8008b3e:	4680      	mov	r8, r0
 8008b40:	4689      	mov	r9, r1
 8008b42:	dd48      	ble.n	8008bd6 <__ieee754_log+0x2c6>
 8008b44:	4b4e      	ldr	r3, [pc, #312]	; (8008c80 <__ieee754_log+0x370>)
 8008b46:	2200      	movs	r2, #0
 8008b48:	4650      	mov	r0, sl
 8008b4a:	4659      	mov	r1, fp
 8008b4c:	f7f7 fd74 	bl	8000638 <__aeabi_dmul>
 8008b50:	4652      	mov	r2, sl
 8008b52:	465b      	mov	r3, fp
 8008b54:	f7f7 fd70 	bl	8000638 <__aeabi_dmul>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	4606      	mov	r6, r0
 8008b5e:	460f      	mov	r7, r1
 8008b60:	4640      	mov	r0, r8
 8008b62:	4649      	mov	r1, r9
 8008b64:	f7f7 fbb2 	bl	80002cc <__adddf3>
 8008b68:	ec53 2b18 	vmov	r2, r3, d8
 8008b6c:	f7f7 fd64 	bl	8000638 <__aeabi_dmul>
 8008b70:	4680      	mov	r8, r0
 8008b72:	4689      	mov	r9, r1
 8008b74:	b964      	cbnz	r4, 8008b90 <__ieee754_log+0x280>
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	4630      	mov	r0, r6
 8008b7c:	4639      	mov	r1, r7
 8008b7e:	f7f7 fba3 	bl	80002c8 <__aeabi_dsub>
 8008b82:	4602      	mov	r2, r0
 8008b84:	460b      	mov	r3, r1
 8008b86:	4650      	mov	r0, sl
 8008b88:	4659      	mov	r1, fp
 8008b8a:	f7f7 fb9d 	bl	80002c8 <__aeabi_dsub>
 8008b8e:	e6d6      	b.n	800893e <__ieee754_log+0x2e>
 8008b90:	a321      	add	r3, pc, #132	; (adr r3, 8008c18 <__ieee754_log+0x308>)
 8008b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b96:	ec51 0b19 	vmov	r0, r1, d9
 8008b9a:	f7f7 fd4d 	bl	8000638 <__aeabi_dmul>
 8008b9e:	a320      	add	r3, pc, #128	; (adr r3, 8008c20 <__ieee754_log+0x310>)
 8008ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba4:	4604      	mov	r4, r0
 8008ba6:	460d      	mov	r5, r1
 8008ba8:	ec51 0b19 	vmov	r0, r1, d9
 8008bac:	f7f7 fd44 	bl	8000638 <__aeabi_dmul>
 8008bb0:	4642      	mov	r2, r8
 8008bb2:	464b      	mov	r3, r9
 8008bb4:	f7f7 fb8a 	bl	80002cc <__adddf3>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	460b      	mov	r3, r1
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	4639      	mov	r1, r7
 8008bc0:	f7f7 fb82 	bl	80002c8 <__aeabi_dsub>
 8008bc4:	4652      	mov	r2, sl
 8008bc6:	465b      	mov	r3, fp
 8008bc8:	f7f7 fb7e 	bl	80002c8 <__aeabi_dsub>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	460b      	mov	r3, r1
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	e7d9      	b.n	8008b8a <__ieee754_log+0x27a>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	460b      	mov	r3, r1
 8008bda:	4650      	mov	r0, sl
 8008bdc:	4659      	mov	r1, fp
 8008bde:	f7f7 fb73 	bl	80002c8 <__aeabi_dsub>
 8008be2:	ec53 2b18 	vmov	r2, r3, d8
 8008be6:	f7f7 fd27 	bl	8000638 <__aeabi_dmul>
 8008bea:	4606      	mov	r6, r0
 8008bec:	460f      	mov	r7, r1
 8008bee:	2c00      	cmp	r4, #0
 8008bf0:	f43f af23 	beq.w	8008a3a <__ieee754_log+0x12a>
 8008bf4:	a308      	add	r3, pc, #32	; (adr r3, 8008c18 <__ieee754_log+0x308>)
 8008bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfa:	ec51 0b19 	vmov	r0, r1, d9
 8008bfe:	f7f7 fd1b 	bl	8000638 <__aeabi_dmul>
 8008c02:	a307      	add	r3, pc, #28	; (adr r3, 8008c20 <__ieee754_log+0x310>)
 8008c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c08:	4604      	mov	r4, r0
 8008c0a:	460d      	mov	r5, r1
 8008c0c:	ec51 0b19 	vmov	r0, r1, d9
 8008c10:	e727      	b.n	8008a62 <__ieee754_log+0x152>
 8008c12:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8008c68 <__ieee754_log+0x358>
 8008c16:	e694      	b.n	8008942 <__ieee754_log+0x32>
 8008c18:	fee00000 	.word	0xfee00000
 8008c1c:	3fe62e42 	.word	0x3fe62e42
 8008c20:	35793c76 	.word	0x35793c76
 8008c24:	3dea39ef 	.word	0x3dea39ef
 8008c28:	55555555 	.word	0x55555555
 8008c2c:	3fd55555 	.word	0x3fd55555
 8008c30:	df3e5244 	.word	0xdf3e5244
 8008c34:	3fc2f112 	.word	0x3fc2f112
 8008c38:	96cb03de 	.word	0x96cb03de
 8008c3c:	3fc74664 	.word	0x3fc74664
 8008c40:	94229359 	.word	0x94229359
 8008c44:	3fd24924 	.word	0x3fd24924
 8008c48:	55555593 	.word	0x55555593
 8008c4c:	3fe55555 	.word	0x3fe55555
 8008c50:	d078c69f 	.word	0xd078c69f
 8008c54:	3fc39a09 	.word	0x3fc39a09
 8008c58:	1d8e78af 	.word	0x1d8e78af
 8008c5c:	3fcc71c5 	.word	0x3fcc71c5
 8008c60:	9997fa04 	.word	0x9997fa04
 8008c64:	3fd99999 	.word	0x3fd99999
	...
 8008c70:	c3500000 	.word	0xc3500000
 8008c74:	43500000 	.word	0x43500000
 8008c78:	7fefffff 	.word	0x7fefffff
 8008c7c:	3ff00000 	.word	0x3ff00000
 8008c80:	3fe00000 	.word	0x3fe00000
 8008c84:	00000000 	.word	0x00000000

08008c88 <nan>:
 8008c88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008c90 <nan+0x8>
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop
 8008c90:	00000000 	.word	0x00000000
 8008c94:	7ff80000 	.word	0x7ff80000

08008c98 <_init>:
 8008c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9a:	bf00      	nop
 8008c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c9e:	bc08      	pop	{r3}
 8008ca0:	469e      	mov	lr, r3
 8008ca2:	4770      	bx	lr

08008ca4 <_fini>:
 8008ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca6:	bf00      	nop
 8008ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008caa:	bc08      	pop	{r3}
 8008cac:	469e      	mov	lr, r3
 8008cae:	4770      	bx	lr
