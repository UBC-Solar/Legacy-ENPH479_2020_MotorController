
solar_lv_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009330  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  08009500  08009500  00019500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009860  08009860  0002076c  2**0
                  CONTENTS
  4 .ARM          00000008  08009860  08009860  00019860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009868  08009868  0002076c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009868  08009868  00019868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800986c  0800986c  0001986c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000076c  20000000  08009870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f4  2000076c  08009fdc  0002076c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d60  08009fdc  00020d60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002076c  2**0
                  CONTENTS, READONLY
 12 .debug_line   00034c5f  00000000  00000000  0002079c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0005630c  00000000  00000000  000553fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007874  00000000  00000000  000ab707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001948  00000000  00000000  000b2f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f42c8  00000000  00000000  000b48c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000034b8  00000000  00000000  001a8b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    00019fec  00000000  00000000  001ac048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002cb29  00000000  00000000  001c6034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000d2  00000000  00000000  001f2b5d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005150  00000000  00000000  001f2c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000076c 	.word	0x2000076c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080094e8 	.word	0x080094e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000770 	.word	0x20000770
 800020c:	080094e8 	.word	0x080094e8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b96e 	b.w	8000fbc <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468c      	mov	ip, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8083 	bne.w	8000e0e <__udivmoddi4+0x116>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	d947      	bls.n	8000d9e <__udivmoddi4+0xa6>
 8000d0e:	fab2 f282 	clz	r2, r2
 8000d12:	b142      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d14:	f1c2 0020 	rsb	r0, r2, #32
 8000d18:	fa24 f000 	lsr.w	r0, r4, r0
 8000d1c:	4091      	lsls	r1, r2
 8000d1e:	4097      	lsls	r7, r2
 8000d20:	ea40 0c01 	orr.w	ip, r0, r1
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d30:	fa1f fe87 	uxth.w	lr, r7
 8000d34:	fb08 c116 	mls	r1, r8, r6, ip
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4a:	f080 8119 	bcs.w	8000f80 <__udivmoddi4+0x288>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8116 	bls.w	8000f80 <__udivmoddi4+0x288>
 8000d54:	3e02      	subs	r6, #2
 8000d56:	443b      	add	r3, r7
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d60:	fb08 3310 	mls	r3, r8, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	193c      	adds	r4, r7, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8105 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d7a:	45a6      	cmp	lr, r4
 8000d7c:	f240 8102 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d80:	3802      	subs	r0, #2
 8000d82:	443c      	add	r4, r7
 8000d84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	b11d      	cbz	r5, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c5 4300 	strd	r4, r3, [r5]
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	b902      	cbnz	r2, 8000da2 <__udivmoddi4+0xaa>
 8000da0:	deff      	udf	#255	; 0xff
 8000da2:	fab2 f282 	clz	r2, r2
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	d150      	bne.n	8000e4c <__udivmoddi4+0x154>
 8000daa:	1bcb      	subs	r3, r1, r7
 8000dac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db0:	fa1f f887 	uxth.w	r8, r7
 8000db4:	2601      	movs	r6, #1
 8000db6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dba:	0c21      	lsrs	r1, r4, #16
 8000dbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0xe2>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	f200 80e9 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1ac9      	subs	r1, r1, r3
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000de8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x10c>
 8000df4:	193c      	adds	r4, r7, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x10a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80d9 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e7bf      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0x12e>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80b1 	beq.w	8000f7a <__udivmoddi4+0x282>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x1cc>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0x140>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80b8 	bhi.w	8000fa8 <__udivmoddi4+0x2b0>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	468c      	mov	ip, r1
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0a8      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000e46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e4a:	e7a5      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000e4c:	f1c2 0320 	rsb	r3, r2, #32
 8000e50:	fa20 f603 	lsr.w	r6, r0, r3
 8000e54:	4097      	lsls	r7, r2
 8000e56:	fa01 f002 	lsl.w	r0, r1, r2
 8000e5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e5e:	40d9      	lsrs	r1, r3
 8000e60:	4330      	orrs	r0, r6
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e68:	fa1f f887 	uxth.w	r8, r7
 8000e6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e74:	fb06 f108 	mul.w	r1, r6, r8
 8000e78:	4299      	cmp	r1, r3
 8000e7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e7e:	d909      	bls.n	8000e94 <__udivmoddi4+0x19c>
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e86:	f080 808d 	bcs.w	8000fa4 <__udivmoddi4+0x2ac>
 8000e8a:	4299      	cmp	r1, r3
 8000e8c:	f240 808a 	bls.w	8000fa4 <__udivmoddi4+0x2ac>
 8000e90:	3e02      	subs	r6, #2
 8000e92:	443b      	add	r3, r7
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	b281      	uxth	r1, r0
 8000e98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ea0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea4:	fb00 f308 	mul.w	r3, r0, r8
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d907      	bls.n	8000ebc <__udivmoddi4+0x1c4>
 8000eac:	1879      	adds	r1, r7, r1
 8000eae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eb2:	d273      	bcs.n	8000f9c <__udivmoddi4+0x2a4>
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d971      	bls.n	8000f9c <__udivmoddi4+0x2a4>
 8000eb8:	3802      	subs	r0, #2
 8000eba:	4439      	add	r1, r7
 8000ebc:	1acb      	subs	r3, r1, r3
 8000ebe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ec2:	e778      	b.n	8000db6 <__udivmoddi4+0xbe>
 8000ec4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ec8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ecc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ed0:	431c      	orrs	r4, r3
 8000ed2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ede:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ee2:	431f      	orrs	r7, r3
 8000ee4:	0c3b      	lsrs	r3, r7, #16
 8000ee6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eea:	fa1f f884 	uxth.w	r8, r4
 8000eee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ef2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ef6:	fb09 fa08 	mul.w	sl, r9, r8
 8000efa:	458a      	cmp	sl, r1
 8000efc:	fa02 f206 	lsl.w	r2, r2, r6
 8000f00:	fa00 f306 	lsl.w	r3, r0, r6
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x220>
 8000f06:	1861      	adds	r1, r4, r1
 8000f08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f0c:	d248      	bcs.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f0e:	458a      	cmp	sl, r1
 8000f10:	d946      	bls.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f12:	f1a9 0902 	sub.w	r9, r9, #2
 8000f16:	4421      	add	r1, r4
 8000f18:	eba1 010a 	sub.w	r1, r1, sl
 8000f1c:	b2bf      	uxth	r7, r7
 8000f1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f2a:	fb00 f808 	mul.w	r8, r0, r8
 8000f2e:	45b8      	cmp	r8, r7
 8000f30:	d907      	bls.n	8000f42 <__udivmoddi4+0x24a>
 8000f32:	19e7      	adds	r7, r4, r7
 8000f34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f38:	d22e      	bcs.n	8000f98 <__udivmoddi4+0x2a0>
 8000f3a:	45b8      	cmp	r8, r7
 8000f3c:	d92c      	bls.n	8000f98 <__udivmoddi4+0x2a0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	4427      	add	r7, r4
 8000f42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f46:	eba7 0708 	sub.w	r7, r7, r8
 8000f4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f4e:	454f      	cmp	r7, r9
 8000f50:	46c6      	mov	lr, r8
 8000f52:	4649      	mov	r1, r9
 8000f54:	d31a      	bcc.n	8000f8c <__udivmoddi4+0x294>
 8000f56:	d017      	beq.n	8000f88 <__udivmoddi4+0x290>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x27a>
 8000f5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f66:	40f2      	lsrs	r2, r6
 8000f68:	ea4c 0202 	orr.w	r2, ip, r2
 8000f6c:	40f7      	lsrs	r7, r6
 8000f6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f72:	2600      	movs	r6, #0
 8000f74:	4631      	mov	r1, r6
 8000f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e70b      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6fd      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f88:	4543      	cmp	r3, r8
 8000f8a:	d2e5      	bcs.n	8000f58 <__udivmoddi4+0x260>
 8000f8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f90:	eb69 0104 	sbc.w	r1, r9, r4
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7df      	b.n	8000f58 <__udivmoddi4+0x260>
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e7d2      	b.n	8000f42 <__udivmoddi4+0x24a>
 8000f9c:	4660      	mov	r0, ip
 8000f9e:	e78d      	b.n	8000ebc <__udivmoddi4+0x1c4>
 8000fa0:	4681      	mov	r9, r0
 8000fa2:	e7b9      	b.n	8000f18 <__udivmoddi4+0x220>
 8000fa4:	4666      	mov	r6, ip
 8000fa6:	e775      	b.n	8000e94 <__udivmoddi4+0x19c>
 8000fa8:	4630      	mov	r0, r6
 8000faa:	e74a      	b.n	8000e42 <__udivmoddi4+0x14a>
 8000fac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb0:	4439      	add	r1, r7
 8000fb2:	e713      	b.n	8000ddc <__udivmoddi4+0xe4>
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	443c      	add	r4, r7
 8000fb8:	e724      	b.n	8000e04 <__udivmoddi4+0x10c>
 8000fba:	bf00      	nop

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fc6:	e003      	b.n	8000fd0 <LoopCopyDataInit>

08000fc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fcc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fce:	3104      	adds	r1, #4

08000fd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fd0:	480b      	ldr	r0, [pc, #44]	; (8001000 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fd8:	d3f6      	bcc.n	8000fc8 <CopyDataInit>
  ldr  r2, =_sbss
 8000fda:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fdc:	e002      	b.n	8000fe4 <LoopFillZerobss>

08000fde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fe0:	f842 3b04 	str.w	r3, [r2], #4

08000fe4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fe6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fe8:	d3f9      	bcc.n	8000fde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fea:	f003 ff09 	bl	8004e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fee:	f007 fc15 	bl	800881c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff2:	f000 fdc3 	bl	8001b7c <main>
  bx  lr    
 8000ff6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ff8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ffc:	08009870 	.word	0x08009870
  ldr  r0, =_sdata
 8001000:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001004:	2000076c 	.word	0x2000076c
  ldr  r2, =_sbss
 8001008:	2000076c 	.word	0x2000076c
  ldr  r3, = _ebss
 800100c:	20000d60 	.word	0x20000d60

08001010 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001010:	e7fe      	b.n	8001010 <BusFault_Handler>
	...

08001014 <DAC_Init>:
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  SET_BIT(DACx->CR,
 8001014:	4a02      	ldr	r2, [pc, #8]	; (8001020 <DAC_Init+0xc>)
 8001016:	6813      	ldr	r3, [r2, #0]
 8001018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800101c:	6013      	str	r3, [r2, #0]
  */
__weak void DAC_Init(UI_Handle_t *pHandle)
{
  /* Enable DAC Channel2 */
  LL_DAC_Enable(DAC1, LL_DAC_CHANNEL_2);
}
 800101e:	4770      	bx	lr
 8001020:	40007400 	.word	0x40007400

08001024 <DAC_Exec>:
  *         variables will be provided in the related output channels. This is
  *         the implementation of the virtual function.
  * @param  pHandle pointer on related component instance.
  */
__weak void DAC_Exec(UI_Handle_t *pHandle)
{
 8001024:	b508      	push	{r3, lr}
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  MC_Protocol_REG_t bCh_var;

  bCh_var = pDacHandle->bChannel_variable[DAC_CH1];
  LL_DAC_ConvertData12LeftAligned(DAC1, LL_DAC_CHANNEL_2,
                                  DACOFF + ((int16_t)UI_GetReg(pHandle,bCh_var,MC_NULL)));
 8001026:	2200      	movs	r2, #0
 8001028:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
 800102c:	f003 fbe6 	bl	80047fc <UI_GetReg>
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 8001030:	4908      	ldr	r1, [pc, #32]	; (8001054 <DAC_Exec+0x30>)
  SET_BIT(DACx->SWTRIGR,
 8001032:	4a09      	ldr	r2, [pc, #36]	; (8001058 <DAC_Exec+0x34>)
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8001034:	690b      	ldr	r3, [r1, #16]
 8001036:	b200      	sxth	r0, r0
 8001038:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800103c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001040:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8001044:	4318      	orrs	r0, r3
 8001046:	6108      	str	r0, [r1, #16]
  SET_BIT(DACx->SWTRIGR,
 8001048:	6853      	ldr	r3, [r2, #4]
 800104a:	f043 0302 	orr.w	r3, r3, #2
 800104e:	6053      	str	r3, [r2, #4]
  LL_DAC_TrigSWConversion(DAC1, LL_DAC_CHANNEL_2);
}
 8001050:	bd08      	pop	{r3, pc}
 8001052:	bf00      	nop
 8001054:	40007408 	.word	0x40007408
 8001058:	40007400 	.word	0x40007400

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	2300      	movs	r3, #0
{
 8001060:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8001066:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800106e:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001072:	4925      	ldr	r1, [pc, #148]	; (8001108 <SystemClock_Config+0xac>)
 8001074:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001076:	9302      	str	r3, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001078:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800107a:	4a24      	ldr	r2, [pc, #144]	; (800110c <SystemClock_Config+0xb0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800107c:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8001080:	6408      	str	r0, [r1, #64]	; 0x40
 8001082:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001084:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8001088:	9100      	str	r1, [sp, #0]
 800108a:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	6813      	ldr	r3, [r2, #0]
 8001090:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	6813      	ldr	r3, [r2, #0]
 8001098:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800109c:	9301      	str	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800109e:	2401      	movs	r4, #1
 80010a0:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a4:	2202      	movs	r2, #2
 80010a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010aa:	e9cd 4508 	strd	r4, r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ae:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b2:	9801      	ldr	r0, [sp, #4]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010b4:	2102      	movs	r1, #2
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b6:	2404      	movs	r4, #4
 80010b8:	25b4      	movs	r5, #180	; 0xb4
 80010ba:	2202      	movs	r2, #2
 80010bc:	2302      	movs	r3, #2
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010be:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c0:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 80010c4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010c8:	9114      	str	r1, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ca:	f004 fc7f 	bl	80059cc <HAL_RCC_OscConfig>
 80010ce:	b108      	cbz	r0, 80010d4 <SystemClock_Config+0x78>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <SystemClock_Config+0x76>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010d4:	f004 fb20 	bl	8005718 <HAL_PWREx_EnableOverDrive>
 80010d8:	b108      	cbz	r0, 80010de <SystemClock_Config+0x82>
 80010da:	b672      	cpsid	i
  while (1)
 80010dc:	e7fe      	b.n	80010dc <SystemClock_Config+0x80>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010de:	260f      	movs	r6, #15
 80010e0:	2702      	movs	r7, #2
 80010e2:	2400      	movs	r4, #0
 80010e4:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010ec:	a802      	add	r0, sp, #8
 80010ee:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80010f4:	e9cd 4504 	strd	r4, r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010f8:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010fa:	f004 fb4b 	bl	8005794 <HAL_RCC_ClockConfig>
 80010fe:	b108      	cbz	r0, 8001104 <SystemClock_Config+0xa8>
 8001100:	b672      	cpsid	i
  while (1)
 8001102:	e7fe      	b.n	8001102 <SystemClock_Config+0xa6>
}
 8001104:	b017      	add	sp, #92	; 0x5c
 8001106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001108:	40023800 	.word	0x40023800
 800110c:	40007000 	.word	0x40007000

08001110 <state000>:
{
 8001110:	b538      	push	{r3, r4, r5, lr}
	sprintf(msg_debug, "Going to state %hu\r\n", state);
 8001112:	4c16      	ldr	r4, [pc, #88]	; (800116c <state000+0x5c>)
	state = 99; //Workbench mode
 8001114:	4b16      	ldr	r3, [pc, #88]	; (8001170 <state000+0x60>)
	sprintf(msg_debug, "Going to state %hu\r\n", state);
 8001116:	4917      	ldr	r1, [pc, #92]	; (8001174 <state000+0x64>)
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001118:	4d17      	ldr	r5, [pc, #92]	; (8001178 <state000+0x68>)
	state = 99; //Workbench mode
 800111a:	2263      	movs	r2, #99	; 0x63
	sprintf(msg_debug, "Going to state %hu\r\n", state);
 800111c:	4620      	mov	r0, r4
	state = 99; //Workbench mode
 800111e:	801a      	strh	r2, [r3, #0]
	sprintf(msg_debug, "Going to state %hu\r\n", state);
 8001120:	f007 fba8 	bl	8008874 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001124:	4620      	mov	r0, r4
 8001126:	f7ff f873 	bl	8000210 <strlen>
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	b282      	uxth	r2, r0
 8001130:	4621      	mov	r1, r4
 8001132:	4628      	mov	r0, r5
 8001134:	f005 fbe4 	bl	8006900 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001138:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800113c:	f003 febe 	bl	8004ebc <HAL_Delay>
	sprintf(msg_debug, "Number: %hu\r\n", num);
 8001140:	490e      	ldr	r1, [pc, #56]	; (800117c <state000+0x6c>)
 8001142:	2210      	movs	r2, #16
 8001144:	4620      	mov	r0, r4
 8001146:	f007 fb95 	bl	8008874 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 800114a:	4620      	mov	r0, r4
 800114c:	f7ff f860 	bl	8000210 <strlen>
 8001150:	4621      	mov	r1, r4
 8001152:	b282      	uxth	r2, r0
 8001154:	f04f 33ff 	mov.w	r3, #4294967295
 8001158:	4628      	mov	r0, r5
 800115a:	f005 fbd1 	bl	8006900 <HAL_UART_Transmit>
}
 800115e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_Delay(1000);
 8001162:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001166:	f003 bea9 	b.w	8004ebc <HAL_Delay>
 800116a:	bf00      	nop
 800116c:	20000a0c 	.word	0x20000a0c
 8001170:	20000788 	.word	0x20000788
 8001174:	08009500 	.word	0x08009500
 8001178:	200009b4 	.word	0x200009b4
 800117c:	08009518 	.word	0x08009518

08001180 <state001>:
{
 8001180:	b570      	push	{r4, r5, r6, lr}
	sprintf(msg_debug, "State %hu\r\n", state);
 8001182:	4c45      	ldr	r4, [pc, #276]	; (8001298 <state001+0x118>)
 8001184:	4d45      	ldr	r5, [pc, #276]	; (800129c <state001+0x11c>)
 8001186:	4946      	ldr	r1, [pc, #280]	; (80012a0 <state001+0x120>)
 8001188:	882a      	ldrh	r2, [r5, #0]
 800118a:	4620      	mov	r0, r4
 800118c:	f007 fb72 	bl	8008874 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001190:	4620      	mov	r0, r4
 8001192:	f7ff f83d 	bl	8000210 <strlen>
 8001196:	4621      	mov	r1, r4
 8001198:	b282      	uxth	r2, r0
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	4841      	ldr	r0, [pc, #260]	; (80012a4 <state001+0x124>)
 80011a0:	f005 fbae 	bl	8006900 <HAL_UART_Transmit>
	HAL_Delay(100);
 80011a4:	2064      	movs	r0, #100	; 0x64
 80011a6:	f003 fe89 	bl	8004ebc <HAL_Delay>
	state = 100;
 80011aa:	2364      	movs	r3, #100	; 0x64
	if (HAL_GPIO_ReadPin(HV_OV_GPIO_Port, HV_OV_Pin) == 1)
 80011ac:	483e      	ldr	r0, [pc, #248]	; (80012a8 <state001+0x128>)
	state = 100;
 80011ae:	802b      	strh	r3, [r5, #0]
	if (HAL_GPIO_ReadPin(HV_OV_GPIO_Port, HV_OV_Pin) == 1)
 80011b0:	2140      	movs	r1, #64	; 0x40
 80011b2:	f004 faa7 	bl	8005704 <HAL_GPIO_ReadPin>
 80011b6:	2801      	cmp	r0, #1
 80011b8:	d044      	beq.n	8001244 <state001+0xc4>
	else if (HAL_GPIO_ReadPin(MTR_OT_GPIO_Port, MTR_OT_Pin) == 1)
 80011ba:	483c      	ldr	r0, [pc, #240]	; (80012ac <state001+0x12c>)
 80011bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011c0:	f004 faa0 	bl	8005704 <HAL_GPIO_ReadPin>
 80011c4:	2801      	cmp	r0, #1
 80011c6:	d026      	beq.n	8001216 <state001+0x96>
	else if (HAL_GPIO_ReadPin(FET_OT_GPIO_Port, FET_OT_Pin) == 1)
 80011c8:	4839      	ldr	r0, [pc, #228]	; (80012b0 <state001+0x130>)
 80011ca:	2180      	movs	r1, #128	; 0x80
 80011cc:	f004 fa9a 	bl	8005704 <HAL_GPIO_ReadPin>
 80011d0:	2801      	cmp	r0, #1
 80011d2:	d04b      	beq.n	800126c <state001+0xec>
	else if (MC_GetSTMStateMotor1() == 10 || MC_GetSTMStateMotor1() == 11)
 80011d4:	f001 f98e 	bl	80024f4 <MC_GetSTMStateMotor1>
 80011d8:	280a      	cmp	r0, #10
 80011da:	d003      	beq.n	80011e4 <state001+0x64>
 80011dc:	f001 f98a 	bl	80024f4 <MC_GetSTMStateMotor1>
 80011e0:	280b      	cmp	r0, #11
 80011e2:	d117      	bne.n	8001214 <state001+0x94>
		sprintf(msg_debug, "MOTOR CONTROL FAULT\r\n");
 80011e4:	4e33      	ldr	r6, [pc, #204]	; (80012b4 <state001+0x134>)
 80011e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011e8:	6020      	str	r0, [r4, #0]
 80011ea:	60e3      	str	r3, [r4, #12]
 80011ec:	6830      	ldr	r0, [r6, #0]
 80011ee:	88b3      	ldrh	r3, [r6, #4]
 80011f0:	6061      	str	r1, [r4, #4]
 80011f2:	60a2      	str	r2, [r4, #8]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80011f4:	4928      	ldr	r1, [pc, #160]	; (8001298 <state001+0x118>)
		sprintf(msg_debug, "MOTOR CONTROL FAULT\r\n");
 80011f6:	6120      	str	r0, [r4, #16]
 80011f8:	82a3      	strh	r3, [r4, #20]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80011fa:	2215      	movs	r2, #21
 80011fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001200:	4828      	ldr	r0, [pc, #160]	; (80012a4 <state001+0x124>)
 8001202:	f005 fb7d 	bl	8006900 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8001206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800120a:	f003 fe57 	bl	8004ebc <HAL_Delay>
		state = 706;
 800120e:	f240 23c2 	movw	r3, #706	; 0x2c2
 8001212:	802b      	strh	r3, [r5, #0]
}
 8001214:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(msg_debug, "MOTOR OT\r\n");
 8001216:	4b28      	ldr	r3, [pc, #160]	; (80012b8 <state001+0x138>)
 8001218:	cb03      	ldmia	r3!, {r0, r1}
 800121a:	789a      	ldrb	r2, [r3, #2]
 800121c:	6061      	str	r1, [r4, #4]
 800121e:	8819      	ldrh	r1, [r3, #0]
 8001220:	6020      	str	r0, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
		sprintf(msg_debug, "MOTOR OT\r\n");
 8001226:	8121      	strh	r1, [r4, #8]
 8001228:	72a2      	strb	r2, [r4, #10]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 800122a:	4621      	mov	r1, r4
 800122c:	220a      	movs	r2, #10
 800122e:	481d      	ldr	r0, [pc, #116]	; (80012a4 <state001+0x124>)
 8001230:	f005 fb66 	bl	8006900 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8001234:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001238:	f003 fe40 	bl	8004ebc <HAL_Delay>
		state = 701;
 800123c:	f240 23bd 	movw	r3, #701	; 0x2bd
 8001240:	802b      	strh	r3, [r5, #0]
}
 8001242:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(msg_debug, "DC BUS OV\r\n");
 8001244:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <state001+0x13c>)
 8001246:	cb07      	ldmia	r3!, {r0, r1, r2}
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
		sprintf(msg_debug, "DC BUS OV\r\n");
 800124c:	6020      	str	r0, [r4, #0]
 800124e:	6061      	str	r1, [r4, #4]
 8001250:	60a2      	str	r2, [r4, #8]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001252:	4621      	mov	r1, r4
 8001254:	220b      	movs	r2, #11
 8001256:	4813      	ldr	r0, [pc, #76]	; (80012a4 <state001+0x124>)
 8001258:	f005 fb52 	bl	8006900 <HAL_UART_Transmit>
		HAL_Delay(1000);
 800125c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001260:	f003 fe2c 	bl	8004ebc <HAL_Delay>
		state = 703;
 8001264:	f240 23bf 	movw	r3, #703	; 0x2bf
 8001268:	802b      	strh	r3, [r5, #0]
}
 800126a:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(msg_debug, "FET OT\r\n");
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <state001+0x140>)
 800126e:	cb03      	ldmia	r3!, {r0, r1}
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	6020      	str	r0, [r4, #0]
 8001274:	6061      	str	r1, [r4, #4]
 8001276:	7223      	strb	r3, [r4, #8]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001278:	4621      	mov	r1, r4
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	2208      	movs	r2, #8
 8001280:	4808      	ldr	r0, [pc, #32]	; (80012a4 <state001+0x124>)
 8001282:	f005 fb3d 	bl	8006900 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8001286:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800128a:	f003 fe17 	bl	8004ebc <HAL_Delay>
		state = 704;
 800128e:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001292:	802b      	strh	r3, [r5, #0]
}
 8001294:	bd70      	pop	{r4, r5, r6, pc}
 8001296:	bf00      	nop
 8001298:	20000a0c 	.word	0x20000a0c
 800129c:	20000788 	.word	0x20000788
 80012a0:	08009528 	.word	0x08009528
 80012a4:	200009b4 	.word	0x200009b4
 80012a8:	40020400 	.word	0x40020400
 80012ac:	40020000 	.word	0x40020000
 80012b0:	40020800 	.word	0x40020800
 80012b4:	08009558 	.word	0x08009558
 80012b8:	08009540 	.word	0x08009540
 80012bc:	08009534 	.word	0x08009534
 80012c0:	0800954c 	.word	0x0800954c
 80012c4:	00000000 	.word	0x00000000

080012c8 <state102>:
{
 80012c8:	b510      	push	{r4, lr}
	if (RCM_GetUserConvState() == RCM_USERCONV_IDLE)
 80012ca:	f002 fcdd 	bl	8003c88 <RCM_GetUserConvState>
 80012ce:	b928      	cbnz	r0, 80012dc <state102+0x14>
		RCM_RequestUserConv(Pot2Handle);
 80012d0:	4b13      	ldr	r3, [pc, #76]	; (8001320 <state102+0x58>)
}
 80012d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		RCM_RequestUserConv(Pot2Handle);
 80012d6:	7818      	ldrb	r0, [r3, #0]
 80012d8:	f002 bc8c 	b.w	8003bf4 <RCM_RequestUserConv>
	else if (RCM_GetUserConvState() == RCM_USERCONV_EOC)
 80012dc:	f002 fcd4 	bl	8003c88 <RCM_GetUserConvState>
 80012e0:	2802      	cmp	r0, #2
 80012e2:	d000      	beq.n	80012e6 <state102+0x1e>
}
 80012e4:	bd10      	pop	{r4, pc}
		pot2_value = RCM_GetUserConv();
 80012e6:	f002 fc95 	bl	8003c14 <RCM_GetUserConv>
		CAN_IN_current.CAN_IN_current_float = 100.0*((float) pot2_value) / 45535.0;
 80012ea:	ee07 0a90 	vmov	s15, r0
		pot2_value = RCM_GetUserConv();
 80012ee:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <state102+0x5c>)
		CAN_IN_current.CAN_IN_current_float = 100.0*((float) pot2_value) / 45535.0;
 80012f0:	4c0d      	ldr	r4, [pc, #52]	; (8001328 <state102+0x60>)
		pot2_value = RCM_GetUserConv();
 80012f2:	8018      	strh	r0, [r3, #0]
		CAN_IN_current.CAN_IN_current_float = 100.0*((float) pot2_value) / 45535.0;
 80012f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012f8:	ee17 0a90 	vmov	r0, s15
 80012fc:	f7ff f944 	bl	8000588 <__aeabi_f2d>
 8001300:	a305      	add	r3, pc, #20	; (adr r3, 8001318 <state102+0x50>)
 8001302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001306:	f7ff f997 	bl	8000638 <__aeabi_dmul>
 800130a:	f7ff fc8d 	bl	8000c28 <__aeabi_d2f>
		state = 198;
 800130e:	4b07      	ldr	r3, [pc, #28]	; (800132c <state102+0x64>)
		CAN_IN_current.CAN_IN_current_float = 100.0*((float) pot2_value) / 45535.0;
 8001310:	6020      	str	r0, [r4, #0]
		state = 198;
 8001312:	22c6      	movs	r2, #198	; 0xc6
 8001314:	801a      	strh	r2, [r3, #0]
}
 8001316:	bd10      	pop	{r4, pc}
 8001318:	1ff61aee 	.word	0x1ff61aee
 800131c:	3f61fd95 	.word	0x3f61fd95
 8001320:	20000a06 	.word	0x20000a06
 8001324:	20000962 	.word	0x20000962
 8001328:	200007c4 	.word	0x200007c4
 800132c:	20000788 	.word	0x20000788

08001330 <state104>:
{
 8001330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (CAN_IN_current.CAN_IN_current_float > IMAXP + ITOLP)
 8001332:	4c31      	ldr	r4, [pc, #196]	; (80013f8 <state104+0xc8>)
 8001334:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80013fc <state104+0xcc>
 8001338:	edd4 7a00 	vldr	s15, [r4]
	state = 201;
 800133c:	4d30      	ldr	r5, [pc, #192]	; (8001400 <state104+0xd0>)
	if (CAN_IN_current.CAN_IN_current_float > IMAXP + ITOLP)
 800133e:	eef4 7ac7 	vcmpe.f32	s15, s14
	state = 201;
 8001342:	23c9      	movs	r3, #201	; 0xc9
	if (CAN_IN_current.CAN_IN_current_float > IMAXP + ITOLP)
 8001344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	state = 201;
 8001348:	802b      	strh	r3, [r5, #0]
	if (CAN_IN_current.CAN_IN_current_float > IMAXP + ITOLP)
 800134a:	dc29      	bgt.n	80013a0 <state104+0x70>
	else if (CAN_IN_current.CAN_IN_current_float <= ITOLP)
 800134c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001350:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001358:	d800      	bhi.n	800135c <state104+0x2c>
}
 800135a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if (CAN_IN_current.CAN_IN_current_float >= IMAXP - ITOLP
 800135c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001404 <state104+0xd4>
			&& CAN_IN_velocity.CAN_IN_velocity_float <= VMAX + VTOL)
 8001360:	4b29      	ldr	r3, [pc, #164]	; (8001408 <state104+0xd8>)
	else if (CAN_IN_current.CAN_IN_current_float >= IMAXP - ITOLP
 8001362:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			&& CAN_IN_velocity.CAN_IN_velocity_float <= VMAX + VTOL)
 800136a:	6818      	ldr	r0, [r3, #0]
	else if (CAN_IN_current.CAN_IN_current_float >= IMAXP - ITOLP
 800136c:	db2a      	blt.n	80013c4 <state104+0x94>
			&& CAN_IN_velocity.CAN_IN_velocity_float <= VMAX + VTOL)
 800136e:	f7ff f90b 	bl	8000588 <__aeabi_f2d>
 8001372:	a31b      	add	r3, pc, #108	; (adr r3, 80013e0 <state104+0xb0>)
 8001374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001378:	4606      	mov	r6, r0
 800137a:	460f      	mov	r7, r1
 800137c:	f7ff fbd8 	bl	8000b30 <__aeabi_dcmple>
 8001380:	2800      	cmp	r0, #0
 8001382:	d0ea      	beq.n	800135a <state104+0x2a>
		state = 202;
 8001384:	23ca      	movs	r3, #202	; 0xca
 8001386:	802b      	strh	r3, [r5, #0]
		if (CAN_IN_velocity.CAN_IN_velocity_float < VTOL)
 8001388:	4630      	mov	r0, r6
 800138a:	a317      	add	r3, pc, #92	; (adr r3, 80013e8 <state104+0xb8>)
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	4639      	mov	r1, r7
 8001392:	f7ff fbc3 	bl	8000b1c <__aeabi_dcmplt>
 8001396:	2800      	cmp	r0, #0
 8001398:	d0df      	beq.n	800135a <state104+0x2a>
			state = 203;
 800139a:	23cb      	movs	r3, #203	; 0xcb
 800139c:	802b      	strh	r3, [r5, #0]
}
 800139e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sprintf(msg_debug, "State DNE\r\n");
 80013a0:	4b1a      	ldr	r3, [pc, #104]	; (800140c <state104+0xdc>)
 80013a2:	4d1b      	ldr	r5, [pc, #108]	; (8001410 <state104+0xe0>)
 80013a4:	cb07      	ldmia	r3!, {r0, r1, r2}
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
		sprintf(msg_debug, "State DNE\r\n");
 80013aa:	6028      	str	r0, [r5, #0]
 80013ac:	6069      	str	r1, [r5, #4]
 80013ae:	60aa      	str	r2, [r5, #8]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80013b0:	4818      	ldr	r0, [pc, #96]	; (8001414 <state104+0xe4>)
 80013b2:	220b      	movs	r2, #11
 80013b4:	4629      	mov	r1, r5
 80013b6:	f005 faa3 	bl	8006900 <HAL_UART_Transmit>
		CAN_IN_velocity.CAN_IN_velocity_float = 0.0;
 80013ba:	4a13      	ldr	r2, [pc, #76]	; (8001408 <state104+0xd8>)
		CAN_IN_current.CAN_IN_current_float = 0.0;
 80013bc:	2300      	movs	r3, #0
 80013be:	6023      	str	r3, [r4, #0]
		CAN_IN_velocity.CAN_IN_velocity_float = 0.0;
 80013c0:	6013      	str	r3, [r2, #0]
}
 80013c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			&& CAN_IN_velocity.CAN_IN_velocity_float < VMAX - VTOL)
 80013c4:	f7ff f8e0 	bl	8000588 <__aeabi_f2d>
 80013c8:	a309      	add	r3, pc, #36	; (adr r3, 80013f0 <state104+0xc0>)
 80013ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ce:	4606      	mov	r6, r0
 80013d0:	460f      	mov	r7, r1
 80013d2:	f7ff fba3 	bl	8000b1c <__aeabi_dcmplt>
 80013d6:	2800      	cmp	r0, #0
 80013d8:	d1d4      	bne.n	8001384 <state104+0x54>
}
 80013da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013dc:	f3af 8000 	nop.w
 80013e0:	520e78f8 	.word	0x520e78f8
 80013e4:	4030c9dd 	.word	0x4030c9dd
 80013e8:	38407198 	.word	0x38407198
 80013ec:	3fa56f8c 	.word	0x3fa56f8c
 80013f0:	c5d63886 	.word	0xc5d63886
 80013f4:	4030b46d 	.word	0x4030b46d
 80013f8:	200007c4 	.word	0x200007c4
 80013fc:	42dc0000 	.word	0x42dc0000
 8001400:	20000788 	.word	0x20000788
 8001404:	42b40000 	.word	0x42b40000
 8001408:	20000828 	.word	0x20000828
 800140c:	08009570 	.word	0x08009570
 8001410:	20000a0c 	.word	0x20000a0c
 8001414:	200009b4 	.word	0x200009b4

08001418 <state198>:
{
 8001418:	b510      	push	{r4, lr}
	if (RCM_GetUserConvState() == RCM_USERCONV_IDLE)
 800141a:	f002 fc35 	bl	8003c88 <RCM_GetUserConvState>
 800141e:	b928      	cbnz	r0, 800142c <state198+0x14>
		RCM_RequestUserConv(Pot1Handle);
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <state198+0x58>)
}
 8001422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		RCM_RequestUserConv(Pot1Handle);
 8001426:	7818      	ldrb	r0, [r3, #0]
 8001428:	f002 bbe4 	b.w	8003bf4 <RCM_RequestUserConv>
	else if (RCM_GetUserConvState() == RCM_USERCONV_EOC)
 800142c:	f002 fc2c 	bl	8003c88 <RCM_GetUserConvState>
 8001430:	2802      	cmp	r0, #2
 8001432:	d000      	beq.n	8001436 <state198+0x1e>
}
 8001434:	bd10      	pop	{r4, pc}
		pot1_value = RCM_GetUserConv();
 8001436:	f002 fbed 	bl	8003c14 <RCM_GetUserConv>
		CAN_IN_velocity.CAN_IN_velocity_float = ((float) pot1_value) / 45535.0 * VMAX;
 800143a:	ee07 0a90 	vmov	s15, r0
		pot1_value = RCM_GetUserConv();
 800143e:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <state198+0x5c>)
		CAN_IN_velocity.CAN_IN_velocity_float = ((float) pot1_value) / 45535.0 * VMAX;
 8001440:	4c0d      	ldr	r4, [pc, #52]	; (8001478 <state198+0x60>)
		pot1_value = RCM_GetUserConv();
 8001442:	8018      	strh	r0, [r3, #0]
		CAN_IN_velocity.CAN_IN_velocity_float = ((float) pot1_value) / 45535.0 * VMAX;
 8001444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001448:	ee17 0a90 	vmov	r0, s15
 800144c:	f7ff f89c 	bl	8000588 <__aeabi_f2d>
 8001450:	a305      	add	r3, pc, #20	; (adr r3, 8001468 <state198+0x50>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	f7ff f8ef 	bl	8000638 <__aeabi_dmul>
 800145a:	f7ff fbe5 	bl	8000c28 <__aeabi_d2f>
		state = 103;
 800145e:	4b07      	ldr	r3, [pc, #28]	; (800147c <state198+0x64>)
		CAN_IN_velocity.CAN_IN_velocity_float = ((float) pot1_value) / 45535.0 * VMAX;
 8001460:	6020      	str	r0, [r4, #0]
		state = 103;
 8001462:	2267      	movs	r2, #103	; 0x67
 8001464:	801a      	strh	r2, [r3, #0]
}
 8001466:	bd10      	pop	{r4, pc}
 8001468:	9e99965b 	.word	0x9e99965b
 800146c:	3f381a40 	.word	0x3f381a40
 8001470:	200008d8 	.word	0x200008d8
 8001474:	2000094c 	.word	0x2000094c
 8001478:	20000828 	.word	0x20000828
 800147c:	20000788 	.word	0x20000788

08001480 <state199>:
{
 8001480:	b538      	push	{r3, r4, r5, lr}
	sprintf(msg_debug, "State %hu\r\n", state);
 8001482:	4c0c      	ldr	r4, [pc, #48]	; (80014b4 <state199+0x34>)
 8001484:	4d0c      	ldr	r5, [pc, #48]	; (80014b8 <state199+0x38>)
 8001486:	490d      	ldr	r1, [pc, #52]	; (80014bc <state199+0x3c>)
 8001488:	882a      	ldrh	r2, [r5, #0]
 800148a:	4620      	mov	r0, r4
 800148c:	f007 f9f2 	bl	8008874 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001490:	4620      	mov	r0, r4
 8001492:	f7fe febd 	bl	8000210 <strlen>
 8001496:	4621      	mov	r1, r4
 8001498:	b282      	uxth	r2, r0
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	4808      	ldr	r0, [pc, #32]	; (80014c0 <state199+0x40>)
 80014a0:	f005 fa2e 	bl	8006900 <HAL_UART_Transmit>
	state = 200;
 80014a4:	23c8      	movs	r3, #200	; 0xc8
 80014a6:	802b      	strh	r3, [r5, #0]
	HAL_Delay(1000);
 80014a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 80014ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_Delay(1000);
 80014b0:	f003 bd04 	b.w	8004ebc <HAL_Delay>
 80014b4:	20000a0c 	.word	0x20000a0c
 80014b8:	20000788 	.word	0x20000788
 80014bc:	08009528 	.word	0x08009528
 80014c0:	200009b4 	.word	0x200009b4
 80014c4:	00000000 	.word	0x00000000

080014c8 <state202>:
{
 80014c8:	b538      	push	{r3, r4, r5, lr}
	sprintf(msg_debug, "Speed ramp\r\n");
 80014ca:	4b19      	ldr	r3, [pc, #100]	; (8001530 <state202+0x68>)
 80014cc:	4c19      	ldr	r4, [pc, #100]	; (8001534 <state202+0x6c>)
 80014ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80014d0:	781d      	ldrb	r5, [r3, #0]
 80014d2:	6020      	str	r0, [r4, #0]
 80014d4:	6061      	str	r1, [r4, #4]
 80014d6:	60a2      	str	r2, [r4, #8]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80014d8:	4621      	mov	r1, r4
 80014da:	220c      	movs	r2, #12
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295
 80014e0:	4815      	ldr	r0, [pc, #84]	; (8001538 <state202+0x70>)
	sprintf(msg_debug, "Speed ramp\r\n");
 80014e2:	7325      	strb	r5, [r4, #12]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80014e4:	f005 fa0c 	bl	8006900 <HAL_UART_Transmit>
	float finalSpeed = CAN_IN_velocity.CAN_IN_velocity_float * 30.0 / (PI * WHEELRAD); //RPM
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <state202+0x74>)
 80014ea:	6818      	ldr	r0, [r3, #0]
 80014ec:	f7ff f84c 	bl	8000588 <__aeabi_f2d>
 80014f0:	a30b      	add	r3, pc, #44	; (adr r3, 8001520 <state202+0x58>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	f7ff f89f 	bl	8000638 <__aeabi_dmul>
 80014fa:	f7ff fb95 	bl	8000c28 <__aeabi_d2f>
	MC_ProgramSpeedRampMotor1(finalSpeed/6.0, 0);
 80014fe:	f7ff f843 	bl	8000588 <__aeabi_f2d>
 8001502:	a309      	add	r3, pc, #36	; (adr r3, 8001528 <state202+0x60>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7ff f896 	bl	8000638 <__aeabi_dmul>
 800150c:	f7ff fb44 	bl	8000b98 <__aeabi_d2iz>
 8001510:	2100      	movs	r1, #0
 8001512:	b200      	sxth	r0, r0
 8001514:	f000 ffd8 	bl	80024c8 <MC_ProgramSpeedRampMotor1>
	state = 204;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <state202+0x78>)
 800151a:	22cc      	movs	r2, #204	; 0xcc
 800151c:	801a      	strh	r2, [r3, #0]
}
 800151e:	bd38      	pop	{r3, r4, r5, pc}
 8001520:	e5e92c05 	.word	0xe5e92c05
 8001524:	406ddb4f 	.word	0x406ddb4f
 8001528:	55555555 	.word	0x55555555
 800152c:	3fc55555 	.word	0x3fc55555
 8001530:	0800957c 	.word	0x0800957c
 8001534:	20000a0c 	.word	0x20000a0c
 8001538:	200009b4 	.word	0x200009b4
 800153c:	20000828 	.word	0x20000828
 8001540:	20000788 	.word	0x20000788

08001544 <state203>:
	sprintf(msg_debug, "Regen\r\n");
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <state203+0x24>)
 8001546:	cb03      	ldmia	r3!, {r0, r1}
{
 8001548:	b510      	push	{r4, lr}
	sprintf(msg_debug, "Regen\r\n");
 800154a:	4c08      	ldr	r4, [pc, #32]	; (800156c <state203+0x28>)
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
	sprintf(msg_debug, "Regen\r\n");
 8001550:	6020      	str	r0, [r4, #0]
 8001552:	6061      	str	r1, [r4, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001554:	2207      	movs	r2, #7
 8001556:	4806      	ldr	r0, [pc, #24]	; (8001570 <state203+0x2c>)
 8001558:	4621      	mov	r1, r4
 800155a:	f005 f9d1 	bl	8006900 <HAL_UART_Transmit>
	state = 204;
 800155e:	4b05      	ldr	r3, [pc, #20]	; (8001574 <state203+0x30>)
 8001560:	22cc      	movs	r2, #204	; 0xcc
 8001562:	801a      	strh	r2, [r3, #0]
}
 8001564:	bd10      	pop	{r4, pc}
 8001566:	bf00      	nop
 8001568:	0800958c 	.word	0x0800958c
 800156c:	20000a0c 	.word	0x20000a0c
 8001570:	200009b4 	.word	0x200009b4
 8001574:	20000788 	.word	0x20000788

08001578 <state204>:
{
 8001578:	b570      	push	{r4, r5, r6, lr}
	int motorState = MC_GetSTMStateMotor1();
 800157a:	f000 ffbb 	bl	80024f4 <MC_GetSTMStateMotor1>
 800157e:	4604      	mov	r4, r0
	int motorSpeed = MC_GetMecSpeedAverageMotor1();
 8001580:	f000 ffb2 	bl	80024e8 <MC_GetMecSpeedAverageMotor1>
	if (CAN_IN_velocity.CAN_IN_velocity_float > VTOL) userSpin = 1;
 8001584:	4e2c      	ldr	r6, [pc, #176]	; (8001638 <state204+0xc0>)
	int motorSpeed = MC_GetMecSpeedAverageMotor1();
 8001586:	4605      	mov	r5, r0
	if (CAN_IN_velocity.CAN_IN_velocity_float > VTOL) userSpin = 1;
 8001588:	6830      	ldr	r0, [r6, #0]
 800158a:	f7fe fffd 	bl	8000588 <__aeabi_f2d>
 800158e:	a328      	add	r3, pc, #160	; (adr r3, 8001630 <state204+0xb8>)
 8001590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001594:	f7ff fae0 	bl	8000b58 <__aeabi_dcmpgt>
 8001598:	2800      	cmp	r0, #0
 800159a:	d136      	bne.n	800160a <state204+0x92>
	if (!(motorState == 0 || motorState == 7)) STMSpin = 1;
 800159c:	b38c      	cbz	r4, 8001602 <state204+0x8a>
 800159e:	2c07      	cmp	r4, #7
 80015a0:	d02f      	beq.n	8001602 <state204+0x8a>
	if (motorSpin == 1)
 80015a2:	2d00      	cmp	r5, #0
 80015a4:	dc40      	bgt.n	8001628 <state204+0xb0>
				MC_StopMotor1();
 80015a6:	f000 ff89 	bl	80024bc <MC_StopMotor1>
	if (motorSpeed == 0 && CAN_IN_velocity.CAN_IN_velocity_float > VTOL &&  CAN_IN_current.CAN_IN_current_float > ITOLP)
 80015aa:	bb55      	cbnz	r5, 8001602 <state204+0x8a>
 80015ac:	6830      	ldr	r0, [r6, #0]
 80015ae:	f7fe ffeb 	bl	8000588 <__aeabi_f2d>
 80015b2:	a31f      	add	r3, pc, #124	; (adr r3, 8001630 <state204+0xb8>)
 80015b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b8:	f7ff face 	bl	8000b58 <__aeabi_dcmpgt>
 80015bc:	b170      	cbz	r0, 80015dc <state204+0x64>
 80015be:	4b1f      	ldr	r3, [pc, #124]	; (800163c <state204+0xc4>)
 80015c0:	ed93 7a00 	vldr	s14, [r3]
 80015c4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80015c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d0:	dd17      	ble.n	8001602 <state204+0x8a>
		if (motorState == 0 || motorState == 7)
 80015d2:	bb34      	cbnz	r4, 8001622 <state204+0xaa>
			MC_StartMotor1();
 80015d4:	f000 ff6c 	bl	80024b0 <MC_StartMotor1>
			sprintf(msg_debug, "Motor started\r\n");
 80015d8:	4c19      	ldr	r4, [pc, #100]	; (8001640 <state204+0xc8>)
 80015da:	e005      	b.n	80015e8 <state204+0x70>
		if (!(motorState == 0 || motorState == 7))
 80015dc:	b18c      	cbz	r4, 8001602 <state204+0x8a>
 80015de:	2c07      	cmp	r4, #7
 80015e0:	d00f      	beq.n	8001602 <state204+0x8a>
			MC_StopMotor1();
 80015e2:	f000 ff6b 	bl	80024bc <MC_StopMotor1>
			sprintf(msg_debug, "Motor stopped\r\n");
 80015e6:	4c17      	ldr	r4, [pc, #92]	; (8001644 <state204+0xcc>)
 80015e8:	4d17      	ldr	r5, [pc, #92]	; (8001648 <state204+0xd0>)
 80015ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ec:	6028      	str	r0, [r5, #0]
 80015ee:	6069      	str	r1, [r5, #4]
 80015f0:	60aa      	str	r2, [r5, #8]
 80015f2:	60eb      	str	r3, [r5, #12]
			HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80015f4:	4815      	ldr	r0, [pc, #84]	; (800164c <state204+0xd4>)
 80015f6:	4629      	mov	r1, r5
 80015f8:	f04f 33ff 	mov.w	r3, #4294967295
 80015fc:	220f      	movs	r2, #15
 80015fe:	f005 f97f 	bl	8006900 <HAL_UART_Transmit>
	state = 100;
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <state204+0xd8>)
 8001604:	2264      	movs	r2, #100	; 0x64
 8001606:	801a      	strh	r2, [r3, #0]
}
 8001608:	bd70      	pop	{r4, r5, r6, pc}
	if (!(motorState == 0 || motorState == 7)) STMSpin = 1;
 800160a:	b924      	cbnz	r4, 8001616 <state204+0x9e>
	if (motorSpin == 1)
 800160c:	2d00      	cmp	r5, #0
 800160e:	dcf8      	bgt.n	8001602 <state204+0x8a>
				MC_StartMotor1();
 8001610:	f000 ff4e 	bl	80024b0 <MC_StartMotor1>
 8001614:	e7c9      	b.n	80015aa <state204+0x32>
	if (!(motorState == 0 || motorState == 7)) STMSpin = 1;
 8001616:	2c07      	cmp	r4, #7
 8001618:	d0f8      	beq.n	800160c <state204+0x94>
	state = 100;
 800161a:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <state204+0xd8>)
 800161c:	2264      	movs	r2, #100	; 0x64
 800161e:	801a      	strh	r2, [r3, #0]
}
 8001620:	bd70      	pop	{r4, r5, r6, pc}
		if (motorState == 0 || motorState == 7)
 8001622:	2c07      	cmp	r4, #7
 8001624:	d0d6      	beq.n	80015d4 <state204+0x5c>
 8001626:	e7ec      	b.n	8001602 <state204+0x8a>
				MC_StopMotor1();
 8001628:	f000 ff48 	bl	80024bc <MC_StopMotor1>
 800162c:	e7e9      	b.n	8001602 <state204+0x8a>
 800162e:	bf00      	nop
 8001630:	38407198 	.word	0x38407198
 8001634:	3fa56f8c 	.word	0x3fa56f8c
 8001638:	20000828 	.word	0x20000828
 800163c:	200007c4 	.word	0x200007c4
 8001640:	08009594 	.word	0x08009594
 8001644:	080095a4 	.word	0x080095a4
 8001648:	20000a0c 	.word	0x20000a0c
 800164c:	200009b4 	.word	0x200009b4
 8001650:	20000788 	.word	0x20000788

08001654 <state300>:
{
 8001654:	b510      	push	{r4, lr}
	sprintf(msg_debug, "%hu\r\n", 300);
 8001656:	4c0d      	ldr	r4, [pc, #52]	; (800168c <state300+0x38>)
 8001658:	490d      	ldr	r1, [pc, #52]	; (8001690 <state300+0x3c>)
 800165a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800165e:	4620      	mov	r0, r4
 8001660:	f007 f908 	bl	8008874 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001664:	4620      	mov	r0, r4
 8001666:	f7fe fdd3 	bl	8000210 <strlen>
 800166a:	4621      	mov	r1, r4
 800166c:	b282      	uxth	r2, r0
 800166e:	f04f 33ff 	mov.w	r3, #4294967295
 8001672:	4808      	ldr	r0, [pc, #32]	; (8001694 <state300+0x40>)
 8001674:	f005 f944 	bl	8006900 <HAL_UART_Transmit>
	state = 301;
 8001678:	4b07      	ldr	r3, [pc, #28]	; (8001698 <state300+0x44>)
 800167a:	f240 122d 	movw	r2, #301	; 0x12d
}
 800167e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(1000);
 8001682:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	state = 301;
 8001686:	801a      	strh	r2, [r3, #0]
	HAL_Delay(1000);
 8001688:	f003 bc18 	b.w	8004ebc <HAL_Delay>
 800168c:	20000a0c 	.word	0x20000a0c
 8001690:	08009520 	.word	0x08009520
 8001694:	200009b4 	.word	0x200009b4
 8001698:	20000788 	.word	0x20000788

0800169c <state400>:
{
 800169c:	b538      	push	{r3, r4, r5, lr}
	sprintf(msg_debug, "State %hu\r\n", state);
 800169e:	4c0d      	ldr	r4, [pc, #52]	; (80016d4 <state400+0x38>)
 80016a0:	4d0d      	ldr	r5, [pc, #52]	; (80016d8 <state400+0x3c>)
 80016a2:	490e      	ldr	r1, [pc, #56]	; (80016dc <state400+0x40>)
 80016a4:	882a      	ldrh	r2, [r5, #0]
 80016a6:	4620      	mov	r0, r4
 80016a8:	f007 f8e4 	bl	8008874 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80016ac:	4620      	mov	r0, r4
 80016ae:	f7fe fdaf 	bl	8000210 <strlen>
 80016b2:	4621      	mov	r1, r4
 80016b4:	b282      	uxth	r2, r0
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ba:	4809      	ldr	r0, [pc, #36]	; (80016e0 <state400+0x44>)
 80016bc:	f005 f920 	bl	8006900 <HAL_UART_Transmit>
	state = 401;
 80016c0:	f240 1391 	movw	r3, #401	; 0x191
 80016c4:	802b      	strh	r3, [r5, #0]
	HAL_Delay(1000);
 80016c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 80016ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_Delay(1000);
 80016ce:	f003 bbf5 	b.w	8004ebc <HAL_Delay>
 80016d2:	bf00      	nop
 80016d4:	20000a0c 	.word	0x20000a0c
 80016d8:	20000788 	.word	0x20000788
 80016dc:	08009528 	.word	0x08009528
 80016e0:	200009b4 	.word	0x200009b4
 80016e4:	00000000 	.word	0x00000000

080016e8 <state405>:
{
 80016e8:	b508      	push	{r3, lr}
	if (RCM_GetUserConvState() == RCM_USERCONV_IDLE)
 80016ea:	f002 facd 	bl	8003c88 <RCM_GetUserConvState>
 80016ee:	b928      	cbnz	r0, 80016fc <state405+0x14>
		RCM_RequestUserConv(ThermMTRHandle);
 80016f0:	4b33      	ldr	r3, [pc, #204]	; (80017c0 <state405+0xd8>)
 80016f2:	7818      	ldrb	r0, [r3, #0]
}
 80016f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		RCM_RequestUserConv(ThermMTRHandle);
 80016f8:	f002 ba7c 	b.w	8003bf4 <RCM_RequestUserConv>
	else if (RCM_GetUserConvState() == RCM_USERCONV_EOC)
 80016fc:	f002 fac4 	bl	8003c88 <RCM_GetUserConvState>
 8001700:	2802      	cmp	r0, #2
 8001702:	d000      	beq.n	8001706 <state405+0x1e>
}
 8001704:	bd08      	pop	{r3, pc}
		thermMTR_value = RCM_GetUserConv();
 8001706:	f002 fa85 	bl	8003c14 <RCM_GetUserConv>
 800170a:	4b2e      	ldr	r3, [pc, #184]	; (80017c4 <state405+0xdc>)
 800170c:	8018      	strh	r0, [r3, #0]
	thermXX_value = thermXX_value / 16.0; // Convert left-aligned to right-aligned (0-4096)
 800170e:	f7fe ff29 	bl	8000564 <__aeabi_i2d>
 8001712:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <state405+0xe0>)
 8001714:	2200      	movs	r2, #0
 8001716:	f7fe ff8f 	bl	8000638 <__aeabi_dmul>
 800171a:	f7ff fa65 	bl	8000be8 <__aeabi_d2uiz>
	float thermXX_voltage = thermXX_value * 3300.0 / 4096.0; //Convert to mV (to avoid decimal places)
 800171e:	b280      	uxth	r0, r0
 8001720:	f7fe ff20 	bl	8000564 <__aeabi_i2d>
 8001724:	a320      	add	r3, pc, #128	; (adr r3, 80017a8 <state405+0xc0>)
 8001726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172a:	f7fe ff85 	bl	8000638 <__aeabi_dmul>
 800172e:	f7ff fa7b 	bl	8000c28 <__aeabi_d2f>
	float thermXX_resistance = 3300.0 * 3300 / thermXX_voltage;
 8001732:	eddf 6a26 	vldr	s13, [pc, #152]	; 80017cc <state405+0xe4>
	thermXX_resistance = thermXX_resistance - 3300;
 8001736:	eddf 7a26 	vldr	s15, [pc, #152]	; 80017d0 <state405+0xe8>
	float thermXX_resistance = 3300.0 * 3300 / thermXX_voltage;
 800173a:	ee07 0a10 	vmov	s14, r0
 800173e:	ee86 7a87 	vdiv.f32	s14, s13, s14
	float thermXX_temp = 1000.0*(log(thermXX_resistance / 10000.0) + (3435.0/298.0));
 8001742:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001746:	ee17 0a90 	vmov	r0, s15
 800174a:	f7fe ff1d 	bl	8000588 <__aeabi_f2d>
 800174e:	a318      	add	r3, pc, #96	; (adr r3, 80017b0 <state405+0xc8>)
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	f7fe ff70 	bl	8000638 <__aeabi_dmul>
 8001758:	ec41 0b10 	vmov	d0, r0, r1
 800175c:	f007 fcb8 	bl	80090d0 <log>
 8001760:	a315      	add	r3, pc, #84	; (adr r3, 80017b8 <state405+0xd0>)
 8001762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001766:	ec51 0b10 	vmov	r0, r1, d0
 800176a:	f7fe fdaf 	bl	80002cc <__adddf3>
 800176e:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <state405+0xec>)
 8001770:	2200      	movs	r2, #0
 8001772:	f7fe ff61 	bl	8000638 <__aeabi_dmul>
 8001776:	f7ff fa57 	bl	8000c28 <__aeabi_d2f>
	thermXX_temp = 1000.0 * 3435.0 / thermXX_temp;
 800177a:	eddf 6a17 	vldr	s13, [pc, #92]	; 80017d8 <state405+0xf0>
	thermXX_temp = thermXX_temp - 273.0;
 800177e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80017dc <state405+0xf4>
		state = 406;
 8001782:	4a17      	ldr	r2, [pc, #92]	; (80017e0 <state405+0xf8>)
		thermMTR_temp = convertTempVal(thermMTR_value);
 8001784:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <state405+0xfc>)
	thermXX_temp = 1000.0 * 3435.0 / thermXX_temp;
 8001786:	ee07 0a90 	vmov	s15, r0
 800178a:	eec6 7aa7 	vdiv.f32	s15, s13, s15
		state = 406;
 800178e:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8001792:	8011      	strh	r1, [r2, #0]
	thermXX_temp = thermXX_temp - 273.0;
 8001794:	ee77 7ac7 	vsub.f32	s15, s15, s14
	return (uint16_t) thermXX_temp;
 8001798:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800179c:	ee17 2a90 	vmov	r2, s15
 80017a0:	801a      	strh	r2, [r3, #0]
}
 80017a2:	bd08      	pop	{r3, pc}
 80017a4:	f3af 8000 	nop.w
 80017a8:	00000000 	.word	0x00000000
 80017ac:	3fe9c800 	.word	0x3fe9c800
 80017b0:	eb1c432d 	.word	0xeb1c432d
 80017b4:	3f1a36e2 	.word	0x3f1a36e2
 80017b8:	b61eed1a 	.word	0xb61eed1a
 80017bc:	40270dbe 	.word	0x40270dbe
 80017c0:	200007c0 	.word	0x200007c0
 80017c4:	200008ce 	.word	0x200008ce
 80017c8:	3fb00000 	.word	0x3fb00000
 80017cc:	4b262b10 	.word	0x4b262b10
 80017d0:	454e4000 	.word	0x454e4000
 80017d4:	408f4000 	.word	0x408f4000
 80017d8:	4a51a7e0 	.word	0x4a51a7e0
 80017dc:	43888000 	.word	0x43888000
 80017e0:	20000788 	.word	0x20000788
 80017e4:	20000832 	.word	0x20000832

080017e8 <state406>:
{
 80017e8:	b508      	push	{r3, lr}
	if (RCM_GetUserConvState() == RCM_USERCONV_IDLE)
 80017ea:	f002 fa4d 	bl	8003c88 <RCM_GetUserConvState>
 80017ee:	b928      	cbnz	r0, 80017fc <state406+0x14>
		RCM_RequestUserConv(ThermAHHandle);
 80017f0:	4b33      	ldr	r3, [pc, #204]	; (80018c0 <state406+0xd8>)
 80017f2:	7818      	ldrb	r0, [r3, #0]
}
 80017f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		RCM_RequestUserConv(ThermAHHandle);
 80017f8:	f002 b9fc 	b.w	8003bf4 <RCM_RequestUserConv>
	else if (RCM_GetUserConvState() == RCM_USERCONV_EOC)
 80017fc:	f002 fa44 	bl	8003c88 <RCM_GetUserConvState>
 8001800:	2802      	cmp	r0, #2
 8001802:	d000      	beq.n	8001806 <state406+0x1e>
}
 8001804:	bd08      	pop	{r3, pc}
		thermAH_value = RCM_GetUserConv();
 8001806:	f002 fa05 	bl	8003c14 <RCM_GetUserConv>
 800180a:	4b2e      	ldr	r3, [pc, #184]	; (80018c4 <state406+0xdc>)
 800180c:	8018      	strh	r0, [r3, #0]
	thermXX_value = thermXX_value / 16.0; // Convert left-aligned to right-aligned (0-4096)
 800180e:	f7fe fea9 	bl	8000564 <__aeabi_i2d>
 8001812:	4b2d      	ldr	r3, [pc, #180]	; (80018c8 <state406+0xe0>)
 8001814:	2200      	movs	r2, #0
 8001816:	f7fe ff0f 	bl	8000638 <__aeabi_dmul>
 800181a:	f7ff f9e5 	bl	8000be8 <__aeabi_d2uiz>
	float thermXX_voltage = thermXX_value * 3300.0 / 4096.0; //Convert to mV (to avoid decimal places)
 800181e:	b280      	uxth	r0, r0
 8001820:	f7fe fea0 	bl	8000564 <__aeabi_i2d>
 8001824:	a320      	add	r3, pc, #128	; (adr r3, 80018a8 <state406+0xc0>)
 8001826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182a:	f7fe ff05 	bl	8000638 <__aeabi_dmul>
 800182e:	f7ff f9fb 	bl	8000c28 <__aeabi_d2f>
	float thermXX_resistance = 3300.0 * 3300 / thermXX_voltage;
 8001832:	eddf 6a26 	vldr	s13, [pc, #152]	; 80018cc <state406+0xe4>
	thermXX_resistance = thermXX_resistance - 3300;
 8001836:	eddf 7a26 	vldr	s15, [pc, #152]	; 80018d0 <state406+0xe8>
	float thermXX_resistance = 3300.0 * 3300 / thermXX_voltage;
 800183a:	ee07 0a10 	vmov	s14, r0
 800183e:	ee86 7a87 	vdiv.f32	s14, s13, s14
	float thermXX_temp = 1000.0*(log(thermXX_resistance / 10000.0) + (3435.0/298.0));
 8001842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001846:	ee17 0a90 	vmov	r0, s15
 800184a:	f7fe fe9d 	bl	8000588 <__aeabi_f2d>
 800184e:	a318      	add	r3, pc, #96	; (adr r3, 80018b0 <state406+0xc8>)
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	f7fe fef0 	bl	8000638 <__aeabi_dmul>
 8001858:	ec41 0b10 	vmov	d0, r0, r1
 800185c:	f007 fc38 	bl	80090d0 <log>
 8001860:	a315      	add	r3, pc, #84	; (adr r3, 80018b8 <state406+0xd0>)
 8001862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001866:	ec51 0b10 	vmov	r0, r1, d0
 800186a:	f7fe fd2f 	bl	80002cc <__adddf3>
 800186e:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <state406+0xec>)
 8001870:	2200      	movs	r2, #0
 8001872:	f7fe fee1 	bl	8000638 <__aeabi_dmul>
 8001876:	f7ff f9d7 	bl	8000c28 <__aeabi_d2f>
	thermXX_temp = 1000.0 * 3435.0 / thermXX_temp;
 800187a:	eddf 6a17 	vldr	s13, [pc, #92]	; 80018d8 <state406+0xf0>
	thermXX_temp = thermXX_temp - 273.0;
 800187e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80018dc <state406+0xf4>
		state = 407;
 8001882:	4a17      	ldr	r2, [pc, #92]	; (80018e0 <state406+0xf8>)
		thermAH_temp = convertTempVal(thermAH_value);
 8001884:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <state406+0xfc>)
	thermXX_temp = 1000.0 * 3435.0 / thermXX_temp;
 8001886:	ee07 0a90 	vmov	s15, r0
 800188a:	eec6 7aa7 	vdiv.f32	s15, s13, s15
		state = 407;
 800188e:	f240 1197 	movw	r1, #407	; 0x197
 8001892:	8011      	strh	r1, [r2, #0]
	thermXX_temp = thermXX_temp - 273.0;
 8001894:	ee77 7ac7 	vsub.f32	s15, s15, s14
	return (uint16_t) thermXX_temp;
 8001898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800189c:	ee17 2a90 	vmov	r2, s15
 80018a0:	801a      	strh	r2, [r3, #0]
}
 80018a2:	bd08      	pop	{r3, pc}
 80018a4:	f3af 8000 	nop.w
 80018a8:	00000000 	.word	0x00000000
 80018ac:	3fe9c800 	.word	0x3fe9c800
 80018b0:	eb1c432d 	.word	0xeb1c432d
 80018b4:	3f1a36e2 	.word	0x3f1a36e2
 80018b8:	b61eed1a 	.word	0xb61eed1a
 80018bc:	40270dbe 	.word	0x40270dbe
 80018c0:	200007d8 	.word	0x200007d8
 80018c4:	2000083c 	.word	0x2000083c
 80018c8:	3fb00000 	.word	0x3fb00000
 80018cc:	4b262b10 	.word	0x4b262b10
 80018d0:	454e4000 	.word	0x454e4000
 80018d4:	408f4000 	.word	0x408f4000
 80018d8:	4a51a7e0 	.word	0x4a51a7e0
 80018dc:	43888000 	.word	0x43888000
 80018e0:	20000788 	.word	0x20000788
 80018e4:	200008da 	.word	0x200008da

080018e8 <state499>:
{
 80018e8:	b538      	push	{r3, r4, r5, lr}
	sprintf(msg_debug, "State %hu\r\n", state);
 80018ea:	4c0d      	ldr	r4, [pc, #52]	; (8001920 <state499+0x38>)
 80018ec:	4d0d      	ldr	r5, [pc, #52]	; (8001924 <state499+0x3c>)
 80018ee:	490e      	ldr	r1, [pc, #56]	; (8001928 <state499+0x40>)
 80018f0:	882a      	ldrh	r2, [r5, #0]
 80018f2:	4620      	mov	r0, r4
 80018f4:	f006 ffbe 	bl	8008874 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80018f8:	4620      	mov	r0, r4
 80018fa:	f7fe fc89 	bl	8000210 <strlen>
 80018fe:	4621      	mov	r1, r4
 8001900:	b282      	uxth	r2, r0
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	4809      	ldr	r0, [pc, #36]	; (800192c <state499+0x44>)
 8001908:	f004 fffa 	bl	8006900 <HAL_UART_Transmit>
	state = 500;
 800190c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001910:	802b      	strh	r3, [r5, #0]
	HAL_Delay(1000);
 8001912:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 8001916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_Delay(1000);
 800191a:	f003 bacf 	b.w	8004ebc <HAL_Delay>
 800191e:	bf00      	nop
 8001920:	20000a0c 	.word	0x20000a0c
 8001924:	20000788 	.word	0x20000788
 8001928:	08009528 	.word	0x08009528
 800192c:	200009b4 	.word	0x200009b4

08001930 <state700>:
{
 8001930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sprintf(msg_debug, "State %hu\r\n", state);
 8001932:	4c19      	ldr	r4, [pc, #100]	; (8001998 <state700+0x68>)
 8001934:	4d19      	ldr	r5, [pc, #100]	; (800199c <state700+0x6c>)
 8001936:	491a      	ldr	r1, [pc, #104]	; (80019a0 <state700+0x70>)
 8001938:	882a      	ldrh	r2, [r5, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 800193a:	4e1a      	ldr	r6, [pc, #104]	; (80019a4 <state700+0x74>)
	sprintf(msg_debug, "State %hu\r\n", state);
 800193c:	4620      	mov	r0, r4
 800193e:	f006 ff99 	bl	8008874 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001942:	4620      	mov	r0, r4
 8001944:	f7fe fc64 	bl	8000210 <strlen>
 8001948:	f04f 33ff 	mov.w	r3, #4294967295
 800194c:	b282      	uxth	r2, r0
 800194e:	4621      	mov	r1, r4
 8001950:	4630      	mov	r0, r6
 8001952:	f004 ffd5 	bl	8006900 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(FLT_OUT_GPIO_Port, FLT_OUT_Pin, GPIO_PIN_SET); //Set FLT_OUT high
 8001956:	4814      	ldr	r0, [pc, #80]	; (80019a8 <state700+0x78>)
 8001958:	2201      	movs	r2, #1
 800195a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800195e:	f003 fed7 	bl	8005710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_DIS_GPIO_Port, DRV_DIS_Pin, GPIO_PIN_SET); //Set DRV_DIS high
 8001962:	4812      	ldr	r0, [pc, #72]	; (80019ac <state700+0x7c>)
 8001964:	2201      	movs	r2, #1
 8001966:	2102      	movs	r1, #2
 8001968:	f003 fed2 	bl	8005710 <HAL_GPIO_WritePin>
	sprintf(msg_debug, "Fault\n");
 800196c:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <state700+0x80>)
 800196e:	6818      	ldr	r0, [r3, #0]
 8001970:	889a      	ldrh	r2, [r3, #4]
 8001972:	799f      	ldrb	r7, [r3, #6]
 8001974:	6020      	str	r0, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
	sprintf(msg_debug, "Fault\n");
 800197a:	80a2      	strh	r2, [r4, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 800197c:	4621      	mov	r1, r4
 800197e:	2206      	movs	r2, #6
 8001980:	4630      	mov	r0, r6
	sprintf(msg_debug, "Fault\n");
 8001982:	71a7      	strb	r7, [r4, #6]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001984:	f004 ffbc 	bl	8006900 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001988:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800198c:	f003 fa96 	bl	8004ebc <HAL_Delay>
	state = 701;
 8001990:	f240 23bd 	movw	r3, #701	; 0x2bd
 8001994:	802b      	strh	r3, [r5, #0]
}
 8001996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001998:	20000a0c 	.word	0x20000a0c
 800199c:	20000788 	.word	0x20000788
 80019a0:	08009528 	.word	0x08009528
 80019a4:	200009b4 	.word	0x200009b4
 80019a8:	40020000 	.word	0x40020000
 80019ac:	40020400 	.word	0x40020400
 80019b0:	080095b4 	.word	0x080095b4

080019b4 <state701>:
{
 80019b4:	b538      	push	{r3, r4, r5, lr}
	sprintf(msg_debug, "State %hu\r\n", state);
 80019b6:	4c0c      	ldr	r4, [pc, #48]	; (80019e8 <state701+0x34>)
 80019b8:	4d0c      	ldr	r5, [pc, #48]	; (80019ec <state701+0x38>)
 80019ba:	490d      	ldr	r1, [pc, #52]	; (80019f0 <state701+0x3c>)
 80019bc:	882a      	ldrh	r2, [r5, #0]
 80019be:	4620      	mov	r0, r4
 80019c0:	f006 ff58 	bl	8008874 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80019c4:	4620      	mov	r0, r4
 80019c6:	f7fe fc23 	bl	8000210 <strlen>
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295
 80019ce:	b282      	uxth	r2, r0
 80019d0:	4621      	mov	r1, r4
 80019d2:	4808      	ldr	r0, [pc, #32]	; (80019f4 <state701+0x40>)
 80019d4:	f004 ff94 	bl	8006900 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80019d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019dc:	f003 fa6e 	bl	8004ebc <HAL_Delay>
	state = 702;
 80019e0:	f240 23be 	movw	r3, #702	; 0x2be
 80019e4:	802b      	strh	r3, [r5, #0]
}
 80019e6:	bd38      	pop	{r3, r4, r5, pc}
 80019e8:	20000a0c 	.word	0x20000a0c
 80019ec:	20000788 	.word	0x20000788
 80019f0:	08009528 	.word	0x08009528
 80019f4:	200009b4 	.word	0x200009b4

080019f8 <state702>:
{
 80019f8:	b538      	push	{r3, r4, r5, lr}
	sprintf(msg_debug, "State %hu\r\n", state);
 80019fa:	4c0c      	ldr	r4, [pc, #48]	; (8001a2c <state702+0x34>)
 80019fc:	4d0c      	ldr	r5, [pc, #48]	; (8001a30 <state702+0x38>)
 80019fe:	490d      	ldr	r1, [pc, #52]	; (8001a34 <state702+0x3c>)
 8001a00:	882a      	ldrh	r2, [r5, #0]
 8001a02:	4620      	mov	r0, r4
 8001a04:	f006 ff36 	bl	8008874 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f7fe fc01 	bl	8000210 <strlen>
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a12:	b282      	uxth	r2, r0
 8001a14:	4621      	mov	r1, r4
 8001a16:	4808      	ldr	r0, [pc, #32]	; (8001a38 <state702+0x40>)
 8001a18:	f004 ff72 	bl	8006900 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001a1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a20:	f003 fa4c 	bl	8004ebc <HAL_Delay>
	state = 703;
 8001a24:	f240 23bf 	movw	r3, #703	; 0x2bf
 8001a28:	802b      	strh	r3, [r5, #0]
}
 8001a2a:	bd38      	pop	{r3, r4, r5, pc}
 8001a2c:	20000a0c 	.word	0x20000a0c
 8001a30:	20000788 	.word	0x20000788
 8001a34:	08009528 	.word	0x08009528
 8001a38:	200009b4 	.word	0x200009b4

08001a3c <state703>:
{
 8001a3c:	b538      	push	{r3, r4, r5, lr}
	sprintf(msg_debug, "State %hu\r\n", state);
 8001a3e:	4c0c      	ldr	r4, [pc, #48]	; (8001a70 <state703+0x34>)
 8001a40:	4d0c      	ldr	r5, [pc, #48]	; (8001a74 <state703+0x38>)
 8001a42:	490d      	ldr	r1, [pc, #52]	; (8001a78 <state703+0x3c>)
 8001a44:	882a      	ldrh	r2, [r5, #0]
 8001a46:	4620      	mov	r0, r4
 8001a48:	f006 ff14 	bl	8008874 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	f7fe fbdf 	bl	8000210 <strlen>
 8001a52:	f04f 33ff 	mov.w	r3, #4294967295
 8001a56:	b282      	uxth	r2, r0
 8001a58:	4621      	mov	r1, r4
 8001a5a:	4808      	ldr	r0, [pc, #32]	; (8001a7c <state703+0x40>)
 8001a5c:	f004 ff50 	bl	8006900 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001a60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a64:	f003 fa2a 	bl	8004ebc <HAL_Delay>
	state = 704;
 8001a68:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001a6c:	802b      	strh	r3, [r5, #0]
}
 8001a6e:	bd38      	pop	{r3, r4, r5, pc}
 8001a70:	20000a0c 	.word	0x20000a0c
 8001a74:	20000788 	.word	0x20000788
 8001a78:	08009528 	.word	0x08009528
 8001a7c:	200009b4 	.word	0x200009b4

08001a80 <state705>:
{
 8001a80:	b538      	push	{r3, r4, r5, lr}
	sprintf(msg_debug, "State %hu\r\n", state);
 8001a82:	4c0c      	ldr	r4, [pc, #48]	; (8001ab4 <state705+0x34>)
 8001a84:	4d0c      	ldr	r5, [pc, #48]	; (8001ab8 <state705+0x38>)
 8001a86:	490d      	ldr	r1, [pc, #52]	; (8001abc <state705+0x3c>)
 8001a88:	882a      	ldrh	r2, [r5, #0]
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	f006 fef2 	bl	8008874 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001a90:	4620      	mov	r0, r4
 8001a92:	f7fe fbbd 	bl	8000210 <strlen>
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9a:	b282      	uxth	r2, r0
 8001a9c:	4621      	mov	r1, r4
 8001a9e:	4808      	ldr	r0, [pc, #32]	; (8001ac0 <state705+0x40>)
 8001aa0:	f004 ff2e 	bl	8006900 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001aa4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aa8:	f003 fa08 	bl	8004ebc <HAL_Delay>
	state = 705;
 8001aac:	f240 23c1 	movw	r3, #705	; 0x2c1
 8001ab0:	802b      	strh	r3, [r5, #0]
}
 8001ab2:	bd38      	pop	{r3, r4, r5, pc}
 8001ab4:	20000a0c 	.word	0x20000a0c
 8001ab8:	20000788 	.word	0x20000788
 8001abc:	08009528 	.word	0x08009528
 8001ac0:	200009b4 	.word	0x200009b4

08001ac4 <state706>:
{
 8001ac4:	b538      	push	{r3, r4, r5, lr}
	sprintf(msg_debug, "State %hu\r\n", state);
 8001ac6:	4c0c      	ldr	r4, [pc, #48]	; (8001af8 <state706+0x34>)
 8001ac8:	4d0c      	ldr	r5, [pc, #48]	; (8001afc <state706+0x38>)
 8001aca:	490d      	ldr	r1, [pc, #52]	; (8001b00 <state706+0x3c>)
 8001acc:	882a      	ldrh	r2, [r5, #0]
 8001ace:	4620      	mov	r0, r4
 8001ad0:	f006 fed0 	bl	8008874 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	f7fe fb9b 	bl	8000210 <strlen>
 8001ada:	f04f 33ff 	mov.w	r3, #4294967295
 8001ade:	b282      	uxth	r2, r0
 8001ae0:	4621      	mov	r1, r4
 8001ae2:	4808      	ldr	r0, [pc, #32]	; (8001b04 <state706+0x40>)
 8001ae4:	f004 ff0c 	bl	8006900 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001ae8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aec:	f003 f9e6 	bl	8004ebc <HAL_Delay>
	state = 706;
 8001af0:	f240 23c2 	movw	r3, #706	; 0x2c2
 8001af4:	802b      	strh	r3, [r5, #0]
}
 8001af6:	bd38      	pop	{r3, r4, r5, pc}
 8001af8:	20000a0c 	.word	0x20000a0c
 8001afc:	20000788 	.word	0x20000788
 8001b00:	08009528 	.word	0x08009528
 8001b04:	200009b4 	.word	0x200009b4

08001b08 <state799>:
{
 8001b08:	b508      	push	{r3, lr}
	sprintf(msg_debug, "State %hu\r\n", state);
 8001b0a:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <state799+0x24>)
 8001b0c:	4908      	ldr	r1, [pc, #32]	; (8001b30 <state799+0x28>)
 8001b0e:	881a      	ldrh	r2, [r3, #0]
 8001b10:	4808      	ldr	r0, [pc, #32]	; (8001b34 <state799+0x2c>)
 8001b12:	f006 feaf 	bl	8008874 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001b16:	4807      	ldr	r0, [pc, #28]	; (8001b34 <state799+0x2c>)
 8001b18:	f7fe fb7a 	bl	8000210 <strlen>
 8001b1c:	4905      	ldr	r1, [pc, #20]	; (8001b34 <state799+0x2c>)
 8001b1e:	b282      	uxth	r2, r0
 8001b20:	f04f 33ff 	mov.w	r3, #4294967295
 8001b24:	4804      	ldr	r0, [pc, #16]	; (8001b38 <state799+0x30>)
 8001b26:	f004 feeb 	bl	8006900 <HAL_UART_Transmit>
	while(1) {};
 8001b2a:	e7fe      	b.n	8001b2a <state799+0x22>
 8001b2c:	20000788 	.word	0x20000788
 8001b30:	08009528 	.word	0x08009528
 8001b34:	20000a0c 	.word	0x20000a0c
 8001b38:	200009b4 	.word	0x200009b4

08001b3c <printState>:
{
 8001b3c:	b510      	push	{r4, lr}
	sprintf(msg_debug, "State %hu\r\n", state);
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <printState+0x30>)
 8001b40:	4c0b      	ldr	r4, [pc, #44]	; (8001b70 <printState+0x34>)
 8001b42:	881a      	ldrh	r2, [r3, #0]
 8001b44:	490b      	ldr	r1, [pc, #44]	; (8001b74 <printState+0x38>)
 8001b46:	4620      	mov	r0, r4
 8001b48:	f006 fe94 	bl	8008874 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	f7fe fb5f 	bl	8000210 <strlen>
 8001b52:	4621      	mov	r1, r4
 8001b54:	b282      	uxth	r2, r0
 8001b56:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5a:	4807      	ldr	r0, [pc, #28]	; (8001b78 <printState+0x3c>)
 8001b5c:	f004 fed0 	bl	8006900 <HAL_UART_Transmit>
}
 8001b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(100);
 8001b64:	2064      	movs	r0, #100	; 0x64
 8001b66:	f003 b9a9 	b.w	8004ebc <HAL_Delay>
 8001b6a:	bf00      	nop
 8001b6c:	20000788 	.word	0x20000788
 8001b70:	20000a0c 	.word	0x20000a0c
 8001b74:	08009528 	.word	0x08009528
 8001b78:	200009b4 	.word	0x200009b4

08001b7c <main>:
{
 8001b7c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
	Pot1Conv.regADC = ADC1; /* to be modify to match your ADC */
 8001b80:	48b1      	ldr	r0, [pc, #708]	; (8001e48 <main+0x2cc>)
 8001b82:	4eb2      	ldr	r6, [pc, #712]	; (8001e4c <main+0x2d0>)
 8001b84:	6006      	str	r6, [r0, #0]
{
 8001b86:	b09d      	sub	sp, #116	; 0x74
	Pot1Conv.samplingTime = ADC_SAMPLETIME_3CYCLES; /* to be modify to match your sampling time */
 8001b88:	2400      	movs	r4, #0
	Pot1Conv.channel = ADC_CHANNEL_8;/* to be modify to match your ADC channel */
 8001b8a:	2308      	movs	r3, #8
 8001b8c:	7103      	strb	r3, [r0, #4]
	Pot1Conv.samplingTime = ADC_SAMPLETIME_3CYCLES; /* to be modify to match your sampling time */
 8001b8e:	6084      	str	r4, [r0, #8]
	Pot1Handle = RCM_RegisterRegConv (&Pot1Conv);
 8001b90:	f001 ff24 	bl	80039dc <RCM_RegisterRegConv>
 8001b94:	4bae      	ldr	r3, [pc, #696]	; (8001e50 <main+0x2d4>)
  hadc1.Instance = ADC1;
 8001b96:	4daf      	ldr	r5, [pc, #700]	; (8001e54 <main+0x2d8>)
	Pot1Handle = RCM_RegisterRegConv (&Pot1Conv);
 8001b98:	4602      	mov	r2, r0
	Pot2Conv.regADC = ADC1; /* to be modify to match your ADC */
 8001b9a:	48af      	ldr	r0, [pc, #700]	; (8001e58 <main+0x2dc>)
	Pot1Handle = RCM_RegisterRegConv (&Pot1Conv);
 8001b9c:	701a      	strb	r2, [r3, #0]
	Pot2Conv.regADC = ADC1; /* to be modify to match your ADC */
 8001b9e:	6006      	str	r6, [r0, #0]
	Pot2Conv.channel = ADC_CHANNEL_0;/* to be modify to match your ADC channel */
 8001ba0:	7104      	strb	r4, [r0, #4]
	Pot2Conv.samplingTime = ADC_SAMPLETIME_3CYCLES; /* to be modify to match your sampling time */
 8001ba2:	6084      	str	r4, [r0, #8]
	Pot2Handle = RCM_RegisterRegConv (&Pot2Conv);
 8001ba4:	f001 ff1a 	bl	80039dc <RCM_RegisterRegConv>
 8001ba8:	4aac      	ldr	r2, [pc, #688]	; (8001e5c <main+0x2e0>)
 8001baa:	4601      	mov	r1, r0
	ThermAHConv.regADC = ADC1; /* to be modify to match your ADC */
 8001bac:	48ac      	ldr	r0, [pc, #688]	; (8001e60 <main+0x2e4>)
	Pot2Handle = RCM_RegisterRegConv (&Pot2Conv);
 8001bae:	7011      	strb	r1, [r2, #0]
	ThermAHConv.channel = ADC_CHANNEL_12;/* to be modify to match your ADC channel */
 8001bb0:	230c      	movs	r3, #12
 8001bb2:	7103      	strb	r3, [r0, #4]
	ThermAHConv.regADC = ADC1; /* to be modify to match your ADC */
 8001bb4:	6006      	str	r6, [r0, #0]
	ThermAHConv.samplingTime = ADC_SAMPLETIME_3CYCLES; /* to be modify to match your sampling time */
 8001bb6:	6084      	str	r4, [r0, #8]
	ThermAHHandle = RCM_RegisterRegConv (&ThermAHConv);
 8001bb8:	f001 ff10 	bl	80039dc <RCM_RegisterRegConv>
 8001bbc:	4ba9      	ldr	r3, [pc, #676]	; (8001e64 <main+0x2e8>)
 8001bbe:	7018      	strb	r0, [r3, #0]
  HAL_Init();
 8001bc0:	f003 f950 	bl	8004e64 <HAL_Init>
  SystemClock_Config();
 8001bc4:	f7ff fa4a 	bl	800105c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
 8001bcc:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bd0:	4ba5      	ldr	r3, [pc, #660]	; (8001e68 <main+0x2ec>)
 8001bd2:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	9414      	str	r4, [sp, #80]	; 0x50
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(DRV_DIS_GPIO_Port, DRV_DIS_Pin, GPIO_PIN_RESET);
 8001bd8:	48a4      	ldr	r0, [pc, #656]	; (8001e6c <main+0x2f0>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bde:	631a      	str	r2, [r3, #48]	; 0x30
 8001be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001be2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001be6:	9200      	str	r2, [sp, #0]
 8001be8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bea:	9401      	str	r4, [sp, #4]
 8001bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bee:	f042 0204 	orr.w	r2, r2, #4
 8001bf2:	631a      	str	r2, [r3, #48]	; 0x30
 8001bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bf6:	f002 0204 	and.w	r2, r2, #4
 8001bfa:	9201      	str	r2, [sp, #4]
 8001bfc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	9402      	str	r4, [sp, #8]
 8001c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c02:	f042 0201 	orr.w	r2, r2, #1
 8001c06:	631a      	str	r2, [r3, #48]	; 0x30
 8001c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c0a:	f002 0201 	and.w	r2, r2, #1
 8001c0e:	9202      	str	r2, [sp, #8]
 8001c10:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c12:	9403      	str	r4, [sp, #12]
 8001c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c16:	f042 0202 	orr.w	r2, r2, #2
 8001c1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(DRV_DIS_GPIO_Port, DRV_DIS_Pin, GPIO_PIN_RESET);
 8001c24:	4622      	mov	r2, r4
 8001c26:	2102      	movs	r1, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c28:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(DRV_DIS_GPIO_Port, DRV_DIS_Pin, GPIO_PIN_RESET);
 8001c2a:	f003 fd71 	bl	8005710 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLT_OUT_GPIO_Port, FLT_OUT_Pin, GPIO_PIN_RESET);
 8001c2e:	4890      	ldr	r0, [pc, #576]	; (8001e70 <main+0x2f4>)
 8001c30:	4622      	mov	r2, r4
 8001c32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c36:	f003 fd6b 	bl	8005710 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIO_OUT_GPIO_Port, GPIO_OUT_Pin, GPIO_PIN_RESET);
 8001c3a:	488e      	ldr	r0, [pc, #568]	; (8001e74 <main+0x2f8>)
 8001c3c:	4622      	mov	r2, r4
 8001c3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c42:	f003 fd65 	bl	8005710 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = DRV_DIS_Pin;
 8001c46:	f04f 0800 	mov.w	r8, #0
 8001c4a:	f04f 0900 	mov.w	r9, #0
 8001c4e:	2202      	movs	r2, #2
 8001c50:	2301      	movs	r3, #1
  HAL_GPIO_Init(DRV_DIS_GPIO_Port, &GPIO_InitStruct);
 8001c52:	4886      	ldr	r0, [pc, #536]	; (8001e6c <main+0x2f0>)
 8001c54:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Pin = DRV_DIS_Pin;
 8001c56:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8001c5a:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(DRV_DIS_GPIO_Port, &GPIO_InitStruct);
 8001c5e:	f003 fc4b 	bl	80054f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MTR_OC_Pin|HV_OV_Pin;
 8001c62:	f44f 5282 	mov.w	r2, #4160	; 0x1040
 8001c66:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c68:	4880      	ldr	r0, [pc, #512]	; (8001e6c <main+0x2f0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6c:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Pin = MTR_OC_Pin|HV_OV_Pin;
 8001c6e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c72:	f003 fc41 	bl	80054f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FET_OT_Pin;
 8001c76:	2280      	movs	r2, #128	; 0x80
 8001c78:	2300      	movs	r3, #0
  HAL_GPIO_Init(FET_OT_GPIO_Port, &GPIO_InitStruct);
 8001c7a:	487e      	ldr	r0, [pc, #504]	; (8001e74 <main+0x2f8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(FET_OT_GPIO_Port, &GPIO_InitStruct);
 8001c7e:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Pin = FET_OT_Pin;
 8001c80:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  HAL_GPIO_Init(FET_OT_GPIO_Port, &GPIO_InitStruct);
 8001c84:	f003 fc38 	bl	80054f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MTR_OT_Pin;
 8001c88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c8c:	2300      	movs	r3, #0
  HAL_GPIO_Init(MTR_OT_GPIO_Port, &GPIO_InitStruct);
 8001c8e:	4878      	ldr	r0, [pc, #480]	; (8001e70 <main+0x2f4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(MTR_OT_GPIO_Port, &GPIO_InitStruct);
 8001c92:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Pin = MTR_OT_Pin;
 8001c94:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  HAL_GPIO_Init(MTR_OT_GPIO_Port, &GPIO_InitStruct);
 8001c98:	f003 fc2e 	bl	80054f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FLT_OUT_Pin;
 8001c9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ca0:	2301      	movs	r3, #1
  HAL_GPIO_Init(FLT_OUT_GPIO_Port, &GPIO_InitStruct);
 8001ca2:	4873      	ldr	r0, [pc, #460]	; (8001e70 <main+0x2f4>)
 8001ca4:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Pin = FLT_OUT_Pin;
 8001ca6:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
 8001caa:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001cae:	2720      	movs	r7, #32
  HAL_GPIO_Init(FLT_OUT_GPIO_Port, &GPIO_InitStruct);
 8001cb0:	f003 fc22 	bl	80054f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_OUT_Pin;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
  HAL_GPIO_Init(GPIO_OUT_GPIO_Port, &GPIO_InitStruct);
 8001cba:	486e      	ldr	r0, [pc, #440]	; (8001e74 <main+0x2f8>)
 8001cbc:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Pin = GPIO_OUT_Pin;
 8001cbe:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8001cc2:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIO_OUT_GPIO_Port, &GPIO_InitStruct);
 8001cc6:	f003 fc17 	bl	80054f8 <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001cca:	4621      	mov	r1, r4
 8001ccc:	a814      	add	r0, sp, #80	; 0x50
 8001cce:	463a      	mov	r2, r7
 8001cd0:	f006 fdc8 	bl	8008864 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001cd4:	f44f 3980 	mov.w	r9, #65536	; 0x10000
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cd8:	4b67      	ldr	r3, [pc, #412]	; (8001e78 <main+0x2fc>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8001cda:	940c      	str	r4, [sp, #48]	; 0x30
  hadc1.Init.ScanConvMode = ENABLE;
 8001cdc:	f04f 0a01 	mov.w	sl, #1
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001ce0:	f44f 6800 	mov.w	r8, #2048	; 0x800
  hadc1.Init.NbrOfConversion = 2;
 8001ce4:	f04f 0b02 	mov.w	fp, #2
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ce8:	4628      	mov	r0, r5
  ADC_ChannelConfTypeDef sConfig = {0};
 8001cea:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cee:	e9c5 aa04 	strd	sl, sl, [r5, #16]
  hadc1.Instance = ADC1;
 8001cf2:	602e      	str	r6, [r5, #0]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cf4:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001cf6:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cf8:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cfc:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001cfe:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d02:	940f      	str	r4, [sp, #60]	; 0x3c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d04:	f8c5 9004 	str.w	r9, [r5, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d08:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001d0a:	f8c5 800c 	str.w	r8, [r5, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001d0e:	f8c5 b01c 	str.w	fp, [r5, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d12:	f003 f8e5 	bl	8004ee0 <HAL_ADC_Init>
 8001d16:	b108      	cbz	r0, 8001d1c <main+0x1a0>
 8001d18:	b672      	cpsid	i
  while (1)
 8001d1a:	e7fe      	b.n	8001d1a <main+0x19e>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 8001d22:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001d26:	2301      	movs	r3, #1
 8001d28:	2401      	movs	r4, #1
 8001d2a:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
 8001d2e:	4602      	mov	r2, r0
 8001d30:	2301      	movs	r3, #1
 8001d32:	2400      	movs	r4, #0
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001d34:	a914      	add	r1, sp, #80	; 0x50
 8001d36:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001d38:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001d3c:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001d40:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001d44:	f003 fa34 	bl	80051b0 <HAL_ADCEx_InjectedConfigChannel>
 8001d48:	b108      	cbz	r0, 8001d4e <main+0x1d2>
 8001d4a:	b672      	cpsid	i
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <main+0x1d0>
  sConfig.Channel = ADC_CHANNEL_15;
 8001d4e:	220f      	movs	r2, #15
 8001d50:	2301      	movs	r3, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d52:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d54:	a90c      	add	r1, sp, #48	; 0x30
 8001d56:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_15;
 8001d58:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d5c:	f003 f96e 	bl	800503c <HAL_ADC_ConfigChannel>
 8001d60:	b108      	cbz	r0, 8001d66 <main+0x1ea>
 8001d62:	b672      	cpsid	i
  while (1)
 8001d64:	e7fe      	b.n	8001d64 <main+0x1e8>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d66:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_14;
 8001d68:	240e      	movs	r4, #14
 8001d6a:	2502      	movs	r5, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d6c:	a90c      	add	r1, sp, #48	; 0x30
  sConfig.Channel = ADC_CHANNEL_14;
 8001d6e:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001d72:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d76:	f003 f961 	bl	800503c <HAL_ADC_ConfigChannel>
 8001d7a:	4605      	mov	r5, r0
 8001d7c:	b108      	cbz	r0, 8001d82 <main+0x206>
 8001d7e:	b672      	cpsid	i
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <main+0x204>
  hadc2.Instance = ADC2;
 8001d82:	4c3e      	ldr	r4, [pc, #248]	; (8001e7c <main+0x300>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001d84:	4601      	mov	r1, r0
 8001d86:	463a      	mov	r2, r7
 8001d88:	a814      	add	r0, sp, #80	; 0x50
 8001d8a:	f006 fd6b 	bl	8008864 <memset>
  hadc2.Instance = ADC2;
 8001d8e:	4a3c      	ldr	r2, [pc, #240]	; (8001e80 <main+0x304>)
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d90:	4b39      	ldr	r3, [pc, #228]	; (8001e78 <main+0x2fc>)
  hadc2.Instance = ADC2;
 8001d92:	6022      	str	r2, [r4, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001d94:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d96:	e9cd 550d 	strd	r5, r5, [sp, #52]	; 0x34
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001d9a:	e9c4 9501 	strd	r9, r5, [r4, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d9e:	950c      	str	r5, [sp, #48]	; 0x30
 8001da0:	950f      	str	r5, [sp, #60]	; 0x3c
  hadc2.Init.ScanConvMode = ENABLE;
 8001da2:	f8c4 a010 	str.w	sl, [r4, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001da6:	7625      	strb	r5, [r4, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001da8:	f884 5020 	strb.w	r5, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001dac:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dae:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001db0:	f8c4 800c 	str.w	r8, [r4, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001db4:	f8c4 a01c 	str.w	sl, [r4, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001db8:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001dbc:	f8c4 a014 	str.w	sl, [r4, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001dc0:	f003 f88e 	bl	8004ee0 <HAL_ADC_Init>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	b108      	cbz	r0, 8001dcc <main+0x250>
 8001dc8:	b672      	cpsid	i
  while (1)
 8001dca:	e7fe      	b.n	8001dca <main+0x24e>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8001dcc:	2500      	movs	r5, #0
 8001dce:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8001dd2:	e9cd 561a 	strd	r5, r6, [sp, #104]	; 0x68
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8001dd6:	f04f 0804 	mov.w	r8, #4
 8001dda:	2501      	movs	r5, #1
 8001ddc:	2600      	movs	r6, #0
 8001dde:	f04f 0901 	mov.w	r9, #1
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001de2:	a914      	add	r1, sp, #80	; 0x50
 8001de4:	4620      	mov	r0, r4
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8001de6:	e9cd 5616 	strd	r5, r6, [sp, #88]	; 0x58
 8001dea:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001dee:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001df2:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001df6:	f003 f9db 	bl	80051b0 <HAL_ADCEx_InjectedConfigChannel>
 8001dfa:	b108      	cbz	r0, 8001e00 <main+0x284>
 8001dfc:	b672      	cpsid	i
  while (1)
 8001dfe:	e7fe      	b.n	8001dfe <main+0x282>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001e00:	4620      	mov	r0, r4
 8001e02:	a90c      	add	r1, sp, #48	; 0x30
  sConfig.Channel = ADC_CHANNEL_4;
 8001e04:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001e08:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001e0c:	f003 f916 	bl	800503c <HAL_ADC_ConfigChannel>
 8001e10:	b108      	cbz	r0, 8001e16 <main+0x29a>
 8001e12:	b672      	cpsid	i
  while (1)
 8001e14:	e7fe      	b.n	8001e14 <main+0x298>
  hdac.Instance = DAC;
 8001e16:	4c1b      	ldr	r4, [pc, #108]	; (8001e84 <main+0x308>)
 8001e18:	4a1b      	ldr	r2, [pc, #108]	; (8001e88 <main+0x30c>)
 8001e1a:	6022      	str	r2, [r4, #0]
  DAC_ChannelConfTypeDef sConfig = {0};
 8001e1c:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001e20:	4620      	mov	r0, r4
 8001e22:	f003 fb2b 	bl	800547c <HAL_DAC_Init>
 8001e26:	b108      	cbz	r0, 8001e2c <main+0x2b0>
 8001e28:	b672      	cpsid	i
  while (1)
 8001e2a:	e7fe      	b.n	8001e2a <main+0x2ae>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001e2c:	4620      	mov	r0, r4
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001e2e:	2502      	movs	r5, #2
 8001e30:	243c      	movs	r4, #60	; 0x3c
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001e32:	2210      	movs	r2, #16
 8001e34:	a914      	add	r1, sp, #80	; 0x50
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001e36:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001e3a:	f003 fb35 	bl	80054a8 <HAL_DAC_ConfigChannel>
 8001e3e:	4604      	mov	r4, r0
 8001e40:	b320      	cbz	r0, 8001e8c <main+0x310>
 8001e42:	b672      	cpsid	i
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <main+0x2c8>
 8001e46:	bf00      	nop
 8001e48:	200008f0 	.word	0x200008f0
 8001e4c:	40012000 	.word	0x40012000
 8001e50:	200008d8 	.word	0x200008d8
 8001e54:	20000884 	.word	0x20000884
 8001e58:	20000878 	.word	0x20000878
 8001e5c:	20000a06 	.word	0x20000a06
 8001e60:	2000086c 	.word	0x2000086c
 8001e64:	200007d8 	.word	0x200007d8
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40020400 	.word	0x40020400
 8001e70:	40020000 	.word	0x40020000
 8001e74:	40020800 	.word	0x40020800
 8001e78:	0f000001 	.word	0x0f000001
 8001e7c:	200007e0 	.word	0x200007e0
 8001e80:	40012100 	.word	0x40012100
 8001e84:	200008dc 	.word	0x200008dc
 8001e88:	40007400 	.word	0x40007400
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e8c:	4601      	mov	r1, r0
 8001e8e:	463a      	mov	r2, r7
 8001e90:	a814      	add	r0, sp, #80	; 0x50
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e92:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8001e96:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8001e9a:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001e9e:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8001ea2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8001ea6:	9406      	str	r4, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea8:	9404      	str	r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eaa:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eac:	9405      	str	r4, [sp, #20]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001eae:	f006 fcd9 	bl	8008864 <memset>
  htim1.Instance = TIM1;
 8001eb2:	48ac      	ldr	r0, [pc, #688]	; (8002164 <main+0x5e8>)
 8001eb4:	4dac      	ldr	r5, [pc, #688]	; (8002168 <main+0x5ec>)
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8001eb6:	6044      	str	r4, [r0, #4]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8001eb8:	f241 1194 	movw	r1, #4500	; 0x1194
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001ebc:	f44f 7280 	mov.w	r2, #256	; 0x100
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec0:	e9c0 a405 	strd	sl, r4, [r0, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001ec4:	e9c0 1203 	strd	r1, r2, [r0, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001ec8:	6087      	str	r7, [r0, #8]
  htim1.Instance = TIM1;
 8001eca:	6005      	str	r5, [r0, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ecc:	f003 ff88 	bl	8005de0 <HAL_TIM_Base_Init>
 8001ed0:	b108      	cbz	r0, 8001ed6 <main+0x35a>
 8001ed2:	b672      	cpsid	i
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <main+0x358>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ed6:	48a3      	ldr	r0, [pc, #652]	; (8002164 <main+0x5e8>)
 8001ed8:	f004 f812 	bl	8005f00 <HAL_TIM_PWM_Init>
 8001edc:	b108      	cbz	r0, 8001ee2 <main+0x366>
 8001ede:	b672      	cpsid	i
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <main+0x364>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001ee2:	2206      	movs	r2, #6
 8001ee4:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001ee6:	489f      	ldr	r0, [pc, #636]	; (8002164 <main+0x5e8>)
 8001ee8:	a906      	add	r1, sp, #24
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001eea:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001eee:	f004 fa4f 	bl	8006390 <HAL_TIM_SlaveConfigSynchro>
 8001ef2:	b108      	cbz	r0, 8001ef8 <main+0x37c>
 8001ef4:	b672      	cpsid	i
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <main+0x37a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ef8:	2220      	movs	r2, #32
 8001efa:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001efc:	4899      	ldr	r0, [pc, #612]	; (8002164 <main+0x5e8>)
 8001efe:	a904      	add	r1, sp, #16
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f00:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f04:	f004 fbf4 	bl	80066f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f08:	b108      	cbz	r0, 8001f0e <main+0x392>
 8001f0a:	b672      	cpsid	i
  while (1)
 8001f0c:	e7fe      	b.n	8001f0c <main+0x390>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f0e:	2460      	movs	r4, #96	; 0x60
 8001f10:	2500      	movs	r5, #0
 8001f12:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f16:	4602      	mov	r2, r0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f18:	2400      	movs	r4, #0
 8001f1a:	2500      	movs	r5, #0
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f1c:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f1e:	a90c      	add	r1, sp, #48	; 0x30
 8001f20:	4890      	ldr	r0, [pc, #576]	; (8002164 <main+0x5e8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f22:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8001f26:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f2a:	f004 f877 	bl	800601c <HAL_TIM_PWM_ConfigChannel>
 8001f2e:	b108      	cbz	r0, 8001f34 <main+0x3b8>
 8001f30:	b672      	cpsid	i
  while (1)
 8001f32:	e7fe      	b.n	8001f32 <main+0x3b6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f34:	488b      	ldr	r0, [pc, #556]	; (8002164 <main+0x5e8>)
 8001f36:	2204      	movs	r2, #4
 8001f38:	a90c      	add	r1, sp, #48	; 0x30
 8001f3a:	f004 f86f 	bl	800601c <HAL_TIM_PWM_ConfigChannel>
 8001f3e:	b108      	cbz	r0, 8001f44 <main+0x3c8>
 8001f40:	b672      	cpsid	i
  while (1)
 8001f42:	e7fe      	b.n	8001f42 <main+0x3c6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f44:	4887      	ldr	r0, [pc, #540]	; (8002164 <main+0x5e8>)
 8001f46:	2208      	movs	r2, #8
 8001f48:	a90c      	add	r1, sp, #48	; 0x30
 8001f4a:	f004 f867 	bl	800601c <HAL_TIM_PWM_ConfigChannel>
 8001f4e:	b108      	cbz	r0, 8001f54 <main+0x3d8>
 8001f50:	b672      	cpsid	i
  while (1)
 8001f52:	e7fe      	b.n	8001f52 <main+0x3d6>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001f54:	2470      	movs	r4, #112	; 0x70
 8001f56:	f241 1593 	movw	r5, #4499	; 0x1193
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f5a:	4882      	ldr	r0, [pc, #520]	; (8002164 <main+0x5e8>)
 8001f5c:	220c      	movs	r2, #12
 8001f5e:	a90c      	add	r1, sp, #48	; 0x30
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001f60:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f64:	f004 f85a 	bl	800601c <HAL_TIM_PWM_ConfigChannel>
 8001f68:	b108      	cbz	r0, 8001f6e <main+0x3f2>
 8001f6a:	b672      	cpsid	i
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <main+0x3f0>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001f6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f76:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8001f7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f7e:	2348      	movs	r3, #72	; 0x48
 8001f80:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f84:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001f86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f8e:	4875      	ldr	r0, [pc, #468]	; (8002164 <main+0x5e8>)
 8001f90:	a914      	add	r1, sp, #80	; 0x50
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001f92:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f96:	f004 fbed 	bl	8006774 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f9a:	4604      	mov	r4, r0
 8001f9c:	b108      	cbz	r0, 8001fa2 <main+0x426>
 8001f9e:	b672      	cpsid	i
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <main+0x424>
  htim2.Instance = TIM2;
 8001fa2:	4d72      	ldr	r5, [pc, #456]	; (800216c <main+0x5f0>)
  HAL_TIM_MspPostInit(&htim1);
 8001fa4:	486f      	ldr	r0, [pc, #444]	; (8002164 <main+0x5e8>)
 8001fa6:	f001 ffc7 	bl	8003f38 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8001faa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fae:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fb0:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 8001fb4:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001fb8:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8001fbc:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc0:	e9cd 4406 	strd	r4, r4, [sp, #24]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc4:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc8:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fca:	61ac      	str	r4, [r5, #24]
  htim2.Instance = TIM2;
 8001fcc:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fce:	f003 ff07 	bl	8005de0 <HAL_TIM_Base_Init>
 8001fd2:	b108      	cbz	r0, 8001fd8 <main+0x45c>
 8001fd4:	b672      	cpsid	i
  while (1)
 8001fd6:	e7fe      	b.n	8001fd6 <main+0x45a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fdc:	a914      	add	r1, sp, #80	; 0x50
 8001fde:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fe0:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fe2:	f004 f931 	bl	8006248 <HAL_TIM_ConfigClockSource>
 8001fe6:	b108      	cbz	r0, 8001fec <main+0x470>
 8001fe8:	b672      	cpsid	i
  while (1)
 8001fea:	e7fe      	b.n	8001fea <main+0x46e>
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fec:	2200      	movs	r2, #0
 8001fee:	2300      	movs	r3, #0
  sConfig.Commutation_Delay = 0;
 8001ff0:	2400      	movs	r4, #0
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8001ff2:	485e      	ldr	r0, [pc, #376]	; (800216c <main+0x5f0>)
  sConfig.Commutation_Delay = 0;
 8001ff4:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8001ff6:	a90c      	add	r1, sp, #48	; 0x30
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ff8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8001ffc:	f004 fb14 	bl	8006628 <HAL_TIMEx_HallSensor_Init>
 8002000:	b108      	cbz	r0, 8002006 <main+0x48a>
 8002002:	b672      	cpsid	i
  while (1)
 8002004:	e7fe      	b.n	8002004 <main+0x488>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8002006:	2250      	movs	r2, #80	; 0x50
 8002008:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800200a:	4858      	ldr	r0, [pc, #352]	; (800216c <main+0x5f0>)
 800200c:	a906      	add	r1, sp, #24
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800200e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002012:	f004 fb6d 	bl	80066f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002016:	4602      	mov	r2, r0
 8002018:	b108      	cbz	r0, 800201e <main+0x4a2>
 800201a:	b672      	cpsid	i
  while (1)
 800201c:	e7fe      	b.n	800201c <main+0x4a0>
  huart2.Instance = USART2;
 800201e:	4854      	ldr	r0, [pc, #336]	; (8002170 <main+0x5f4>)
 8002020:	4d54      	ldr	r5, [pc, #336]	; (8002174 <main+0x5f8>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002022:	6082      	str	r2, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8002024:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002028:	210c      	movs	r1, #12
  huart2.Init.BaudRate = 115200;
 800202a:	e9c0 5400 	strd	r5, r4, [r0]
  huart2.Init.Parity = UART_PARITY_NONE;
 800202e:	e9c0 2203 	strd	r2, r2, [r0, #12]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002032:	e9c0 2206 	strd	r2, r2, [r0, #24]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002036:	6141      	str	r1, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002038:	f004 fbc6 	bl	80067c8 <HAL_UART_Init>
 800203c:	4604      	mov	r4, r0
 800203e:	b108      	cbz	r0, 8002044 <main+0x4c8>
 8002040:	b672      	cpsid	i
  while (1)
 8002042:	e7fe      	b.n	8002042 <main+0x4c6>
  MX_MotorControl_Init();
 8002044:	f001 fca4 	bl	8003990 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8002048:	4622      	mov	r2, r4
 800204a:	2102      	movs	r1, #2
 800204c:	2012      	movs	r0, #18
 800204e:	f003 f9af 	bl	80053b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002052:	2012      	movs	r0, #18
 8002054:	f003 f9e4 	bl	8005420 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002058:	4622      	mov	r2, r4
 800205a:	4621      	mov	r1, r4
 800205c:	2019      	movs	r0, #25
 800205e:	f003 f9a7 	bl	80053b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002062:	2019      	movs	r0, #25
 8002064:	f003 f9dc 	bl	8005420 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 1);
 8002068:	2201      	movs	r2, #1
 800206a:	2104      	movs	r1, #4
 800206c:	2018      	movs	r0, #24
 800206e:	f003 f99f 	bl	80053b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002072:	2018      	movs	r0, #24
 8002074:	f003 f9d4 	bl	8005420 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8002078:	4622      	mov	r2, r4
 800207a:	2103      	movs	r1, #3
 800207c:	201c      	movs	r0, #28
 800207e:	f003 f997 	bl	80053b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002082:	201c      	movs	r0, #28
 8002084:	f003 f9cc 	bl	8005420 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8002088:	2201      	movs	r2, #1
 800208a:	2103      	movs	r1, #3
 800208c:	2026      	movs	r0, #38	; 0x26
 800208e:	f003 f98f 	bl	80053b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002092:	2026      	movs	r0, #38	; 0x26
 8002094:	f003 f9c4 	bl	8005420 <HAL_NVIC_EnableIRQ>
  state000();
 8002098:	f7ff f83a 	bl	8001110 <state000>
 800209c:	4c36      	ldr	r4, [pc, #216]	; (8002178 <main+0x5fc>)
	float finalTorque = CAN_IN_current.CAN_IN_current_float * TMAX / 100.0;
 800209e:	4e37      	ldr	r6, [pc, #220]	; (800217c <main+0x600>)
	  switch (state)
 80020a0:	f240 25c2 	movw	r5, #706	; 0x2c2
 80020a4:	8823      	ldrh	r3, [r4, #0]
 80020a6:	f46f 7295 	mvn.w	r2, #298	; 0x12a
 80020aa:	1899      	adds	r1, r3, r2
 80020ac:	1e9f      	subs	r7, r3, #2
 80020ae:	f2a3 2257 	subw	r2, r3, #599	; 0x257
 80020b2:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
 80020b6:	fa1f f881 	uxth.w	r8, r1
 80020ba:	b2bf      	uxth	r7, r7
 80020bc:	fa1f fe82 	uxth.w	lr, r2
 80020c0:	1818      	adds	r0, r3, r0
 80020c2:	f240 3c1f 	movw	ip, #799	; 0x31f
 80020c6:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80020ca:	f080 8175 	bcs.w	80023b8 <main+0x83c>
 80020ce:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 80020d2:	d855      	bhi.n	8002180 <main+0x604>
 80020d4:	2bcc      	cmp	r3, #204	; 0xcc
 80020d6:	f200 81b6 	bhi.w	8002446 <main+0x8ca>
 80020da:	2bc5      	cmp	r3, #197	; 0xc5
 80020dc:	d818      	bhi.n	8002110 <main+0x594>
 80020de:	2b68      	cmp	r3, #104	; 0x68
 80020e0:	d8f1      	bhi.n	80020c6 <main+0x54a>
 80020e2:	2b63      	cmp	r3, #99	; 0x63
 80020e4:	f240 81ce 	bls.w	8002484 <main+0x908>
 80020e8:	3b65      	subs	r3, #101	; 0x65
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	f200 81d5 	bhi.w	800249a <main+0x91e>
 80020f0:	e8df f003 	tbb	[pc, r3]
 80020f4:	0b020508 	.word	0x0b020508
	state = 104;
 80020f8:	2368      	movs	r3, #104	; 0x68
 80020fa:	8023      	strh	r3, [r4, #0]
}
 80020fc:	e7d2      	b.n	80020a4 <main+0x528>
	  	  case 102: state102(); break;
 80020fe:	f7ff f8e3 	bl	80012c8 <state102>
 8002102:	e7cf      	b.n	80020a4 <main+0x528>
	state = 102;
 8002104:	2366      	movs	r3, #102	; 0x66
 8002106:	8023      	strh	r3, [r4, #0]
}
 8002108:	e7cc      	b.n	80020a4 <main+0x528>
	  	  case 104: state104(); break;
 800210a:	f7ff f911 	bl	8001330 <state104>
 800210e:	e7c9      	b.n	80020a4 <main+0x528>
 8002110:	3bc7      	subs	r3, #199	; 0xc7
 8002112:	2b05      	cmp	r3, #5
 8002114:	f200 81c8 	bhi.w	80024a8 <main+0x92c>
 8002118:	e8df f003 	tbb	[pc, r3]
 800211c:	0609191e 	.word	0x0609191e
 8002120:	2103      	.short	0x2103
	  	  case 203: state203(); break;
 8002122:	f7ff fa0f 	bl	8001544 <state203>
 8002126:	e7bd      	b.n	80020a4 <main+0x528>
	  	  case 202: state202(); break;
 8002128:	f7ff f9ce 	bl	80014c8 <state202>
 800212c:	e7ba      	b.n	80020a4 <main+0x528>
	float finalTorque = CAN_IN_current.CAN_IN_current_float * TMAX / 100.0;
 800212e:	edd6 7a00 	vldr	s15, [r6]
	MC_ProgramTorqueRampMotor1((int) finalTorque*32768, 0);
 8002132:	eeb0 7a67 	vmov.f32	s14, s15
 8002136:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 800213a:	2100      	movs	r1, #0
 800213c:	ee17 0a10 	vmov	r0, s14
 8002140:	03c0      	lsls	r0, r0, #15
 8002142:	b200      	sxth	r0, r0
 8002144:	f000 f9c8 	bl	80024d8 <MC_ProgramTorqueRampMotor1>
	state = 204;
 8002148:	23cc      	movs	r3, #204	; 0xcc
 800214a:	8023      	strh	r3, [r4, #0]
}
 800214c:	e7aa      	b.n	80020a4 <main+0x528>
	printState();
 800214e:	f7ff fcf5 	bl	8001b3c <printState>
	state = 201;
 8002152:	23c9      	movs	r3, #201	; 0xc9
 8002154:	8023      	strh	r3, [r4, #0]
}
 8002156:	e7a5      	b.n	80020a4 <main+0x528>
	  	  case 199: state199(); break;
 8002158:	f7ff f992 	bl	8001480 <state199>
 800215c:	e7a2      	b.n	80020a4 <main+0x528>
	  	  case 204: state204(); break;
 800215e:	f7ff fa0b 	bl	8001578 <state204>
 8002162:	e79f      	b.n	80020a4 <main+0x528>
 8002164:	20000904 	.word	0x20000904
 8002168:	40010000 	.word	0x40010000
 800216c:	20000968 	.word	0x20000968
 8002170:	200009b4 	.word	0x200009b4
 8002174:	40004400 	.word	0x40004400
 8002178:	20000788 	.word	0x20000788
 800217c:	200007c4 	.word	0x200007c4
 8002180:	2868      	cmp	r0, #104	; 0x68
 8002182:	d8a0      	bhi.n	80020c6 <main+0x54a>
 8002184:	f20f 0904 	addw	r9, pc, #4
 8002188:	f859 f020 	ldr.w	pc, [r9, r0, lsl #2]
 800218c:	080023b1 	.word	0x080023b1
 8002190:	080023ab 	.word	0x080023ab
 8002194:	080023a3 	.word	0x080023a3
 8002198:	0800239b 	.word	0x0800239b
 800219c:	08002393 	.word	0x08002393
 80021a0:	0800238b 	.word	0x0800238b
 80021a4:	08002385 	.word	0x08002385
 80021a8:	0800237f 	.word	0x0800237f
 80021ac:	08002377 	.word	0x08002377
 80021b0:	0800236f 	.word	0x0800236f
 80021b4:	08002367 	.word	0x08002367
 80021b8:	0800235f 	.word	0x0800235f
 80021bc:	08002357 	.word	0x08002357
 80021c0:	080020c7 	.word	0x080020c7
 80021c4:	080020c7 	.word	0x080020c7
 80021c8:	080020c7 	.word	0x080020c7
 80021cc:	080020c7 	.word	0x080020c7
 80021d0:	080020c7 	.word	0x080020c7
 80021d4:	080020c7 	.word	0x080020c7
 80021d8:	080020c7 	.word	0x080020c7
 80021dc:	080020c7 	.word	0x080020c7
 80021e0:	080020c7 	.word	0x080020c7
 80021e4:	080020c7 	.word	0x080020c7
 80021e8:	080020c7 	.word	0x080020c7
 80021ec:	080020c7 	.word	0x080020c7
 80021f0:	080020c7 	.word	0x080020c7
 80021f4:	080020c7 	.word	0x080020c7
 80021f8:	080020c7 	.word	0x080020c7
 80021fc:	080020c7 	.word	0x080020c7
 8002200:	080020c7 	.word	0x080020c7
 8002204:	080020c7 	.word	0x080020c7
 8002208:	080020c7 	.word	0x080020c7
 800220c:	080020c7 	.word	0x080020c7
 8002210:	080020c7 	.word	0x080020c7
 8002214:	080020c7 	.word	0x080020c7
 8002218:	080020c7 	.word	0x080020c7
 800221c:	080020c7 	.word	0x080020c7
 8002220:	080020c7 	.word	0x080020c7
 8002224:	080020c7 	.word	0x080020c7
 8002228:	080020c7 	.word	0x080020c7
 800222c:	080020c7 	.word	0x080020c7
 8002230:	080020c7 	.word	0x080020c7
 8002234:	080020c7 	.word	0x080020c7
 8002238:	080020c7 	.word	0x080020c7
 800223c:	080020c7 	.word	0x080020c7
 8002240:	080020c7 	.word	0x080020c7
 8002244:	080020c7 	.word	0x080020c7
 8002248:	080020c7 	.word	0x080020c7
 800224c:	080020c7 	.word	0x080020c7
 8002250:	080020c7 	.word	0x080020c7
 8002254:	080020c7 	.word	0x080020c7
 8002258:	080020c7 	.word	0x080020c7
 800225c:	080020c7 	.word	0x080020c7
 8002260:	080020c7 	.word	0x080020c7
 8002264:	080020c7 	.word	0x080020c7
 8002268:	080020c7 	.word	0x080020c7
 800226c:	080020c7 	.word	0x080020c7
 8002270:	080020c7 	.word	0x080020c7
 8002274:	080020c7 	.word	0x080020c7
 8002278:	080020c7 	.word	0x080020c7
 800227c:	080020c7 	.word	0x080020c7
 8002280:	080020c7 	.word	0x080020c7
 8002284:	080020c7 	.word	0x080020c7
 8002288:	080020c7 	.word	0x080020c7
 800228c:	080020c7 	.word	0x080020c7
 8002290:	080020c7 	.word	0x080020c7
 8002294:	080020c7 	.word	0x080020c7
 8002298:	080020c7 	.word	0x080020c7
 800229c:	080020c7 	.word	0x080020c7
 80022a0:	080020c7 	.word	0x080020c7
 80022a4:	080020c7 	.word	0x080020c7
 80022a8:	080020c7 	.word	0x080020c7
 80022ac:	080020c7 	.word	0x080020c7
 80022b0:	080020c7 	.word	0x080020c7
 80022b4:	080020c7 	.word	0x080020c7
 80022b8:	080020c7 	.word	0x080020c7
 80022bc:	080020c7 	.word	0x080020c7
 80022c0:	080020c7 	.word	0x080020c7
 80022c4:	080020c7 	.word	0x080020c7
 80022c8:	080020c7 	.word	0x080020c7
 80022cc:	080020c7 	.word	0x080020c7
 80022d0:	080020c7 	.word	0x080020c7
 80022d4:	080020c7 	.word	0x080020c7
 80022d8:	080020c7 	.word	0x080020c7
 80022dc:	080020c7 	.word	0x080020c7
 80022e0:	080020c7 	.word	0x080020c7
 80022e4:	080020c7 	.word	0x080020c7
 80022e8:	080020c7 	.word	0x080020c7
 80022ec:	080020c7 	.word	0x080020c7
 80022f0:	080020c7 	.word	0x080020c7
 80022f4:	080020c7 	.word	0x080020c7
 80022f8:	080020c7 	.word	0x080020c7
 80022fc:	080020c7 	.word	0x080020c7
 8002300:	080020c7 	.word	0x080020c7
 8002304:	080020c7 	.word	0x080020c7
 8002308:	080020c7 	.word	0x080020c7
 800230c:	080020c7 	.word	0x080020c7
 8002310:	080020c7 	.word	0x080020c7
 8002314:	080020c7 	.word	0x080020c7
 8002318:	080020c7 	.word	0x080020c7
 800231c:	08002351 	.word	0x08002351
 8002320:	08002349 	.word	0x08002349
 8002324:	08002341 	.word	0x08002341
 8002328:	08002339 	.word	0x08002339
 800232c:	08002331 	.word	0x08002331
	state = 599;
 8002330:	f240 2357 	movw	r3, #599	; 0x257
 8002334:	8023      	strh	r3, [r4, #0]
}
 8002336:	e6b5      	b.n	80020a4 <main+0x528>
	state = 503;
 8002338:	f240 13f7 	movw	r3, #503	; 0x1f7
 800233c:	8023      	strh	r3, [r4, #0]
}
 800233e:	e6b1      	b.n	80020a4 <main+0x528>
	state = 502;
 8002340:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
 8002344:	8023      	strh	r3, [r4, #0]
}
 8002346:	e6ad      	b.n	80020a4 <main+0x528>
	state = 501;
 8002348:	f240 13f5 	movw	r3, #501	; 0x1f5
 800234c:	8023      	strh	r3, [r4, #0]
}
 800234e:	e6a9      	b.n	80020a4 <main+0x528>
	  	  case 499: state499(); break;
 8002350:	f7ff faca 	bl	80018e8 <state499>
 8002354:	e6a6      	b.n	80020a4 <main+0x528>
	state = 499;
 8002356:	f240 13f3 	movw	r3, #499	; 0x1f3
 800235a:	8023      	strh	r3, [r4, #0]
}
 800235c:	e6a2      	b.n	80020a4 <main+0x528>
	state = 411;
 800235e:	f240 139b 	movw	r3, #411	; 0x19b
 8002362:	8023      	strh	r3, [r4, #0]
}
 8002364:	e69e      	b.n	80020a4 <main+0x528>
	state = 410;
 8002366:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800236a:	8023      	strh	r3, [r4, #0]
}
 800236c:	e69a      	b.n	80020a4 <main+0x528>
	state = 409;
 800236e:	f240 1399 	movw	r3, #409	; 0x199
 8002372:	8023      	strh	r3, [r4, #0]
}
 8002374:	e696      	b.n	80020a4 <main+0x528>
	state = 408;
 8002376:	f44f 73cc 	mov.w	r3, #408	; 0x198
 800237a:	8023      	strh	r3, [r4, #0]
}
 800237c:	e692      	b.n	80020a4 <main+0x528>
	  	  case 406: state406(); break;
 800237e:	f7ff fa33 	bl	80017e8 <state406>
 8002382:	e68f      	b.n	80020a4 <main+0x528>
	  	  case 405: state405(); break;
 8002384:	f7ff f9b0 	bl	80016e8 <state405>
 8002388:	e68c      	b.n	80020a4 <main+0x528>
	state = 405;
 800238a:	f240 1395 	movw	r3, #405	; 0x195
 800238e:	8023      	strh	r3, [r4, #0]
}
 8002390:	e688      	b.n	80020a4 <main+0x528>
	state = 404;
 8002392:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8002396:	8023      	strh	r3, [r4, #0]
}
 8002398:	e684      	b.n	80020a4 <main+0x528>
	state = 403;
 800239a:	f240 1393 	movw	r3, #403	; 0x193
 800239e:	8023      	strh	r3, [r4, #0]
}
 80023a0:	e680      	b.n	80020a4 <main+0x528>
	state = 402;
 80023a2:	f44f 73c9 	mov.w	r3, #402	; 0x192
 80023a6:	8023      	strh	r3, [r4, #0]
}
 80023a8:	e67c      	b.n	80020a4 <main+0x528>
	  	  case 400: state400(); break;
 80023aa:	f7ff f977 	bl	800169c <state400>
 80023ae:	e679      	b.n	80020a4 <main+0x528>
	state = 400;
 80023b0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80023b4:	8023      	strh	r3, [r4, #0]
}
 80023b6:	e675      	b.n	80020a4 <main+0x528>
	  switch (state)
 80023b8:	42ab      	cmp	r3, r5
 80023ba:	d83f      	bhi.n	800243c <main+0x8c0>
 80023bc:	f240 29ba 	movw	r9, #698	; 0x2ba
 80023c0:	454b      	cmp	r3, r9
 80023c2:	d91b      	bls.n	80023fc <main+0x880>
 80023c4:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80023c8:	2b06      	cmp	r3, #6
 80023ca:	d869      	bhi.n	80024a0 <main+0x924>
 80023cc:	e8df f003 	tbb	[pc, r3]
 80023d0:	070a0d10 	.word	0x070a0d10
 80023d4:	0407      	.short	0x0407
 80023d6:	13          	.byte	0x13
 80023d7:	00          	.byte	0x00
	  	  case 705: state705(); break;
 80023d8:	f7ff fb52 	bl	8001a80 <state705>
 80023dc:	e662      	b.n	80020a4 <main+0x528>
	  	  case 703: state703(); break;
 80023de:	f7ff fb2d 	bl	8001a3c <state703>
 80023e2:	e65f      	b.n	80020a4 <main+0x528>
	  	  case 702: state702(); break;
 80023e4:	f7ff fb08 	bl	80019f8 <state702>
 80023e8:	e65c      	b.n	80020a4 <main+0x528>
	  	  case 701: state701(); break;
 80023ea:	f7ff fae3 	bl	80019b4 <state701>
 80023ee:	e659      	b.n	80020a4 <main+0x528>
	  	  case 700: state700(); break;
 80023f0:	f7ff fa9e 	bl	8001930 <state700>
 80023f4:	e656      	b.n	80020a4 <main+0x528>
	  	  case 706: state706(); break;
 80023f6:	f7ff fb65 	bl	8001ac4 <state706>
 80023fa:	e653      	b.n	80020a4 <main+0x528>
	  switch (state)
 80023fc:	f1be 0f04 	cmp.w	lr, #4
 8002400:	f63f ae61 	bhi.w	80020c6 <main+0x54a>
 8002404:	2a04      	cmp	r2, #4
 8002406:	f63f ae5e 	bhi.w	80020c6 <main+0x54a>
 800240a:	e8df f002 	tbb	[pc, r2]
 800240e:	0f13      	.short	0x0f13
 8002410:	070b      	.short	0x070b
 8002412:	03          	.byte	0x03
 8002413:	00          	.byte	0x00
	state = 699;
 8002414:	f240 23bb 	movw	r3, #699	; 0x2bb
 8002418:	8023      	strh	r3, [r4, #0]
}
 800241a:	e643      	b.n	80020a4 <main+0x528>
	state = 603;
 800241c:	f240 235b 	movw	r3, #603	; 0x25b
 8002420:	8023      	strh	r3, [r4, #0]
}
 8002422:	e63f      	b.n	80020a4 <main+0x528>
	state = 602;
 8002424:	f240 235a 	movw	r3, #602	; 0x25a
 8002428:	8023      	strh	r3, [r4, #0]
}
 800242a:	e63b      	b.n	80020a4 <main+0x528>
	state = 601;
 800242c:	f240 2359 	movw	r3, #601	; 0x259
 8002430:	8023      	strh	r3, [r4, #0]
}
 8002432:	e637      	b.n	80020a4 <main+0x528>
	state = 600;
 8002434:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002438:	8023      	strh	r3, [r4, #0]
}
 800243a:	e633      	b.n	80020a4 <main+0x528>
	  switch (state)
 800243c:	4563      	cmp	r3, ip
 800243e:	f47f ae42 	bne.w	80020c6 <main+0x54a>
	  	  case 799: state799(); break;
 8002442:	f7ff fb61 	bl	8001b08 <state799>
	  switch (state)
 8002446:	f1b8 0f04 	cmp.w	r8, #4
 800244a:	f63f ae3c 	bhi.w	80020c6 <main+0x54a>
 800244e:	2904      	cmp	r1, #4
 8002450:	f63f ae39 	bhi.w	80020c6 <main+0x54a>
 8002454:	e8df f001 	tbb	[pc, r1]
 8002458:	070b0f12 	.word	0x070b0f12
 800245c:	03          	.byte	0x03
 800245d:	00          	.byte	0x00
	state = 399;
 800245e:	f240 138f 	movw	r3, #399	; 0x18f
 8002462:	8023      	strh	r3, [r4, #0]
}
 8002464:	e61e      	b.n	80020a4 <main+0x528>
	state = 303;
 8002466:	f240 132f 	movw	r3, #303	; 0x12f
 800246a:	8023      	strh	r3, [r4, #0]
}
 800246c:	e61a      	b.n	80020a4 <main+0x528>
	state = 302;
 800246e:	f44f 7397 	mov.w	r3, #302	; 0x12e
 8002472:	8023      	strh	r3, [r4, #0]
}
 8002474:	e616      	b.n	80020a4 <main+0x528>
	  	  case 300: state300(); break;
 8002476:	f7ff f8ed 	bl	8001654 <state300>
 800247a:	e613      	b.n	80020a4 <main+0x528>
	state = 300;
 800247c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002480:	8023      	strh	r3, [r4, #0]
}
 8002482:	e60f      	b.n	80020a4 <main+0x528>
	  switch (state)
 8002484:	2b01      	cmp	r3, #1
 8002486:	d005      	beq.n	8002494 <main+0x918>
 8002488:	2f01      	cmp	r7, #1
 800248a:	f63f ae1c 	bhi.w	80020c6 <main+0x54a>
	printState();
 800248e:	f7ff fb55 	bl	8001b3c <printState>
}
 8002492:	e607      	b.n	80020a4 <main+0x528>
  	  	  case 1: state001(); break;
 8002494:	f7fe fe74 	bl	8001180 <state001>
 8002498:	e604      	b.n	80020a4 <main+0x528>
	state = 101;
 800249a:	2365      	movs	r3, #101	; 0x65
 800249c:	8023      	strh	r3, [r4, #0]
}
 800249e:	e601      	b.n	80020a4 <main+0x528>
	state = 700;
 80024a0:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80024a4:	8023      	strh	r3, [r4, #0]
}
 80024a6:	e5fd      	b.n	80020a4 <main+0x528>
	  	  case 198: state198(); break;
 80024a8:	f7fe ffb6 	bl	8001418 <state198>
 80024ac:	e5fa      	b.n	80020a4 <main+0x528>
 80024ae:	bf00      	nop

080024b0 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 80024b0:	4b01      	ldr	r3, [pc, #4]	; (80024b8 <MC_StartMotor1+0x8>)
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	f000 b852 	b.w	800255c <MCI_StartMotor>
 80024b8:	20000c3c 	.word	0x20000c3c

080024bc <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 80024bc:	4b01      	ldr	r3, [pc, #4]	; (80024c4 <MC_StopMotor1+0x8>)
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	f000 b856 	b.w	8002570 <MCI_StopMotor>
 80024c4:	20000c3c 	.word	0x20000c3c

080024c8 <MC_ProgramSpeedRampMotor1>:
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1( int16_t hFinalSpeed, uint16_t hDurationms )
{
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 80024c8:	4b02      	ldr	r3, [pc, #8]	; (80024d4 <MC_ProgramSpeedRampMotor1+0xc>)
{
 80024ca:	460a      	mov	r2, r1
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 80024cc:	4601      	mov	r1, r0
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	f000 b824 	b.w	800251c <MCI_ExecSpeedRamp>
 80024d4:	20000c3c 	.word	0x20000c3c

080024d8 <MC_ProgramTorqueRampMotor1>:
  *         is possible to set 0 to perform an instantaneous change in the torque
  *         value.
  */
__weak void MC_ProgramTorqueRampMotor1( int16_t hFinalTorque, uint16_t hDurationms )
{
	MCI_ExecTorqueRamp( pMCI[M1], hFinalTorque, hDurationms );
 80024d8:	4b02      	ldr	r3, [pc, #8]	; (80024e4 <MC_ProgramTorqueRampMotor1+0xc>)
{
 80024da:	460a      	mov	r2, r1
	MCI_ExecTorqueRamp( pMCI[M1], hFinalTorque, hDurationms );
 80024dc:	4601      	mov	r1, r0
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	f000 b828 	b.w	8002534 <MCI_ExecTorqueRamp>
 80024e4:	20000c3c 	.word	0x20000c3c

080024e8 <MC_GetMecSpeedAverageMotor1>:
/**
 * @brief Returns the last computed average mechanical rotor speed for Motor 1, expressed in the unit defined by #SPEED_UNIT
 */
__weak int16_t MC_GetMecSpeedAverageMotor1(void)
{
	return MCI_GetAvrgMecSpeedUnit( pMCI[M1] );
 80024e8:	4b01      	ldr	r3, [pc, #4]	; (80024f0 <MC_GetMecSpeedAverageMotor1+0x8>)
 80024ea:	6818      	ldr	r0, [r3, #0]
 80024ec:	f000 b8bc 	b.w	8002668 <MCI_GetAvrgMecSpeedUnit>
 80024f0:	20000c3c 	.word	0x20000c3c

080024f4 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 80024f4:	4b01      	ldr	r3, [pc, #4]	; (80024fc <MC_GetSTMStateMotor1+0x8>)
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	f000 b882 	b.w	8002600 <MCI_GetSTMState>
 80024fc:	20000c3c 	.word	0x20000c3c

08002500 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 8002500:	b410      	push	{r4}
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8002502:	2400      	movs	r4, #0
 8002504:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8002506:	81c4      	strh	r4, [r0, #14]
  pHandle->hFinalTorque = 0;
 8002508:	8204      	strh	r4, [r0, #16]
  pHandle->hDurationms = 0;
 800250a:	82c4      	strh	r4, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 800250c:	7604      	strb	r4, [r0, #24]
  pHandle->pSTC = pSTC;
 800250e:	e9c0 1200 	strd	r1, r2, [r0]
}
 8002512:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->pFOCVars = pFOCVars;
 8002516:	6083      	str	r3, [r0, #8]
}
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop

0800251c <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
 800251c:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800251e:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8002522:	2401      	movs	r4, #1
 8002524:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8002526:	81c1      	strh	r1, [r0, #14]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8002528:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 800252c:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800252e:	8303      	strh	r3, [r0, #24]
}
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop

08002534 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8002534:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002536:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8002538:	2402      	movs	r4, #2
 800253a:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 800253c:	8201      	strh	r1, [r0, #16]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 800253e:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 8002542:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002544:	8303      	strh	r3, [r0, #24]
}
 8002546:	4770      	bx	lr

08002548 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8002548:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 800254a:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800254c:	2301      	movs	r3, #1
  pHandle->Iqdref.q = Iqdref.q;
 800254e:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8002552:	7302      	strb	r2, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002554:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8002556:	b002      	add	sp, #8
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop

0800255c <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 800255c:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 800255e:	2103      	movs	r1, #3
{
 8002560:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8002562:	6800      	ldr	r0, [r0, #0]
 8002564:	f005 f9fe 	bl	8007964 <STM_NextState>

  if ( RetVal == true )
 8002568:	b108      	cbz	r0, 800256e <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800256a:	2301      	movs	r3, #1
 800256c:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 800256e:	bd10      	pop	{r4, pc}

08002570 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8002570:	6800      	ldr	r0, [r0, #0]
 8002572:	2107      	movs	r1, #7
 8002574:	f005 b9f6 	b.w	8007964 <STM_NextState>

08002578 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8002578:	6800      	ldr	r0, [r0, #0]
 800257a:	f005 ba69 	b.w	8007a50 <STM_FaultAcknowledged>
 800257e:	bf00      	nop

08002580 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8002580:	6800      	ldr	r0, [r0, #0]
 8002582:	2101      	movs	r1, #1
 8002584:	f005 b9ee 	b.w	8007964 <STM_NextState>

08002588 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8002588:	b178      	cbz	r0, 80025aa <MCI_ExecBufferedCommands+0x22>
{
 800258a:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 800258c:	7e03      	ldrb	r3, [r0, #24]
 800258e:	2b01      	cmp	r3, #1
 8002590:	4604      	mov	r4, r0
 8002592:	d000      	beq.n	8002596 <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8002594:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 8002596:	7b01      	ldrb	r1, [r0, #12]
 8002598:	2902      	cmp	r1, #2
 800259a:	d020      	beq.n	80025de <MCI_ExecBufferedCommands+0x56>
 800259c:	2903      	cmp	r1, #3
 800259e:	d005      	beq.n	80025ac <MCI_ExecBufferedCommands+0x24>
 80025a0:	2901      	cmp	r1, #1
 80025a2:	d00c      	beq.n	80025be <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 80025a4:	2303      	movs	r3, #3
 80025a6:	7623      	strb	r3, [r4, #24]
}
 80025a8:	bd10      	pop	{r4, pc}
 80025aa:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80025ac:	6882      	ldr	r2, [r0, #8]
 80025ae:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80025b2:	f8d0 3012 	ldr.w	r3, [r0, #18]
 80025b6:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 80025b8:	2302      	movs	r3, #2
 80025ba:	7623      	strb	r3, [r4, #24]
}
 80025bc:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80025be:	6883      	ldr	r3, [r0, #8]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 80025c6:	6840      	ldr	r0, [r0, #4]
 80025c8:	f005 f906 	bl	80077d8 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 80025cc:	8ae2      	ldrh	r2, [r4, #22]
 80025ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025d2:	6860      	ldr	r0, [r4, #4]
 80025d4:	f005 f904 	bl	80077e0 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 80025d8:	2800      	cmp	r0, #0
 80025da:	d0e3      	beq.n	80025a4 <MCI_ExecBufferedCommands+0x1c>
 80025dc:	e7ec      	b.n	80025b8 <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80025de:	6883      	ldr	r3, [r0, #8]
 80025e0:	2100      	movs	r1, #0
 80025e2:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 80025e6:	6840      	ldr	r0, [r0, #4]
 80025e8:	f005 f8f6 	bl	80077d8 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 80025ec:	8ae2      	ldrh	r2, [r4, #22]
 80025ee:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80025f2:	6860      	ldr	r0, [r4, #4]
 80025f4:	f005 f8f4 	bl	80077e0 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 80025f8:	2800      	cmp	r0, #0
 80025fa:	d0d3      	beq.n	80025a4 <MCI_ExecBufferedCommands+0x1c>
 80025fc:	e7dc      	b.n	80025b8 <MCI_ExecBufferedCommands+0x30>
 80025fe:	bf00      	nop

08002600 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8002600:	6800      	ldr	r0, [r0, #0]
 8002602:	f005 ba23 	b.w	8007a4c <STM_GetState>
 8002606:	bf00      	nop

08002608 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8002608:	7e40      	ldrb	r0, [r0, #25]
 800260a:	4770      	bx	lr

0800260c <MCI_GetImposedMotorDirection>:
  */
__weak int16_t MCI_GetImposedMotorDirection( MCI_Handle_t * pHandle )
{
  int16_t retVal = 1;

  switch ( pHandle->lastCommand )
 800260c:	7b03      	ldrb	r3, [r0, #12]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d005      	beq.n	800261e <MCI_GetImposedMotorDirection+0x12>
 8002612:	2b03      	cmp	r3, #3
 8002614:	d013      	beq.n	800263e <MCI_GetImposedMotorDirection+0x32>
 8002616:	2b01      	cmp	r3, #1
 8002618:	d009      	beq.n	800262e <MCI_GetImposedMotorDirection+0x22>
 800261a:	2001      	movs	r0, #1
      break;
    default:
      break;
  }
  return retVal;
}
 800261c:	4770      	bx	lr
      if ( pHandle->hFinalTorque < 0 )
 800261e:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 8002622:	2b00      	cmp	r3, #0
        retVal = -1;
 8002624:	bfac      	ite	ge
 8002626:	2001      	movge	r0, #1
 8002628:	f04f 30ff 	movlt.w	r0, #4294967295
 800262c:	4770      	bx	lr
      if ( pHandle->hFinalSpeed < 0 )
 800262e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8002632:	2b00      	cmp	r3, #0
        retVal = -1;
 8002634:	bfac      	ite	ge
 8002636:	2001      	movge	r0, #1
 8002638:	f04f 30ff 	movlt.w	r0, #4294967295
 800263c:	4770      	bx	lr
      if ( pHandle->Iqdref.q < 0 )
 800263e:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 8002642:	2b00      	cmp	r3, #0
        retVal = -1;
 8002644:	bfac      	ite	ge
 8002646:	2001      	movge	r0, #1
 8002648:	f04f 30ff 	movlt.w	r0, #4294967295
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop

08002650 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8002650:	7b03      	ldrb	r3, [r0, #12]
 8002652:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8002654:	bf0c      	ite	eq
 8002656:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 800265a:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop

08002660 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8002660:	6840      	ldr	r0, [r0, #4]
 8002662:	f005 b905 	b.w	8007870 <STC_StopRamp>
 8002666:	bf00      	nop

08002668 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8002668:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 800266a:	6840      	ldr	r0, [r0, #4]
 800266c:	f005 f89a 	bl	80077a4 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8002670:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8002674:	f005 b842 	b.w	80076fc <SPD_GetAvrgMecSpeedUnit>

08002678 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8002678:	6840      	ldr	r0, [r0, #4]
 800267a:	f005 b89d 	b.w	80077b8 <STC_GetMecSpeedRefUnit>
 800267e:	bf00      	nop

08002680 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8002680:	6882      	ldr	r2, [r0, #8]
 8002682:	6810      	ldr	r0, [r2, #0]
 8002684:	2300      	movs	r3, #0
 8002686:	b282      	uxth	r2, r0
 8002688:	f362 030f 	bfi	r3, r2, #0, #16
 800268c:	0c00      	lsrs	r0, r0, #16
 800268e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8002692:	b082      	sub	sp, #8
}
 8002694:	4618      	mov	r0, r3
 8002696:	b002      	add	sp, #8
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop

0800269c <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 800269c:	6882      	ldr	r2, [r0, #8]
 800269e:	6850      	ldr	r0, [r2, #4]
 80026a0:	2300      	movs	r3, #0
 80026a2:	b282      	uxth	r2, r0
 80026a4:	f362 030f 	bfi	r3, r2, #0, #16
 80026a8:	0c00      	lsrs	r0, r0, #16
 80026aa:	f360 431f 	bfi	r3, r0, #16, #16
{
 80026ae:	b082      	sub	sp, #8
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	b002      	add	sp, #8
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop

080026b8 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 80026b8:	6882      	ldr	r2, [r0, #8]
 80026ba:	68d0      	ldr	r0, [r2, #12]
 80026bc:	2300      	movs	r3, #0
 80026be:	b282      	uxth	r2, r0
 80026c0:	f362 030f 	bfi	r3, r2, #0, #16
 80026c4:	0c00      	lsrs	r0, r0, #16
 80026c6:	f360 431f 	bfi	r3, r0, #16, #16
{
 80026ca:	b082      	sub	sp, #8
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	b002      	add	sp, #8
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop

080026d4 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 80026d4:	6882      	ldr	r2, [r0, #8]
 80026d6:	6910      	ldr	r0, [r2, #16]
 80026d8:	2300      	movs	r3, #0
 80026da:	b282      	uxth	r2, r0
 80026dc:	f362 030f 	bfi	r3, r2, #0, #16
 80026e0:	0c00      	lsrs	r0, r0, #16
 80026e2:	f360 431f 	bfi	r3, r0, #16, #16
{
 80026e6:	b082      	sub	sp, #8
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	b002      	add	sp, #8
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop

080026f0 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 80026f0:	6882      	ldr	r2, [r0, #8]
 80026f2:	f8d2 0016 	ldr.w	r0, [r2, #22]
 80026f6:	2300      	movs	r3, #0
 80026f8:	b282      	uxth	r2, r0
 80026fa:	f362 030f 	bfi	r3, r2, #0, #16
 80026fe:	0c00      	lsrs	r0, r0, #16
 8002700:	f360 431f 	bfi	r3, r0, #16, #16
{
 8002704:	b082      	sub	sp, #8
}
 8002706:	4618      	mov	r0, r3
 8002708:	b002      	add	sp, #8
 800270a:	4770      	bx	lr

0800270c <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 800270c:	6882      	ldr	r2, [r0, #8]
 800270e:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8002712:	2300      	movs	r3, #0
 8002714:	b282      	uxth	r2, r0
 8002716:	f362 030f 	bfi	r3, r2, #0, #16
 800271a:	0c00      	lsrs	r0, r0, #16
 800271c:	f360 431f 	bfi	r3, r0, #16, #16
{
 8002720:	b082      	sub	sp, #8
}
 8002722:	4618      	mov	r0, r3
 8002724:	b002      	add	sp, #8
 8002726:	4770      	bx	lr

08002728 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8002728:	6883      	ldr	r3, [r0, #8]
}
 800272a:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 800272e:	4770      	bx	lr

08002730 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8002730:	2300      	movs	r3, #0
 8002732:	6882      	ldr	r2, [r0, #8]
 8002734:	f361 030f 	bfi	r3, r1, #0, #16
 8002738:	f361 431f 	bfi	r3, r1, #16, #16
 800273c:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop

08002744 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8002744:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8002746:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 800274a:	f005 f8d1 	bl	80078f0 <STC_GetDefaultIqdref>
 800274e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002752:	8220      	strh	r0, [r4, #16]
 8002754:	8263      	strh	r3, [r4, #18]
}
 8002756:	bd10      	pop	{r4, pc}

08002758 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 8002758:	b203      	sxth	r3, r0
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 800275a:	f644 11e6 	movw	r1, #18918	; 0x49e6
 800275e:	f3c0 400f 	ubfx	r0, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8002762:	fb13 f201 	smulbb	r2, r3, r1
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8002766:	fb10 f101 	smulbb	r1, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 800276a:	4250      	negs	r0, r2
 800276c:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8002770:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8002774:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8002776:	da05      	bge.n	8002784 <MCM_Clarke+0x2c>
 8002778:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 800277a:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 800277e:	da0c      	bge.n	800279a <MCM_Clarke+0x42>
 8002780:	4a09      	ldr	r2, [pc, #36]	; (80027a8 <MCM_Clarke+0x50>)
 8002782:	e001      	b.n	8002788 <MCM_Clarke+0x30>
 8002784:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8002788:	b29b      	uxth	r3, r3
 800278a:	2000      	movs	r0, #0
 800278c:	b292      	uxth	r2, r2
 800278e:	f363 000f 	bfi	r0, r3, #0, #16
 8002792:	f362 401f 	bfi	r0, r2, #16, #16
}
 8002796:	b004      	add	sp, #16
 8002798:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 800279a:	4803      	ldr	r0, [pc, #12]	; (80027a8 <MCM_Clarke+0x50>)
 800279c:	b20a      	sxth	r2, r1
 800279e:	4282      	cmp	r2, r0
 80027a0:	bfb8      	it	lt
 80027a2:	4602      	movlt	r2, r0
 80027a4:	e7f0      	b.n	8002788 <MCM_Clarke+0x30>
 80027a6:	bf00      	nop
 80027a8:	ffff8001 	.word	0xffff8001

080027ac <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 80027ac:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 80027b0:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 80027b4:	f400 7140 	and.w	r1, r0, #768	; 0x300
 80027b8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
{
 80027bc:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 80027be:	d028      	beq.n	8002812 <MCM_Trig_Functions+0x66>
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	461a      	mov	r2, r3
 80027c6:	d816      	bhi.n	80027f6 <MCM_Trig_Functions+0x4a>
 80027c8:	b361      	cbz	r1, 8002824 <MCM_Trig_Functions+0x78>
 80027ca:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80027ce:	d109      	bne.n	80027e4 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80027d0:	b2c0      	uxtb	r0, r0
 80027d2:	43c3      	mvns	r3, r0
 80027d4:	491a      	ldr	r1, [pc, #104]	; (8002840 <MCM_Trig_Functions+0x94>)
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 80027dc:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80027e0:	4252      	negs	r2, r2
 80027e2:	b212      	sxth	r2, r2
      break;
    default:
      break;
  }
  return ( Local_Components );
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2000      	movs	r0, #0
 80027e8:	b292      	uxth	r2, r2
 80027ea:	f363 000f 	bfi	r0, r3, #0, #16
 80027ee:	f362 401f 	bfi	r0, r2, #16, #16
}
 80027f2:	b002      	add	sp, #8
 80027f4:	4770      	bx	lr
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 80027f6:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 80027fa:	d1f3      	bne.n	80027e4 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80027fc:	4910      	ldr	r1, [pc, #64]	; (8002840 <MCM_Trig_Functions+0x94>)
 80027fe:	b2c0      	uxtb	r0, r0
 8002800:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002802:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002806:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002808:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800280a:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800280e:	b21b      	sxth	r3, r3
      break;
 8002810:	e7e8      	b.n	80027e4 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8002812:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002814:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8002816:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002818:	b2db      	uxtb	r3, r3
 800281a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800281e:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
      break;
 8002822:	e7df      	b.n	80027e4 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002824:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002826:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002828:	4a05      	ldr	r2, [pc, #20]	; (8002840 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800282a:	b2db      	uxtb	r3, r3
 800282c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002830:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002834:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002836:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002838:	b21b      	sxth	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800283a:	b212      	sxth	r2, r2
      break;
 800283c:	e7d2      	b.n	80027e4 <MCM_Trig_Functions+0x38>
 800283e:	bf00      	nop
 8002840:	080095bc 	.word	0x080095bc

08002844 <MCM_Park>:
{
 8002844:	b570      	push	{r4, r5, r6, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	4605      	mov	r5, r0
 800284a:	9001      	str	r0, [sp, #4]
 800284c:	4606      	mov	r6, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 800284e:	4608      	mov	r0, r1
 8002850:	f7ff ffac 	bl	80027ac <MCM_Trig_Functions>
 8002854:	b22d      	sxth	r5, r5
 8002856:	b204      	sxth	r4, r0
 8002858:	1436      	asrs	r6, r6, #16
 800285a:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 800285c:	fb05 f204 	mul.w	r2, r5, r4
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8002860:	fb06 2210 	mls	r2, r6, r0, r2
  if ( wqd_tmp > INT16_MAX )
 8002864:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002868:	da12      	bge.n	8002890 <MCM_Park+0x4c>
 800286a:	13d3      	asrs	r3, r2, #15
  else if ( wqd_tmp < ( -32768 ) )
 800286c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8002870:	4914      	ldr	r1, [pc, #80]	; (80028c4 <MCM_Park+0x80>)
 8002872:	da21      	bge.n	80028b8 <MCM_Park+0x74>
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8002874:	fb04 f406 	mul.w	r4, r4, r6
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8002878:	fb05 4000 	mla	r0, r5, r0, r4
  if ( wqd_tmp > INT16_MAX )
 800287c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8002880:	ea4f 32e0 	mov.w	r2, r0, asr #15
  if ( wqd_tmp > INT16_MAX )
 8002884:	da07      	bge.n	8002896 <MCM_Park+0x52>
  else if ( wqd_tmp < ( -32768 ) )
 8002886:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 800288a:	da0f      	bge.n	80028ac <MCM_Park+0x68>
 800288c:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <MCM_Park+0x80>)
 800288e:	e004      	b.n	800289a <MCM_Park+0x56>
 8002890:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002894:	e7ee      	b.n	8002874 <MCM_Park+0x30>
 8002896:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 800289a:	b28a      	uxth	r2, r1
 800289c:	2000      	movs	r0, #0
 800289e:	b29b      	uxth	r3, r3
 80028a0:	f362 000f 	bfi	r0, r2, #0, #16
 80028a4:	f363 401f 	bfi	r0, r3, #16, #16
}
 80028a8:	b004      	add	sp, #16
 80028aa:	bd70      	pop	{r4, r5, r6, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 80028ac:	4805      	ldr	r0, [pc, #20]	; (80028c4 <MCM_Park+0x80>)
 80028ae:	b213      	sxth	r3, r2
 80028b0:	4283      	cmp	r3, r0
 80028b2:	bfb8      	it	lt
 80028b4:	4603      	movlt	r3, r0
 80028b6:	e7f0      	b.n	800289a <MCM_Park+0x56>
    hqd_tmp = ( int16_t )( wqd_tmp );
 80028b8:	b21a      	sxth	r2, r3
 80028ba:	4291      	cmp	r1, r2
 80028bc:	bfb8      	it	lt
 80028be:	4611      	movlt	r1, r2
 80028c0:	e7d8      	b.n	8002874 <MCM_Park+0x30>
 80028c2:	bf00      	nop
 80028c4:	ffff8001 	.word	0xffff8001

080028c8 <MCM_Rev_Park>:
{
 80028c8:	b530      	push	{r4, r5, lr}
 80028ca:	b085      	sub	sp, #20
 80028cc:	4604      	mov	r4, r0
 80028ce:	9001      	str	r0, [sp, #4]
 80028d0:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80028d2:	4608      	mov	r0, r1
 80028d4:	f7ff ff6a 	bl	80027ac <MCM_Trig_Functions>
 80028d8:	142d      	asrs	r5, r5, #16
 80028da:	1403      	asrs	r3, r0, #16
 80028dc:	b224      	sxth	r4, r4
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 80028de:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80028e2:	b200      	sxth	r0, r0
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 80028e4:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 80028e8:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 80028ec:	fb04 0313 	mls	r3, r4, r3, r0
  return ( Output );
 80028f0:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 80028f4:	2000      	movs	r0, #0
 80028f6:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 80028fa:	f362 000f 	bfi	r0, r2, #0, #16
 80028fe:	f363 401f 	bfi	r0, r3, #16, #16
}
 8002902:	b005      	add	sp, #20
 8002904:	bd30      	pop	{r4, r5, pc}
 8002906:	bf00      	nop

08002908 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8002908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290a:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 800290e:	4b1b      	ldr	r3, [pc, #108]	; (800297c <FOC_Clear+0x74>)
 8002910:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8002914:	eb03 0c41 	add.w	ip, r3, r1, lsl #1
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8002918:	004a      	lsls	r2, r1, #1
  FOCVars[bMotor].Iab = NULL_ab;
 800291a:	2500      	movs	r5, #0
{
 800291c:	4604      	mov	r4, r0
  FOCVars[bMotor].Iqd = NULL_qd;
 800291e:	f102 070c 	add.w	r7, r2, #12
  FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
 8002922:	2626      	movs	r6, #38	; 0x26
  FOCVars[bMotor].Vqd = NULL_qd;
 8002924:	3216      	adds	r2, #22
  FOCVars[bMotor].Iab = NULL_ab;
 8002926:	f843 5011 	str.w	r5, [r3, r1, lsl #1]
  FOCVars[bMotor].Iqd = NULL_qd;
 800292a:	eb07 0e03 	add.w	lr, r7, r3
  FOCVars[bMotor].Iab = NULL_ab;
 800292e:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8002932:	fb06 3604 	mla	r6, r6, r4, r3
  FOCVars[bMotor].Vqd = NULL_qd;
 8002936:	eb02 0c03 	add.w	ip, r2, r3
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800293a:	4811      	ldr	r0, [pc, #68]	; (8002980 <FOC_Clear+0x78>)
  FOCVars[bMotor].Iqd = NULL_qd;
 800293c:	50fd      	str	r5, [r7, r3]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800293e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8002942:	f8ce 5004 	str.w	r5, [lr, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8002946:	4629      	mov	r1, r5
  FOCVars[bMotor].hTeref = (int16_t)0;
 8002948:	83f5      	strh	r5, [r6, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 800294a:	50d5      	str	r5, [r2, r3]
 800294c:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8002950:	8435      	strh	r5, [r6, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8002952:	f004 fba3 	bl	800709c <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8002956:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <FOC_Clear+0x7c>)
 8002958:	4629      	mov	r1, r5
 800295a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800295e:	f004 fb9d 	bl	800709c <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8002962:	4b09      	ldr	r3, [pc, #36]	; (8002988 <FOC_Clear+0x80>)
 8002964:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002968:	f004 ff1e 	bl	80077a8 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800296c:	4b07      	ldr	r3, [pc, #28]	; (800298c <FOC_Clear+0x84>)
 800296e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8002972:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002976:	f004 bd99 	b.w	80074ac <PWMC_SwitchOffPWM>
 800297a:	bf00      	nop
 800297c:	20000b84 	.word	0x20000b84
 8002980:	20000b78 	.word	0x20000b78
 8002984:	20000c34 	.word	0x20000c34
 8002988:	20000c38 	.word	0x20000c38
 800298c:	20000b70 	.word	0x20000b70

08002990 <MCboot>:
{
 8002990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002994:	ed2d 8b02 	vpush	{d8}
  STM_Init(&STM[M1]);
 8002998:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 8002b90 <MCboot+0x200>
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800299c:	4c63      	ldr	r4, [pc, #396]	; (8002b2c <MCboot+0x19c>)
  STO_PLL_Init (&STO_PLL_M1);
 800299e:	ed9f 8a64 	vldr	s16, [pc, #400]	; 8002b30 <MCboot+0x1a0>
  pSTC[M1] = &SpeednTorqCtrlM1;
 80029a2:	4d64      	ldr	r5, [pc, #400]	; (8002b34 <MCboot+0x1a4>)
  PID_HandleInit(&PIDIqHandle_M1);
 80029a4:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 8002b94 <MCboot+0x204>
  PID_HandleInit(&PIDIdHandle_M1);
 80029a8:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 8002b98 <MCboot+0x208>
  NTC_Init(&TempSensorParamsM1);
 80029ac:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8002b9c <MCboot+0x20c>
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 80029b0:	4e61      	ldr	r6, [pc, #388]	; (8002b38 <MCboot+0x1a8>)
{
 80029b2:	b087      	sub	sp, #28
 80029b4:	4603      	mov	r3, r0
  STM_Init(&STM[M1]);
 80029b6:	4658      	mov	r0, fp
{
 80029b8:	461f      	mov	r7, r3
 80029ba:	9103      	str	r1, [sp, #12]
  STM_Init(&STM[M1]);
 80029bc:	f004 ffae 	bl	800791c <STM_Init>
  pCLM[M1] = &CircleLimitationM1;
 80029c0:	4b5e      	ldr	r3, [pc, #376]	; (8002b3c <MCboot+0x1ac>)
  bMCBootCompleted = 0;
 80029c2:	495f      	ldr	r1, [pc, #380]	; (8002b40 <MCboot+0x1b0>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80029c4:	485f      	ldr	r0, [pc, #380]	; (8002b44 <MCboot+0x1b4>)
  pCLM[M1] = &CircleLimitationM1;
 80029c6:	4a60      	ldr	r2, [pc, #384]	; (8002b48 <MCboot+0x1b8>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80029c8:	6020      	str	r0, [r4, #0]
  bMCBootCompleted = 0;
 80029ca:	2400      	movs	r4, #0
 80029cc:	700c      	strb	r4, [r1, #0]
  pCLM[M1] = &CircleLimitationM1;
 80029ce:	601a      	str	r2, [r3, #0]
  ICS_Init(&PWM_Handle_M1);
 80029d0:	f004 f902 	bl	8006bd8 <ICS_Init>
  startTimers();
 80029d4:	f004 fbe8 	bl	80071a8 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 80029d8:	485c      	ldr	r0, [pc, #368]	; (8002b4c <MCboot+0x1bc>)
 80029da:	f004 fb4b 	bl	8007074 <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 80029de:	4a5c      	ldr	r2, [pc, #368]	; (8002b50 <MCboot+0x1c0>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 80029e0:	4b5c      	ldr	r3, [pc, #368]	; (8002b54 <MCboot+0x1c4>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 80029e2:	495a      	ldr	r1, [pc, #360]	; (8002b4c <MCboot+0x1bc>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 80029e4:	602b      	str	r3, [r5, #0]
  STO_PLL_Init (&STO_PLL_M1);
 80029e6:	ee18 0a10 	vmov	r0, s16
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 80029ea:	6011      	str	r1, [r2, #0]
  STO_PLL_Init (&STO_PLL_M1);
 80029ec:	f005 fe14 	bl	8008618 <STO_PLL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &STO_PLL_M1._Super);
 80029f0:	4857      	ldr	r0, [pc, #348]	; (8002b50 <MCboot+0x1c0>)
 80029f2:	ee18 2a10 	vmov	r2, s16
 80029f6:	6801      	ldr	r1, [r0, #0]
 80029f8:	6828      	ldr	r0, [r5, #0]
 80029fa:	f004 febd 	bl	8007778 <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 80029fe:	4856      	ldr	r0, [pc, #344]	; (8002b58 <MCboot+0x1c8>)
 8002a00:	f005 f954 	bl	8007cac <VSS_Init>
  RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8002a04:	4a49      	ldr	r2, [pc, #292]	; (8002b2c <MCboot+0x19c>)
 8002a06:	4855      	ldr	r0, [pc, #340]	; (8002b5c <MCboot+0x1cc>)
 8002a08:	6813      	ldr	r3, [r2, #0]
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	6829      	ldr	r1, [r5, #0]
 8002a0e:	4a52      	ldr	r2, [pc, #328]	; (8002b58 <MCboot+0x1c8>)
 8002a10:	4b53      	ldr	r3, [pc, #332]	; (8002b60 <MCboot+0x1d0>)
 8002a12:	f005 fa45 	bl	8007ea0 <RUC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8002a16:	4650      	mov	r0, sl
 8002a18:	f004 fb2c 	bl	8007074 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8002a1c:	4648      	mov	r0, r9
 8002a1e:	f004 fb29 	bl	8007074 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8002a22:	4b50      	ldr	r3, [pc, #320]	; (8002b64 <MCboot+0x1d4>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8002a24:	4850      	ldr	r0, [pc, #320]	; (8002b68 <MCboot+0x1d8>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8002a26:	f8c3 a000 	str.w	sl, [r3]
  pPIDId[M1] = &PIDIdHandle_M1;
 8002a2a:	4b50      	ldr	r3, [pc, #320]	; (8002b6c <MCboot+0x1dc>)
 8002a2c:	f8c3 9000 	str.w	r9, [r3]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8002a30:	4b4f      	ldr	r3, [pc, #316]	; (8002b70 <MCboot+0x1e0>)
 8002a32:	6018      	str	r0, [r3, #0]
  RVBS_Init(pBusSensorM1);
 8002a34:	f004 fd88 	bl	8007548 <RVBS_Init>
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8002a38:	494d      	ldr	r1, [pc, #308]	; (8002b70 <MCboot+0x1e0>)
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8002a3a:	4b4e      	ldr	r3, [pc, #312]	; (8002b74 <MCboot+0x1e4>)
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8002a3c:	680a      	ldr	r2, [r1, #0]
 8002a3e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8002a42:	4a4d      	ldr	r2, [pc, #308]	; (8002b78 <MCboot+0x1e8>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8002a44:	f8c3 610c 	str.w	r6, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 8002a48:	4640      	mov	r0, r8
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8002a4a:	6013      	str	r3, [r2, #0]
  NTC_Init(&TempSensorParamsM1);
 8002a4c:	f004 face 	bl	8006fec <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8002a50:	494a      	ldr	r1, [pc, #296]	; (8002b7c <MCboot+0x1ec>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8002a52:	4b4b      	ldr	r3, [pc, #300]	; (8002b80 <MCboot+0x1f0>)
 8002a54:	484b      	ldr	r0, [pc, #300]	; (8002b84 <MCboot+0x1f4>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8002a56:	f8c1 8000 	str.w	r8, [r1]
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8002a5a:	6018      	str	r0, [r3, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8002a5c:	f04f 0901 	mov.w	r9, #1
  REMNG_Init(pREMNG[M1]);
 8002a60:	f004 fdc0 	bl	80075e4 <REMNG_Init>
  FOC_Clear(M1);
 8002a64:	4620      	mov	r0, r4
 8002a66:	f7ff ff4f 	bl	8002908 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8002a6a:	f886 9024 	strb.w	r9, [r6, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002a6e:	6828      	ldr	r0, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8002a70:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8002ba0 <MCboot+0x210>
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002a74:	f004 ff3c 	bl	80078f0 <STC_GetDefaultIqdref>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f3c0 420f 	ubfx	r2, r0, #16, #16
 8002a7e:	8233      	strh	r3, [r6, #16]
 8002a80:	8272      	strh	r2, [r6, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002a82:	6828      	ldr	r0, [r5, #0]
 8002a84:	f004 ff34 	bl	80078f0 <STC_GetDefaultIqdref>
  oMCInterface[M1] = & Mci[M1];
 8002a88:	493f      	ldr	r1, [pc, #252]	; (8002b88 <MCboot+0x1f8>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8002a8a:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8002a8c:	f8c8 1000 	str.w	r1, [r8]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002a90:	f3c0 4c0f 	ubfx	ip, r0, #16, #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8002a94:	4633      	mov	r3, r6
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002a96:	f8a6 c014 	strh.w	ip, [r6, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8002a9a:	4608      	mov	r0, r1
 8002a9c:	4659      	mov	r1, fp
 8002a9e:	f7ff fd2f 	bl	8002500 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8002aa2:	6828      	ldr	r0, [r5, #0]
 8002aa4:	f8d8 6000 	ldr.w	r6, [r8]
 8002aa8:	f004 ff18 	bl	80078dc <STC_GetMecSpeedRefUnitDefault>
 8002aac:	4622      	mov	r2, r4
 8002aae:	4601      	mov	r1, r0
 8002ab0:	4630      	mov	r0, r6
 8002ab2:	f7ff fd33 	bl	800251c <MCI_ExecSpeedRamp>
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8002ab6:	4826      	ldr	r0, [pc, #152]	; (8002b50 <MCboot+0x1c0>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8002ab8:	4a1c      	ldr	r2, [pc, #112]	; (8002b2c <MCboot+0x19c>)
  pMCIList[M1] = oMCInterface[M1];
 8002aba:	f8d8 a000 	ldr.w	sl, [r8]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8002abe:	f8d0 8000 	ldr.w	r8, [r0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8002ac2:	4828      	ldr	r0, [pc, #160]	; (8002b64 <MCboot+0x1d4>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8002ac4:	6816      	ldr	r6, [r2, #0]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8002ac6:	4a2a      	ldr	r2, [pc, #168]	; (8002b70 <MCboot+0x1e0>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 8002ac8:	f8d0 e000 	ldr.w	lr, [r0]
  MCT[M1].pPIDId = pPIDId[M1];
 8002acc:	4827      	ldr	r0, [pc, #156]	; (8002b6c <MCboot+0x1dc>)
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8002ace:	6811      	ldr	r1, [r2, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8002ad0:	4a29      	ldr	r2, [pc, #164]	; (8002b78 <MCboot+0x1e8>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8002ad2:	4b2e      	ldr	r3, [pc, #184]	; (8002b8c <MCboot+0x1fc>)
  MCT[M1].pPIDId = pPIDId[M1];
 8002ad4:	f8d0 c000 	ldr.w	ip, [r0]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8002ad8:	4828      	ldr	r0, [pc, #160]	; (8002b7c <MCboot+0x1ec>)
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8002ada:	6812      	ldr	r2, [r2, #0]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8002adc:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8002ade:	6800      	ldr	r0, [r0, #0]
  pMCIList[M1] = oMCInterface[M1];
 8002ae0:	f8c7 a000 	str.w	sl, [r7]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8002ae4:	63da      	str	r2, [r3, #60]	; 0x3c
  MCT[M1].pRevupCtrl = &RevUpControlM1;              /* only if M1 is sensorless*/
 8002ae6:	4a1d      	ldr	r2, [pc, #116]	; (8002b5c <MCboot+0x1cc>)
 8002ae8:	615a      	str	r2, [r3, #20]
  MCT[M1].pSpeedSensorVirtual = &VirtualSpeedSensorM1;  /* only if M1 is sensorless*/
 8002aea:	4a1b      	ldr	r2, [pc, #108]	; (8002b58 <MCboot+0x1c8>)
 8002aec:	621a      	str	r2, [r3, #32]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8002aee:	e9c3 010b 	strd	r0, r1, [r3, #44]	; 0x2c
  pMCTList[M1] = &MCT[M1];
 8002af2:	9a03      	ldr	r2, [sp, #12]
  bMCBootCompleted = 1;
 8002af4:	4912      	ldr	r1, [pc, #72]	; (8002b40 <MCboot+0x1b0>)
  MCT[M1].pPIDId = pPIDId[M1];
 8002af6:	f8c3 c008 	str.w	ip, [r3, #8]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8002afa:	e9c3 8e00 	strd	r8, lr, [r3]
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8002afe:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  MCT[M1].pFF = MC_NULL;
 8002b02:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  MCT[M1].pSCC = MC_NULL;
 8002b06:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8002b0a:	611e      	str	r6, [r3, #16]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8002b0c:	625d      	str	r5, [r3, #36]	; 0x24
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8002b0e:	60dc      	str	r4, [r3, #12]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1;
 8002b10:	ed83 8a06 	vstr	s16, [r3, #24]
  MCT[M1].pSpeedSensorAux = MC_NULL;
 8002b14:	61dc      	str	r4, [r3, #28]
  MCT[M1].pStateMachine = &STM[M1];
 8002b16:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
  MCT[M1].pOTT = MC_NULL;
 8002b1a:	651c      	str	r4, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 8002b1c:	6013      	str	r3, [r2, #0]
  bMCBootCompleted = 1;
 8002b1e:	f881 9000 	strb.w	r9, [r1]
}
 8002b22:	b007      	add	sp, #28
 8002b24:	ecbd 8b02 	vpop	{d8}
 8002b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b2c:	20000b70 	.word	0x20000b70
 8002b30:	200003c8 	.word	0x200003c8
 8002b34:	20000c38 	.word	0x20000c38
 8002b38:	20000b84 	.word	0x20000b84
 8002b3c:	20000c00 	.word	0x20000c00
 8002b40:	2000078a 	.word	0x2000078a
 8002b44:	20000288 	.word	0x20000288
 8002b48:	20000000 	.word	0x20000000
 8002b4c:	20000148 	.word	0x20000148
 8002b50:	20000b74 	.word	0x20000b74
 8002b54:	200004f0 	.word	0x200004f0
 8002b58:	2000057c 	.word	0x2000057c
 8002b5c:	2000033c 	.word	0x2000033c
 8002b60:	200003b4 	.word	0x200003b4
 8002b64:	20000b78 	.word	0x20000b78
 8002b68:	20000314 	.word	0x20000314
 8002b6c:	20000c34 	.word	0x20000c34
 8002b70:	20000c04 	.word	0x20000c04
 8002b74:	20000174 	.word	0x20000174
 8002b78:	20000c30 	.word	0x20000c30
 8002b7c:	20000b6c 	.word	0x20000b6c
 8002b80:	20000c2c 	.word	0x20000c2c
 8002b84:	200002fc 	.word	0x200002fc
 8002b88:	20000c08 	.word	0x20000c08
 8002b8c:	20000bac 	.word	0x20000bac
 8002b90:	20000c24 	.word	0x20000c24
 8002b94:	2000011c 	.word	0x2000011c
 8002b98:	200000f0 	.word	0x200000f0
 8002b9c:	20000524 	.word	0x20000524
 8002ba0:	20000b7c 	.word	0x20000b7c

08002ba4 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop

08002ba8 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8002ba8:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8002baa:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <FOC_CalcCurrRef+0x24>)
 8002bac:	2426      	movs	r4, #38	; 0x26
 8002bae:	fb04 3400 	mla	r4, r4, r0, r3
 8002bb2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002bb6:	b103      	cbz	r3, 8002bba <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8002bb8:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8002bba:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <FOC_CalcCurrRef+0x28>)
 8002bbc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002bc0:	f004 fe5a 	bl	8007878 <STC_CalcTorqueReference>
 8002bc4:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8002bc6:	8220      	strh	r0, [r4, #16]
}
 8002bc8:	bd10      	pop	{r4, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000b84 	.word	0x20000b84
 8002bd0:	20000c38 	.word	0x20000c38

08002bd4 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8002bd4:	4b01      	ldr	r3, [pc, #4]	; (8002bdc <TSK_SetStopPermanencyTimeM1+0x8>)
 8002bd6:	8018      	strh	r0, [r3, #0]
}
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	20000790 	.word	0x20000790

08002be0 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8002be0:	4b03      	ldr	r3, [pc, #12]	; (8002bf0 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8002be2:	8818      	ldrh	r0, [r3, #0]
 8002be4:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8002be6:	fab0 f080 	clz	r0, r0
 8002bea:	0940      	lsrs	r0, r0, #5
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20000790 	.word	0x20000790

08002bf4 <TSK_MediumFrequencyTaskM1>:
{
 8002bf4:	b530      	push	{r4, r5, lr}
  PQD_CalcElMotorPower( pMPM[M1] );
 8002bf6:	4c8e      	ldr	r4, [pc, #568]	; (8002e30 <TSK_MediumFrequencyTaskM1+0x23c>)
  (void) STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8002bf8:	488e      	ldr	r0, [pc, #568]	; (8002e34 <TSK_MediumFrequencyTaskM1+0x240>)
{
 8002bfa:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8002bfc:	2300      	movs	r3, #0
  (void) STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8002bfe:	4669      	mov	r1, sp
  int16_t wAux = 0;
 8002c00:	f8ad 3000 	strh.w	r3, [sp]
  (void) STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8002c04:	f005 fc10 	bl	8008428 <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 8002c08:	6820      	ldr	r0, [r4, #0]
 8002c0a:	f004 fa99 	bl	8007140 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8002c0e:	488a      	ldr	r0, [pc, #552]	; (8002e38 <TSK_MediumFrequencyTaskM1+0x244>)
 8002c10:	f004 ff1c 	bl	8007a4c <STM_GetState>
  switch ( StateM1 )
 8002c14:	3803      	subs	r0, #3
 8002c16:	2810      	cmp	r0, #16
 8002c18:	d856      	bhi.n	8002cc8 <TSK_MediumFrequencyTaskM1+0xd4>
 8002c1a:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002c1e:	007a      	.short	0x007a
 8002c20:	008c0011 	.word	0x008c0011
 8002c24:	00ab00a3 	.word	0x00ab00a3
 8002c28:	00c700be 	.word	0x00c700be
 8002c2c:	00550055 	.word	0x00550055
 8002c30:	00550055 	.word	0x00550055
 8002c34:	00550055 	.word	0x00550055
 8002c38:	00d40055 	.word	0x00d40055
 8002c3c:	005700e1 	.word	0x005700e1
      if ( ! RUC_OTF_Exec( &RevUpControlM1 ) )
 8002c40:	487e      	ldr	r0, [pc, #504]	; (8002e3c <TSK_MediumFrequencyTaskM1+0x248>)
 8002c42:	f005 f9b3 	bl	8007fac <RUC_OTF_Exec>
 8002c46:	2800      	cmp	r0, #0
 8002c48:	f000 80e5 	beq.w	8002e16 <TSK_MediumFrequencyTaskM1+0x222>
        IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 8002c4c:	4b7c      	ldr	r3, [pc, #496]	; (8002e40 <TSK_MediumFrequencyTaskM1+0x24c>)
 8002c4e:	6818      	ldr	r0, [r3, #0]
 8002c50:	f004 fe12 	bl	8007878 <STC_CalcTorqueReference>
        IqdRef.d = FOCVars[M1].UserIdref;
 8002c54:	4b7b      	ldr	r3, [pc, #492]	; (8002e44 <TSK_MediumFrequencyTaskM1+0x250>)
 8002c56:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
        FOCVars[M1].Iqdref = IqdRef;
 8002c5a:	8218      	strh	r0, [r3, #16]
 8002c5c:	825a      	strh	r2, [r3, #18]
      (void) VSS_CalcAvrgMecSpeedUnit( &VirtualSpeedSensorM1, &hForcedMecSpeedUnit );
 8002c5e:	f10d 0102 	add.w	r1, sp, #2
 8002c62:	4879      	ldr	r0, [pc, #484]	; (8002e48 <TSK_MediumFrequencyTaskM1+0x254>)
 8002c64:	f005 f876 	bl	8007d54 <VSS_CalcAvrgMecSpeedUnit>
        ObserverConverged = STO_PLL_IsObserverConverged( &STO_PLL_M1,hForcedMecSpeedUnit );
 8002c68:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002c6c:	4871      	ldr	r0, [pc, #452]	; (8002e34 <TSK_MediumFrequencyTaskM1+0x240>)
 8002c6e:	f005 fd0d 	bl	800868c <STO_PLL_IsObserverConverged>
 8002c72:	4604      	mov	r4, r0
        STO_SetDirection(&STO_PLL_M1, MCI_GetImposedMotorDirection( &Mci[M1]));
 8002c74:	4875      	ldr	r0, [pc, #468]	; (8002e4c <TSK_MediumFrequencyTaskM1+0x258>)
 8002c76:	f7ff fcc9 	bl	800260c <MCI_GetImposedMotorDirection>
 8002c7a:	b2c1      	uxtb	r1, r0
 8002c7c:	486d      	ldr	r0, [pc, #436]	; (8002e34 <TSK_MediumFrequencyTaskM1+0x240>)
 8002c7e:	f005 fdc3 	bl	8008808 <STO_SetDirection>
        (void) VSS_SetStartTransition( &VirtualSpeedSensorM1, ObserverConverged );
 8002c82:	4871      	ldr	r0, [pc, #452]	; (8002e48 <TSK_MediumFrequencyTaskM1+0x254>)
 8002c84:	4621      	mov	r1, r4
 8002c86:	f005 f8f5 	bl	8007e74 <VSS_SetStartTransition>
      if ( ObserverConverged )
 8002c8a:	b1ec      	cbz	r4, 8002cc8 <TSK_MediumFrequencyTaskM1+0xd4>
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8002c8c:	4869      	ldr	r0, [pc, #420]	; (8002e34 <TSK_MediumFrequencyTaskM1+0x240>)
 8002c8e:	4d6d      	ldr	r5, [pc, #436]	; (8002e44 <TSK_MediumFrequencyTaskM1+0x250>)
        REMNG_Init( pREMNG[M1] );
 8002c90:	4c6f      	ldr	r4, [pc, #444]	; (8002e50 <TSK_MediumFrequencyTaskM1+0x25c>)
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8002c92:	f004 fd2f 	bl	80076f4 <SPD_GetElAngle>
 8002c96:	4601      	mov	r1, r0
 8002c98:	6868      	ldr	r0, [r5, #4]
 8002c9a:	f7ff fdd3 	bl	8002844 <MCM_Park>
 8002c9e:	4603      	mov	r3, r0
        REMNG_Init( pREMNG[M1] );
 8002ca0:	6820      	ldr	r0, [r4, #0]
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8002ca2:	9301      	str	r3, [sp, #4]
        REMNG_Init( pREMNG[M1] );
 8002ca4:	f004 fc9e 	bl	80075e4 <REMNG_Init>
        REMNG_ExecRamp( pREMNG[M1], FOCVars[M1].Iqdref.q, 0 );
 8002ca8:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
 8002cac:	6820      	ldr	r0, [r4, #0]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f004 fcde 	bl	8007670 <REMNG_ExecRamp>
        REMNG_ExecRamp( pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION );
 8002cb4:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8002cb8:	6820      	ldr	r0, [r4, #0]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f004 fcd8 	bl	8007670 <REMNG_ExecRamp>
        STM_NextState( &STM[M1], SWITCH_OVER );
 8002cc0:	485d      	ldr	r0, [pc, #372]	; (8002e38 <TSK_MediumFrequencyTaskM1+0x244>)
 8002cc2:	2113      	movs	r1, #19
 8002cc4:	f004 fe4e 	bl	8007964 <STM_NextState>
}
 8002cc8:	b003      	add	sp, #12
 8002cca:	bd30      	pop	{r4, r5, pc}
      if ( ! RUC_OTF_Exec( &RevUpControlM1 ) )
 8002ccc:	485b      	ldr	r0, [pc, #364]	; (8002e3c <TSK_MediumFrequencyTaskM1+0x248>)
 8002cce:	f005 f96d 	bl	8007fac <RUC_OTF_Exec>
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	f000 80a5 	beq.w	8002e22 <TSK_MediumFrequencyTaskM1+0x22e>
        LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1,&hForcedMecSpeedUnit);
 8002cd8:	485b      	ldr	r0, [pc, #364]	; (8002e48 <TSK_MediumFrequencyTaskM1+0x254>)
 8002cda:	a901      	add	r1, sp, #4
 8002cdc:	f005 f83a 	bl	8007d54 <VSS_CalcAvrgMecSpeedUnit>
 8002ce0:	4604      	mov	r4, r0
        LoopClosed |= VSS_TransitionEnded( &VirtualSpeedSensorM1 );
 8002ce2:	4859      	ldr	r0, [pc, #356]	; (8002e48 <TSK_MediumFrequencyTaskM1+0x254>)
 8002ce4:	f005 f8d4 	bl	8007e90 <VSS_TransitionEnded>
        if ( LoopClosed == true )
 8002ce8:	b90c      	cbnz	r4, 8002cee <TSK_MediumFrequencyTaskM1+0xfa>
 8002cea:	2800      	cmp	r0, #0
 8002cec:	d0ec      	beq.n	8002cc8 <TSK_MediumFrequencyTaskM1+0xd4>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8002cee:	4a59      	ldr	r2, [pc, #356]	; (8002e54 <TSK_MediumFrequencyTaskM1+0x260>)
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 8002cf0:	4b54      	ldr	r3, [pc, #336]	; (8002e44 <TSK_MediumFrequencyTaskM1+0x250>)
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8002cf2:	6814      	ldr	r4, [r2, #0]
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 8002cf4:	f9b3 5010 	ldrsh.w	r5, [r3, #16]
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	f004 f9d3 	bl	80070a4 <PID_GetKIDivisor>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8002cfe:	fb05 f100 	mul.w	r1, r5, r0
 8002d02:	4620      	mov	r0, r4
 8002d04:	f004 f9ca 	bl	800709c <PID_SetIntegralTerm>
          STM_NextState( &STM[M1], START_RUN );
 8002d08:	2105      	movs	r1, #5
 8002d0a:	484b      	ldr	r0, [pc, #300]	; (8002e38 <TSK_MediumFrequencyTaskM1+0x244>)
 8002d0c:	f004 fe2a 	bl	8007964 <STM_NextState>
    break;
 8002d10:	e7da      	b.n	8002cc8 <TSK_MediumFrequencyTaskM1+0xd4>
    RUC_Clear( &RevUpControlM1, MCI_GetImposedMotorDirection( oMCInterface[M1] ) );
 8002d12:	4b51      	ldr	r3, [pc, #324]	; (8002e58 <TSK_MediumFrequencyTaskM1+0x264>)
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	f7ff fc79 	bl	800260c <MCI_GetImposedMotorDirection>
 8002d1a:	4601      	mov	r1, r0
 8002d1c:	4847      	ldr	r0, [pc, #284]	; (8002e3c <TSK_MediumFrequencyTaskM1+0x248>)
 8002d1e:	f005 f8fd 	bl	8007f1c <RUC_Clear>
    PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8002d22:	4b4e      	ldr	r3, [pc, #312]	; (8002e5c <TSK_MediumFrequencyTaskM1+0x268>)
 8002d24:	2100      	movs	r1, #0
 8002d26:	6818      	ldr	r0, [r3, #0]
 8002d28:	f004 fbc4 	bl	80074b4 <PWMC_CurrentReadingCalibr>
    STM_NextState( &STM[M1], OFFSET_CALIB );
 8002d2c:	2111      	movs	r1, #17
 8002d2e:	4842      	ldr	r0, [pc, #264]	; (8002e38 <TSK_MediumFrequencyTaskM1+0x244>)
 8002d30:	f004 fe18 	bl	8007964 <STM_NextState>
    break;
 8002d34:	e7c8      	b.n	8002cc8 <TSK_MediumFrequencyTaskM1+0xd4>
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8002d36:	4c42      	ldr	r4, [pc, #264]	; (8002e40 <TSK_MediumFrequencyTaskM1+0x24c>)
 8002d38:	493e      	ldr	r1, [pc, #248]	; (8002e34 <TSK_MediumFrequencyTaskM1+0x240>)
 8002d3a:	6820      	ldr	r0, [r4, #0]
 8002d3c:	f004 fd30 	bl	80077a0 <STC_SetSpeedSensor>
	  FOC_InitAdditionalMethods(M1);
 8002d40:	2000      	movs	r0, #0
 8002d42:	f7ff ff2f 	bl	8002ba4 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8002d46:	2000      	movs	r0, #0
 8002d48:	f7ff ff2e 	bl	8002ba8 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8002d4c:	2106      	movs	r1, #6
 8002d4e:	483a      	ldr	r0, [pc, #232]	; (8002e38 <TSK_MediumFrequencyTaskM1+0x244>)
 8002d50:	f004 fe08 	bl	8007964 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8002d54:	6820      	ldr	r0, [r4, #0]
 8002d56:	f004 fdd9 	bl	800790c <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8002d5a:	4b3f      	ldr	r3, [pc, #252]	; (8002e58 <TSK_MediumFrequencyTaskM1+0x264>)
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	f7ff fc13 	bl	8002588 <MCI_ExecBufferedCommands>
    break;
 8002d62:	e7b1      	b.n	8002cc8 <TSK_MediumFrequencyTaskM1+0xd4>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8002d64:	4b3c      	ldr	r3, [pc, #240]	; (8002e58 <TSK_MediumFrequencyTaskM1+0x264>)
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	f7ff fc0e 	bl	8002588 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	f7ff ff1b 	bl	8002ba8 <FOC_CalcCurrRef>
    break;
 8002d72:	e7a9      	b.n	8002cc8 <TSK_MediumFrequencyTaskM1+0xd4>
    ICS_SwitchOffPWM( pwmcHandle[M1] );
 8002d74:	4b39      	ldr	r3, [pc, #228]	; (8002e5c <TSK_MediumFrequencyTaskM1+0x268>)
 8002d76:	6818      	ldr	r0, [r3, #0]
 8002d78:	f003 fffc 	bl	8006d74 <ICS_SwitchOffPWM>
    FOC_Clear( M1 );
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f7ff fdc3 	bl	8002908 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8002d82:	6820      	ldr	r0, [r4, #0]
 8002d84:	f004 f8ee 	bl	8006f64 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8002d88:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002d8c:	f7ff ff22 	bl	8002bd4 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 8002d90:	2108      	movs	r1, #8
 8002d92:	4829      	ldr	r0, [pc, #164]	; (8002e38 <TSK_MediumFrequencyTaskM1+0x244>)
 8002d94:	f004 fde6 	bl	8007964 <STM_NextState>
    break;
 8002d98:	e796      	b.n	8002cc8 <TSK_MediumFrequencyTaskM1+0xd4>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8002d9a:	f7ff ff21 	bl	8002be0 <TSK_StopPermanencyTimeHasElapsedM1>
 8002d9e:	2800      	cmp	r0, #0
 8002da0:	d092      	beq.n	8002cc8 <TSK_MediumFrequencyTaskM1+0xd4>
      STM_NextState( &STM[M1], STOP_IDLE );
 8002da2:	2109      	movs	r1, #9
 8002da4:	4824      	ldr	r0, [pc, #144]	; (8002e38 <TSK_MediumFrequencyTaskM1+0x244>)
 8002da6:	f004 fddd 	bl	8007964 <STM_NextState>
 8002daa:	e78d      	b.n	8002cc8 <TSK_MediumFrequencyTaskM1+0xd4>
    STC_SetSpeedSensor( pSTC[M1],&VirtualSpeedSensorM1._Super );  	/*  sensor-less */
 8002dac:	4b24      	ldr	r3, [pc, #144]	; (8002e40 <TSK_MediumFrequencyTaskM1+0x24c>)
 8002dae:	4926      	ldr	r1, [pc, #152]	; (8002e48 <TSK_MediumFrequencyTaskM1+0x254>)
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	f004 fcf5 	bl	80077a0 <STC_SetSpeedSensor>
    VSS_Clear( &VirtualSpeedSensorM1 ); /* Reset measured speed in IDLE */
 8002db6:	4824      	ldr	r0, [pc, #144]	; (8002e48 <TSK_MediumFrequencyTaskM1+0x254>)
 8002db8:	f004 ff6a 	bl	8007c90 <VSS_Clear>
    STM_NextState( &STM[M1], IDLE );
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	481e      	ldr	r0, [pc, #120]	; (8002e38 <TSK_MediumFrequencyTaskM1+0x244>)
 8002dc0:	f004 fdd0 	bl	8007964 <STM_NextState>
}
 8002dc4:	e780      	b.n	8002cc8 <TSK_MediumFrequencyTaskM1+0xd4>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8002dc6:	4b25      	ldr	r3, [pc, #148]	; (8002e5c <TSK_MediumFrequencyTaskM1+0x268>)
 8002dc8:	2101      	movs	r1, #1
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	f004 fb72 	bl	80074b4 <PWMC_CurrentReadingCalibr>
 8002dd0:	2800      	cmp	r0, #0
 8002dd2:	f43f af79 	beq.w	8002cc8 <TSK_MediumFrequencyTaskM1+0xd4>
      STM_NextState( &STM[M1], CLEAR );
 8002dd6:	2112      	movs	r1, #18
 8002dd8:	4817      	ldr	r0, [pc, #92]	; (8002e38 <TSK_MediumFrequencyTaskM1+0x244>)
 8002dda:	f004 fdc3 	bl	8007964 <STM_NextState>
 8002dde:	e773      	b.n	8002cc8 <TSK_MediumFrequencyTaskM1+0xd4>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8002de0:	4a17      	ldr	r2, [pc, #92]	; (8002e40 <TSK_MediumFrequencyTaskM1+0x24c>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8002de2:	4b18      	ldr	r3, [pc, #96]	; (8002e44 <TSK_MediumFrequencyTaskM1+0x250>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8002de4:	6810      	ldr	r0, [r2, #0]
 8002de6:	4918      	ldr	r1, [pc, #96]	; (8002e48 <TSK_MediumFrequencyTaskM1+0x254>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8002dee:	f004 fcd7 	bl	80077a0 <STC_SetSpeedSensor>
    STO_PLL_Clear( &STO_PLL_M1 );
 8002df2:	4810      	ldr	r0, [pc, #64]	; (8002e34 <TSK_MediumFrequencyTaskM1+0x240>)
 8002df4:	f005 fbe2 	bl	80085bc <STO_PLL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8002df8:	480f      	ldr	r0, [pc, #60]	; (8002e38 <TSK_MediumFrequencyTaskM1+0x244>)
 8002dfa:	2104      	movs	r1, #4
 8002dfc:	f004 fdb2 	bl	8007964 <STM_NextState>
 8002e00:	2800      	cmp	r0, #0
 8002e02:	f43f af61 	beq.w	8002cc8 <TSK_MediumFrequencyTaskM1+0xd4>
      FOC_Clear( M1 );
 8002e06:	2000      	movs	r0, #0
 8002e08:	f7ff fd7e 	bl	8002908 <FOC_Clear>
      ICS_SwitchOnPWM( pwmcHandle[M1] );
 8002e0c:	4b13      	ldr	r3, [pc, #76]	; (8002e5c <TSK_MediumFrequencyTaskM1+0x268>)
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	f003 ff6c 	bl	8006cec <ICS_SwitchOnPWM>
 8002e14:	e758      	b.n	8002cc8 <TSK_MediumFrequencyTaskM1+0xd4>
        STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 8002e16:	4602      	mov	r2, r0
 8002e18:	2110      	movs	r1, #16
 8002e1a:	4807      	ldr	r0, [pc, #28]	; (8002e38 <TSK_MediumFrequencyTaskM1+0x244>)
 8002e1c:	f004 fd84 	bl	8007928 <STM_FaultProcessing>
 8002e20:	e71d      	b.n	8002c5e <TSK_MediumFrequencyTaskM1+0x6a>
          STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 8002e22:	4602      	mov	r2, r0
 8002e24:	2110      	movs	r1, #16
 8002e26:	4804      	ldr	r0, [pc, #16]	; (8002e38 <TSK_MediumFrequencyTaskM1+0x244>)
 8002e28:	f004 fd7e 	bl	8007928 <STM_FaultProcessing>
 8002e2c:	e74c      	b.n	8002cc8 <TSK_MediumFrequencyTaskM1+0xd4>
 8002e2e:	bf00      	nop
 8002e30:	20000c30 	.word	0x20000c30
 8002e34:	200003c8 	.word	0x200003c8
 8002e38:	20000c24 	.word	0x20000c24
 8002e3c:	2000033c 	.word	0x2000033c
 8002e40:	20000c38 	.word	0x20000c38
 8002e44:	20000b84 	.word	0x20000b84
 8002e48:	2000057c 	.word	0x2000057c
 8002e4c:	20000c08 	.word	0x20000c08
 8002e50:	20000c2c 	.word	0x20000c2c
 8002e54:	20000b74 	.word	0x20000b74
 8002e58:	20000b7c 	.word	0x20000b7c
 8002e5c:	20000b70 	.word	0x20000b70

08002e60 <MC_Scheduler>:
{
 8002e60:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 8002e62:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <MC_Scheduler+0x48>)
 8002e64:	781c      	ldrb	r4, [r3, #0]
 8002e66:	2c01      	cmp	r4, #1
 8002e68:	d000      	beq.n	8002e6c <MC_Scheduler+0xc>
}
 8002e6a:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 8002e6c:	4d0f      	ldr	r5, [pc, #60]	; (8002eac <MC_Scheduler+0x4c>)
 8002e6e:	882b      	ldrh	r3, [r5, #0]
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	b1ab      	cbz	r3, 8002ea0 <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 8002e74:	882b      	ldrh	r3, [r5, #0]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8002e7c:	4a0c      	ldr	r2, [pc, #48]	; (8002eb0 <MC_Scheduler+0x50>)
 8002e7e:	8813      	ldrh	r3, [r2, #0]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	b11b      	cbz	r3, 8002e8c <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 8002e84:	8813      	ldrh	r3, [r2, #0]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8002e8c:	4a09      	ldr	r2, [pc, #36]	; (8002eb4 <MC_Scheduler+0x54>)
 8002e8e:	8813      	ldrh	r3, [r2, #0]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0e9      	beq.n	8002e6a <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 8002e96:	8813      	ldrh	r3, [r2, #0]
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	8013      	strh	r3, [r2, #0]
}
 8002e9e:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 8002ea0:	f7ff fea8 	bl	8002bf4 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8002ea4:	802c      	strh	r4, [r5, #0]
 8002ea6:	e7e9      	b.n	8002e7c <MC_Scheduler+0x1c>
 8002ea8:	2000078a 	.word	0x2000078a
 8002eac:	2000078e 	.word	0x2000078e
 8002eb0:	2000078c 	.word	0x2000078c
 8002eb4:	20000790 	.word	0x20000790

08002eb8 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8002eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  uint16_t hState;  /*  only if sensorless main*/
  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
  if ( STM[M1].bState == SWITCH_OVER )
 8002ebc:	4b57      	ldr	r3, [pc, #348]	; (800301c <TSK_HighFrequencyTask+0x164>)
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8002ebe:	4c58      	ldr	r4, [pc, #352]	; (8003020 <TSK_HighFrequencyTask+0x168>)
  if ( STM[M1].bState == SWITCH_OVER )
 8002ec0:	781b      	ldrb	r3, [r3, #0]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8002ec2:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 8002ec6:	b089      	sub	sp, #36	; 0x24
  if ( STM[M1].bState == SWITCH_OVER )
 8002ec8:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8002eca:	9005      	str	r0, [sp, #20]
  if ( STM[M1].bState == SWITCH_OVER )
 8002ecc:	f000 8092 	beq.w	8002ff4 <TSK_HighFrequencyTask+0x13c>
    if (!REMNG_RampCompleted(pREMNG[M1]))
    {
      FOCVars[M1].Iqdref.q = REMNG_Calc(pREMNG[M1]);
    }
  }
  if(!RUC_Get_SCLowsideOTF_Status(&RevUpControlM1))
 8002ed0:	4854      	ldr	r0, [pc, #336]	; (8003024 <TSK_HighFrequencyTask+0x16c>)
 8002ed2:	f005 f9bb 	bl	800824c <RUC_Get_SCLowsideOTF_Status>
 8002ed6:	4605      	mov	r5, r0
 8002ed8:	2800      	cmp	r0, #0
 8002eda:	d156      	bne.n	8002f8a <TSK_HighFrequencyTask+0xd2>

  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8002edc:	4b52      	ldr	r3, [pc, #328]	; (8003028 <TSK_HighFrequencyTask+0x170>)
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002ede:	f8df 816c 	ldr.w	r8, [pc, #364]	; 800304c <TSK_HighFrequencyTask+0x194>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8002ee2:	6818      	ldr	r0, [r3, #0]
 8002ee4:	f004 fc5e 	bl	80077a4 <STC_GetSpeedSensor>
 8002ee8:	4606      	mov	r6, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8002eea:	f004 fc03 	bl	80076f4 <SPD_GetElAngle>
 8002eee:	4607      	mov	r7, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8002ef0:	4630      	mov	r0, r6
 8002ef2:	f004 fc07 	bl	8007704 <SPD_GetInstElSpeedDpp>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002ef6:	a902      	add	r1, sp, #8
 8002ef8:	f8d8 0000 	ldr.w	r0, [r8]
 8002efc:	f004 f9ac 	bl	8007258 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 8002f00:	9802      	ldr	r0, [sp, #8]
 8002f02:	f7ff fc29 	bl	8002758 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002f06:	4639      	mov	r1, r7
  Ialphabeta = MCM_Clarke(Iab);
 8002f08:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002f0a:	f7ff fc9b 	bl	8002844 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 8002f0e:	4a47      	ldr	r2, [pc, #284]	; (800302c <TSK_HighFrequencyTask+0x174>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002f10:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002f14:	9000      	str	r0, [sp, #0]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002f16:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 8002f18:	1ac9      	subs	r1, r1, r3
 8002f1a:	6810      	ldr	r0, [r2, #0]
 8002f1c:	f004 f8ca 	bl	80070b4 <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002f20:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
  Vqd.d = PI_Controller(pPIDId[M1],
 8002f24:	4b42      	ldr	r3, [pc, #264]	; (8003030 <TSK_HighFrequencyTask+0x178>)
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002f26:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1],
 8002f2a:	4681      	mov	r9, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 8002f2c:	1a89      	subs	r1, r1, r2
 8002f2e:	6818      	ldr	r0, [r3, #0]
 8002f30:	f004 f8c0 	bl	80070b4 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8002f34:	4b3f      	ldr	r3, [pc, #252]	; (8003034 <TSK_HighFrequencyTask+0x17c>)
 8002f36:	f8ad 9004 	strh.w	r9, [sp, #4]
 8002f3a:	f8ad 0006 	strh.w	r0, [sp, #6]
 8002f3e:	9901      	ldr	r1, [sp, #4]
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	f003 fd6d 	bl	8006a20 <Circle_Limitation>
 8002f46:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8002f48:	4630      	mov	r0, r6
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8002f4a:	fa0f f983 	sxth.w	r9, r3
 8002f4e:	141e      	asrs	r6, r3, #16
 8002f50:	9301      	str	r3, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8002f52:	f004 fbd7 	bl	8007704 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002f56:	4639      	mov	r1, r7
 8002f58:	9801      	ldr	r0, [sp, #4]
 8002f5a:	f7ff fcb5 	bl	80028c8 <MCM_Rev_Park>
 8002f5e:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002f60:	f8d8 0000 	ldr.w	r0, [r8]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002f64:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002f66:	f004 f979 	bl	800725c <PWMC_SetPhaseVoltage>
 8002f6a:	4601      	mov	r1, r0
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8002f6c:	9802      	ldr	r0, [sp, #8]
 8002f6e:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8002f70:	9803      	ldr	r0, [sp, #12]
 8002f72:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8002f74:	9800      	ldr	r0, [sp, #0]
 8002f76:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_FOC_DURATION)
 8002f78:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 8002f7a:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Vqd = Vqd;
 8002f7c:	f8a4 9016 	strh.w	r9, [r4, #22]
 8002f80:	8326      	strh	r6, [r4, #24]
  FOCVars[M1].hElAngle = hElAngle;
 8002f82:	8427      	strh	r7, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 8002f84:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_FOC_DURATION)
 8002f88:	d040      	beq.n	800300c <TSK_HighFrequencyTask+0x154>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8002f8a:	4826      	ldr	r0, [pc, #152]	; (8003024 <TSK_HighFrequencyTask+0x16c>)
 8002f8c:	f005 f928 	bl	80081e0 <RUC_FirstAccelerationStageReached>
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8002f90:	4a29      	ldr	r2, [pc, #164]	; (8003038 <TSK_HighFrequencyTask+0x180>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8002f92:	4b2a      	ldr	r3, [pc, #168]	; (800303c <TSK_HighFrequencyTask+0x184>)
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8002f94:	4604      	mov	r4, r0
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8002f96:	6810      	ldr	r0, [r2, #0]
 8002f98:	9006      	str	r0, [sp, #24]
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8002f9a:	6818      	ldr	r0, [r3, #0]
 8002f9c:	f003 fd38 	bl	8006a10 <VBS_GetAvBusVoltage_d>
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8002fa0:	a905      	add	r1, sp, #20
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8002fa2:	4603      	mov	r3, r0
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8002fa4:	4826      	ldr	r0, [pc, #152]	; (8003040 <TSK_HighFrequencyTask+0x188>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8002fa6:	f8ad 301c 	strh.w	r3, [sp, #28]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8002faa:	f005 f953 	bl	8008254 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1); /*  Only in case of Sensor-less */
 8002fae:	4824      	ldr	r0, [pc, #144]	; (8003040 <TSK_HighFrequencyTask+0x188>)
 8002fb0:	f005 fada 	bl	8008568 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (IsAccelerationStageReached == false)
 8002fb4:	b1d4      	cbz	r4, 8002fec <TSK_HighFrequencyTask+0x134>
    hState = STM_GetState(&STM[M1]);
 8002fb6:	4819      	ldr	r0, [pc, #100]	; (800301c <TSK_HighFrequencyTask+0x164>)
 8002fb8:	f004 fd48 	bl	8007a4c <STM_GetState>
    if((hState == START) || (hState == SWITCH_OVER) || (hState == START_RUN)) /*  only for sensor-less*/
 8002fbc:	1f03      	subs	r3, r0, #4
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d905      	bls.n	8002fd0 <TSK_HighFrequencyTask+0x118>
 8002fc4:	2813      	cmp	r0, #19
 8002fc6:	d003      	beq.n	8002fd0 <TSK_HighFrequencyTask+0x118>
}
 8002fc8:	2000      	movs	r0, #0
 8002fca:	b009      	add	sp, #36	; 0x24
 8002fcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8002fd0:	481b      	ldr	r0, [pc, #108]	; (8003040 <TSK_HighFrequencyTask+0x188>)
 8002fd2:	f004 fb8f 	bl	80076f4 <SPD_GetElAngle>
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8002fd6:	a904      	add	r1, sp, #16
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8002fd8:	4603      	mov	r3, r0
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8002fda:	481a      	ldr	r0, [pc, #104]	; (8003044 <TSK_HighFrequencyTask+0x18c>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8002fdc:	f8ad 3010 	strh.w	r3, [sp, #16]
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8002fe0:	f004 fe68 	bl	8007cb4 <VSS_CalcElAngle>
}
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	b009      	add	sp, #36	; 0x24
 8002fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      STO_ResetPLL(&STO_PLL_M1);
 8002fec:	4814      	ldr	r0, [pc, #80]	; (8003040 <TSK_HighFrequencyTask+0x188>)
 8002fee:	f005 fbef 	bl	80087d0 <STO_ResetPLL>
 8002ff2:	e7e0      	b.n	8002fb6 <TSK_HighFrequencyTask+0xfe>
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8002ff4:	4d14      	ldr	r5, [pc, #80]	; (8003048 <TSK_HighFrequencyTask+0x190>)
 8002ff6:	6828      	ldr	r0, [r5, #0]
 8002ff8:	f004 fb1e 	bl	8007638 <REMNG_RampCompleted>
 8002ffc:	2800      	cmp	r0, #0
 8002ffe:	f47f af67 	bne.w	8002ed0 <TSK_HighFrequencyTask+0x18>
      FOCVars[M1].Iqdref.q = REMNG_Calc(pREMNG[M1]);
 8003002:	6828      	ldr	r0, [r5, #0]
 8003004:	f004 faf6 	bl	80075f4 <REMNG_Calc>
 8003008:	8220      	strh	r0, [r4, #16]
 800300a:	e761      	b.n	8002ed0 <TSK_HighFrequencyTask+0x18>
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 800300c:	462a      	mov	r2, r5
 800300e:	4803      	ldr	r0, [pc, #12]	; (800301c <TSK_HighFrequencyTask+0x164>)
 8003010:	f004 fc8a 	bl	8007928 <STM_FaultProcessing>
}
 8003014:	2000      	movs	r0, #0
 8003016:	b009      	add	sp, #36	; 0x24
 8003018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800301c:	20000c24 	.word	0x20000c24
 8003020:	20000b84 	.word	0x20000b84
 8003024:	2000033c 	.word	0x2000033c
 8003028:	20000c38 	.word	0x20000c38
 800302c:	20000b78 	.word	0x20000b78
 8003030:	20000c34 	.word	0x20000c34
 8003034:	20000c00 	.word	0x20000c00
 8003038:	20000b88 	.word	0x20000b88
 800303c:	20000c04 	.word	0x20000c04
 8003040:	200003c8 	.word	0x200003c8
 8003044:	2000057c 	.word	0x2000057c
 8003048:	20000c2c 	.word	0x20000c2c
 800304c:	20000b70 	.word	0x20000b70

08003050 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8003050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8003052:	4b20      	ldr	r3, [pc, #128]	; (80030d4 <TSK_SafetyTask_PWMOFF+0x84>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8003054:	4e20      	ldr	r6, [pc, #128]	; (80030d8 <TSK_SafetyTask_PWMOFF+0x88>)
{
 8003056:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8003058:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800305c:	f003 ffd8 	bl	8007010 <NTC_CalcAvTemp>
 8003060:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8003062:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003066:	f004 fa51 	bl	800750c <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800306a:	f025 050c 	bic.w	r5, r5, #12
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800306e:	4328      	orrs	r0, r5
 8003070:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 8003072:	b334      	cbz	r4, 80030c2 <TSK_SafetyTask_PWMOFF+0x72>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8003074:	4f19      	ldr	r7, [pc, #100]	; (80030dc <TSK_SafetyTask_PWMOFF+0x8c>)
 8003076:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800307a:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 800307e:	43ea      	mvns	r2, r5
 8003080:	b292      	uxth	r2, r2
 8003082:	4629      	mov	r1, r5
 8003084:	4638      	mov	r0, r7
 8003086:	f004 fc4f 	bl	8007928 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 800308a:	4638      	mov	r0, r7
 800308c:	f004 fcde 	bl	8007a4c <STM_GetState>
 8003090:	280a      	cmp	r0, #10
 8003092:	d002      	beq.n	800309a <TSK_SafetyTask_PWMOFF+0x4a>
 8003094:	280b      	cmp	r0, #11
 8003096:	d00e      	beq.n	80030b6 <TSK_SafetyTask_PWMOFF+0x66>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8003098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800309a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800309e:	f004 fa05 	bl	80074ac <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 80030a2:	4620      	mov	r0, r4
 80030a4:	f7ff fc30 	bl	8002908 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80030a8:	4b0d      	ldr	r3, [pc, #52]	; (80030e0 <TSK_SafetyTask_PWMOFF+0x90>)
 80030aa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 80030ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80030b2:	f003 bf57 	b.w	8006f64 <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80030b6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 80030ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80030be:	f004 b9f5 	b.w	80074ac <PWMC_SwitchOffPWM>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 80030c2:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <TSK_SafetyTask_PWMOFF+0x94>)
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	f004 fa57 	bl	8007578 <RVBS_CalcAvVbus>
 80030ca:	f020 000c 	bic.w	r0, r0, #12
 80030ce:	4305      	orrs	r5, r0
 80030d0:	b2ad      	uxth	r5, r5
 80030d2:	e7cf      	b.n	8003074 <TSK_SafetyTask_PWMOFF+0x24>
 80030d4:	20000b6c 	.word	0x20000b6c
 80030d8:	20000b70 	.word	0x20000b70
 80030dc:	20000c24 	.word	0x20000c24
 80030e0:	20000c30 	.word	0x20000c30
 80030e4:	20000c04 	.word	0x20000c04

080030e8 <TSK_SafetyTask>:
{
 80030e8:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <TSK_SafetyTask+0x1c>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d000      	beq.n	80030f4 <TSK_SafetyTask+0xc>
}
 80030f2:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 80030f4:	2000      	movs	r0, #0
 80030f6:	f7ff ffab 	bl	8003050 <TSK_SafetyTask_PWMOFF>
}
 80030fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 80030fe:	f000 bd99 	b.w	8003c34 <RCM_ExecUserConv>
 8003102:	bf00      	nop
 8003104:	2000078a 	.word	0x2000078a

08003108 <MC_RunMotorControlTasks>:
{
 8003108:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 800310a:	4b06      	ldr	r3, [pc, #24]	; (8003124 <MC_RunMotorControlTasks+0x1c>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	b903      	cbnz	r3, 8003112 <MC_RunMotorControlTasks+0xa>
}
 8003110:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8003112:	f7ff fea5 	bl	8002e60 <MC_Scheduler>
    TSK_SafetyTask();
 8003116:	f7ff ffe7 	bl	80030e8 <TSK_SafetyTask>
}
 800311a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 800311e:	f001 b8ef 	b.w	8004300 <UI_Scheduler>
 8003122:	bf00      	nop
 8003124:	2000078a 	.word	0x2000078a

08003128 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8003128:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  ICS_SwitchOffPWM(pwmcHandle[M1]);
 800312a:	4b05      	ldr	r3, [pc, #20]	; (8003140 <TSK_HardwareFaultTask+0x18>)
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	f003 fe21 	bl	8006d74 <ICS_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8003132:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8003136:	4803      	ldr	r0, [pc, #12]	; (8003144 <TSK_HardwareFaultTask+0x1c>)
 8003138:	2200      	movs	r2, #0
 800313a:	2180      	movs	r1, #128	; 0x80
 800313c:	f004 bbf4 	b.w	8007928 <STM_FaultProcessing>
 8003140:	20000b70 	.word	0x20000b70
 8003144:	20000c24 	.word	0x20000c24

08003148 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8003148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800314c:	4b50      	ldr	r3, [pc, #320]	; (8003290 <mc_lock_pins+0x148>)
 800314e:	4951      	ldr	r1, [pc, #324]	; (8003294 <mc_lock_pins+0x14c>)
 8003150:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003152:	2510      	movs	r5, #16
 8003154:	61dd      	str	r5, [r3, #28]
 8003156:	b08e      	sub	sp, #56	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003158:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800315a:	69d8      	ldr	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800315c:	4a4e      	ldr	r2, [pc, #312]	; (8003298 <mc_lock_pins+0x150>)
  temp = READ_REG(GPIOx->LCKR);
 800315e:	900d      	str	r0, [sp, #52]	; 0x34
  (void) temp;
 8003160:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003162:	484e      	ldr	r0, [pc, #312]	; (800329c <mc_lock_pins+0x154>)
 8003164:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003166:	2408      	movs	r4, #8
 8003168:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800316a:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800316c:	69d0      	ldr	r0, [r2, #28]
 800316e:	900c      	str	r0, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003170:	f44f 3482 	mov.w	r4, #66560	; 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003174:	f44f 6780 	mov.w	r7, #1024	; 0x400
  (void) temp;
 8003178:	980c      	ldr	r0, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800317a:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800317c:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800317e:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003180:	69d0      	ldr	r0, [r2, #28]
 8003182:	900b      	str	r0, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003184:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003188:	f44f 30c0 	mov.w	r0, #98304	; 0x18000
  (void) temp;
 800318c:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003190:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003192:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003194:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003196:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 800319a:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
  (void) temp;
 800319e:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80031a2:	f8df c104 	ldr.w	ip, [pc, #260]	; 80032a8 <mc_lock_pins+0x160>
 80031a6:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80031aa:	f44f 7e80 	mov.w	lr, #256	; 0x100
 80031ae:	f8c3 e01c 	str.w	lr, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80031b2:	f8c3 c01c 	str.w	ip, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80031b6:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 80031ba:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 80031be:	f44f 7e00 	mov.w	lr, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80031c2:	f44f 3c81 	mov.w	ip, #66048	; 0x10200
  (void) temp;
 80031c6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80031ca:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80031ce:	f8c3 e01c 	str.w	lr, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80031d2:	f8c3 c01c 	str.w	ip, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80031d6:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 80031da:	f8cd c020 	str.w	ip, [sp, #32]
  (void) temp;
 80031de:	f8dd e020 	ldr.w	lr, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80031e2:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 80032ac <mc_lock_pins+0x164>
 80031e6:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80031ea:	f04f 0e40 	mov.w	lr, #64	; 0x40
 80031ee:	f8c3 e01c 	str.w	lr, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80031f2:	f8c3 c01c 	str.w	ip, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80031f6:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 80031fa:	f8cd c01c 	str.w	ip, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80031fe:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003202:	f44f 3ca0 	mov.w	ip, #81920	; 0x14000
  (void) temp;
 8003206:	f8dd 801c 	ldr.w	r8, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800320a:	f8c2 c01c 	str.w	ip, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800320e:	f8c2 e01c 	str.w	lr, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003212:	f8c2 c01c 	str.w	ip, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003216:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800321a:	f8cd c018 	str.w	ip, [sp, #24]
  (void) temp;
 800321e:	f8dd c018 	ldr.w	ip, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003222:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003224:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003226:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003228:	69dc      	ldr	r4, [r3, #28]
 800322a:	9405      	str	r4, [sp, #20]
  (void) temp;
 800322c:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800322e:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003230:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003232:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003234:	69d0      	ldr	r0, [r2, #28]
 8003236:	9004      	str	r0, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003238:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800323c:	f44f 3090 	mov.w	r0, #73728	; 0x12000
  (void) temp;
 8003240:	9e04      	ldr	r6, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003242:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003244:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003246:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003248:	69d0      	ldr	r0, [r2, #28]
 800324a:	9003      	str	r0, [sp, #12]
  (void) temp;
 800324c:	9c03      	ldr	r4, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800324e:	4814      	ldr	r0, [pc, #80]	; (80032a0 <mc_lock_pins+0x158>)
 8003250:	f8c2 041c 	str.w	r0, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003254:	2420      	movs	r4, #32
 8003256:	f8c2 441c 	str.w	r4, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800325a:	f8c2 041c 	str.w	r0, [r2, #1052]	; 0x41c
  temp = READ_REG(GPIOx->LCKR);
 800325e:	f8d2 041c 	ldr.w	r0, [r2, #1052]	; 0x41c
 8003262:	9002      	str	r0, [sp, #8]
  (void) temp;
 8003264:	9c02      	ldr	r4, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003266:	480f      	ldr	r0, [pc, #60]	; (80032a4 <mc_lock_pins+0x15c>)
 8003268:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800326a:	2402      	movs	r4, #2
 800326c:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800326e:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	9301      	str	r3, [sp, #4]
  (void) temp;
 8003274:	9b01      	ldr	r3, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003276:	f8c2 141c 	str.w	r1, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, PinMask);
 800327a:	f8c2 541c 	str.w	r5, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800327e:	f8c2 141c 	str.w	r1, [r2, #1052]	; 0x41c
  temp = READ_REG(GPIOx->LCKR);
 8003282:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 8003286:	9300      	str	r3, [sp, #0]
  (void) temp;
 8003288:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
}
 800328a:	b00e      	add	sp, #56	; 0x38
 800328c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003290:	40020000 	.word	0x40020000
 8003294:	00010010 	.word	0x00010010
 8003298:	40020400 	.word	0x40020400
 800329c:	00010008 	.word	0x00010008
 80032a0:	00010020 	.word	0x00010020
 80032a4:	00010002 	.word	0x00010002
 80032a8:	00010100 	.word	0x00010100
 80032ac:	00010040 	.word	0x00010040

080032b0 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 80032b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032b4:	b08e      	sub	sp, #56	; 0x38
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 80032b6:	f04f 0800 	mov.w	r8, #0
{
 80032ba:	4616      	mov	r6, r2
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 80032bc:	094a      	lsrs	r2, r1, #5
{
 80032be:	460c      	mov	r4, r1
 80032c0:	461f      	mov	r7, r3
 80032c2:	4605      	mov	r5, r0
  bool bNoError = false; // Default is error
 80032c4:	f88d 8011 	strb.w	r8, [sp, #17]
  if (bMotorSelection != 0)
 80032c8:	d123      	bne.n	8003312 <MCP_ReceivedFrame+0x62>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 80032ca:	2912      	cmp	r1, #18
 80032cc:	d814      	bhi.n	80032f8 <MCP_ReceivedFrame+0x48>
 80032ce:	e8df f011 	tbh	[pc, r1, lsl #1]
 80032d2:	0016      	.short	0x0016
 80032d4:	00db0049 	.word	0x00db0049
 80032d8:	0013016d 	.word	0x0013016d
 80032dc:	017a0013 	.word	0x017a0013
 80032e0:	02030227 	.word	0x02030227
 80032e4:	01a7023f 	.word	0x01a7023f
 80032e8:	01d701c0 	.word	0x01d701c0
 80032ec:	001301f0 	.word	0x001301f0
 80032f0:	00130013 	.word	0x00130013
 80032f4:	00160013 	.word	0x00160013
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 80032f8:	2301      	movs	r3, #1
 80032fa:	f88d 3016 	strb.w	r3, [sp, #22]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 80032fe:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8003302:	2301      	movs	r3, #1
 8003304:	f10d 0216 	add.w	r2, sp, #22
 8003308:	21ff      	movs	r1, #255	; 0xff
 800330a:	47a0      	blx	r4
    }
  }
}
 800330c:	b00e      	add	sp, #56	; 0x38
 800330e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8003312:	3a01      	subs	r2, #1
 8003314:	4641      	mov	r1, r8
 8003316:	9203      	str	r2, [sp, #12]
 8003318:	f001 f848 	bl	80043ac <UI_SetReg>
 800331c:	2800      	cmp	r0, #0
 800331e:	f000 823c 	beq.w	800379a <MCP_ReceivedFrame+0x4ea>
      if (pHandle->pDAC)
 8003322:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
      Code &= 0x1F; /* Mask: 0001|1111 */
 8003326:	f004 041f 	and.w	r4, r4, #31
      if (pHandle->pDAC)
 800332a:	b118      	cbz	r0, 8003334 <MCP_ReceivedFrame+0x84>
        UI_SetReg(&pHandle->pDAC->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1);
 800332c:	9a03      	ldr	r2, [sp, #12]
 800332e:	4641      	mov	r1, r8
 8003330:	f001 f83c 	bl	80043ac <UI_SetReg>
  switch (Code)
 8003334:	2c12      	cmp	r4, #18
 8003336:	f200 8239 	bhi.w	80037ac <MCP_ReceivedFrame+0x4fc>
 800333a:	e8df f014 	tbh	[pc, r4, lsl #1]
 800333e:	01eb      	.short	0x01eb
 8003340:	00a50013 	.word	0x00a50013
 8003344:	02370137 	.word	0x02370137
 8003348:	01440237 	.word	0x01440237
 800334c:	01cd01f1 	.word	0x01cd01f1
 8003350:	01710209 	.word	0x01710209
 8003354:	01a1018a 	.word	0x01a1018a
 8003358:	023701ba 	.word	0x023701ba
 800335c:	02370237 	.word	0x02370237
 8003360:	01eb0237 	.word	0x01eb0237
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8003364:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 8003366:	2305      	movs	r3, #5
 8003368:	f88d 3016 	strb.w	r3, [sp, #22]
      switch (bRegID)
 800336c:	2988      	cmp	r1, #136	; 0x88
 800336e:	f200 8238 	bhi.w	80037e2 <MCP_ReceivedFrame+0x532>
 8003372:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003376:	029c      	.short	0x029c
 8003378:	02360236 	.word	0x02360236
 800337c:	0236027e 	.word	0x0236027e
 8003380:	023a023a 	.word	0x023a023a
 8003384:	023a023a 	.word	0x023a023a
 8003388:	023a023a 	.word	0x023a023a
 800338c:	023a023a 	.word	0x023a023a
 8003390:	023a023a 	.word	0x023a023a
 8003394:	0259023a 	.word	0x0259023a
 8003398:	02360259 	.word	0x02360259
 800339c:	023a0236 	.word	0x023a0236
 80033a0:	023a023a 	.word	0x023a023a
 80033a4:	023a023a 	.word	0x023a023a
 80033a8:	02360236 	.word	0x02360236
 80033ac:	02880236 	.word	0x02880236
 80033b0:	02360292 	.word	0x02360292
 80033b4:	02360236 	.word	0x02360236
 80033b8:	02360236 	.word	0x02360236
 80033bc:	02360236 	.word	0x02360236
 80033c0:	02360236 	.word	0x02360236
 80033c4:	02360236 	.word	0x02360236
 80033c8:	02360236 	.word	0x02360236
 80033cc:	02360236 	.word	0x02360236
 80033d0:	02360236 	.word	0x02360236
 80033d4:	02360236 	.word	0x02360236
 80033d8:	02360236 	.word	0x02360236
 80033dc:	02360236 	.word	0x02360236
 80033e0:	02360236 	.word	0x02360236
 80033e4:	02360236 	.word	0x02360236
 80033e8:	02360236 	.word	0x02360236
 80033ec:	02360236 	.word	0x02360236
 80033f0:	02360236 	.word	0x02360236
 80033f4:	02360236 	.word	0x02360236
 80033f8:	0236023a 	.word	0x0236023a
 80033fc:	02360236 	.word	0x02360236
 8003400:	02590236 	.word	0x02590236
 8003404:	02590259 	.word	0x02590259
 8003408:	02360236 	.word	0x02360236
 800340c:	02360236 	.word	0x02360236
 8003410:	02360236 	.word	0x02360236
 8003414:	0236023a 	.word	0x0236023a
 8003418:	02360236 	.word	0x02360236
 800341c:	023a023a 	.word	0x023a023a
 8003420:	023a023a 	.word	0x023a023a
 8003424:	023a023a 	.word	0x023a023a
 8003428:	0236023a 	.word	0x0236023a
 800342c:	02360259 	.word	0x02360259
 8003430:	02360236 	.word	0x02360236
 8003434:	02360236 	.word	0x02360236
 8003438:	0236023a 	.word	0x0236023a
 800343c:	023a0236 	.word	0x023a0236
 8003440:	0236023a 	.word	0x0236023a
 8003444:	02360236 	.word	0x02360236
 8003448:	02360236 	.word	0x02360236
 800344c:	02360236 	.word	0x02360236
 8003450:	02360236 	.word	0x02360236
 8003454:	02360236 	.word	0x02360236
 8003458:	02360236 	.word	0x02360236
 800345c:	027e0236 	.word	0x027e0236
 8003460:	02590259 	.word	0x02590259
 8003464:	02590259 	.word	0x02590259
 8003468:	02360259 	.word	0x02360259
 800346c:	02360236 	.word	0x02360236
 8003470:	02590259 	.word	0x02590259
 8003474:	02360236 	.word	0x02360236
 8003478:	02360236 	.word	0x02360236
 800347c:	02360236 	.word	0x02360236
 8003480:	023a0236 	.word	0x023a0236
 8003484:	023a023a 	.word	0x023a023a
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8003488:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 800348a:	2303      	movs	r3, #3
 800348c:	f88d 3016 	strb.w	r3, [sp, #22]
      switch (bRegID)
 8003490:	2988      	cmp	r1, #136	; 0x88
 8003492:	f200 813f 	bhi.w	8003714 <MCP_ReceivedFrame+0x464>
 8003496:	e8df f011 	tbh	[pc, r1, lsl #1]
 800349a:	01da      	.short	0x01da
 800349c:	01da01b5 	.word	0x01da01b5
 80034a0:	01b501da 	.word	0x01b501da
 80034a4:	01920192 	.word	0x01920192
 80034a8:	01920192 	.word	0x01920192
 80034ac:	01920192 	.word	0x01920192
 80034b0:	01920192 	.word	0x01920192
 80034b4:	01920192 	.word	0x01920192
 80034b8:	01920192 	.word	0x01920192
 80034bc:	01920192 	.word	0x01920192
 80034c0:	01920192 	.word	0x01920192
 80034c4:	01920192 	.word	0x01920192
 80034c8:	01920192 	.word	0x01920192
 80034cc:	01920192 	.word	0x01920192
 80034d0:	02300192 	.word	0x02300192
 80034d4:	01b5021c 	.word	0x01b5021c
 80034d8:	01920192 	.word	0x01920192
 80034dc:	01da0192 	.word	0x01da0192
 80034e0:	013d013d 	.word	0x013d013d
 80034e4:	013d013d 	.word	0x013d013d
 80034e8:	013d013d 	.word	0x013d013d
 80034ec:	013d013d 	.word	0x013d013d
 80034f0:	013d013d 	.word	0x013d013d
 80034f4:	013d013d 	.word	0x013d013d
 80034f8:	013d013d 	.word	0x013d013d
 80034fc:	013d013d 	.word	0x013d013d
 8003500:	013d013d 	.word	0x013d013d
 8003504:	013d013d 	.word	0x013d013d
 8003508:	013d013d 	.word	0x013d013d
 800350c:	013d013d 	.word	0x013d013d
 8003510:	013d013d 	.word	0x013d013d
 8003514:	013d013d 	.word	0x013d013d
 8003518:	013d013d 	.word	0x013d013d
 800351c:	013d0192 	.word	0x013d0192
 8003520:	013d013d 	.word	0x013d013d
 8003524:	01b5013d 	.word	0x01b5013d
 8003528:	01b501b5 	.word	0x01b501b5
 800352c:	01920192 	.word	0x01920192
 8003530:	01920192 	.word	0x01920192
 8003534:	01b501da 	.word	0x01b501da
 8003538:	01920192 	.word	0x01920192
 800353c:	01920192 	.word	0x01920192
 8003540:	01920192 	.word	0x01920192
 8003544:	01920192 	.word	0x01920192
 8003548:	01920192 	.word	0x01920192
 800354c:	01da0192 	.word	0x01da0192
 8003550:	013d01b5 	.word	0x013d01b5
 8003554:	01920192 	.word	0x01920192
 8003558:	01920192 	.word	0x01920192
 800355c:	013d0192 	.word	0x013d0192
 8003560:	0192013d 	.word	0x0192013d
 8003564:	01da0192 	.word	0x01da0192
 8003568:	01b501da 	.word	0x01b501da
 800356c:	01b501b5 	.word	0x01b501b5
 8003570:	01b501b5 	.word	0x01b501b5
 8003574:	019201da 	.word	0x019201da
 8003578:	01b50192 	.word	0x01b50192
 800357c:	0192013d 	.word	0x0192013d
 8003580:	01da0192 	.word	0x01da0192
 8003584:	01b501b5 	.word	0x01b501b5
 8003588:	01b501b5 	.word	0x01b501b5
 800358c:	01b501b5 	.word	0x01b501b5
 8003590:	01b501b5 	.word	0x01b501b5
 8003594:	01b501b5 	.word	0x01b501b5
 8003598:	01da01b5 	.word	0x01da01b5
 800359c:	01da013d 	.word	0x01da013d
 80035a0:	01b501b5 	.word	0x01b501b5
 80035a4:	019201b5 	.word	0x019201b5
 80035a8:	01920192 	.word	0x01920192
      bErrorCode = ERROR_CODE_WRONG_CMD;
 80035ac:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 80035ae:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 80035b0:	f88d 3016 	strb.w	r3, [sp, #22]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 80035b4:	4628      	mov	r0, r5
 80035b6:	f001 f867 	bl	8004688 <UI_ExecCmd>
 80035ba:	f88d 0011 	strb.w	r0, [sp, #17]
    if (bNoError)
 80035be:	2800      	cmp	r0, #0
 80035c0:	f43f ae9d 	beq.w	80032fe <MCP_ReceivedFrame+0x4e>
 80035c4:	e03c      	b.n	8003640 <MCP_ReceivedFrame+0x390>
 80035c6:	ac06      	add	r4, sp, #24
 80035c8:	2100      	movs	r1, #0
 80035ca:	4620      	mov	r0, r4
 80035cc:	2220      	movs	r2, #32
 80035ce:	f005 f949 	bl	8008864 <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80035d2:	f8d5 60c0 	ldr.w	r6, [r5, #192]	; 0xc0
 80035d6:	f10d 001a 	add.w	r0, sp, #26
 80035da:	1e71      	subs	r1, r6, #1
 80035dc:	2300      	movs	r3, #0
 80035de:	e005      	b.n	80035ec <MCP_ReceivedFrame+0x33c>
 80035e0:	3301      	adds	r3, #1
 80035e2:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 80035e4:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80035e8:	f000 8192 	beq.w	8003910 <MCP_ReceivedFrame+0x660>
 80035ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80035f0:	2a09      	cmp	r2, #9
 80035f2:	d1f5      	bne.n	80035e0 <MCP_ReceivedFrame+0x330>
 80035f4:	1d5a      	adds	r2, r3, #5
 80035f6:	1dd9      	adds	r1, r3, #7
 80035f8:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 80035fa:	5cb2      	ldrb	r2, [r6, r2]
 80035fc:	f88d 2018 	strb.w	r2, [sp, #24]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8003600:	5c72      	ldrb	r2, [r6, r1]
 8003602:	f88d 2019 	strb.w	r2, [sp, #25]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8003606:	5cf3      	ldrb	r3, [r6, r3]
 8003608:	f88d 301a 	strb.w	r3, [sp, #26]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 800360c:	4622      	mov	r2, r4
 800360e:	2320      	movs	r3, #32
 8003610:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8003614:	21f0      	movs	r1, #240	; 0xf0
 8003616:	47a0      	blx	r4
      bNoError = true;
 8003618:	2301      	movs	r3, #1
 800361a:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 800361e:	e00f      	b.n	8003640 <MCP_ReceivedFrame+0x390>
      hIdRef = buffer[2] + (buffer[3] << 8);
 8003620:	78f0      	ldrb	r0, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8003622:	7873      	ldrb	r3, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8003624:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8003626:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8003628:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 800362c:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8003630:	b212      	sxth	r2, r2
 8003632:	b209      	sxth	r1, r1
 8003634:	4628      	mov	r0, r5
 8003636:	f001 f8bb 	bl	80047b0 <UI_SetCurrentReferences>
      bNoError = true;
 800363a:	2301      	movs	r3, #1
 800363c:	f88d 3011 	strb.w	r3, [sp, #17]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8003640:	2300      	movs	r3, #0
 8003642:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8003646:	461a      	mov	r2, r3
 8003648:	21f0      	movs	r1, #240	; 0xf0
 800364a:	47a0      	blx	r4
}
 800364c:	b00e      	add	sp, #56	; 0x38
 800364e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8003652:	4cb1      	ldr	r4, [pc, #708]	; (8003918 <MCP_ReceivedFrame+0x668>)
      stepList.data = buffer;
 8003654:	9606      	str	r6, [sp, #24]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8003656:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8003658:	4621      	mov	r1, r4
 800365a:	a806      	add	r0, sp, #24
      stepList.len = Size;
 800365c:	f88d 701c 	strb.w	r7, [sp, #28]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8003660:	f88d 3016 	strb.w	r3, [sp, #22]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8003664:	f001 f8b6 	bl	80047d4 <UI_GetMPInfo>
 8003668:	f88d 0011 	strb.w	r0, [sp, #17]
      if (bNoError)
 800366c:	2800      	cmp	r0, #0
 800366e:	f43f ae46 	beq.w	80032fe <MCP_ReceivedFrame+0x4e>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8003672:	e9d5 060c 	ldrd	r0, r6, [r5, #48]	; 0x30
 8003676:	7923      	ldrb	r3, [r4, #4]
 8003678:	6822      	ldr	r2, [r4, #0]
 800367a:	21f0      	movs	r1, #240	; 0xf0
 800367c:	47b0      	blx	r6
  if (RequireAck)
 800367e:	e645      	b.n	800330c <MCP_ReceivedFrame+0x5c>
 8003680:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8003684:	ac06      	add	r4, sp, #24
 8003686:	3b01      	subs	r3, #1
 8003688:	4622      	mov	r2, r4
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 800368a:	2000      	movs	r0, #0
 800368c:	e004      	b.n	8003698 <MCP_ReceivedFrame+0x3e8>
 800368e:	3001      	adds	r0, #1
 8003690:	2820      	cmp	r0, #32
        outBuff[i] = pHandle->s_fwVer[i];
 8003692:	f802 1b01 	strb.w	r1, [r2], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8003696:	d0b9      	beq.n	800360c <MCP_ReceivedFrame+0x35c>
 8003698:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800369c:	b2c6      	uxtb	r6, r0
 800369e:	2900      	cmp	r1, #0
 80036a0:	d1f5      	bne.n	800368e <MCP_ReceivedFrame+0x3de>
        outBuff[i] = 0;
 80036a2:	f1c6 021f 	rsb	r2, r6, #31
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	3201      	adds	r2, #1
 80036aa:	4420      	add	r0, r4
 80036ac:	f005 f8da 	bl	8008864 <memset>
 80036b0:	e7ac      	b.n	800360c <MCP_ReceivedFrame+0x35c>
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80036b2:	7970      	ldrb	r0, [r6, #5]
 80036b4:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80036b6:	7873      	ldrb	r3, [r6, #1]
 80036b8:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80036ba:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80036be:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 80036c2:	b292      	uxth	r2, r2
 80036c4:	b209      	sxth	r1, r1
 80036c6:	4628      	mov	r0, r5
 80036c8:	f001 f82e 	bl	8004728 <UI_ExecTorqueRamp>
 80036cc:	f88d 0011 	strb.w	r0, [sp, #17]
    if (bNoError)
 80036d0:	2800      	cmp	r0, #0
 80036d2:	f43f ae14 	beq.w	80032fe <MCP_ReceivedFrame+0x4e>
 80036d6:	e7b3      	b.n	8003640 <MCP_ReceivedFrame+0x390>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 80036d8:	f10d 0316 	add.w	r3, sp, #22
 80036dc:	7831      	ldrb	r1, [r6, #0]
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	f10d 0212 	add.w	r2, sp, #18
 80036e4:	ab05      	add	r3, sp, #20
 80036e6:	4628      	mov	r0, r5
 80036e8:	f001 f828 	bl	800473c <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 80036ec:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
      outBuff[4] = (uint8_t)(FinalTorque);
 80036f0:	f8bd 1016 	ldrh.w	r1, [sp, #22]
      outBuff[6] = (uint8_t)(Durationms);
 80036f4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
      outBuff[4] = (uint8_t)(FinalTorque);
 80036f8:	f8ad 101c 	strh.w	r1, [sp, #28]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 80036fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003700:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 8003702:	9306      	str	r3, [sp, #24]
      outBuff[6] = (uint8_t)(Durationms);
 8003704:	f8ad 201e 	strh.w	r2, [sp, #30]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8003708:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 800370c:	2308      	movs	r3, #8
 800370e:	aa06      	add	r2, sp, #24
 8003710:	21f0      	movs	r1, #240	; 0xf0
 8003712:	47a0      	blx	r4
  if (RequireAck)
 8003714:	f89d 0011 	ldrb.w	r0, [sp, #17]
    if (bNoError)
 8003718:	2800      	cmp	r0, #0
 800371a:	f43f adf0 	beq.w	80032fe <MCP_ReceivedFrame+0x4e>
 800371e:	e78f      	b.n	8003640 <MCP_ReceivedFrame+0x390>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8003720:	7877      	ldrb	r7, [r6, #1]
 8003722:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8003724:	7970      	ldrb	r0, [r6, #5]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8003726:	78b4      	ldrb	r4, [r6, #2]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8003728:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 800372a:	78f1      	ldrb	r1, [r6, #3]
 800372c:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8003730:	eb03 4304 	add.w	r3, r3, r4, lsl #16
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8003734:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8003738:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 800373c:	b292      	uxth	r2, r2
 800373e:	4628      	mov	r0, r5
 8003740:	f000 ffe0 	bl	8004704 <UI_ExecSpeedRamp>
 8003744:	f88d 0011 	strb.w	r0, [sp, #17]
    if (bNoError)
 8003748:	2800      	cmp	r0, #0
 800374a:	f43f add8 	beq.w	80032fe <MCP_ReceivedFrame+0x4e>
 800374e:	e777      	b.n	8003640 <MCP_ReceivedFrame+0x390>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8003750:	78b1      	ldrb	r1, [r6, #2]
 8003752:	7873      	ldrb	r3, [r6, #1]
 8003754:	78f2      	ldrb	r2, [r6, #3]
 8003756:	7934      	ldrb	r4, [r6, #4]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8003758:	7970      	ldrb	r0, [r6, #5]
      hDurationms = buffer[7] + (buffer[8] << 8);
 800375a:	7a37      	ldrb	r7, [r6, #8]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 800375c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8003760:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8003764:	4a6d      	ldr	r2, [pc, #436]	; (800391c <MCP_ReceivedFrame+0x66c>)
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8003766:	79b1      	ldrb	r1, [r6, #6]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8003768:	eb03 6304 	add.w	r3, r3, r4, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 800376c:	fb82 4203 	smull	r4, r2, r2, r3
      hDurationms = buffer[7] + (buffer[8] << 8);
 8003770:	79f4      	ldrb	r4, [r6, #7]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8003772:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8003776:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 800377a:	b200      	sxth	r0, r0
      hDurationms = buffer[7] + (buffer[8] << 8);
 800377c:	eb04 2207 	add.w	r2, r4, r7, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8003780:	7831      	ldrb	r1, [r6, #0]
 8003782:	9000      	str	r0, [sp, #0]
 8003784:	b21b      	sxth	r3, r3
 8003786:	b292      	uxth	r2, r2
 8003788:	4628      	mov	r0, r5
 800378a:	f000 fff5 	bl	8004778 <UI_SetRevupData>
 800378e:	f88d 0011 	strb.w	r0, [sp, #17]
    if (bNoError)
 8003792:	2800      	cmp	r0, #0
 8003794:	f43f adb3 	beq.w	80032fe <MCP_ReceivedFrame+0x4e>
 8003798:	e752      	b.n	8003640 <MCP_ReceivedFrame+0x390>
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 800379a:	f89d 0011 	ldrb.w	r0, [sp, #17]
 800379e:	230b      	movs	r3, #11
 80037a0:	f88d 3016 	strb.w	r3, [sp, #22]
    if (bNoError)
 80037a4:	2800      	cmp	r0, #0
 80037a6:	f43f adaa 	beq.w	80032fe <MCP_ReceivedFrame+0x4e>
 80037aa:	e749      	b.n	8003640 <MCP_ReceivedFrame+0x390>
 80037ac:	f89d 0011 	ldrb.w	r0, [sp, #17]
      bErrorCode = ERROR_BAD_FRAME_ID;
 80037b0:	2301      	movs	r3, #1
 80037b2:	f88d 3016 	strb.w	r3, [sp, #22]
    if (bNoError)
 80037b6:	2800      	cmp	r0, #0
 80037b8:	f43f ada1 	beq.w	80032fe <MCP_ReceivedFrame+0x4e>
 80037bc:	e740      	b.n	8003640 <MCP_ReceivedFrame+0x390>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80037be:	f10d 0211 	add.w	r2, sp, #17
 80037c2:	4628      	mov	r0, r5
 80037c4:	f001 f81a 	bl	80047fc <UI_GetReg>
          if ( bNoError == true )
 80037c8:	f89d 3011 	ldrb.w	r3, [sp, #17]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80037cc:	9006      	str	r0, [sp, #24]
          if ( bNoError == true )
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f43f ad95 	beq.w	80032fe <MCP_ReceivedFrame+0x4e>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 80037d4:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 80037d8:	2302      	movs	r3, #2
 80037da:	aa06      	add	r2, sp, #24
 80037dc:	21f0      	movs	r1, #240	; 0xf0
 80037de:	47a0      	blx	r4
  if (RequireAck)
 80037e0:	e594      	b.n	800330c <MCP_ReceivedFrame+0x5c>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 80037e2:	2302      	movs	r3, #2
 80037e4:	f88d 3016 	strb.w	r3, [sp, #22]
 80037e8:	e794      	b.n	8003714 <MCP_ReceivedFrame+0x464>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 80037ea:	78b2      	ldrb	r2, [r6, #2]
 80037ec:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 80037ee:	4628      	mov	r0, r5
 80037f0:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 80037f4:	f000 fdda 	bl	80043ac <UI_SetReg>
 80037f8:	f88d 0011 	strb.w	r0, [sp, #17]
    if (bNoError)
 80037fc:	2800      	cmp	r0, #0
 80037fe:	f43f ad7e 	beq.w	80032fe <MCP_ReceivedFrame+0x4e>
 8003802:	e71d      	b.n	8003640 <MCP_ReceivedFrame+0x390>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8003804:	f10d 0211 	add.w	r2, sp, #17
 8003808:	4628      	mov	r0, r5
 800380a:	f000 fff7 	bl	80047fc <UI_GetReg>
          if ( bNoError == true )
 800380e:	f89d 3011 	ldrb.w	r3, [sp, #17]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8003812:	9006      	str	r0, [sp, #24]
          if ( bNoError == true )
 8003814:	2b00      	cmp	r3, #0
 8003816:	f43f ad72 	beq.w	80032fe <MCP_ReceivedFrame+0x4e>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 800381a:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 800381e:	2304      	movs	r3, #4
 8003820:	aa06      	add	r2, sp, #24
 8003822:	21f0      	movs	r1, #240	; 0xf0
 8003824:	47a0      	blx	r4
  if (RequireAck)
 8003826:	e571      	b.n	800330c <MCP_ReceivedFrame+0x5c>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8003828:	78b4      	ldrb	r4, [r6, #2]
 800382a:	7873      	ldrb	r3, [r6, #1]
 800382c:	78f0      	ldrb	r0, [r6, #3]
 800382e:	7932      	ldrb	r2, [r6, #4]
 8003830:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8003834:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8003838:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 800383c:	4628      	mov	r0, r5
 800383e:	f000 fdb5 	bl	80043ac <UI_SetReg>
 8003842:	f88d 0011 	strb.w	r0, [sp, #17]
    if (bNoError)
 8003846:	2800      	cmp	r0, #0
 8003848:	f43f ad59 	beq.w	80032fe <MCP_ReceivedFrame+0x4e>
 800384c:	e6f8      	b.n	8003640 <MCP_ReceivedFrame+0x390>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 800384e:	f10d 0211 	add.w	r2, sp, #17
 8003852:	4628      	mov	r0, r5
 8003854:	f000 ffd2 	bl	80047fc <UI_GetReg>
           if ( bNoError == true )
 8003858:	f89d 3011 	ldrb.w	r3, [sp, #17]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 800385c:	9006      	str	r0, [sp, #24]
           if ( bNoError == true )
 800385e:	2b00      	cmp	r3, #0
 8003860:	f43f ad4d 	beq.w	80032fe <MCP_ReceivedFrame+0x4e>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8003864:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8003868:	2301      	movs	r3, #1
 800386a:	aa06      	add	r2, sp, #24
 800386c:	21f0      	movs	r1, #240	; 0xf0
 800386e:	47a0      	blx	r4
  if (RequireAck)
 8003870:	e54c      	b.n	800330c <MCP_ReceivedFrame+0x5c>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8003872:	7872      	ldrb	r2, [r6, #1]
 8003874:	4628      	mov	r0, r5
 8003876:	f000 fd99 	bl	80043ac <UI_SetReg>
 800387a:	f88d 0011 	strb.w	r0, [sp, #17]
    if (bNoError)
 800387e:	2800      	cmp	r0, #0
 8003880:	f43f ad3d 	beq.w	80032fe <MCP_ReceivedFrame+0x4e>
 8003884:	e6dc      	b.n	8003640 <MCP_ReceivedFrame+0x390>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH0, (MC_Protocol_REG_t)(buffer[1]));
 8003886:	7872      	ldrb	r2, [r6, #1]
 8003888:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 800388c:	2100      	movs	r1, #0
 800388e:	f000 ffab 	bl	80047e8 <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 8003892:	2301      	movs	r3, #1
 8003894:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 8003898:	e6d2      	b.n	8003640 <MCP_ReceivedFrame+0x390>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH1, (MC_Protocol_REG_t)(buffer[1]));
 800389a:	7872      	ldrb	r2, [r6, #1]
 800389c:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 80038a0:	2101      	movs	r1, #1
 80038a2:	f000 ffa1 	bl	80047e8 <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 80038a6:	2301      	movs	r3, #1
 80038a8:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 80038ac:	e6c8      	b.n	8003640 <MCP_ReceivedFrame+0x390>
          int32_t wValue = (int32_t)(buffer[1]);
 80038ae:	7872      	ldrb	r2, [r6, #1]
          UI_SetReg(&pHandle->pDAC->_Super, bRegID, wValue);
 80038b0:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 80038b4:	9203      	str	r2, [sp, #12]
 80038b6:	2100      	movs	r1, #0
 80038b8:	f000 fd78 	bl	80043ac <UI_SetReg>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 80038bc:	9a03      	ldr	r2, [sp, #12]
 80038be:	2100      	movs	r1, #0
 80038c0:	4628      	mov	r0, r5
 80038c2:	f000 fd73 	bl	80043ac <UI_SetReg>
 80038c6:	f88d 0011 	strb.w	r0, [sp, #17]
    if (bNoError)
 80038ca:	2800      	cmp	r0, #0
 80038cc:	f43f ad17 	beq.w	80032fe <MCP_ReceivedFrame+0x4e>
 80038d0:	e6b6      	b.n	8003640 <MCP_ReceivedFrame+0x390>
          if (pHandle->pDAC)
 80038d2:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 80038d6:	2800      	cmp	r0, #0
 80038d8:	f43f af1c 	beq.w	8003714 <MCP_ReceivedFrame+0x464>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 80038dc:	2101      	movs	r1, #1
 80038de:	f000 ff87 	bl	80047f0 <UI_GetDAC>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 80038e2:	2301      	movs	r3, #1
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 80038e4:	f88d 0018 	strb.w	r0, [sp, #24]
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 80038e8:	aa06      	add	r2, sp, #24
 80038ea:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 80038ee:	21f0      	movs	r1, #240	; 0xf0
 80038f0:	47a0      	blx	r4
            bNoError = true;
 80038f2:	2301      	movs	r3, #1
 80038f4:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 80038f8:	e6a2      	b.n	8003640 <MCP_ReceivedFrame+0x390>
          if (pHandle->pDAC)
 80038fa:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 80038fe:	2800      	cmp	r0, #0
 8003900:	f43f af08 	beq.w	8003714 <MCP_ReceivedFrame+0x464>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH0);
 8003904:	2100      	movs	r1, #0
 8003906:	f000 ff73 	bl	80047f0 <UI_GetDAC>
 800390a:	f88d 0018 	strb.w	r0, [sp, #24]
 800390e:	e7a9      	b.n	8003864 <MCP_ReceivedFrame+0x5b4>
 8003910:	2326      	movs	r3, #38	; 0x26
 8003912:	2124      	movs	r1, #36	; 0x24
 8003914:	2222      	movs	r2, #34	; 0x22
 8003916:	e670      	b.n	80035fa <MCP_ReceivedFrame+0x34a>
 8003918:	20000794 	.word	0x20000794
 800391c:	2aaaaaab 	.word	0x2aaaaaab

08003920 <MCP_WaitNextFrame>:
{
 8003920:	b510      	push	{r4, lr}
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8003922:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 8003924:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8003926:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003928:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 800392a:	2380      	movs	r3, #128	; 0x80
 800392c:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
  pHandle->fFcpReceive(pHandle->pFCP);
 8003930:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003932:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
 8003934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8003938:	4718      	bx	r3
 800393a:	bf00      	nop

0800393c <MCP_Init>:
{
 800393c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800393e:	b083      	sub	sp, #12
 8003940:	4604      	mov	r4, r0
 8003942:	461d      	mov	r5, r3
 8003944:	4608      	mov	r0, r1
  pHandle->pDAC = pDAC;
 8003946:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
 8003948:	990a      	ldr	r1, [sp, #40]	; 0x28
  FCP_SetClient( pFCP, pHandle,
 800394a:	4f0a      	ldr	r7, [pc, #40]	; (8003974 <MCP_Init+0x38>)
  pHandle->pFCP = pFCP;
 800394c:	6320      	str	r0, [r4, #48]	; 0x30
  pHandle->s_fwVer = s_fwVer;
 800394e:	e9c4 1330 	strd	r1, r3, [r4, #192]	; 0xc0
{
 8003952:	4616      	mov	r6, r2
  FCP_SetClient( pFCP, pHandle,
 8003954:	4b08      	ldr	r3, [pc, #32]	; (8003978 <MCP_Init+0x3c>)
 8003956:	4a09      	ldr	r2, [pc, #36]	; (800397c <MCP_Init+0x40>)
 8003958:	9700      	str	r7, [sp, #0]
 800395a:	4621      	mov	r1, r4
{
 800395c:	9f08      	ldr	r7, [sp, #32]
  FCP_SetClient( pFCP, pHandle,
 800395e:	f003 f8af 	bl	8006ac0 <FCP_SetClient>
  pHandle->fFcpReceive = fFcpReceive;
 8003962:	e9c4 650d 	strd	r6, r5, [r4, #52]	; 0x34
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8003966:	63e7      	str	r7, [r4, #60]	; 0x3c
  MCP_WaitNextFrame(pHandle);
 8003968:	4620      	mov	r0, r4
 800396a:	f7ff ffd9 	bl	8003920 <MCP_WaitNextFrame>
}
 800396e:	b003      	add	sp, #12
 8003970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003972:	bf00      	nop
 8003974:	08003981 	.word	0x08003981
 8003978:	080032b1 	.word	0x080032b1
 800397c:	08003989 	.word	0x08003989

08003980 <MCP_OnTimeOut>:
{
 8003980:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 8003982:	f7ff ffcd 	bl	8003920 <MCP_WaitNextFrame>
}
 8003986:	bd08      	pop	{r3, pc}

08003988 <MCP_SentFrame>:
{
 8003988:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 800398a:	f7ff ffc9 	bl	8003920 <MCP_WaitNextFrame>
}
 800398e:	bd08      	pop	{r3, pc}

08003990 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8003990:	b530      	push	{r4, r5, lr}
 8003992:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8003994:	f001 ff9c 	bl	80058d0 <HAL_RCC_GetHCLKFreq>
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 800399a:	4d0c      	ldr	r5, [pc, #48]	; (80039cc <MX_MotorControl_Init+0x3c>)
 800399c:	4c0c      	ldr	r4, [pc, #48]	; (80039d0 <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 800399e:	fba3 3000 	umull	r3, r0, r3, r0
 80039a2:	09c0      	lsrs	r0, r0, #7
 80039a4:	f001 fd4a 	bl	800543c <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 80039a8:	4629      	mov	r1, r5
 80039aa:	4620      	mov	r0, r4
 80039ac:	f7fe fff0 	bl	8002990 <MCboot>
  mc_lock_pins();
 80039b0:	f7ff fbca 	bl	8003148 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 80039b4:	4b07      	ldr	r3, [pc, #28]	; (80039d4 <MX_MotorControl_Init+0x44>)
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	4807      	ldr	r0, [pc, #28]	; (80039d8 <MX_MotorControl_Init+0x48>)
 80039ba:	462b      	mov	r3, r5
 80039bc:	4622      	mov	r2, r4
 80039be:	2101      	movs	r1, #1
 80039c0:	f000 fc2e 	bl	8004220 <UI_TaskInit>
}
 80039c4:	b003      	add	sp, #12
 80039c6:	bd30      	pop	{r4, r5, pc}
 80039c8:	10624dd3 	.word	0x10624dd3
 80039cc:	20000c40 	.word	0x20000c40
 80039d0:	20000c3c 	.word	0x20000c3c
 80039d4:	080097ec 	.word	0x080097ec
 80039d8:	200006f0 	.word	0x200006f0

080039dc <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80039dc:	4b66      	ldr	r3, [pc, #408]	; (8003b78 <RCM_RegisterRegConv+0x19c>)
 80039de:	681a      	ldr	r2, [r3, #0]
{
 80039e0:	b4f0      	push	{r4, r5, r6, r7}
 80039e2:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80039e4:	2a00      	cmp	r2, #0
 80039e6:	f000 808f 	beq.w	8003b08 <RCM_RegisterRegConv+0x12c>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80039ea:	7904      	ldrb	r4, [r0, #4]
 80039ec:	7910      	ldrb	r0, [r2, #4]
 80039ee:	4284      	cmp	r4, r0
 80039f0:	d01e      	beq.n	8003a30 <RCM_RegisterRegConv+0x54>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80039f2:	685d      	ldr	r5, [r3, #4]
 80039f4:	2d00      	cmp	r5, #0
 80039f6:	f000 80ad 	beq.w	8003b54 <RCM_RegisterRegConv+0x178>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80039fa:	792a      	ldrb	r2, [r5, #4]
 80039fc:	42a2      	cmp	r2, r4
  uint8_t handle=255;
 80039fe:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003a02:	f000 8089 	beq.w	8003b18 <RCM_RegisterRegConv+0x13c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003a06:	689e      	ldr	r6, [r3, #8]
 8003a08:	b1fe      	cbz	r6, 8003a4a <RCM_RegisterRegConv+0x6e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003a0a:	7932      	ldrb	r2, [r6, #4]
 8003a0c:	42a2      	cmp	r2, r4
 8003a0e:	f000 8094 	beq.w	8003b3a <RCM_RegisterRegConv+0x15e>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003a12:	68dd      	ldr	r5, [r3, #12]
 8003a14:	2d00      	cmp	r5, #0
 8003a16:	f000 8099 	beq.w	8003b4c <RCM_RegisterRegConv+0x170>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003a1a:	792a      	ldrb	r2, [r5, #4]
 8003a1c:	42a2      	cmp	r2, r4
 8003a1e:	f000 80a8 	beq.w	8003b72 <RCM_RegisterRegConv+0x196>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8003a22:	2803      	cmp	r0, #3
 8003a24:	bf98      	it	ls
 8003a26:	680a      	ldrls	r2, [r1, #0]
 8003a28:	d91e      	bls.n	8003a68 <RCM_RegisterRegConv+0x8c>
 8003a2a:	20ff      	movs	r0, #255	; 0xff
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8003a2c:	bcf0      	pop	{r4, r5, r6, r7}
 8003a2e:	4770      	bx	lr
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003a30:	6810      	ldr	r0, [r2, #0]
 8003a32:	680a      	ldr	r2, [r1, #0]
 8003a34:	4290      	cmp	r0, r2
 8003a36:	f000 8087 	beq.w	8003b48 <RCM_RegisterRegConv+0x16c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003a3a:	685d      	ldr	r5, [r3, #4]
 8003a3c:	2d00      	cmp	r5, #0
 8003a3e:	d1dc      	bne.n	80039fa <RCM_RegisterRegConv+0x1e>
 8003a40:	689e      	ldr	r6, [r3, #8]
      i++;
 8003a42:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003a44:	2e00      	cmp	r6, #0
 8003a46:	d1e0      	bne.n	8003a0a <RCM_RegisterRegConv+0x2e>
 8003a48:	e004      	b.n	8003a54 <RCM_RegisterRegConv+0x78>
 8003a4a:	2804      	cmp	r0, #4
 8003a4c:	f240 808e 	bls.w	8003b6c <RCM_RegisterRegConv+0x190>
 8003a50:	680a      	ldr	r2, [r1, #0]
      i++;
 8003a52:	2002      	movs	r0, #2
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003a54:	68dd      	ldr	r5, [r3, #12]
 8003a56:	b13d      	cbz	r5, 8003a68 <RCM_RegisterRegConv+0x8c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003a58:	792e      	ldrb	r6, [r5, #4]
 8003a5a:	790c      	ldrb	r4, [r1, #4]
 8003a5c:	42a6      	cmp	r6, r4
 8003a5e:	d103      	bne.n	8003a68 <RCM_RegisterRegConv+0x8c>
 8003a60:	682c      	ldr	r4, [r5, #0]
 8003a62:	4294      	cmp	r4, r2
 8003a64:	d1dd      	bne.n	8003a22 <RCM_RegisterRegConv+0x46>
      i++;
 8003a66:	2003      	movs	r0, #3
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8003a68:	6894      	ldr	r4, [r2, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8003a6a:	4d44      	ldr	r5, [pc, #272]	; (8003b7c <RCM_RegisterRegConv+0x1a0>)
      RCM_handle_array [handle] = regConv;
 8003a6c:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8003a70:	2300      	movs	r3, #0
 8003a72:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8003a76:	07e3      	lsls	r3, r4, #31
 8003a78:	d411      	bmi.n	8003a9e <RCM_RegisterRegConv+0xc2>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8003a7a:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8003a7c:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8003a80:	f023 0320 	bic.w	r3, r3, #32
 8003a84:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8003a86:	6014      	str	r4, [r2, #0]
{
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8003a88:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8003a8a:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8003a8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a92:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8003a94:	6014      	str	r4, [r2, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8003a96:	6893      	ldr	r3, [r2, #8]
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003a9e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003aa0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003aa4:	62d3      	str	r3, [r2, #44]	; 0x2c
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8003aa6:	790b      	ldrb	r3, [r1, #4]
 8003aa8:	2b09      	cmp	r3, #9
 8003aaa:	d83c      	bhi.n	8003b26 <RCM_RegisterRegConv+0x14a>
 8003aac:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8003ab0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8003ab4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ab8:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abc:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8003ac0:	fa94 f4a4 	rbit	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8003ac4:	fab4 f484 	clz	r4, r4
 8003ac8:	40e6      	lsrs	r6, r4
 8003aca:	320c      	adds	r2, #12
  MODIFY_REG(*preg,
 8003acc:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8003ad0:	f852 5026 	ldr.w	r5, [r2, r6, lsl #2]
 8003ad4:	f04f 74f8 	mov.w	r4, #32505856	; 0x1f00000
 8003ad8:	fa94 f7a4 	rbit	r7, r4
 8003adc:	fab7 f787 	clz	r7, r7
 8003ae0:	fa94 f4a4 	rbit	r4, r4
 8003ae4:	f04f 0c07 	mov.w	ip, #7
 8003ae8:	6889      	ldr	r1, [r1, #8]
 8003aea:	fab4 f484 	clz	r4, r4
 8003aee:	fa23 f707 	lsr.w	r7, r3, r7
 8003af2:	fa0c f707 	lsl.w	r7, ip, r7
 8003af6:	40e3      	lsrs	r3, r4
 8003af8:	4099      	lsls	r1, r3
 8003afa:	ea25 0307 	bic.w	r3, r5, r7
 8003afe:	430b      	orrs	r3, r1
 8003b00:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
}
 8003b04:	bcf0      	pop	{r4, r5, r6, r7}
 8003b06:	4770      	bx	lr
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003b08:	685d      	ldr	r5, [r3, #4]
 8003b0a:	b355      	cbz	r5, 8003b62 <RCM_RegisterRegConv+0x186>
 8003b0c:	790c      	ldrb	r4, [r1, #4]
  uint8_t i=0;
 8003b0e:	4610      	mov	r0, r2
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003b10:	792a      	ldrb	r2, [r5, #4]
 8003b12:	42a2      	cmp	r2, r4
 8003b14:	f47f af77 	bne.w	8003a06 <RCM_RegisterRegConv+0x2a>
 8003b18:	682d      	ldr	r5, [r5, #0]
 8003b1a:	680a      	ldr	r2, [r1, #0]
 8003b1c:	4295      	cmp	r5, r2
 8003b1e:	f47f af72 	bne.w	8003a06 <RCM_RegisterRegConv+0x2a>
 8003b22:	2001      	movs	r0, #1
 8003b24:	e7a0      	b.n	8003a68 <RCM_RegisterRegConv+0x8c>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8003b26:	2403      	movs	r4, #3
 8003b28:	f06f 051d 	mvn.w	r5, #29
 8003b2c:	fb14 5403 	smlabb	r4, r4, r3, r5
 8003b30:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8003b34:	f003 7600 	and.w	r6, r3, #33554432	; 0x2000000
 8003b38:	e7c0      	b.n	8003abc <RCM_RegisterRegConv+0xe0>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003b3a:	6835      	ldr	r5, [r6, #0]
 8003b3c:	680a      	ldr	r2, [r1, #0]
 8003b3e:	4295      	cmp	r5, r2
 8003b40:	f47f af67 	bne.w	8003a12 <RCM_RegisterRegConv+0x36>
      i++;
 8003b44:	2002      	movs	r0, #2
 8003b46:	e78f      	b.n	8003a68 <RCM_RegisterRegConv+0x8c>
  uint8_t i=0;
 8003b48:	2000      	movs	r0, #0
 8003b4a:	e78d      	b.n	8003a68 <RCM_RegisterRegConv+0x8c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003b4c:	2804      	cmp	r0, #4
 8003b4e:	680a      	ldr	r2, [r1, #0]
 8003b50:	d889      	bhi.n	8003a66 <RCM_RegisterRegConv+0x8a>
 8003b52:	e789      	b.n	8003a68 <RCM_RegisterRegConv+0x8c>
 8003b54:	689e      	ldr	r6, [r3, #8]
      i++;
 8003b56:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003b58:	2e00      	cmp	r6, #0
 8003b5a:	f47f af56 	bne.w	8003a0a <RCM_RegisterRegConv+0x2e>
 8003b5e:	680a      	ldr	r2, [r1, #0]
 8003b60:	e778      	b.n	8003a54 <RCM_RegisterRegConv+0x78>
 8003b62:	689e      	ldr	r6, [r3, #8]
 8003b64:	b116      	cbz	r6, 8003b6c <RCM_RegisterRegConv+0x190>
 8003b66:	790c      	ldrb	r4, [r1, #4]
  uint8_t i=0;
 8003b68:	4628      	mov	r0, r5
 8003b6a:	e74e      	b.n	8003a0a <RCM_RegisterRegConv+0x2e>
 8003b6c:	680a      	ldr	r2, [r1, #0]
 8003b6e:	4630      	mov	r0, r6
 8003b70:	e770      	b.n	8003a54 <RCM_RegisterRegConv+0x78>
 8003b72:	680a      	ldr	r2, [r1, #0]
 8003b74:	e774      	b.n	8003a60 <RCM_RegisterRegConv+0x84>
 8003b76:	bf00      	nop
 8003b78:	20000c6c 	.word	0x20000c6c
 8003b7c:	20000c48 	.word	0x20000c48

08003b80 <RCM_ExecRegularConv>:
 * There is no issue to execute regular conversion asynchronously.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 8003b80:	b430      	push	{r4, r5}
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003b82:	4b1b      	ldr	r3, [pc, #108]	; (8003bf0 <RCM_ExecRegularConv+0x70>)
 8003b84:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003b88:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	2b09      	cmp	r3, #9
 8003b8e:	d827      	bhi.n	8003be0 <RCM_ExecRegularConv+0x60>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003b90:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8003b94:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003b98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b9c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003ba0:	fa91 f1a1 	rbit	r1, r1
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8003ba4:	f44f 7500 	mov.w	r5, #512	; 0x200
 8003ba8:	fab1 f181 	clz	r1, r1
 8003bac:	40cd      	lsrs	r5, r1
 8003bae:	f102 042c 	add.w	r4, r2, #44	; 0x2c
  MODIFY_REG(*preg,
 8003bb2:	f003 031f 	and.w	r3, r3, #31
 8003bb6:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8003bba:	f020 001f 	bic.w	r0, r0, #31
 8003bbe:	4303      	orrs	r3, r0

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 8003bc0:	0151      	lsls	r1, r2, #5
 8003bc2:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
 8003bc6:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 8003bca:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003bcc:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8003bce:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8003bd2:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8003bd4:	079b      	lsls	r3, r3, #30
 8003bd6:	d5fc      	bpl.n	8003bd2 <RCM_ExecRegularConv+0x52>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003bd8:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
return retVal;
}
 8003bda:	bc30      	pop	{r4, r5}
 8003bdc:	b280      	uxth	r0, r0
 8003bde:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003be0:	2103      	movs	r1, #3
 8003be2:	f06f 001d 	mvn.w	r0, #29
 8003be6:	fb11 0103 	smlabb	r1, r1, r3, r0
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003bea:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8003bee:	e7d5      	b.n	8003b9c <RCM_ExecRegularConv+0x1c>
 8003bf0:	20000c6c 	.word	0x20000c6c

08003bf4 <RCM_RequestUserConv>:
 * @return true if the regular conversion could be scheduled and false otherwise.
 */
bool RCM_RequestUserConv(uint8_t handle)
{
  bool retVal = false;
  if (RCM_UserConvState == RCM_USERCONV_IDLE)
 8003bf4:	4a05      	ldr	r2, [pc, #20]	; (8003c0c <RCM_RequestUserConv+0x18>)
 8003bf6:	7813      	ldrb	r3, [r2, #0]
 8003bf8:	b92b      	cbnz	r3, 8003c06 <RCM_RequestUserConv+0x12>
  {
    RCM_UserConvHandle = handle;
 8003bfa:	4905      	ldr	r1, [pc, #20]	; (8003c10 <RCM_RequestUserConv+0x1c>)
    /* must be done last so that RCM_UserConvHandle already has the right value */
    RCM_UserConvState = RCM_USERCONV_REQUESTED;
 8003bfc:	2301      	movs	r3, #1
    RCM_UserConvHandle = handle;
 8003bfe:	7008      	strb	r0, [r1, #0]
    RCM_UserConvState = RCM_USERCONV_REQUESTED;
 8003c00:	7013      	strb	r3, [r2, #0]
    retVal = true;
 8003c02:	4618      	mov	r0, r3
 8003c04:	4770      	bx	lr
  bool retVal = false;
 8003c06:	2000      	movs	r0, #0
  }
  return retVal;
}
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	20000c68 	.word	0x20000c68
 8003c10:	20000c44 	.word	0x20000c44

08003c14 <RCM_GetUserConv>:
 * @retval uint16_t The converted value or 0xFFFF in case of conversion error.
 */
uint16_t RCM_GetUserConv(void)
{
  uint16_t hRetVal = 0xFFFFu;
  if (RCM_UserConvState == RCM_USERCONV_EOC)
 8003c14:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <RCM_GetUserConv+0x18>)
 8003c16:	781a      	ldrb	r2, [r3, #0]
 8003c18:	2a02      	cmp	r2, #2
 8003c1a:	d002      	beq.n	8003c22 <RCM_GetUserConv+0xe>
  uint16_t hRetVal = 0xFFFFu;
 8003c1c:	f64f 70ff 	movw	r0, #65535	; 0xffff
  {
    hRetVal = RCM_UserConvValue;
    RCM_UserConvState = RCM_USERCONV_IDLE;
  }
  return hRetVal;
}
 8003c20:	4770      	bx	lr
    hRetVal = RCM_UserConvValue;
 8003c22:	4903      	ldr	r1, [pc, #12]	; (8003c30 <RCM_GetUserConv+0x1c>)
    RCM_UserConvState = RCM_USERCONV_IDLE;
 8003c24:	2200      	movs	r2, #0
    hRetVal = RCM_UserConvValue;
 8003c26:	8808      	ldrh	r0, [r1, #0]
    RCM_UserConvState = RCM_USERCONV_IDLE;
 8003c28:	701a      	strb	r2, [r3, #0]
 8003c2a:	4770      	bx	lr
 8003c2c:	20000c68 	.word	0x20000c68
 8003c30:	20000c7c 	.word	0x20000c7c

08003c34 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8003c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8003c38:	4c0f      	ldr	r4, [pc, #60]	; (8003c78 <RCM_ExecUserConv+0x44>)
 8003c3a:	7823      	ldrb	r3, [r4, #0]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d001      	beq.n	8003c44 <RCM_ExecUserConv+0x10>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8003c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003c44:	4d0d      	ldr	r5, [pc, #52]	; (8003c7c <RCM_ExecUserConv+0x48>)
 8003c46:	4f0e      	ldr	r7, [pc, #56]	; (8003c80 <RCM_ExecUserConv+0x4c>)
 8003c48:	7828      	ldrb	r0, [r5, #0]
 8003c4a:	f7ff ff99 	bl	8003b80 <RCM_ExecRegularConv>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8003c4e:	782d      	ldrb	r5, [r5, #0]
 8003c50:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <RCM_ExecUserConv+0x50>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003c52:	8038      	strh	r0, [r7, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8003c54:	f853 6035 	ldr.w	r6, [r3, r5, lsl #3]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8003c58:	2202      	movs	r2, #2
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003c5a:	4601      	mov	r1, r0
    RCM_UserConvState = RCM_USERCONV_EOC;
 8003c5c:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8003c5e:	2e00      	cmp	r6, #0
 8003c60:	d0ee      	beq.n	8003c40 <RCM_ExecUserConv+0xc>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8003c62:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8003c66:	2000      	movs	r0, #0
 8003c68:	7020      	strb	r0, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	4628      	mov	r0, r5
 8003c6e:	4633      	mov	r3, r6
}
 8003c70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8003c74:	4718      	bx	r3
 8003c76:	bf00      	nop
 8003c78:	20000c68 	.word	0x20000c68
 8003c7c:	20000c44 	.word	0x20000c44
 8003c80:	20000c7c 	.word	0x20000c7c
 8003c84:	20000c48 	.word	0x20000c48

08003c88 <RCM_GetUserConvState>:
 *
 * @retval The state of the last user-defined regular conversion.
 */
RCM_UserConvState_t RCM_GetUserConvState(void)
{
  return RCM_UserConvState;
 8003c88:	4b01      	ldr	r3, [pc, #4]	; (8003c90 <RCM_GetUserConvState+0x8>)
}
 8003c8a:	7818      	ldrb	r0, [r3, #0]
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	20000c68 	.word	0x20000c68

08003c94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c94:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c96:	4b0d      	ldr	r3, [pc, #52]	; (8003ccc <HAL_MspInit+0x38>)
 8003c98:	2100      	movs	r1, #0
 8003c9a:	9100      	str	r1, [sp, #0]
 8003c9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ca2:	645a      	str	r2, [r3, #68]	; 0x44
 8003ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ca6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003caa:	9200      	str	r2, [sp, #0]
 8003cac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cae:	9101      	str	r1, [sp, #4]
 8003cb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cb2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003cb6:	641a      	str	r2, [r3, #64]	; 0x40
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	9301      	str	r3, [sp, #4]
 8003cc0:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003cc2:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cc4:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003cc6:	f001 bb5f 	b.w	8005388 <HAL_NVIC_SetPriorityGrouping>
 8003cca:	bf00      	nop
 8003ccc:	40023800 	.word	0x40023800

08003cd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003cd0:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8003cd2:	6803      	ldr	r3, [r0, #0]
 8003cd4:	4a3a      	ldr	r2, [pc, #232]	; (8003dc0 <HAL_ADC_MspInit+0xf0>)
{
 8003cd6:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd8:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8003cda:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cdc:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8003ce0:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8003ce4:	940a      	str	r4, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 8003ce6:	d004      	beq.n	8003cf2 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8003ce8:	4a36      	ldr	r2, [pc, #216]	; (8003dc4 <HAL_ADC_MspInit+0xf4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d047      	beq.n	8003d7e <HAL_ADC_MspInit+0xae>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003cee:	b00d      	add	sp, #52	; 0x34
 8003cf0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003cf2:	4b35      	ldr	r3, [pc, #212]	; (8003dc8 <HAL_ADC_MspInit+0xf8>)
 8003cf4:	9400      	str	r4, [sp, #0]
 8003cf6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cf8:	4834      	ldr	r0, [pc, #208]	; (8003dcc <HAL_ADC_MspInit+0xfc>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003cfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cfe:	645a      	str	r2, [r3, #68]	; 0x44
 8003d00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d02:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003d06:	9200      	str	r2, [sp, #0]
 8003d08:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d0a:	9401      	str	r4, [sp, #4]
 8003d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d0e:	f042 0204 	orr.w	r2, r2, #4
 8003d12:	631a      	str	r2, [r3, #48]	; 0x30
 8003d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d16:	f002 0204 	and.w	r2, r2, #4
 8003d1a:	9201      	str	r2, [sp, #4]
 8003d1c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d1e:	9402      	str	r4, [sp, #8]
 8003d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	631a      	str	r2, [r3, #48]	; 0x30
 8003d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d2a:	f002 0201 	and.w	r2, r2, #1
 8003d2e:	9202      	str	r2, [sp, #8]
 8003d30:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d32:	9403      	str	r4, [sp, #12]
 8003d34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d36:	f042 0202 	orr.w	r2, r2, #2
 8003d3a:	631a      	str	r2, [r3, #48]	; 0x30
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3e:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = PHAH_TSENSE_Pin|M1_TEMPERATURE_Pin|M1_BUS_VOLTAGE_Pin;
 8003d46:	2234      	movs	r2, #52	; 0x34
 8003d48:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d4a:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = PHAH_TSENSE_Pin|M1_TEMPERATURE_Pin|M1_BUS_VOLTAGE_Pin;
 8003d4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d50:	9d03      	ldr	r5, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d52:	f001 fbd1 	bl	80054f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = POT2_TEMP_Pin|M1_CURR_AMPL_U_Pin;
 8003d56:	2203      	movs	r2, #3
 8003d58:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d5a:	a906      	add	r1, sp, #24
 8003d5c:	481c      	ldr	r0, [pc, #112]	; (8003dd0 <HAL_ADC_MspInit+0x100>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5e:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = POT2_TEMP_Pin|M1_CURR_AMPL_U_Pin;
 8003d60:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d64:	f001 fbc8 	bl	80054f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = POT1_Pin;
 8003d68:	2201      	movs	r2, #1
 8003d6a:	2303      	movs	r3, #3
    HAL_GPIO_Init(POT1_GPIO_Port, &GPIO_InitStruct);
 8003d6c:	4819      	ldr	r0, [pc, #100]	; (8003dd4 <HAL_ADC_MspInit+0x104>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6e:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(POT1_GPIO_Port, &GPIO_InitStruct);
 8003d70:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = POT1_Pin;
 8003d72:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(POT1_GPIO_Port, &GPIO_InitStruct);
 8003d76:	f001 fbbf 	bl	80054f8 <HAL_GPIO_Init>
}
 8003d7a:	b00d      	add	sp, #52	; 0x34
 8003d7c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003d7e:	4b12      	ldr	r3, [pc, #72]	; (8003dc8 <HAL_ADC_MspInit+0xf8>)
 8003d80:	9404      	str	r4, [sp, #16]
 8003d82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8003d84:	4812      	ldr	r0, [pc, #72]	; (8003dd0 <HAL_ADC_MspInit+0x100>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8a:	645a      	str	r2, [r3, #68]	; 0x44
 8003d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d8e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003d92:	9204      	str	r2, [sp, #16]
 8003d94:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d96:	9405      	str	r4, [sp, #20]
 8003d98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	631a      	str	r2, [r3, #48]	; 0x30
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da2:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8003daa:	2210      	movs	r2, #16
 8003dac:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8003dae:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8003db0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003db4:	9c05      	ldr	r4, [sp, #20]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8003db6:	f001 fb9f 	bl	80054f8 <HAL_GPIO_Init>
}
 8003dba:	b00d      	add	sp, #52	; 0x34
 8003dbc:	bd30      	pop	{r4, r5, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40012000 	.word	0x40012000
 8003dc4:	40012100 	.word	0x40012100
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	40020800 	.word	0x40020800
 8003dd0:	40020000 	.word	0x40020000
 8003dd4:	40020400 	.word	0x40020400

08003dd8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003dd8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 8003dda:	6801      	ldr	r1, [r0, #0]
 8003ddc:	4a16      	ldr	r2, [pc, #88]	; (8003e38 <HAL_DAC_MspInit+0x60>)
{
 8003dde:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de0:	2300      	movs	r3, #0
  if(hdac->Instance==DAC)
 8003de2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003de8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003dec:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC)
 8003dee:	d001      	beq.n	8003df4 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003df0:	b008      	add	sp, #32
 8003df2:	bd10      	pop	{r4, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 8003df4:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(DBG_DAC_CH2_GPIO_Port, &GPIO_InitStruct);
 8003dfc:	480f      	ldr	r0, [pc, #60]	; (8003e3c <HAL_DAC_MspInit+0x64>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8003dfe:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8003e02:	6411      	str	r1, [r2, #64]	; 0x40
 8003e04:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003e06:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
 8003e0a:	9100      	str	r1, [sp, #0]
 8003e0c:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e0e:	9301      	str	r3, [sp, #4]
 8003e10:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003e12:	f041 0101 	orr.w	r1, r1, #1
 8003e16:	6311      	str	r1, [r2, #48]	; 0x30
 8003e18:	6b12      	ldr	r2, [r2, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e1a:	9304      	str	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e1c:	f002 0201 	and.w	r2, r2, #1
 8003e20:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = DBG_DAC_CH2_Pin;
 8003e22:	2303      	movs	r3, #3
 8003e24:	2220      	movs	r2, #32
    HAL_GPIO_Init(DBG_DAC_CH2_GPIO_Port, &GPIO_InitStruct);
 8003e26:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = DBG_DAC_CH2_Pin;
 8003e28:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e2c:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(DBG_DAC_CH2_GPIO_Port, &GPIO_InitStruct);
 8003e2e:	f001 fb63 	bl	80054f8 <HAL_GPIO_Init>
}
 8003e32:	b008      	add	sp, #32
 8003e34:	bd10      	pop	{r4, pc}
 8003e36:	bf00      	nop
 8003e38:	40007400 	.word	0x40007400
 8003e3c:	40020000 	.word	0x40020000

08003e40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e40:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8003e42:	6802      	ldr	r2, [r0, #0]
 8003e44:	4938      	ldr	r1, [pc, #224]	; (8003f28 <HAL_TIM_Base_MspInit+0xe8>)
{
 8003e46:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e48:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 8003e4a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e4c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003e50:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8003e54:	930a      	str	r3, [sp, #40]	; 0x28
  if(htim_base->Instance==TIM1)
 8003e56:	d004      	beq.n	8003e62 <HAL_TIM_Base_MspInit+0x22>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8003e58:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003e5c:	d026      	beq.n	8003eac <HAL_TIM_Base_MspInit+0x6c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003e5e:	b00c      	add	sp, #48	; 0x30
 8003e60:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e62:	4a32      	ldr	r2, [pc, #200]	; (8003f2c <HAL_TIM_Base_MspInit+0xec>)
 8003e64:	9301      	str	r3, [sp, #4]
 8003e66:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8003e68:	4831      	ldr	r0, [pc, #196]	; (8003f30 <HAL_TIM_Base_MspInit+0xf0>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e6a:	f041 0101 	orr.w	r1, r1, #1
 8003e6e:	6451      	str	r1, [r2, #68]	; 0x44
 8003e70:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003e72:	f001 0101 	and.w	r1, r1, #1
 8003e76:	9101      	str	r1, [sp, #4]
 8003e78:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e7a:	9302      	str	r3, [sp, #8]
 8003e7c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003e7e:	f043 0301 	orr.w	r3, r3, #1
 8003e82:	6313      	str	r3, [r2, #48]	; 0x30
 8003e84:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e8c:	2301      	movs	r3, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e8e:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e90:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8003e92:	2202      	movs	r2, #2
 8003e94:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8003e96:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8003e98:	2440      	movs	r4, #64	; 0x40
 8003e9a:	2502      	movs	r5, #2
 8003e9c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003ea0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8003ea4:	f001 fb28 	bl	80054f8 <HAL_GPIO_Init>
}
 8003ea8:	b00c      	add	sp, #48	; 0x30
 8003eaa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003eac:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8003eb0:	9303      	str	r3, [sp, #12]
 8003eb2:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eb4:	481f      	ldr	r0, [pc, #124]	; (8003f34 <HAL_TIM_Base_MspInit+0xf4>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003eb6:	f041 0101 	orr.w	r1, r1, #1
 8003eba:	6411      	str	r1, [r2, #64]	; 0x40
 8003ebc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003ebe:	f001 0101 	and.w	r1, r1, #1
 8003ec2:	9103      	str	r1, [sp, #12]
 8003ec4:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ec6:	9304      	str	r3, [sp, #16]
 8003ec8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003eca:	f041 0102 	orr.w	r1, r1, #2
 8003ece:	6311      	str	r1, [r2, #48]	; 0x30
 8003ed0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003ed2:	f001 0102 	and.w	r1, r1, #2
 8003ed6:	9104      	str	r1, [sp, #16]
 8003ed8:	9904      	ldr	r1, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eda:	9305      	str	r3, [sp, #20]
 8003edc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003ede:	f043 0301 	orr.w	r3, r3, #1
 8003ee2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ee4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	9305      	str	r3, [sp, #20]
 8003eec:	9905      	ldr	r1, [sp, #20]
    GPIO_InitStruct.Pin = M1_HALL_H3_Pin|M1_HALL_H2_Pin;
 8003eee:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	2400      	movs	r4, #0
 8003ef6:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ef8:	2601      	movs	r6, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003efa:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_HALL_H3_Pin|M1_HALL_H2_Pin;
 8003efc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003f00:	e9cd 4508 	strd	r4, r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003f04:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f06:	f001 faf7 	bl	80054f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8003f0a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f0e:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8003f10:	4807      	ldr	r0, [pc, #28]	; (8003f30 <HAL_TIM_Base_MspInit+0xf0>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003f12:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8003f14:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8003f16:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003f1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8003f1e:	f001 faeb 	bl	80054f8 <HAL_GPIO_Init>
}
 8003f22:	b00c      	add	sp, #48	; 0x30
 8003f24:	bd70      	pop	{r4, r5, r6, pc}
 8003f26:	bf00      	nop
 8003f28:	40010000 	.word	0x40010000
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	40020000 	.word	0x40020000
 8003f34:	40020400 	.word	0x40020400

08003f38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f38:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8003f3a:	6801      	ldr	r1, [r0, #0]
 8003f3c:	4a1f      	ldr	r2, [pc, #124]	; (8003fbc <HAL_TIM_MspPostInit+0x84>)
{
 8003f3e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f40:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8003f42:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f44:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003f48:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003f4c:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 8003f4e:	d001      	beq.n	8003f54 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003f50:	b008      	add	sp, #32
 8003f52:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f54:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f5c:	4818      	ldr	r0, [pc, #96]	; (8003fc0 <HAL_TIM_MspPostInit+0x88>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f5e:	f041 0102 	orr.w	r1, r1, #2
 8003f62:	6311      	str	r1, [r2, #48]	; 0x30
 8003f64:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003f66:	f001 0102 	and.w	r1, r1, #2
 8003f6a:	9100      	str	r1, [sp, #0]
 8003f6c:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f6e:	9301      	str	r3, [sp, #4]
 8003f70:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003f72:	f043 0301 	orr.w	r3, r3, #1
 8003f76:	6313      	str	r3, [r2, #48]	; 0x30
 8003f78:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	9301      	str	r3, [sp, #4]
 8003f80:	9901      	ldr	r1, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8003f82:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8003f86:	2302      	movs	r3, #2
 8003f88:	2402      	movs	r4, #2
 8003f8a:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003f8c:	2601      	movs	r6, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f8e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8003f90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f94:	e9cd 4504 	strd	r4, r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003f98:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f9a:	f001 faad 	bl	80054f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003f9e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003fa2:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fa4:	4807      	ldr	r0, [pc, #28]	; (8003fc4 <HAL_TIM_MspPostInit+0x8c>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003fa6:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fa8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003faa:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003fae:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb2:	f001 faa1 	bl	80054f8 <HAL_GPIO_Init>
}
 8003fb6:	b008      	add	sp, #32
 8003fb8:	bd70      	pop	{r4, r5, r6, pc}
 8003fba:	bf00      	nop
 8003fbc:	40010000 	.word	0x40010000
 8003fc0:	40020400 	.word	0x40020400
 8003fc4:	40020000 	.word	0x40020000

08003fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fc8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8003fca:	6801      	ldr	r1, [r0, #0]
 8003fcc:	4a18      	ldr	r2, [pc, #96]	; (8004030 <HAL_UART_MspInit+0x68>)
{
 8003fce:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fd0:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 8003fd2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fd4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003fd8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003fdc:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART2)
 8003fde:	d001      	beq.n	8003fe4 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003fe0:	b009      	add	sp, #36	; 0x24
 8003fe2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fe4:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fec:	4811      	ldr	r0, [pc, #68]	; (8004034 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fee:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8003ff2:	6411      	str	r1, [r2, #64]	; 0x40
 8003ff4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003ff6:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
 8003ffa:	9100      	str	r1, [sp, #0]
 8003ffc:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ffe:	9301      	str	r3, [sp, #4]
 8004000:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004002:	f043 0301 	orr.w	r3, r3, #1
 8004006:	6313      	str	r3, [r2, #48]	; 0x30
 8004008:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004010:	2307      	movs	r3, #7
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004012:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004014:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8004016:	2200      	movs	r2, #0
 8004018:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800401a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800401c:	240c      	movs	r4, #12
 800401e:	2502      	movs	r5, #2
 8004020:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004024:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004028:	f001 fa66 	bl	80054f8 <HAL_GPIO_Init>
}
 800402c:	b009      	add	sp, #36	; 0x24
 800402e:	bd30      	pop	{r4, r5, pc}
 8004030:	40004400 	.word	0x40004400
 8004034:	40020000 	.word	0x40020000

08004038 <ADC_IRQHandler>:
  * @brief  This function handles ADC1/ADC2 interrupt request.
  * @param  None
  * @retval None
  */
void ADC_IRQHandler(void)
{
 8004038:	b508      	push	{r3, lr}
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 800403a:	4b0c      	ldr	r3, [pc, #48]	; (800406c <ADC_IRQHandler+0x34>)
 800403c:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 800403e:	0752      	lsls	r2, r2, #29
 8004040:	d509      	bpl.n	8004056 <ADC_IRQHandler+0x1e>
  {
    // Clear Flags
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	f022 020c 	bic.w	r2, r2, #12
 8004048:	601a      	str	r2, [r3, #0]

    UI_DACUpdate(TSK_HighFrequencyTask());  /*GUI, this section is present only if DAC is enabled*/
 800404a:	f7fe ff35 	bl	8002eb8 <TSK_HighFrequencyTask>
  }
#endif
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800404e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_DACUpdate(TSK_HighFrequencyTask());  /*GUI, this section is present only if DAC is enabled*/
 8004052:	f000 b977 	b.w	8004344 <UI_DACUpdate>
    ADC3->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8004056:	4a06      	ldr	r2, [pc, #24]	; (8004070 <ADC_IRQHandler+0x38>)
 8004058:	6813      	ldr	r3, [r2, #0]
 800405a:	f023 030c 	bic.w	r3, r3, #12
 800405e:	6013      	str	r3, [r2, #0]
    UI_DACUpdate(TSK_HighFrequencyTask());  /*GUI, this section is present only if DAC is enabled*/
 8004060:	f7fe ff2a 	bl	8002eb8 <TSK_HighFrequencyTask>
}
 8004064:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_DACUpdate(TSK_HighFrequencyTask());  /*GUI, this section is present only if DAC is enabled*/
 8004068:	f000 b96c 	b.w	8004344 <UI_DACUpdate>
 800406c:	40012000 	.word	0x40012000
 8004070:	40012200 	.word	0x40012200

08004074 <TIM1_UP_TIM10_IRQHandler>:
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 8004074:	4803      	ldr	r0, [pc, #12]	; (8004084 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004076:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8004078:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800407a:	f06f 0201 	mvn.w	r2, #1
 800407e:	611a      	str	r2, [r3, #16]
  ICS_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8004080:	f002 bf00 	b.w	8006e84 <ICS_TIMx_UP_IRQHandler>
 8004084:	20000288 	.word	0x20000288

08004088 <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8004088:	4807      	ldr	r0, [pc, #28]	; (80040a8 <TIM1_BRK_TIM9_IRQHandler+0x20>)
{
 800408a:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 800408c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800408e:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8004090:	691a      	ldr	r2, [r3, #16]
 8004092:	0612      	lsls	r2, r2, #24
 8004094:	d504      	bpl.n	80040a0 <TIM1_BRK_TIM9_IRQHandler+0x18>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8004096:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800409a:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    ICS_BRK_IRQHandler(&PWM_Handle_M1);
 800409c:	f002 ff3c 	bl	8006f18 <ICS_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 80040a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 80040a4:	f7fe bedc 	b.w	8002e60 <MC_Scheduler>
 80040a8:	20000288 	.word	0x20000288

080040ac <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 80040ac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80040ae:	4c1f      	ldr	r4, [pc, #124]	; (800412c <USART2_IRQHandler+0x80>)
 80040b0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	0691      	lsls	r1, r2, #26
{
 80040b8:	b082      	sub	sp, #8
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80040ba:	d407      	bmi.n	80040cc <USART2_IRQHandler+0x20>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80040bc:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80040be:	0612      	lsls	r2, r2, #24
 80040c0:	d413      	bmi.n	80040ea <USART2_IRQHandler+0x3e>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80040c2:	681b      	ldr	r3, [r3, #0]
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80040c4:	071b      	lsls	r3, r3, #28
 80040c6:	d418      	bmi.n	80040fa <USART2_IRQHandler+0x4e>
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 80040c8:	b002      	add	sp, #8
 80040ca:	bd10      	pop	{r4, pc}
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80040cc:	6859      	ldr	r1, [r3, #4]
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 80040ce:	4620      	mov	r0, r4
 80040d0:	b2c9      	uxtb	r1, r1
 80040d2:	f003 fd69 	bl	8007ba8 <UFCP_RX_IRQ_Handler>
 80040d6:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d021      	beq.n	8004120 <USART2_IRQHandler+0x74>
    if (retVal == 2)
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d01c      	beq.n	800411a <USART2_IRQHandler+0x6e>
 80040e0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80040e4:	681a      	ldr	r2, [r3, #0]
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80040e6:	0612      	lsls	r2, r2, #24
 80040e8:	d5eb      	bpl.n	80040c2 <USART2_IRQHandler+0x16>
    UFCP_TX_IRQ_Handler(&pUSART);
 80040ea:	4810      	ldr	r0, [pc, #64]	; (800412c <USART2_IRQHandler+0x80>)
 80040ec:	f003 fcc4 	bl	8007a78 <UFCP_TX_IRQ_Handler>
 80040f0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80040f4:	681b      	ldr	r3, [r3, #0]
  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80040f6:	071b      	lsls	r3, r3, #28
 80040f8:	d5e6      	bpl.n	80040c8 <USART2_IRQHandler+0x1c>
    UFCP_OVR_IRQ_Handler(&pUSART);
 80040fa:	480c      	ldr	r0, [pc, #48]	; (800412c <USART2_IRQHandler+0x80>)
 80040fc:	f003 fdb6 	bl	8007c6c <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8004100:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8004108:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 800410e:	9b01      	ldr	r3, [sp, #4]
}
 8004110:	b002      	add	sp, #8
 8004112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UI_SerialCommunicationTimeOutStop();
 8004116:	f000 b925 	b.w	8004364 <UI_SerialCommunicationTimeOutStop>
      UI_SerialCommunicationTimeOutStop();
 800411a:	f000 f923 	bl	8004364 <UI_SerialCommunicationTimeOutStop>
 800411e:	e7df      	b.n	80040e0 <USART2_IRQHandler+0x34>
      UI_SerialCommunicationTimeOutStart();
 8004120:	f000 f926 	bl	8004370 <UI_SerialCommunicationTimeOutStart>
    if (retVal == 2)
 8004124:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004128:	e7c8      	b.n	80040bc <USART2_IRQHandler+0x10>
 800412a:	bf00      	nop
 800412c:	200005b4 	.word	0x200005b4

08004130 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004130:	b530      	push	{r4, r5, lr}
 8004132:	b083      	sub	sp, #12
 8004134:	4c1c      	ldr	r4, [pc, #112]	; (80041a8 <HardFault_Handler+0x78>)
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8004136:	f7fe fff7 	bl	8003128 <TSK_HardwareFaultTask>
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 800413a:	4625      	mov	r5, r4
 800413c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8004140:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8004142:	0712      	lsls	r2, r2, #28
 8004144:	d41d      	bmi.n	8004182 <HardFault_Handler+0x52>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8004146:	681a      	ldr	r2, [r3, #0]
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
        UI_SerialCommunicationTimeOutStop();
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8004148:	0610      	lsls	r0, r2, #24
 800414a:	d40f      	bmi.n	800416c <HardFault_Handler+0x3c>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800414c:	681a      	ldr	r2, [r3, #0]
      {
        UFCP_TX_IRQ_Handler(&pUSART);
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 800414e:	0692      	lsls	r2, r2, #26
 8004150:	d5f6      	bpl.n	8004140 <HardFault_Handler+0x10>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8004152:	6859      	ldr	r1, [r3, #4]
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8004154:	4628      	mov	r0, r5
 8004156:	b2c9      	uxtb	r1, r1
 8004158:	f003 fd26 	bl	8007ba8 <UFCP_RX_IRQ_Handler>
 800415c:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 800415e:	2b01      	cmp	r3, #1
 8004160:	d01f      	beq.n	80041a2 <HardFault_Handler+0x72>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8004162:	2b02      	cmp	r3, #2
 8004164:	d1ea      	bne.n	800413c <HardFault_Handler+0xc>
        {
          UI_SerialCommunicationTimeOutStop();
 8004166:	f000 f8fd 	bl	8004364 <UI_SerialCommunicationTimeOutStop>
 800416a:	e7e7      	b.n	800413c <HardFault_Handler+0xc>
        UFCP_TX_IRQ_Handler(&pUSART);
 800416c:	4628      	mov	r0, r5
 800416e:	f003 fc83 	bl	8007a78 <UFCP_TX_IRQ_Handler>
 8004172:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8004176:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8004178:	0691      	lsls	r1, r2, #26
 800417a:	d4ea      	bmi.n	8004152 <HardFault_Handler+0x22>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800417c:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 800417e:	0712      	lsls	r2, r2, #28
 8004180:	d5e1      	bpl.n	8004146 <HardFault_Handler+0x16>
        UFCP_OVR_IRQ_Handler(&pUSART);
 8004182:	4628      	mov	r0, r5
 8004184:	f003 fd72 	bl	8007c6c <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8004188:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8004190:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8004196:	9b01      	ldr	r3, [sp, #4]
        UI_SerialCommunicationTimeOutStop();
 8004198:	f000 f8e4 	bl	8004364 <UI_SerialCommunicationTimeOutStop>
 800419c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80041a0:	e7d1      	b.n	8004146 <HardFault_Handler+0x16>
          UI_SerialCommunicationTimeOutStart();
 80041a2:	f000 f8e5 	bl	8004370 <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 80041a6:	e7c9      	b.n	800413c <HardFault_Handler+0xc>
 80041a8:	200005b4 	.word	0x200005b4

080041ac <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 80041ac:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 80041ae:	4c0a      	ldr	r4, [pc, #40]	; (80041d8 <SysTick_Handler+0x2c>)
 80041b0:	7823      	ldrb	r3, [r4, #0]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d006      	beq.n	80041c4 <SysTick_Handler+0x18>
 80041b6:	3301      	adds	r3, #1
 80041b8:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 80041ba:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 80041bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 80041c0:	f7fe bfa2 	b.w	8003108 <MC_RunMotorControlTasks>
    HAL_IncTick();
 80041c4:	f000 fe68 	bl	8004e98 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 80041c8:	f001 f954 	bl	8005474 <HAL_SYSTICK_IRQHandler>
 80041cc:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 80041ce:	7023      	strb	r3, [r4, #0]
}
 80041d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 80041d4:	f7fe bf98 	b.w	8003108 <MC_RunMotorControlTasks>
 80041d8:	200006f4 	.word	0x200006f4

080041dc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041dc:	490c      	ldr	r1, [pc, #48]	; (8004210 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041de:	4a0d      	ldr	r2, [pc, #52]	; (8004214 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80041e0:	680b      	ldr	r3, [r1, #0]
{
 80041e2:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041e4:	4c0c      	ldr	r4, [pc, #48]	; (8004218 <_sbrk+0x3c>)
 80041e6:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80041e8:	b12b      	cbz	r3, 80041f6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041ea:	4418      	add	r0, r3
 80041ec:	4290      	cmp	r0, r2
 80041ee:	d807      	bhi.n	8004200 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80041f0:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80041f6:	4b09      	ldr	r3, [pc, #36]	; (800421c <_sbrk+0x40>)
 80041f8:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80041fa:	4418      	add	r0, r3
 80041fc:	4290      	cmp	r0, r2
 80041fe:	d9f7      	bls.n	80041f0 <_sbrk+0x14>
    errno = ENOMEM;
 8004200:	f004 fb06 	bl	8008810 <__errno>
 8004204:	230c      	movs	r3, #12
 8004206:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004208:	f04f 33ff 	mov.w	r3, #4294967295
}
 800420c:	4618      	mov	r0, r3
 800420e:	bd10      	pop	{r4, pc}
 8004210:	2000079c 	.word	0x2000079c
 8004214:	20020000 	.word	0x20020000
 8004218:	00000400 	.word	0x00000400
 800421c:	20000d60 	.word	0x20000d60

08004220 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8004220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004224:	b087      	sub	sp, #28
      pDAC = &DAC_UI_Params;
      pDAC->_Super = UI_Params;
 8004226:	4d2d      	ldr	r5, [pc, #180]	; (80042dc <UI_TaskInit+0xbc>)
{
 8004228:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800422a:	9405      	str	r4, [sp, #20]
      pDAC->_Super = UI_Params;
 800422c:	462c      	mov	r4, r5
{
 800422e:	4682      	mov	sl, r0
 8004230:	460f      	mov	r7, r1
 8004232:	4690      	mov	r8, r2
 8004234:	4699      	mov	r9, r3
      pDAC->_Super = UI_Params;
 8004236:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
      pDAC = &DAC_UI_Params;
 8004238:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 80042f4 <UI_TaskInit+0xd4>
 800423c:	4e28      	ldr	r6, [pc, #160]	; (80042e0 <UI_TaskInit+0xc0>)
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_MEAS_ROT_SPEED );

    pMCP = &MCP_UI_Params;
    pMCP->_Super = UI_Params;

    UFCP_Init( & pUSART );
 800423e:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 80042f8 <UI_TaskInit+0xd8>
      pDAC = &DAC_UI_Params;
 8004242:	f8c6 e000 	str.w	lr, [r6]
      pDAC->_Super = UI_Params;
 8004246:	46f4      	mov	ip, lr
 8004248:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800424c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800424e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004252:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 8004256:	f8cd a000 	str.w	sl, [sp]
      pDAC->_Super = UI_Params;
 800425a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 800425e:	464b      	mov	r3, r9
 8004260:	4670      	mov	r0, lr
 8004262:	4642      	mov	r2, r8
 8004264:	4639      	mov	r1, r7
 8004266:	f000 f889 	bl	800437c <UI_Init>
      UI_DACInit( &pDAC->_Super ); /* Init DAC */
 800426a:	6830      	ldr	r0, [r6, #0]
 800426c:	f000 fab4 	bl	80047d8 <UI_DACInit>
      UI_SetDAC( &pDAC->_Super, DAC_CH0, MC_PROTOCOL_REG_MEAS_ROT_SPEED );
 8004270:	6830      	ldr	r0, [r6, #0]
 8004272:	2230      	movs	r2, #48	; 0x30
 8004274:	2100      	movs	r1, #0
 8004276:	f000 fab7 	bl	80047e8 <UI_SetDAC>
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_MEAS_ROT_SPEED );
 800427a:	6830      	ldr	r0, [r6, #0]
 800427c:	2230      	movs	r2, #48	; 0x30
 800427e:	2101      	movs	r1, #1
 8004280:	f000 fab2 	bl	80047e8 <UI_SetDAC>
    pMCP->_Super = UI_Params;
 8004284:	46ae      	mov	lr, r5
 8004286:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    pMCP = &MCP_UI_Params;
 800428a:	f8df c070 	ldr.w	ip, [pc, #112]	; 80042fc <UI_TaskInit+0xdc>
    pMCP->_Super = UI_Params;
 800428e:	4665      	mov	r5, ip
 8004290:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004292:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004296:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004298:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    pMCP = &MCP_UI_Params;
 800429c:	4c11      	ldr	r4, [pc, #68]	; (80042e4 <UI_TaskInit+0xc4>)
    pMCP->_Super = UI_Params;
 800429e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    UFCP_Init( & pUSART );
 80042a2:	4658      	mov	r0, fp
    pMCP = &MCP_UI_Params;
 80042a4:	f8c4 c000 	str.w	ip, [r4]
    UFCP_Init( & pUSART );
 80042a8:	f003 fbe4 	bl	8007a74 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, pDAC, s_fwVer);
 80042ac:	6832      	ldr	r2, [r6, #0]
 80042ae:	9905      	ldr	r1, [sp, #20]
 80042b0:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <UI_TaskInit+0xc8>)
 80042b2:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80042b6:	4659      	mov	r1, fp
 80042b8:	6820      	ldr	r0, [r4, #0]
 80042ba:	4a0c      	ldr	r2, [pc, #48]	; (80042ec <UI_TaskInit+0xcc>)
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <UI_TaskInit+0xd0>)
 80042c0:	f7ff fb3c 	bl	800393c <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 80042c4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80042c8:	6820      	ldr	r0, [r4, #0]
 80042ca:	464b      	mov	r3, r9
 80042cc:	4642      	mov	r2, r8
 80042ce:	4639      	mov	r1, r7

}
 80042d0:	b007      	add	sp, #28
 80042d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 80042d6:	f000 b851 	b.w	800437c <UI_Init>
 80042da:	bf00      	nop
 80042dc:	2000054c 	.word	0x2000054c
 80042e0:	200007a4 	.word	0x200007a4
 80042e4:	200007a8 	.word	0x200007a8
 80042e8:	08007c89 	.word	0x08007c89
 80042ec:	08007af9 	.word	0x08007af9
 80042f0:	08007ad9 	.word	0x08007ad9
 80042f4:	200000b4 	.word	0x200000b4
 80042f8:	200005b4 	.word	0x200005b4
 80042fc:	20000c80 	.word	0x20000c80

08004300 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8004300:	4a0d      	ldr	r2, [pc, #52]	; (8004338 <UI_Scheduler+0x38>)
 8004302:	8813      	ldrh	r3, [r2, #0]
 8004304:	b29b      	uxth	r3, r3
 8004306:	b11b      	cbz	r3, 8004310 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8004308:	8813      	ldrh	r3, [r2, #0]
 800430a:	3b01      	subs	r3, #1
 800430c:	b29b      	uxth	r3, r3
 800430e:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8004310:	4a0a      	ldr	r2, [pc, #40]	; (800433c <UI_Scheduler+0x3c>)
 8004312:	8813      	ldrh	r3, [r2, #0]
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b01      	cmp	r3, #1
 8004318:	d903      	bls.n	8004322 <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 800431a:	8813      	ldrh	r3, [r2, #0]
 800431c:	3b01      	subs	r3, #1
 800431e:	b29b      	uxth	r3, r3
 8004320:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8004322:	4a07      	ldr	r2, [pc, #28]	; (8004340 <UI_Scheduler+0x40>)
 8004324:	8813      	ldrh	r3, [r2, #0]
 8004326:	b29b      	uxth	r3, r3
 8004328:	2b01      	cmp	r3, #1
 800432a:	d903      	bls.n	8004334 <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 800432c:	8813      	ldrh	r3, [r2, #0]
 800432e:	3b01      	subs	r3, #1
 8004330:	b29b      	uxth	r3, r3
 8004332:	8013      	strh	r3, [r2, #0]
  }
}
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	200007a2 	.word	0x200007a2
 800433c:	200007a0 	.word	0x200007a0
 8004340:	200006f6 	.word	0x200006f6

08004344 <UI_DACUpdate>:

__weak void UI_DACUpdate(uint8_t bMotorNbr)
{
 8004344:	b538      	push	{r3, r4, r5, lr}
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 8004346:	4d06      	ldr	r5, [pc, #24]	; (8004360 <UI_DACUpdate+0x1c>)
{
 8004348:	4604      	mov	r4, r0
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 800434a:	6828      	ldr	r0, [r5, #0]
 800434c:	f000 f82a 	bl	80043a4 <UI_GetSelectedMC>
 8004350:	42a0      	cmp	r0, r4
 8004352:	d000      	beq.n	8004356 <UI_DACUpdate+0x12>
  {
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
  }
}
 8004354:	bd38      	pop	{r3, r4, r5, pc}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 8004356:	6828      	ldr	r0, [r5, #0]
}
 8004358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 800435c:	f000 ba40 	b.w	80047e0 <UI_DACExec>
 8004360:	200007a4 	.word	0x200007a4

08004364 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8004364:	4b01      	ldr	r3, [pc, #4]	; (800436c <UI_SerialCommunicationTimeOutStop+0x8>)
 8004366:	2200      	movs	r2, #0
 8004368:	801a      	strh	r2, [r3, #0]
}
 800436a:	4770      	bx	lr
 800436c:	200007a0 	.word	0x200007a0

08004370 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8004370:	4b01      	ldr	r3, [pc, #4]	; (8004378 <UI_SerialCommunicationTimeOutStart+0x8>)
 8004372:	224f      	movs	r2, #79	; 0x4f
 8004374:	801a      	strh	r2, [r3, #0]
}
 8004376:	4770      	bx	lr
 8004378:	200007a0 	.word	0x200007a0

0800437c <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  * @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 800437c:	b430      	push	{r4, r5}
 800437e:	9c02      	ldr	r4, [sp, #8]
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 8004380:	6284      	str	r4, [r0, #40]	; 0x28
  pHandle->bSelectedDrive = 0u;
 8004382:	2500      	movs	r5, #0
 8004384:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
  pHandle->pMCT = pMCT;
 8004388:	e9c0 2308 	strd	r2, r3, [r0, #32]
}
 800438c:	bc30      	pop	{r4, r5}
  pHandle->bDriveNum = bMCNum;
 800438e:	7701      	strb	r1, [r0, #28]
}
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop

08004394 <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 8004394:	7f03      	ldrb	r3, [r0, #28]
 8004396:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8004398:	bf86      	itte	hi
 800439a:	f880 102c 	strbhi.w	r1, [r0, #44]	; 0x2c
  bool retVal = true;
 800439e:	2001      	movhi	r0, #1
    retVal = false;
 80043a0:	2000      	movls	r0, #0
  }
  return retVal;
}
 80043a2:	4770      	bx	lr

080043a4 <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 80043a4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop

080043ac <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 80043ac:	b570      	push	{r4, r5, r6, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80043ae:	e9d0 5408 	ldrd	r5, r4, [r0, #32]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80043b2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 80043b6:	b082      	sub	sp, #8
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80043b8:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80043bc:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
{
 80043c0:	4614      	mov	r4, r2
 80043c2:	295b      	cmp	r1, #91	; 0x5b
 80043c4:	d85d      	bhi.n	8004482 <UI_SetReg+0xd6>
 80043c6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80043ca:	006b      	.short	0x006b
 80043cc:	005c005c 	.word	0x005c005c
 80043d0:	005c006f 	.word	0x005c006f
 80043d4:	007f0079 	.word	0x007f0079
 80043d8:	008b0085 	.word	0x008b0085
 80043dc:	009d0097 	.word	0x009d0097
 80043e0:	00a900a3 	.word	0x00a900a3
 80043e4:	00bb00b5 	.word	0x00bb00b5
 80043e8:	00c700c1 	.word	0x00c700c1
 80043ec:	005c00e1 	.word	0x005c00e1
 80043f0:	00fb005c 	.word	0x00fb005c
 80043f4:	005c0117 	.word	0x005c0117
 80043f8:	005c005c 	.word	0x005c005c
 80043fc:	005c005c 	.word	0x005c005c
 8004400:	005c005c 	.word	0x005c005c
 8004404:	005c005c 	.word	0x005c005c
 8004408:	005c005c 	.word	0x005c005c
 800440c:	005c005c 	.word	0x005c005c
 8004410:	005c005c 	.word	0x005c005c
 8004414:	005c005c 	.word	0x005c005c
 8004418:	005c005c 	.word	0x005c005c
 800441c:	005c005c 	.word	0x005c005c
 8004420:	005c005c 	.word	0x005c005c
 8004424:	005c005c 	.word	0x005c005c
 8004428:	005c005c 	.word	0x005c005c
 800442c:	005c005c 	.word	0x005c005c
 8004430:	005c005c 	.word	0x005c005c
 8004434:	005c005c 	.word	0x005c005c
 8004438:	005c005c 	.word	0x005c005c
 800443c:	005c005c 	.word	0x005c005c
 8004440:	005c005c 	.word	0x005c005c
 8004444:	005c005c 	.word	0x005c005c
 8004448:	005c005c 	.word	0x005c005c
 800444c:	005c0133 	.word	0x005c0133
 8004450:	005c005c 	.word	0x005c005c
 8004454:	005c005c 	.word	0x005c005c
 8004458:	005c005c 	.word	0x005c005c
 800445c:	005c005c 	.word	0x005c005c
 8004460:	005c005c 	.word	0x005c005c
 8004464:	005c005c 	.word	0x005c005c
 8004468:	005c005c 	.word	0x005c005c
 800446c:	005c005c 	.word	0x005c005c
 8004470:	005c005c 	.word	0x005c005c
 8004474:	005c005c 	.word	0x005c005c
 8004478:	005c005c 	.word	0x005c005c
 800447c:	005c005c 	.word	0x005c005c
 8004480:	005f      	.short	0x005f
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8004482:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 8004484:	b002      	add	sp, #8
 8004486:	bd70      	pop	{r4, r5, r6, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8004488:	4a7e      	ldr	r2, [pc, #504]	; (8004684 <UI_SetReg+0x2d8>)
 800448a:	fb82 3204 	smull	r3, r2, r2, r4
 800448e:	eba2 74e4 	sub.w	r4, r2, r4, asr #31
 8004492:	4630      	mov	r0, r6
 8004494:	b221      	sxth	r1, r4
 8004496:	2200      	movs	r2, #0
 8004498:	f7fe f840 	bl	800251c <MCI_ExecSpeedRamp>
  bool retVal = true;
 800449c:	2001      	movs	r0, #1
    break;
 800449e:	e7f1      	b.n	8004484 <UI_SetReg+0xd8>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 80044a0:	b2e1      	uxtb	r1, r4
 80044a2:	f7ff ff77 	bl	8004394 <UI_SelectMC>
    break;
 80044a6:	e7ed      	b.n	8004484 <UI_SetReg+0xd8>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 80044a8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80044ac:	f000 80d6 	beq.w	800465c <UI_SetReg+0x2b0>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 80044b0:	2c01      	cmp	r4, #1
 80044b2:	f000 80dd 	beq.w	8004670 <UI_SetReg+0x2c4>
  bool retVal = true;
 80044b6:	2001      	movs	r0, #1
}
 80044b8:	b002      	add	sp, #8
 80044ba:	bd70      	pop	{r4, r5, r6, pc}
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 80044bc:	6828      	ldr	r0, [r5, #0]
 80044be:	b221      	sxth	r1, r4
 80044c0:	f002 fde0 	bl	8007084 <PID_SetKP>
  bool retVal = true;
 80044c4:	2001      	movs	r0, #1
    break;
 80044c6:	e7dd      	b.n	8004484 <UI_SetReg+0xd8>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 80044c8:	6828      	ldr	r0, [r5, #0]
 80044ca:	b221      	sxth	r1, r4
 80044cc:	f002 fddc 	bl	8007088 <PID_SetKI>
  bool retVal = true;
 80044d0:	2001      	movs	r0, #1
    break;
 80044d2:	e7d7      	b.n	8004484 <UI_SetReg+0xd8>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 80044d4:	6828      	ldr	r0, [r5, #0]
 80044d6:	b221      	sxth	r1, r4
 80044d8:	f002 fde6 	bl	80070a8 <PID_SetKD>
  bool retVal = true;
 80044dc:	2001      	movs	r0, #1
    break;
 80044de:	e7d1      	b.n	8004484 <UI_SetReg+0xd8>
      currComp = MCI_GetIqdref(pMCI);
 80044e0:	4630      	mov	r0, r6
 80044e2:	f7fe f8f7 	bl	80026d4 <MCI_GetIqdref>
 80044e6:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 80044e8:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 80044ec:	4630      	mov	r0, r6
 80044ee:	9901      	ldr	r1, [sp, #4]
 80044f0:	f7fe f82a 	bl	8002548 <MCI_SetCurrentReferences>
  bool retVal = true;
 80044f4:	2001      	movs	r0, #1
    break;
 80044f6:	e7c5      	b.n	8004484 <UI_SetReg+0xd8>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 80044f8:	6868      	ldr	r0, [r5, #4]
 80044fa:	b221      	sxth	r1, r4
 80044fc:	f002 fdc2 	bl	8007084 <PID_SetKP>
  bool retVal = true;
 8004500:	2001      	movs	r0, #1
    break;
 8004502:	e7bf      	b.n	8004484 <UI_SetReg+0xd8>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8004504:	6868      	ldr	r0, [r5, #4]
 8004506:	b221      	sxth	r1, r4
 8004508:	f002 fdbe 	bl	8007088 <PID_SetKI>
  bool retVal = true;
 800450c:	2001      	movs	r0, #1
    break;
 800450e:	e7b9      	b.n	8004484 <UI_SetReg+0xd8>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8004510:	6868      	ldr	r0, [r5, #4]
 8004512:	b221      	sxth	r1, r4
 8004514:	f002 fdc8 	bl	80070a8 <PID_SetKD>
  bool retVal = true;
 8004518:	2001      	movs	r0, #1
    break;
 800451a:	e7b3      	b.n	8004484 <UI_SetReg+0xd8>
      currComp = MCI_GetIqdref(pMCI);
 800451c:	4630      	mov	r0, r6
 800451e:	f7fe f8d9 	bl	80026d4 <MCI_GetIqdref>
 8004522:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 8004524:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 8004528:	4630      	mov	r0, r6
 800452a:	9901      	ldr	r1, [sp, #4]
 800452c:	f7fe f80c 	bl	8002548 <MCI_SetCurrentReferences>
  bool retVal = true;
 8004530:	2001      	movs	r0, #1
    break;
 8004532:	e7a7      	b.n	8004484 <UI_SetReg+0xd8>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8004534:	68a8      	ldr	r0, [r5, #8]
 8004536:	b221      	sxth	r1, r4
 8004538:	f002 fda4 	bl	8007084 <PID_SetKP>
  bool retVal = true;
 800453c:	2001      	movs	r0, #1
    break;
 800453e:	e7a1      	b.n	8004484 <UI_SetReg+0xd8>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8004540:	68a8      	ldr	r0, [r5, #8]
 8004542:	b221      	sxth	r1, r4
 8004544:	f002 fda0 	bl	8007088 <PID_SetKI>
  bool retVal = true;
 8004548:	2001      	movs	r0, #1
    break;
 800454a:	e79b      	b.n	8004484 <UI_SetReg+0xd8>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 800454c:	68a8      	ldr	r0, [r5, #8]
 800454e:	b221      	sxth	r1, r4
 8004550:	f002 fdaa 	bl	80070a8 <PID_SetKD>
  bool retVal = true;
 8004554:	2001      	movs	r0, #1
    break;
 8004556:	e795      	b.n	8004484 <UI_SetReg+0xd8>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004558:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800455a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800455e:	0f1a      	lsrs	r2, r3, #28
 8004560:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004562:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004566:	d06d      	beq.n	8004644 <UI_SetReg+0x298>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004568:	2b09      	cmp	r3, #9
 800456a:	d1a4      	bne.n	80044b6 <UI_SetReg+0x10a>
        pSPD = pMCT->pSpeedSensorAux;
 800456c:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 800456e:	2e00      	cmp	r6, #0
 8004570:	d0a1      	beq.n	80044b6 <UI_SetReg+0x10a>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8004572:	aa01      	add	r2, sp, #4
 8004574:	f10d 0102 	add.w	r1, sp, #2
 8004578:	4630      	mov	r0, r6
 800457a:	f004 f8fb 	bl	8008774 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hC2);
 800457e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8004582:	b221      	sxth	r1, r4
 8004584:	4630      	mov	r0, r6
 8004586:	f004 f8fd 	bl	8008784 <STO_PLL_SetObserverGains>
    break;
 800458a:	e794      	b.n	80044b6 <UI_SetReg+0x10a>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800458c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800458e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004592:	0f1a      	lsrs	r2, r3, #28
 8004594:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004596:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800459a:	d04f      	beq.n	800463c <UI_SetReg+0x290>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800459c:	2b09      	cmp	r3, #9
 800459e:	d18a      	bne.n	80044b6 <UI_SetReg+0x10a>
        pSPD = pMCT->pSpeedSensorAux;
 80045a0:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 80045a2:	2e00      	cmp	r6, #0
 80045a4:	d087      	beq.n	80044b6 <UI_SetReg+0x10a>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80045a6:	aa01      	add	r2, sp, #4
 80045a8:	f10d 0102 	add.w	r1, sp, #2
 80045ac:	4630      	mov	r0, r6
 80045ae:	f004 f8e1 	bl	8008774 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,hC1,(int16_t)wValue);
 80045b2:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 80045b6:	b222      	sxth	r2, r4
 80045b8:	4630      	mov	r0, r6
 80045ba:	f004 f8e3 	bl	8008784 <STO_PLL_SetObserverGains>
    break;
 80045be:	e77a      	b.n	80044b6 <UI_SetReg+0x10a>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80045c0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80045c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80045c6:	0f1a      	lsrs	r2, r3, #28
 80045c8:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80045ca:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80045ce:	d03d      	beq.n	800464c <UI_SetReg+0x2a0>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80045d0:	2b09      	cmp	r3, #9
 80045d2:	f47f af70 	bne.w	80044b6 <UI_SetReg+0x10a>
        pSPD = pMCT->pSpeedSensorAux;
 80045d6:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 80045d8:	2e00      	cmp	r6, #0
 80045da:	f43f af6c 	beq.w	80044b6 <UI_SetReg+0x10a>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 80045de:	aa01      	add	r2, sp, #4
 80045e0:	f10d 0102 	add.w	r1, sp, #2
 80045e4:	4630      	mov	r0, r6
 80045e6:	f004 f8d1 	bl	800878c <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,hPgain,(int16_t)wValue);
 80045ea:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 80045ee:	b222      	sxth	r2, r4
 80045f0:	4630      	mov	r0, r6
 80045f2:	f004 f8d9 	bl	80087a8 <STO_SetPLLGains>
    break;
 80045f6:	e75e      	b.n	80044b6 <UI_SetReg+0x10a>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80045f8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80045fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80045fe:	0f1a      	lsrs	r2, r3, #28
 8004600:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004602:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004606:	d025      	beq.n	8004654 <UI_SetReg+0x2a8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004608:	2b09      	cmp	r3, #9
 800460a:	f47f af54 	bne.w	80044b6 <UI_SetReg+0x10a>
        pSPD = pMCT->pSpeedSensorAux;
 800460e:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 8004610:	2e00      	cmp	r6, #0
 8004612:	f43f af50 	beq.w	80044b6 <UI_SetReg+0x10a>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8004616:	aa01      	add	r2, sp, #4
 8004618:	f10d 0102 	add.w	r1, sp, #2
 800461c:	4630      	mov	r0, r6
 800461e:	f004 f8b5 	bl	800878c <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hIgain);
 8004622:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8004626:	b221      	sxth	r1, r4
 8004628:	4630      	mov	r0, r6
 800462a:	f004 f8bd 	bl	80087a8 <STO_SetPLLGains>
    break;
 800462e:	e742      	b.n	80044b6 <UI_SetReg+0x10a>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8004630:	4630      	mov	r0, r6
 8004632:	b221      	sxth	r1, r4
 8004634:	f7fe f87c 	bl	8002730 <MCI_SetIdref>
  bool retVal = true;
 8004638:	2001      	movs	r0, #1
    break;
 800463a:	e723      	b.n	8004484 <UI_SetReg+0xd8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800463c:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 800463e:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004640:	d1af      	bne.n	80045a2 <UI_SetReg+0x1f6>
 8004642:	e7ad      	b.n	80045a0 <UI_SetReg+0x1f4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004644:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8004646:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004648:	d191      	bne.n	800456e <UI_SetReg+0x1c2>
 800464a:	e78f      	b.n	800456c <UI_SetReg+0x1c0>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800464c:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 800464e:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004650:	d1c2      	bne.n	80045d8 <UI_SetReg+0x22c>
 8004652:	e7c0      	b.n	80045d6 <UI_SetReg+0x22a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004654:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8004656:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004658:	d1da      	bne.n	8004610 <UI_SetReg+0x264>
 800465a:	e7d8      	b.n	800460e <UI_SetReg+0x262>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 800465c:	4630      	mov	r0, r6
 800465e:	f7fe f863 	bl	8002728 <MCI_GetTeref>
 8004662:	4622      	mov	r2, r4
 8004664:	4601      	mov	r1, r0
 8004666:	4630      	mov	r0, r6
 8004668:	f7fd ff64 	bl	8002534 <MCI_ExecTorqueRamp>
  bool retVal = true;
 800466c:	2001      	movs	r0, #1
 800466e:	e709      	b.n	8004484 <UI_SetReg+0xd8>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8004670:	4630      	mov	r0, r6
 8004672:	f7fe f801 	bl	8002678 <MCI_GetMecSpeedRefUnit>
 8004676:	2200      	movs	r2, #0
 8004678:	4601      	mov	r1, r0
 800467a:	4630      	mov	r0, r6
 800467c:	f7fd ff4e 	bl	800251c <MCI_ExecSpeedRamp>
  bool retVal = true;
 8004680:	4620      	mov	r0, r4
 8004682:	e6ff      	b.n	8004484 <UI_SetReg+0xd8>
 8004684:	2aaaaaab 	.word	0x2aaaaaab

08004688 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8004688:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800468a:	6a03      	ldr	r3, [r0, #32]
 800468c:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8004690:	3901      	subs	r1, #1
 8004692:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]

  switch (bCmdID)
 8004696:	290d      	cmp	r1, #13
 8004698:	d808      	bhi.n	80046ac <UI_ExecCmd+0x24>
 800469a:	e8df f001 	tbb	[pc, r1]
 800469e:	1419      	.short	0x1419
 80046a0:	100e0e09 	.word	0x100e0e09
 80046a4:	0728231e 	.word	0x0728231e
 80046a8:	14070707 	.word	0x14070707
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80046ac:	2000      	movs	r0, #0
    retVal = false;
	}
    break;
  }
  return retVal;
}
 80046ae:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == RUN)
 80046b0:	4620      	mov	r0, r4
 80046b2:	f7fd ffa5 	bl	8002600 <MCI_GetSTMState>
 80046b6:	2806      	cmp	r0, #6
 80046b8:	d01e      	beq.n	80046f8 <UI_ExecCmd+0x70>
  bool retVal = true;
 80046ba:	2001      	movs	r0, #1
}
 80046bc:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 80046be:	4620      	mov	r0, r4
 80046c0:	f7fd ff9e 	bl	8002600 <MCI_GetSTMState>
 80046c4:	b120      	cbz	r0, 80046d0 <UI_ExecCmd+0x48>
        MCI_StopMotor(pMCI);
 80046c6:	4620      	mov	r0, r4
 80046c8:	f7fd ff52 	bl	8002570 <MCI_StopMotor>
  bool retVal = true;
 80046cc:	2001      	movs	r0, #1
}
 80046ce:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 80046d0:	4620      	mov	r0, r4
 80046d2:	f7fd ff43 	bl	800255c <MCI_StartMotor>
  bool retVal = true;
 80046d6:	2001      	movs	r0, #1
}
 80046d8:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 80046da:	4620      	mov	r0, r4
 80046dc:	f7fd ff4c 	bl	8002578 <MCI_FaultAcknowledged>
  bool retVal = true;
 80046e0:	2001      	movs	r0, #1
}
 80046e2:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 80046e4:	4620      	mov	r0, r4
 80046e6:	f7fd ff4b 	bl	8002580 <MCI_EncoderAlign>
  bool retVal = true;
 80046ea:	2001      	movs	r0, #1
}
 80046ec:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 80046ee:	4620      	mov	r0, r4
 80046f0:	f7fe f828 	bl	8002744 <MCI_Clear_Iqdref>
  bool retVal = true;
 80046f4:	2001      	movs	r0, #1
}
 80046f6:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 80046f8:	4620      	mov	r0, r4
 80046fa:	f7fd ffb1 	bl	8002660 <MCI_StopRamp>
  bool retVal = true;
 80046fe:	2001      	movs	r0, #1
}
 8004700:	bd10      	pop	{r4, pc}
 8004702:	bf00      	nop

08004704 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8004704:	b510      	push	{r4, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8004706:	4b07      	ldr	r3, [pc, #28]	; (8004724 <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004708:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 800470c:	6a00      	ldr	r0, [r0, #32]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 800470e:	fb83 c301 	smull	ip, r3, r3, r1
 8004712:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8004716:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800471a:	b209      	sxth	r1, r1
 800471c:	f7fd fefe 	bl	800251c <MCI_ExecSpeedRamp>
  return true;
}
 8004720:	2001      	movs	r0, #1
 8004722:	bd10      	pop	{r4, pc}
 8004724:	2aaaaaab 	.word	0x2aaaaaab

08004728 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8004728:	b510      	push	{r4, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800472a:	6a03      	ldr	r3, [r0, #32]
 800472c:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8004730:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004734:	f7fd fefe 	bl	8002534 <MCI_ExecTorqueRamp>
  return true;
}
 8004738:	2001      	movs	r0, #1
 800473a:	bd10      	pop	{r4, pc}

0800473c <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 800473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 800473e:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8004742:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004744:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8004748:	6944      	ldr	r4, [r0, #20]
  if (pRevupCtrl)
 800474a:	b19c      	cbz	r4, 8004774 <UI_GetRevupData+0x38>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 800474c:	4620      	mov	r0, r4
 800474e:	461e      	mov	r6, r3
 8004750:	4617      	mov	r7, r2
 8004752:	460d      	mov	r5, r1
 8004754:	f003 fd60 	bl	8008218 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8004758:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 800475a:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 800475c:	4620      	mov	r0, r4
 800475e:	f003 fd61 	bl	8008224 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8004762:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8004764:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8004766:	4620      	mov	r0, r4
 8004768:	f003 fd64 	bl	8008234 <RUC_GetPhaseFinalTorque>
 800476c:	9b06      	ldr	r3, [sp, #24]
 800476e:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 8004770:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 8004772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 8004774:	4620      	mov	r0, r4
}
 8004776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004778 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8004778:	b570      	push	{r4, r5, r6, lr}
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 800477a:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 800477e:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8004780:	b082      	sub	sp, #8
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8004782:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
{
 8004786:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 800478a:	6940      	ldr	r0, [r0, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 800478c:	9001      	str	r0, [sp, #4]
{
 800478e:	461d      	mov	r5, r3
 8004790:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8004792:	f003 fd2f 	bl	80081f4 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8004796:	9801      	ldr	r0, [sp, #4]
 8004798:	462a      	mov	r2, r5
 800479a:	4621      	mov	r1, r4
 800479c:	f003 fd30 	bl	8008200 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 80047a0:	9801      	ldr	r0, [sp, #4]
 80047a2:	4632      	mov	r2, r6
 80047a4:	4621      	mov	r1, r4
 80047a6:	f003 fd31 	bl	800820c <RUC_SetPhaseFinalTorque>
  return true;
}
 80047aa:	2001      	movs	r0, #1
 80047ac:	b002      	add	sp, #8
 80047ae:	bd70      	pop	{r4, r5, r6, pc}

080047b0 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 80047b0:	b410      	push	{r4}
 80047b2:	b083      	sub	sp, #12

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80047b4:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 80047b8:	6a03      	ldr	r3, [r0, #32]
  qd_t currComp;
  currComp.q = hIqRef;
 80047ba:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 80047be:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 80047c2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80047c6:	9901      	ldr	r1, [sp, #4]
}
 80047c8:	b003      	add	sp, #12
 80047ca:	f85d 4b04 	ldr.w	r4, [sp], #4
  MCI_SetCurrentReferences(pMCI,currComp);
 80047ce:	f7fd bebb 	b.w	8002548 <MCI_SetCurrentReferences>
 80047d2:	bf00      	nop

080047d4 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 80047d4:	2000      	movs	r0, #0
 80047d6:	4770      	bx	lr

080047d8 <UI_DACInit>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
__weak void UI_DACInit(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACInit)
 80047d8:	6943      	ldr	r3, [r0, #20]
 80047da:	b103      	cbz	r3, 80047de <UI_DACInit+0x6>
  {
	  pHandle->pFct_DACInit(pHandle);
 80047dc:	4718      	bx	r3
  }
}
 80047de:	4770      	bx	lr

080047e0 <UI_DACExec>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
void UI_DACExec(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACExec)
 80047e0:	6983      	ldr	r3, [r0, #24]
 80047e2:	b103      	cbz	r3, 80047e6 <UI_DACExec+0x6>
  {
    pHandle->pFct_DACExec(pHandle);
 80047e4:	4718      	bx	r3
  }
}
 80047e6:	4770      	bx	lr

080047e8 <UI_SetDAC>:
  * @retval none.
  */
void UI_SetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                         MC_Protocol_REG_t bVariable)
{
  if (pHandle->pFctDACSetChannelConfig)
 80047e8:	6843      	ldr	r3, [r0, #4]
 80047ea:	b103      	cbz	r3, 80047ee <UI_SetDAC+0x6>
  {
	  pHandle->pFctDACSetChannelConfig(pHandle, bChannel, bVariable);
 80047ec:	4718      	bx	r3
  }
}
 80047ee:	4770      	bx	lr

080047f0 <UI_GetDAC>:
  *         It must be one of the exported UI register (Example: MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t UI_GetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  MC_Protocol_REG_t retVal = MC_PROTOCOL_REG_UNDEFINED;
  if (pHandle->pFctDACGetChannelConfig)
 80047f0:	6883      	ldr	r3, [r0, #8]
 80047f2:	b103      	cbz	r3, 80047f6 <UI_GetDAC+0x6>
  {
    retVal = pHandle->pFctDACGetChannelConfig(pHandle, bChannel);
 80047f4:	4718      	bx	r3
  }
  return retVal;
}
 80047f6:	2089      	movs	r0, #137	; 0x89
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop

080047fc <UI_GetReg>:
{
 80047fc:	b570      	push	{r4, r5, r6, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80047fe:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8004802:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8004806:	b090      	sub	sp, #64	; 0x40
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8004808:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800480c:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
  if ( success != (bool *) 0 )
 8004810:	2a00      	cmp	r2, #0
 8004812:	f000 8089 	beq.w	8004928 <UI_GetReg+0x12c>
    *success = true;
 8004816:	2401      	movs	r4, #1
 8004818:	7014      	strb	r4, [r2, #0]
  switch (bRegID)
 800481a:	2981      	cmp	r1, #129	; 0x81
 800481c:	f200 829c 	bhi.w	8004d58 <UI_GetReg+0x55c>
 8004820:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004824:	01e501e9 	.word	0x01e501e9
 8004828:	021b021f 	.word	0x021b021f
 800482c:	01ec01f0 	.word	0x01ec01f0
 8004830:	01890156 	.word	0x01890156
 8004834:	026000ff 	.word	0x026000ff
 8004838:	0258025c 	.word	0x0258025c
 800483c:	025400fa 	.word	0x025400fa
 8004840:	02640268 	.word	0x02640268
 8004844:	022e023d 	.word	0x022e023d
 8004848:	029a029a 	.word	0x029a029a
 800484c:	02740286 	.word	0x02740286
 8004850:	029a029a 	.word	0x029a029a
 8004854:	0250029a 	.word	0x0250029a
 8004858:	0270024c 	.word	0x0270024c
 800485c:	01e1026c 	.word	0x01e1026c
 8004860:	020801da 	.word	0x020801da
 8004864:	029a0203 	.word	0x029a0203
 8004868:	01f701fc 	.word	0x01f701fc
 800486c:	018d0192 	.word	0x018d0192
 8004870:	020801ad 	.word	0x020801ad
 8004874:	00ff0203 	.word	0x00ff0203
 8004878:	015f00fa 	.word	0x015f00fa
 800487c:	01a8015a 	.word	0x01a8015a
 8004880:	029a0151 	.word	0x029a0151
 8004884:	0140029a 	.word	0x0140029a
 8004888:	01750164 	.word	0x01750164
 800488c:	011c012e 	.word	0x011c012e
 8004890:	029a010a 	.word	0x029a010a
 8004894:	029a029a 	.word	0x029a029a
 8004898:	029a029a 	.word	0x029a029a
 800489c:	0104029a 	.word	0x0104029a
 80048a0:	020d0214 	.word	0x020d0214
 80048a4:	00fa0227 	.word	0x00fa0227
 80048a8:	01b201c6 	.word	0x01b201c6
 80048ac:	029a029a 	.word	0x029a029a
 80048b0:	029a029a 	.word	0x029a029a
 80048b4:	029a029a 	.word	0x029a029a
 80048b8:	029a029a 	.word	0x029a029a
 80048bc:	029a029a 	.word	0x029a029a
 80048c0:	029a029a 	.word	0x029a029a
 80048c4:	029a029a 	.word	0x029a029a
 80048c8:	029a029a 	.word	0x029a029a
 80048cc:	029a029a 	.word	0x029a029a
 80048d0:	029a029a 	.word	0x029a029a
 80048d4:	029a029a 	.word	0x029a029a
 80048d8:	019b029a 	.word	0x019b029a
 80048dc:	029a029a 	.word	0x029a029a
 80048e0:	029a029a 	.word	0x029a029a
 80048e4:	029a029a 	.word	0x029a029a
 80048e8:	029a029a 	.word	0x029a029a
 80048ec:	029a029a 	.word	0x029a029a
 80048f0:	029a029a 	.word	0x029a029a
 80048f4:	029a029a 	.word	0x029a029a
 80048f8:	029a029a 	.word	0x029a029a
 80048fc:	029a029a 	.word	0x029a029a
 8004900:	02230197 	.word	0x02230197
 8004904:	029a0298 	.word	0x029a0298
 8004908:	00f700f7 	.word	0x00f700f7
 800490c:	029a029a 	.word	0x029a029a
 8004910:	029a029a 	.word	0x029a029a
 8004914:	029a029a 	.word	0x029a029a
 8004918:	029a029a 	.word	0x029a029a
 800491c:	029a029a 	.word	0x029a029a
 8004920:	029a029a 	.word	0x029a029a
 8004924:	00f7029a 	.word	0x00f7029a
 8004928:	2970      	cmp	r1, #112	; 0x70
 800492a:	d872      	bhi.n	8004a12 <UI_GetReg+0x216>
 800492c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004930:	015f0163 	.word	0x015f0163
 8004934:	01950199 	.word	0x01950199
 8004938:	0166016a 	.word	0x0166016a
 800493c:	010300d0 	.word	0x010300d0
 8004940:	01da0079 	.word	0x01da0079
 8004944:	01d201d6 	.word	0x01d201d6
 8004948:	01ce0074 	.word	0x01ce0074
 800494c:	01de01e2 	.word	0x01de01e2
 8004950:	01a801b7 	.word	0x01a801b7
 8004954:	00710071 	.word	0x00710071
 8004958:	01ee0200 	.word	0x01ee0200
 800495c:	00710071 	.word	0x00710071
 8004960:	01ca0071 	.word	0x01ca0071
 8004964:	01ea01c6 	.word	0x01ea01c6
 8004968:	015b01e6 	.word	0x015b01e6
 800496c:	01820154 	.word	0x01820154
 8004970:	0071017d 	.word	0x0071017d
 8004974:	01710176 	.word	0x01710176
 8004978:	0107010c 	.word	0x0107010c
 800497c:	01820127 	.word	0x01820127
 8004980:	0079017d 	.word	0x0079017d
 8004984:	00d90074 	.word	0x00d90074
 8004988:	012200d4 	.word	0x012200d4
 800498c:	007100cb 	.word	0x007100cb
 8004990:	00ba0071 	.word	0x00ba0071
 8004994:	00ef00de 	.word	0x00ef00de
 8004998:	009600a8 	.word	0x009600a8
 800499c:	00710084 	.word	0x00710084
 80049a0:	00710071 	.word	0x00710071
 80049a4:	00710071 	.word	0x00710071
 80049a8:	007e0071 	.word	0x007e0071
 80049ac:	0187018e 	.word	0x0187018e
 80049b0:	007401a1 	.word	0x007401a1
 80049b4:	012c0140 	.word	0x012c0140
 80049b8:	00710071 	.word	0x00710071
 80049bc:	00710071 	.word	0x00710071
 80049c0:	00710071 	.word	0x00710071
 80049c4:	00710071 	.word	0x00710071
 80049c8:	00710071 	.word	0x00710071
 80049cc:	00710071 	.word	0x00710071
 80049d0:	00710071 	.word	0x00710071
 80049d4:	00710071 	.word	0x00710071
 80049d8:	00710071 	.word	0x00710071
 80049dc:	00710071 	.word	0x00710071
 80049e0:	00710071 	.word	0x00710071
 80049e4:	01150071 	.word	0x01150071
 80049e8:	00710071 	.word	0x00710071
 80049ec:	00710071 	.word	0x00710071
 80049f0:	00710071 	.word	0x00710071
 80049f4:	00710071 	.word	0x00710071
 80049f8:	00710071 	.word	0x00710071
 80049fc:	00710071 	.word	0x00710071
 8004a00:	00710071 	.word	0x00710071
 8004a04:	00710071 	.word	0x00710071
 8004a08:	00710071 	.word	0x00710071
 8004a0c:	019d0111 	.word	0x019d0111
 8004a10:	0212      	.short	0x0212
  int32_t bRetVal = 0;
 8004a12:	2000      	movs	r0, #0
}
 8004a14:	b010      	add	sp, #64	; 0x40
 8004a16:	bd70      	pop	{r4, r5, r6, pc}
      bRetVal = MCI_GetIqdref(pMCI).d;
 8004a18:	4630      	mov	r0, r6
 8004a1a:	f7fd fe5b 	bl	80026d4 <MCI_GetIqdref>
 8004a1e:	1400      	asrs	r0, r0, #16
    break;
 8004a20:	e7f8      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = MCI_GetIqdref(pMCI).q;
 8004a22:	4630      	mov	r0, r6
 8004a24:	f7fd fe56 	bl	80026d4 <MCI_GetIqdref>
 8004a28:	b200      	sxth	r0, r0
    break;
 8004a2a:	e7f3      	b.n	8004a14 <UI_GetReg+0x218>
      if (pHandle->pFctDACGetUserChannelValue)
 8004a2c:	6903      	ldr	r3, [r0, #16]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0ef      	beq.n	8004a12 <UI_GetReg+0x216>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 0);
 8004a32:	2100      	movs	r1, #0
 8004a34:	4798      	blx	r3
 8004a36:	e7ed      	b.n	8004a14 <UI_GetReg+0x218>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004a38:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004a3e:	0f1a      	lsrs	r2, r3, #28
 8004a40:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004a42:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004a46:	f000 81a7 	beq.w	8004d98 <UI_GetReg+0x59c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004a4a:	2b09      	cmp	r3, #9
 8004a4c:	d1e1      	bne.n	8004a12 <UI_GetReg+0x216>
        pSPD = pMCT->pSpeedSensorAux;
 8004a4e:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8004a50:	2800      	cmp	r0, #0
 8004a52:	d0de      	beq.n	8004a12 <UI_GetReg+0x216>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).beta;
 8004a54:	f003 fe6e 	bl	8008734 <STO_PLL_GetEstimatedBemf>
 8004a58:	1400      	asrs	r0, r0, #16
 8004a5a:	e7db      	b.n	8004a14 <UI_GetReg+0x218>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004a5c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004a62:	0f1a      	lsrs	r2, r3, #28
 8004a64:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004a66:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004a6a:	f000 8181 	beq.w	8004d70 <UI_GetReg+0x574>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004a6e:	2b09      	cmp	r3, #9
 8004a70:	d1cf      	bne.n	8004a12 <UI_GetReg+0x216>
        pSPD =  pMCT->pSpeedSensorAux;
 8004a72:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8004a74:	2800      	cmp	r0, #0
 8004a76:	d0cc      	beq.n	8004a12 <UI_GetReg+0x216>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).alpha;
 8004a78:	f003 fe5c 	bl	8008734 <STO_PLL_GetEstimatedBemf>
 8004a7c:	b200      	sxth	r0, r0
 8004a7e:	e7c9      	b.n	8004a14 <UI_GetReg+0x218>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004a80:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004a86:	0f1a      	lsrs	r2, r3, #28
 8004a88:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004a8a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004a8e:	f000 81af 	beq.w	8004df0 <UI_GetReg+0x5f4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004a92:	2b09      	cmp	r3, #9
 8004a94:	d1bd      	bne.n	8004a12 <UI_GetReg+0x216>
        pSPD = pMCT->pSpeedSensorAux;
 8004a96:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	d0ba      	beq.n	8004a12 <UI_GetReg+0x216>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).beta;
 8004a9c:	f003 fe56 	bl	800874c <STO_PLL_GetEstimatedCurrent>
 8004aa0:	1400      	asrs	r0, r0, #16
 8004aa2:	e7b7      	b.n	8004a14 <UI_GetReg+0x218>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004aa4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004aaa:	0f1a      	lsrs	r2, r3, #28
 8004aac:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004aae:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004ab2:	f000 816c 	beq.w	8004d8e <UI_GetReg+0x592>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004ab6:	2b09      	cmp	r3, #9
 8004ab8:	d1ab      	bne.n	8004a12 <UI_GetReg+0x216>
        pSPD = pMCT->pSpeedSensorAux;
 8004aba:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8004abc:	2800      	cmp	r0, #0
 8004abe:	d0a8      	beq.n	8004a12 <UI_GetReg+0x216>
        bRetVal = SPD_GetElAngle(pSPD);
 8004ac0:	f002 fe18 	bl	80076f4 <SPD_GetElAngle>
 8004ac4:	e7a6      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8004ac6:	4630      	mov	r0, r6
 8004ac8:	f7fd fe20 	bl	800270c <MCI_GetValphabeta>
 8004acc:	1400      	asrs	r0, r0, #16
    break;
 8004ace:	e7a1      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8004ad0:	6828      	ldr	r0, [r5, #0]
 8004ad2:	f002 fadf 	bl	8007094 <PID_GetKI>
    break;
 8004ad6:	e79d      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = MCI_GetVqd(pMCI).d;
 8004ad8:	4630      	mov	r0, r6
 8004ada:	f7fd fe09 	bl	80026f0 <MCI_GetVqd>
 8004ade:	1400      	asrs	r0, r0, #16
    break;
 8004ae0:	e798      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = MCI_GetVqd(pMCI).q;
 8004ae2:	4630      	mov	r0, r6
 8004ae4:	f7fd fe04 	bl	80026f0 <MCI_GetVqd>
 8004ae8:	b200      	sxth	r0, r0
    break;
 8004aea:	e793      	b.n	8004a14 <UI_GetReg+0x218>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004aec:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004af2:	0f1a      	lsrs	r2, r3, #28
 8004af4:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004af6:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004afa:	f000 8134 	beq.w	8004d66 <UI_GetReg+0x56a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004afe:	2b09      	cmp	r3, #9
 8004b00:	d187      	bne.n	8004a12 <UI_GetReg+0x216>
        pSPD = pMCT->pSpeedSensorAux;
 8004b02:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8004b04:	2800      	cmp	r0, #0
 8004b06:	d084      	beq.n	8004a12 <UI_GetReg+0x216>
        bRetVal = SPD_GetS16Speed(pSPD);
 8004b08:	f002 fe2c 	bl	8007764 <SPD_GetS16Speed>
 8004b0c:	e782      	b.n	8004a14 <UI_GetReg+0x218>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004b0e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004b14:	0f1a      	lsrs	r2, r3, #28
 8004b16:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004b18:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004b1c:	f000 8132 	beq.w	8004d84 <UI_GetReg+0x588>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004b20:	2b09      	cmp	r3, #9
 8004b22:	f47f af76 	bne.w	8004a12 <UI_GetReg+0x216>
        pSPD = pMCT->pSpeedSensorAux;
 8004b26:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	f43f af72 	beq.w	8004a12 <UI_GetReg+0x216>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).alpha;
 8004b2e:	f003 fe0d 	bl	800874c <STO_PLL_GetEstimatedCurrent>
 8004b32:	b200      	sxth	r0, r0
 8004b34:	e76e      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 8004b36:	6828      	ldr	r0, [r5, #0]
 8004b38:	f002 fab8 	bl	80070ac <PID_GetKD>
    break;
 8004b3c:	e76a      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8004b3e:	4630      	mov	r0, r6
 8004b40:	f7fd fdac 	bl	800269c <MCI_GetIalphabeta>
 8004b44:	b200      	sxth	r0, r0
    break;
 8004b46:	e765      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = MCI_GetIab(pMCI).b;
 8004b48:	4630      	mov	r0, r6
 8004b4a:	f7fd fd99 	bl	8002680 <MCI_GetIab>
 8004b4e:	1400      	asrs	r0, r0, #16
    break;
 8004b50:	e760      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8004b52:	6828      	ldr	r0, [r5, #0]
 8004b54:	f002 faa4 	bl	80070a0 <PID_GetKPDivisor>
    break;
 8004b58:	e75c      	b.n	8004a14 <UI_GetReg+0x218>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8004b5a:	4630      	mov	r0, r6
 8004b5c:	f7fd fd54 	bl	8002608 <MCI_GetControlMode>
 8004b60:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8004b62:	4630      	mov	r0, r6
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8004b64:	f000 811d 	beq.w	8004da2 <UI_GetReg+0x5a6>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 8004b68:	f7fd fd86 	bl	8002678 <MCI_GetMecSpeedRefUnit>
 8004b6c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004b70:	0040      	lsls	r0, r0, #1
 8004b72:	e74f      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8004b74:	4630      	mov	r0, r6
 8004b76:	f7fd fdc9 	bl	800270c <MCI_GetValphabeta>
 8004b7a:	b200      	sxth	r0, r0
    break;
 8004b7c:	e74a      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8004b7e:	4630      	mov	r0, r6
 8004b80:	f7fd fd8c 	bl	800269c <MCI_GetIalphabeta>
 8004b84:	1400      	asrs	r0, r0, #16
    break;
 8004b86:	e745      	b.n	8004a14 <UI_GetReg+0x218>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004b88:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004b8e:	0f1a      	lsrs	r2, r3, #28
 8004b90:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004b92:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004b96:	f000 80f0 	beq.w	8004d7a <UI_GetReg+0x57e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004b9a:	2b09      	cmp	r3, #9
 8004b9c:	f47f af39 	bne.w	8004a12 <UI_GetReg+0x216>
        pSPD = pMCT->pSpeedSensorAux;
 8004ba0:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8004ba2:	2800      	cmp	r0, #0
 8004ba4:	f43f af35 	beq.w	8004a12 <UI_GetReg+0x216>
        bRetVal = STO_PLL_GetObservedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8004ba8:	f003 fe1a 	bl	80087e0 <STO_PLL_GetObservedBemfLevel>
 8004bac:	1400      	asrs	r0, r0, #16
 8004bae:	e731      	b.n	8004a14 <UI_GetReg+0x218>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004bb0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004bb6:	0f1a      	lsrs	r2, r3, #28
 8004bb8:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004bba:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004bbe:	f000 80f6 	beq.w	8004dae <UI_GetReg+0x5b2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004bc2:	2b09      	cmp	r3, #9
 8004bc4:	f47f af25 	bne.w	8004a12 <UI_GetReg+0x216>
        pSPD = pMCT->pSpeedSensorAux;
 8004bc8:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	f43f af21 	beq.w	8004a12 <UI_GetReg+0x216>
        bRetVal = STO_PLL_GetEstimatedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8004bd0:	f003 fe02 	bl	80087d8 <STO_PLL_GetEstimatedBemfLevel>
 8004bd4:	1400      	asrs	r0, r0, #16
 8004bd6:	e71d      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8004bd8:	4630      	mov	r0, r6
 8004bda:	f7fd fd45 	bl	8002668 <MCI_GetAvrgMecSpeedUnit>
 8004bde:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004be2:	0040      	lsls	r0, r0, #1
    break;
 8004be4:	e716      	b.n	8004a14 <UI_GetReg+0x218>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH1);
 8004be6:	2101      	movs	r1, #1
 8004be8:	f7ff fe02 	bl	80047f0 <UI_GetDAC>
    break;
 8004bec:	e712      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8004bee:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8004bf0:	f002 ff3a 	bl	8007a68 <STM_GetFaultState>
	break;
 8004bf4:	e70e      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8004bf6:	f7ff fbd5 	bl	80043a4 <UI_GetSelectedMC>
    break;
 8004bfa:	e70b      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8004bfc:	6828      	ldr	r0, [r5, #0]
 8004bfe:	f002 fa45 	bl	800708c <PID_GetKP>
    break;
 8004c02:	e707      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8004c04:	4630      	mov	r0, r6
 8004c06:	f7fd fd37 	bl	8002678 <MCI_GetMecSpeedRefUnit>
 8004c0a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004c0e:	0040      	lsls	r0, r0, #1
    break;
 8004c10:	e700      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = MCI_GetIab(pMCI).a;
 8004c12:	4630      	mov	r0, r6
 8004c14:	f7fd fd34 	bl	8002680 <MCI_GetIab>
 8004c18:	b200      	sxth	r0, r0
    break;
 8004c1a:	e6fb      	b.n	8004a14 <UI_GetReg+0x218>
      if (pMCT->pRevupCtrl)
 8004c1c:	6968      	ldr	r0, [r5, #20]
 8004c1e:	2800      	cmp	r0, #0
 8004c20:	f43f aef7 	beq.w	8004a12 <UI_GetReg+0x216>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8004c24:	f003 fb0e 	bl	8008244 <RUC_GetNumberOfPhases>
 8004c28:	e6f4      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = MCI_GetIqd(pMCI).d;
 8004c2a:	4630      	mov	r0, r6
 8004c2c:	f7fd fd44 	bl	80026b8 <MCI_GetIqd>
 8004c30:	1400      	asrs	r0, r0, #16
    break;
 8004c32:	e6ef      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = MCI_GetIqd(pMCI).q;
 8004c34:	4630      	mov	r0, r6
 8004c36:	f7fd fd3f 	bl	80026b8 <MCI_GetIqd>
 8004c3a:	b200      	sxth	r0, r0
    break;
 8004c3c:	e6ea      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 8004c3e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004c40:	f002 fe50 	bl	80078e4 <STC_GetMaxAppPositiveMecSpeedUnit>
 8004c44:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004c48:	0040      	lsls	r0, r0, #1
    break;
 8004c4a:	e6e3      	b.n	8004a14 <UI_GetReg+0x218>
      if (pHandle->pFctDACGetUserChannelValue)
 8004c4c:	6903      	ldr	r3, [r0, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f43f aedf 	beq.w	8004a12 <UI_GetReg+0x216>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 1);
 8004c54:	2101      	movs	r1, #1
 8004c56:	4798      	blx	r3
 8004c58:	e6dc      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8004c5a:	4630      	mov	r0, r6
 8004c5c:	f7fd fcd4 	bl	8002608 <MCI_GetControlMode>
    break;
 8004c60:	e6d8      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8004c62:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8004c64:	f002 fef2 	bl	8007a4c <STM_GetState>
	break;
 8004c68:	e6d4      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8004c6a:	6828      	ldr	r0, [r5, #0]
 8004c6c:	f002 fa1a 	bl	80070a4 <PID_GetKIDivisor>
    break;
 8004c70:	e6d0      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8004c72:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004c74:	f002 fe38 	bl	80078e8 <STC_GetMinAppNegativeMecSpeedUnit>
 8004c78:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004c7c:	0040      	lsls	r0, r0, #1
    break;
 8004c7e:	e6c9      	b.n	8004a14 <UI_GetReg+0x218>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004c80:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004c86:	0f1a      	lsrs	r2, r3, #28
 8004c88:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004c8a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004c8e:	f000 8093 	beq.w	8004db8 <UI_GetReg+0x5bc>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004c92:	2b09      	cmp	r3, #9
 8004c94:	f000 8093 	beq.w	8004dbe <UI_GetReg+0x5c2>
      bRetVal = (int32_t)hIgain;
 8004c98:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
    break;
 8004c9c:	e6ba      	b.n	8004a14 <UI_GetReg+0x218>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004c9e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004ca4:	0f1a      	lsrs	r2, r3, #28
 8004ca6:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004ca8:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004cac:	f000 8090 	beq.w	8004dd0 <UI_GetReg+0x5d4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004cb0:	2b09      	cmp	r3, #9
 8004cb2:	f000 8090 	beq.w	8004dd6 <UI_GetReg+0x5da>
      bRetVal = (int32_t)hPgain;
 8004cb6:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
    break;
 8004cba:	e6ab      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8004cbc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004cbe:	f002 f9c3 	bl	8007048 <NTC_GetAvTemp_C>
    break;
 8004cc2:	e6a7      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8004cc4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004cc6:	f001 fea5 	bl	8006a14 <VBS_GetAvBusVoltage_V>
    break;
 8004cca:	e6a3      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 8004ccc:	68a8      	ldr	r0, [r5, #8]
 8004cce:	f002 f9dd 	bl	800708c <PID_GetKP>
    break;
 8004cd2:	e69f      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8004cd4:	6868      	ldr	r0, [r5, #4]
 8004cd6:	f002 f9e9 	bl	80070ac <PID_GetKD>
    break;
 8004cda:	e69b      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8004cdc:	6868      	ldr	r0, [r5, #4]
 8004cde:	f002 f9d9 	bl	8007094 <PID_GetKI>
    break;
 8004ce2:	e697      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 8004ce4:	6868      	ldr	r0, [r5, #4]
 8004ce6:	f002 f9d1 	bl	800708c <PID_GetKP>
    break;
 8004cea:	e693      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8004cec:	68a8      	ldr	r0, [r5, #8]
 8004cee:	f002 f9dd 	bl	80070ac <PID_GetKD>
    break;
 8004cf2:	e68f      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 8004cf4:	68a8      	ldr	r0, [r5, #8]
 8004cf6:	f002 f9cd 	bl	8007094 <PID_GetKI>
    break;
 8004cfa:	e68b      	b.n	8004a14 <UI_GetReg+0x218>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH0);
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	f7ff fd77 	bl	80047f0 <UI_GetDAC>
    break;
 8004d02:	e687      	b.n	8004a14 <UI_GetReg+0x218>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 8004d04:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8004d06:	f002 f95b 	bl	8006fc0 <MPM_GetAvrgElMotorPowerW>
    break;
 8004d0a:	e683      	b.n	8004a14 <UI_GetReg+0x218>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004d0c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004d12:	0f1a      	lsrs	r2, r3, #28
 8004d14:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004d16:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004d1a:	d065      	beq.n	8004de8 <UI_GetReg+0x5ec>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004d1c:	2b09      	cmp	r3, #9
 8004d1e:	d1ca      	bne.n	8004cb6 <UI_GetReg+0x4ba>
        pSPD = pMCT->pSpeedSensorAux;
 8004d20:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8004d22:	2800      	cmp	r0, #0
 8004d24:	d0c7      	beq.n	8004cb6 <UI_GetReg+0x4ba>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8004d26:	aa0f      	add	r2, sp, #60	; 0x3c
 8004d28:	a90e      	add	r1, sp, #56	; 0x38
 8004d2a:	f003 fd2f 	bl	800878c <STO_GetPLLGains>
 8004d2e:	e7c2      	b.n	8004cb6 <UI_GetReg+0x4ba>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004d30:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004d36:	0f1a      	lsrs	r2, r3, #28
 8004d38:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004d3a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004d3e:	d00e      	beq.n	8004d5e <UI_GetReg+0x562>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004d40:	2b09      	cmp	r3, #9
 8004d42:	d1a9      	bne.n	8004c98 <UI_GetReg+0x49c>
        pSPD = pMCT->pSpeedSensorAux;
 8004d44:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8004d46:	2800      	cmp	r0, #0
 8004d48:	d0a6      	beq.n	8004c98 <UI_GetReg+0x49c>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8004d4a:	aa0f      	add	r2, sp, #60	; 0x3c
 8004d4c:	a90e      	add	r1, sp, #56	; 0x38
 8004d4e:	f003 fd1d 	bl	800878c <STO_GetPLLGains>
 8004d52:	e7a1      	b.n	8004c98 <UI_GetReg+0x49c>
      bRetVal = (int32_t)(MC_UID);
 8004d54:	4829      	ldr	r0, [pc, #164]	; (8004dfc <UI_GetReg+0x600>)
 8004d56:	e65d      	b.n	8004a14 <UI_GetReg+0x218>
        *success = false;
 8004d58:	2000      	movs	r0, #0
 8004d5a:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 8004d5c:	e65a      	b.n	8004a14 <UI_GetReg+0x218>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004d5e:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8004d60:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004d62:	d1f0      	bne.n	8004d46 <UI_GetReg+0x54a>
 8004d64:	e7ee      	b.n	8004d44 <UI_GetReg+0x548>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004d66:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8004d68:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004d6a:	f47f aecb 	bne.w	8004b04 <UI_GetReg+0x308>
 8004d6e:	e6c8      	b.n	8004b02 <UI_GetReg+0x306>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004d70:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8004d72:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004d74:	f47f ae7e 	bne.w	8004a74 <UI_GetReg+0x278>
 8004d78:	e67b      	b.n	8004a72 <UI_GetReg+0x276>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004d7a:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8004d7c:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004d7e:	f47f af10 	bne.w	8004ba2 <UI_GetReg+0x3a6>
 8004d82:	e70d      	b.n	8004ba0 <UI_GetReg+0x3a4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004d84:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8004d86:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004d88:	f47f aece 	bne.w	8004b28 <UI_GetReg+0x32c>
 8004d8c:	e6cb      	b.n	8004b26 <UI_GetReg+0x32a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004d8e:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8004d90:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004d92:	f47f ae93 	bne.w	8004abc <UI_GetReg+0x2c0>
 8004d96:	e690      	b.n	8004aba <UI_GetReg+0x2be>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004d98:	2b09      	cmp	r3, #9
       pSPD = pMCT->pSpeedSensorMain;
 8004d9a:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004d9c:	f47f ae58 	bne.w	8004a50 <UI_GetReg+0x254>
 8004da0:	e655      	b.n	8004a4e <UI_GetReg+0x252>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8004da2:	f7fd fc55 	bl	8002650 <MCI_GetLastRampFinalSpeed>
 8004da6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004daa:	0040      	lsls	r0, r0, #1
 8004dac:	e632      	b.n	8004a14 <UI_GetReg+0x218>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004dae:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8004db0:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004db2:	f47f af0a 	bne.w	8004bca <UI_GetReg+0x3ce>
 8004db6:	e707      	b.n	8004bc8 <UI_GetReg+0x3cc>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004db8:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8004dba:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004dbc:	d100      	bne.n	8004dc0 <UI_GetReg+0x5c4>
        pSPD = pMCT->pSpeedSensorAux;
 8004dbe:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	f43f af69 	beq.w	8004c98 <UI_GetReg+0x49c>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8004dc6:	aa0f      	add	r2, sp, #60	; 0x3c
 8004dc8:	a90e      	add	r1, sp, #56	; 0x38
 8004dca:	f003 fcd3 	bl	8008774 <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hC2;
 8004dce:	e763      	b.n	8004c98 <UI_GetReg+0x49c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004dd0:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8004dd2:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004dd4:	d100      	bne.n	8004dd8 <UI_GetReg+0x5dc>
        pSPD = pMCT->pSpeedSensorAux;
 8004dd6:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	f43f af6c 	beq.w	8004cb6 <UI_GetReg+0x4ba>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8004dde:	aa0f      	add	r2, sp, #60	; 0x3c
 8004de0:	a90e      	add	r1, sp, #56	; 0x38
 8004de2:	f003 fcc7 	bl	8008774 <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hC1;
 8004de6:	e766      	b.n	8004cb6 <UI_GetReg+0x4ba>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004de8:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8004dea:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004dec:	d199      	bne.n	8004d22 <UI_GetReg+0x526>
 8004dee:	e797      	b.n	8004d20 <UI_GetReg+0x524>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004df0:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8004df2:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004df4:	f47f ae50 	bne.w	8004a98 <UI_GetReg+0x29c>
 8004df8:	e64d      	b.n	8004a96 <UI_GetReg+0x29a>
 8004dfa:	bf00      	nop
 8004dfc:	34a6847a 	.word	0x34a6847a

08004e00 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e00:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <SystemInit+0x18>)
 8004e02:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004e06:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e0a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004e0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004e12:	6099      	str	r1, [r3, #8]
#endif
}
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	e000ed00 	.word	0xe000ed00

08004e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e1c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e1e:	4a0e      	ldr	r2, [pc, #56]	; (8004e58 <HAL_InitTick+0x3c>)
 8004e20:	4b0e      	ldr	r3, [pc, #56]	; (8004e5c <HAL_InitTick+0x40>)
 8004e22:	7812      	ldrb	r2, [r2, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
{
 8004e26:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e2c:	fbb0 f0f2 	udiv	r0, r0, r2
 8004e30:	fbb3 f0f0 	udiv	r0, r3, r0
 8004e34:	f000 fb02 	bl	800543c <HAL_SYSTICK_Config>
 8004e38:	b908      	cbnz	r0, 8004e3e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e3a:	2d0f      	cmp	r5, #15
 8004e3c:	d901      	bls.n	8004e42 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8004e3e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004e40:	bd38      	pop	{r3, r4, r5, pc}
 8004e42:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e44:	4602      	mov	r2, r0
 8004e46:	4629      	mov	r1, r5
 8004e48:	f04f 30ff 	mov.w	r0, #4294967295
 8004e4c:	f000 fab0 	bl	80053b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e50:	4b03      	ldr	r3, [pc, #12]	; (8004e60 <HAL_InitTick+0x44>)
 8004e52:	4620      	mov	r0, r4
 8004e54:	601d      	str	r5, [r3, #0]
}
 8004e56:	bd38      	pop	{r3, r4, r5, pc}
 8004e58:	200006fc 	.word	0x200006fc
 8004e5c:	200006f8 	.word	0x200006f8
 8004e60:	20000700 	.word	0x20000700

08004e64 <HAL_Init>:
{
 8004e64:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e66:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <HAL_Init+0x30>)
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e6e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e76:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e7e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e80:	2003      	movs	r0, #3
 8004e82:	f000 fa81 	bl	8005388 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e86:	2004      	movs	r0, #4
 8004e88:	f7ff ffc8 	bl	8004e1c <HAL_InitTick>
  HAL_MspInit();
 8004e8c:	f7fe ff02 	bl	8003c94 <HAL_MspInit>
}
 8004e90:	2000      	movs	r0, #0
 8004e92:	bd08      	pop	{r3, pc}
 8004e94:	40023c00 	.word	0x40023c00

08004e98 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004e98:	4a03      	ldr	r2, [pc, #12]	; (8004ea8 <HAL_IncTick+0x10>)
 8004e9a:	4b04      	ldr	r3, [pc, #16]	; (8004eac <HAL_IncTick+0x14>)
 8004e9c:	6811      	ldr	r1, [r2, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	440b      	add	r3, r1
 8004ea2:	6013      	str	r3, [r2, #0]
}
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	20000d4c 	.word	0x20000d4c
 8004eac:	200006fc 	.word	0x200006fc

08004eb0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004eb0:	4b01      	ldr	r3, [pc, #4]	; (8004eb8 <HAL_GetTick+0x8>)
 8004eb2:	6818      	ldr	r0, [r3, #0]
}
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	20000d4c 	.word	0x20000d4c

08004ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ebc:	b538      	push	{r3, r4, r5, lr}
 8004ebe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004ec0:	f7ff fff6 	bl	8004eb0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ec4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8004ec6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8004ec8:	d002      	beq.n	8004ed0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8004eca:	4b04      	ldr	r3, [pc, #16]	; (8004edc <HAL_Delay+0x20>)
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004ed0:	f7ff ffee 	bl	8004eb0 <HAL_GetTick>
 8004ed4:	1b43      	subs	r3, r0, r5
 8004ed6:	42a3      	cmp	r3, r4
 8004ed8:	d3fa      	bcc.n	8004ed0 <HAL_Delay+0x14>
  {
  }
}
 8004eda:	bd38      	pop	{r3, r4, r5, pc}
 8004edc:	200006fc 	.word	0x200006fc

08004ee0 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004ee0:	2800      	cmp	r0, #0
 8004ee2:	f000 80a0 	beq.w	8005026 <HAL_ADC_Init+0x146>
{
 8004ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004ee8:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004eea:	4604      	mov	r4, r0
 8004eec:	b13d      	cbz	r5, 8004efe <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004eee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ef0:	06db      	lsls	r3, r3, #27
 8004ef2:	d50c      	bpl.n	8004f0e <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8004efa:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8004efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8004efe:	f7fe fee7 	bl	8003cd0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004f02:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004f04:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8004f06:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004f0a:	06db      	lsls	r3, r3, #27
 8004f0c:	d4f2      	bmi.n	8004ef4 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8004f0e:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004f10:	4948      	ldr	r1, [pc, #288]	; (8005034 <HAL_ADC_Init+0x154>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004f12:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f14:	4d48      	ldr	r5, [pc, #288]	; (8005038 <HAL_ADC_Init+0x158>)
    ADC_STATE_CLR_SET(hadc->State,
 8004f16:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8004f1a:	f022 0202 	bic.w	r2, r2, #2
 8004f1e:	f042 0202 	orr.w	r2, r2, #2
 8004f22:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004f24:	684a      	ldr	r2, [r1, #4]
 8004f26:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004f2a:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004f2c:	684a      	ldr	r2, [r1, #4]
 8004f2e:	6860      	ldr	r0, [r4, #4]
 8004f30:	4302      	orrs	r2, r0
 8004f32:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004f34:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004f36:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004f38:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004f3a:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004f3c:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8004f40:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004f48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004f4a:	6858      	ldr	r0, [r3, #4]
 8004f4c:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 8004f50:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004f52:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f54:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004f56:	4339      	orrs	r1, r7
 8004f58:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004f5a:	6899      	ldr	r1, [r3, #8]
 8004f5c:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8004f60:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004f62:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f64:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004f66:	ea42 0206 	orr.w	r2, r2, r6
 8004f6a:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f6c:	d052      	beq.n	8005014 <HAL_ADC_Init+0x134>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f6e:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004f70:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f72:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8004f76:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004f78:	689a      	ldr	r2, [r3, #8]
 8004f7a:	4310      	orrs	r0, r2
 8004f7c:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f7e:	6899      	ldr	r1, [r3, #8]
 8004f80:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8004f84:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	432a      	orrs	r2, r5
 8004f8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004f8c:	689a      	ldr	r2, [r3, #8]
 8004f8e:	f022 0202 	bic.w	r2, r2, #2
 8004f92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	7e21      	ldrb	r1, [r4, #24]
 8004f98:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8004f9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004f9e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8004fa2:	2a00      	cmp	r2, #0
 8004fa4:	d041      	beq.n	800502a <HAL_ADC_Init+0x14a>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004fa6:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004fa8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004faa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004fb6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	3901      	subs	r1, #1
 8004fbc:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8004fc0:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004fc4:	69e0      	ldr	r0, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004fc6:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004fc8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004fcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004fce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004fd0:	3801      	subs	r0, #1
 8004fd2:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
 8004fd6:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004fd8:	6899      	ldr	r1, [r3, #8]
 8004fda:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8004fde:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004fe0:	6899      	ldr	r1, [r3, #8]
 8004fe2:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8004fe6:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8004fea:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004fec:	6899      	ldr	r1, [r3, #8]
 8004fee:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004ff2:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ff4:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004ff6:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ff8:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8004ffc:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004ffe:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8005000:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005002:	f023 0303 	bic.w	r3, r3, #3
 8005006:	f043 0301 	orr.w	r3, r3, #1
 800500a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800500c:	2300      	movs	r3, #0
 800500e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005014:	689a      	ldr	r2, [r3, #8]
 8005016:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800501a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005022:	609a      	str	r2, [r3, #8]
 8005024:	e7b2      	b.n	8004f8c <HAL_ADC_Init+0xac>
    return HAL_ERROR;
 8005026:	2001      	movs	r0, #1
}
 8005028:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005030:	605a      	str	r2, [r3, #4]
 8005032:	e7c6      	b.n	8004fc2 <HAL_ADC_Init+0xe2>
 8005034:	40012300 	.word	0x40012300
 8005038:	0f000001 	.word	0x0f000001

0800503c <HAL_ADC_ConfigChannel>:
{
 800503c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 800503e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8005042:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8005044:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8005046:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8005048:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800504a:	f000 8097 	beq.w	800517c <HAL_ADC_ConfigChannel+0x140>
 800504e:	2301      	movs	r3, #1
 8005050:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005054:	680d      	ldr	r5, [r1, #0]
 8005056:	2d09      	cmp	r5, #9
 8005058:	d829      	bhi.n	80050ae <HAL_ADC_ConfigChannel+0x72>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800505a:	6804      	ldr	r4, [r0, #0]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800505c:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800505e:	6922      	ldr	r2, [r4, #16]
 8005060:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8005064:	2607      	movs	r6, #7
 8005066:	40be      	lsls	r6, r7
 8005068:	ea22 0206 	bic.w	r2, r2, r6
 800506c:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800506e:	6922      	ldr	r2, [r4, #16]
 8005070:	40bb      	lsls	r3, r7
 8005072:	4313      	orrs	r3, r2
 8005074:	6123      	str	r3, [r4, #16]
  if (sConfig->Rank < 7U)
 8005076:	684b      	ldr	r3, [r1, #4]
 8005078:	2b06      	cmp	r3, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800507a:	462e      	mov	r6, r5
  if (sConfig->Rank < 7U)
 800507c:	d82c      	bhi.n	80050d8 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800507e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005082:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005084:	3b05      	subs	r3, #5
 8005086:	211f      	movs	r1, #31
 8005088:	4099      	lsls	r1, r3
 800508a:	ea22 0201 	bic.w	r2, r2, r1
 800508e:	6362      	str	r2, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005090:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005092:	fa06 f303 	lsl.w	r3, r6, r3
 8005096:	4313      	orrs	r3, r2
 8005098:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800509a:	4b40      	ldr	r3, [pc, #256]	; (800519c <HAL_ADC_ConfigChannel+0x160>)
 800509c:	429c      	cmp	r4, r3
 800509e:	d02f      	beq.n	8005100 <HAL_ADC_ConfigChannel+0xc4>
  __HAL_UNLOCK(hadc);
 80050a0:	2300      	movs	r3, #0
 80050a2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80050a6:	4618      	mov	r0, r3
}
 80050a8:	b002      	add	sp, #8
 80050aa:	bcf0      	pop	{r4, r5, r6, r7}
 80050ac:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80050ae:	6804      	ldr	r4, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80050b0:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80050b2:	68e7      	ldr	r7, [r4, #12]
 80050b4:	b2ae      	uxth	r6, r5
 80050b6:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80050ba:	3a1e      	subs	r2, #30
 80050bc:	f04f 0c07 	mov.w	ip, #7
 80050c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80050c4:	ea27 070c 	bic.w	r7, r7, ip
 80050c8:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80050ca:	68e7      	ldr	r7, [r4, #12]
 80050cc:	4093      	lsls	r3, r2
 80050ce:	433b      	orrs	r3, r7
 80050d0:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 80050d2:	684b      	ldr	r3, [r1, #4]
 80050d4:	2b06      	cmp	r3, #6
 80050d6:	d9d2      	bls.n	800507e <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 80050d8:	2b0c      	cmp	r3, #12
 80050da:	d833      	bhi.n	8005144 <HAL_ADC_ConfigChannel+0x108>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80050dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80050e0:	f1a3 0123 	sub.w	r1, r3, #35	; 0x23
 80050e4:	221f      	movs	r2, #31
 80050e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80050e8:	408a      	lsls	r2, r1
 80050ea:	ea23 0302 	bic.w	r3, r3, r2
 80050ee:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80050f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80050f2:	fa06 f101 	lsl.w	r1, r6, r1
 80050f6:	4319      	orrs	r1, r3
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80050f8:	4b28      	ldr	r3, [pc, #160]	; (800519c <HAL_ADC_ConfigChannel+0x160>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80050fa:	6321      	str	r1, [r4, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80050fc:	429c      	cmp	r4, r3
 80050fe:	d1cf      	bne.n	80050a0 <HAL_ADC_ConfigChannel+0x64>
 8005100:	2d12      	cmp	r5, #18
 8005102:	d02e      	beq.n	8005162 <HAL_ADC_ConfigChannel+0x126>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005104:	4b26      	ldr	r3, [pc, #152]	; (80051a0 <HAL_ADC_ConfigChannel+0x164>)
 8005106:	429d      	cmp	r5, r3
 8005108:	d13c      	bne.n	8005184 <HAL_ADC_ConfigChannel+0x148>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800510a:	4a26      	ldr	r2, [pc, #152]	; (80051a4 <HAL_ADC_ConfigChannel+0x168>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800510c:	4b26      	ldr	r3, [pc, #152]	; (80051a8 <HAL_ADC_ConfigChannel+0x16c>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800510e:	6851      	ldr	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005110:	4c26      	ldr	r4, [pc, #152]	; (80051ac <HAL_ADC_ConfigChannel+0x170>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005112:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 8005116:	6051      	str	r1, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005118:	6851      	ldr	r1, [r2, #4]
 800511a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800511e:	6051      	str	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	fba4 2303 	umull	r2, r3, r4, r3
 8005126:	0c9b      	lsrs	r3, r3, #18
 8005128:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8005130:	9b01      	ldr	r3, [sp, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0b4      	beq.n	80050a0 <HAL_ADC_ConfigChannel+0x64>
        counter--;
 8005136:	9b01      	ldr	r3, [sp, #4]
 8005138:	3b01      	subs	r3, #1
 800513a:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800513c:	9b01      	ldr	r3, [sp, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f9      	bne.n	8005136 <HAL_ADC_ConfigChannel+0xfa>
 8005142:	e7ad      	b.n	80050a0 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005144:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005148:	3a41      	subs	r2, #65	; 0x41
 800514a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800514c:	211f      	movs	r1, #31
 800514e:	4091      	lsls	r1, r2
 8005150:	ea23 0301 	bic.w	r3, r3, r1
 8005154:	62e3      	str	r3, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005156:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005158:	fa06 f102 	lsl.w	r1, r6, r2
 800515c:	4319      	orrs	r1, r3
 800515e:	62e1      	str	r1, [r4, #44]	; 0x2c
 8005160:	e79b      	b.n	800509a <HAL_ADC_ConfigChannel+0x5e>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005162:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 8005166:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800516a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800516e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 8005172:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005176:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800517a:	e791      	b.n	80050a0 <HAL_ADC_ConfigChannel+0x64>
  __HAL_LOCK(hadc);
 800517c:	2002      	movs	r0, #2
}
 800517e:	b002      	add	sp, #8
 8005180:	bcf0      	pop	{r4, r5, r6, r7}
 8005182:	4770      	bx	lr
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005184:	2d11      	cmp	r5, #17
 8005186:	d18b      	bne.n	80050a0 <HAL_ADC_ConfigChannel+0x64>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005188:	4b06      	ldr	r3, [pc, #24]	; (80051a4 <HAL_ADC_ConfigChannel+0x168>)
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8005190:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005198:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800519a:	e781      	b.n	80050a0 <HAL_ADC_ConfigChannel+0x64>
 800519c:	40012000 	.word	0x40012000
 80051a0:	10000012 	.word	0x10000012
 80051a4:	40012300 	.word	0x40012300
 80051a8:	200006f8 	.word	0x200006f8
 80051ac:	431bde83 	.word	0x431bde83

080051b0 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80051b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80051b2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80051b6:	698f      	ldr	r7, [r1, #24]
  __HAL_LOCK(hadc);
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	f000 80db 	beq.w	8005374 <HAL_ADCEx_InjectedConfigChannel+0x1c4>
 80051be:	2301      	movs	r3, #1
 80051c0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80051c4:	680e      	ldr	r6, [r1, #0]
 80051c6:	2e09      	cmp	r6, #9
 80051c8:	d870      	bhi.n	80052ac <HAL_ADCEx_InjectedConfigChannel+0xfc>
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80051ca:	6803      	ldr	r3, [r0, #0]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80051cc:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80051ce:	691c      	ldr	r4, [r3, #16]
 80051d0:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 80051d4:	2507      	movs	r5, #7
 80051d6:	fa05 f50c 	lsl.w	r5, r5, ip
 80051da:	ea24 0405 	bic.w	r4, r4, r5
 80051de:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80051e0:	691c      	ldr	r4, [r3, #16]
 80051e2:	fa02 f20c 	lsl.w	r2, r2, ip
 80051e6:	4322      	orrs	r2, r4
 80051e8:	611a      	str	r2, [r3, #16]
 80051ea:	4634      	mov	r4, r6
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80051ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80051ee:	f8d1 e010 	ldr.w	lr, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80051f2:	684d      	ldr	r5, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80051f4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80051f8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80051fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051fc:	f10e 3cff 	add.w	ip, lr, #4294967295
 8005200:	ea42 5c0c 	orr.w	ip, r2, ip, lsl #20
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8005204:	1cea      	adds	r2, r5, #3
 8005206:	eba2 020e 	sub.w	r2, r2, lr
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800520a:	f8c3 c038 	str.w	ip, [r3, #56]	; 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	f8d3 c038 	ldr.w	ip, [r3, #56]	; 0x38
 8005214:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005218:	f04f 0e1f 	mov.w	lr, #31
 800521c:	fa0e fe02 	lsl.w	lr, lr, r2
 8005220:	ea2c 0c0e 	bic.w	ip, ip, lr
 8005224:	f8c3 c038 	str.w	ip, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8005228:	f8d3 e038 	ldr.w	lr, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800522c:	f8df c154 	ldr.w	ip, [pc, #340]	; 8005384 <HAL_ADCEx_InjectedConfigChannel+0x1d4>
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8005230:	fa04 f202 	lsl.w	r2, r4, r2
 8005234:	ea42 020e 	orr.w	r2, r2, lr
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005238:	4567      	cmp	r7, ip
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800523a:	639a      	str	r2, [r3, #56]	; 0x38
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800523c:	d074      	beq.n	8005328 <HAL_ADCEx_InjectedConfigChannel+0x178>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800523e:	689c      	ldr	r4, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8005240:	f8d1 c01c 	ldr.w	ip, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8005244:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
 8005248:	609c      	str	r4, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	4317      	orrs	r7, r2
 800524e:	609f      	str	r7, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8005250:	689c      	ldr	r4, [r3, #8]
 8005252:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8005256:	609c      	str	r4, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8005258:	689a      	ldr	r2, [r3, #8]
 800525a:	ea42 020c 	orr.w	r2, r2, ip
 800525e:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8005260:	7d4a      	ldrb	r2, [r1, #21]
 8005262:	2a00      	cmp	r2, #0
 8005264:	d039      	beq.n	80052da <HAL_ADCEx_InjectedConfigChannel+0x12a>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800526c:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 800526e:	7d0a      	ldrb	r2, [r1, #20]
 8005270:	2a00      	cmp	r2, #0
 8005272:	d039      	beq.n	80052e8 <HAL_ADCEx_InjectedConfigChannel+0x138>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8005274:	685a      	ldr	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 8005276:	2d02      	cmp	r5, #2
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8005278:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800527c:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 800527e:	d039      	beq.n	80052f4 <HAL_ADCEx_InjectedConfigChannel+0x144>
 8005280:	2d03      	cmp	r5, #3
 8005282:	d065      	beq.n	8005350 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
 8005284:	2d01      	cmp	r5, #1
 8005286:	d058      	beq.n	800533a <HAL_ADCEx_InjectedConfigChannel+0x18a>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8005288:	6a1a      	ldr	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800528a:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800528c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8005290:	f022 020f 	bic.w	r2, r2, #15
 8005294:	621a      	str	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8005296:	6a1a      	ldr	r2, [r3, #32]
 8005298:	430a      	orrs	r2, r1
 800529a:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800529c:	4a36      	ldr	r2, [pc, #216]	; (8005378 <HAL_ADCEx_InjectedConfigChannel+0x1c8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d035      	beq.n	800530e <HAL_ADCEx_InjectedConfigChannel+0x15e>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052a2:	2300      	movs	r3, #0
 80052a4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80052a8:	4618      	mov	r0, r3
}
 80052aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80052ac:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80052ae:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80052b0:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80052b4:	b2b4      	uxth	r4, r6
 80052b6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80052ba:	3d1e      	subs	r5, #30
 80052bc:	f04f 0e07 	mov.w	lr, #7
 80052c0:	fa0e fe05 	lsl.w	lr, lr, r5
 80052c4:	ea2c 0c0e 	bic.w	ip, ip, lr
 80052c8:	f8c3 c00c 	str.w	ip, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80052cc:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80052d0:	40aa      	lsls	r2, r5
 80052d2:	ea42 020c 	orr.w	r2, r2, ip
 80052d6:	60da      	str	r2, [r3, #12]
 80052d8:	e788      	b.n	80051ec <HAL_ADCEx_InjectedConfigChannel+0x3c>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052e0:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80052e2:	7d0a      	ldrb	r2, [r1, #20]
 80052e4:	2a00      	cmp	r2, #0
 80052e6:	d1c5      	bne.n	8005274 <HAL_ADCEx_InjectedConfigChannel+0xc4>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80052e8:	685a      	ldr	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 80052ea:	2d02      	cmp	r5, #2
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80052ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052f0:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 80052f2:	d1c5      	bne.n	8005280 <HAL_ADCEx_InjectedConfigChannel+0xd0>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80052f4:	699a      	ldr	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80052f6:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80052f8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80052fc:	f022 020f 	bic.w	r2, r2, #15
 8005300:	619a      	str	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8005302:	699a      	ldr	r2, [r3, #24]
 8005304:	430a      	orrs	r2, r1
 8005306:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8005308:	4a1b      	ldr	r2, [pc, #108]	; (8005378 <HAL_ADCEx_InjectedConfigChannel+0x1c8>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d1c9      	bne.n	80052a2 <HAL_ADCEx_InjectedConfigChannel+0xf2>
 800530e:	2e12      	cmp	r6, #18
 8005310:	d029      	beq.n	8005366 <HAL_ADCEx_InjectedConfigChannel+0x1b6>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8005312:	4b1a      	ldr	r3, [pc, #104]	; (800537c <HAL_ADCEx_InjectedConfigChannel+0x1cc>)
 8005314:	429e      	cmp	r6, r3
 8005316:	d001      	beq.n	800531c <HAL_ADCEx_InjectedConfigChannel+0x16c>
 8005318:	2e11      	cmp	r6, #17
 800531a:	d1c2      	bne.n	80052a2 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800531c:	4a18      	ldr	r2, [pc, #96]	; (8005380 <HAL_ADCEx_InjectedConfigChannel+0x1d0>)
 800531e:	6853      	ldr	r3, [r2, #4]
 8005320:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005324:	6053      	str	r3, [r2, #4]
 8005326:	e7bc      	b.n	80052a2 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8005328:	689a      	ldr	r2, [r3, #8]
 800532a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800532e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005336:	609a      	str	r2, [r3, #8]
 8005338:	e792      	b.n	8005260 <HAL_ADCEx_InjectedConfigChannel+0xb0>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800533a:	695a      	ldr	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800533c:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800533e:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8005342:	f022 020f 	bic.w	r2, r2, #15
 8005346:	615a      	str	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8005348:	695a      	ldr	r2, [r3, #20]
 800534a:	430a      	orrs	r2, r1
 800534c:	615a      	str	r2, [r3, #20]
      break;
 800534e:	e7a5      	b.n	800529c <HAL_ADCEx_InjectedConfigChannel+0xec>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8005350:	69da      	ldr	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8005352:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8005354:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8005358:	f022 020f 	bic.w	r2, r2, #15
 800535c:	61da      	str	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800535e:	69da      	ldr	r2, [r3, #28]
 8005360:	430a      	orrs	r2, r1
 8005362:	61da      	str	r2, [r3, #28]
      break;
 8005364:	e79a      	b.n	800529c <HAL_ADCEx_InjectedConfigChannel+0xec>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005366:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 800536a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800536e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8005372:	e796      	b.n	80052a2 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  __HAL_LOCK(hadc);
 8005374:	2002      	movs	r0, #2
}
 8005376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005378:	40012000 	.word	0x40012000
 800537c:	10000012 	.word	0x10000012
 8005380:	40012300 	.word	0x40012300
 8005384:	000f0001 	.word	0x000f0001

08005388 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005388:	4908      	ldr	r1, [pc, #32]	; (80053ac <HAL_NVIC_SetPriorityGrouping+0x24>)
 800538a:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800538c:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800538e:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005390:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8005394:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005396:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800539a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800539c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80053a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 80053a8:	60cb      	str	r3, [r1, #12]
 80053aa:	4770      	bx	lr
 80053ac:	e000ed00 	.word	0xe000ed00

080053b0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053b0:	4b19      	ldr	r3, [pc, #100]	; (8005418 <HAL_NVIC_SetPriority+0x68>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053b8:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053ba:	f1c3 0507 	rsb	r5, r3, #7
 80053be:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053c0:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053c4:	bf28      	it	cs
 80053c6:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053c8:	2c06      	cmp	r4, #6
 80053ca:	d919      	bls.n	8005400 <HAL_NVIC_SetPriority+0x50>
 80053cc:	3b03      	subs	r3, #3
 80053ce:	f04f 34ff 	mov.w	r4, #4294967295
 80053d2:	409c      	lsls	r4, r3
 80053d4:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053d8:	f04f 34ff 	mov.w	r4, #4294967295
 80053dc:	40ac      	lsls	r4, r5
 80053de:	ea21 0104 	bic.w	r1, r1, r4
 80053e2:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80053e4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053e6:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80053ea:	db0c      	blt.n	8005406 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053ec:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80053f0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80053f4:	0109      	lsls	r1, r1, #4
 80053f6:	b2c9      	uxtb	r1, r1
 80053f8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80053fc:	bc30      	pop	{r4, r5}
 80053fe:	4770      	bx	lr
 8005400:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005402:	4613      	mov	r3, r2
 8005404:	e7e8      	b.n	80053d8 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005406:	4b05      	ldr	r3, [pc, #20]	; (800541c <HAL_NVIC_SetPriority+0x6c>)
 8005408:	f000 000f 	and.w	r0, r0, #15
 800540c:	0109      	lsls	r1, r1, #4
 800540e:	4403      	add	r3, r0
 8005410:	b2c9      	uxtb	r1, r1
 8005412:	7619      	strb	r1, [r3, #24]
 8005414:	bc30      	pop	{r4, r5}
 8005416:	4770      	bx	lr
 8005418:	e000ed00 	.word	0xe000ed00
 800541c:	e000ecfc 	.word	0xe000ecfc

08005420 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005420:	2800      	cmp	r0, #0
 8005422:	db07      	blt.n	8005434 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005424:	f000 011f 	and.w	r1, r0, #31
 8005428:	4a03      	ldr	r2, [pc, #12]	; (8005438 <HAL_NVIC_EnableIRQ+0x18>)
 800542a:	0940      	lsrs	r0, r0, #5
 800542c:	2301      	movs	r3, #1
 800542e:	408b      	lsls	r3, r1
 8005430:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	e000e100 	.word	0xe000e100

0800543c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800543c:	3801      	subs	r0, #1
 800543e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005442:	d20e      	bcs.n	8005462 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005444:	4b08      	ldr	r3, [pc, #32]	; (8005468 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005446:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005448:	4c08      	ldr	r4, [pc, #32]	; (800546c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800544a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800544c:	20f0      	movs	r0, #240	; 0xf0
 800544e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005452:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005454:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005456:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005458:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 800545a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800545e:	6019      	str	r1, [r3, #0]
 8005460:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005462:	2001      	movs	r0, #1
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	e000e010 	.word	0xe000e010
 800546c:	e000ed00 	.word	0xe000ed00

08005470 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop

08005474 <HAL_SYSTICK_IRQHandler>:
{
 8005474:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8005476:	f7ff fffb 	bl	8005470 <HAL_SYSTICK_Callback>
}
 800547a:	bd08      	pop	{r3, pc}

0800547c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 800547c:	b188      	cbz	r0, 80054a2 <HAL_DAC_Init+0x26>
{
 800547e:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005480:	7903      	ldrb	r3, [r0, #4]
 8005482:	4604      	mov	r4, r0
 8005484:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005488:	b13b      	cbz	r3, 800549a <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800548a:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 800548c:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800548e:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8005490:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005492:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8005494:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8005496:	4618      	mov	r0, r3
}
 8005498:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800549a:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 800549c:	f7fe fc9c 	bl	8003dd8 <HAL_DAC_MspInit>
 80054a0:	e7f3      	b.n	800548a <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 80054a2:	2001      	movs	r0, #1
}
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop

080054a8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80054a8:	4603      	mov	r3, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80054aa:	7940      	ldrb	r0, [r0, #5]
 80054ac:	2801      	cmp	r0, #1
 80054ae:	d020      	beq.n	80054f2 <HAL_DAC_ConfigChannel+0x4a>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80054b0:	2002      	movs	r0, #2
{
 80054b2:	b470      	push	{r4, r5, r6}
  hdac->State = HAL_DAC_STATE_BUSY;
 80054b4:	7118      	strb	r0, [r3, #4]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80054b6:	e9d1 0100 	ldrd	r0, r1, [r1]
  tmpreg1 = hdac->Instance->CR;
 80054ba:	681c      	ldr	r4, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80054bc:	f002 0210 	and.w	r2, r2, #16
  tmpreg1 = hdac->Instance->CR;
 80054c0:	6825      	ldr	r5, [r4, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80054c2:	f640 76fe 	movw	r6, #4094	; 0xffe
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80054c6:	4301      	orrs	r1, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80054c8:	fa06 f002 	lsl.w	r0, r6, r2
 80054cc:	ea25 0000 	bic.w	r0, r5, r0
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80054d0:	4091      	lsls	r1, r2
 80054d2:	4301      	orrs	r1, r0
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80054d4:	6021      	str	r1, [r4, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80054d6:	6821      	ldr	r1, [r4, #0]
 80054d8:	20c0      	movs	r0, #192	; 0xc0
 80054da:	fa00 f202 	lsl.w	r2, r0, r2
 80054de:	ea21 0202 	bic.w	r2, r1, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80054e2:	2501      	movs	r5, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80054e4:	2100      	movs	r1, #0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80054e6:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80054e8:	711d      	strb	r5, [r3, #4]
  __HAL_UNLOCK(hdac);
 80054ea:	7159      	strb	r1, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80054ec:	4608      	mov	r0, r1
}
 80054ee:	bc70      	pop	{r4, r5, r6}
 80054f0:	4770      	bx	lr
  __HAL_LOCK(hdac);
 80054f2:	2002      	movs	r0, #2
}
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop

080054f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fc:	468b      	mov	fp, r1
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054fe:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 80056fc <HAL_GPIO_Init+0x204>
 8005502:	6809      	ldr	r1, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005504:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 8005700 <HAL_GPIO_Init+0x208>
{
 8005508:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 800550a:	2300      	movs	r3, #0
 800550c:	46d9      	mov	r9, fp
 800550e:	e003      	b.n	8005518 <HAL_GPIO_Init+0x20>
 8005510:	3301      	adds	r3, #1
 8005512:	2b10      	cmp	r3, #16
 8005514:	f000 8084 	beq.w	8005620 <HAL_GPIO_Init+0x128>
    ioposition = 0x01U << position;
 8005518:	2201      	movs	r2, #1
 800551a:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800551c:	ea02 0b01 	and.w	fp, r2, r1
    if(iocurrent == ioposition)
 8005520:	438a      	bics	r2, r1
 8005522:	d1f5      	bne.n	8005510 <HAL_GPIO_Init+0x18>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005524:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8005528:	f005 0203 	and.w	r2, r5, #3
 800552c:	1e54      	subs	r4, r2, #1
 800552e:	2c01      	cmp	r4, #1
 8005530:	ea4f 0743 	mov.w	r7, r3, lsl #1
 8005534:	d977      	bls.n	8005626 <HAL_GPIO_Init+0x12e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005536:	2a03      	cmp	r2, #3
 8005538:	f040 80b5 	bne.w	80056a6 <HAL_GPIO_Init+0x1ae>
 800553c:	40ba      	lsls	r2, r7
 800553e:	43d4      	mvns	r4, r2
 8005540:	9400      	str	r4, [sp, #0]
      temp = GPIOx->MODER;
 8005542:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005544:	9c00      	ldr	r4, [sp, #0]
 8005546:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005548:	4322      	orrs	r2, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800554a:	00ee      	lsls	r6, r5, #3
      GPIOx->MODER = temp;
 800554c:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800554e:	d5df      	bpl.n	8005510 <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005550:	2200      	movs	r2, #0
 8005552:	9203      	str	r2, [sp, #12]
 8005554:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 8005558:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800555c:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
 8005560:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 8005564:	f023 0403 	bic.w	r4, r3, #3
 8005568:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800556c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005570:	f504 349c 	add.w	r4, r4, #79872	; 0x13800
 8005574:	9203      	str	r2, [sp, #12]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005576:	f003 0603 	and.w	r6, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800557a:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800557c:	68a7      	ldr	r7, [r4, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800557e:	00b6      	lsls	r6, r6, #2
 8005580:	220f      	movs	r2, #15
 8005582:	40b2      	lsls	r2, r6
 8005584:	ea27 0202 	bic.w	r2, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005588:	4f56      	ldr	r7, [pc, #344]	; (80056e4 <HAL_GPIO_Init+0x1ec>)
 800558a:	42b8      	cmp	r0, r7
 800558c:	d01c      	beq.n	80055c8 <HAL_GPIO_Init+0xd0>
 800558e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8005592:	42b8      	cmp	r0, r7
 8005594:	f000 808c 	beq.w	80056b0 <HAL_GPIO_Init+0x1b8>
 8005598:	4f53      	ldr	r7, [pc, #332]	; (80056e8 <HAL_GPIO_Init+0x1f0>)
 800559a:	42b8      	cmp	r0, r7
 800559c:	f000 808d 	beq.w	80056ba <HAL_GPIO_Init+0x1c2>
 80055a0:	4f52      	ldr	r7, [pc, #328]	; (80056ec <HAL_GPIO_Init+0x1f4>)
 80055a2:	42b8      	cmp	r0, r7
 80055a4:	f000 808e 	beq.w	80056c4 <HAL_GPIO_Init+0x1cc>
 80055a8:	4f51      	ldr	r7, [pc, #324]	; (80056f0 <HAL_GPIO_Init+0x1f8>)
 80055aa:	42b8      	cmp	r0, r7
 80055ac:	f000 808f 	beq.w	80056ce <HAL_GPIO_Init+0x1d6>
 80055b0:	4f50      	ldr	r7, [pc, #320]	; (80056f4 <HAL_GPIO_Init+0x1fc>)
 80055b2:	42b8      	cmp	r0, r7
 80055b4:	f000 8090 	beq.w	80056d8 <HAL_GPIO_Init+0x1e0>
 80055b8:	4f4f      	ldr	r7, [pc, #316]	; (80056f8 <HAL_GPIO_Init+0x200>)
 80055ba:	42b8      	cmp	r0, r7
 80055bc:	bf0c      	ite	eq
 80055be:	2706      	moveq	r7, #6
 80055c0:	2707      	movne	r7, #7
 80055c2:	fa07 f606 	lsl.w	r6, r7, r6
 80055c6:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055c8:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 80055ca:	f8dc 2000 	ldr.w	r2, [ip]
        temp &= ~((uint32_t)iocurrent);
 80055ce:	ea6f 060b 	mvn.w	r6, fp
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80055d2:	03ec      	lsls	r4, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80055d4:	bf54      	ite	pl
 80055d6:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 80055d8:	ea4b 0202 	orrmi.w	r2, fp, r2
        }
        EXTI->IMR = temp;
 80055dc:	f8cc 2000 	str.w	r2, [ip]

        temp = EXTI->EMR;
 80055e0:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80055e4:	03aa      	lsls	r2, r5, #14
        temp &= ~((uint32_t)iocurrent);
 80055e6:	bf54      	ite	pl
 80055e8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80055ea:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->EMR = temp;
 80055ee:	f8cc 4004 	str.w	r4, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055f2:	f8dc 4008 	ldr.w	r4, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80055f6:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80055f8:	bf54      	ite	pl
 80055fa:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80055fc:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->RTSR = temp;
 8005600:	f8cc 4008 	str.w	r4, [ip, #8]

        temp = EXTI->FTSR;
 8005604:	f8dc 200c 	ldr.w	r2, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005608:	02ac      	lsls	r4, r5, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 800560a:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 800560e:	bf54      	ite	pl
 8005610:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8005612:	ea4b 0202 	orrmi.w	r2, fp, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005616:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 8005618:	f8cc 200c 	str.w	r2, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800561c:	f47f af7c 	bne.w	8005518 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005620:	b005      	add	sp, #20
 8005622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8005626:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005628:	2403      	movs	r4, #3
 800562a:	40bc      	lsls	r4, r7
 800562c:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005630:	f8d9 600c 	ldr.w	r6, [r9, #12]
 8005634:	40be      	lsls	r6, r7
 8005636:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 800563a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800563c:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005640:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005644:	ea2e 0e0b 	bic.w	lr, lr, fp
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005648:	409e      	lsls	r6, r3
 800564a:	ea46 060e 	orr.w	r6, r6, lr
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800564e:	43e4      	mvns	r4, r4
 8005650:	9400      	str	r4, [sp, #0]
        GPIOx->OTYPER = temp;
 8005652:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8005654:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005656:	ea06 0e04 	and.w	lr, r6, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800565a:	f8d9 6008 	ldr.w	r6, [r9, #8]
 800565e:	40be      	lsls	r6, r7
 8005660:	ea46 060e 	orr.w	r6, r6, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005664:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8005666:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005668:	d001      	beq.n	800566e <HAL_GPIO_Init+0x176>
 800566a:	40ba      	lsls	r2, r7
 800566c:	e769      	b.n	8005542 <HAL_GPIO_Init+0x4a>
        temp = GPIOx->AFR[position >> 3U];
 800566e:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8005672:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005676:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800567a:	f8d8 4020 	ldr.w	r4, [r8, #32]
 800567e:	9401      	str	r4, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005680:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005684:	240f      	movs	r4, #15
 8005686:	fa04 f60e 	lsl.w	r6, r4, lr
 800568a:	9c01      	ldr	r4, [sp, #4]
 800568c:	ea24 0606 	bic.w	r6, r4, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005690:	f8d9 4010 	ldr.w	r4, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005694:	9601      	str	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005696:	fa04 f60e 	lsl.w	r6, r4, lr
 800569a:	9c01      	ldr	r4, [sp, #4]
 800569c:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 800569e:	40ba      	lsls	r2, r7
 80056a0:	f8c8 6020 	str.w	r6, [r8, #32]
 80056a4:	e74d      	b.n	8005542 <HAL_GPIO_Init+0x4a>
 80056a6:	2403      	movs	r4, #3
 80056a8:	40bc      	lsls	r4, r7
 80056aa:	43e4      	mvns	r4, r4
 80056ac:	9400      	str	r4, [sp, #0]
 80056ae:	e7d1      	b.n	8005654 <HAL_GPIO_Init+0x15c>
 80056b0:	2701      	movs	r7, #1
 80056b2:	fa07 f606 	lsl.w	r6, r7, r6
 80056b6:	4332      	orrs	r2, r6
 80056b8:	e786      	b.n	80055c8 <HAL_GPIO_Init+0xd0>
 80056ba:	2702      	movs	r7, #2
 80056bc:	fa07 f606 	lsl.w	r6, r7, r6
 80056c0:	4332      	orrs	r2, r6
 80056c2:	e781      	b.n	80055c8 <HAL_GPIO_Init+0xd0>
 80056c4:	2703      	movs	r7, #3
 80056c6:	fa07 f606 	lsl.w	r6, r7, r6
 80056ca:	4332      	orrs	r2, r6
 80056cc:	e77c      	b.n	80055c8 <HAL_GPIO_Init+0xd0>
 80056ce:	2704      	movs	r7, #4
 80056d0:	fa07 f606 	lsl.w	r6, r7, r6
 80056d4:	4332      	orrs	r2, r6
 80056d6:	e777      	b.n	80055c8 <HAL_GPIO_Init+0xd0>
 80056d8:	2705      	movs	r7, #5
 80056da:	fa07 f606 	lsl.w	r6, r7, r6
 80056de:	4332      	orrs	r2, r6
 80056e0:	e772      	b.n	80055c8 <HAL_GPIO_Init+0xd0>
 80056e2:	bf00      	nop
 80056e4:	40020000 	.word	0x40020000
 80056e8:	40020800 	.word	0x40020800
 80056ec:	40020c00 	.word	0x40020c00
 80056f0:	40021000 	.word	0x40021000
 80056f4:	40021400 	.word	0x40021400
 80056f8:	40021800 	.word	0x40021800
 80056fc:	40023800 	.word	0x40023800
 8005700:	40013c00 	.word	0x40013c00

08005704 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005704:	6903      	ldr	r3, [r0, #16]
 8005706:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8005708:	bf14      	ite	ne
 800570a:	2001      	movne	r0, #1
 800570c:	2000      	moveq	r0, #0
 800570e:	4770      	bx	lr

08005710 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005710:	b902      	cbnz	r2, 8005714 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005712:	0409      	lsls	r1, r1, #16
 8005714:	6181      	str	r1, [r0, #24]
  }
}
 8005716:	4770      	bx	lr

08005718 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005718:	b530      	push	{r4, r5, lr}
 800571a:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 800571c:	4b19      	ldr	r3, [pc, #100]	; (8005784 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800571e:	491a      	ldr	r1, [pc, #104]	; (8005788 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005720:	4d1a      	ldr	r5, [pc, #104]	; (800578c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8005722:	2200      	movs	r2, #0
 8005724:	9201      	str	r2, [sp, #4]
 8005726:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005728:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800572c:	641a      	str	r2, [r3, #64]	; 0x40
 800572e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005734:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005736:	2301      	movs	r3, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8005738:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800573a:	600b      	str	r3, [r1, #0]
  tickstart = HAL_GetTick();
 800573c:	f7ff fbb8 	bl	8004eb0 <HAL_GetTick>
 8005740:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005742:	e005      	b.n	8005750 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005744:	f7ff fbb4 	bl	8004eb0 <HAL_GetTick>
 8005748:	1b00      	subs	r0, r0, r4
 800574a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800574e:	d816      	bhi.n	800577e <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005750:	686b      	ldr	r3, [r5, #4]
 8005752:	03da      	lsls	r2, r3, #15
 8005754:	d5f6      	bpl.n	8005744 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005756:	4b0e      	ldr	r3, [pc, #56]	; (8005790 <HAL_PWREx_EnableOverDrive+0x78>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005758:	4d0c      	ldr	r5, [pc, #48]	; (800578c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800575a:	2201      	movs	r2, #1
 800575c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800575e:	f7ff fba7 	bl	8004eb0 <HAL_GetTick>
 8005762:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005764:	e005      	b.n	8005772 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005766:	f7ff fba3 	bl	8004eb0 <HAL_GetTick>
 800576a:	1b00      	subs	r0, r0, r4
 800576c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005770:	d805      	bhi.n	800577e <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005772:	686b      	ldr	r3, [r5, #4]
 8005774:	039b      	lsls	r3, r3, #14
 8005776:	d5f6      	bpl.n	8005766 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8005778:	2000      	movs	r0, #0
}
 800577a:	b003      	add	sp, #12
 800577c:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 800577e:	2003      	movs	r0, #3
}
 8005780:	b003      	add	sp, #12
 8005782:	bd30      	pop	{r4, r5, pc}
 8005784:	40023800 	.word	0x40023800
 8005788:	420e0040 	.word	0x420e0040
 800578c:	40007000 	.word	0x40007000
 8005790:	420e0044 	.word	0x420e0044

08005794 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005794:	2800      	cmp	r0, #0
 8005796:	f000 8087 	beq.w	80058a8 <HAL_RCC_ClockConfig+0x114>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800579a:	4a48      	ldr	r2, [pc, #288]	; (80058bc <HAL_RCC_ClockConfig+0x128>)
 800579c:	6813      	ldr	r3, [r2, #0]
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	428b      	cmp	r3, r1
{
 80057a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057a8:	460d      	mov	r5, r1
 80057aa:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057ac:	d209      	bcs.n	80057c2 <HAL_RCC_ClockConfig+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ae:	b2cb      	uxtb	r3, r1
 80057b0:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057b2:	6813      	ldr	r3, [r2, #0]
 80057b4:	f003 030f 	and.w	r3, r3, #15
 80057b8:	428b      	cmp	r3, r1
 80057ba:	d002      	beq.n	80057c2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80057bc:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 80057be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057c2:	6823      	ldr	r3, [r4, #0]
 80057c4:	0798      	lsls	r0, r3, #30
 80057c6:	d514      	bpl.n	80057f2 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057c8:	0759      	lsls	r1, r3, #29
 80057ca:	d504      	bpl.n	80057d6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057cc:	493c      	ldr	r1, [pc, #240]	; (80058c0 <HAL_RCC_ClockConfig+0x12c>)
 80057ce:	688a      	ldr	r2, [r1, #8]
 80057d0:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80057d4:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d6:	071a      	lsls	r2, r3, #28
 80057d8:	d504      	bpl.n	80057e4 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057da:	4939      	ldr	r1, [pc, #228]	; (80058c0 <HAL_RCC_ClockConfig+0x12c>)
 80057dc:	688a      	ldr	r2, [r1, #8]
 80057de:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80057e2:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057e4:	4936      	ldr	r1, [pc, #216]	; (80058c0 <HAL_RCC_ClockConfig+0x12c>)
 80057e6:	68a0      	ldr	r0, [r4, #8]
 80057e8:	688a      	ldr	r2, [r1, #8]
 80057ea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80057ee:	4302      	orrs	r2, r0
 80057f0:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057f2:	07df      	lsls	r7, r3, #31
 80057f4:	d521      	bpl.n	800583a <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057f6:	6862      	ldr	r2, [r4, #4]
 80057f8:	2a01      	cmp	r2, #1
 80057fa:	d057      	beq.n	80058ac <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057fc:	1e93      	subs	r3, r2, #2
 80057fe:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005800:	4b2f      	ldr	r3, [pc, #188]	; (80058c0 <HAL_RCC_ClockConfig+0x12c>)
 8005802:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005804:	d94d      	bls.n	80058a2 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005806:	0799      	lsls	r1, r3, #30
 8005808:	d5d8      	bpl.n	80057bc <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800580a:	4e2d      	ldr	r6, [pc, #180]	; (80058c0 <HAL_RCC_ClockConfig+0x12c>)
 800580c:	68b3      	ldr	r3, [r6, #8]
 800580e:	f023 0303 	bic.w	r3, r3, #3
 8005812:	4313      	orrs	r3, r2
 8005814:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8005816:	f7ff fb4b 	bl	8004eb0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800581a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800581e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005820:	e004      	b.n	800582c <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005822:	f7ff fb45 	bl	8004eb0 <HAL_GetTick>
 8005826:	1bc0      	subs	r0, r0, r7
 8005828:	4540      	cmp	r0, r8
 800582a:	d844      	bhi.n	80058b6 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800582c:	68b3      	ldr	r3, [r6, #8]
 800582e:	6862      	ldr	r2, [r4, #4]
 8005830:	f003 030c 	and.w	r3, r3, #12
 8005834:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005838:	d1f3      	bne.n	8005822 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800583a:	4a20      	ldr	r2, [pc, #128]	; (80058bc <HAL_RCC_ClockConfig+0x128>)
 800583c:	6813      	ldr	r3, [r2, #0]
 800583e:	f003 030f 	and.w	r3, r3, #15
 8005842:	42ab      	cmp	r3, r5
 8005844:	d906      	bls.n	8005854 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005846:	b2eb      	uxtb	r3, r5
 8005848:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800584a:	6813      	ldr	r3, [r2, #0]
 800584c:	f003 030f 	and.w	r3, r3, #15
 8005850:	42ab      	cmp	r3, r5
 8005852:	d1b3      	bne.n	80057bc <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005854:	6823      	ldr	r3, [r4, #0]
 8005856:	075a      	lsls	r2, r3, #29
 8005858:	d506      	bpl.n	8005868 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800585a:	4919      	ldr	r1, [pc, #100]	; (80058c0 <HAL_RCC_ClockConfig+0x12c>)
 800585c:	68e0      	ldr	r0, [r4, #12]
 800585e:	688a      	ldr	r2, [r1, #8]
 8005860:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8005864:	4302      	orrs	r2, r0
 8005866:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005868:	071b      	lsls	r3, r3, #28
 800586a:	d507      	bpl.n	800587c <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800586c:	4a14      	ldr	r2, [pc, #80]	; (80058c0 <HAL_RCC_ClockConfig+0x12c>)
 800586e:	6921      	ldr	r1, [r4, #16]
 8005870:	6893      	ldr	r3, [r2, #8]
 8005872:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005876:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800587a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800587c:	f000 f84e 	bl	800591c <HAL_RCC_GetSysClockFreq>
 8005880:	4a0f      	ldr	r2, [pc, #60]	; (80058c0 <HAL_RCC_ClockConfig+0x12c>)
 8005882:	4c10      	ldr	r4, [pc, #64]	; (80058c4 <HAL_RCC_ClockConfig+0x130>)
 8005884:	6892      	ldr	r2, [r2, #8]
 8005886:	4910      	ldr	r1, [pc, #64]	; (80058c8 <HAL_RCC_ClockConfig+0x134>)
 8005888:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800588c:	4603      	mov	r3, r0
 800588e:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8005890:	480e      	ldr	r0, [pc, #56]	; (80058cc <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005892:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8005894:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005896:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8005898:	f7ff fac0 	bl	8004e1c <HAL_InitTick>
  return HAL_OK;
 800589c:	2000      	movs	r0, #0
}
 800589e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058a2:	0198      	lsls	r0, r3, #6
 80058a4:	d4b1      	bmi.n	800580a <HAL_RCC_ClockConfig+0x76>
 80058a6:	e789      	b.n	80057bc <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80058a8:	2001      	movs	r0, #1
}
 80058aa:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ac:	4b04      	ldr	r3, [pc, #16]	; (80058c0 <HAL_RCC_ClockConfig+0x12c>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	039e      	lsls	r6, r3, #14
 80058b2:	d4aa      	bmi.n	800580a <HAL_RCC_ClockConfig+0x76>
 80058b4:	e782      	b.n	80057bc <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 80058b6:	2003      	movs	r0, #3
 80058b8:	e781      	b.n	80057be <HAL_RCC_ClockConfig+0x2a>
 80058ba:	bf00      	nop
 80058bc:	40023c00 	.word	0x40023c00
 80058c0:	40023800 	.word	0x40023800
 80058c4:	0800980c 	.word	0x0800980c
 80058c8:	200006f8 	.word	0x200006f8
 80058cc:	20000700 	.word	0x20000700

080058d0 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80058d0:	4b01      	ldr	r3, [pc, #4]	; (80058d8 <HAL_RCC_GetHCLKFreq+0x8>)
}
 80058d2:	6818      	ldr	r0, [r3, #0]
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	200006f8 	.word	0x200006f8

080058dc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058dc:	4b04      	ldr	r3, [pc, #16]	; (80058f0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80058de:	4a05      	ldr	r2, [pc, #20]	; (80058f4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80058e0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80058e2:	4905      	ldr	r1, [pc, #20]	; (80058f8 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058e4:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80058e8:	6808      	ldr	r0, [r1, #0]
 80058ea:	5cd3      	ldrb	r3, [r2, r3]
}
 80058ec:	40d8      	lsrs	r0, r3
 80058ee:	4770      	bx	lr
 80058f0:	40023800 	.word	0x40023800
 80058f4:	0800981c 	.word	0x0800981c
 80058f8:	200006f8 	.word	0x200006f8

080058fc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058fc:	4b04      	ldr	r3, [pc, #16]	; (8005910 <HAL_RCC_GetPCLK2Freq+0x14>)
 80058fe:	4a05      	ldr	r2, [pc, #20]	; (8005914 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005900:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8005902:	4905      	ldr	r1, [pc, #20]	; (8005918 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005904:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005908:	6808      	ldr	r0, [r1, #0]
 800590a:	5cd3      	ldrb	r3, [r2, r3]
}
 800590c:	40d8      	lsrs	r0, r3
 800590e:	4770      	bx	lr
 8005910:	40023800 	.word	0x40023800
 8005914:	0800981c 	.word	0x0800981c
 8005918:	200006f8 	.word	0x200006f8

0800591c <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800591c:	4928      	ldr	r1, [pc, #160]	; (80059c0 <HAL_RCC_GetSysClockFreq+0xa4>)
{
 800591e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005920:	688b      	ldr	r3, [r1, #8]
 8005922:	f003 030c 	and.w	r3, r3, #12
 8005926:	2b08      	cmp	r3, #8
 8005928:	d007      	beq.n	800593a <HAL_RCC_GetSysClockFreq+0x1e>
 800592a:	2b0c      	cmp	r3, #12
 800592c:	d01d      	beq.n	800596a <HAL_RCC_GetSysClockFreq+0x4e>
 800592e:	4a25      	ldr	r2, [pc, #148]	; (80059c4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005930:	4825      	ldr	r0, [pc, #148]	; (80059c8 <HAL_RCC_GetSysClockFreq+0xac>)
 8005932:	2b04      	cmp	r3, #4
 8005934:	bf08      	it	eq
 8005936:	4610      	moveq	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005938:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800593a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800593c:	684b      	ldr	r3, [r1, #4]
 800593e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005942:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005946:	d130      	bne.n	80059aa <HAL_RCC_GetSysClockFreq+0x8e>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005948:	6849      	ldr	r1, [r1, #4]
 800594a:	481f      	ldr	r0, [pc, #124]	; (80059c8 <HAL_RCC_GetSysClockFreq+0xac>)
 800594c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005950:	fba1 0100 	umull	r0, r1, r1, r0
 8005954:	f7fb f9b8 	bl	8000cc8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005958:	4b19      	ldr	r3, [pc, #100]	; (80059c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005960:	3301      	adds	r3, #1
 8005962:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8005964:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8005968:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800596a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800596c:	684b      	ldr	r3, [r1, #4]
 800596e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005972:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005976:	d10e      	bne.n	8005996 <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005978:	6849      	ldr	r1, [r1, #4]
 800597a:	4813      	ldr	r0, [pc, #76]	; (80059c8 <HAL_RCC_GetSysClockFreq+0xac>)
 800597c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005980:	fba1 0100 	umull	r0, r1, r1, r0
 8005984:	f7fb f9a0 	bl	8000cc8 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005988:	4b0d      	ldr	r3, [pc, #52]	; (80059c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 8005990:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8005994:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005996:	684b      	ldr	r3, [r1, #4]
 8005998:	480a      	ldr	r0, [pc, #40]	; (80059c4 <HAL_RCC_GetSysClockFreq+0xa8>)
 800599a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800599e:	fba3 0100 	umull	r0, r1, r3, r0
 80059a2:	2300      	movs	r3, #0
 80059a4:	f7fb f990 	bl	8000cc8 <__aeabi_uldivmod>
 80059a8:	e7ee      	b.n	8005988 <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059aa:	684b      	ldr	r3, [r1, #4]
 80059ac:	4805      	ldr	r0, [pc, #20]	; (80059c4 <HAL_RCC_GetSysClockFreq+0xa8>)
 80059ae:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80059b2:	fba3 0100 	umull	r0, r1, r3, r0
 80059b6:	2300      	movs	r3, #0
 80059b8:	f7fb f986 	bl	8000cc8 <__aeabi_uldivmod>
 80059bc:	e7cc      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0x3c>
 80059be:	bf00      	nop
 80059c0:	40023800 	.word	0x40023800
 80059c4:	007a1200 	.word	0x007a1200
 80059c8:	00f42400 	.word	0x00f42400

080059cc <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059cc:	2800      	cmp	r0, #0
 80059ce:	f000 81b5 	beq.w	8005d3c <HAL_RCC_OscConfig+0x370>
{
 80059d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059d6:	6803      	ldr	r3, [r0, #0]
 80059d8:	07da      	lsls	r2, r3, #31
{
 80059da:	b082      	sub	sp, #8
 80059dc:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059de:	d536      	bpl.n	8005a4e <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80059e0:	49ad      	ldr	r1, [pc, #692]	; (8005c98 <HAL_RCC_OscConfig+0x2cc>)
 80059e2:	688a      	ldr	r2, [r1, #8]
 80059e4:	f002 020c 	and.w	r2, r2, #12
 80059e8:	2a04      	cmp	r2, #4
 80059ea:	f000 80df 	beq.w	8005bac <HAL_RCC_OscConfig+0x1e0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80059ee:	688a      	ldr	r2, [r1, #8]
 80059f0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80059f4:	2a08      	cmp	r2, #8
 80059f6:	f000 80d5 	beq.w	8005ba4 <HAL_RCC_OscConfig+0x1d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059fa:	49a7      	ldr	r1, [pc, #668]	; (8005c98 <HAL_RCC_OscConfig+0x2cc>)
 80059fc:	688a      	ldr	r2, [r1, #8]
 80059fe:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005a02:	2a0c      	cmp	r2, #12
 8005a04:	f000 8104 	beq.w	8005c10 <HAL_RCC_OscConfig+0x244>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a08:	6863      	ldr	r3, [r4, #4]
 8005a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a0e:	f000 8118 	beq.w	8005c42 <HAL_RCC_OscConfig+0x276>
 8005a12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a16:	f000 8198 	beq.w	8005d4a <HAL_RCC_OscConfig+0x37e>
 8005a1a:	4d9f      	ldr	r5, [pc, #636]	; (8005c98 <HAL_RCC_OscConfig+0x2cc>)
 8005a1c:	682a      	ldr	r2, [r5, #0]
 8005a1e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005a22:	602a      	str	r2, [r5, #0]
 8005a24:	682a      	ldr	r2, [r5, #0]
 8005a26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a2a:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f040 810d 	bne.w	8005c4c <HAL_RCC_OscConfig+0x280>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a32:	f7ff fa3d 	bl	8004eb0 <HAL_GetTick>
 8005a36:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a38:	e005      	b.n	8005a46 <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a3a:	f7ff fa39 	bl	8004eb0 <HAL_GetTick>
 8005a3e:	1b80      	subs	r0, r0, r6
 8005a40:	2864      	cmp	r0, #100	; 0x64
 8005a42:	f200 80fa 	bhi.w	8005c3a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a46:	682b      	ldr	r3, [r5, #0]
 8005a48:	0399      	lsls	r1, r3, #14
 8005a4a:	d4f6      	bmi.n	8005a3a <HAL_RCC_OscConfig+0x6e>
 8005a4c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a4e:	079a      	lsls	r2, r3, #30
 8005a50:	d52f      	bpl.n	8005ab2 <HAL_RCC_OscConfig+0xe6>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005a52:	4a91      	ldr	r2, [pc, #580]	; (8005c98 <HAL_RCC_OscConfig+0x2cc>)
 8005a54:	6891      	ldr	r1, [r2, #8]
 8005a56:	f011 0f0c 	tst.w	r1, #12
 8005a5a:	f000 8098 	beq.w	8005b8e <HAL_RCC_OscConfig+0x1c2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005a5e:	6891      	ldr	r1, [r2, #8]
 8005a60:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005a64:	2908      	cmp	r1, #8
 8005a66:	f000 808e 	beq.w	8005b86 <HAL_RCC_OscConfig+0x1ba>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a6a:	498b      	ldr	r1, [pc, #556]	; (8005c98 <HAL_RCC_OscConfig+0x2cc>)
 8005a6c:	688a      	ldr	r2, [r1, #8]
 8005a6e:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005a72:	2a0c      	cmp	r2, #12
 8005a74:	f000 8164 	beq.w	8005d40 <HAL_RCC_OscConfig+0x374>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a78:	68e3      	ldr	r3, [r4, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 8116 	beq.w	8005cac <HAL_RCC_OscConfig+0x2e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a80:	4b86      	ldr	r3, [pc, #536]	; (8005c9c <HAL_RCC_OscConfig+0x2d0>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a82:	4e85      	ldr	r6, [pc, #532]	; (8005c98 <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_HSI_ENABLE();
 8005a84:	2201      	movs	r2, #1
 8005a86:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005a88:	f7ff fa12 	bl	8004eb0 <HAL_GetTick>
 8005a8c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a8e:	e005      	b.n	8005a9c <HAL_RCC_OscConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a90:	f7ff fa0e 	bl	8004eb0 <HAL_GetTick>
 8005a94:	1b40      	subs	r0, r0, r5
 8005a96:	2802      	cmp	r0, #2
 8005a98:	f200 80cf 	bhi.w	8005c3a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a9c:	6833      	ldr	r3, [r6, #0]
 8005a9e:	0798      	lsls	r0, r3, #30
 8005aa0:	d5f6      	bpl.n	8005a90 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aa2:	6833      	ldr	r3, [r6, #0]
 8005aa4:	6922      	ldr	r2, [r4, #16]
 8005aa6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005aaa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005aae:	6033      	str	r3, [r6, #0]
 8005ab0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ab2:	071a      	lsls	r2, r3, #28
 8005ab4:	d452      	bmi.n	8005b5c <HAL_RCC_OscConfig+0x190>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ab6:	0758      	lsls	r0, r3, #29
 8005ab8:	d530      	bpl.n	8005b1c <HAL_RCC_OscConfig+0x150>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005aba:	4a77      	ldr	r2, [pc, #476]	; (8005c98 <HAL_RCC_OscConfig+0x2cc>)
 8005abc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005abe:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8005ac2:	f000 8099 	beq.w	8005bf8 <HAL_RCC_OscConfig+0x22c>
    FlagStatus       pwrclkchanged = RESET;
 8005ac6:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ac8:	4e75      	ldr	r6, [pc, #468]	; (8005ca0 <HAL_RCC_OscConfig+0x2d4>)
 8005aca:	6833      	ldr	r3, [r6, #0]
 8005acc:	05d9      	lsls	r1, r3, #23
 8005ace:	f140 80a4 	bpl.w	8005c1a <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ad2:	68a3      	ldr	r3, [r4, #8]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	f000 80c7 	beq.w	8005c68 <HAL_RCC_OscConfig+0x29c>
 8005ada:	2b05      	cmp	r3, #5
 8005adc:	f000 813f 	beq.w	8005d5e <HAL_RCC_OscConfig+0x392>
 8005ae0:	4e6d      	ldr	r6, [pc, #436]	; (8005c98 <HAL_RCC_OscConfig+0x2cc>)
 8005ae2:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8005ae4:	f022 0201 	bic.w	r2, r2, #1
 8005ae8:	6732      	str	r2, [r6, #112]	; 0x70
 8005aea:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8005aec:	f022 0204 	bic.w	r2, r2, #4
 8005af0:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f040 80bd 	bne.w	8005c72 <HAL_RCC_OscConfig+0x2a6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af8:	f7ff f9da 	bl	8004eb0 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005afc:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005b00:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b02:	e005      	b.n	8005b10 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b04:	f7ff f9d4 	bl	8004eb0 <HAL_GetTick>
 8005b08:	1bc0      	subs	r0, r0, r7
 8005b0a:	4540      	cmp	r0, r8
 8005b0c:	f200 8095 	bhi.w	8005c3a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b10:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8005b12:	0798      	lsls	r0, r3, #30
 8005b14:	d4f6      	bmi.n	8005b04 <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b16:	2d00      	cmp	r5, #0
 8005b18:	f040 810a 	bne.w	8005d30 <HAL_RCC_OscConfig+0x364>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b1c:	69a0      	ldr	r0, [r4, #24]
 8005b1e:	b1c8      	cbz	r0, 8005b54 <HAL_RCC_OscConfig+0x188>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b20:	4d5d      	ldr	r5, [pc, #372]	; (8005c98 <HAL_RCC_OscConfig+0x2cc>)
 8005b22:	68ab      	ldr	r3, [r5, #8]
 8005b24:	f003 030c 	and.w	r3, r3, #12
 8005b28:	2b08      	cmp	r3, #8
 8005b2a:	f000 80d0 	beq.w	8005cce <HAL_RCC_OscConfig+0x302>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b2e:	4b5d      	ldr	r3, [pc, #372]	; (8005ca4 <HAL_RCC_OscConfig+0x2d8>)
 8005b30:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b32:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005b34:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b36:	f000 811c 	beq.w	8005d72 <HAL_RCC_OscConfig+0x3a6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3a:	f7ff f9b9 	bl	8004eb0 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b3e:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8005b40:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b42:	e004      	b.n	8005b4e <HAL_RCC_OscConfig+0x182>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b44:	f7ff f9b4 	bl	8004eb0 <HAL_GetTick>
 8005b48:	1b40      	subs	r0, r0, r5
 8005b4a:	2802      	cmp	r0, #2
 8005b4c:	d875      	bhi.n	8005c3a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	019b      	lsls	r3, r3, #6
 8005b52:	d4f7      	bmi.n	8005b44 <HAL_RCC_OscConfig+0x178>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005b54:	2000      	movs	r0, #0
}
 8005b56:	b002      	add	sp, #8
 8005b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b5c:	6963      	ldr	r3, [r4, #20]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d02e      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_LSI_ENABLE();
 8005b62:	4b51      	ldr	r3, [pc, #324]	; (8005ca8 <HAL_RCC_OscConfig+0x2dc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b64:	4e4c      	ldr	r6, [pc, #304]	; (8005c98 <HAL_RCC_OscConfig+0x2cc>)
      __HAL_RCC_LSI_ENABLE();
 8005b66:	2201      	movs	r2, #1
 8005b68:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005b6a:	f7ff f9a1 	bl	8004eb0 <HAL_GetTick>
 8005b6e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b70:	e004      	b.n	8005b7c <HAL_RCC_OscConfig+0x1b0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b72:	f7ff f99d 	bl	8004eb0 <HAL_GetTick>
 8005b76:	1b40      	subs	r0, r0, r5
 8005b78:	2802      	cmp	r0, #2
 8005b7a:	d85e      	bhi.n	8005c3a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b7c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8005b7e:	079b      	lsls	r3, r3, #30
 8005b80:	d5f7      	bpl.n	8005b72 <HAL_RCC_OscConfig+0x1a6>
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	e797      	b.n	8005ab6 <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005b86:	6852      	ldr	r2, [r2, #4]
 8005b88:	0257      	lsls	r7, r2, #9
 8005b8a:	f53f af6e 	bmi.w	8005a6a <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b8e:	4a42      	ldr	r2, [pc, #264]	; (8005c98 <HAL_RCC_OscConfig+0x2cc>)
 8005b90:	6812      	ldr	r2, [r2, #0]
 8005b92:	0795      	lsls	r5, r2, #30
 8005b94:	d524      	bpl.n	8005be0 <HAL_RCC_OscConfig+0x214>
 8005b96:	68e2      	ldr	r2, [r4, #12]
 8005b98:	2a01      	cmp	r2, #1
 8005b9a:	d021      	beq.n	8005be0 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8005b9c:	2001      	movs	r0, #1
}
 8005b9e:	b002      	add	sp, #8
 8005ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005ba4:	684a      	ldr	r2, [r1, #4]
 8005ba6:	0257      	lsls	r7, r2, #9
 8005ba8:	f57f af27 	bpl.w	80059fa <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bac:	4a3a      	ldr	r2, [pc, #232]	; (8005c98 <HAL_RCC_OscConfig+0x2cc>)
 8005bae:	6812      	ldr	r2, [r2, #0]
 8005bb0:	0395      	lsls	r5, r2, #14
 8005bb2:	f57f af4c 	bpl.w	8005a4e <HAL_RCC_OscConfig+0x82>
 8005bb6:	6862      	ldr	r2, [r4, #4]
 8005bb8:	2a00      	cmp	r2, #0
 8005bba:	f47f af48 	bne.w	8005a4e <HAL_RCC_OscConfig+0x82>
 8005bbe:	e7ed      	b.n	8005b9c <HAL_RCC_OscConfig+0x1d0>
      __HAL_RCC_LSI_DISABLE();
 8005bc0:	4a39      	ldr	r2, [pc, #228]	; (8005ca8 <HAL_RCC_OscConfig+0x2dc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bc2:	4e35      	ldr	r6, [pc, #212]	; (8005c98 <HAL_RCC_OscConfig+0x2cc>)
      __HAL_RCC_LSI_DISABLE();
 8005bc4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005bc6:	f7ff f973 	bl	8004eb0 <HAL_GetTick>
 8005bca:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bcc:	e004      	b.n	8005bd8 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bce:	f7ff f96f 	bl	8004eb0 <HAL_GetTick>
 8005bd2:	1b40      	subs	r0, r0, r5
 8005bd4:	2802      	cmp	r0, #2
 8005bd6:	d830      	bhi.n	8005c3a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bd8:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8005bda:	079f      	lsls	r7, r3, #30
 8005bdc:	d4f7      	bmi.n	8005bce <HAL_RCC_OscConfig+0x202>
 8005bde:	e7d0      	b.n	8005b82 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005be0:	492d      	ldr	r1, [pc, #180]	; (8005c98 <HAL_RCC_OscConfig+0x2cc>)
 8005be2:	6920      	ldr	r0, [r4, #16]
 8005be4:	680a      	ldr	r2, [r1, #0]
 8005be6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8005bea:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8005bee:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bf0:	071a      	lsls	r2, r3, #28
 8005bf2:	f57f af60 	bpl.w	8005ab6 <HAL_RCC_OscConfig+0xea>
 8005bf6:	e7b1      	b.n	8005b5c <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bf8:	9301      	str	r3, [sp, #4]
 8005bfa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c00:	6413      	str	r3, [r2, #64]	; 0x40
 8005c02:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c08:	9301      	str	r3, [sp, #4]
 8005c0a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005c0c:	2501      	movs	r5, #1
 8005c0e:	e75b      	b.n	8005ac8 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c10:	684a      	ldr	r2, [r1, #4]
 8005c12:	0256      	lsls	r6, r2, #9
 8005c14:	f57f aef8 	bpl.w	8005a08 <HAL_RCC_OscConfig+0x3c>
 8005c18:	e7c8      	b.n	8005bac <HAL_RCC_OscConfig+0x1e0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c1a:	6833      	ldr	r3, [r6, #0]
 8005c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c20:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005c22:	f7ff f945 	bl	8004eb0 <HAL_GetTick>
 8005c26:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c28:	6833      	ldr	r3, [r6, #0]
 8005c2a:	05da      	lsls	r2, r3, #23
 8005c2c:	f53f af51 	bmi.w	8005ad2 <HAL_RCC_OscConfig+0x106>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c30:	f7ff f93e 	bl	8004eb0 <HAL_GetTick>
 8005c34:	1bc0      	subs	r0, r0, r7
 8005c36:	2802      	cmp	r0, #2
 8005c38:	d9f6      	bls.n	8005c28 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8005c3a:	2003      	movs	r0, #3
}
 8005c3c:	b002      	add	sp, #8
 8005c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c42:	4a15      	ldr	r2, [pc, #84]	; (8005c98 <HAL_RCC_OscConfig+0x2cc>)
 8005c44:	6813      	ldr	r3, [r2, #0]
 8005c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c4a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005c4c:	f7ff f930 	bl	8004eb0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c50:	4e11      	ldr	r6, [pc, #68]	; (8005c98 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8005c52:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c54:	e004      	b.n	8005c60 <HAL_RCC_OscConfig+0x294>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c56:	f7ff f92b 	bl	8004eb0 <HAL_GetTick>
 8005c5a:	1b40      	subs	r0, r0, r5
 8005c5c:	2864      	cmp	r0, #100	; 0x64
 8005c5e:	d8ec      	bhi.n	8005c3a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c60:	6833      	ldr	r3, [r6, #0]
 8005c62:	0398      	lsls	r0, r3, #14
 8005c64:	d5f7      	bpl.n	8005c56 <HAL_RCC_OscConfig+0x28a>
 8005c66:	e6f1      	b.n	8005a4c <HAL_RCC_OscConfig+0x80>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c68:	4a0b      	ldr	r2, [pc, #44]	; (8005c98 <HAL_RCC_OscConfig+0x2cc>)
 8005c6a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8005c6c:	f043 0301 	orr.w	r3, r3, #1
 8005c70:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8005c72:	f7ff f91d 	bl	8004eb0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c76:	4f08      	ldr	r7, [pc, #32]	; (8005c98 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8005c78:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c7a:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c7e:	e004      	b.n	8005c8a <HAL_RCC_OscConfig+0x2be>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c80:	f7ff f916 	bl	8004eb0 <HAL_GetTick>
 8005c84:	1b80      	subs	r0, r0, r6
 8005c86:	4540      	cmp	r0, r8
 8005c88:	d8d7      	bhi.n	8005c3a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c8c:	079b      	lsls	r3, r3, #30
 8005c8e:	d5f7      	bpl.n	8005c80 <HAL_RCC_OscConfig+0x2b4>
    if(pwrclkchanged == SET)
 8005c90:	2d00      	cmp	r5, #0
 8005c92:	f43f af43 	beq.w	8005b1c <HAL_RCC_OscConfig+0x150>
 8005c96:	e04b      	b.n	8005d30 <HAL_RCC_OscConfig+0x364>
 8005c98:	40023800 	.word	0x40023800
 8005c9c:	42470000 	.word	0x42470000
 8005ca0:	40007000 	.word	0x40007000
 8005ca4:	42470060 	.word	0x42470060
 8005ca8:	42470e80 	.word	0x42470e80
        __HAL_RCC_HSI_DISABLE();
 8005cac:	4a49      	ldr	r2, [pc, #292]	; (8005dd4 <HAL_RCC_OscConfig+0x408>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cae:	4e4a      	ldr	r6, [pc, #296]	; (8005dd8 <HAL_RCC_OscConfig+0x40c>)
        __HAL_RCC_HSI_DISABLE();
 8005cb0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005cb2:	f7ff f8fd 	bl	8004eb0 <HAL_GetTick>
 8005cb6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cb8:	e004      	b.n	8005cc4 <HAL_RCC_OscConfig+0x2f8>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cba:	f7ff f8f9 	bl	8004eb0 <HAL_GetTick>
 8005cbe:	1b40      	subs	r0, r0, r5
 8005cc0:	2802      	cmp	r0, #2
 8005cc2:	d8ba      	bhi.n	8005c3a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cc4:	6833      	ldr	r3, [r6, #0]
 8005cc6:	0799      	lsls	r1, r3, #30
 8005cc8:	d4f7      	bmi.n	8005cba <HAL_RCC_OscConfig+0x2ee>
 8005cca:	6823      	ldr	r3, [r4, #0]
 8005ccc:	e6f1      	b.n	8005ab2 <HAL_RCC_OscConfig+0xe6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cce:	2801      	cmp	r0, #1
 8005cd0:	f43f af41 	beq.w	8005b56 <HAL_RCC_OscConfig+0x18a>
        pll_config = RCC->PLLCFGR;
 8005cd4:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cd6:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cd8:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cdc:	4291      	cmp	r1, r2
 8005cde:	f47f af5d 	bne.w	8005b9c <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ce2:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ce4:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ce8:	4291      	cmp	r1, r2
 8005cea:	f47f af57 	bne.w	8005b9c <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005cf0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8005cf4:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cf6:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005cfa:	f47f af4f 	bne.w	8005b9c <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cfe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005d00:	0852      	lsrs	r2, r2, #1
 8005d02:	3a01      	subs	r2, #1
 8005d04:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d08:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005d0c:	f47f af46 	bne.w	8005b9c <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d10:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005d12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d16:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8005d1a:	f47f af3f 	bne.w	8005b9c <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005d1e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005d20:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d24:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
  return HAL_OK;
 8005d28:	bf14      	ite	ne
 8005d2a:	2001      	movne	r0, #1
 8005d2c:	2000      	moveq	r0, #0
 8005d2e:	e712      	b.n	8005b56 <HAL_RCC_OscConfig+0x18a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d30:	4a29      	ldr	r2, [pc, #164]	; (8005dd8 <HAL_RCC_OscConfig+0x40c>)
 8005d32:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005d34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d38:	6413      	str	r3, [r2, #64]	; 0x40
 8005d3a:	e6ef      	b.n	8005b1c <HAL_RCC_OscConfig+0x150>
    return HAL_ERROR;
 8005d3c:	2001      	movs	r0, #1
}
 8005d3e:	4770      	bx	lr
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d40:	684a      	ldr	r2, [r1, #4]
 8005d42:	0256      	lsls	r6, r2, #9
 8005d44:	f53f ae98 	bmi.w	8005a78 <HAL_RCC_OscConfig+0xac>
 8005d48:	e721      	b.n	8005b8e <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d4a:	4b23      	ldr	r3, [pc, #140]	; (8005dd8 <HAL_RCC_OscConfig+0x40c>)
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005d5a:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d5c:	e776      	b.n	8005c4c <HAL_RCC_OscConfig+0x280>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d5e:	4b1e      	ldr	r3, [pc, #120]	; (8005dd8 <HAL_RCC_OscConfig+0x40c>)
 8005d60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d62:	f042 0204 	orr.w	r2, r2, #4
 8005d66:	671a      	str	r2, [r3, #112]	; 0x70
 8005d68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d6a:	f042 0201 	orr.w	r2, r2, #1
 8005d6e:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d70:	e77f      	b.n	8005c72 <HAL_RCC_OscConfig+0x2a6>
        tickstart = HAL_GetTick();
 8005d72:	f7ff f89d 	bl	8004eb0 <HAL_GetTick>
 8005d76:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d78:	e005      	b.n	8005d86 <HAL_RCC_OscConfig+0x3ba>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d7a:	f7ff f899 	bl	8004eb0 <HAL_GetTick>
 8005d7e:	1b80      	subs	r0, r0, r6
 8005d80:	2802      	cmp	r0, #2
 8005d82:	f63f af5a 	bhi.w	8005c3a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d86:	682b      	ldr	r3, [r5, #0]
 8005d88:	0199      	lsls	r1, r3, #6
 8005d8a:	d4f6      	bmi.n	8005d7a <HAL_RCC_OscConfig+0x3ae>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d8c:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8005d90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005d92:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005d94:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005d96:	4313      	orrs	r3, r2
 8005d98:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005d9a:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8005d9e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005da2:	0852      	lsrs	r2, r2, #1
 8005da4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8005da8:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8005daa:	490c      	ldr	r1, [pc, #48]	; (8005ddc <HAL_RCC_OscConfig+0x410>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dac:	4e0a      	ldr	r6, [pc, #40]	; (8005dd8 <HAL_RCC_OscConfig+0x40c>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005dae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8005db2:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005db4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005db6:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8005db8:	f7ff f87a 	bl	8004eb0 <HAL_GetTick>
 8005dbc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dbe:	e005      	b.n	8005dcc <HAL_RCC_OscConfig+0x400>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dc0:	f7ff f876 	bl	8004eb0 <HAL_GetTick>
 8005dc4:	1b00      	subs	r0, r0, r4
 8005dc6:	2802      	cmp	r0, #2
 8005dc8:	f63f af37 	bhi.w	8005c3a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dcc:	6833      	ldr	r3, [r6, #0]
 8005dce:	019a      	lsls	r2, r3, #6
 8005dd0:	d5f6      	bpl.n	8005dc0 <HAL_RCC_OscConfig+0x3f4>
 8005dd2:	e6bf      	b.n	8005b54 <HAL_RCC_OscConfig+0x188>
 8005dd4:	42470000 	.word	0x42470000
 8005dd8:	40023800 	.word	0x40023800
 8005ddc:	42470060 	.word	0x42470060

08005de0 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005de0:	2800      	cmp	r0, #0
 8005de2:	f000 8087 	beq.w	8005ef4 <HAL_TIM_Base_Init+0x114>
{
 8005de6:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005de8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005dec:	4604      	mov	r4, r0
 8005dee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d079      	beq.n	8005eea <HAL_TIM_Base_Init+0x10a>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005df6:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005df8:	493f      	ldr	r1, [pc, #252]	; (8005ef8 <HAL_TIM_Base_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e00:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8005e02:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e04:	d05d      	beq.n	8005ec2 <HAL_TIM_Base_Init+0xe2>
 8005e06:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005e0a:	d031      	beq.n	8005e70 <HAL_TIM_Base_Init+0x90>
 8005e0c:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8005e10:	428a      	cmp	r2, r1
 8005e12:	d02d      	beq.n	8005e70 <HAL_TIM_Base_Init+0x90>
 8005e14:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e18:	428a      	cmp	r2, r1
 8005e1a:	d029      	beq.n	8005e70 <HAL_TIM_Base_Init+0x90>
 8005e1c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e20:	428a      	cmp	r2, r1
 8005e22:	d025      	beq.n	8005e70 <HAL_TIM_Base_Init+0x90>
 8005e24:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8005e28:	428a      	cmp	r2, r1
 8005e2a:	d04a      	beq.n	8005ec2 <HAL_TIM_Base_Init+0xe2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e2c:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8005e30:	428a      	cmp	r2, r1
 8005e32:	d021      	beq.n	8005e78 <HAL_TIM_Base_Init+0x98>
 8005e34:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e38:	428a      	cmp	r2, r1
 8005e3a:	d01d      	beq.n	8005e78 <HAL_TIM_Base_Init+0x98>
 8005e3c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e40:	428a      	cmp	r2, r1
 8005e42:	d019      	beq.n	8005e78 <HAL_TIM_Base_Init+0x98>
 8005e44:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 8005e48:	428a      	cmp	r2, r1
 8005e4a:	d015      	beq.n	8005e78 <HAL_TIM_Base_Init+0x98>
 8005e4c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e50:	428a      	cmp	r2, r1
 8005e52:	d011      	beq.n	8005e78 <HAL_TIM_Base_Init+0x98>
 8005e54:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e58:	428a      	cmp	r2, r1
 8005e5a:	d00d      	beq.n	8005e78 <HAL_TIM_Base_Init+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e5c:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e5e:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e60:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e66:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005e68:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e6a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005e6c:	6291      	str	r1, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e6e:	e010      	b.n	8005e92 <HAL_TIM_Base_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 8005e70:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005e76:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e78:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e7a:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e7c:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e82:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e88:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005e8a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005e8c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e8e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005e90:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e92:	2301      	movs	r3, #1
 8005e94:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e96:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e9a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005e9e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005ea2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005ea6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eaa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005eae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eb2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005eb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005eba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005ebe:	2000      	movs	r0, #0
}
 8005ec0:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8005ec2:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ec4:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ec6:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005ecc:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ed2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ed4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ed8:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005eda:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005edc:	68e3      	ldr	r3, [r4, #12]
 8005ede:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005ee0:	6863      	ldr	r3, [r4, #4]
 8005ee2:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005ee4:	6963      	ldr	r3, [r4, #20]
 8005ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8005ee8:	e7d3      	b.n	8005e92 <HAL_TIM_Base_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 8005eea:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005eee:	f7fd ffa7 	bl	8003e40 <HAL_TIM_Base_MspInit>
 8005ef2:	e780      	b.n	8005df6 <HAL_TIM_Base_Init+0x16>
    return HAL_ERROR;
 8005ef4:	2001      	movs	r0, #1
}
 8005ef6:	4770      	bx	lr
 8005ef8:	40010000 	.word	0x40010000

08005efc <HAL_TIM_PWM_MspInit>:
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop

08005f00 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005f00:	2800      	cmp	r0, #0
 8005f02:	f000 8087 	beq.w	8006014 <HAL_TIM_PWM_Init+0x114>
{
 8005f06:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005f08:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005f0c:	4604      	mov	r4, r0
 8005f0e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d079      	beq.n	800600a <HAL_TIM_PWM_Init+0x10a>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f16:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f18:	493f      	ldr	r1, [pc, #252]	; (8006018 <HAL_TIM_PWM_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f20:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8005f22:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f24:	d05d      	beq.n	8005fe2 <HAL_TIM_PWM_Init+0xe2>
 8005f26:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005f2a:	d031      	beq.n	8005f90 <HAL_TIM_PWM_Init+0x90>
 8005f2c:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8005f30:	428a      	cmp	r2, r1
 8005f32:	d02d      	beq.n	8005f90 <HAL_TIM_PWM_Init+0x90>
 8005f34:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005f38:	428a      	cmp	r2, r1
 8005f3a:	d029      	beq.n	8005f90 <HAL_TIM_PWM_Init+0x90>
 8005f3c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005f40:	428a      	cmp	r2, r1
 8005f42:	d025      	beq.n	8005f90 <HAL_TIM_PWM_Init+0x90>
 8005f44:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8005f48:	428a      	cmp	r2, r1
 8005f4a:	d04a      	beq.n	8005fe2 <HAL_TIM_PWM_Init+0xe2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f4c:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8005f50:	428a      	cmp	r2, r1
 8005f52:	d021      	beq.n	8005f98 <HAL_TIM_PWM_Init+0x98>
 8005f54:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005f58:	428a      	cmp	r2, r1
 8005f5a:	d01d      	beq.n	8005f98 <HAL_TIM_PWM_Init+0x98>
 8005f5c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005f60:	428a      	cmp	r2, r1
 8005f62:	d019      	beq.n	8005f98 <HAL_TIM_PWM_Init+0x98>
 8005f64:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 8005f68:	428a      	cmp	r2, r1
 8005f6a:	d015      	beq.n	8005f98 <HAL_TIM_PWM_Init+0x98>
 8005f6c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005f70:	428a      	cmp	r2, r1
 8005f72:	d011      	beq.n	8005f98 <HAL_TIM_PWM_Init+0x98>
 8005f74:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005f78:	428a      	cmp	r2, r1
 8005f7a:	d00d      	beq.n	8005f98 <HAL_TIM_PWM_Init+0x98>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f7c:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f7e:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8005f80:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f86:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005f88:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f8a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005f8c:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f8e:	e010      	b.n	8005fb2 <HAL_TIM_PWM_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 8005f90:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005f96:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f98:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f9a:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f9c:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fa2:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fa8:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005faa:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005fac:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fae:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005fb0:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fb6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005fbe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005fc2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005fc6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fd2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005fd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005fda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005fde:	2000      	movs	r0, #0
}
 8005fe0:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8005fe2:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fe4:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fe6:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005fec:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ff2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ff4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ff8:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005ffa:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ffc:	68e3      	ldr	r3, [r4, #12]
 8005ffe:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006000:	6863      	ldr	r3, [r4, #4]
 8006002:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006004:	6963      	ldr	r3, [r4, #20]
 8006006:	6313      	str	r3, [r2, #48]	; 0x30
 8006008:	e7d3      	b.n	8005fb2 <HAL_TIM_PWM_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 800600a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800600e:	f7ff ff75 	bl	8005efc <HAL_TIM_PWM_MspInit>
 8006012:	e780      	b.n	8005f16 <HAL_TIM_PWM_Init+0x16>
    return HAL_ERROR;
 8006014:	2001      	movs	r0, #1
}
 8006016:	4770      	bx	lr
 8006018:	40010000 	.word	0x40010000

0800601c <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 800601c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006020:	2b01      	cmp	r3, #1
 8006022:	f000 80d7 	beq.w	80061d4 <HAL_TIM_PWM_ConfigChannel+0x1b8>
 8006026:	2301      	movs	r3, #1
{
 8006028:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 800602a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800602e:	2a0c      	cmp	r2, #12
 8006030:	d835      	bhi.n	800609e <HAL_TIM_PWM_ConfigChannel+0x82>
 8006032:	e8df f002 	tbb	[pc, r2]
 8006036:	3407      	.short	0x3407
 8006038:	346e3434 	.word	0x346e3434
 800603c:	349f3434 	.word	0x349f3434
 8006040:	3434      	.short	0x3434
 8006042:	3a          	.byte	0x3a
 8006043:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006044:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006046:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800604a:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800604c:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800604e:	4e7c      	ldr	r6, [pc, #496]	; (8006240 <HAL_TIM_PWM_ConfigChannel+0x224>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006050:	f025 0501 	bic.w	r5, r5, #1
 8006054:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8006056:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006058:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800605a:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 800605c:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006060:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006064:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 8006066:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmrx |= OC_Config->OCMode;
 800606a:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800606e:	f000 80b3 	beq.w	80061d8 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 8006072:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006076:	42b3      	cmp	r3, r6
 8006078:	f000 80ae 	beq.w	80061d8 <HAL_TIM_PWM_ConfigChannel+0x1bc>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800607c:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800607e:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006080:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8006082:	635e      	str	r6, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006084:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006086:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006088:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800608a:	f044 0408 	orr.w	r4, r4, #8
 800608e:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006090:	6999      	ldr	r1, [r3, #24]
 8006092:	f021 0104 	bic.w	r1, r1, #4
 8006096:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006098:	699a      	ldr	r2, [r3, #24]
 800609a:	432a      	orrs	r2, r5
 800609c:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800609e:	2300      	movs	r3, #0
 80060a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80060a4:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80060a6:	4618      	mov	r0, r3
}
 80060a8:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060aa:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060ac:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060b0:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060b2:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060b4:	4e62      	ldr	r6, [pc, #392]	; (8006240 <HAL_TIM_PWM_ConfigChannel+0x224>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060b6:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 80060ba:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80060bc:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80060be:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80060c0:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 80060c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060c6:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ca:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060cc:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060d0:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060d4:	f000 809d 	beq.w	8006212 <HAL_TIM_PWM_ConfigChannel+0x1f6>
 80060d8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80060dc:	42b3      	cmp	r3, r6
 80060de:	f000 8098 	beq.w	8006212 <HAL_TIM_PWM_ConfigChannel+0x1f6>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060e2:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80060e4:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80060e6:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80060e8:	641e      	str	r6, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ea:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060ec:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060ee:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060f0:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80060f4:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060f6:	69d9      	ldr	r1, [r3, #28]
 80060f8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80060fc:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060fe:	69da      	ldr	r2, [r3, #28]
 8006100:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8006104:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8006106:	2300      	movs	r3, #0
 8006108:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800610c:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800610e:	4618      	mov	r0, r3
}
 8006110:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006112:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006114:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006116:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006118:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800611a:	f8df c124 	ldr.w	ip, [pc, #292]	; 8006240 <HAL_TIM_PWM_ConfigChannel+0x224>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800611e:	f025 0510 	bic.w	r5, r5, #16
 8006122:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8006124:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006126:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8006128:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800612a:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800612e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006132:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006134:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006138:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800613c:	d059      	beq.n	80061f2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800613e:	4f41      	ldr	r7, [pc, #260]	; (8006244 <HAL_TIM_PWM_ConfigChannel+0x228>)
 8006140:	42bb      	cmp	r3, r7
 8006142:	d056      	beq.n	80061f2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
  TIMx->CCR2 = OC_Config->Pulse;
 8006144:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006146:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006148:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800614a:	639e      	str	r6, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800614c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800614e:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006150:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006152:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8006156:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006158:	6999      	ldr	r1, [r3, #24]
 800615a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800615e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006160:	699a      	ldr	r2, [r3, #24]
 8006162:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8006166:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8006168:	2300      	movs	r3, #0
 800616a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800616e:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8006170:	4618      	mov	r0, r3
}
 8006172:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006174:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006176:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006178:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800617a:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800617c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8006240 <HAL_TIM_PWM_ConfigChannel+0x224>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006180:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8006184:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8006186:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006188:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800618a:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 800618c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006190:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006194:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006196:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800619a:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800619e:	d03e      	beq.n	800621e <HAL_TIM_PWM_ConfigChannel+0x202>
 80061a0:	4f28      	ldr	r7, [pc, #160]	; (8006244 <HAL_TIM_PWM_ConfigChannel+0x228>)
 80061a2:	42bb      	cmp	r3, r7
 80061a4:	d03b      	beq.n	800621e <HAL_TIM_PWM_ConfigChannel+0x202>
  TIMx->CCR3 = OC_Config->Pulse;
 80061a6:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80061a8:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80061aa:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80061ac:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80061ae:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061b0:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061b2:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061b4:	f044 0408 	orr.w	r4, r4, #8
 80061b8:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061ba:	69d9      	ldr	r1, [r3, #28]
 80061bc:	f021 0104 	bic.w	r1, r1, #4
 80061c0:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061c2:	69da      	ldr	r2, [r3, #28]
 80061c4:	432a      	orrs	r2, r5
 80061c6:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80061c8:	2300      	movs	r3, #0
 80061ca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80061ce:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80061d0:	4618      	mov	r0, r3
}
 80061d2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80061d4:	2002      	movs	r0, #2
}
 80061d6:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 80061d8:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80061da:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 80061de:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 80061e0:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061e4:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80061e8:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 80061ea:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80061ee:	4335      	orrs	r5, r6
 80061f0:	e744      	b.n	800607c <HAL_TIM_PWM_ConfigChannel+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061f2:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80061f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061f8:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061fc:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006200:	f425 6c40 	bic.w	ip, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006204:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8006208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800620c:	ea4c 0585 	orr.w	r5, ip, r5, lsl #2
 8006210:	e798      	b.n	8006144 <HAL_TIM_PWM_ConfigChannel+0x128>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006212:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006214:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006218:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 800621c:	e761      	b.n	80060e2 <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800621e:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8006220:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006224:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006228:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800622c:	f425 5c40 	bic.w	ip, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006230:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8006234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006238:	ea4c 1505 	orr.w	r5, ip, r5, lsl #4
 800623c:	e7b3      	b.n	80061a6 <HAL_TIM_PWM_ConfigChannel+0x18a>
 800623e:	bf00      	nop
 8006240:	40010000 	.word	0x40010000
 8006244:	40010400 	.word	0x40010400

08006248 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006248:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800624c:	2b01      	cmp	r3, #1
 800624e:	d074      	beq.n	800633a <HAL_TIM_ConfigClockSource+0xf2>
{
 8006250:	b4f0      	push	{r4, r5, r6, r7}
  tmpsmcr = htim->Instance->SMCR;
 8006252:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 8006254:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8006256:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8006258:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800625c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006260:	6894      	ldr	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8006262:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006264:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8006268:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 800626c:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 800626e:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8006270:	d065      	beq.n	800633e <HAL_TIM_ConfigClockSource+0xf6>
 8006272:	d831      	bhi.n	80062d8 <HAL_TIM_ConfigClockSource+0x90>
 8006274:	2b40      	cmp	r3, #64	; 0x40
 8006276:	d048      	beq.n	800630a <HAL_TIM_ConfigClockSource+0xc2>
 8006278:	d921      	bls.n	80062be <HAL_TIM_ConfigClockSource+0x76>
 800627a:	2b50      	cmp	r3, #80	; 0x50
 800627c:	d116      	bne.n	80062ac <HAL_TIM_ConfigClockSource+0x64>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800627e:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006280:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006282:	684c      	ldr	r4, [r1, #4]
 8006284:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006286:	f026 0601 	bic.w	r6, r6, #1
 800628a:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800628c:	6993      	ldr	r3, [r2, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800628e:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006292:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006296:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 800629a:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800629c:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 800629e:	6211      	str	r1, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062a0:	6893      	ldr	r3, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062a6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062aa:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 80062ac:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80062ae:	2201      	movs	r2, #1
 80062b0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80062b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80062b8:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80062ba:	4618      	mov	r0, r3
}
 80062bc:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80062be:	2b20      	cmp	r3, #32
 80062c0:	d002      	beq.n	80062c8 <HAL_TIM_ConfigClockSource+0x80>
 80062c2:	d91e      	bls.n	8006302 <HAL_TIM_ConfigClockSource+0xba>
 80062c4:	2b30      	cmp	r3, #48	; 0x30
 80062c6:	d1f1      	bne.n	80062ac <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 80062c8:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80062ca:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062ce:	430b      	orrs	r3, r1
 80062d0:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80062d4:	6093      	str	r3, [r2, #8]
}
 80062d6:	e7e9      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 80062d8:	2b70      	cmp	r3, #112	; 0x70
 80062da:	d049      	beq.n	8006370 <HAL_TIM_ConfigClockSource+0x128>
 80062dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062e0:	d1e4      	bne.n	80062ac <HAL_TIM_ConfigClockSource+0x64>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062e2:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 80062e6:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80062e8:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062ea:	432b      	orrs	r3, r5
 80062ec:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062f0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062f4:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062f6:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062f8:	6893      	ldr	r3, [r2, #8]
 80062fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062fe:	6093      	str	r3, [r2, #8]
      break;
 8006300:	e7d4      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8006302:	f033 0110 	bics.w	r1, r3, #16
 8006306:	d1d1      	bne.n	80062ac <HAL_TIM_ConfigClockSource+0x64>
 8006308:	e7de      	b.n	80062c8 <HAL_TIM_ConfigClockSource+0x80>
  tmpccer = TIMx->CCER;
 800630a:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800630c:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800630e:	684c      	ldr	r4, [r1, #4]
 8006310:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006312:	f026 0601 	bic.w	r6, r6, #1
 8006316:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006318:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800631a:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800631e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006322:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8006326:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8006328:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 800632a:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 800632c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800632e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006332:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8006336:	6093      	str	r3, [r2, #8]
}
 8006338:	e7b8      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x64>
  __HAL_LOCK(htim);
 800633a:	2002      	movs	r0, #2
}
 800633c:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800633e:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006340:	684d      	ldr	r5, [r1, #4]
 8006342:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006344:	f024 0410 	bic.w	r4, r4, #16
 8006348:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800634a:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 800634c:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800634e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006352:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006356:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800635a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800635e:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8006360:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8006362:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006368:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800636c:	6093      	str	r3, [r2, #8]
}
 800636e:	e79d      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006370:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8006374:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8006376:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006378:	432b      	orrs	r3, r5
 800637a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800637e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006382:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8006384:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8006386:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006388:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800638c:	6093      	str	r3, [r2, #8]
      break;
 800638e:	e78d      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x64>

08006390 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8006390:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8006394:	2a01      	cmp	r2, #1
 8006396:	d049      	beq.n	800642c <HAL_TIM_SlaveConfigSynchro+0x9c>
 8006398:	4603      	mov	r3, r0
{
 800639a:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 800639c:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 800639e:	681c      	ldr	r4, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);
 80063a4:	2001      	movs	r0, #1
 80063a6:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80063aa:	e9d1 6500 	ldrd	r6, r5, [r1]
  tmpsmcr = htim->Instance->SMCR;
 80063ae:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80063b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80063b4:	432a      	orrs	r2, r5
  tmpsmcr &= ~TIM_SMCR_SMS;
 80063b6:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80063ba:	4332      	orrs	r2, r6
  switch (sSlaveConfig->InputTrigger)
 80063bc:	2d60      	cmp	r5, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 80063be:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 80063c0:	d04d      	beq.n	800645e <HAL_TIM_SlaveConfigSynchro+0xce>
 80063c2:	d825      	bhi.n	8006410 <HAL_TIM_SlaveConfigSynchro+0x80>
 80063c4:	2d40      	cmp	r5, #64	; 0x40
 80063c6:	d033      	beq.n	8006430 <HAL_TIM_SlaveConfigSynchro+0xa0>
 80063c8:	2d50      	cmp	r5, #80	; 0x50
 80063ca:	d110      	bne.n	80063ee <HAL_TIM_SlaveConfigSynchro+0x5e>
  tmpccer = TIMx->CCER;
 80063cc:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ce:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063d0:	6888      	ldr	r0, [r1, #8]
 80063d2:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063d4:	f026 0601 	bic.w	r6, r6, #1
 80063d8:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063da:	69a2      	ldr	r2, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063dc:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063e0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 80063e4:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063e6:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80063ea:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 80063ec:	6221      	str	r1, [r4, #32]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80063ee:	68e2      	ldr	r2, [r4, #12]
 80063f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063f4:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80063f6:	68e2      	ldr	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 80063f8:	2501      	movs	r5, #1
  __HAL_UNLOCK(htim);
 80063fa:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80063fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006400:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8006402:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006406:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
  return HAL_OK;
 800640a:	4608      	mov	r0, r1
}
 800640c:	bcf0      	pop	{r4, r5, r6, r7}
 800640e:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8006410:	2d70      	cmp	r5, #112	; 0x70
 8006412:	d1ec      	bne.n	80063ee <HAL_TIM_SlaveConfigSynchro+0x5e>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006414:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
 8006418:	6908      	ldr	r0, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 800641a:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800641c:	432a      	orrs	r2, r5
 800641e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006422:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006426:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8006428:	60a2      	str	r2, [r4, #8]
 800642a:	e7e0      	b.n	80063ee <HAL_TIM_SlaveConfigSynchro+0x5e>
  __HAL_LOCK(htim);
 800642c:	2002      	movs	r0, #2
}
 800642e:	4770      	bx	lr
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006430:	2e05      	cmp	r6, #5
 8006432:	d00d      	beq.n	8006450 <HAL_TIM_SlaveConfigSynchro+0xc0>
      tmpccer = htim->Instance->CCER;
 8006434:	6a25      	ldr	r5, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006436:	6a20      	ldr	r0, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006438:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800643a:	f020 0001 	bic.w	r0, r0, #1
 800643e:	6220      	str	r0, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006440:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006442:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006446:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800644a:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 800644c:	6225      	str	r5, [r4, #32]
      break;
 800644e:	e7ce      	b.n	80063ee <HAL_TIM_SlaveConfigSynchro+0x5e>
    __HAL_UNLOCK(htim);
 8006450:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8006452:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800645a:	bcf0      	pop	{r4, r5, r6, r7}
 800645c:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800645e:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006460:	688d      	ldr	r5, [r1, #8]
 8006462:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006464:	f020 0010 	bic.w	r0, r0, #16
 8006468:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800646a:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 800646c:	6a22      	ldr	r2, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800646e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006472:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006476:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800647a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800647e:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8006480:	6222      	str	r2, [r4, #32]
 8006482:	e7b4      	b.n	80063ee <HAL_TIM_SlaveConfigSynchro+0x5e>

08006484 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006484:	4a2f      	ldr	r2, [pc, #188]	; (8006544 <TIM_Base_SetConfig+0xc0>)
  tmpcr1 = TIMx->CR1;
 8006486:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006488:	4290      	cmp	r0, r2
{
 800648a:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800648c:	d043      	beq.n	8006516 <TIM_Base_SetConfig+0x92>
 800648e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006492:	d034      	beq.n	80064fe <TIM_Base_SetConfig+0x7a>
 8006494:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006498:	4290      	cmp	r0, r2
 800649a:	d030      	beq.n	80064fe <TIM_Base_SetConfig+0x7a>
 800649c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064a0:	4290      	cmp	r0, r2
 80064a2:	d02c      	beq.n	80064fe <TIM_Base_SetConfig+0x7a>
 80064a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064a8:	4290      	cmp	r0, r2
 80064aa:	d028      	beq.n	80064fe <TIM_Base_SetConfig+0x7a>
 80064ac:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80064b0:	4290      	cmp	r0, r2
 80064b2:	d030      	beq.n	8006516 <TIM_Base_SetConfig+0x92>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064b4:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80064b8:	4290      	cmp	r0, r2
 80064ba:	d024      	beq.n	8006506 <TIM_Base_SetConfig+0x82>
 80064bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064c0:	4290      	cmp	r0, r2
 80064c2:	d020      	beq.n	8006506 <TIM_Base_SetConfig+0x82>
 80064c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064c8:	4290      	cmp	r0, r2
 80064ca:	d01c      	beq.n	8006506 <TIM_Base_SetConfig+0x82>
 80064cc:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80064d0:	4290      	cmp	r0, r2
 80064d2:	d018      	beq.n	8006506 <TIM_Base_SetConfig+0x82>
 80064d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064d8:	4290      	cmp	r0, r2
 80064da:	d014      	beq.n	8006506 <TIM_Base_SetConfig+0x82>
 80064dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064e0:	4290      	cmp	r0, r2
 80064e2:	d010      	beq.n	8006506 <TIM_Base_SetConfig+0x82>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064e4:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064e6:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 80064e8:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ee:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80064f0:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 80064f2:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064f4:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80064f6:	6282      	str	r2, [r0, #40]	; 0x28
}
 80064f8:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 80064fa:	6143      	str	r3, [r0, #20]
}
 80064fc:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80064fe:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006504:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006506:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006508:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800650a:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 800650c:	680a      	ldr	r2, [r1, #0]
    tmpcr1 &= ~TIM_CR1_CKD;
 800650e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006512:	4333      	orrs	r3, r6
 8006514:	e7e9      	b.n	80064ea <TIM_Base_SetConfig+0x66>
    tmpcr1 |= Structure->CounterMode;
 8006516:	684d      	ldr	r5, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006518:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800651a:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800651c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006520:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8006522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006526:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006528:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800652c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800652e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006530:	688b      	ldr	r3, [r1, #8]
 8006532:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006534:	680b      	ldr	r3, [r1, #0]
 8006536:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006538:	690b      	ldr	r3, [r1, #16]
 800653a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800653c:	2301      	movs	r3, #1
}
 800653e:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 8006540:	6143      	str	r3, [r0, #20]
}
 8006542:	4770      	bx	lr
 8006544:	40010000 	.word	0x40010000

08006548 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006548:	6a03      	ldr	r3, [r0, #32]
 800654a:	f023 0310 	bic.w	r3, r3, #16
 800654e:	6203      	str	r3, [r0, #32]
{
 8006550:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer = TIMx->CCER;
 8006552:	6a03      	ldr	r3, [r0, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006554:	4c13      	ldr	r4, [pc, #76]	; (80065a4 <TIM_OC2_SetConfig+0x5c>)
  tmpcr2 =  TIMx->CR2;
 8006556:	6847      	ldr	r7, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006558:	6982      	ldr	r2, [r0, #24]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800655a:	688e      	ldr	r6, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800655c:	680d      	ldr	r5, [r1, #0]
  tmpccer &= ~TIM_CCER_CC2P;
 800655e:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006562:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006566:	42a0      	cmp	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006568:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800656c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006570:	d009      	beq.n	8006586 <TIM_OC2_SetConfig+0x3e>
 8006572:	4d0d      	ldr	r5, [pc, #52]	; (80065a8 <TIM_OC2_SetConfig+0x60>)
 8006574:	42a8      	cmp	r0, r5
 8006576:	d006      	beq.n	8006586 <TIM_OC2_SetConfig+0x3e>
  TIMx->CCR2 = OC_Config->Pulse;
 8006578:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800657a:	6047      	str	r7, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800657c:	6182      	str	r2, [r0, #24]
}
 800657e:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8006580:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006582:	6203      	str	r3, [r0, #32]
}
 8006584:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006586:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8006588:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800658c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006590:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006594:	f427 6740 	bic.w	r7, r7, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006598:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800659a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800659e:	ea47 0784 	orr.w	r7, r7, r4, lsl #2
 80065a2:	e7e9      	b.n	8006578 <TIM_OC2_SetConfig+0x30>
 80065a4:	40010000 	.word	0x40010000
 80065a8:	40010400 	.word	0x40010400

080065ac <TIM_TI1_SetConfig>:
{
 80065ac:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065ae:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80065b0:	4e1b      	ldr	r6, [pc, #108]	; (8006620 <TIM_TI1_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065b2:	f024 0401 	bic.w	r4, r4, #1
 80065b6:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80065b8:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 80065ba:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80065bc:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80065be:	d01d      	beq.n	80065fc <TIM_TI1_SetConfig+0x50>
 80065c0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80065c4:	d01a      	beq.n	80065fc <TIM_TI1_SetConfig+0x50>
 80065c6:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80065ca:	42b0      	cmp	r0, r6
 80065cc:	d016      	beq.n	80065fc <TIM_TI1_SetConfig+0x50>
 80065ce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80065d2:	42b0      	cmp	r0, r6
 80065d4:	d012      	beq.n	80065fc <TIM_TI1_SetConfig+0x50>
 80065d6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80065da:	42b0      	cmp	r0, r6
 80065dc:	d00e      	beq.n	80065fc <TIM_TI1_SetConfig+0x50>
 80065de:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80065e2:	42b0      	cmp	r0, r6
 80065e4:	d00a      	beq.n	80065fc <TIM_TI1_SetConfig+0x50>
 80065e6:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 80065ea:	42b0      	cmp	r0, r6
 80065ec:	d006      	beq.n	80065fc <TIM_TI1_SetConfig+0x50>
 80065ee:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80065f2:	42b0      	cmp	r0, r6
 80065f4:	d002      	beq.n	80065fc <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80065f6:	f044 0201 	orr.w	r2, r4, #1
 80065fa:	e002      	b.n	8006602 <TIM_TI1_SetConfig+0x56>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80065fc:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8006600:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006602:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006604:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006608:	b2db      	uxtb	r3, r3
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800660a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800660e:	f001 010a 	and.w	r1, r1, #10
 8006612:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006614:	4313      	orrs	r3, r2
  TIMx->CCMR1 = tmpccmr1;
 8006616:	6183      	str	r3, [r0, #24]
}
 8006618:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 800661a:	6201      	str	r1, [r0, #32]
}
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	40010000 	.word	0x40010000

08006624 <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop

08006628 <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 8006628:	2800      	cmp	r0, #0
 800662a:	d05f      	beq.n	80066ec <HAL_TIMEx_HallSensor_Init+0xc4>
{
 800662c:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800662e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8006632:	b088      	sub	sp, #32
 8006634:	460d      	mov	r5, r1
 8006636:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006638:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800663c:	2b00      	cmp	r3, #0
 800663e:	d050      	beq.n	80066e2 <HAL_TIMEx_HallSensor_Init+0xba>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006640:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8006642:	2302      	movs	r3, #2
 8006644:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006648:	f851 0b04 	ldr.w	r0, [r1], #4
 800664c:	f7ff ff1a 	bl	8006484 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8006650:	68ab      	ldr	r3, [r5, #8]
 8006652:	6829      	ldr	r1, [r5, #0]
 8006654:	6820      	ldr	r0, [r4, #0]
 8006656:	2203      	movs	r2, #3
 8006658:	f7ff ffa8 	bl	80065ac <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800665c:	6820      	ldr	r0, [r4, #0]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800665e:	686e      	ldr	r6, [r5, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006660:	6982      	ldr	r2, [r0, #24]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8006662:	68e9      	ldr	r1, [r5, #12]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006664:	f022 020c 	bic.w	r2, r2, #12
 8006668:	6182      	str	r2, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800666a:	6983      	ldr	r3, [r0, #24]
 800666c:	4333      	orrs	r3, r6
 800666e:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8006670:	6843      	ldr	r3, [r0, #4]
 8006672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006676:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006678:	6883      	ldr	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800667a:	9102      	str	r1, [sp, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800667c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006680:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8006682:	6883      	ldr	r3, [r0, #8]
 8006684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006688:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800668a:	6883      	ldr	r3, [r0, #8]
 800668c:	f023 0307 	bic.w	r3, r3, #7
 8006690:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8006692:	6883      	ldr	r3, [r0, #8]
 8006694:	f043 0304 	orr.w	r3, r3, #4
 8006698:	6083      	str	r3, [r0, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800669a:	2500      	movs	r5, #0
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800669c:	2370      	movs	r3, #112	; 0x70
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800669e:	a901      	add	r1, sp, #4
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80066a0:	9301      	str	r3, [sp, #4]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80066a2:	e9cd 5505 	strd	r5, r5, [sp, #20]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80066a6:	e9cd 5503 	strd	r5, r5, [sp, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80066aa:	9507      	str	r5, [sp, #28]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80066ac:	f7ff ff4c 	bl	8006548 <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80066b0:	6822      	ldr	r2, [r4, #0]
 80066b2:	6853      	ldr	r3, [r2, #4]
 80066b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b8:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80066ba:	6851      	ldr	r1, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066bc:	2301      	movs	r3, #1
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80066be:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  return HAL_OK;
 80066c2:	4628      	mov	r0, r5
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80066c4:	6051      	str	r1, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066c6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066ca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066ce:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 80066da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80066de:	b008      	add	sp, #32
 80066e0:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80066e2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 80066e6:	f7ff ff9d 	bl	8006624 <HAL_TIMEx_HallSensor_MspInit>
 80066ea:	e7a9      	b.n	8006640 <HAL_TIMEx_HallSensor_Init+0x18>
    return HAL_ERROR;
 80066ec:	2001      	movs	r0, #1
}
 80066ee:	4770      	bx	lr

080066f0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d036      	beq.n	8006766 <HAL_TIMEx_MasterConfigSynchronization+0x76>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066f8:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80066fa:	2202      	movs	r2, #2
{
 80066fc:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80066fe:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8006702:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006704:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006706:	4d19      	ldr	r5, [pc, #100]	; (800676c <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8006708:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800670c:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800670e:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 8006710:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 8006712:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006714:	d019      	beq.n	800674a <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8006716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800671a:	d016      	beq.n	800674a <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 800671c:	4a14      	ldr	r2, [pc, #80]	; (8006770 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d013      	beq.n	800674a <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8006722:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006726:	4293      	cmp	r3, r2
 8006728:	d00f      	beq.n	800674a <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 800672a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800672e:	4293      	cmp	r3, r2
 8006730:	d00b      	beq.n	800674a <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8006732:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006736:	4293      	cmp	r3, r2
 8006738:	d007      	beq.n	800674a <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 800673a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800673e:	4293      	cmp	r3, r2
 8006740:	d003      	beq.n	800674a <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8006742:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006746:	4293      	cmp	r3, r2
 8006748:	d104      	bne.n	8006754 <HAL_TIMEx_MasterConfigSynchronization+0x64>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800674a:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800674c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006750:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006752:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8006754:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006756:	2201      	movs	r2, #1
 8006758:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800675c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8006760:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8006762:	4618      	mov	r0, r3
}
 8006764:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006766:	2002      	movs	r0, #2
}
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	40010000 	.word	0x40010000
 8006770:	40000400 	.word	0x40000400

08006774 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006774:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006778:	2b01      	cmp	r3, #1
 800677a:	d022      	beq.n	80067c2 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
{
 800677c:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800677e:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8006782:	4604      	mov	r4, r0
 8006784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006788:	e9d1 2000 	ldrd	r2, r0, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800678c:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800678e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006792:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006794:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006798:	e9d1 5004 	ldrd	r5, r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800679c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800679e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067a2:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80067a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80067a8:	69c9      	ldr	r1, [r1, #28]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80067aa:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80067ac:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80067ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067b2:	430b      	orrs	r3, r1

  __HAL_UNLOCK(htim);
 80067b4:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80067b6:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80067b8:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c

  return HAL_OK;
 80067bc:	4608      	mov	r0, r1
}
 80067be:	bc30      	pop	{r4, r5}
 80067c0:	4770      	bx	lr
  __HAL_LOCK(htim);
 80067c2:	2002      	movs	r0, #2
}
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop

080067c8 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067c8:	2800      	cmp	r0, #0
 80067ca:	f000 8090 	beq.w	80068ee <HAL_UART_Init+0x126>
{
 80067ce:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80067d0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80067d4:	4604      	mov	r4, r0
 80067d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 8082 	beq.w	80068e4 <HAL_UART_Init+0x11c>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80067e0:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067e2:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 80067e4:	2224      	movs	r2, #36	; 0x24
 80067e6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80067ea:	68d8      	ldr	r0, [r3, #12]
 80067ec:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067f0:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 80067f4:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067f6:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067f8:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067fa:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80067fe:	4329      	orrs	r1, r5
 8006800:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8006802:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006804:	6965      	ldr	r5, [r4, #20]
 8006806:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 8006808:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800680c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 800680e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006812:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8006814:	430a      	orrs	r2, r1
 8006816:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006818:	695a      	ldr	r2, [r3, #20]
 800681a:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800681c:	4935      	ldr	r1, [pc, #212]	; (80068f4 <HAL_UART_Init+0x12c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800681e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006822:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006824:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006826:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006828:	d035      	beq.n	8006896 <HAL_UART_Init+0xce>
 800682a:	4a33      	ldr	r2, [pc, #204]	; (80068f8 <HAL_UART_Init+0x130>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d032      	beq.n	8006896 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006830:	f7ff f854 	bl	80058dc <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006834:	69e3      	ldr	r3, [r4, #28]
 8006836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800683a:	d032      	beq.n	80068a2 <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800683c:	6863      	ldr	r3, [r4, #4]
 800683e:	4e2f      	ldr	r6, [pc, #188]	; (80068fc <HAL_UART_Init+0x134>)
 8006840:	2119      	movs	r1, #25
 8006842:	009a      	lsls	r2, r3, #2
 8006844:	fba0 0101 	umull	r0, r1, r0, r1
 8006848:	0f9b      	lsrs	r3, r3, #30
 800684a:	f7fa fa3d 	bl	8000cc8 <__aeabi_uldivmod>
 800684e:	fba6 2500 	umull	r2, r5, r6, r0
 8006852:	096d      	lsrs	r5, r5, #5
 8006854:	2164      	movs	r1, #100	; 0x64
 8006856:	fb01 0215 	mls	r2, r1, r5, r0
 800685a:	0112      	lsls	r2, r2, #4
 800685c:	3232      	adds	r2, #50	; 0x32
 800685e:	6823      	ldr	r3, [r4, #0]
 8006860:	fba6 1202 	umull	r1, r2, r6, r2
 8006864:	012d      	lsls	r5, r5, #4
 8006866:	eb05 1252 	add.w	r2, r5, r2, lsr #5
 800686a:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800686c:	691a      	ldr	r2, [r3, #16]
 800686e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006872:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006874:	695a      	ldr	r2, [r3, #20]
 8006876:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800687a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800687c:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800687e:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8006880:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8006882:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006886:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006888:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800688a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800688e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8006892:	4628      	mov	r0, r5
}
 8006894:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8006896:	f7ff f831 	bl	80058fc <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800689a:	69e3      	ldr	r3, [r4, #28]
 800689c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068a0:	d1cc      	bne.n	800683c <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068a2:	6862      	ldr	r2, [r4, #4]
 80068a4:	4e15      	ldr	r6, [pc, #84]	; (80068fc <HAL_UART_Init+0x134>)
 80068a6:	1892      	adds	r2, r2, r2
 80068a8:	f04f 0300 	mov.w	r3, #0
 80068ac:	f04f 0119 	mov.w	r1, #25
 80068b0:	415b      	adcs	r3, r3
 80068b2:	fba0 0101 	umull	r0, r1, r0, r1
 80068b6:	f7fa fa07 	bl	8000cc8 <__aeabi_uldivmod>
 80068ba:	fba6 2100 	umull	r2, r1, r6, r0
 80068be:	094d      	lsrs	r5, r1, #5
 80068c0:	2164      	movs	r1, #100	; 0x64
 80068c2:	fb01 0215 	mls	r2, r1, r5, r0
 80068c6:	00d2      	lsls	r2, r2, #3
 80068c8:	3232      	adds	r2, #50	; 0x32
 80068ca:	fba6 1202 	umull	r1, r2, r6, r2
 80068ce:	f3c2 1142 	ubfx	r1, r2, #5, #3
 80068d2:	0912      	lsrs	r2, r2, #4
 80068d4:	6823      	ldr	r3, [r4, #0]
 80068d6:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 80068da:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80068de:	440a      	add	r2, r1
 80068e0:	609a      	str	r2, [r3, #8]
 80068e2:	e7c3      	b.n	800686c <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 80068e4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80068e8:	f7fd fb6e 	bl	8003fc8 <HAL_UART_MspInit>
 80068ec:	e778      	b.n	80067e0 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 80068ee:	2001      	movs	r0, #1
}
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	40011000 	.word	0x40011000
 80068f8:	40011400 	.word	0x40011400
 80068fc:	51eb851f 	.word	0x51eb851f

08006900 <HAL_UART_Transmit>:
{
 8006900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006904:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8006906:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 800690a:	2820      	cmp	r0, #32
 800690c:	d168      	bne.n	80069e0 <HAL_UART_Transmit+0xe0>
    if ((pData == NULL) || (Size == 0U))
 800690e:	4688      	mov	r8, r1
 8006910:	2900      	cmp	r1, #0
 8006912:	d040      	beq.n	8006996 <HAL_UART_Transmit+0x96>
 8006914:	4617      	mov	r7, r2
 8006916:	2a00      	cmp	r2, #0
 8006918:	d03d      	beq.n	8006996 <HAL_UART_Transmit+0x96>
 800691a:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 800691c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006920:	2b01      	cmp	r3, #1
 8006922:	d05d      	beq.n	80069e0 <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006924:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8006926:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006928:	f04f 0900 	mov.w	r9, #0
 800692c:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
    __HAL_LOCK(huart);
 8006930:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006934:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8006938:	f7fe faba 	bl	8004eb0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800693c:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 800693e:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8006944:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8006946:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006948:	d04d      	beq.n	80069e6 <HAL_UART_Transmit+0xe6>
    while (huart->TxXferCount > 0U)
 800694a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 800694c:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800694e:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8006950:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8006954:	2b00      	cmp	r3, #0
 8006956:	d058      	beq.n	8006a0a <HAL_UART_Transmit+0x10a>
 8006958:	6822      	ldr	r2, [r4, #0]
 800695a:	1c69      	adds	r1, r5, #1
 800695c:	d11e      	bne.n	800699c <HAL_UART_Transmit+0x9c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800695e:	6813      	ldr	r3, [r2, #0]
 8006960:	061b      	lsls	r3, r3, #24
 8006962:	d5fc      	bpl.n	800695e <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 8006964:	f1b8 0f00 	cmp.w	r8, #0
 8006968:	d035      	beq.n	80069d6 <HAL_UART_Transmit+0xd6>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800696a:	f818 3b01 	ldrb.w	r3, [r8], #1
 800696e:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8006970:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006972:	3b01      	subs	r3, #1
 8006974:	b29b      	uxth	r3, r3
 8006976:	84e3      	strh	r3, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006978:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800697a:	b29b      	uxth	r3, r3
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1ec      	bne.n	800695a <HAL_UART_Transmit+0x5a>
 8006980:	1c68      	adds	r0, r5, #1
 8006982:	d136      	bne.n	80069f2 <HAL_UART_Transmit+0xf2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006984:	6813      	ldr	r3, [r2, #0]
 8006986:	0659      	lsls	r1, r3, #25
 8006988:	d5fc      	bpl.n	8006984 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 800698a:	2320      	movs	r3, #32
 800698c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8006990:	2000      	movs	r0, #0
}
 8006992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8006996:	2001      	movs	r0, #1
}
 8006998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800699c:	6813      	ldr	r3, [r2, #0]
 800699e:	061f      	lsls	r7, r3, #24
 80069a0:	d4e0      	bmi.n	8006964 <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80069a2:	b12d      	cbz	r5, 80069b0 <HAL_UART_Transmit+0xb0>
 80069a4:	f7fe fa84 	bl	8004eb0 <HAL_GetTick>
 80069a8:	1b80      	subs	r0, r0, r6
 80069aa:	4285      	cmp	r5, r0
 80069ac:	6822      	ldr	r2, [r4, #0]
 80069ae:	d2d4      	bcs.n	800695a <HAL_UART_Transmit+0x5a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069b0:	68d3      	ldr	r3, [r2, #12]
 80069b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069b6:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069b8:	6953      	ldr	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80069ba:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069bc:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 80069c0:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c2:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80069c4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 80069c8:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 80069cc:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      return HAL_TIMEOUT;
 80069d0:	2003      	movs	r0, #3
}
 80069d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069d6:	f839 3b02 	ldrh.w	r3, [r9], #2
 80069da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069de:	e7c6      	b.n	800696e <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 80069e0:	2002      	movs	r0, #2
}
 80069e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069e6:	6923      	ldr	r3, [r4, #16]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1ae      	bne.n	800694a <HAL_UART_Transmit+0x4a>
 80069ec:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 80069ee:	4698      	mov	r8, r3
 80069f0:	e7ab      	b.n	800694a <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069f2:	6813      	ldr	r3, [r2, #0]
 80069f4:	065b      	lsls	r3, r3, #25
 80069f6:	d4c8      	bmi.n	800698a <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80069f8:	2d00      	cmp	r5, #0
 80069fa:	d0d9      	beq.n	80069b0 <HAL_UART_Transmit+0xb0>
 80069fc:	f7fe fa58 	bl	8004eb0 <HAL_GetTick>
 8006a00:	1b80      	subs	r0, r0, r6
 8006a02:	4285      	cmp	r5, r0
 8006a04:	6822      	ldr	r2, [r4, #0]
 8006a06:	d2bb      	bcs.n	8006980 <HAL_UART_Transmit+0x80>
 8006a08:	e7d2      	b.n	80069b0 <HAL_UART_Transmit+0xb0>
 8006a0a:	6822      	ldr	r2, [r4, #0]
 8006a0c:	e7b8      	b.n	8006980 <HAL_UART_Transmit+0x80>
 8006a0e:	bf00      	nop

08006a10 <VBS_GetAvBusVoltage_d>:
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
__weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
  return ( pHandle->AvBusVoltage_d );
}
 8006a10:	88c0      	ldrh	r0, [r0, #6]
 8006a12:	4770      	bx	lr

08006a14 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8006a14:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 8006a16:	8840      	ldrh	r0, [r0, #2]
 8006a18:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 8006a1c:	0c00      	lsrs	r0, r0, #16
 8006a1e:	4770      	bx	lr

08006a20 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 8006a20:	b410      	push	{r4}
 8006a22:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8006a24:	8802      	ldrh	r2, [r0, #0]
 8006a26:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 8006a28:	fb03 f403 	mul.w	r4, r3, r3
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8006a2c:	fb02 f202 	mul.w	r2, r2, r2
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 8006a30:	fb01 4401 	mla	r4, r1, r1, r4
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8006a34:	42a2      	cmp	r2, r4
{
 8006a36:	b085      	sub	sp, #20
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8006a38:	d219      	bcs.n	8006a6e <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 8006a3a:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 8006a3e:	ebc2 6414 	rsb	r4, r2, r4, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 8006a42:	b2e4      	uxtb	r4, r4
 8006a44:	eb00 0044 	add.w	r0, r0, r4, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 8006a48:	8882      	ldrh	r2, [r0, #4]
 8006a4a:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8006a4e:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 8006a50:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8006a54:	bfbc      	itt	lt
 8006a56:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 8006a5a:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	bfbc      	itt	lt
 8006a60:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 8006a64:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8006a66:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8006a6a:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 8006a6e:	b289      	uxth	r1, r1
 8006a70:	2000      	movs	r0, #0
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	f361 000f 	bfi	r0, r1, #0, #16
 8006a78:	f363 401f 	bfi	r0, r3, #16, #16
}
 8006a7c:	b005      	add	sp, #20
 8006a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <DAC_SetChannelConfig>:
  */
__weak void DAC_SetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                              MC_Protocol_REG_t bVariable)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->bChannel_variable[bChannel] = bVariable;
 8006a84:	4401      	add	r1, r0
 8006a86:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
}
 8006a8a:	4770      	bx	lr

08006a8c <DAC_GetChannelConfig>:
  *         MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t DAC_GetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->bChannel_variable[bChannel]);
 8006a8c:	4401      	add	r1, r0
}
 8006a8e:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 8006a92:	4770      	bx	lr

08006a94 <DAC_SetUserChannelValue>:
  */
__weak void DAC_SetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber,
                              int16_t hValue)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->hUserValue[bUserChNumber] = hValue;
 8006a94:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8006a98:	864a      	strh	r2, [r1, #50]	; 0x32
}
 8006a9a:	4770      	bx	lr

08006a9c <DAC_GetUserChannelValue>:
  * @retval none.
  */
__weak int16_t DAC_GetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->hUserValue[bUserChNumber]);
 8006a9c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
}
 8006aa0:	f9b1 0032 	ldrsh.w	r0, [r1, #50]	; 0x32
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop

08006aa8 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 8006aac:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 8006aae:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 8006ab2:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 8006ab6:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8006aba:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
}
 8006abe:	4770      	bx	lr

08006ac0 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8006ac0:	b120      	cbz	r0, 8006acc <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8006ac2:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8006ac6:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8006ac8:	9b00      	ldr	r3, [sp, #0]
 8006aca:	60c3      	str	r3, [r0, #12]
  }
}
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop

08006ad0 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8006ad0:	b190      	cbz	r0, 8006af8 <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 8006ad2:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8006ad4:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 8006ad6:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8006ad8:	b151      	cbz	r1, 8006af0 <FCP_CalcCRC+0x20>
 8006ada:	1c82      	adds	r2, r0, #2
 8006adc:	3901      	subs	r1, #1
 8006ade:	fa52 f181 	uxtab	r1, r2, r1
 8006ae2:	3001      	adds	r0, #1
    {
      nSum += pFrame->Buffer[idx];
 8006ae4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8006ae8:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8006aea:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 8006aec:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8006aee:	d1f9      	bne.n	8006ae4 <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 8006af0:	eb03 2013 	add.w	r0, r3, r3, lsr #8
 8006af4:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  }

  return nCRC ;
}
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop

08006afc <ICS_GetPhaseCurrents>:
__weak void ICS_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  int32_t aux;
  uint16_t reg;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006afc:	6f02      	ldr	r2, [r0, #112]	; 0x70

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  /* Ia = (hPhaseAOffset)-(PHASE_A_ADC_CHANNEL vale)  */
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 8006afe:	4b20      	ldr	r3, [pc, #128]	; (8006b80 <ICS_GetPhaseCurrents+0x84>)
{
 8006b00:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006b02:	68d4      	ldr	r4, [r2, #12]
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 8006b04:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
  CLEAR_BIT(TIMx->CCER, Channels);
 8006b06:	6a22      	ldr	r2, [r4, #32]

  /* Saturation of Ia */
  if ( aux < -INT16_MAX )
 8006b08:	4d1e      	ldr	r5, [pc, #120]	; (8006b84 <ICS_GetPhaseCurrents+0x88>)
 8006b0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b0e:	6222      	str	r2, [r4, #32]
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 8006b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b12:	005b      	lsls	r3, r3, #1
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	1b9b      	subs	r3, r3, r6
  if ( aux < -INT16_MAX )
 8006b18:	42ab      	cmp	r3, r5
 8006b1a:	da18      	bge.n	8006b4e <ICS_GetPhaseCurrents+0x52>
  {
    pStator_Currents->a = -INT16_MAX;
 8006b1c:	800d      	strh	r5, [r1, #0]
 8006b1e:	f248 0201 	movw	r2, #32769	; 0x8001
  {
    pStator_Currents->a = ( int16_t )aux;
  }

  /* Ib = (hPhaseBOffset)-(PHASE_B_ADC_CHANNEL value) */
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 8006b22:	4b19      	ldr	r3, [pc, #100]	; (8006b88 <ICS_GetPhaseCurrents+0x8c>)
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 8006b24:	6e06      	ldr	r6, [r0, #96]	; 0x60
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 8006b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c

  /* Saturation of Ib */
  if ( aux < -INT16_MAX )
 8006b28:	4c16      	ldr	r4, [pc, #88]	; (8006b84 <ICS_GetPhaseCurrents+0x88>)
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 8006b2a:	005b      	lsls	r3, r3, #1
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	1b9b      	subs	r3, r3, r6
  if ( aux < -INT16_MAX )
 8006b30:	42a3      	cmp	r3, r4
 8006b32:	da15      	bge.n	8006b60 <ICS_GetPhaseCurrents+0x64>
  {
    pStator_Currents->b = -INT16_MAX;
 8006b34:	804c      	strh	r4, [r1, #2]
 8006b36:	f248 0301 	movw	r3, #32769	; 0x8001
    pStator_Currents->b = ( int16_t )aux;
  }

  pHandle->_Super.Ia = pStator_Currents->a;
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8006b3a:	4413      	add	r3, r2
 8006b3c:	425b      	negs	r3, r3
  pHandle->_Super.Ia = pStator_Currents->a;
 8006b3e:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
  pHandle->_Super.Ib = pStator_Currents->b;
 8006b42:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8006b46:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c

}
 8006b4a:	bc70      	pop	{r4, r5, r6}
 8006b4c:	4770      	bx	lr
  else  if ( aux > INT16_MAX )
 8006b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b52:	db11      	blt.n	8006b78 <ICS_GetPhaseCurrents+0x7c>
    pStator_Currents->a = INT16_MAX;
 8006b54:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006b58:	461a      	mov	r2, r3
 8006b5a:	800b      	strh	r3, [r1, #0]
 8006b5c:	461d      	mov	r5, r3
 8006b5e:	e7e0      	b.n	8006b22 <ICS_GetPhaseCurrents+0x26>
  else  if ( aux > INT16_MAX )
 8006b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b64:	db04      	blt.n	8006b70 <ICS_GetPhaseCurrents+0x74>
    pStator_Currents->b = INT16_MAX;
 8006b66:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8006b6a:	4623      	mov	r3, r4
 8006b6c:	804c      	strh	r4, [r1, #2]
 8006b6e:	e7e4      	b.n	8006b3a <ICS_GetPhaseCurrents+0x3e>
    pStator_Currents->b = ( int16_t )aux;
 8006b70:	b21c      	sxth	r4, r3
 8006b72:	804c      	strh	r4, [r1, #2]
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	e7e0      	b.n	8006b3a <ICS_GetPhaseCurrents+0x3e>
    pStator_Currents->a = ( int16_t )aux;
 8006b78:	b21d      	sxth	r5, r3
 8006b7a:	800d      	strh	r5, [r1, #0]
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	e7d0      	b.n	8006b22 <ICS_GetPhaseCurrents+0x26>
 8006b80:	40012000 	.word	0x40012000
 8006b84:	ffff8001 	.word	0xffff8001
 8006b88:	40012100 	.word	0x40012100

08006b8c <ICS_HFCurrentsCalibration>:
* @retval Always returns {0,0} in ab_t format
*/
__weak void ICS_HFCurrentsCalibration( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006b8c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8006b8e:	68da      	ldr	r2, [r3, #12]
 8006b90:	6a13      	ldr	r3, [r2, #32]
 8006b92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b96:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH4 );

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8006b98:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8006b9c:	2b0f      	cmp	r3, #15
 8006b9e:	d814      	bhi.n	8006bca <ICS_HFCurrentsCalibration+0x3e>
  {
    pHandle->PhaseAOffset += ADC1->JDR1;
 8006ba0:	4a0b      	ldr	r2, [pc, #44]	; (8006bd0 <ICS_HFCurrentsCalibration+0x44>)
 8006ba2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
{
 8006ba4:	b430      	push	{r4, r5}
    pHandle->PhaseAOffset += ADC1->JDR1;
 8006ba6:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
    pHandle->PhaseBOffset += ADC2->JDR1;
 8006ba8:	4c0a      	ldr	r4, [pc, #40]	; (8006bd4 <ICS_HFCurrentsCalibration+0x48>)
 8006baa:	6e02      	ldr	r2, [r0, #96]	; 0x60
    pHandle->PhaseAOffset += ADC1->JDR1;
 8006bac:	442b      	add	r3, r5
 8006bae:	65c3      	str	r3, [r0, #92]	; 0x5c
    pHandle->PhaseBOffset += ADC2->JDR1;
 8006bb0:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    pHandle->PolarizationCounter++;
 8006bb2:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	b2db      	uxtb	r3, r3
    pHandle->PhaseBOffset += ADC2->JDR1;
 8006bba:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8006bbc:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8006bc0:	2300      	movs	r3, #0
    pHandle->PhaseBOffset += ADC2->JDR1;
 8006bc2:	6602      	str	r2, [r0, #96]	; 0x60
  pStator_Currents->b = 0;
}
 8006bc4:	bc30      	pop	{r4, r5}
  pStator_Currents->a = 0;
 8006bc6:	600b      	str	r3, [r1, #0]
}
 8006bc8:	4770      	bx	lr
  pStator_Currents->a = 0;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	600b      	str	r3, [r1, #0]
 8006bce:	4770      	bx	lr
 8006bd0:	40012000 	.word	0x40012000
 8006bd4:	40012100 	.word	0x40012100

08006bd8 <ICS_Init>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006bd8:	6f01      	ldr	r1, [r0, #112]	; 0x70
 8006bda:	68cb      	ldr	r3, [r1, #12]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	f022 0201 	bic.w	r2, r2, #1
 8006be2:	601a      	str	r2, [r3, #0]
    if ( ( pHandle->pParams_str->EmergencyStop ) != DISABLE )
 8006be4:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
 8006be8:	b132      	cbz	r2, 8006bf8 <ICS_Init+0x20>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8006bea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006bee:	611a      	str	r2, [r3, #16]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_BRK(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8006bf0:	68da      	ldr	r2, [r3, #12]
 8006bf2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006bf6:	60da      	str	r2, [r3, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006bf8:	695a      	ldr	r2, [r3, #20]
 8006bfa:	f042 0201 	orr.w	r2, r2, #1
 8006bfe:	615a      	str	r2, [r3, #20]
    if ( pHandle->pParams_str->FreqRatio == 2u )
 8006c00:	790a      	ldrb	r2, [r1, #4]
 8006c02:	2a02      	cmp	r2, #2
 8006c04:	d034      	beq.n	8006c70 <ICS_Init+0x98>
      if ( pHandle->pParams_str->InstanceNbr == 1u )
 8006c06:	780a      	ldrb	r2, [r1, #0]
 8006c08:	2a01      	cmp	r2, #1
 8006c0a:	d03d      	beq.n	8006c88 <ICS_Init+0xb0>
  SET_BIT(TIMx->CCER, Channels);
 8006c0c:	6a1a      	ldr	r2, [r3, #32]
    if ( pHandle->pParams_str->TIMx == TIM1 )
 8006c0e:	4921      	ldr	r1, [pc, #132]	; (8006c94 <ICS_Init+0xbc>)
 8006c10:	f442 62aa 	orr.w	r2, r2, #1360	; 0x550
 8006c14:	f042 0205 	orr.w	r2, r2, #5
 8006c18:	621a      	str	r2, [r3, #32]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8006c1a:	4a1f      	ldr	r2, [pc, #124]	; (8006c98 <ICS_Init+0xc0>)
 8006c1c:	428b      	cmp	r3, r1
 8006c1e:	68d3      	ldr	r3, [r2, #12]
 8006c20:	bf0c      	ite	eq
 8006c22:	f043 0301 	orreq.w	r3, r3, #1
 8006c26:	f043 0302 	orrne.w	r3, r3, #2
 8006c2a:	60d3      	str	r3, [r2, #12]
      pHandle->ADCTriggerSet = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8006c2c:	bf08      	it	eq
 8006c2e:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8006c32:	4b1a      	ldr	r3, [pc, #104]	; (8006c9c <ICS_Init+0xc4>)
      pHandle->ADCTriggerSet = LL_ADC_INJ_TRIG_EXT_TIM8_CH4;
 8006c34:	bf18      	it	ne
 8006c36:	f44f 11f0 	movne.w	r1, #1966080	; 0x1e0000
 8006c3a:	6681      	str	r1, [r0, #104]	; 0x68
 8006c3c:	689a      	ldr	r2, [r3, #8]
 8006c3e:	4918      	ldr	r1, [pc, #96]	; (8006ca0 <ICS_Init+0xc8>)
 8006c40:	f042 0201 	orr.w	r2, r2, #1
 8006c44:	609a      	str	r2, [r3, #8]
 8006c46:	688a      	ldr	r2, [r1, #8]
 8006c48:	f042 0201 	orr.w	r2, r2, #1
 8006c4c:	608a      	str	r2, [r1, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8006c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8006c50:	f06f 0104 	mvn.w	r1, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8006c54:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006c58:	62da      	str	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8006c5a:	6019      	str	r1, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8006c5c:	685a      	ldr	r2, [r3, #4]
    pHandle->OverCurrentFlag = false;
 8006c5e:	2100      	movs	r1, #0
 8006c60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c64:	605a      	str	r2, [r3, #4]
 8006c66:	f880 106c 	strb.w	r1, [r0, #108]	; 0x6c
    pHandle->_Super.DTTest = 0u;
 8006c6a:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
}
 8006c6e:	4770      	bx	lr
      if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 8006c70:	794a      	ldrb	r2, [r1, #5]
 8006c72:	2a01      	cmp	r2, #1
 8006c74:	d108      	bne.n	8006c88 <ICS_Init+0xb0>
        if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8006c76:	7a09      	ldrb	r1, [r1, #8]
 8006c78:	2903      	cmp	r1, #3
 8006c7a:	d105      	bne.n	8006c88 <ICS_Init+0xb0>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8006c7c:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006c7e:	695a      	ldr	r2, [r3, #20]
 8006c80:	f042 0201 	orr.w	r2, r2, #1
 8006c84:	615a      	str	r2, [r3, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8006c86:	6319      	str	r1, [r3, #48]	; 0x30
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8006c88:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 8006c8c:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 8006c8e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006c90:	e7bc      	b.n	8006c0c <ICS_Init+0x34>
 8006c92:	bf00      	nop
 8006c94:	40010000 	.word	0x40010000
 8006c98:	e0042000 	.word	0xe0042000
 8006c9c:	40012000 	.word	0x40012000
 8006ca0:	40012100 	.word	0x40012100

08006ca4 <ICS_TurnOnLowSides>:
  * @param pHdl ICS F4xx PWM Current Feedback Handle
  */
__weak void ICS_TurnOnLowSides( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006ca4:	6f01      	ldr	r1, [r0, #112]	; 0x70

  pHandle->_Super.TurnOnLowSidesAction = true;
 8006ca6:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006ca8:	68ca      	ldr	r2, [r1, #12]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8006caa:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006cae:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006cb0:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006cb4:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006cb6:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006cb8:	63d3      	str	r3, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006cba:	6110      	str	r0, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006cbc:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0 );
  LL_TIM_OC_SetCompareCH2( TIMx, 0 );
  LL_TIM_OC_SetCompareCH3( TIMx, 0 );

  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET ) ;
 8006cbe:	07db      	lsls	r3, r3, #31
 8006cc0:	d5fc      	bpl.n	8006cbc <ICS_TurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006cc2:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8006cc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cc8:	6453      	str	r3, [r2, #68]	; 0x44

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006cca:	7c0b      	ldrb	r3, [r1, #16]
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d000      	beq.n	8006cd2 <ICS_TurnOnLowSides+0x2e>
 8006cd0:	4770      	bx	lr
{
 8006cd2:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006cd4:	69c8      	ldr	r0, [r1, #28]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006cd6:	694d      	ldr	r5, [r1, #20]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006cd8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006cda:	698e      	ldr	r6, [r1, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006cdc:	6a0c      	ldr	r4, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006cde:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006ce0:	61ae      	str	r6, [r5, #24]
 8006ce2:	6184      	str	r4, [r0, #24]
  }
}
 8006ce4:	bc70      	pop	{r4, r5, r6}
 8006ce6:	619a      	str	r2, [r3, #24]
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop

08006cec <ICS_SwitchOnPWM>:
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOnPWM( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006cec:	6f01      	ldr	r1, [r0, #112]	; 0x70

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 8006cee:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006cf2:	68cb      	ldr	r3, [r1, #12]
{
 8006cf4:	b4f0      	push	{r4, r5, r6, r7}
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006cf6:	2400      	movs	r4, #0
 8006cf8:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 8006cfc:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006cfe:	f06f 0401 	mvn.w	r4, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 8006d02:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006d04:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006d06:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006d08:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006d0a:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006d0c:	611c      	str	r4, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006d0e:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8006d10:	07d2      	lsls	r2, r2, #31
 8006d12:	d5fc      	bpl.n	8006d0e <ICS_SwitchOnPWM+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006d14:	f06f 0201 	mvn.w	r2, #1
 8006d18:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006d1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d20:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006d22:	7c0a      	ldrb	r2, [r1, #16]
 8006d24:	2a02      	cmp	r2, #2
 8006d26:	d008      	beq.n	8006d3a <ICS_SwitchOnPWM+0x4e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006d28:	f06f 0201 	mvn.w	r2, #1
 8006d2c:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006d2e:	68da      	ldr	r2, [r3, #12]
 8006d30:	f042 0201 	orr.w	r2, r2, #1
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

}
 8006d34:	bcf0      	pop	{r4, r5, r6, r7}
 8006d36:	60da      	str	r2, [r3, #12]
 8006d38:	4770      	bx	lr
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8006d3a:	6a18      	ldr	r0, [r3, #32]
 8006d3c:	f240 5255 	movw	r2, #1365	; 0x555
 8006d40:	4382      	bics	r2, r0
 8006d42:	d00c      	beq.n	8006d5e <ICS_SwitchOnPWM+0x72>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006d44:	698c      	ldr	r4, [r1, #24]
 8006d46:	6a08      	ldr	r0, [r1, #32]
 8006d48:	6a8a      	ldr	r2, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006d4a:	694f      	ldr	r7, [r1, #20]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006d4c:	69ce      	ldr	r6, [r1, #28]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006d4e:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8006d50:	0424      	lsls	r4, r4, #16
 8006d52:	0400      	lsls	r0, r0, #16
 8006d54:	0412      	lsls	r2, r2, #16
 8006d56:	61bc      	str	r4, [r7, #24]
 8006d58:	61b0      	str	r0, [r6, #24]
 8006d5a:	61aa      	str	r2, [r5, #24]
}
 8006d5c:	e7e4      	b.n	8006d28 <ICS_SwitchOnPWM+0x3c>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006d5e:	694c      	ldr	r4, [r1, #20]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006d60:	69c8      	ldr	r0, [r1, #28]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006d62:	6a4a      	ldr	r2, [r1, #36]	; 0x24
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006d64:	698d      	ldr	r5, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006d66:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006d68:	6a0c      	ldr	r4, [r1, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006d6a:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8006d6c:	6184      	str	r4, [r0, #24]
 8006d6e:	6191      	str	r1, [r2, #24]
}
 8006d70:	e7da      	b.n	8006d28 <ICS_SwitchOnPWM+0x3c>
 8006d72:	bf00      	nop

08006d74 <ICS_SwitchOffPWM>:
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006d74:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8006d76:	68da      	ldr	r2, [r3, #12]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006d78:	68d1      	ldr	r1, [r2, #12]
 8006d7a:	f021 0101 	bic.w	r1, r1, #1
{
 8006d7e:	b4f0      	push	{r4, r5, r6, r7}
 8006d80:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006d82:	6c51      	ldr	r1, [r2, #68]	; 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 8006d84:	2400      	movs	r4, #0
 8006d86:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8006d8a:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
 8006d8e:	6451      	str	r1, [r2, #68]	; 0x44

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006d90:	7c19      	ldrb	r1, [r3, #16]
 8006d92:	2902      	cmp	r1, #2
 8006d94:	d10b      	bne.n	8006dae <ICS_SwitchOffPWM+0x3a>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006d96:	699c      	ldr	r4, [r3, #24]
 8006d98:	6a18      	ldr	r0, [r3, #32]
 8006d9a:	6a99      	ldr	r1, [r3, #40]	; 0x28
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006d9c:	695f      	ldr	r7, [r3, #20]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006d9e:	69de      	ldr	r6, [r3, #28]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006da0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8006da2:	0424      	lsls	r4, r4, #16
 8006da4:	0400      	lsls	r0, r0, #16
 8006da6:	0409      	lsls	r1, r1, #16
 8006da8:	61bc      	str	r4, [r7, #24]
 8006daa:	61b0      	str	r0, [r6, #24]
 8006dac:	61a9      	str	r1, [r5, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006dae:	f06f 0301 	mvn.w	r3, #1
 8006db2:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006db4:	6913      	ldr	r3, [r2, #16]
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8006db6:	07db      	lsls	r3, r3, #31
 8006db8:	d5fc      	bpl.n	8006db4 <ICS_SwitchOffPWM+0x40>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006dba:	f06f 0301 	mvn.w	r3, #1
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  return;
}
 8006dbe:	bcf0      	pop	{r4, r5, r6, r7}
 8006dc0:	6113      	str	r3, [r2, #16]
 8006dc2:	4770      	bx	lr

08006dc4 <ICS_CurrentReadingCalibration>:
{
 8006dc4:	b538      	push	{r3, r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006dc6:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsCalibration;
 8006dc8:	4924      	ldr	r1, [pc, #144]	; (8006e5c <ICS_CurrentReadingCalibration+0x98>)
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006dca:	68dc      	ldr	r4, [r3, #12]
  pHandle->PhaseAOffset = 0u;
 8006dcc:	2200      	movs	r2, #0
  pHandle->PolarizationCounter = 0u;
 8006dce:	f880 2066 	strb.w	r2, [r0, #102]	; 0x66
  CLEAR_BIT(TIMx->CCER, Channels);
 8006dd2:	6a23      	ldr	r3, [r4, #32]
  pHandle->PhaseAOffset = 0u;
 8006dd4:	65c2      	str	r2, [r0, #92]	; 0x5c
 8006dd6:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
{
 8006dda:	4605      	mov	r5, r0
 8006ddc:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseBOffset = 0u;
 8006de0:	6602      	str	r2, [r0, #96]	; 0x60
 8006de2:	6223      	str	r3, [r4, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsCalibration;
 8006de4:	6041      	str	r1, [r0, #4]
  ICS_SwitchOnPWM( &pHandle->_Super );
 8006de6:	f7ff ff81 	bl	8006cec <ICS_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8006dea:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006dec:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8006df0:	7a1a      	ldrb	r2, [r3, #8]
 8006df2:	4620      	mov	r0, r4
 8006df4:	f105 0366 	add.w	r3, r5, #102	; 0x66
 8006df8:	f000 fa08 	bl	800720c <waitForPolarizationEnd>
  ICS_SwitchOffPWM( &pHandle->_Super );
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	f7ff ffb9 	bl	8006d74 <ICS_SwitchOffPWM>
  pHandle->PhaseBOffset >>= 3;
 8006e02:	e9d5 0217 	ldrd	r0, r2, [r5, #92]	; 0x5c
 8006e06:	08d2      	lsrs	r2, r2, #3
  pHandle->PhaseAOffset >>= 3;
 8006e08:	08c0      	lsrs	r0, r0, #3
  pHandle->PhaseBOffset >>= 3;
 8006e0a:	e9c5 0217 	strd	r0, r2, [r5, #92]	; 0x5c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8006e0e:	69a2      	ldr	r2, [r4, #24]
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->Half_PWMPeriod );
 8006e10:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_GetPhaseCurrents;
 8006e14:	4912      	ldr	r1, [pc, #72]	; (8006e60 <ICS_CurrentReadingCalibration+0x9c>)
 8006e16:	f022 0208 	bic.w	r2, r2, #8
 8006e1a:	61a2      	str	r2, [r4, #24]
 8006e1c:	69a2      	ldr	r2, [r4, #24]
 8006e1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e22:	61a2      	str	r2, [r4, #24]
 8006e24:	69e2      	ldr	r2, [r4, #28]
 8006e26:	f022 0208 	bic.w	r2, r2, #8
 8006e2a:	61e2      	str	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006e2c:	6363      	str	r3, [r4, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006e2e:	63a3      	str	r3, [r4, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006e30:	63e3      	str	r3, [r4, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8006e32:	69a3      	ldr	r3, [r4, #24]
 8006e34:	f043 0308 	orr.w	r3, r3, #8
 8006e38:	61a3      	str	r3, [r4, #24]
 8006e3a:	69a3      	ldr	r3, [r4, #24]
 8006e3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006e40:	61a3      	str	r3, [r4, #24]
 8006e42:	69e3      	ldr	r3, [r4, #28]
 8006e44:	f043 0308 	orr.w	r3, r3, #8
 8006e48:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006e4a:	6a23      	ldr	r3, [r4, #32]
 8006e4c:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8006e50:	f043 0305 	orr.w	r3, r3, #5
 8006e54:	6223      	str	r3, [r4, #32]
 8006e56:	6069      	str	r1, [r5, #4]
}
 8006e58:	bd38      	pop	{r3, r4, r5, pc}
 8006e5a:	bf00      	nop
 8006e5c:	08006b8d 	.word	0x08006b8d
 8006e60:	08006afd 	.word	0x08006afd

08006e64 <ICS_WriteTIMRegisters>:
*/
__weak uint16_t ICS_WriteTIMRegisters( PWMC_Handle_t * pHdl )
{
  uint16_t aux;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006e64:	6f03      	ldr	r3, [r0, #112]	; 0x70

  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
  LL_TIM_OC_SetCompareCH2( TIMx, pHandle->_Super.CntPhB );
 8006e66:	8e81      	ldrh	r1, [r0, #52]	; 0x34
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006e68:	68db      	ldr	r3, [r3, #12]
  LL_TIM_OC_SetCompareCH3( TIMx, pHandle->_Super.CntPhC );
 8006e6a:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
{
 8006e6c:	b410      	push	{r4}
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
 8006e6e:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006e70:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006e72:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006e74:	63da      	str	r2, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8006e76:	6a18      	ldr	r0, [r3, #32]
  else
  {
    aux = MC_NO_ERROR;
  }
  return aux;
}
 8006e78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e7c:	f3c0 3000 	ubfx	r0, r0, #12, #1
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop

08006e84 <ICS_TIMx_UP_IRQHandler>:
__weak void * ICS_TIMx_UP_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{
  uint32_t adcinjflags;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;

  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 8006e84:	4922      	ldr	r1, [pc, #136]	; (8006f10 <ICS_TIMx_UP_IRQHandler+0x8c>)
 8006e86:	680b      	ldr	r3, [r1, #0]
{
 8006e88:	b4f0      	push	{r4, r5, r6, r7}
  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 8006e8a:	f003 030c 	and.w	r3, r3, #12
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006e8e:	6f04      	ldr	r4, [r0, #112]	; 0x70

  if ( adcinjflags == CONV_STARTED )
 8006e90:	2b08      	cmp	r3, #8
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006e92:	68e2      	ldr	r2, [r4, #12]
  if ( adcinjflags == CONV_STARTED )
 8006e94:	d026      	beq.n	8006ee4 <ICS_TIMx_UP_IRQHandler+0x60>
    {
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
    }
    while ( adcinjflags != CONV_FINISHED );
  }
  else if ( adcinjflags == FLAGS_CLEARED )
 8006e96:	b94b      	cbnz	r3, 8006eac <ICS_TIMx_UP_IRQHandler+0x28>
  {
    while ( ( TIMx->CNT ) < ( pHandle->pParams_str->Tw ) )
 8006e98:	8861      	ldrh	r1, [r4, #2]
 8006e9a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006e9c:	428b      	cmp	r3, r1
 8006e9e:	d3fc      	bcc.n	8006e9a <ICS_TIMx_UP_IRQHandler+0x16>
    {}
    adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8006ea0:	491b      	ldr	r1, [pc, #108]	; (8006f10 <ICS_TIMx_UP_IRQHandler+0x8c>)
 8006ea2:	680b      	ldr	r3, [r1, #0]
 8006ea4:	f003 030c 	and.w	r3, r3, #12

    if ( adcinjflags == CONV_STARTED )
 8006ea8:	2b08      	cmp	r3, #8
 8006eaa:	d026      	beq.n	8006efa <ICS_TIMx_UP_IRQHandler+0x76>
  MODIFY_REG(ADCx->CR2, ADC_CR2_JEXTSEL, (TriggerSource & ADC_CR2_JEXTSEL));
 8006eac:	4f18      	ldr	r7, [pc, #96]	; (8006f10 <ICS_TIMx_UP_IRQHandler+0x8c>)
 8006eae:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006eb0:	68b9      	ldr	r1, [r7, #8]
 8006eb2:	4e18      	ldr	r6, [pc, #96]	; (8006f14 <ICS_TIMx_UP_IRQHandler+0x90>)
 8006eb4:	f403 2570 	and.w	r5, r3, #983040	; 0xf0000
 8006eb8:	f421 2170 	bic.w	r1, r1, #983040	; 0xf0000
 8006ebc:	4329      	orrs	r1, r5
 8006ebe:	60b9      	str	r1, [r7, #8]
 8006ec0:	68b3      	ldr	r3, [r6, #8]
 8006ec2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8006ec6:	432b      	orrs	r3, r5
 8006ec8:	60b3      	str	r3, [r6, #8]
  /* It re-initilize AD converter in run time when using dual MC */
  LL_ADC_INJ_SetTriggerSource(ADC1, pHandle->ADCTriggerSet);
  LL_ADC_INJ_SetTriggerSource(ADC2, pHandle->ADCTriggerSet);

  /* Change channels keeping equal to 1 element the sequencer lenght */
  ADC1->JSQR = ( uint32_t )( pHandle->pParams_str->IaChannel ) << 15;
 8006eca:	79a3      	ldrb	r3, [r4, #6]
 8006ecc:	03db      	lsls	r3, r3, #15
 8006ece:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC2->JSQR = ( uint32_t )( pHandle->pParams_str->IbChannel ) << 15;
 8006ed0:	79e3      	ldrb	r3, [r4, #7]
 8006ed2:	03db      	lsls	r3, r3, #15
 8006ed4:	63b3      	str	r3, [r6, #56]	; 0x38
  SET_BIT(TIMx->CCER, Channels);
 8006ed6:	6a13      	ldr	r3, [r2, #32]
 8006ed8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000

  LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH4 );

  return &( pHandle->_Super.Motor );
}
 8006edc:	3046      	adds	r0, #70	; 0x46
 8006ede:	bcf0      	pop	{r4, r5, r6, r7}
 8006ee0:	6213      	str	r3, [r2, #32]
 8006ee2:	4770      	bx	lr
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8006ee4:	680b      	ldr	r3, [r1, #0]
 8006ee6:	f003 030c 	and.w	r3, r3, #12
    while ( adcinjflags != CONV_FINISHED );
 8006eea:	2b0c      	cmp	r3, #12
 8006eec:	d0de      	beq.n	8006eac <ICS_TIMx_UP_IRQHandler+0x28>
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8006eee:	680b      	ldr	r3, [r1, #0]
 8006ef0:	f003 030c 	and.w	r3, r3, #12
    while ( adcinjflags != CONV_FINISHED );
 8006ef4:	2b0c      	cmp	r3, #12
 8006ef6:	d1f5      	bne.n	8006ee4 <ICS_TIMx_UP_IRQHandler+0x60>
 8006ef8:	e7d8      	b.n	8006eac <ICS_TIMx_UP_IRQHandler+0x28>
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8006efa:	680b      	ldr	r3, [r1, #0]
 8006efc:	f003 030c 	and.w	r3, r3, #12
      while ( adcinjflags != CONV_FINISHED );
 8006f00:	2b0c      	cmp	r3, #12
 8006f02:	d0d3      	beq.n	8006eac <ICS_TIMx_UP_IRQHandler+0x28>
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8006f04:	680b      	ldr	r3, [r1, #0]
 8006f06:	f003 030c 	and.w	r3, r3, #12
      while ( adcinjflags != CONV_FINISHED );
 8006f0a:	2b0c      	cmp	r3, #12
 8006f0c:	d1f5      	bne.n	8006efa <ICS_TIMx_UP_IRQHandler+0x76>
 8006f0e:	e7cd      	b.n	8006eac <ICS_TIMx_UP_IRQHandler+0x28>
 8006f10:	40012000 	.word	0x40012000
 8006f14:	40012100 	.word	0x40012100

08006f18 <ICS_BRK_IRQHandler>:
 * @retval none
 */
__weak void * ICS_BRK_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006f18:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8006f1a:	7c1a      	ldrb	r2, [r3, #16]
 8006f1c:	2a02      	cmp	r2, #2
 8006f1e:	d004      	beq.n	8006f2a <ICS_BRK_IRQHandler+0x12>
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
  }
  pHandle->OverCurrentFlag = true;
 8006f20:	2301      	movs	r3, #1
 8006f22:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c

  return &( pHandle->_Super.Motor );
}
 8006f26:	3046      	adds	r0, #70	; 0x46
 8006f28:	4770      	bx	lr
{
 8006f2a:	b4f0      	push	{r4, r5, r6, r7}
 8006f2c:	6a19      	ldr	r1, [r3, #32]
 8006f2e:	699c      	ldr	r4, [r3, #24]
 8006f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006f32:	695f      	ldr	r7, [r3, #20]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006f34:	69de      	ldr	r6, [r3, #28]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006f36:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8006f38:	0424      	lsls	r4, r4, #16
 8006f3a:	0409      	lsls	r1, r1, #16
 8006f3c:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	61bc      	str	r4, [r7, #24]
}
 8006f42:	3046      	adds	r0, #70	; 0x46
 8006f44:	61b1      	str	r1, [r6, #24]
 8006f46:	61aa      	str	r2, [r5, #24]
  pHandle->OverCurrentFlag = true;
 8006f48:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
}
 8006f4c:	bcf0      	pop	{r4, r5, r6, r7}
 8006f4e:	4770      	bx	lr

08006f50 <ICS_IsOverCurrentOccurred>:
__weak uint16_t ICS_IsOverCurrentOccurred( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  uint16_t retval = MC_NO_FAULTS;

  if ( pHandle->OverCurrentFlag == true )
 8006f50:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 8006f54:	b90b      	cbnz	r3, 8006f5a <ICS_IsOverCurrentOccurred+0xa>
  uint16_t retval = MC_NO_FAULTS;
 8006f56:	4618      	mov	r0, r3
  {
    retval = MC_BREAK_IN;
    pHandle->OverCurrentFlag = false;
  }
  return retval;
}
 8006f58:	4770      	bx	lr
    pHandle->OverCurrentFlag = false;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
    retval = MC_BREAK_IN;
 8006f60:	2040      	movs	r0, #64	; 0x40
 8006f62:	4770      	bx	lr

08006f64 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8006f64:	b510      	push	{r4, lr}
 8006f66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	f001 fc79 	bl	8008864 <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8006f72:	2300      	movs	r3, #0
 8006f74:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8006f78:	bd10      	pop	{r4, pc}
 8006f7a:	bf00      	nop

08006f7c <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8006f7c:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8006f80:	1c53      	adds	r3, r2, #1
 8006f82:	b29b      	uxth	r3, r3
{
 8006f84:	b470      	push	{r4, r5, r6}
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8006f86:	2b7f      	cmp	r3, #127	; 0x7f
{
 8006f88:	4606      	mov	r6, r0
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8006f8a:	bf88      	it	hi
 8006f8c:	2300      	movhi	r3, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8006f8e:	f826 1012 	strh.w	r1, [r6, r2, lsl #1]
{
 8006f92:	4608      	mov	r0, r1
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8006f94:	f8a6 2102 	strh.w	r2, [r6, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8006f98:	f8a6 3100 	strh.w	r3, [r6, #256]	; 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8006f9c:	f106 05fe 	add.w	r5, r6, #254	; 0xfe
 8006fa0:	1eb3      	subs	r3, r6, #2
  int32_t wAux = 0;
 8006fa2:	2200      	movs	r2, #0
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8006fa4:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8006fa8:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8006faa:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8006fac:	d1fa      	bne.n	8006fa4 <MPM_CalcElMotorPower+0x28>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8006fae:	2a00      	cmp	r2, #0
 8006fb0:	bfb8      	it	lt
 8006fb2:	327f      	addlt	r2, #127	; 0x7f
 8006fb4:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8006fb6:	f8a6 2104 	strh.w	r2, [r6, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8006fba:	bc70      	pop	{r4, r5, r6}
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop

08006fc0 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8006fc0:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop

08006fc8 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8006fc8:	8a03      	ldrh	r3, [r0, #16]
 8006fca:	8b42      	ldrh	r2, [r0, #26]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d306      	bcc.n	8006fde <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8006fd0:	8b82      	ldrh	r2, [r0, #28]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d901      	bls.n	8006fda <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 8006fd6:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 8006fd8:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 8006fda:	8ac0      	ldrh	r0, [r0, #22]
 8006fdc:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8006fde:	2008      	movs	r0, #8
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop

08006fe4 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	8203      	strh	r3, [r0, #16]
}
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop

08006fec <NTC_Init>:
{
 8006fec:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 8006fee:	7803      	ldrb	r3, [r0, #0]
{
 8006ff0:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8006ff2:	b123      	cbz	r3, 8006ffe <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8006ff4:	8a43      	ldrh	r3, [r0, #18]
 8006ff6:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	82c2      	strh	r2, [r0, #22]
}
 8006ffc:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8006ffe:	3004      	adds	r0, #4
 8007000:	f7fc fcec 	bl	80039dc <RCM_RegisterRegConv>
 8007004:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8007008:	4620      	mov	r0, r4
 800700a:	f7ff ffeb 	bl	8006fe4 <NTC_Clear>
}
 800700e:	bd10      	pop	{r4, pc}

08007010 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8007010:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8007012:	7803      	ldrb	r3, [r0, #0]
{
 8007014:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8007016:	b113      	cbz	r3, 800701e <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8007018:	2000      	movs	r0, #0
 800701a:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 800701c:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800701e:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8007022:	f7fc fdad 	bl	8003b80 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8007026:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800702a:	4298      	cmp	r0, r3
 800702c:	d007      	beq.n	800703e <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 800702e:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8007030:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8007032:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 8007034:	fb01 0003 	mla	r0, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8007038:	fbb0 f0f2 	udiv	r0, r0, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 800703c:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 800703e:	4620      	mov	r0, r4
 8007040:	f7ff ffc2 	bl	8006fc8 <NTC_SetFaultState>
 8007044:	82e0      	strh	r0, [r4, #22]
}
 8007046:	bd10      	pop	{r4, pc}

08007048 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8007048:	7803      	ldrb	r3, [r0, #0]
 800704a:	b983      	cbnz	r3, 800706e <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 800704c:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 800704e:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8007050:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8007054:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8007056:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 8007058:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 800705c:	2b00      	cmp	r3, #0
 800705e:	bfbc      	itt	lt
 8007060:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8007064:	33ff      	addlt	r3, #255	; 0xff
 8007066:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 800706a:	b200      	sxth	r0, r0
 800706c:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 800706e:	8a80      	ldrh	r0, [r0, #20]
}
 8007070:	b200      	sxth	r0, r0
 8007072:	4770      	bx	lr

08007074 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8007074:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8007076:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8007078:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 800707a:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 800707c:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 800707e:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8007080:	6283      	str	r3, [r0, #40]	; 0x28
}
 8007082:	4770      	bx	lr

08007084 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8007084:	8081      	strh	r1, [r0, #4]
}
 8007086:	4770      	bx	lr

08007088 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8007088:	80c1      	strh	r1, [r0, #6]
}
 800708a:	4770      	bx	lr

0800708c <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 800708c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop

08007094 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8007094:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop

0800709c <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 800709c:	6081      	str	r1, [r0, #8]

  return;
}
 800709e:	4770      	bx	lr

080070a0 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 80070a0:	8b00      	ldrh	r0, [r0, #24]
 80070a2:	4770      	bx	lr

080070a4 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 80070a4:	8b40      	ldrh	r0, [r0, #26]
 80070a6:	4770      	bx	lr

080070a8 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 80070a8:	8441      	strh	r1, [r0, #34]	; 0x22
}
 80070aa:	4770      	bx	lr

080070ac <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 80070ac:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop

080070b4 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80070b4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 80070b8:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
{
 80070bc:	b470      	push	{r4, r5, r6}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80070be:	fb01 f303 	mul.w	r3, r1, r3
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 80070c2:	f9b0 4014 	ldrsh.w	r4, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 80070c6:	f9b0 5016 	ldrsh.w	r5, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 80070ca:	b162      	cbz	r2, 80070e6 <PI_Controller+0x32>
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 80070cc:	6886      	ldr	r6, [r0, #8]
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 80070ce:	fb01 f102 	mul.w	r1, r1, r2

    if ( wIntegral_sum_temp < 0 )
 80070d2:	1872      	adds	r2, r6, r1
 80070d4:	d420      	bmi.n	8007118 <PI_Controller+0x64>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 80070d6:	2e00      	cmp	r6, #0
 80070d8:	db29      	blt.n	800712e <PI_Controller+0x7a>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 80070da:	68c1      	ldr	r1, [r0, #12]
 80070dc:	4291      	cmp	r1, r2
 80070de:	db03      	blt.n	80070e8 <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 80070e0:	6901      	ldr	r1, [r0, #16]
 80070e2:	4291      	cmp	r1, r2
 80070e4:	dc00      	bgt.n	80070e8 <PI_Controller+0x34>
 80070e6:	4611      	mov	r1, r2
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 80070e8:	8b86      	ldrh	r6, [r0, #28]
 80070ea:	8bc2      	ldrh	r2, [r0, #30]
 80070ec:	4133      	asrs	r3, r6
 80070ee:	fa41 f202 	asr.w	r2, r1, r2
 80070f2:	4413      	add	r3, r2
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 80070f4:	429c      	cmp	r4, r3
 80070f6:	da05      	bge.n	8007104 <PI_Controller+0x50>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 80070f8:	1ae3      	subs	r3, r4, r3
 80070fa:	4419      	add	r1, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 80070fc:	6081      	str	r1, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 80070fe:	4620      	mov	r0, r4
 8007100:	bc70      	pop	{r4, r5, r6}
 8007102:	4770      	bx	lr
  else if ( wOutput_32 < hLowerOutputLimit )
 8007104:	429d      	cmp	r5, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
 8007106:	bfc9      	itett	gt
 8007108:	1aeb      	subgt	r3, r5, r3
 800710a:	b21c      	sxthle	r4, r3
    wOutput_32 = hLowerOutputLimit;
 800710c:	462c      	movgt	r4, r5
  pHandle->wIntegralTerm += wDischarge;
 800710e:	18c9      	addgt	r1, r1, r3
 8007110:	6081      	str	r1, [r0, #8]
}
 8007112:	4620      	mov	r0, r4
 8007114:	bc70      	pop	{r4, r5, r6}
 8007116:	4770      	bx	lr
      if ( pHandle->wIntegralTerm > 0 )
 8007118:	2e00      	cmp	r6, #0
 800711a:	ddde      	ble.n	80070da <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 800711c:	2900      	cmp	r1, #0
 800711e:	dddc      	ble.n	80070da <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8007120:	68c1      	ldr	r1, [r0, #12]
 8007122:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007126:	4291      	cmp	r1, r2
 8007128:	d1de      	bne.n	80070e8 <PI_Controller+0x34>
          wIntegral_sum_temp = INT32_MAX;
 800712a:	460a      	mov	r2, r1
 800712c:	e7db      	b.n	80070e6 <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 800712e:	4e03      	ldr	r6, [pc, #12]	; (800713c <PI_Controller+0x88>)
 8007130:	ea32 0221 	bics.w	r2, r2, r1, asr #32
 8007134:	bf28      	it	cs
 8007136:	4632      	movcs	r2, r6
 8007138:	e7cf      	b.n	80070da <PI_Controller+0x26>
 800713a:	bf00      	nop
 800713c:	80000001 	.word	0x80000001

08007140 <PQD_CalcElMotorPower>:
  *         motor power.
  * @param power handle.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{
 8007140:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8007142:	e9d0 4242 	ldrd	r4, r2, [r0, #264]	; 0x108
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8007146:	8b11      	ldrh	r1, [r2, #24]
 8007148:	89d3      	ldrh	r3, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 800714a:	8995      	ldrh	r5, [r2, #12]
 800714c:	8ad2      	ldrh	r2, [r2, #22]
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 800714e:	fb13 f301 	smulbb	r3, r3, r1
{
 8007152:	4606      	mov	r6, r0
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8007154:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8007158:	fb15 3502 	smlabb	r5, r5, r2, r3
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 800715c:	f7ff fc5a 	bl	8006a14 <VBS_GetAvBusVoltage_V>
 8007160:	fb04 f200 	mul.w	r2, r4, r0
  wAux /= 65536;
 8007164:	1e2c      	subs	r4, r5, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8007166:	480e      	ldr	r0, [pc, #56]	; (80071a0 <PQD_CalcElMotorPower+0x60>)

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8007168:	490e      	ldr	r1, [pc, #56]	; (80071a4 <PQD_CalcElMotorPower+0x64>)
  wAux /= 65536;
 800716a:	bfb8      	it	lt
 800716c:	f504 447f 	addlt.w	r4, r4, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8007170:	fb80 3002 	smull	r3, r0, r0, r2
  wAux /= 65536;
 8007174:	bfb8      	it	lt
 8007176:	34ff      	addlt	r4, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8007178:	17d3      	asrs	r3, r2, #31
  wAux /= 65536;
 800717a:	1424      	asrs	r4, r4, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800717c:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
  wAux3 = wAux * wAux2;
 8007180:	fb03 f304 	mul.w	r3, r3, r4
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8007184:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007188:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 800718a:	fb81 2103 	smull	r2, r1, r1, r3
 800718e:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8007190:	4630      	mov	r0, r6
 8007192:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8007196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 800719a:	f7ff beef 	b.w	8006f7c <MPM_CalcElMotorPower>
 800719e:	bf00      	nop
 80071a0:	1b4e81b5 	.word	0x1b4e81b5
 80071a4:	66666667 	.word	0x66666667

080071a8 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 80071a8:	4b17      	ldr	r3, [pc, #92]	; (8007208 <startTimers+0x60>)
 80071aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 80071ac:	07d2      	lsls	r2, r2, #31
 80071ae:	d415      	bmi.n	80071dc <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 80071b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071b2:	f042 0201 	orr.w	r2, r2, #1
 80071b6:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80071b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80071ba:	b082      	sub	sp, #8
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80071bc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80071c0:	f002 0201 	and.w	r2, r2, #1
 80071c4:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80071c6:	9a01      	ldr	r2, [sp, #4]
 80071c8:	694a      	ldr	r2, [r1, #20]
 80071ca:	f042 0201 	orr.w	r2, r2, #1
 80071ce:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 80071d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071d2:	f022 0201 	bic.w	r2, r2, #1
 80071d6:	641a      	str	r2, [r3, #64]	; 0x40
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 80071d8:	b002      	add	sp, #8
 80071da:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 80071dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80071e0:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80071e2:	6859      	ldr	r1, [r3, #4]
 80071e4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80071e8:	f041 0120 	orr.w	r1, r1, #32
 80071ec:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80071ee:	6959      	ldr	r1, [r3, #20]
 80071f0:	f041 0101 	orr.w	r1, r1, #1
 80071f4:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80071f6:	6859      	ldr	r1, [r3, #4]
 80071f8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80071fc:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8007200:	430a      	orrs	r2, r1
 8007202:	605a      	str	r2, [r3, #4]
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	40023800 	.word	0x40023800

0800720c <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 800720c:	b4f0      	push	{r4, r5, r6, r7}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 800720e:	6804      	ldr	r4, [r0, #0]
  if (counter_mode == 0U)
 8007210:	f014 0460 	ands.w	r4, r4, #96	; 0x60
 8007214:	d11a      	bne.n	800724c <waitForPolarizationEnd+0x40>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8007216:	6804      	ldr	r4, [r0, #0]
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8007218:	3201      	adds	r2, #1
 800721a:	0856      	lsrs	r6, r2, #1
 800721c:	0176      	lsls	r6, r6, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800721e:	f06f 0702 	mvn.w	r7, #2
 8007222:	6107      	str	r7, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8007224:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 8007226:	781c      	ldrb	r4, [r3, #0]
 8007228:	2c0f      	cmp	r4, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 800722a:	f102 0501 	add.w	r5, r2, #1
  while (*cnt < NB_CONVERSIONS)
 800722e:	d80b      	bhi.n	8007248 <waitForPolarizationEnd+0x3c>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8007230:	6904      	ldr	r4, [r0, #16]
 8007232:	07a4      	lsls	r4, r4, #30
 8007234:	d5f7      	bpl.n	8007226 <waitForPolarizationEnd+0x1a>
      hCalibrationPeriodCounter++;
 8007236:	b2aa      	uxth	r2, r5
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8007238:	4296      	cmp	r6, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800723a:	6107      	str	r7, [r0, #16]
 800723c:	d8f3      	bhi.n	8007226 <waitForPolarizationEnd+0x1a>
      {
        if (*cnt < NB_CONVERSIONS)
 800723e:	781c      	ldrb	r4, [r3, #0]
 8007240:	2c0f      	cmp	r4, #15
 8007242:	d8f0      	bhi.n	8007226 <waitForPolarizationEnd+0x1a>
        {
          *SWerror = 1u;
 8007244:	2301      	movs	r3, #1
 8007246:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8007248:	bcf0      	pop	{r4, r5, r6, r7}
 800724a:	4770      	bx	lr
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 800724c:	2c60      	cmp	r4, #96	; 0x60
 800724e:	d1e3      	bne.n	8007218 <waitForPolarizationEnd+0xc>
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8007250:	3201      	adds	r2, #1
 8007252:	0156      	lsls	r6, r2, #5
 8007254:	e7e3      	b.n	800721e <waitForPolarizationEnd+0x12>
 8007256:	bf00      	nop

08007258 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8007258:	6843      	ldr	r3, [r0, #4]
 800725a:	4718      	bx	r3

0800725c <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 800725c:	b470      	push	{r4, r5, r6}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800725e:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8007262:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
 8007264:	b083      	sub	sp, #12
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8007266:	140c      	asrs	r4, r1, #16
{
 8007268:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800726a:	fb06 f404 	mul.w	r4, r6, r4
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 800726e:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8007270:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8007274:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8007278:	eb01 0344 	add.w	r3, r1, r4, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 800727c:	ebc1 0144 	rsb	r1, r1, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8007280:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8007284:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8007288:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800728c:	ea4f 0444 	mov.w	r4, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8007290:	ea4f 0565 	mov.w	r5, r5, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8007294:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 8007298:	db77      	blt.n	800738a <PWMC_SetPhaseVoltage+0x12e>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 800729a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800729e:	db4e      	blt.n	800733e <PWMC_SetPhaseVoltage+0xe2>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 80072a0:	1aad      	subs	r5, r5, r2
 80072a2:	bf44      	itt	mi
 80072a4:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 80072a8:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 80072ac:	2900      	cmp	r1, #0
 80072ae:	bfbc      	itt	lt
 80072b0:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 80072b4:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	bfb8      	it	lt
 80072bc:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 80072c0:	ea4f 0296 	mov.w	r2, r6, lsr #2
 80072c4:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 80072c8:	bfb8      	it	lt
 80072ca:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 80072ce:	2401      	movs	r4, #1
      wTimePhB = wTimePhA + wZ / 131072;
 80072d0:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 80072d4:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 80072d8:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
      pHandle->highDuty = wTimePhC;
 80072dc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
      pHandle->lowDuty = wTimePhB;
 80072e0:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 80072e2:	87c2      	strh	r2, [r0, #62]	; 0x3e

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 80072e4:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 80072e8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80072ec:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80072f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80072f4:	b292      	uxth	r2, r2
 80072f6:	b289      	uxth	r1, r1
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 80072fc:	8642      	strh	r2, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 80072fe:	8681      	strh	r1, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8007300:	86c3      	strh	r3, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 8007302:	d118      	bne.n	8007336 <PWMC_SetPhaseVoltage+0xda>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8007304:	f9b0 4048 	ldrsh.w	r4, [r0, #72]	; 0x48
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ib > 0 )
 8007308:	f9b0 504a 	ldrsh.w	r5, [r0, #74]	; 0x4a
    if ( pHandle->Ia > 0 )
 800730c:	2c00      	cmp	r4, #0
      pHandle->CntPhA += pHandle->DTCompCnt;
 800730e:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 8007312:	bfcc      	ite	gt
 8007314:	1912      	addgt	r2, r2, r4
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8007316:	1b12      	suble	r2, r2, r4
 8007318:	b292      	uxth	r2, r2
 800731a:	8642      	strh	r2, [r0, #50]	; 0x32
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 800731c:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
    if ( pHandle->Ib > 0 )
 8007320:	2d00      	cmp	r5, #0
      pHandle->CntPhB += pHandle->DTCompCnt;
 8007322:	bfcc      	ite	gt
 8007324:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8007326:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 8007328:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 800732a:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 800732c:	bfcc      	ite	gt
 800732e:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8007330:	1b1b      	suble	r3, r3, r4
 8007332:	8681      	strh	r1, [r0, #52]	; 0x34
 8007334:	86c3      	strh	r3, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8007336:	6983      	ldr	r3, [r0, #24]
}
 8007338:	b003      	add	sp, #12
 800733a:	bc70      	pop	{r4, r5, r6}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 800733c:	4718      	bx	r3
      if ( wX <= 0 )
 800733e:	2c00      	cmp	r4, #0
 8007340:	dd47      	ble.n	80073d2 <PWMC_SetPhaseVoltage+0x176>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8007342:	1aa5      	subs	r5, r4, r2
 8007344:	bf44      	itt	mi
 8007346:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 800734a:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 800734e:	2900      	cmp	r1, #0
 8007350:	bfb8      	it	lt
 8007352:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 8007356:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 800735a:	bfb8      	it	lt
 800735c:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 8007360:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8007364:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 8007366:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8007368:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 800736c:	bfb8      	it	lt
 800736e:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8007372:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8007376:	bfb8      	it	lt
 8007378:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 800737c:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->highDuty = wTimePhC;
 8007380:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 8007384:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8007386:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 8007388:	e7ac      	b.n	80072e4 <PWMC_SetPhaseVoltage+0x88>
    if ( wZ < 0 )
 800738a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800738e:	db69      	blt.n	8007464 <PWMC_SetPhaseVoltage+0x208>
      if ( wX <= 0 )
 8007390:	2c00      	cmp	r4, #0
 8007392:	dd43      	ble.n	800741c <PWMC_SetPhaseVoltage+0x1c0>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8007394:	1b2d      	subs	r5, r5, r4
 8007396:	bf48      	it	mi
 8007398:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 800739c:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80073a0:	bf48      	it	mi
 80073a2:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	bfb8      	it	lt
 80073aa:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 80073ae:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80073b2:	ea4f 0296 	mov.w	r2, r6, lsr #2
 80073b6:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 80073ba:	bfb8      	it	lt
 80073bc:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 80073c0:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 80073c4:	eb03 4164 	add.w	r1, r3, r4, asr #17
        pHandle->lowDuty = wTimePhB;
 80073c8:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 80073ca:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 80073cc:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80073d0:	e788      	b.n	80072e4 <PWMC_SetPhaseVoltage+0x88>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80073d2:	1b2d      	subs	r5, r5, r4
 80073d4:	bf44      	itt	mi
 80073d6:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 80073da:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 80073de:	2b00      	cmp	r3, #0
 80073e0:	bfb8      	it	lt
 80073e2:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 80073e6:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 80073ea:	bfb8      	it	lt
 80073ec:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 80073f0:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 80073f4:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80073f6:	ea4f 0296 	mov.w	r2, r6, lsr #2
 80073fa:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 80073fe:	bfb8      	it	lt
 8007400:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8007404:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8007408:	bfb8      	it	lt
 800740a:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 800740e:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->highDuty = wTimePhB;
 8007412:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 8007416:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8007418:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 800741a:	e763      	b.n	80072e4 <PWMC_SetPhaseVoltage+0x88>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800741c:	1aa5      	subs	r5, r4, r2
 800741e:	bf44      	itt	mi
 8007420:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8007424:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8007428:	2900      	cmp	r1, #0
 800742a:	bfb8      	it	lt
 800742c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 8007430:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 8007434:	bfb8      	it	lt
 8007436:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 800743a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800743e:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 8007440:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8007442:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8007446:	bfb8      	it	lt
 8007448:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 800744c:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8007450:	bfb8      	it	lt
 8007452:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8007456:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 800745a:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 800745c:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 800745e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8007462:	e73f      	b.n	80072e4 <PWMC_SetPhaseVoltage+0x88>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8007464:	1aad      	subs	r5, r5, r2
 8007466:	bf44      	itt	mi
 8007468:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 800746c:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8007470:	2900      	cmp	r1, #0
 8007472:	bfbc      	itt	lt
 8007474:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8007478:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 800747c:	2b00      	cmp	r3, #0
 800747e:	bfb8      	it	lt
 8007480:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8007484:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8007488:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 800748c:	bfb8      	it	lt
 800748e:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 8007492:	2404      	movs	r4, #4
      wTimePhB = wTimePhA + wZ / 131072;
 8007494:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8007498:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 800749c:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 80074a0:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 80074a2:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 80074a4:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80074a8:	e71c      	b.n	80072e4 <PWMC_SetPhaseVoltage+0x88>
 80074aa:	bf00      	nop

080074ac <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 80074ac:	6883      	ldr	r3, [r0, #8]
 80074ae:	4718      	bx	r3

080074b0 <PWMC_SwitchOnPWM>:
  * @brief  Switches PWM generation on
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOnPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOnPwm( pHandle );
 80074b0:	68c3      	ldr	r3, [r0, #12]
 80074b2:	4718      	bx	r3

080074b4 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 80074b4:	b510      	push	{r4, lr}
 80074b6:	4604      	mov	r4, r0
 80074b8:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 80074ba:	b199      	cbz	r1, 80074e4 <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 80074bc:	2901      	cmp	r1, #1
 80074be:	d002      	beq.n	80074c6 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 80074c0:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 80074c2:	b002      	add	sp, #8
 80074c4:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 80074c6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80074ca:	b1cb      	cbz	r3, 8007500 <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 80074cc:	3b01      	subs	r3, #1
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	9101      	str	r1, [sp, #4]
 80074d2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1f2      	bne.n	80074c0 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 80074da:	6903      	ldr	r3, [r0, #16]
 80074dc:	4798      	blx	r3
        retVal = true;
 80074de:	9901      	ldr	r1, [sp, #4]
 80074e0:	4608      	mov	r0, r1
 80074e2:	e7ee      	b.n	80074c2 <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 80074e4:	f7ff ffe2 	bl	80074ac <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 80074e8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80074ec:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1e5      	bne.n	80074c0 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 80074f4:	4620      	mov	r0, r4
 80074f6:	6923      	ldr	r3, [r4, #16]
 80074f8:	4798      	blx	r3
      retVal = true;
 80074fa:	2001      	movs	r0, #1
}
 80074fc:	b002      	add	sp, #8
 80074fe:	bd10      	pop	{r4, pc}
      retVal = true;
 8007500:	4608      	mov	r0, r1
}
 8007502:	b002      	add	sp, #8
 8007504:	bd10      	pop	{r4, pc}
 8007506:	bf00      	nop

08007508 <PWMC_TurnOnLowSides>:
  *
  * @param  pHandle: handle on the target instance of the PWMC component
  */
__weak void PWMC_TurnOnLowSides( PWMC_Handle_t * pHandle )
{
  pHandle->pFctTurnOnLowSides( pHandle );
 8007508:	6943      	ldr	r3, [r0, #20]
 800750a:	4718      	bx	r3

0800750c <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 800750c:	69c3      	ldr	r3, [r0, #28]
 800750e:	4718      	bx	r3

08007510 <RVBS_Clear>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
 8007510:	b430      	push	{r4, r5}
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8007512:	8b82      	ldrh	r2, [r0, #28]
 8007514:	8b44      	ldrh	r4, [r0, #26]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8007516:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8007518:	4414      	add	r4, r2
 800751a:	0864      	lsrs	r4, r4, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800751c:	b14b      	cbz	r3, 8007532 <RVBS_Clear+0x22>
  {
    pHandle->aBuffer[index] = aux;
 800751e:	6a05      	ldr	r5, [r0, #32]
 8007520:	2300      	movs	r3, #0
 8007522:	b29a      	uxth	r2, r3
 8007524:	3301      	adds	r3, #1
 8007526:	f825 4012 	strh.w	r4, [r5, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800752a:	8b01      	ldrh	r1, [r0, #24]
 800752c:	b29a      	uxth	r2, r3
 800752e:	4291      	cmp	r1, r2
 8007530:	d8f7      	bhi.n	8007522 <RVBS_Clear+0x12>
  }
  pHandle->_Super.LatestConv = aux;
 8007532:	2300      	movs	r3, #0
 8007534:	f364 030f 	bfi	r3, r4, #0, #16
 8007538:	f364 431f 	bfi	r3, r4, #16, #16
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 800753c:	2200      	movs	r2, #0
}
 800753e:	bc30      	pop	{r4, r5}
  pHandle->_Super.LatestConv = aux;
 8007540:	6043      	str	r3, [r0, #4]
  pHandle->index = 0;
 8007542:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8007546:	4770      	bx	lr

08007548 <RVBS_Init>:
{
 8007548:	b510      	push	{r4, lr}
 800754a:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 800754c:	300c      	adds	r0, #12
 800754e:	f7fc fa45 	bl	80039dc <RCM_RegisterRegConv>
 8007552:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 8007556:	4620      	mov	r0, r4
 8007558:	f7ff ffda 	bl	8007510 <RVBS_Clear>
}
 800755c:	bd10      	pop	{r4, pc}
 800755e:	bf00      	nop

08007560 <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8007560:	88c3      	ldrh	r3, [r0, #6]
 8007562:	8b42      	ldrh	r2, [r0, #26]
 8007564:	429a      	cmp	r2, r3
 8007566:	d305      	bcc.n	8007574 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8007568:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 800756a:	4298      	cmp	r0, r3
 800756c:	bf8c      	ite	hi
 800756e:	2004      	movhi	r0, #4
 8007570:	2000      	movls	r0, #0
 8007572:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 8007574:	2002      	movs	r0, #2
  }
  return fault;
}
 8007576:	4770      	bx	lr

08007578 <RVBS_CalcAvVbus>:
{
 8007578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757a:	4605      	mov	r5, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800757c:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8007580:	f7fc fafe 	bl	8003b80 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 8007584:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007588:	4298      	cmp	r0, r3
 800758a:	d01c      	beq.n	80075c6 <RVBS_CalcAvVbus+0x4e>
    pHandle->aBuffer[pHandle->index] = hAux;
 800758c:	6a2f      	ldr	r7, [r5, #32]
 800758e:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8007592:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8007596:	8b2e      	ldrh	r6, [r5, #24]
 8007598:	b1d6      	cbz	r6, 80075d0 <RVBS_CalcAvVbus+0x58>
 800759a:	2300      	movs	r3, #0
    wtemp = 0;
 800759c:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 800759e:	f837 4013 	ldrh.w	r4, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 80075a2:	3301      	adds	r3, #1
 80075a4:	b2d9      	uxtb	r1, r3
 80075a6:	42b1      	cmp	r1, r6
      wtemp += pHandle->aBuffer[i];
 80075a8:	4422      	add	r2, r4
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 80075aa:	460b      	mov	r3, r1
 80075ac:	d3f7      	bcc.n	800759e <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 80075ae:	fbb2 f2f6 	udiv	r2, r2, r6
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 80075b2:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 80075b6:	80ea      	strh	r2, [r5, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 80075b8:	3e01      	subs	r6, #1
 80075ba:	42b3      	cmp	r3, r6
    pHandle->_Super.LatestConv = hAux;
 80075bc:	80a8      	strh	r0, [r5, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 80075be:	da09      	bge.n	80075d4 <RVBS_CalcAvVbus+0x5c>
      pHandle->index++;
 80075c0:	3301      	adds	r3, #1
 80075c2:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 80075c6:	4628      	mov	r0, r5
 80075c8:	f7ff ffca 	bl	8007560 <RVBS_CheckFaultState>
 80075cc:	8128      	strh	r0, [r5, #8]
}
 80075ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 80075d0:	80ee      	strh	r6, [r5, #6]
    pHandle->_Super.LatestConv = hAux;
 80075d2:	80a8      	strh	r0, [r5, #4]
      pHandle->index = 0;
 80075d4:	2300      	movs	r3, #0
 80075d6:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 80075da:	4628      	mov	r0, r5
 80075dc:	f7ff ffc0 	bl	8007560 <RVBS_CheckFaultState>
 80075e0:	8128      	strh	r0, [r5, #8]
}
 80075e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080075e4 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 80075e4:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 80075e6:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 80075e8:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 80075ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 80075f0:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 80075f2:	4770      	bx	lr

080075f4 <REMNG_Calc>:
__weak int32_t REMNG_Calc( RampExtMngr_Handle_t * pHandle )
{
  int32_t ret_val;
  int32_t current_ref;

  current_ref = pHandle->Ext;
 80075f4:	e9d0 3102 	ldrd	r3, r1, [r0, #8]

  /* Update the variable and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 80075f8:	2901      	cmp	r1, #1
 80075fa:	d90c      	bls.n	8007616 <REMNG_Calc+0x22>
{
 80075fc:	b410      	push	{r4}
 80075fe:	e9d0 4204 	ldrd	r4, r2, [r0, #16]
  {
    /* Increment/decrement the reference value. */
    current_ref += pHandle->IncDecAmount;

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep --;
 8007602:	3901      	subs	r1, #1
    current_ref += pHandle->IncDecAmount;
 8007604:	4423      	add	r3, r4
    pHandle->RampRemainingStep --;
 8007606:	60c1      	str	r1, [r0, #12]
  else
  {
    /* Do nothing. */
  }

  pHandle->Ext = current_ref;
 8007608:	6083      	str	r3, [r0, #8]
 800760a:	fb93 f2f2 	sdiv	r2, r3, r2
#else
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
#endif

  return ret_val;
}
 800760e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007612:	4610      	mov	r0, r2
 8007614:	4770      	bx	lr
  else if ( pHandle->RampRemainingStep == 1u )
 8007616:	d005      	beq.n	8007624 <REMNG_Calc+0x30>
 8007618:	6942      	ldr	r2, [r0, #20]
  pHandle->Ext = current_ref;
 800761a:	6083      	str	r3, [r0, #8]
 800761c:	fb93 f2f2 	sdiv	r2, r3, r2
}
 8007620:	4610      	mov	r0, r2
 8007622:	4770      	bx	lr
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8007624:	6842      	ldr	r2, [r0, #4]
 8007626:	6943      	ldr	r3, [r0, #20]
    pHandle->RampRemainingStep = 0u;
 8007628:	2100      	movs	r1, #0
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 800762a:	fb03 f302 	mul.w	r3, r3, r2
    pHandle->RampRemainingStep = 0u;
 800762e:	60c1      	str	r1, [r0, #12]
  pHandle->Ext = current_ref;
 8007630:	6083      	str	r3, [r0, #8]
}
 8007632:	4610      	mov	r0, r2
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop

08007638 <REMNG_RampCompleted>:
  * @retval bool It returns true if the ramp is completed, false otherwise.
  */
__weak bool REMNG_RampCompleted( RampExtMngr_Handle_t * pHandle )
{
  bool retVal = false;
  if ( pHandle->RampRemainingStep == 0u )
 8007638:	68c0      	ldr	r0, [r0, #12]
  {
    retVal = true;
  }
  return retVal;
}
 800763a:	fab0 f080 	clz	r0, r0
 800763e:	0940      	lsrs	r0, r0, #5
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop

08007644 <getScalingFactor>:
  uint32_t TargetAbs;
  int32_t aux;

  if ( Target < 0 )
  {
    aux = -Target;
 8007644:	2800      	cmp	r0, #0
 8007646:	bfb8      	it	lt
 8007648:	4240      	neglt	r0, r0
{
 800764a:	2301      	movs	r3, #1
  {
    TargetAbs = ( uint32_t )( Target );
  }
  for ( i = 1u; i < 32u; i++ )
  {
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 800764c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007650:	e002      	b.n	8007658 <getScalingFactor+0x14>
 8007652:	3301      	adds	r3, #1
  for ( i = 1u; i < 32u; i++ )
 8007654:	2b20      	cmp	r3, #32
 8007656:	d007      	beq.n	8007668 <getScalingFactor+0x24>
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8007658:	fa21 f203 	lsr.w	r2, r1, r3
    if ( TargetAbs >= limit )
 800765c:	4290      	cmp	r0, r2
 800765e:	d3f8      	bcc.n	8007652 <getScalingFactor+0xe>
 8007660:	3b01      	subs	r3, #1
 8007662:	2001      	movs	r0, #1
 8007664:	4098      	lsls	r0, r3
    {
      break;
    }
  }
  return ( ( uint32_t )( 1u ) << ( i - 1u ) );
}
 8007666:	4770      	bx	lr
 8007668:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop

08007670 <REMNG_ExecRamp>:
{
 8007670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007674:	4604      	mov	r4, r0
 8007676:	460d      	mov	r5, r1
  if ( Durationms == 0u )
 8007678:	4690      	mov	r8, r2
 800767a:	b95a      	cbnz	r2, 8007694 <REMNG_ExecRamp+0x24>
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 800767c:	4608      	mov	r0, r1
 800767e:	f7ff ffe1 	bl	8007644 <getScalingFactor>
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8007682:	fb05 f500 	mul.w	r5, r5, r0
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 8007686:	6160      	str	r0, [r4, #20]
    pHandle->IncDecAmount = 0;
 8007688:	e9c4 8803 	strd	r8, r8, [r4, #12]
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 800768c:	60a5      	str	r5, [r4, #8]
}
 800768e:	2001      	movs	r0, #1
 8007690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8007694:	6943      	ldr	r3, [r0, #20]
 8007696:	6887      	ldr	r7, [r0, #8]
 8007698:	fb97 f7f3 	sdiv	r7, r7, r3
    uint32_t wScalingFactor = getScalingFactor( TargetFinal - current_ref );
 800769c:	1bce      	subs	r6, r1, r7
 800769e:	4630      	mov	r0, r6
 80076a0:	f7ff ffd0 	bl	8007644 <getScalingFactor>
 80076a4:	4682      	mov	sl, r0
    uint32_t wScalingFactor2 = getScalingFactor( current_ref );
 80076a6:	4638      	mov	r0, r7
 80076a8:	f7ff ffcc 	bl	8007644 <getScalingFactor>
 80076ac:	4681      	mov	r9, r0
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 80076ae:	4628      	mov	r0, r5
 80076b0:	f7ff ffc8 	bl	8007644 <getScalingFactor>
    if ( wScalingFactor <  wScalingFactor2 )
 80076b4:	45ca      	cmp	sl, r9
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 80076b6:	4603      	mov	r3, r0
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 80076b8:	6821      	ldr	r1, [r4, #0]
    pHandle->TargetFinal = TargetFinal;
 80076ba:	6065      	str	r5, [r4, #4]
 80076bc:	bf2c      	ite	cs
 80076be:	4648      	movcs	r0, r9
 80076c0:	4650      	movcc	r0, sl
      if ( wScalingFactor2 < wScalingFactor3 )
 80076c2:	4298      	cmp	r0, r3
 80076c4:	bf28      	it	cs
 80076c6:	4618      	movcs	r0, r3
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 80076c8:	fb01 f308 	mul.w	r3, r1, r8
    aux /= 1000u;
 80076cc:	4908      	ldr	r1, [pc, #32]	; (80076f0 <REMNG_ExecRamp+0x80>)
    pHandle->ScalingFactor = wScalingFactorMin;
 80076ce:	6160      	str	r0, [r4, #20]
    aux /= 1000u;
 80076d0:	fba1 2303 	umull	r2, r3, r1, r3
 80076d4:	099b      	lsrs	r3, r3, #6
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 80076d6:	fb07 f700 	mul.w	r7, r7, r0
    pHandle->RampRemainingStep++;
 80076da:	3301      	adds	r3, #1
    aux1 = ( TargetFinal - current_ref ) * ( int32_t )( pHandle->ScalingFactor );
 80076dc:	fb00 f006 	mul.w	r0, r0, r6
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 80076e0:	60a7      	str	r7, [r4, #8]
    aux1 /= ( int32_t )( pHandle->RampRemainingStep );
 80076e2:	fb90 f0f3 	sdiv	r0, r0, r3
    pHandle->IncDecAmount = aux1;
 80076e6:	e9c4 3003 	strd	r3, r0, [r4, #12]
}
 80076ea:	2001      	movs	r0, #1
 80076ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076f0:	10624dd3 	.word	0x10624dd3

080076f4 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 80076f4:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop

080076fc <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 80076fc:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop

08007704 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8007704:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop

0800770c <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 800770c:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8007710:	8a81      	ldrh	r1, [r0, #20]
{
 8007712:	b430      	push	{r4, r5}
  if ( *pMecSpeedUnit < 0 )
 8007714:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 8007716:	bfb8      	it	lt
 8007718:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800771a:	8ac5      	ldrh	r5, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800771c:	78c4      	ldrb	r4, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800771e:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 8007720:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8007722:	429d      	cmp	r5, r3
 8007724:	d817      	bhi.n	8007756 <SPD_IsMecSpeedReliable+0x4a>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8007726:	4299      	cmp	r1, r3
 8007728:	bf2c      	ite	cs
 800772a:	2300      	movcs	r3, #0
 800772c:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 800772e:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8007732:	8b05      	ldrh	r5, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 8007734:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 8007736:	bfb8      	it	lt
 8007738:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 800773a:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800773c:	428d      	cmp	r5, r1
 800773e:	d300      	bcc.n	8007742 <SPD_IsMecSpeedReliable+0x36>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8007740:	b15b      	cbz	r3, 800775a <SPD_IsMecSpeedReliable+0x4e>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8007742:	4294      	cmp	r4, r2
 8007744:	d901      	bls.n	800774a <SPD_IsMecSpeedReliable+0x3e>
    {
      bSpeedErrorNumber++;
 8007746:	3201      	adds	r2, #1
 8007748:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800774a:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 800774c:	1b10      	subs	r0, r2, r4
 800774e:	bf18      	it	ne
 8007750:	2001      	movne	r0, #1
 8007752:	bc30      	pop	{r4, r5}
 8007754:	4770      	bx	lr
    SpeedError = true;
 8007756:	2301      	movs	r3, #1
 8007758:	e7e9      	b.n	800772e <SPD_IsMecSpeedReliable+0x22>
      bSpeedErrorNumber = 0u;
 800775a:	4294      	cmp	r4, r2
 800775c:	bf88      	it	hi
 800775e:	2200      	movhi	r2, #0
 8007760:	e7f3      	b.n	800774a <SPD_IsMecSpeedReliable+0x3e>
 8007762:	bf00      	nop

08007764 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8007764:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8007768:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 800776c:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8007770:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 8007774:	b200      	sxth	r0, r0
 8007776:	4770      	bx	lr

08007778 <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 8007778:	b430      	push	{r4, r5}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800777a:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800777e:	f9b0 402c 	ldrsh.w	r4, [r0, #44]	; 0x2c
  pHandle->Mode = pHandle->ModeDefault;
 8007782:	f890 502a 	ldrb.w	r5, [r0, #42]	; 0x2a
  pHandle->PISpeed = pPI;
 8007786:	6101      	str	r1, [r0, #16]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8007788:	0424      	lsls	r4, r4, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800778a:	0419      	lsls	r1, r3, #16
  pHandle->TargetFinal = 0;
 800778c:	2300      	movs	r3, #0
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800778e:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->Mode = pHandle->ModeDefault;
 8007792:	7005      	strb	r5, [r0, #0]
  pHandle->SPD = SPD_Handle;
 8007794:	6142      	str	r2, [r0, #20]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 8007796:	bc30      	pop	{r4, r5}
  pHandle->TargetFinal = 0;
 8007798:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 800779a:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 800779c:	6183      	str	r3, [r0, #24]
}
 800779e:	4770      	bx	lr

080077a0 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 80077a0:	6141      	str	r1, [r0, #20]
}
 80077a2:	4770      	bx	lr

080077a4 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 80077a4:	6940      	ldr	r0, [r0, #20]
 80077a6:	4770      	bx	lr

080077a8 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 80077a8:	7803      	ldrb	r3, [r0, #0]
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d000      	beq.n	80077b0 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 80077ae:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 80077b0:	6900      	ldr	r0, [r0, #16]
 80077b2:	2100      	movs	r1, #0
 80077b4:	f7ff bc72 	b.w	800709c <PID_SetIntegralTerm>

080077b8 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 80077b8:	6840      	ldr	r0, [r0, #4]
 80077ba:	2800      	cmp	r0, #0
 80077bc:	bfbc      	itt	lt
 80077be:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 80077c2:	30ff      	addlt	r0, #255	; 0xff
}
 80077c4:	1400      	asrs	r0, r0, #16
 80077c6:	4770      	bx	lr

080077c8 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 80077c8:	6880      	ldr	r0, [r0, #8]
 80077ca:	2800      	cmp	r0, #0
 80077cc:	bfbc      	itt	lt
 80077ce:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 80077d2:	30ff      	addlt	r0, #255	; 0xff
}
 80077d4:	1400      	asrs	r0, r0, #16
 80077d6:	4770      	bx	lr

080077d8 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 80077d8:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 80077da:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 80077dc:	60c3      	str	r3, [r0, #12]
}
 80077de:	4770      	bx	lr

080077e0 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 80077e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 80077e2:	7806      	ldrb	r6, [r0, #0]
{
 80077e4:	4604      	mov	r4, r0
 80077e6:	460d      	mov	r5, r1
 80077e8:	4617      	mov	r7, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 80077ea:	b326      	cbz	r6, 8007836 <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 80077ec:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 80077ee:	8be1      	ldrh	r1, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 80077f0:	2800      	cmp	r0, #0
 80077f2:	bfbc      	itt	lt
 80077f4:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 80077f8:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 80077fa:	428d      	cmp	r5, r1
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 80077fc:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8007800:	dd01      	ble.n	8007806 <STC_ExecRamp+0x26>
      AllowedRange = false;
 8007802:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8007804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 8007806:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
 800780a:	42a9      	cmp	r1, r5
 800780c:	dcf9      	bgt.n	8007802 <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 800780e:	8c23      	ldrh	r3, [r4, #32]
 8007810:	429d      	cmp	r5, r3
 8007812:	da03      	bge.n	800781c <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8007814:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8007818:	42ab      	cmp	r3, r5
 800781a:	dbf2      	blt.n	8007802 <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 800781c:	b9af      	cbnz	r7, 800784a <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 800781e:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8007820:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8007822:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 8007824:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8007828:	bf0c      	ite	eq
 800782a:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 800782c:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 800782e:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 8007830:	61a3      	str	r3, [r4, #24]
 8007832:	2001      	movs	r0, #1
}
 8007834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8007836:	f7ff ffc7 	bl	80077c8 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 800783a:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
 800783c:	42b5      	cmp	r5, r6
 800783e:	dce0      	bgt.n	8007802 <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8007840:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8007844:	42ab      	cmp	r3, r5
 8007846:	dcdc      	bgt.n	8007802 <STC_ExecRamp+0x22>
 8007848:	e7e8      	b.n	800781c <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800784a:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 800784c:	4a07      	ldr	r2, [pc, #28]	; (800786c <STC_ExecRamp+0x8c>)
      pHandle->TargetFinal = hTargetFinal;
 800784e:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8007850:	fb07 f303 	mul.w	r3, r7, r3
      wAux /= 1000u;
 8007854:	fba2 2303 	umull	r2, r3, r2, r3
 8007858:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 800785a:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 800785c:	1a2d      	subs	r5, r5, r0
 800785e:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep++;
 8007860:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8007862:	fb95 f5f3 	sdiv	r5, r5, r3
      pHandle->IncDecAmount = wAux1;
 8007866:	2001      	movs	r0, #1
 8007868:	61a5      	str	r5, [r4, #24]
}
 800786a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800786c:	10624dd3 	.word	0x10624dd3

08007870 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8007870:	2300      	movs	r3, #0
 8007872:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8007874:	6183      	str	r3, [r0, #24]
}
 8007876:	4770      	bx	lr

08007878 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 8007878:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 800787a:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800787e:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8007880:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 8007882:	2a00      	cmp	r2, #0
 8007884:	bf08      	it	eq
 8007886:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 8007888:	2b01      	cmp	r3, #1
{
 800788a:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 800788c:	d90c      	bls.n	80078a8 <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 800788e:	6981      	ldr	r1, [r0, #24]
 8007890:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8007892:	3b01      	subs	r3, #1
 8007894:	2e00      	cmp	r6, #0
 8007896:	60c3      	str	r3, [r0, #12]
 8007898:	4630      	mov	r0, r6
 800789a:	db09      	blt.n	80078b0 <STC_CalcTorqueReference+0x38>
 800789c:	1405      	asrs	r5, r0, #16
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 800789e:	2a01      	cmp	r2, #1
 80078a0:	d00a      	beq.n	80078b8 <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 80078a2:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 80078a4:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 80078a6:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 80078a8:	d012      	beq.n	80078d0 <STC_CalcTorqueReference+0x58>
 80078aa:	2e00      	cmp	r6, #0
 80078ac:	4630      	mov	r0, r6
 80078ae:	daf5      	bge.n	800789c <STC_CalcTorqueReference+0x24>
 80078b0:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 80078b4:	30ff      	adds	r0, #255	; 0xff
 80078b6:	e7f1      	b.n	800789c <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 80078b8:	6960      	ldr	r0, [r4, #20]
 80078ba:	f7ff ff1f 	bl	80076fc <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 80078be:	1a28      	subs	r0, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 80078c0:	b201      	sxth	r1, r0
 80078c2:	6920      	ldr	r0, [r4, #16]
 80078c4:	f7ff fbf6 	bl	80070b4 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 80078c8:	0403      	lsls	r3, r0, #16
 80078ca:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 80078ce:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 80078d0:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 80078d4:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 80078d6:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 80078d8:	60c3      	str	r3, [r0, #12]
 80078da:	e7e0      	b.n	800789e <STC_CalcTorqueReference+0x26>

080078dc <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 80078dc:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop

080078e4 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 80078e4:	8bc0      	ldrh	r0, [r0, #30]
 80078e6:	4770      	bx	lr

080078e8 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 80078e8:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop

080078f0 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 80078f0:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 80078f4:	2200      	movs	r2, #0
 80078f6:	b299      	uxth	r1, r3
 80078f8:	f361 020f 	bfi	r2, r1, #0, #16
 80078fc:	0c1b      	lsrs	r3, r3, #16
 80078fe:	f363 421f 	bfi	r2, r3, #16, #16
{
 8007902:	b082      	sub	sp, #8
}
 8007904:	4610      	mov	r0, r2
 8007906:	b002      	add	sp, #8
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop

0800790c <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 800790c:	b510      	push	{r4, lr}
 800790e:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8007910:	6940      	ldr	r0, [r0, #20]
 8007912:	f7ff fef3 	bl	80076fc <SPD_GetAvrgMecSpeedUnit>
 8007916:	0400      	lsls	r0, r0, #16
 8007918:	6060      	str	r0, [r4, #4]
}
 800791a:	bd10      	pop	{r4, pc}

0800791c <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 800791c:	2300      	movs	r3, #0
 800791e:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8007920:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop

08007928 <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 8007928:	b430      	push	{r4, r5}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800792a:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 800792c:	8885      	ldrh	r5, [r0, #4]
  State_t LocalState =  pHandle->bState;
 800792e:	7804      	ldrb	r4, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8007930:	430b      	orrs	r3, r1
 8007932:	ea23 0202 	bic.w	r2, r3, r2
 8007936:	b292      	uxth	r2, r2
  pHandle->hFaultOccurred |= hSetErrors;
 8007938:	4329      	orrs	r1, r5

  if ( LocalState == FAULT_NOW )
 800793a:	2c0a      	cmp	r4, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800793c:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 800793e:	8081      	strh	r1, [r0, #4]
  if ( LocalState == FAULT_NOW )
 8007940:	d008      	beq.n	8007954 <STM_FaultProcessing+0x2c>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 8007942:	b912      	cbnz	r2, 800794a <STM_FaultProcessing+0x22>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 8007944:	4620      	mov	r0, r4
 8007946:	bc30      	pop	{r4, r5}
 8007948:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 800794a:	240a      	movs	r4, #10
 800794c:	7004      	strb	r4, [r0, #0]
}
 800794e:	4620      	mov	r0, r4
 8007950:	bc30      	pop	{r4, r5}
 8007952:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 8007954:	2a00      	cmp	r2, #0
 8007956:	d1f5      	bne.n	8007944 <STM_FaultProcessing+0x1c>
      pHandle->bState = FAULT_OVER;
 8007958:	240b      	movs	r4, #11
 800795a:	7004      	strb	r4, [r0, #0]
}
 800795c:	4620      	mov	r0, r4
 800795e:	bc30      	pop	{r4, r5}
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop

08007964 <STM_NextState>:
{
 8007964:	b508      	push	{r3, lr}
 8007966:	7803      	ldrb	r3, [r0, #0]
 8007968:	2b14      	cmp	r3, #20
 800796a:	d810      	bhi.n	800798e <STM_NextState+0x2a>
 800796c:	e8df f003 	tbb	[pc, r3]
 8007970:	240d545e 	.word	0x240d545e
 8007974:	390d352e 	.word	0x390d352e
 8007978:	0f0f3f3c 	.word	0x0f0f3f3c
 800797c:	47650b44 	.word	0x47650b44
 8007980:	504d1b4a 	.word	0x504d1b4a
 8007984:	5b          	.byte	0x5b
 8007985:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8007986:	290e      	cmp	r1, #14
 8007988:	d013      	beq.n	80079b2 <STM_NextState+0x4e>
      if ( bState == ANY_STOP )
 800798a:	2907      	cmp	r1, #7
 800798c:	d011      	beq.n	80079b2 <STM_NextState+0x4e>
 800798e:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8007992:	2b01      	cmp	r3, #1
 8007994:	d018      	beq.n	80079c8 <STM_NextState+0x64>
 8007996:	2907      	cmp	r1, #7
 8007998:	d016      	beq.n	80079c8 <STM_NextState+0x64>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 800799a:	2200      	movs	r2, #0
 800799c:	2180      	movs	r1, #128	; 0x80
 800799e:	f7ff ffc3 	bl	8007928 <STM_FaultProcessing>
 80079a2:	2000      	movs	r0, #0
}
 80079a4:	bd08      	pop	{r3, pc}
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 80079a6:	2914      	cmp	r1, #20
 80079a8:	d8f1      	bhi.n	800798e <STM_NextState+0x2a>
 80079aa:	4b26      	ldr	r3, [pc, #152]	; (8007a44 <STM_NextState+0xe0>)
 80079ac:	40cb      	lsrs	r3, r1
 80079ae:	07db      	lsls	r3, r3, #31
 80079b0:	d5ed      	bpl.n	800798e <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 80079b2:	7001      	strb	r1, [r0, #0]
 80079b4:	2001      	movs	r0, #1
}
 80079b6:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 80079b8:	2911      	cmp	r1, #17
 80079ba:	d8ee      	bhi.n	800799a <STM_NextState+0x36>
 80079bc:	4b22      	ldr	r3, [pc, #136]	; (8007a48 <STM_NextState+0xe4>)
 80079be:	40cb      	lsrs	r3, r1
 80079c0:	07da      	lsls	r2, r3, #31
 80079c2:	d4f6      	bmi.n	80079b2 <STM_NextState+0x4e>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80079c4:	2903      	cmp	r1, #3
 80079c6:	d1e8      	bne.n	800799a <STM_NextState+0x36>
 80079c8:	2000      	movs	r0, #0
}
 80079ca:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 80079cc:	2913      	cmp	r1, #19
 80079ce:	d0f0      	beq.n	80079b2 <STM_NextState+0x4e>
 80079d0:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 80079d4:	2b05      	cmp	r3, #5
 80079d6:	d1dc      	bne.n	8007992 <STM_NextState+0x2e>
 80079d8:	e7eb      	b.n	80079b2 <STM_NextState+0x4e>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 80079da:	1f8b      	subs	r3, r1, #6
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d8d6      	bhi.n	800798e <STM_NextState+0x2a>
 80079e0:	e7e7      	b.n	80079b2 <STM_NextState+0x4e>
      if ( bState == STOP )
 80079e2:	2908      	cmp	r1, #8
 80079e4:	d1d3      	bne.n	800798e <STM_NextState+0x2a>
 80079e6:	e7e4      	b.n	80079b2 <STM_NextState+0x4e>
      if ( bState == STOP_IDLE )
 80079e8:	2909      	cmp	r1, #9
 80079ea:	d1d0      	bne.n	800798e <STM_NextState+0x2a>
 80079ec:	e7e1      	b.n	80079b2 <STM_NextState+0x4e>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 80079ee:	2900      	cmp	r1, #0
 80079f0:	d0df      	beq.n	80079b2 <STM_NextState+0x4e>
 80079f2:	290c      	cmp	r1, #12
 80079f4:	d1cb      	bne.n	800798e <STM_NextState+0x2a>
 80079f6:	e7dc      	b.n	80079b2 <STM_NextState+0x4e>
      if ( bState == IDLE )
 80079f8:	2900      	cmp	r1, #0
 80079fa:	d0da      	beq.n	80079b2 <STM_NextState+0x4e>
 80079fc:	e7c7      	b.n	800798e <STM_NextState+0x2a>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 80079fe:	2902      	cmp	r1, #2
 8007a00:	d1c3      	bne.n	800798a <STM_NextState+0x26>
 8007a02:	e7d6      	b.n	80079b2 <STM_NextState+0x4e>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8007a04:	2911      	cmp	r1, #17
 8007a06:	d1c0      	bne.n	800798a <STM_NextState+0x26>
 8007a08:	e7d3      	b.n	80079b2 <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8007a0a:	2904      	cmp	r1, #4
 8007a0c:	d1bd      	bne.n	800798a <STM_NextState+0x26>
 8007a0e:	e7d0      	b.n	80079b2 <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8007a10:	1f0b      	subs	r3, r1, #4
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d8b9      	bhi.n	800798a <STM_NextState+0x26>
 8007a16:	e7cc      	b.n	80079b2 <STM_NextState+0x4e>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8007a18:	2907      	cmp	r1, #7
 8007a1a:	d0ca      	beq.n	80079b2 <STM_NextState+0x4e>
 8007a1c:	f1a1 030d 	sub.w	r3, r1, #13
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d8b4      	bhi.n	800798e <STM_NextState+0x2a>
 8007a24:	e7c5      	b.n	80079b2 <STM_NextState+0x4e>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 8007a26:	2912      	cmp	r1, #18
 8007a28:	d1af      	bne.n	800798a <STM_NextState+0x26>
 8007a2a:	e7c2      	b.n	80079b2 <STM_NextState+0x4e>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8007a2c:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d0be      	beq.n	80079b2 <STM_NextState+0x4e>
           || ( bState == ICLWAIT ) )
 8007a34:	290c      	cmp	r1, #12
 8007a36:	d1ae      	bne.n	8007996 <STM_NextState+0x32>
 8007a38:	e7bb      	b.n	80079b2 <STM_NextState+0x4e>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 8007a3a:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 8007a3e:	2b07      	cmp	r3, #7
 8007a40:	d1a5      	bne.n	800798e <STM_NextState+0x2a>
 8007a42:	e7b6      	b.n	80079b2 <STM_NextState+0x4e>
 8007a44:	00140080 	.word	0x00140080
 8007a48:	00030092 	.word	0x00030092

08007a4c <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 8007a4c:	7800      	ldrb	r0, [r0, #0]
 8007a4e:	4770      	bx	lr

08007a50 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 8007a50:	7803      	ldrb	r3, [r0, #0]
 8007a52:	2b0b      	cmp	r3, #11
 8007a54:	d001      	beq.n	8007a5a <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 8007a56:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 8007a58:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 8007a5a:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8007a5c:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 8007a5e:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8007a60:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 8007a62:	2001      	movs	r0, #1
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop

08007a68 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 8007a68:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 8007a6a:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 8007a6c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop

08007a74 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 8007a74:	f7ff b818 	b.w	8006aa8 <FCP_Init>

08007a78 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8007a78:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
 8007a7c:	b16a      	cbz	r2, 8007a9a <UFCP_TX_IRQ_Handler+0x22>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 8007a7e:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
 8007a82:	4603      	mov	r3, r0
 8007a84:	b1a2      	cbz	r2, 8007ab0 <UFCP_TX_IRQ_Handler+0x38>
 8007a86:	2a01      	cmp	r2, #1
 8007a88:	d108      	bne.n	8007a9c <UFCP_TX_IRQ_Handler+0x24>
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
        break;

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 8007a8a:	7d41      	ldrb	r1, [r0, #21]
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8007a8c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8007a90:	6041      	str	r1, [r0, #4]

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 8007a92:	3201      	adds	r2, #1
 8007a94:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 8007a98:	4770      	bx	lr
 8007a9a:	4770      	bx	lr
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8007a9c:	7d41      	ldrb	r1, [r0, #21]
 8007a9e:	3101      	adds	r1, #1
 8007aa0:	428a      	cmp	r2, r1
 8007aa2:	dc07      	bgt.n	8007ab4 <UFCP_TX_IRQ_Handler+0x3c>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 8007aa4:	1881      	adds	r1, r0, r2
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8007aa6:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
 8007aaa:	7d09      	ldrb	r1, [r1, #20]
 8007aac:	6041      	str	r1, [r0, #4]
    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8007aae:	e7f0      	b.n	8007a92 <UFCP_TX_IRQ_Handler+0x1a>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 8007ab0:	7d01      	ldrb	r1, [r0, #20]
        break;
 8007ab2:	e7eb      	b.n	8007a8c <UFCP_TX_IRQ_Handler+0x14>
{
 8007ab4:	b430      	push	{r4, r5}
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8007ab6:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 8007aba:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
 8007abe:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8007ac0:	68d1      	ldr	r1, [r2, #12]
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8007ac2:	e9d0 0400 	ldrd	r0, r4, [r0]
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8007ac6:	2500      	movs	r5, #0
 8007ac8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007acc:	60d1      	str	r1, [r2, #12]
 8007ace:	f883 5097 	strb.w	r5, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8007ad2:	4623      	mov	r3, r4
}
 8007ad4:	bc30      	pop	{r4, r5}
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8007ad6:	4718      	bx	r3

08007ad8 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8007ad8:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8007adc:	b10b      	cbz	r3, 8007ae2 <UFCP_Receive+0xa>
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8007ade:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8007ae0:	4770      	bx	lr
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 8007ae2:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8007aec:	68d3      	ldr	r3, [r2, #12]
 8007aee:	f043 0320 	orr.w	r3, r3, #32
 8007af2:	60d3      	str	r3, [r2, #12]
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8007af4:	2002      	movs	r0, #2
 8007af6:	4770      	bx	lr

08007af8 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8007af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007afa:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8007afc:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 8007b00:	b108      	cbz	r0, 8007b06 <UFCP_Send+0xe>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8007b02:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8007b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while ( size-- ) *dest++ = *buffer++;
 8007b06:	1e58      	subs	r0, r3, #1
    pHandle->TxFrame.Code = code;
 8007b08:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 8007b0a:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8007b0c:	b2c0      	uxtb	r0, r0
    uint8_t *dest = pHandle->TxFrame.Buffer;
 8007b0e:	f104 0c16 	add.w	ip, r4, #22
    while ( size-- ) *dest++ = *buffer++;
 8007b12:	b34b      	cbz	r3, 8007b68 <UFCP_Send+0x70>
 8007b14:	f104 011a 	add.w	r1, r4, #26
 8007b18:	1d17      	adds	r7, r2, #4
 8007b1a:	45bc      	cmp	ip, r7
 8007b1c:	bf38      	it	cc
 8007b1e:	428a      	cmpcc	r2, r1
 8007b20:	d336      	bcc.n	8007b90 <UFCP_Send+0x98>
 8007b22:	2807      	cmp	r0, #7
 8007b24:	d934      	bls.n	8007b90 <UFCP_Send+0x98>
 8007b26:	0899      	lsrs	r1, r3, #2
 8007b28:	3901      	subs	r1, #1
 8007b2a:	b2c9      	uxtb	r1, r1
 8007b2c:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 8007b30:	4665      	mov	r5, ip
 8007b32:	4611      	mov	r1, r2
 8007b34:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b38:	f845 6b04 	str.w	r6, [r5], #4
 8007b3c:	42b9      	cmp	r1, r7
 8007b3e:	d1f9      	bne.n	8007b34 <UFCP_Send+0x3c>
 8007b40:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 8007b44:	1a40      	subs	r0, r0, r1
 8007b46:	428b      	cmp	r3, r1
 8007b48:	b2c0      	uxtb	r0, r0
 8007b4a:	eb02 0601 	add.w	r6, r2, r1
 8007b4e:	eb0c 0501 	add.w	r5, ip, r1
 8007b52:	d009      	beq.n	8007b68 <UFCP_Send+0x70>
 8007b54:	5c53      	ldrb	r3, [r2, r1]
 8007b56:	f80c 3001 	strb.w	r3, [ip, r1]
 8007b5a:	b128      	cbz	r0, 8007b68 <UFCP_Send+0x70>
 8007b5c:	7873      	ldrb	r3, [r6, #1]
 8007b5e:	706b      	strb	r3, [r5, #1]
 8007b60:	2801      	cmp	r0, #1
 8007b62:	d001      	beq.n	8007b68 <UFCP_Send+0x70>
 8007b64:	78b3      	ldrb	r3, [r6, #2]
 8007b66:	70ab      	strb	r3, [r5, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8007b68:	f104 0014 	add.w	r0, r4, #20
 8007b6c:	f7fe ffb0 	bl	8006ad0 <FCP_CalcCRC>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 8007b70:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8007b74:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 8007b78:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8007b7a:	2301      	movs	r3, #1
    pHandle->TxFrameLevel = 0;
 8007b7c:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8007b80:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8007b84:	68d3      	ldr	r3, [r2, #12]
 8007b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b8a:	60d3      	str	r3, [r2, #12]
 8007b8c:	2002      	movs	r0, #2
}
 8007b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b90:	3001      	adds	r0, #1
 8007b92:	4410      	add	r0, r2
 8007b94:	f104 0315 	add.w	r3, r4, #21
    while ( size-- ) *dest++ = *buffer++;
 8007b98:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007b9c:	f803 1f01 	strb.w	r1, [r3, #1]!
 8007ba0:	4282      	cmp	r2, r0
 8007ba2:	d1f9      	bne.n	8007b98 <UFCP_Send+0xa0>
 8007ba4:	e7e0      	b.n	8007b68 <UFCP_Send+0x70>
 8007ba6:	bf00      	nop

08007ba8 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8007ba8:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8007bac:	b90b      	cbnz	r3, 8007bb2 <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8007bae:	482c      	ldr	r0, [pc, #176]	; (8007c60 <UFCP_RX_IRQ_Handler+0xb8>)
}
 8007bb0:	4770      	bx	lr
{
 8007bb2:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 8007bb4:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
{
 8007bb8:	b083      	sub	sp, #12
 8007bba:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 8007bbc:	b2ca      	uxtb	r2, r1
    switch ( pBaseHandle->RxFrameLevel )
 8007bbe:	b1d3      	cbz	r3, 8007bf6 <UFCP_RX_IRQ_Handler+0x4e>
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d00d      	beq.n	8007be0 <UFCP_RX_IRQ_Handler+0x38>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8007bc4:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
 8007bc8:	3101      	adds	r1, #1
 8007bca:	428b      	cmp	r3, r1
 8007bcc:	dc1d      	bgt.n	8007c0a <UFCP_RX_IRQ_Handler+0x62>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8007bce:	18c1      	adds	r1, r0, r3
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8007bd0:	4823      	ldr	r0, [pc, #140]	; (8007c60 <UFCP_RX_IRQ_Handler+0xb8>)
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8007bd2:	f881 2099 	strb.w	r2, [r1, #153]	; 0x99
          pBaseHandle->RxFrameLevel++;
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8007bdc:	b003      	add	sp, #12
 8007bde:	bd30      	pop	{r4, r5, pc}
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 8007be0:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrameLevel++;
 8007be2:	bf54      	ite	pl
 8007be4:	2302      	movpl	r3, #2
          pBaseHandle->RxFrameLevel =0 ;
 8007be6:	2300      	movmi	r3, #0
        pBaseHandle->RxFrame.Size = rx_byte;
 8007be8:	f880 209a 	strb.w	r2, [r0, #154]	; 0x9a
          pBaseHandle->RxFrameLevel =0 ;
 8007bec:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8007bf0:	481b      	ldr	r0, [pc, #108]	; (8007c60 <UFCP_RX_IRQ_Handler+0xb8>)
}
 8007bf2:	b003      	add	sp, #12
 8007bf4:	bd30      	pop	{r4, r5, pc}
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8007bf6:	8a01      	ldrh	r1, [r0, #16]
        pBaseHandle->RxFrame.Code = rx_byte;
 8007bf8:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
        pBaseHandle->RxFrameLevel++;
 8007bfc:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8007bfe:	8241      	strh	r1, [r0, #18]
        pBaseHandle->RxFrameLevel++;
 8007c00:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 8007c04:	4817      	ldr	r0, [pc, #92]	; (8007c64 <UFCP_RX_IRQ_Handler+0xbc>)
}
 8007c06:	b003      	add	sp, #12
 8007c08:	bd30      	pop	{r4, r5, pc}
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 8007c0a:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 8007c0e:	f880 211b 	strb.w	r2, [r0, #283]	; 0x11b
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8007c12:	68cb      	ldr	r3, [r1, #12]
          pBaseHandle->RxTimeoutCountdown = 0;
 8007c14:	2200      	movs	r2, #0
 8007c16:	f023 0320 	bic.w	r3, r3, #32
 8007c1a:	8242      	strh	r2, [r0, #18]
 8007c1c:	60cb      	str	r3, [r1, #12]
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8007c1e:	3099      	adds	r0, #153	; 0x99
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8007c20:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8007c24:	f7fe ff54 	bl	8006ad0 <FCP_CalcCRC>
 8007c28:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 8007c2c:	4283      	cmp	r3, r0
 8007c2e:	d10a      	bne.n	8007c46 <UFCP_RX_IRQ_Handler+0x9e>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8007c30:	6820      	ldr	r0, [r4, #0]
 8007c32:	68a5      	ldr	r5, [r4, #8]
 8007c34:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8007c38:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 8007c3c:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 8007c40:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8007c42:	4809      	ldr	r0, [pc, #36]	; (8007c68 <UFCP_RX_IRQ_Handler+0xc0>)
 8007c44:	e7d5      	b.n	8007bf2 <UFCP_RX_IRQ_Handler+0x4a>
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8007c46:	4620      	mov	r0, r4
 8007c48:	2301      	movs	r3, #1
            error_code = FCP_MSG_RX_BAD_CRC;
 8007c4a:	240a      	movs	r4, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8007c4c:	f10d 0207 	add.w	r2, sp, #7
 8007c50:	21ff      	movs	r1, #255	; 0xff
            error_code = FCP_MSG_RX_BAD_CRC;
 8007c52:	f88d 4007 	strb.w	r4, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8007c56:	f7ff ff4f 	bl	8007af8 <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8007c5a:	4803      	ldr	r0, [pc, #12]	; (8007c68 <UFCP_RX_IRQ_Handler+0xc0>)
  return ret_val;
 8007c5c:	e7c9      	b.n	8007bf2 <UFCP_RX_IRQ_Handler+0x4a>
 8007c5e:	bf00      	nop
 8007c60:	08009824 	.word	0x08009824
 8007c64:	08009826 	.word	0x08009826
 8007c68:	08009828 	.word	0x08009828

08007c6c <UFCP_OVR_IRQ_Handler>:
{
 8007c6c:	b510      	push	{r4, lr}
 8007c6e:	b082      	sub	sp, #8
  error_code = UFCP_MSG_OVERRUN;
 8007c70:	2408      	movs	r4, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8007c72:	2301      	movs	r3, #1
 8007c74:	f10d 0207 	add.w	r2, sp, #7
 8007c78:	21ff      	movs	r1, #255	; 0xff
  error_code = UFCP_MSG_OVERRUN;
 8007c7a:	f88d 4007 	strb.w	r4, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8007c7e:	f7ff ff3b 	bl	8007af8 <UFCP_Send>
}
 8007c82:	b002      	add	sp, #8
 8007c84:	bd10      	pop	{r4, pc}
 8007c86:	bf00      	nop

08007c88 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 8007c8e:	4770      	bx	lr

08007c90 <VSS_Clear>:
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 8007c90:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8007c92:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 8007c94:	85c2      	strh	r2, [r0, #46]	; 0x2e
  pHandle->wElSpeedDpp32 = 0;
 8007c96:	e9c0 3308 	strd	r3, r3, [r0, #32]
  pHandle->_Super.bSpeedErrorNumber = 0u;
 8007c9a:	7003      	strb	r3, [r0, #0]
  pHandle->_Super.hElAngle = 0;
 8007c9c:	6043      	str	r3, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 8007c9e:	60c3      	str	r3, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = 0;
 8007ca0:	8243      	strh	r3, [r0, #18]
  pHandle->hRemainingStep = 0u;
 8007ca2:	8503      	strh	r3, [r0, #40]	; 0x28
  pHandle->bTransitionStarted = false;
 8007ca4:	8583      	strh	r3, [r0, #44]	; 0x2c
  pHandle->hElAngleAccu = 0;
 8007ca6:	6303      	str	r3, [r0, #48]	; 0x30
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop

08007cac <VSS_Init>:
{
 8007cac:	b508      	push	{r3, lr}
  VSS_Clear( pHandle );
 8007cae:	f7ff ffef 	bl	8007c90 <VSS_Clear>
}
 8007cb2:	bd08      	pop	{r3, pc}

08007cb4 <VSS_CalcElAngle>:
  int16_t hAngleDiff;
  int16_t hAngleCorr;
  int32_t wAux;
  int16_t hSignCorr = 1;

  if ( pHandle->bCopyObserver == true )
 8007cb4:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 8007cb8:	b123      	cbz	r3, 8007cc4 <VSS_CalcElAngle+0x10>
  {
    hRetAngle = *( int16_t * )pInputVars_str;
 8007cba:	f9b1 2000 	ldrsh.w	r2, [r1]
    {
      hRetAngle = pHandle->hElAngleAccu;
    }
  }

  pHandle->_Super.hElAngle = hRetAngle;
 8007cbe:	8082      	strh	r2, [r0, #4]
  return hRetAngle;
}
 8007cc0:	4610      	mov	r0, r2
 8007cc2:	4770      	bx	lr
{
 8007cc4:	b4f0      	push	{r4, r5, r6, r7}
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8007cc6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8007cc8:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8007ccc:	88c7      	ldrh	r7, [r0, #6]
    if ( pHandle->bTransitionStarted == true )
 8007cce:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
                                 ( int16_t )pHandle->_Super.bElToMecRatio;
 8007cd2:	7844      	ldrb	r4, [r0, #1]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8007cd4:	fb95 f4f4 	sdiv	r4, r5, r4
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8007cd8:	442b      	add	r3, r5
 8007cda:	b21a      	sxth	r2, r3
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8007cdc:	443c      	add	r4, r7
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8007cde:	8602      	strh	r2, [r0, #48]	; 0x30
 8007ce0:	b29b      	uxth	r3, r3
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8007ce2:	80c4      	strh	r4, [r0, #6]
    if ( pHandle->bTransitionStarted == true )
 8007ce4:	b1de      	cbz	r6, 8007d1e <VSS_CalcElAngle+0x6a>
      if ( pHandle->hTransitionRemainingSteps == 0 )
 8007ce6:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
 8007cea:	b1e4      	cbz	r4, 8007d26 <VSS_CalcElAngle+0x72>
        pHandle->hTransitionRemainingSteps--;
 8007cec:	3c01      	subs	r4, #1
 8007cee:	b224      	sxth	r4, r4
 8007cf0:	85c4      	strh	r4, [r0, #46]	; 0x2e
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 8007cf2:	2d00      	cmp	r5, #0
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 8007cf4:	8809      	ldrh	r1, [r1, #0]
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 8007cf6:	db27      	blt.n	8007d48 <VSS_CalcElAngle+0x94>
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 8007cf8:	1acb      	subs	r3, r1, r3
 8007cfa:	b21b      	sxth	r3, r3
 8007cfc:	2601      	movs	r6, #1
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 8007cfe:	f9b0 5036 	ldrsh.w	r5, [r0, #54]	; 0x36
        wAux = ( int32_t )hAngleDiff * pHandle->hTransitionRemainingSteps;
 8007d02:	fb03 f404 	mul.w	r4, r3, r4
        if ( hAngleDiff >= 0 )
 8007d06:	2b00      	cmp	r3, #0
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 8007d08:	fb94 f4f5 	sdiv	r4, r4, r5
        hAngleCorr *= hSignCorr;
 8007d0c:	fb14 f406 	smulbb	r4, r4, r6
 8007d10:	b2a4      	uxth	r4, r4
        if ( hAngleDiff >= 0 )
 8007d12:	db12      	blt.n	8007d3a <VSS_CalcElAngle+0x86>
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 8007d14:	1b0c      	subs	r4, r1, r4
          pHandle->bTransitionLocked = true;
 8007d16:	2301      	movs	r3, #1
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 8007d18:	b222      	sxth	r2, r4
          pHandle->bTransitionLocked = true;
 8007d1a:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
  pHandle->_Super.hElAngle = hRetAngle;
 8007d1e:	8082      	strh	r2, [r0, #4]
}
 8007d20:	bcf0      	pop	{r4, r5, r6, r7}
 8007d22:	4610      	mov	r0, r2
 8007d24:	4770      	bx	lr
        hRetAngle = *( int16_t * )pInputVars_str;
 8007d26:	f9b1 2000 	ldrsh.w	r2, [r1]
        pHandle->_Super.bSpeedErrorNumber = 0u;
 8007d2a:	7004      	strb	r4, [r0, #0]
        pHandle->bTransitionEnded = true;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  pHandle->_Super.hElAngle = hRetAngle;
 8007d32:	8082      	strh	r2, [r0, #4]
}
 8007d34:	bcf0      	pop	{r4, r5, r6, r7}
 8007d36:	4610      	mov	r0, r2
 8007d38:	4770      	bx	lr
          if ( pHandle->bTransitionLocked == false )
 8007d3a:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d0ed      	beq.n	8007d1e <VSS_CalcElAngle+0x6a>
            hRetAngle = *( int16_t * )pInputVars_str + hAngleCorr;
 8007d42:	440c      	add	r4, r1
 8007d44:	b222      	sxth	r2, r4
 8007d46:	e7ea      	b.n	8007d1e <VSS_CalcElAngle+0x6a>
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
 8007d48:	1a5b      	subs	r3, r3, r1
 8007d4a:	b21b      	sxth	r3, r3
 8007d4c:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8007d50:	e7d5      	b.n	8007cfe <VSS_CalcElAngle+0x4a>
 8007d52:	bf00      	nop

08007d54 <VSS_CalcAvrgMecSpeedUnit>:
  */
__weak bool VSS_CalcAvrgMecSpeedUnit( VirtualSpeedSensor_Handle_t * pHandle, int16_t * hMecSpeedUnit )
{
  bool SpeedSensorReliability = false;

  if ( pHandle->hRemainingStep > 1u )
 8007d54:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8007d56:	2b01      	cmp	r3, #1
{
 8007d58:	b470      	push	{r4, r5, r6}
  if ( pHandle->hRemainingStep > 1u )
 8007d5a:	d925      	bls.n	8007da8 <VSS_CalcAvrgMecSpeedUnit+0x54>
  {
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8007d5c:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
 8007d60:	4413      	add	r3, r2
 8007d62:	6243      	str	r3, [r0, #36]	; 0x24
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	bfb8      	it	lt
 8007d68:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00

    /* Convert dpp into MecUnit */
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8007d6c:	8b42      	ldrh	r2, [r0, #26]
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8007d6e:	7846      	ldrb	r6, [r0, #1]
 8007d70:	69c5      	ldr	r5, [r0, #28]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8007d72:	bfb8      	it	lt
 8007d74:	33ff      	addlt	r3, #255	; 0xff
 8007d76:	141c      	asrs	r4, r3, #16
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8007d78:	fb04 f202 	mul.w	r2, r4, r2
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8007d7c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007d80:	0053      	lsls	r3, r2, #1
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8007d82:	fb05 f506 	mul.w	r5, r5, r6
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8007d86:	fb93 f3f5 	sdiv	r3, r3, r5
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8007d8a:	b21b      	sxth	r3, r3
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8007d8c:	81c4      	strh	r4, [r0, #14]
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8007d8e:	800b      	strh	r3, [r1, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;

    pHandle->hRemainingStep--;
 8007d90:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8007d92:	8183      	strh	r3, [r0, #12]
    pHandle->hRemainingStep--;
 8007d94:	1e53      	subs	r3, r2, #1
 8007d96:	8503      	strh	r3, [r0, #40]	; 0x28
  else
  {
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
  }
  /* If the transition is not done yet, we already know that speed is not reliable */
  if ( pHandle->bTransitionEnded == false )
 8007d98:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8007d9c:	b963      	cbnz	r3, 8007db8 <VSS_CalcAvrgMecSpeedUnit+0x64>
  {
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8007d9e:	78c2      	ldrb	r2, [r0, #3]
 8007da0:	7002      	strb	r2, [r0, #0]
  {
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
  }

  return ( SpeedSensorReliability );
}
 8007da2:	bc70      	pop	{r4, r5, r6}
 8007da4:	4618      	mov	r0, r3
 8007da6:	4770      	bx	lr
  else if ( pHandle->hRemainingStep == 1u )
 8007da8:	d009      	beq.n	8007dbe <VSS_CalcAvrgMecSpeedUnit+0x6a>
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8007daa:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8007dae:	800b      	strh	r3, [r1, #0]
  if ( pHandle->bTransitionEnded == false )
 8007db0:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d0f2      	beq.n	8007d9e <VSS_CalcAvrgMecSpeedUnit+0x4a>
}
 8007db8:	bc70      	pop	{r4, r5, r6}
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
 8007dba:	f7ff bca7 	b.w	800770c <SPD_IsMecSpeedReliable>
    *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 8007dbe:	f9b0 502a 	ldrsh.w	r5, [r0, #42]	; 0x2a
 8007dc2:	800d      	strh	r5, [r1, #0]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007dc4:	8b43      	ldrh	r3, [r0, #26]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 8007dc6:	69c2      	ldr	r2, [r0, #28]
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8007dc8:	7844      	ldrb	r4, [r0, #1]
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8007dca:	8185      	strh	r5, [r0, #12]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007dcc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 8007dd0:	fb02 f205 	mul.w	r2, r2, r5
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007dd4:	005b      	lsls	r3, r3, #1
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 8007dd6:	fb92 f3f3 	sdiv	r3, r2, r3
    pHandle->hRemainingStep = 0u;
 8007dda:	2200      	movs	r2, #0
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8007ddc:	fb14 f303 	smulbb	r3, r4, r3
 8007de0:	81c3      	strh	r3, [r0, #14]
    pHandle->hRemainingStep = 0u;
 8007de2:	8502      	strh	r2, [r0, #40]	; 0x28
 8007de4:	e7d8      	b.n	8007d98 <VSS_CalcAvrgMecSpeedUnit+0x44>
 8007de6:	bf00      	nop

08007de8 <VSS_SetMecAngle>:
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8007de8:	7843      	ldrb	r3, [r0, #1]
  pHandle->hElAngleAccu = hMecAngle;
 8007dea:	8601      	strh	r1, [r0, #48]	; 0x30
  pHandle->_Super.hElAngle = hMecAngle;
 8007dec:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8007dee:	fb91 f1f3 	sdiv	r1, r1, r3
 8007df2:	80c1      	strh	r1, [r0, #6]
}
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop

08007df8 <VSS_SetMecAcceleration>:
            instantaneous the final speed.
  * @retval none
  */
__weak void  VSS_SetMecAcceleration( VirtualSpeedSensor_Handle_t * pHandle, int16_t  hFinalMecSpeedUnit,
                              uint16_t hDurationms )
{
 8007df8:	b470      	push	{r4, r5, r6}
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 8007dfa:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8007dfe:	b984      	cbnz	r4, 8007e22 <VSS_SetMecAcceleration+0x2a>
  {
    if ( hDurationms == 0u )
 8007e00:	b98a      	cbnz	r2, 8007e26 <VSS_SetMecAcceleration+0x2e>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007e02:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8007e04:	69c4      	ldr	r4, [r0, #28]

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8007e06:	7845      	ldrb	r5, [r0, #1]
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8007e08:	8181      	strh	r1, [r0, #12]
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007e0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007e0e:	005b      	lsls	r3, r3, #1
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8007e10:	fb04 f401 	mul.w	r4, r4, r1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8007e14:	fb94 f3f3 	sdiv	r3, r4, r3
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8007e18:	fb15 f303 	smulbb	r3, r5, r3

      pHandle->hRemainingStep = 0u;
 8007e1c:	8502      	strh	r2, [r0, #40]	; 0x28

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8007e1e:	8541      	strh	r1, [r0, #42]	; 0x2a
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8007e20:	81c3      	strh	r3, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 8007e22:	bc70      	pop	{r4, r5, r6}
 8007e24:	4770      	bx	lr
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8007e26:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8007e28:	4d11      	ldr	r5, [pc, #68]	; (8007e70 <VSS_SetMecAcceleration+0x78>)
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007e2a:	8b44      	ldrh	r4, [r0, #26]
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8007e2c:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8007e30:	8541      	strh	r1, [r0, #42]	; 0x2a
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8007e32:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8007e36:	fba5 2303 	umull	r2, r3, r5, r3
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8007e3a:	69c2      	ldr	r2, [r0, #28]
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 8007e3c:	7845      	ldrb	r5, [r0, #1]
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8007e3e:	f3c3 138f 	ubfx	r3, r3, #6, #16
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007e42:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8007e46:	0064      	lsls	r4, r4, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8007e48:	fb02 f201 	mul.w	r2, r2, r1
      hNbrStep++;
 8007e4c:	3301      	adds	r3, #1
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8007e4e:	fb96 f1f5 	sdiv	r1, r6, r5
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8007e52:	fb92 f2f4 	sdiv	r2, r2, r4
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8007e56:	1a52      	subs	r2, r2, r1
      hNbrStep++;
 8007e58:	b29b      	uxth	r3, r3
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8007e5a:	0436      	lsls	r6, r6, #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8007e5c:	0412      	lsls	r2, r2, #16
 8007e5e:	fb92 f2f3 	sdiv	r2, r2, r3
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 8007e62:	fb05 f202 	mul.w	r2, r5, r2
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8007e66:	e9c0 2608 	strd	r2, r6, [r0, #32]
      pHandle->hRemainingStep = hNbrStep;
 8007e6a:	8503      	strh	r3, [r0, #40]	; 0x28
}
 8007e6c:	bc70      	pop	{r4, r5, r6}
 8007e6e:	4770      	bx	lr
 8007e70:	10624dd3 	.word	0x10624dd3

08007e74 <VSS_SetStartTransition>:
            (parameter hTransitionSteps = 0)
  */
__weak bool VSS_SetStartTransition( VirtualSpeedSensor_Handle_t * pHandle, bool bCommand )
{
  bool bAux = true;
  if ( bCommand == true )
 8007e74:	b151      	cbz	r1, 8007e8c <VSS_SetStartTransition+0x18>
  {
    pHandle->bTransitionStarted = true;

    if ( pHandle->hTransitionSteps == 0 )
 8007e76:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	; 0x36
    pHandle->bTransitionStarted = true;
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    if ( pHandle->hTransitionSteps == 0 )
 8007e80:	b923      	cbnz	r3, 8007e8c <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionEnded = true;
 8007e82:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
      pHandle->_Super.bSpeedErrorNumber = 0u;
 8007e86:	7003      	strb	r3, [r0, #0]
      bAux = false;
 8007e88:	4618      	mov	r0, r3
    }
  }
  return bAux;
}
 8007e8a:	4770      	bx	lr
  bool bAux = true;
 8007e8c:	2001      	movs	r0, #1
 8007e8e:	4770      	bx	lr

08007e90 <VSS_TransitionEnded>:
}

__weak bool VSS_TransitionEnded( VirtualSpeedSensor_Handle_t * pHandle )
{
    return pHandle->bTransitionEnded;
}
 8007e90:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop

08007e98 <VSS_SetCopyObserver>:
  * @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
  * @retval none
  */
__weak void VSS_SetCopyObserver( VirtualSpeedSensor_Handle_t * pHandle )
{
  pHandle->bCopyObserver = true;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
 8007e9e:	4770      	bx	lr

08007ea0 <RUC_Init>:
 8007ea0:	b430      	push	{r4, r5}
 8007ea2:	6681      	str	r1, [r0, #104]	; 0x68
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	9c02      	ldr	r4, [sp, #8]
 8007ea8:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 8007eac:	f880 1055 	strb.w	r1, [r0, #85]	; 0x55
 8007eb0:	f110 010c 	adds.w	r1, r0, #12
 8007eb4:	e9c0 231b 	strd	r2, r3, [r0, #108]	; 0x6c
 8007eb8:	6744      	str	r4, [r0, #116]	; 0x74
 8007eba:	d023      	beq.n	8007f04 <RUC_Init+0x64>
 8007ebc:	6943      	ldr	r3, [r0, #20]
 8007ebe:	b323      	cbz	r3, 8007f0a <RUC_Init+0x6a>
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	b323      	cbz	r3, 8007f0e <RUC_Init+0x6e>
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	b323      	cbz	r3, 8007f12 <RUC_Init+0x72>
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	b1c3      	cbz	r3, 8007efe <RUC_Init+0x5e>
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	2105      	movs	r1, #5
 8007ed0:	b1b3      	cbz	r3, 8007f00 <RUC_Init+0x60>
 8007ed2:	2204      	movs	r2, #4
 8007ed4:	2105      	movs	r1, #5
 8007ed6:	8805      	ldrh	r5, [r0, #0]
 8007ed8:	4c0f      	ldr	r4, [pc, #60]	; (8007f18 <RUC_Init+0x78>)
 8007eda:	2364      	movs	r3, #100	; 0x64
 8007edc:	fb03 f305 	mul.w	r3, r3, r5
 8007ee0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007ee4:	fba4 4303 	umull	r4, r3, r4, r3
 8007ee8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007eec:	2400      	movs	r4, #0
 8007eee:	099b      	lsrs	r3, r3, #6
 8007ef0:	6154      	str	r4, [r2, #20]
 8007ef2:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
 8007ef6:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
 8007efa:	bc30      	pop	{r4, r5}
 8007efc:	4770      	bx	lr
 8007efe:	2104      	movs	r1, #4
 8007f00:	1e4a      	subs	r2, r1, #1
 8007f02:	e7e8      	b.n	8007ed6 <RUC_Init+0x36>
 8007f04:	f04f 32ff 	mov.w	r2, #4294967295
 8007f08:	e7e5      	b.n	8007ed6 <RUC_Init+0x36>
 8007f0a:	2101      	movs	r1, #1
 8007f0c:	e7f8      	b.n	8007f00 <RUC_Init+0x60>
 8007f0e:	2102      	movs	r1, #2
 8007f10:	e7f6      	b.n	8007f00 <RUC_Init+0x60>
 8007f12:	2103      	movs	r1, #3
 8007f14:	e7f4      	b.n	8007f00 <RUC_Init+0x60>
 8007f16:	bf00      	nop
 8007f18:	10624dd3 	.word	0x10624dd3

08007f1c <RUC_Clear>:
 8007f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f20:	4604      	mov	r4, r0
 8007f22:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
 8007f24:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
 8007f28:	80e1      	strh	r1, [r4, #6]
 8007f2a:	2500      	movs	r5, #0
 8007f2c:	4638      	mov	r0, r7
 8007f2e:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
 8007f32:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8007f36:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 8007f3a:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 8007f3e:	460e      	mov	r6, r1
 8007f40:	f7ff fea6 	bl	8007c90 <VSS_Clear>
 8007f44:	4629      	mov	r1, r5
 8007f46:	4640      	mov	r0, r8
 8007f48:	f7ff fc46 	bl	80077d8 <STC_SetControlMode>
 8007f4c:	8861      	ldrh	r1, [r4, #2]
 8007f4e:	b2b6      	uxth	r6, r6
 8007f50:	fb11 f106 	smulbb	r1, r1, r6
 8007f54:	b209      	sxth	r1, r1
 8007f56:	4638      	mov	r0, r7
 8007f58:	f7ff ff46 	bl	8007de8 <VSS_SetMecAngle>
 8007f5c:	462a      	mov	r2, r5
 8007f5e:	4629      	mov	r1, r5
 8007f60:	4640      	mov	r0, r8
 8007f62:	f7ff fc3d 	bl	80077e0 <STC_ExecRamp>
 8007f66:	8a21      	ldrh	r1, [r4, #16]
 8007f68:	89a2      	ldrh	r2, [r4, #12]
 8007f6a:	fb11 f106 	smulbb	r1, r1, r6
 8007f6e:	b209      	sxth	r1, r1
 8007f70:	4640      	mov	r0, r8
 8007f72:	f7ff fc35 	bl	80077e0 <STC_ExecRamp>
 8007f76:	89e1      	ldrh	r1, [r4, #14]
 8007f78:	89a2      	ldrh	r2, [r4, #12]
 8007f7a:	fb11 f106 	smulbb	r1, r1, r6
 8007f7e:	4638      	mov	r0, r7
 8007f80:	b209      	sxth	r1, r1
 8007f82:	f7ff ff39 	bl	8007df8 <VSS_SetMecAcceleration>
 8007f86:	89a0      	ldrh	r0, [r4, #12]
 8007f88:	8823      	ldrh	r3, [r4, #0]
 8007f8a:	4907      	ldr	r1, [pc, #28]	; (8007fa8 <RUC_Clear+0x8c>)
 8007f8c:	6962      	ldr	r2, [r4, #20]
 8007f8e:	f884 5057 	strb.w	r5, [r4, #87]	; 0x57
 8007f92:	fb03 f300 	mul.w	r3, r3, r0
 8007f96:	fba1 1303 	umull	r1, r3, r1, r3
 8007f9a:	099b      	lsrs	r3, r3, #6
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	80a3      	strh	r3, [r4, #4]
 8007fa0:	60a2      	str	r2, [r4, #8]
 8007fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fa6:	bf00      	nop
 8007fa8:	10624dd3 	.word	0x10624dd3

08007fac <RUC_OTF_Exec>:
 8007fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fae:	8883      	ldrh	r3, [r0, #4]
 8007fb0:	f890 5058 	ldrb.w	r5, [r0, #88]	; 0x58
 8007fb4:	4604      	mov	r4, r0
 8007fb6:	b183      	cbz	r3, 8007fda <RUC_OTF_Exec+0x2e>
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	8083      	strh	r3, [r0, #4]
 8007fbe:	b93d      	cbnz	r5, 8007fd0 <RUC_OTF_Exec+0x24>
 8007fc0:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
 8007fc4:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d05b      	beq.n	8008082 <RUC_OTF_Exec+0xd6>
 8007fca:	6843      	ldr	r3, [r0, #4]
 8007fcc:	4798      	blx	r3
 8007fce:	88a3      	ldrh	r3, [r4, #4]
 8007fd0:	b10b      	cbz	r3, 8007fd6 <RUC_OTF_Exec+0x2a>
 8007fd2:	2001      	movs	r0, #1
 8007fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fd6:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
 8007fda:	68a3      	ldr	r3, [r4, #8]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d02d      	beq.n	800803c <RUC_OTF_Exec+0x90>
 8007fe0:	2d00      	cmp	r5, #0
 8007fe2:	d03f      	beq.n	8008064 <RUC_OTF_Exec+0xb8>
 8007fe4:	2d01      	cmp	r5, #1
 8007fe6:	d035      	beq.n	8008054 <RUC_OTF_Exec+0xa8>
 8007fe8:	88e5      	ldrh	r5, [r4, #6]
 8007fea:	8899      	ldrh	r1, [r3, #4]
 8007fec:	881a      	ldrh	r2, [r3, #0]
 8007fee:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8007ff0:	fb11 f105 	smulbb	r1, r1, r5
 8007ff4:	b209      	sxth	r1, r1
 8007ff6:	f7ff fbf3 	bl	80077e0 <STC_ExecRamp>
 8007ffa:	68a3      	ldr	r3, [r4, #8]
 8007ffc:	88e5      	ldrh	r5, [r4, #6]
 8007ffe:	8859      	ldrh	r1, [r3, #2]
 8008000:	881a      	ldrh	r2, [r3, #0]
 8008002:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008004:	fb11 f105 	smulbb	r1, r1, r5
 8008008:	b209      	sxth	r1, r1
 800800a:	f7ff fef5 	bl	8007df8 <VSS_SetMecAcceleration>
 800800e:	68a2      	ldr	r2, [r4, #8]
 8008010:	8823      	ldrh	r3, [r4, #0]
 8008012:	8810      	ldrh	r0, [r2, #0]
 8008014:	4971      	ldr	r1, [pc, #452]	; (80081dc <RUC_OTF_Exec+0x230>)
 8008016:	6892      	ldr	r2, [r2, #8]
 8008018:	60a2      	str	r2, [r4, #8]
 800801a:	fb03 f300 	mul.w	r3, r3, r0
 800801e:	fba1 2303 	umull	r2, r3, r1, r3
 8008022:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8008026:	099b      	lsrs	r3, r3, #6
 8008028:	3201      	adds	r2, #1
 800802a:	3301      	adds	r3, #1
 800802c:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8008030:	80a3      	strh	r3, [r4, #4]
 8008032:	2001      	movs	r0, #1
 8008034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008036:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
 800803a:	80a0      	strh	r0, [r4, #4]
 800803c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8008040:	3b01      	subs	r3, #1
 8008042:	429d      	cmp	r5, r3
 8008044:	d01b      	beq.n	800807e <RUC_OTF_Exec+0xd2>
 8008046:	2d07      	cmp	r5, #7
 8008048:	d1c3      	bne.n	8007fd2 <RUC_OTF_Exec+0x26>
 800804a:	2300      	movs	r3, #0
 800804c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8008050:	80a3      	strh	r3, [r4, #4]
 8008052:	e7be      	b.n	8007fd2 <RUC_OTF_Exec+0x26>
 8008054:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8008056:	f7ff fa2b 	bl	80074b0 <PWMC_SwitchOnPWM>
 800805a:	2200      	movs	r2, #0
 800805c:	68a3      	ldr	r3, [r4, #8]
 800805e:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8008062:	e7c1      	b.n	8007fe8 <RUC_OTF_Exec+0x3c>
 8008064:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8008066:	f7ff fa21 	bl	80074ac <PWMC_SwitchOffPWM>
 800806a:	2301      	movs	r3, #1
 800806c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8008070:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8008072:	f7ff fa49 	bl	8007508 <PWMC_TurnOnLowSides>
 8008076:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 800807a:	68a3      	ldr	r3, [r4, #8]
 800807c:	e7b4      	b.n	8007fe8 <RUC_OTF_Exec+0x3c>
 800807e:	2000      	movs	r0, #0
 8008080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008082:	68c2      	ldr	r2, [r0, #12]
 8008084:	b17a      	cbz	r2, 80080a6 <RUC_OTF_Exec+0xfa>
 8008086:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 800808a:	f894 1056 	ldrb.w	r1, [r4, #86]	; 0x56
 800808e:	3301      	adds	r3, #1
 8008090:	b2db      	uxtb	r3, r3
 8008092:	4299      	cmp	r1, r3
 8008094:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 8008098:	d205      	bcs.n	80080a6 <RUC_OTF_Exec+0xfa>
 800809a:	4790      	blx	r2
 800809c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800809e:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 80080a2:	f884 5057 	strb.w	r5, [r4, #87]	; 0x57
 80080a6:	6903      	ldr	r3, [r0, #16]
 80080a8:	4798      	blx	r3
 80080aa:	b350      	cbz	r0, 8008102 <RUC_OTF_Exec+0x156>
 80080ac:	f894 5053 	ldrb.w	r5, [r4, #83]	; 0x53
 80080b0:	2d7e      	cmp	r5, #126	; 0x7e
 80080b2:	d803      	bhi.n	80080bc <RUC_OTF_Exec+0x110>
 80080b4:	3501      	adds	r5, #1
 80080b6:	b2ed      	uxtb	r5, r5
 80080b8:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 80080bc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80080be:	68da      	ldr	r2, [r3, #12]
 80080c0:	b36a      	cbz	r2, 800811e <RUC_OTF_Exec+0x172>
 80080c2:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 80080c6:	ebb5 0f52 	cmp.w	r5, r2, lsr #1
 80080ca:	d180      	bne.n	8007fce <RUC_OTF_Exec+0x22>
 80080cc:	6818      	ldr	r0, [r3, #0]
 80080ce:	f7ff fb15 	bl	80076fc <SPD_GetAvrgMecSpeedUnit>
 80080d2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	4606      	mov	r6, r0
 80080da:	dd19      	ble.n	8008110 <RUC_OTF_Exec+0x164>
 80080dc:	2800      	cmp	r0, #0
 80080de:	dd19      	ble.n	8008114 <RUC_OTF_Exec+0x168>
 80080e0:	ea86 75e6 	eor.w	r5, r6, r6, asr #31
 80080e4:	eba5 75e6 	sub.w	r5, r5, r6, asr #31
 80080e8:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 80080ec:	b2ab      	uxth	r3, r5
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d218      	bcs.n	8008124 <RUC_OTF_Exec+0x178>
 80080f2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80080f4:	6843      	ldr	r3, [r0, #4]
 80080f6:	4798      	blx	r3
 80080f8:	2301      	movs	r3, #1
 80080fa:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 80080fe:	88a3      	ldrh	r3, [r4, #4]
 8008100:	e766      	b.n	8007fd0 <RUC_OTF_Exec+0x24>
 8008102:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008104:	f884 0053 	strb.w	r0, [r4, #83]	; 0x53
 8008108:	68da      	ldr	r2, [r3, #12]
 800810a:	2a00      	cmp	r2, #0
 800810c:	d1d9      	bne.n	80080c2 <RUC_OTF_Exec+0x116>
 800810e:	e75e      	b.n	8007fce <RUC_OTF_Exec+0x22>
 8008110:	2800      	cmp	r0, #0
 8008112:	dbe5      	blt.n	80080e0 <RUC_OTF_Exec+0x134>
 8008114:	2300      	movs	r3, #0
 8008116:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
 800811a:	88a3      	ldrh	r3, [r4, #4]
 800811c:	e758      	b.n	8007fd0 <RUC_OTF_Exec+0x24>
 800811e:	2d7f      	cmp	r5, #127	; 0x7f
 8008120:	d0d4      	beq.n	80080cc <RUC_OTF_Exec+0x120>
 8008122:	e754      	b.n	8007fce <RUC_OTF_Exec+0x22>
 8008124:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 8008128:	429a      	cmp	r2, r3
 800812a:	f4bf af50 	bcs.w	8007fce <RUC_OTF_Exec+0x22>
 800812e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008130:	f7ff feb2 	bl	8007e98 <VSS_SetCopyObserver>
 8008134:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008136:	6883      	ldr	r3, [r0, #8]
 8008138:	4798      	blx	r3
 800813a:	68a0      	ldr	r0, [r4, #8]
 800813c:	4603      	mov	r3, r0
 800813e:	2800      	cmp	r0, #0
 8008140:	f43f af79 	beq.w	8008036 <RUC_OTF_Exec+0x8a>
 8008144:	f9b0 7002 	ldrsh.w	r7, [r0, #2]
 8008148:	b22a      	sxth	r2, r5
 800814a:	42ba      	cmp	r2, r7
 800814c:	dd42      	ble.n	80081d4 <RUC_OTF_Exec+0x228>
 800814e:	6881      	ldr	r1, [r0, #8]
 8008150:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
 8008154:	2900      	cmp	r1, #0
 8008156:	d037      	beq.n	80081c8 <RUC_OTF_Exec+0x21c>
 8008158:	3501      	adds	r5, #1
 800815a:	b2eb      	uxtb	r3, r5
 800815c:	e008      	b.n	8008170 <RUC_OTF_Exec+0x1c4>
 800815e:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8008162:	b2db      	uxtb	r3, r3
 8008164:	462f      	mov	r7, r5
 8008166:	4608      	mov	r0, r1
 8008168:	f1bc 0f00 	cmp.w	ip, #0
 800816c:	d028      	beq.n	80081c0 <RUC_OTF_Exec+0x214>
 800816e:	4661      	mov	r1, ip
 8008170:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8008174:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8008178:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800817c:	4295      	cmp	r5, r2
 800817e:	f103 0301 	add.w	r3, r3, #1
 8008182:	dbec      	blt.n	800815e <RUC_OTF_Exec+0x1b2>
 8008184:	60a1      	str	r1, [r4, #8]
 8008186:	460b      	mov	r3, r1
 8008188:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 800818c:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8008190:	88e2      	ldrh	r2, [r4, #6]
 8008192:	1a2b      	subs	r3, r5, r0
 8008194:	1bcf      	subs	r7, r1, r7
 8008196:	fb06 f303 	mul.w	r3, r6, r3
 800819a:	fb93 f3f7 	sdiv	r3, r3, r7
 800819e:	4403      	add	r3, r0
 80081a0:	fb12 f303 	smulbb	r3, r2, r3
 80081a4:	b219      	sxth	r1, r3
 80081a6:	2200      	movs	r2, #0
 80081a8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80081aa:	f7ff fb19 	bl	80077e0 <STC_ExecRamp>
 80081ae:	2306      	movs	r3, #6
 80081b0:	2001      	movs	r0, #1
 80081b2:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 80081b6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80081ba:	80a0      	strh	r0, [r4, #4]
 80081bc:	60a2      	str	r2, [r4, #8]
 80081be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081c0:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
 80081c4:	60a1      	str	r1, [r4, #8]
 80081c6:	460b      	mov	r3, r1
 80081c8:	2200      	movs	r2, #0
 80081ca:	80a2      	strh	r2, [r4, #4]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f47f af07 	bne.w	8007fe0 <RUC_OTF_Exec+0x34>
 80081d2:	e733      	b.n	800803c <RUC_OTF_Exec+0x90>
 80081d4:	2000      	movs	r0, #0
 80081d6:	4607      	mov	r7, r0
 80081d8:	e7d6      	b.n	8008188 <RUC_OTF_Exec+0x1dc>
 80081da:	bf00      	nop
 80081dc:	10624dd3 	.word	0x10624dd3

080081e0 <RUC_FirstAccelerationStageReached>:
 80081e0:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 80081e4:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
 80081e8:	4282      	cmp	r2, r0
 80081ea:	bf34      	ite	cc
 80081ec:	2000      	movcc	r0, #0
 80081ee:	2001      	movcs	r0, #1
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop

080081f4 <RUC_SetPhaseDurationms>:
 80081f4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80081f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80081fc:	818a      	strh	r2, [r1, #12]
 80081fe:	4770      	bx	lr

08008200 <RUC_SetPhaseFinalMecSpeedUnit>:
 8008200:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008204:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008208:	81ca      	strh	r2, [r1, #14]
 800820a:	4770      	bx	lr

0800820c <RUC_SetPhaseFinalTorque>:
 800820c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008210:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008214:	820a      	strh	r2, [r1, #16]
 8008216:	4770      	bx	lr

08008218 <RUC_GetPhaseDurationms>:
 8008218:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800821c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008220:	8988      	ldrh	r0, [r1, #12]
 8008222:	4770      	bx	lr

08008224 <RUC_GetPhaseFinalMecSpeedUnit>:
 8008224:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008228:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800822c:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop

08008234 <RUC_GetPhaseFinalTorque>:
 8008234:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008238:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800823c:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop

08008244 <RUC_GetNumberOfPhases>:
 8008244:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop

0800824c <RUC_Get_SCLowsideOTF_Status>:
 800824c:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop

08008254 <STO_PLL_CalcElAngle>:
 8008254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008258:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 800825c:	f8d0 e068 	ldr.w	lr, [r0, #104]	; 0x68
 8008260:	4604      	mov	r4, r0
 8008262:	03d8      	lsls	r0, r3, #15
 8008264:	1ac2      	subs	r2, r0, r3
 8008266:	4596      	cmp	lr, r2
 8008268:	b089      	sub	sp, #36	; 0x24
 800826a:	f340 80c1 	ble.w	80083f0 <STO_PLL_CalcElAngle+0x19c>
 800826e:	66a2      	str	r2, [r4, #104]	; 0x68
 8008270:	4696      	mov	lr, r2
 8008272:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
 8008276:	f8d4 c06c 	ldr.w	ip, [r4, #108]	; 0x6c
 800827a:	fa4e f605 	asr.w	r6, lr, r5
 800827e:	9603      	str	r6, [sp, #12]
 8008280:	4562      	cmp	r2, ip
 8008282:	b236      	sxth	r6, r6
 8008284:	9601      	str	r6, [sp, #4]
 8008286:	f280 80c8 	bge.w	800841a <STO_PLL_CalcElAngle+0x1c6>
 800828a:	66e2      	str	r2, [r4, #108]	; 0x6c
 800828c:	4694      	mov	ip, r2
 800828e:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8008292:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8008294:	03de      	lsls	r6, r3, #15
 8008296:	fa4c f205 	asr.w	r2, ip, r5
 800829a:	1af5      	subs	r5, r6, r3
 800829c:	9204      	str	r2, [sp, #16]
 800829e:	42a8      	cmp	r0, r5
 80082a0:	b212      	sxth	r2, r2
 80082a2:	9202      	str	r2, [sp, #8]
 80082a4:	f340 80b3 	ble.w	800840e <STO_PLL_CalcElAngle+0x1ba>
 80082a8:	6625      	str	r5, [r4, #96]	; 0x60
 80082aa:	4628      	mov	r0, r5
 80082ac:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80082ae:	4295      	cmp	r5, r2
 80082b0:	f280 80a7 	bge.w	8008402 <STO_PLL_CalcElAngle+0x1ae>
 80082b4:	6665      	str	r5, [r4, #100]	; 0x64
 80082b6:	462a      	mov	r2, r5
 80082b8:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
 80082bc:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 80082c0:	890d      	ldrh	r5, [r1, #8]
 80082c2:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
 80082c6:	888e      	ldrh	r6, [r1, #4]
 80082c8:	f9b1 7000 	ldrsh.w	r7, [r1]
 80082cc:	f9b4 9020 	ldrsh.w	r9, [r4, #32]
 80082d0:	9901      	ldr	r1, [sp, #4]
 80082d2:	f8a4 1070 	strh.w	r1, [r4, #112]	; 0x70
 80082d6:	fa40 f103 	asr.w	r1, r0, r3
 80082da:	fa42 f303 	asr.w	r3, r2, r3
 80082de:	1b8e      	subs	r6, r1, r6
 80082e0:	fb11 f109 	smulbb	r1, r1, r9
 80082e4:	fb13 f909 	smulbb	r9, r3, r9
 80082e8:	eba3 030a 	sub.w	r3, r3, sl
 80082ec:	9305      	str	r3, [sp, #20]
 80082ee:	f9b4 b022 	ldrsh.w	fp, [r4, #34]	; 0x22
 80082f2:	9b02      	ldr	r3, [sp, #8]
 80082f4:	f9b4 a028 	ldrsh.w	sl, [r4, #40]	; 0x28
 80082f8:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 80082fc:	b236      	sxth	r6, r6
 80082fe:	1a41      	subs	r1, r0, r1
 8008300:	fb05 f707 	mul.w	r7, r5, r7
 8008304:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8008308:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800830a:	eba2 0209 	sub.w	r2, r2, r9
 800830e:	fb0b 1106 	mla	r1, fp, r6, r1
 8008312:	143f      	asrs	r7, r7, #16
 8008314:	fb0b 2b03 	mla	fp, fp, r3, r2
 8008318:	fb0a 1107 	mla	r1, sl, r7, r1
 800831c:	fb05 f508 	mul.w	r5, r5, r8
 8008320:	9a01      	ldr	r2, [sp, #4]
 8008322:	9f02      	ldr	r7, [sp, #8]
 8008324:	f9b4 802a 	ldrsh.w	r8, [r4, #42]	; 0x2a
 8008328:	f9b4 9026 	ldrsh.w	r9, [r4, #38]	; 0x26
 800832c:	142d      	asrs	r5, r5, #16
 800832e:	fb0a b505 	mla	r5, sl, r5, fp
 8008332:	4107      	asrs	r7, r0
 8008334:	f9b4 a00e 	ldrsh.w	sl, [r4, #14]
 8008338:	f9b4 b024 	ldrsh.w	fp, [r4, #36]	; 0x24
 800833c:	fa42 f000 	asr.w	r0, r2, r0
 8008340:	fb06 e609 	mla	r6, r6, r9, lr
 8008344:	fb09 c303 	mla	r3, r9, r3, ip
 8008348:	fb07 f708 	mul.w	r7, r7, r8
 800834c:	fb00 f008 	mul.w	r0, r0, r8
 8008350:	fb07 670a 	mla	r7, r7, sl, r6
 8008354:	fb00 361a 	mls	r6, r0, sl, r3
 8008358:	9b01      	ldr	r3, [sp, #4]
 800835a:	f994 2124 	ldrsb.w	r2, [r4, #292]	; 0x124
 800835e:	fb0b 1813 	mls	r8, fp, r3, r1
 8008362:	9b02      	ldr	r3, [sp, #8]
 8008364:	fb0b 5513 	mls	r5, fp, r3, r5
 8008368:	2a00      	cmp	r2, #0
 800836a:	d147      	bne.n	80083fc <STO_PLL_CalcElAngle+0x1a8>
 800836c:	f1ba 0f00 	cmp.w	sl, #0
 8008370:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008374:	bfb4      	ite	lt
 8008376:	4691      	movlt	r9, r2
 8008378:	f04f 0901 	movge.w	r9, #1
 800837c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8008380:	f7fa fa14 	bl	80027ac <MCM_Trig_Functions>
 8008384:	9b04      	ldr	r3, [sp, #16]
 8008386:	9a03      	ldr	r2, [sp, #12]
 8008388:	fb13 f309 	smulbb	r3, r3, r9
 800838c:	fb12 f109 	smulbb	r1, r2, r9
 8008390:	425b      	negs	r3, r3
 8008392:	fb10 f303 	smulbb	r3, r0, r3
 8008396:	fb10 f021 	smultb	r0, r0, r1
 800839a:	f343 33cf 	sbfx	r3, r3, #15, #16
 800839e:	f340 31cf 	sbfx	r1, r0, #15, #16
 80083a2:	1a59      	subs	r1, r3, r1
 80083a4:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80083a8:	f7fe fe84 	bl	80070b4 <PI_Controller>
 80083ac:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
 80083b0:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
 80083b4:	8220      	strh	r0, [r4, #16]
 80083b6:	3301      	adds	r3, #1
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	429a      	cmp	r2, r3
 80083bc:	bf0a      	itet	eq
 80083be:	2200      	moveq	r2, #0
 80083c0:	461a      	movne	r2, r3
 80083c2:	4613      	moveq	r3, r2
 80083c4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80083c8:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 80083cc:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 80083d0:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
 80083d4:	88a2      	ldrh	r2, [r4, #4]
 80083d6:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
 80083da:	4410      	add	r0, r2
 80083dc:	b200      	sxth	r0, r0
 80083de:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
 80083e2:	e9c4 5719 	strd	r5, r7, [r4, #100]	; 0x64
 80083e6:	66e6      	str	r6, [r4, #108]	; 0x6c
 80083e8:	80a0      	strh	r0, [r4, #4]
 80083ea:	b009      	add	sp, #36	; 0x24
 80083ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f0:	1a1d      	subs	r5, r3, r0
 80083f2:	45ae      	cmp	lr, r5
 80083f4:	bfdc      	itt	le
 80083f6:	66a5      	strle	r5, [r4, #104]	; 0x68
 80083f8:	46ae      	movle	lr, r5
 80083fa:	e73a      	b.n	8008272 <STO_PLL_CalcElAngle+0x1e>
 80083fc:	fa1f f982 	uxth.w	r9, r2
 8008400:	e7bc      	b.n	800837c <STO_PLL_CalcElAngle+0x128>
 8008402:	1b9b      	subs	r3, r3, r6
 8008404:	429a      	cmp	r2, r3
 8008406:	bfdc      	itt	le
 8008408:	6663      	strle	r3, [r4, #100]	; 0x64
 800840a:	461a      	movle	r2, r3
 800840c:	e754      	b.n	80082b8 <STO_PLL_CalcElAngle+0x64>
 800840e:	1b9a      	subs	r2, r3, r6
 8008410:	4290      	cmp	r0, r2
 8008412:	bfdc      	itt	le
 8008414:	6622      	strle	r2, [r4, #96]	; 0x60
 8008416:	4610      	movle	r0, r2
 8008418:	e748      	b.n	80082ac <STO_PLL_CalcElAngle+0x58>
 800841a:	1a1b      	subs	r3, r3, r0
 800841c:	459c      	cmp	ip, r3
 800841e:	bfdc      	itt	le
 8008420:	66e3      	strle	r3, [r4, #108]	; 0x6c
 8008422:	469c      	movle	ip, r3
 8008424:	e733      	b.n	800828e <STO_PLL_CalcElAngle+0x3a>
 8008426:	bf00      	nop

08008428 <STO_PLL_CalcAvrgMecSpeedUnit>:
 8008428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800842a:	f890 c10e 	ldrb.w	ip, [r0, #270]	; 0x10e
 800842e:	f1bc 0f00 	cmp.w	ip, #0
 8008432:	f000 8095 	beq.w	8008560 <STO_PLL_CalcAvrgMecSpeedUnit+0x138>
 8008436:	f10c 37ff 	add.w	r7, ip, #4294967295
 800843a:	b2fb      	uxtb	r3, r7
 800843c:	f100 0672 	add.w	r6, r0, #114	; 0x72
 8008440:	f100 0774 	add.w	r7, r0, #116	; 0x74
 8008444:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8008448:	4632      	mov	r2, r6
 800844a:	2300      	movs	r3, #0
 800844c:	f932 5f02 	ldrsh.w	r5, [r2, #2]!
 8008450:	4297      	cmp	r7, r2
 8008452:	442b      	add	r3, r5
 8008454:	d1fa      	bne.n	800844c <STO_PLL_CalcAvrgMecSpeedUnit+0x24>
 8008456:	fb93 f5fc 	sdiv	r5, r3, ip
 800845a:	2400      	movs	r4, #0
 800845c:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
 8008460:	1b5b      	subs	r3, r3, r5
 8008462:	42b2      	cmp	r2, r6
 8008464:	fb03 4403 	mla	r4, r3, r3, r4
 8008468:	d1f8      	bne.n	800845c <STO_PLL_CalcAvrgMecSpeedUnit+0x34>
 800846a:	fb94 f4fc 	sdiv	r4, r4, ip
 800846e:	fb05 fc05 	mul.w	ip, r5, r5
 8008472:	f8b0 2110 	ldrh.w	r2, [r0, #272]	; 0x110
 8008476:	8b43      	ldrh	r3, [r0, #26]
 8008478:	7887      	ldrb	r7, [r0, #2]
 800847a:	f890 6104 	ldrb.w	r6, [r0, #260]	; 0x104
 800847e:	fb0c fc02 	mul.w	ip, ip, r2
 8008482:	ea4f 1cec 	mov.w	ip, ip, asr #7
 8008486:	fb05 f303 	mul.w	r3, r5, r3
 800848a:	45a4      	cmp	ip, r4
 800848c:	69c2      	ldr	r2, [r0, #28]
 800848e:	bfd4      	ite	le
 8008490:	2500      	movle	r5, #0
 8008492:	2501      	movgt	r5, #1
 8008494:	fb03 f307 	mul.w	r3, r3, r7
 8008498:	fb93 f3f2 	sdiv	r3, r3, r2
 800849c:	7842      	ldrb	r2, [r0, #1]
 800849e:	fb93 f3f2 	sdiv	r3, r3, r2
 80084a2:	b21a      	sxth	r2, r3
 80084a4:	800a      	strh	r2, [r1, #0]
 80084a6:	f880 50f5 	strb.w	r5, [r0, #245]	; 0xf5
 80084aa:	8182      	strh	r2, [r0, #12]
 80084ac:	f890 50f8 	ldrb.w	r5, [r0, #248]	; 0xf8
 80084b0:	b99e      	cbnz	r6, 80084da <STO_PLL_CalcAvrgMecSpeedUnit+0xb2>
 80084b2:	b355      	cbz	r5, 800850a <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 80084b4:	45a4      	cmp	ip, r4
 80084b6:	dc25      	bgt.n	8008504 <STO_PLL_CalcAvrgMecSpeedUnit+0xdc>
 80084b8:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
 80084bc:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
 80084c0:	3301      	adds	r3, #1
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	429a      	cmp	r2, r3
 80084c6:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 80084ca:	d81e      	bhi.n	800850a <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 80084cc:	2300      	movs	r3, #0
 80084ce:	78c2      	ldrb	r2, [r0, #3]
 80084d0:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 80084d4:	7002      	strb	r2, [r0, #0]
 80084d6:	4618      	mov	r0, r3
 80084d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f8b0 211a 	ldrh.w	r2, [r0, #282]	; 0x11a
 80084e0:	bfb8      	it	lt
 80084e2:	425b      	neglt	r3, r3
 80084e4:	429a      	cmp	r2, r3
 80084e6:	dc14      	bgt.n	8008512 <STO_PLL_CalcAvrgMecSpeedUnit+0xea>
 80084e8:	2200      	movs	r2, #0
 80084ea:	4613      	mov	r3, r2
 80084ec:	4616      	mov	r6, r2
 80084ee:	f880 20f9 	strb.w	r2, [r0, #249]	; 0xf9
 80084f2:	f8c0 60fc 	str.w	r6, [r0, #252]	; 0xfc
 80084f6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80084fa:	b135      	cbz	r5, 800850a <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 80084fc:	45a4      	cmp	ip, r4
 80084fe:	dddb      	ble.n	80084b8 <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 8008500:	2a00      	cmp	r2, #0
 8008502:	d0d9      	beq.n	80084b8 <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 8008504:	2300      	movs	r3, #0
 8008506:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 800850a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800850e:	f7ff b8fd 	b.w	800770c <SPD_IsMecSpeedReliable>
 8008512:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
 8008516:	f9b0 e014 	ldrsh.w	lr, [r0, #20]
 800851a:	f9b0 7070 	ldrsh.w	r7, [r0, #112]	; 0x70
 800851e:	f9b0 6072 	ldrsh.w	r6, [r0, #114]	; 0x72
 8008522:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8008526:	fb93 f3fe 	sdiv	r3, r3, lr
 800852a:	fb03 f202 	mul.w	r2, r3, r2
 800852e:	2a00      	cmp	r2, #0
 8008530:	bfb8      	it	lt
 8008532:	323f      	addlt	r2, #63	; 0x3f
 8008534:	1192      	asrs	r2, r2, #6
 8008536:	fb02 f303 	mul.w	r3, r2, r3
 800853a:	fb07 f707 	mul.w	r7, r7, r7
 800853e:	2b00      	cmp	r3, #0
 8008540:	fb06 7606 	mla	r6, r6, r6, r7
 8008544:	461a      	mov	r2, r3
 8008546:	f890 7118 	ldrb.w	r7, [r0, #280]	; 0x118
 800854a:	bfb8      	it	lt
 800854c:	f103 023f 	addlt.w	r2, r3, #63	; 0x3f
 8008550:	1192      	asrs	r2, r2, #6
 8008552:	fb07 3212 	mls	r2, r7, r2, r3
 8008556:	4296      	cmp	r6, r2
 8008558:	bfd4      	ite	le
 800855a:	2200      	movle	r2, #0
 800855c:	2201      	movgt	r2, #1
 800855e:	e7c6      	b.n	80084ee <STO_PLL_CalcAvrgMecSpeedUnit+0xc6>
 8008560:	4664      	mov	r4, ip
 8008562:	4665      	mov	r5, ip
 8008564:	e785      	b.n	8008472 <STO_PLL_CalcAvrgMecSpeedUnit+0x4a>
 8008566:	bf00      	nop

08008568 <STO_PLL_CalcAvrgElSpeedDpp>:
 8008568:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
 800856c:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
 8008570:	b470      	push	{r4, r5, r6}
 8008572:	f890 410e 	ldrb.w	r4, [r0, #270]	; 0x10e
 8008576:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
 800857a:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 800857e:	b2a6      	uxth	r6, r4
 8008580:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	; 0x74
 8008584:	1af3      	subs	r3, r6, r3
 8008586:	b29b      	uxth	r3, r3
 8008588:	442a      	add	r2, r5
 800858a:	b19b      	cbz	r3, 80085b4 <STO_PLL_CalcAvrgElSpeedDpp+0x4c>
 800858c:	440b      	add	r3, r1
 800858e:	b29b      	uxth	r3, r3
 8008590:	b219      	sxth	r1, r3
 8008592:	428c      	cmp	r4, r1
 8008594:	bfdc      	itt	le
 8008596:	1b9b      	suble	r3, r3, r6
 8008598:	b219      	sxthle	r1, r3
 800859a:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 800859e:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
 80085a8:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 80085ac:	4113      	asrs	r3, r2
 80085ae:	81c3      	strh	r3, [r0, #14]
 80085b0:	bc70      	pop	{r4, r5, r6}
 80085b2:	4770      	bx	lr
 80085b4:	f9b0 310c 	ldrsh.w	r3, [r0, #268]	; 0x10c
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	e7f3      	b.n	80085a4 <STO_PLL_CalcAvrgElSpeedDpp+0x3c>

080085bc <STO_PLL_Clear>:
 80085bc:	b510      	push	{r4, lr}
 80085be:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
 80085c2:	2100      	movs	r1, #0
 80085c4:	4604      	mov	r4, r0
 80085c6:	e9c0 1118 	strd	r1, r1, [r0, #96]	; 0x60
 80085ca:	e9c0 111a 	strd	r1, r1, [r0, #104]	; 0x68
 80085ce:	8081      	strh	r1, [r0, #4]
 80085d0:	81c1      	strh	r1, [r0, #14]
 80085d2:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
 80085d6:	f880 10f8 	strb.w	r1, [r0, #248]	; 0xf8
 80085da:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
 80085de:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
 80085e2:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
 80085e6:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
 80085ea:	f880 1122 	strb.w	r1, [r0, #290]	; 0x122
 80085ee:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
 80085f2:	b132      	cbz	r2, 8008602 <STO_PLL_Clear+0x46>
 80085f4:	3a01      	subs	r2, #1
 80085f6:	b2d2      	uxtb	r2, r2
 80085f8:	3201      	adds	r2, #1
 80085fa:	0052      	lsls	r2, r2, #1
 80085fc:	3074      	adds	r0, #116	; 0x74
 80085fe:	f000 f931 	bl	8008864 <memset>
 8008602:	2100      	movs	r1, #0
 8008604:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
 8008608:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 800860c:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8008610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008614:	f7fe bd42 	b.w	800709c <PID_SetIntegralTerm>

08008618 <STO_PLL_Init>:
 8008618:	b538      	push	{r3, r4, r5, lr}
 800861a:	4604      	mov	r4, r0
 800861c:	f9b0 502e 	ldrsh.w	r5, [r0, #46]	; 0x2e
 8008620:	4b18      	ldr	r3, [pc, #96]	; (8008684 <STO_PLL_Init+0x6c>)
 8008622:	f890 0116 	ldrb.w	r0, [r0, #278]	; 0x116
 8008626:	fb93 f3f5 	sdiv	r3, r3, r5
 800862a:	2200      	movs	r2, #0
 800862c:	2101      	movs	r1, #1
 800862e:	b21b      	sxth	r3, r3
 8008630:	f884 00f6 	strb.w	r0, [r4, #246]	; 0xf6
 8008634:	8662      	strh	r2, [r4, #50]	; 0x32
 8008636:	f884 1104 	strb.w	r1, [r4, #260]	; 0x104
 800863a:	b303      	cbz	r3, 800867e <STO_PLL_Init+0x66>
 800863c:	4608      	mov	r0, r1
 800863e:	e000      	b.n	8008642 <STO_PLL_Init+0x2a>
 8008640:	4611      	mov	r1, r2
 8008642:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8008646:	1c4a      	adds	r2, r1, #1
 8008648:	105b      	asrs	r3, r3, #1
 800864a:	ea4f 0040 	mov.w	r0, r0, lsl #1
 800864e:	b292      	uxth	r2, r2
 8008650:	d1f6      	bne.n	8008640 <STO_PLL_Init+0x28>
 8008652:	b200      	sxth	r0, r0
 8008654:	fb05 f200 	mul.w	r2, r5, r0
 8008658:	8661      	strh	r1, [r4, #50]	; 0x32
 800865a:	4b0b      	ldr	r3, [pc, #44]	; (8008688 <STO_PLL_Init+0x70>)
 800865c:	8620      	strh	r0, [r4, #48]	; 0x30
 800865e:	fb83 1302 	smull	r1, r3, r3, r2
 8008662:	17d2      	asrs	r2, r2, #31
 8008664:	ebc2 2223 	rsb	r2, r2, r3, asr #8
 8008668:	8562      	strh	r2, [r4, #42]	; 0x2a
 800866a:	4620      	mov	r0, r4
 800866c:	f7ff ffa6 	bl	80085bc <STO_PLL_Clear>
 8008670:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8008674:	f7fe fcfe 	bl	8007074 <PID_HandleInit>
 8008678:	2300      	movs	r3, #0
 800867a:	8263      	strh	r3, [r4, #18]
 800867c:	bd38      	pop	{r3, r4, r5, pc}
 800867e:	462a      	mov	r2, r5
 8008680:	4608      	mov	r0, r1
 8008682:	e7ea      	b.n	800865a <STO_PLL_Init+0x42>
 8008684:	000fea5e 	.word	0x000fea5e
 8008688:	06488dc5 	.word	0x06488dc5

0800868c <STO_PLL_IsObserverConverged>:
 800868c:	f890 2123 	ldrb.w	r2, [r0, #291]	; 0x123
 8008690:	4603      	mov	r3, r0
 8008692:	b10a      	cbz	r2, 8008698 <STO_PLL_IsObserverConverged+0xc>
 8008694:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8008698:	f893 0122 	ldrb.w	r0, [r3, #290]	; 0x122
 800869c:	2800      	cmp	r0, #0
 800869e:	d143      	bne.n	8008728 <STO_PLL_IsObserverConverged+0x9c>
 80086a0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80086a4:	b430      	push	{r4, r5}
 80086a6:	fb02 f501 	mul.w	r5, r2, r1
 80086aa:	2d00      	cmp	r5, #0
 80086ac:	460c      	mov	r4, r1
 80086ae:	dd34      	ble.n	800871a <STO_PLL_IsObserverConverged+0x8e>
 80086b0:	2a00      	cmp	r2, #0
 80086b2:	bfbc      	itt	lt
 80086b4:	4252      	neglt	r2, r2
 80086b6:	b212      	sxthlt	r2, r2
 80086b8:	2900      	cmp	r1, #0
 80086ba:	bfbc      	itt	lt
 80086bc:	4249      	neglt	r1, r1
 80086be:	b20c      	sxthlt	r4, r1
 80086c0:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
 80086c4:	b359      	cbz	r1, 800871e <STO_PLL_IsObserverConverged+0x92>
 80086c6:	f8b3 5114 	ldrh.w	r5, [r3, #276]	; 0x114
 80086ca:	b291      	uxth	r1, r2
 80086cc:	428d      	cmp	r5, r1
 80086ce:	d226      	bcs.n	800871e <STO_PLL_IsObserverConverged+0x92>
 80086d0:	f893 1113 	ldrb.w	r1, [r3, #275]	; 0x113
 80086d4:	fb04 f101 	mul.w	r1, r4, r1
 80086d8:	2900      	cmp	r1, #0
 80086da:	bfb8      	it	lt
 80086dc:	310f      	addlt	r1, #15
 80086de:	f341 110f 	sbfx	r1, r1, #4, #16
 80086e2:	428a      	cmp	r2, r1
 80086e4:	db1b      	blt.n	800871e <STO_PLL_IsObserverConverged+0x92>
 80086e6:	f893 1112 	ldrb.w	r1, [r3, #274]	; 0x112
 80086ea:	fb04 f101 	mul.w	r1, r4, r1
 80086ee:	2900      	cmp	r1, #0
 80086f0:	bfb8      	it	lt
 80086f2:	310f      	addlt	r1, #15
 80086f4:	f341 110f 	sbfx	r1, r1, #4, #16
 80086f8:	428a      	cmp	r2, r1
 80086fa:	dc10      	bgt.n	800871e <STO_PLL_IsObserverConverged+0x92>
 80086fc:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
 8008700:	f893 1116 	ldrb.w	r1, [r3, #278]	; 0x116
 8008704:	3201      	adds	r2, #1
 8008706:	b2d2      	uxtb	r2, r2
 8008708:	4291      	cmp	r1, r2
 800870a:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 800870e:	d804      	bhi.n	800871a <STO_PLL_IsObserverConverged+0x8e>
 8008710:	2001      	movs	r0, #1
 8008712:	2200      	movs	r2, #0
 8008714:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 8008718:	701a      	strb	r2, [r3, #0]
 800871a:	bc30      	pop	{r4, r5}
 800871c:	4770      	bx	lr
 800871e:	2200      	movs	r2, #0
 8008720:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 8008724:	bc30      	pop	{r4, r5}
 8008726:	4770      	bx	lr
 8008728:	2001      	movs	r0, #1
 800872a:	2200      	movs	r2, #0
 800872c:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 8008730:	701a      	strb	r2, [r3, #0]
 8008732:	4770      	bx	lr

08008734 <STO_PLL_GetEstimatedBemf>:
 8008734:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8008736:	2000      	movs	r0, #0
 8008738:	b29a      	uxth	r2, r3
 800873a:	f362 000f 	bfi	r0, r2, #0, #16
 800873e:	0c1b      	lsrs	r3, r3, #16
 8008740:	b082      	sub	sp, #8
 8008742:	f363 401f 	bfi	r0, r3, #16, #16
 8008746:	b002      	add	sp, #8
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop

0800874c <STO_PLL_GetEstimatedCurrent>:
 800874c:	e9d0 2318 	ldrd	r2, r3, [r0, #96]	; 0x60
 8008750:	b410      	push	{r4}
 8008752:	f8b0 411c 	ldrh.w	r4, [r0, #284]	; 0x11c
 8008756:	4122      	asrs	r2, r4
 8008758:	b292      	uxth	r2, r2
 800875a:	4123      	asrs	r3, r4
 800875c:	2100      	movs	r1, #0
 800875e:	b29b      	uxth	r3, r3
 8008760:	f362 010f 	bfi	r1, r2, #0, #16
 8008764:	f363 411f 	bfi	r1, r3, #16, #16
 8008768:	b083      	sub	sp, #12
 800876a:	4608      	mov	r0, r1
 800876c:	b003      	add	sp, #12
 800876e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008772:	4770      	bx	lr

08008774 <STO_PLL_GetObserverGains>:
 8008774:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8008778:	800b      	strh	r3, [r1, #0]
 800877a:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 800877e:	8013      	strh	r3, [r2, #0]
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop

08008784 <STO_PLL_SetObserverGains>:
 8008784:	8441      	strh	r1, [r0, #34]	; 0x22
 8008786:	84c2      	strh	r2, [r0, #38]	; 0x26
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop

0800878c <STO_GetPLLGains>:
 800878c:	b570      	push	{r4, r5, r6, lr}
 800878e:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8008792:	4620      	mov	r0, r4
 8008794:	460e      	mov	r6, r1
 8008796:	4615      	mov	r5, r2
 8008798:	f7fe fc78 	bl	800708c <PID_GetKP>
 800879c:	8030      	strh	r0, [r6, #0]
 800879e:	4620      	mov	r0, r4
 80087a0:	f7fe fc78 	bl	8007094 <PID_GetKI>
 80087a4:	8028      	strh	r0, [r5, #0]
 80087a6:	bd70      	pop	{r4, r5, r6, pc}

080087a8 <STO_SetPLLGains>:
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	f100 0434 	add.w	r4, r0, #52	; 0x34
 80087ae:	4615      	mov	r5, r2
 80087b0:	4620      	mov	r0, r4
 80087b2:	f7fe fc67 	bl	8007084 <PID_SetKP>
 80087b6:	4629      	mov	r1, r5
 80087b8:	4620      	mov	r0, r4
 80087ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087be:	f7fe bc63 	b.w	8007088 <PID_SetKI>
 80087c2:	bf00      	nop

080087c4 <STO_OTF_ResetPLL>:
 80087c4:	6800      	ldr	r0, [r0, #0]
 80087c6:	2100      	movs	r1, #0
 80087c8:	3034      	adds	r0, #52	; 0x34
 80087ca:	f7fe bc67 	b.w	800709c <PID_SetIntegralTerm>
 80087ce:	bf00      	nop

080087d0 <STO_ResetPLL>:
 80087d0:	3034      	adds	r0, #52	; 0x34
 80087d2:	2100      	movs	r1, #0
 80087d4:	f7fe bc62 	b.w	800709c <PID_SetIntegralTerm>

080087d8 <STO_PLL_GetEstimatedBemfLevel>:
 80087d8:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop

080087e0 <STO_PLL_GetObservedBemfLevel>:
 80087e0:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop

080087e8 <STO_PLL_IsVarianceTight>:
 80087e8:	6803      	ldr	r3, [r0, #0]
 80087ea:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
 80087ee:	4770      	bx	lr

080087f0 <STO_PLL_ForceConvergency1>:
 80087f0:	6803      	ldr	r3, [r0, #0]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop

080087fc <STO_PLL_ForceConvergency2>:
 80087fc:	6803      	ldr	r3, [r0, #0]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop

08008808 <STO_SetDirection>:
 8008808:	f880 1124 	strb.w	r1, [r0, #292]	; 0x124
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop

08008810 <__errno>:
 8008810:	4b01      	ldr	r3, [pc, #4]	; (8008818 <__errno+0x8>)
 8008812:	6818      	ldr	r0, [r3, #0]
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	20000704 	.word	0x20000704

0800881c <__libc_init_array>:
 800881c:	b570      	push	{r4, r5, r6, lr}
 800881e:	4d0d      	ldr	r5, [pc, #52]	; (8008854 <__libc_init_array+0x38>)
 8008820:	4c0d      	ldr	r4, [pc, #52]	; (8008858 <__libc_init_array+0x3c>)
 8008822:	1b64      	subs	r4, r4, r5
 8008824:	10a4      	asrs	r4, r4, #2
 8008826:	2600      	movs	r6, #0
 8008828:	42a6      	cmp	r6, r4
 800882a:	d109      	bne.n	8008840 <__libc_init_array+0x24>
 800882c:	4d0b      	ldr	r5, [pc, #44]	; (800885c <__libc_init_array+0x40>)
 800882e:	4c0c      	ldr	r4, [pc, #48]	; (8008860 <__libc_init_array+0x44>)
 8008830:	f000 fe5a 	bl	80094e8 <_init>
 8008834:	1b64      	subs	r4, r4, r5
 8008836:	10a4      	asrs	r4, r4, #2
 8008838:	2600      	movs	r6, #0
 800883a:	42a6      	cmp	r6, r4
 800883c:	d105      	bne.n	800884a <__libc_init_array+0x2e>
 800883e:	bd70      	pop	{r4, r5, r6, pc}
 8008840:	f855 3b04 	ldr.w	r3, [r5], #4
 8008844:	4798      	blx	r3
 8008846:	3601      	adds	r6, #1
 8008848:	e7ee      	b.n	8008828 <__libc_init_array+0xc>
 800884a:	f855 3b04 	ldr.w	r3, [r5], #4
 800884e:	4798      	blx	r3
 8008850:	3601      	adds	r6, #1
 8008852:	e7f2      	b.n	800883a <__libc_init_array+0x1e>
 8008854:	08009868 	.word	0x08009868
 8008858:	08009868 	.word	0x08009868
 800885c:	08009868 	.word	0x08009868
 8008860:	0800986c 	.word	0x0800986c

08008864 <memset>:
 8008864:	4402      	add	r2, r0
 8008866:	4603      	mov	r3, r0
 8008868:	4293      	cmp	r3, r2
 800886a:	d100      	bne.n	800886e <memset+0xa>
 800886c:	4770      	bx	lr
 800886e:	f803 1b01 	strb.w	r1, [r3], #1
 8008872:	e7f9      	b.n	8008868 <memset+0x4>

08008874 <siprintf>:
 8008874:	b40e      	push	{r1, r2, r3}
 8008876:	b500      	push	{lr}
 8008878:	b09c      	sub	sp, #112	; 0x70
 800887a:	ab1d      	add	r3, sp, #116	; 0x74
 800887c:	9002      	str	r0, [sp, #8]
 800887e:	9006      	str	r0, [sp, #24]
 8008880:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008884:	4809      	ldr	r0, [pc, #36]	; (80088ac <siprintf+0x38>)
 8008886:	9107      	str	r1, [sp, #28]
 8008888:	9104      	str	r1, [sp, #16]
 800888a:	4909      	ldr	r1, [pc, #36]	; (80088b0 <siprintf+0x3c>)
 800888c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008890:	9105      	str	r1, [sp, #20]
 8008892:	6800      	ldr	r0, [r0, #0]
 8008894:	9301      	str	r3, [sp, #4]
 8008896:	a902      	add	r1, sp, #8
 8008898:	f000 f868 	bl	800896c <_svfiprintf_r>
 800889c:	9b02      	ldr	r3, [sp, #8]
 800889e:	2200      	movs	r2, #0
 80088a0:	701a      	strb	r2, [r3, #0]
 80088a2:	b01c      	add	sp, #112	; 0x70
 80088a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80088a8:	b003      	add	sp, #12
 80088aa:	4770      	bx	lr
 80088ac:	20000704 	.word	0x20000704
 80088b0:	ffff0208 	.word	0xffff0208

080088b4 <__ssputs_r>:
 80088b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088b8:	688e      	ldr	r6, [r1, #8]
 80088ba:	429e      	cmp	r6, r3
 80088bc:	4682      	mov	sl, r0
 80088be:	460c      	mov	r4, r1
 80088c0:	4690      	mov	r8, r2
 80088c2:	461f      	mov	r7, r3
 80088c4:	d838      	bhi.n	8008938 <__ssputs_r+0x84>
 80088c6:	898a      	ldrh	r2, [r1, #12]
 80088c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80088cc:	d032      	beq.n	8008934 <__ssputs_r+0x80>
 80088ce:	6825      	ldr	r5, [r4, #0]
 80088d0:	6909      	ldr	r1, [r1, #16]
 80088d2:	eba5 0901 	sub.w	r9, r5, r1
 80088d6:	6965      	ldr	r5, [r4, #20]
 80088d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088e0:	3301      	adds	r3, #1
 80088e2:	444b      	add	r3, r9
 80088e4:	106d      	asrs	r5, r5, #1
 80088e6:	429d      	cmp	r5, r3
 80088e8:	bf38      	it	cc
 80088ea:	461d      	movcc	r5, r3
 80088ec:	0553      	lsls	r3, r2, #21
 80088ee:	d531      	bpl.n	8008954 <__ssputs_r+0xa0>
 80088f0:	4629      	mov	r1, r5
 80088f2:	f000 fb47 	bl	8008f84 <_malloc_r>
 80088f6:	4606      	mov	r6, r0
 80088f8:	b950      	cbnz	r0, 8008910 <__ssputs_r+0x5c>
 80088fa:	230c      	movs	r3, #12
 80088fc:	f8ca 3000 	str.w	r3, [sl]
 8008900:	89a3      	ldrh	r3, [r4, #12]
 8008902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008906:	81a3      	strh	r3, [r4, #12]
 8008908:	f04f 30ff 	mov.w	r0, #4294967295
 800890c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008910:	6921      	ldr	r1, [r4, #16]
 8008912:	464a      	mov	r2, r9
 8008914:	f000 fabe 	bl	8008e94 <memcpy>
 8008918:	89a3      	ldrh	r3, [r4, #12]
 800891a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800891e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008922:	81a3      	strh	r3, [r4, #12]
 8008924:	6126      	str	r6, [r4, #16]
 8008926:	6165      	str	r5, [r4, #20]
 8008928:	444e      	add	r6, r9
 800892a:	eba5 0509 	sub.w	r5, r5, r9
 800892e:	6026      	str	r6, [r4, #0]
 8008930:	60a5      	str	r5, [r4, #8]
 8008932:	463e      	mov	r6, r7
 8008934:	42be      	cmp	r6, r7
 8008936:	d900      	bls.n	800893a <__ssputs_r+0x86>
 8008938:	463e      	mov	r6, r7
 800893a:	4632      	mov	r2, r6
 800893c:	6820      	ldr	r0, [r4, #0]
 800893e:	4641      	mov	r1, r8
 8008940:	f000 fab6 	bl	8008eb0 <memmove>
 8008944:	68a3      	ldr	r3, [r4, #8]
 8008946:	6822      	ldr	r2, [r4, #0]
 8008948:	1b9b      	subs	r3, r3, r6
 800894a:	4432      	add	r2, r6
 800894c:	60a3      	str	r3, [r4, #8]
 800894e:	6022      	str	r2, [r4, #0]
 8008950:	2000      	movs	r0, #0
 8008952:	e7db      	b.n	800890c <__ssputs_r+0x58>
 8008954:	462a      	mov	r2, r5
 8008956:	f000 fb6f 	bl	8009038 <_realloc_r>
 800895a:	4606      	mov	r6, r0
 800895c:	2800      	cmp	r0, #0
 800895e:	d1e1      	bne.n	8008924 <__ssputs_r+0x70>
 8008960:	6921      	ldr	r1, [r4, #16]
 8008962:	4650      	mov	r0, sl
 8008964:	f000 fabe 	bl	8008ee4 <_free_r>
 8008968:	e7c7      	b.n	80088fa <__ssputs_r+0x46>
	...

0800896c <_svfiprintf_r>:
 800896c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008970:	4698      	mov	r8, r3
 8008972:	898b      	ldrh	r3, [r1, #12]
 8008974:	061b      	lsls	r3, r3, #24
 8008976:	b09d      	sub	sp, #116	; 0x74
 8008978:	4607      	mov	r7, r0
 800897a:	460d      	mov	r5, r1
 800897c:	4614      	mov	r4, r2
 800897e:	d50e      	bpl.n	800899e <_svfiprintf_r+0x32>
 8008980:	690b      	ldr	r3, [r1, #16]
 8008982:	b963      	cbnz	r3, 800899e <_svfiprintf_r+0x32>
 8008984:	2140      	movs	r1, #64	; 0x40
 8008986:	f000 fafd 	bl	8008f84 <_malloc_r>
 800898a:	6028      	str	r0, [r5, #0]
 800898c:	6128      	str	r0, [r5, #16]
 800898e:	b920      	cbnz	r0, 800899a <_svfiprintf_r+0x2e>
 8008990:	230c      	movs	r3, #12
 8008992:	603b      	str	r3, [r7, #0]
 8008994:	f04f 30ff 	mov.w	r0, #4294967295
 8008998:	e0d1      	b.n	8008b3e <_svfiprintf_r+0x1d2>
 800899a:	2340      	movs	r3, #64	; 0x40
 800899c:	616b      	str	r3, [r5, #20]
 800899e:	2300      	movs	r3, #0
 80089a0:	9309      	str	r3, [sp, #36]	; 0x24
 80089a2:	2320      	movs	r3, #32
 80089a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80089ac:	2330      	movs	r3, #48	; 0x30
 80089ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008b58 <_svfiprintf_r+0x1ec>
 80089b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089b6:	f04f 0901 	mov.w	r9, #1
 80089ba:	4623      	mov	r3, r4
 80089bc:	469a      	mov	sl, r3
 80089be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089c2:	b10a      	cbz	r2, 80089c8 <_svfiprintf_r+0x5c>
 80089c4:	2a25      	cmp	r2, #37	; 0x25
 80089c6:	d1f9      	bne.n	80089bc <_svfiprintf_r+0x50>
 80089c8:	ebba 0b04 	subs.w	fp, sl, r4
 80089cc:	d00b      	beq.n	80089e6 <_svfiprintf_r+0x7a>
 80089ce:	465b      	mov	r3, fp
 80089d0:	4622      	mov	r2, r4
 80089d2:	4629      	mov	r1, r5
 80089d4:	4638      	mov	r0, r7
 80089d6:	f7ff ff6d 	bl	80088b4 <__ssputs_r>
 80089da:	3001      	adds	r0, #1
 80089dc:	f000 80aa 	beq.w	8008b34 <_svfiprintf_r+0x1c8>
 80089e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089e2:	445a      	add	r2, fp
 80089e4:	9209      	str	r2, [sp, #36]	; 0x24
 80089e6:	f89a 3000 	ldrb.w	r3, [sl]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f000 80a2 	beq.w	8008b34 <_svfiprintf_r+0x1c8>
 80089f0:	2300      	movs	r3, #0
 80089f2:	f04f 32ff 	mov.w	r2, #4294967295
 80089f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089fa:	f10a 0a01 	add.w	sl, sl, #1
 80089fe:	9304      	str	r3, [sp, #16]
 8008a00:	9307      	str	r3, [sp, #28]
 8008a02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a06:	931a      	str	r3, [sp, #104]	; 0x68
 8008a08:	4654      	mov	r4, sl
 8008a0a:	2205      	movs	r2, #5
 8008a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a10:	4851      	ldr	r0, [pc, #324]	; (8008b58 <_svfiprintf_r+0x1ec>)
 8008a12:	f7f7 fc05 	bl	8000220 <memchr>
 8008a16:	9a04      	ldr	r2, [sp, #16]
 8008a18:	b9d8      	cbnz	r0, 8008a52 <_svfiprintf_r+0xe6>
 8008a1a:	06d0      	lsls	r0, r2, #27
 8008a1c:	bf44      	itt	mi
 8008a1e:	2320      	movmi	r3, #32
 8008a20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a24:	0711      	lsls	r1, r2, #28
 8008a26:	bf44      	itt	mi
 8008a28:	232b      	movmi	r3, #43	; 0x2b
 8008a2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a2e:	f89a 3000 	ldrb.w	r3, [sl]
 8008a32:	2b2a      	cmp	r3, #42	; 0x2a
 8008a34:	d015      	beq.n	8008a62 <_svfiprintf_r+0xf6>
 8008a36:	9a07      	ldr	r2, [sp, #28]
 8008a38:	4654      	mov	r4, sl
 8008a3a:	2000      	movs	r0, #0
 8008a3c:	f04f 0c0a 	mov.w	ip, #10
 8008a40:	4621      	mov	r1, r4
 8008a42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a46:	3b30      	subs	r3, #48	; 0x30
 8008a48:	2b09      	cmp	r3, #9
 8008a4a:	d94e      	bls.n	8008aea <_svfiprintf_r+0x17e>
 8008a4c:	b1b0      	cbz	r0, 8008a7c <_svfiprintf_r+0x110>
 8008a4e:	9207      	str	r2, [sp, #28]
 8008a50:	e014      	b.n	8008a7c <_svfiprintf_r+0x110>
 8008a52:	eba0 0308 	sub.w	r3, r0, r8
 8008a56:	fa09 f303 	lsl.w	r3, r9, r3
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	9304      	str	r3, [sp, #16]
 8008a5e:	46a2      	mov	sl, r4
 8008a60:	e7d2      	b.n	8008a08 <_svfiprintf_r+0x9c>
 8008a62:	9b03      	ldr	r3, [sp, #12]
 8008a64:	1d19      	adds	r1, r3, #4
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	9103      	str	r1, [sp, #12]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	bfbb      	ittet	lt
 8008a6e:	425b      	neglt	r3, r3
 8008a70:	f042 0202 	orrlt.w	r2, r2, #2
 8008a74:	9307      	strge	r3, [sp, #28]
 8008a76:	9307      	strlt	r3, [sp, #28]
 8008a78:	bfb8      	it	lt
 8008a7a:	9204      	strlt	r2, [sp, #16]
 8008a7c:	7823      	ldrb	r3, [r4, #0]
 8008a7e:	2b2e      	cmp	r3, #46	; 0x2e
 8008a80:	d10c      	bne.n	8008a9c <_svfiprintf_r+0x130>
 8008a82:	7863      	ldrb	r3, [r4, #1]
 8008a84:	2b2a      	cmp	r3, #42	; 0x2a
 8008a86:	d135      	bne.n	8008af4 <_svfiprintf_r+0x188>
 8008a88:	9b03      	ldr	r3, [sp, #12]
 8008a8a:	1d1a      	adds	r2, r3, #4
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	9203      	str	r2, [sp, #12]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	bfb8      	it	lt
 8008a94:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a98:	3402      	adds	r4, #2
 8008a9a:	9305      	str	r3, [sp, #20]
 8008a9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b68 <_svfiprintf_r+0x1fc>
 8008aa0:	7821      	ldrb	r1, [r4, #0]
 8008aa2:	2203      	movs	r2, #3
 8008aa4:	4650      	mov	r0, sl
 8008aa6:	f7f7 fbbb 	bl	8000220 <memchr>
 8008aaa:	b140      	cbz	r0, 8008abe <_svfiprintf_r+0x152>
 8008aac:	2340      	movs	r3, #64	; 0x40
 8008aae:	eba0 000a 	sub.w	r0, r0, sl
 8008ab2:	fa03 f000 	lsl.w	r0, r3, r0
 8008ab6:	9b04      	ldr	r3, [sp, #16]
 8008ab8:	4303      	orrs	r3, r0
 8008aba:	3401      	adds	r4, #1
 8008abc:	9304      	str	r3, [sp, #16]
 8008abe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ac2:	4826      	ldr	r0, [pc, #152]	; (8008b5c <_svfiprintf_r+0x1f0>)
 8008ac4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ac8:	2206      	movs	r2, #6
 8008aca:	f7f7 fba9 	bl	8000220 <memchr>
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	d038      	beq.n	8008b44 <_svfiprintf_r+0x1d8>
 8008ad2:	4b23      	ldr	r3, [pc, #140]	; (8008b60 <_svfiprintf_r+0x1f4>)
 8008ad4:	bb1b      	cbnz	r3, 8008b1e <_svfiprintf_r+0x1b2>
 8008ad6:	9b03      	ldr	r3, [sp, #12]
 8008ad8:	3307      	adds	r3, #7
 8008ada:	f023 0307 	bic.w	r3, r3, #7
 8008ade:	3308      	adds	r3, #8
 8008ae0:	9303      	str	r3, [sp, #12]
 8008ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ae4:	4433      	add	r3, r6
 8008ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ae8:	e767      	b.n	80089ba <_svfiprintf_r+0x4e>
 8008aea:	fb0c 3202 	mla	r2, ip, r2, r3
 8008aee:	460c      	mov	r4, r1
 8008af0:	2001      	movs	r0, #1
 8008af2:	e7a5      	b.n	8008a40 <_svfiprintf_r+0xd4>
 8008af4:	2300      	movs	r3, #0
 8008af6:	3401      	adds	r4, #1
 8008af8:	9305      	str	r3, [sp, #20]
 8008afa:	4619      	mov	r1, r3
 8008afc:	f04f 0c0a 	mov.w	ip, #10
 8008b00:	4620      	mov	r0, r4
 8008b02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b06:	3a30      	subs	r2, #48	; 0x30
 8008b08:	2a09      	cmp	r2, #9
 8008b0a:	d903      	bls.n	8008b14 <_svfiprintf_r+0x1a8>
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d0c5      	beq.n	8008a9c <_svfiprintf_r+0x130>
 8008b10:	9105      	str	r1, [sp, #20]
 8008b12:	e7c3      	b.n	8008a9c <_svfiprintf_r+0x130>
 8008b14:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b18:	4604      	mov	r4, r0
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e7f0      	b.n	8008b00 <_svfiprintf_r+0x194>
 8008b1e:	ab03      	add	r3, sp, #12
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	462a      	mov	r2, r5
 8008b24:	4b0f      	ldr	r3, [pc, #60]	; (8008b64 <_svfiprintf_r+0x1f8>)
 8008b26:	a904      	add	r1, sp, #16
 8008b28:	4638      	mov	r0, r7
 8008b2a:	f3af 8000 	nop.w
 8008b2e:	1c42      	adds	r2, r0, #1
 8008b30:	4606      	mov	r6, r0
 8008b32:	d1d6      	bne.n	8008ae2 <_svfiprintf_r+0x176>
 8008b34:	89ab      	ldrh	r3, [r5, #12]
 8008b36:	065b      	lsls	r3, r3, #25
 8008b38:	f53f af2c 	bmi.w	8008994 <_svfiprintf_r+0x28>
 8008b3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b3e:	b01d      	add	sp, #116	; 0x74
 8008b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b44:	ab03      	add	r3, sp, #12
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	462a      	mov	r2, r5
 8008b4a:	4b06      	ldr	r3, [pc, #24]	; (8008b64 <_svfiprintf_r+0x1f8>)
 8008b4c:	a904      	add	r1, sp, #16
 8008b4e:	4638      	mov	r0, r7
 8008b50:	f000 f87a 	bl	8008c48 <_printf_i>
 8008b54:	e7eb      	b.n	8008b2e <_svfiprintf_r+0x1c2>
 8008b56:	bf00      	nop
 8008b58:	0800982a 	.word	0x0800982a
 8008b5c:	08009834 	.word	0x08009834
 8008b60:	00000000 	.word	0x00000000
 8008b64:	080088b5 	.word	0x080088b5
 8008b68:	08009830 	.word	0x08009830

08008b6c <_printf_common>:
 8008b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b70:	4616      	mov	r6, r2
 8008b72:	4699      	mov	r9, r3
 8008b74:	688a      	ldr	r2, [r1, #8]
 8008b76:	690b      	ldr	r3, [r1, #16]
 8008b78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	bfb8      	it	lt
 8008b80:	4613      	movlt	r3, r2
 8008b82:	6033      	str	r3, [r6, #0]
 8008b84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b88:	4607      	mov	r7, r0
 8008b8a:	460c      	mov	r4, r1
 8008b8c:	b10a      	cbz	r2, 8008b92 <_printf_common+0x26>
 8008b8e:	3301      	adds	r3, #1
 8008b90:	6033      	str	r3, [r6, #0]
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	0699      	lsls	r1, r3, #26
 8008b96:	bf42      	ittt	mi
 8008b98:	6833      	ldrmi	r3, [r6, #0]
 8008b9a:	3302      	addmi	r3, #2
 8008b9c:	6033      	strmi	r3, [r6, #0]
 8008b9e:	6825      	ldr	r5, [r4, #0]
 8008ba0:	f015 0506 	ands.w	r5, r5, #6
 8008ba4:	d106      	bne.n	8008bb4 <_printf_common+0x48>
 8008ba6:	f104 0a19 	add.w	sl, r4, #25
 8008baa:	68e3      	ldr	r3, [r4, #12]
 8008bac:	6832      	ldr	r2, [r6, #0]
 8008bae:	1a9b      	subs	r3, r3, r2
 8008bb0:	42ab      	cmp	r3, r5
 8008bb2:	dc26      	bgt.n	8008c02 <_printf_common+0x96>
 8008bb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008bb8:	1e13      	subs	r3, r2, #0
 8008bba:	6822      	ldr	r2, [r4, #0]
 8008bbc:	bf18      	it	ne
 8008bbe:	2301      	movne	r3, #1
 8008bc0:	0692      	lsls	r2, r2, #26
 8008bc2:	d42b      	bmi.n	8008c1c <_printf_common+0xb0>
 8008bc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bc8:	4649      	mov	r1, r9
 8008bca:	4638      	mov	r0, r7
 8008bcc:	47c0      	blx	r8
 8008bce:	3001      	adds	r0, #1
 8008bd0:	d01e      	beq.n	8008c10 <_printf_common+0xa4>
 8008bd2:	6823      	ldr	r3, [r4, #0]
 8008bd4:	68e5      	ldr	r5, [r4, #12]
 8008bd6:	6832      	ldr	r2, [r6, #0]
 8008bd8:	f003 0306 	and.w	r3, r3, #6
 8008bdc:	2b04      	cmp	r3, #4
 8008bde:	bf08      	it	eq
 8008be0:	1aad      	subeq	r5, r5, r2
 8008be2:	68a3      	ldr	r3, [r4, #8]
 8008be4:	6922      	ldr	r2, [r4, #16]
 8008be6:	bf0c      	ite	eq
 8008be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bec:	2500      	movne	r5, #0
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	bfc4      	itt	gt
 8008bf2:	1a9b      	subgt	r3, r3, r2
 8008bf4:	18ed      	addgt	r5, r5, r3
 8008bf6:	2600      	movs	r6, #0
 8008bf8:	341a      	adds	r4, #26
 8008bfa:	42b5      	cmp	r5, r6
 8008bfc:	d11a      	bne.n	8008c34 <_printf_common+0xc8>
 8008bfe:	2000      	movs	r0, #0
 8008c00:	e008      	b.n	8008c14 <_printf_common+0xa8>
 8008c02:	2301      	movs	r3, #1
 8008c04:	4652      	mov	r2, sl
 8008c06:	4649      	mov	r1, r9
 8008c08:	4638      	mov	r0, r7
 8008c0a:	47c0      	blx	r8
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	d103      	bne.n	8008c18 <_printf_common+0xac>
 8008c10:	f04f 30ff 	mov.w	r0, #4294967295
 8008c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c18:	3501      	adds	r5, #1
 8008c1a:	e7c6      	b.n	8008baa <_printf_common+0x3e>
 8008c1c:	18e1      	adds	r1, r4, r3
 8008c1e:	1c5a      	adds	r2, r3, #1
 8008c20:	2030      	movs	r0, #48	; 0x30
 8008c22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c26:	4422      	add	r2, r4
 8008c28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c30:	3302      	adds	r3, #2
 8008c32:	e7c7      	b.n	8008bc4 <_printf_common+0x58>
 8008c34:	2301      	movs	r3, #1
 8008c36:	4622      	mov	r2, r4
 8008c38:	4649      	mov	r1, r9
 8008c3a:	4638      	mov	r0, r7
 8008c3c:	47c0      	blx	r8
 8008c3e:	3001      	adds	r0, #1
 8008c40:	d0e6      	beq.n	8008c10 <_printf_common+0xa4>
 8008c42:	3601      	adds	r6, #1
 8008c44:	e7d9      	b.n	8008bfa <_printf_common+0x8e>
	...

08008c48 <_printf_i>:
 8008c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c4c:	460c      	mov	r4, r1
 8008c4e:	4691      	mov	r9, r2
 8008c50:	7e27      	ldrb	r7, [r4, #24]
 8008c52:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008c54:	2f78      	cmp	r7, #120	; 0x78
 8008c56:	4680      	mov	r8, r0
 8008c58:	469a      	mov	sl, r3
 8008c5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c5e:	d807      	bhi.n	8008c70 <_printf_i+0x28>
 8008c60:	2f62      	cmp	r7, #98	; 0x62
 8008c62:	d80a      	bhi.n	8008c7a <_printf_i+0x32>
 8008c64:	2f00      	cmp	r7, #0
 8008c66:	f000 80d8 	beq.w	8008e1a <_printf_i+0x1d2>
 8008c6a:	2f58      	cmp	r7, #88	; 0x58
 8008c6c:	f000 80a3 	beq.w	8008db6 <_printf_i+0x16e>
 8008c70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008c74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c78:	e03a      	b.n	8008cf0 <_printf_i+0xa8>
 8008c7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c7e:	2b15      	cmp	r3, #21
 8008c80:	d8f6      	bhi.n	8008c70 <_printf_i+0x28>
 8008c82:	a001      	add	r0, pc, #4	; (adr r0, 8008c88 <_printf_i+0x40>)
 8008c84:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008c88:	08008ce1 	.word	0x08008ce1
 8008c8c:	08008cf5 	.word	0x08008cf5
 8008c90:	08008c71 	.word	0x08008c71
 8008c94:	08008c71 	.word	0x08008c71
 8008c98:	08008c71 	.word	0x08008c71
 8008c9c:	08008c71 	.word	0x08008c71
 8008ca0:	08008cf5 	.word	0x08008cf5
 8008ca4:	08008c71 	.word	0x08008c71
 8008ca8:	08008c71 	.word	0x08008c71
 8008cac:	08008c71 	.word	0x08008c71
 8008cb0:	08008c71 	.word	0x08008c71
 8008cb4:	08008e01 	.word	0x08008e01
 8008cb8:	08008d25 	.word	0x08008d25
 8008cbc:	08008de3 	.word	0x08008de3
 8008cc0:	08008c71 	.word	0x08008c71
 8008cc4:	08008c71 	.word	0x08008c71
 8008cc8:	08008e23 	.word	0x08008e23
 8008ccc:	08008c71 	.word	0x08008c71
 8008cd0:	08008d25 	.word	0x08008d25
 8008cd4:	08008c71 	.word	0x08008c71
 8008cd8:	08008c71 	.word	0x08008c71
 8008cdc:	08008deb 	.word	0x08008deb
 8008ce0:	680b      	ldr	r3, [r1, #0]
 8008ce2:	1d1a      	adds	r2, r3, #4
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	600a      	str	r2, [r1, #0]
 8008ce8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008cec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e0a3      	b.n	8008e3c <_printf_i+0x1f4>
 8008cf4:	6825      	ldr	r5, [r4, #0]
 8008cf6:	6808      	ldr	r0, [r1, #0]
 8008cf8:	062e      	lsls	r6, r5, #24
 8008cfa:	f100 0304 	add.w	r3, r0, #4
 8008cfe:	d50a      	bpl.n	8008d16 <_printf_i+0xce>
 8008d00:	6805      	ldr	r5, [r0, #0]
 8008d02:	600b      	str	r3, [r1, #0]
 8008d04:	2d00      	cmp	r5, #0
 8008d06:	da03      	bge.n	8008d10 <_printf_i+0xc8>
 8008d08:	232d      	movs	r3, #45	; 0x2d
 8008d0a:	426d      	negs	r5, r5
 8008d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d10:	485e      	ldr	r0, [pc, #376]	; (8008e8c <_printf_i+0x244>)
 8008d12:	230a      	movs	r3, #10
 8008d14:	e019      	b.n	8008d4a <_printf_i+0x102>
 8008d16:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008d1a:	6805      	ldr	r5, [r0, #0]
 8008d1c:	600b      	str	r3, [r1, #0]
 8008d1e:	bf18      	it	ne
 8008d20:	b22d      	sxthne	r5, r5
 8008d22:	e7ef      	b.n	8008d04 <_printf_i+0xbc>
 8008d24:	680b      	ldr	r3, [r1, #0]
 8008d26:	6825      	ldr	r5, [r4, #0]
 8008d28:	1d18      	adds	r0, r3, #4
 8008d2a:	6008      	str	r0, [r1, #0]
 8008d2c:	0628      	lsls	r0, r5, #24
 8008d2e:	d501      	bpl.n	8008d34 <_printf_i+0xec>
 8008d30:	681d      	ldr	r5, [r3, #0]
 8008d32:	e002      	b.n	8008d3a <_printf_i+0xf2>
 8008d34:	0669      	lsls	r1, r5, #25
 8008d36:	d5fb      	bpl.n	8008d30 <_printf_i+0xe8>
 8008d38:	881d      	ldrh	r5, [r3, #0]
 8008d3a:	4854      	ldr	r0, [pc, #336]	; (8008e8c <_printf_i+0x244>)
 8008d3c:	2f6f      	cmp	r7, #111	; 0x6f
 8008d3e:	bf0c      	ite	eq
 8008d40:	2308      	moveq	r3, #8
 8008d42:	230a      	movne	r3, #10
 8008d44:	2100      	movs	r1, #0
 8008d46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d4a:	6866      	ldr	r6, [r4, #4]
 8008d4c:	60a6      	str	r6, [r4, #8]
 8008d4e:	2e00      	cmp	r6, #0
 8008d50:	bfa2      	ittt	ge
 8008d52:	6821      	ldrge	r1, [r4, #0]
 8008d54:	f021 0104 	bicge.w	r1, r1, #4
 8008d58:	6021      	strge	r1, [r4, #0]
 8008d5a:	b90d      	cbnz	r5, 8008d60 <_printf_i+0x118>
 8008d5c:	2e00      	cmp	r6, #0
 8008d5e:	d04d      	beq.n	8008dfc <_printf_i+0x1b4>
 8008d60:	4616      	mov	r6, r2
 8008d62:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d66:	fb03 5711 	mls	r7, r3, r1, r5
 8008d6a:	5dc7      	ldrb	r7, [r0, r7]
 8008d6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d70:	462f      	mov	r7, r5
 8008d72:	42bb      	cmp	r3, r7
 8008d74:	460d      	mov	r5, r1
 8008d76:	d9f4      	bls.n	8008d62 <_printf_i+0x11a>
 8008d78:	2b08      	cmp	r3, #8
 8008d7a:	d10b      	bne.n	8008d94 <_printf_i+0x14c>
 8008d7c:	6823      	ldr	r3, [r4, #0]
 8008d7e:	07df      	lsls	r7, r3, #31
 8008d80:	d508      	bpl.n	8008d94 <_printf_i+0x14c>
 8008d82:	6923      	ldr	r3, [r4, #16]
 8008d84:	6861      	ldr	r1, [r4, #4]
 8008d86:	4299      	cmp	r1, r3
 8008d88:	bfde      	ittt	le
 8008d8a:	2330      	movle	r3, #48	; 0x30
 8008d8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d94:	1b92      	subs	r2, r2, r6
 8008d96:	6122      	str	r2, [r4, #16]
 8008d98:	f8cd a000 	str.w	sl, [sp]
 8008d9c:	464b      	mov	r3, r9
 8008d9e:	aa03      	add	r2, sp, #12
 8008da0:	4621      	mov	r1, r4
 8008da2:	4640      	mov	r0, r8
 8008da4:	f7ff fee2 	bl	8008b6c <_printf_common>
 8008da8:	3001      	adds	r0, #1
 8008daa:	d14c      	bne.n	8008e46 <_printf_i+0x1fe>
 8008dac:	f04f 30ff 	mov.w	r0, #4294967295
 8008db0:	b004      	add	sp, #16
 8008db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008db6:	4835      	ldr	r0, [pc, #212]	; (8008e8c <_printf_i+0x244>)
 8008db8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008dbc:	6823      	ldr	r3, [r4, #0]
 8008dbe:	680e      	ldr	r6, [r1, #0]
 8008dc0:	061f      	lsls	r7, r3, #24
 8008dc2:	f856 5b04 	ldr.w	r5, [r6], #4
 8008dc6:	600e      	str	r6, [r1, #0]
 8008dc8:	d514      	bpl.n	8008df4 <_printf_i+0x1ac>
 8008dca:	07d9      	lsls	r1, r3, #31
 8008dcc:	bf44      	itt	mi
 8008dce:	f043 0320 	orrmi.w	r3, r3, #32
 8008dd2:	6023      	strmi	r3, [r4, #0]
 8008dd4:	b91d      	cbnz	r5, 8008dde <_printf_i+0x196>
 8008dd6:	6823      	ldr	r3, [r4, #0]
 8008dd8:	f023 0320 	bic.w	r3, r3, #32
 8008ddc:	6023      	str	r3, [r4, #0]
 8008dde:	2310      	movs	r3, #16
 8008de0:	e7b0      	b.n	8008d44 <_printf_i+0xfc>
 8008de2:	6823      	ldr	r3, [r4, #0]
 8008de4:	f043 0320 	orr.w	r3, r3, #32
 8008de8:	6023      	str	r3, [r4, #0]
 8008dea:	2378      	movs	r3, #120	; 0x78
 8008dec:	4828      	ldr	r0, [pc, #160]	; (8008e90 <_printf_i+0x248>)
 8008dee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008df2:	e7e3      	b.n	8008dbc <_printf_i+0x174>
 8008df4:	065e      	lsls	r6, r3, #25
 8008df6:	bf48      	it	mi
 8008df8:	b2ad      	uxthmi	r5, r5
 8008dfa:	e7e6      	b.n	8008dca <_printf_i+0x182>
 8008dfc:	4616      	mov	r6, r2
 8008dfe:	e7bb      	b.n	8008d78 <_printf_i+0x130>
 8008e00:	680b      	ldr	r3, [r1, #0]
 8008e02:	6826      	ldr	r6, [r4, #0]
 8008e04:	6960      	ldr	r0, [r4, #20]
 8008e06:	1d1d      	adds	r5, r3, #4
 8008e08:	600d      	str	r5, [r1, #0]
 8008e0a:	0635      	lsls	r5, r6, #24
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	d501      	bpl.n	8008e14 <_printf_i+0x1cc>
 8008e10:	6018      	str	r0, [r3, #0]
 8008e12:	e002      	b.n	8008e1a <_printf_i+0x1d2>
 8008e14:	0671      	lsls	r1, r6, #25
 8008e16:	d5fb      	bpl.n	8008e10 <_printf_i+0x1c8>
 8008e18:	8018      	strh	r0, [r3, #0]
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	6123      	str	r3, [r4, #16]
 8008e1e:	4616      	mov	r6, r2
 8008e20:	e7ba      	b.n	8008d98 <_printf_i+0x150>
 8008e22:	680b      	ldr	r3, [r1, #0]
 8008e24:	1d1a      	adds	r2, r3, #4
 8008e26:	600a      	str	r2, [r1, #0]
 8008e28:	681e      	ldr	r6, [r3, #0]
 8008e2a:	6862      	ldr	r2, [r4, #4]
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	4630      	mov	r0, r6
 8008e30:	f7f7 f9f6 	bl	8000220 <memchr>
 8008e34:	b108      	cbz	r0, 8008e3a <_printf_i+0x1f2>
 8008e36:	1b80      	subs	r0, r0, r6
 8008e38:	6060      	str	r0, [r4, #4]
 8008e3a:	6863      	ldr	r3, [r4, #4]
 8008e3c:	6123      	str	r3, [r4, #16]
 8008e3e:	2300      	movs	r3, #0
 8008e40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e44:	e7a8      	b.n	8008d98 <_printf_i+0x150>
 8008e46:	6923      	ldr	r3, [r4, #16]
 8008e48:	4632      	mov	r2, r6
 8008e4a:	4649      	mov	r1, r9
 8008e4c:	4640      	mov	r0, r8
 8008e4e:	47d0      	blx	sl
 8008e50:	3001      	adds	r0, #1
 8008e52:	d0ab      	beq.n	8008dac <_printf_i+0x164>
 8008e54:	6823      	ldr	r3, [r4, #0]
 8008e56:	079b      	lsls	r3, r3, #30
 8008e58:	d413      	bmi.n	8008e82 <_printf_i+0x23a>
 8008e5a:	68e0      	ldr	r0, [r4, #12]
 8008e5c:	9b03      	ldr	r3, [sp, #12]
 8008e5e:	4298      	cmp	r0, r3
 8008e60:	bfb8      	it	lt
 8008e62:	4618      	movlt	r0, r3
 8008e64:	e7a4      	b.n	8008db0 <_printf_i+0x168>
 8008e66:	2301      	movs	r3, #1
 8008e68:	4632      	mov	r2, r6
 8008e6a:	4649      	mov	r1, r9
 8008e6c:	4640      	mov	r0, r8
 8008e6e:	47d0      	blx	sl
 8008e70:	3001      	adds	r0, #1
 8008e72:	d09b      	beq.n	8008dac <_printf_i+0x164>
 8008e74:	3501      	adds	r5, #1
 8008e76:	68e3      	ldr	r3, [r4, #12]
 8008e78:	9903      	ldr	r1, [sp, #12]
 8008e7a:	1a5b      	subs	r3, r3, r1
 8008e7c:	42ab      	cmp	r3, r5
 8008e7e:	dcf2      	bgt.n	8008e66 <_printf_i+0x21e>
 8008e80:	e7eb      	b.n	8008e5a <_printf_i+0x212>
 8008e82:	2500      	movs	r5, #0
 8008e84:	f104 0619 	add.w	r6, r4, #25
 8008e88:	e7f5      	b.n	8008e76 <_printf_i+0x22e>
 8008e8a:	bf00      	nop
 8008e8c:	0800983b 	.word	0x0800983b
 8008e90:	0800984c 	.word	0x0800984c

08008e94 <memcpy>:
 8008e94:	440a      	add	r2, r1
 8008e96:	4291      	cmp	r1, r2
 8008e98:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e9c:	d100      	bne.n	8008ea0 <memcpy+0xc>
 8008e9e:	4770      	bx	lr
 8008ea0:	b510      	push	{r4, lr}
 8008ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ea6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008eaa:	4291      	cmp	r1, r2
 8008eac:	d1f9      	bne.n	8008ea2 <memcpy+0xe>
 8008eae:	bd10      	pop	{r4, pc}

08008eb0 <memmove>:
 8008eb0:	4288      	cmp	r0, r1
 8008eb2:	b510      	push	{r4, lr}
 8008eb4:	eb01 0402 	add.w	r4, r1, r2
 8008eb8:	d902      	bls.n	8008ec0 <memmove+0x10>
 8008eba:	4284      	cmp	r4, r0
 8008ebc:	4623      	mov	r3, r4
 8008ebe:	d807      	bhi.n	8008ed0 <memmove+0x20>
 8008ec0:	1e43      	subs	r3, r0, #1
 8008ec2:	42a1      	cmp	r1, r4
 8008ec4:	d008      	beq.n	8008ed8 <memmove+0x28>
 8008ec6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008eca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ece:	e7f8      	b.n	8008ec2 <memmove+0x12>
 8008ed0:	4402      	add	r2, r0
 8008ed2:	4601      	mov	r1, r0
 8008ed4:	428a      	cmp	r2, r1
 8008ed6:	d100      	bne.n	8008eda <memmove+0x2a>
 8008ed8:	bd10      	pop	{r4, pc}
 8008eda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ede:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ee2:	e7f7      	b.n	8008ed4 <memmove+0x24>

08008ee4 <_free_r>:
 8008ee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ee6:	2900      	cmp	r1, #0
 8008ee8:	d048      	beq.n	8008f7c <_free_r+0x98>
 8008eea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008eee:	9001      	str	r0, [sp, #4]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f1a1 0404 	sub.w	r4, r1, #4
 8008ef6:	bfb8      	it	lt
 8008ef8:	18e4      	addlt	r4, r4, r3
 8008efa:	f000 f8d3 	bl	80090a4 <__malloc_lock>
 8008efe:	4a20      	ldr	r2, [pc, #128]	; (8008f80 <_free_r+0x9c>)
 8008f00:	9801      	ldr	r0, [sp, #4]
 8008f02:	6813      	ldr	r3, [r2, #0]
 8008f04:	4615      	mov	r5, r2
 8008f06:	b933      	cbnz	r3, 8008f16 <_free_r+0x32>
 8008f08:	6063      	str	r3, [r4, #4]
 8008f0a:	6014      	str	r4, [r2, #0]
 8008f0c:	b003      	add	sp, #12
 8008f0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f12:	f000 b8cd 	b.w	80090b0 <__malloc_unlock>
 8008f16:	42a3      	cmp	r3, r4
 8008f18:	d90b      	bls.n	8008f32 <_free_r+0x4e>
 8008f1a:	6821      	ldr	r1, [r4, #0]
 8008f1c:	1862      	adds	r2, r4, r1
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	bf04      	itt	eq
 8008f22:	681a      	ldreq	r2, [r3, #0]
 8008f24:	685b      	ldreq	r3, [r3, #4]
 8008f26:	6063      	str	r3, [r4, #4]
 8008f28:	bf04      	itt	eq
 8008f2a:	1852      	addeq	r2, r2, r1
 8008f2c:	6022      	streq	r2, [r4, #0]
 8008f2e:	602c      	str	r4, [r5, #0]
 8008f30:	e7ec      	b.n	8008f0c <_free_r+0x28>
 8008f32:	461a      	mov	r2, r3
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	b10b      	cbz	r3, 8008f3c <_free_r+0x58>
 8008f38:	42a3      	cmp	r3, r4
 8008f3a:	d9fa      	bls.n	8008f32 <_free_r+0x4e>
 8008f3c:	6811      	ldr	r1, [r2, #0]
 8008f3e:	1855      	adds	r5, r2, r1
 8008f40:	42a5      	cmp	r5, r4
 8008f42:	d10b      	bne.n	8008f5c <_free_r+0x78>
 8008f44:	6824      	ldr	r4, [r4, #0]
 8008f46:	4421      	add	r1, r4
 8008f48:	1854      	adds	r4, r2, r1
 8008f4a:	42a3      	cmp	r3, r4
 8008f4c:	6011      	str	r1, [r2, #0]
 8008f4e:	d1dd      	bne.n	8008f0c <_free_r+0x28>
 8008f50:	681c      	ldr	r4, [r3, #0]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	6053      	str	r3, [r2, #4]
 8008f56:	4421      	add	r1, r4
 8008f58:	6011      	str	r1, [r2, #0]
 8008f5a:	e7d7      	b.n	8008f0c <_free_r+0x28>
 8008f5c:	d902      	bls.n	8008f64 <_free_r+0x80>
 8008f5e:	230c      	movs	r3, #12
 8008f60:	6003      	str	r3, [r0, #0]
 8008f62:	e7d3      	b.n	8008f0c <_free_r+0x28>
 8008f64:	6825      	ldr	r5, [r4, #0]
 8008f66:	1961      	adds	r1, r4, r5
 8008f68:	428b      	cmp	r3, r1
 8008f6a:	bf04      	itt	eq
 8008f6c:	6819      	ldreq	r1, [r3, #0]
 8008f6e:	685b      	ldreq	r3, [r3, #4]
 8008f70:	6063      	str	r3, [r4, #4]
 8008f72:	bf04      	itt	eq
 8008f74:	1949      	addeq	r1, r1, r5
 8008f76:	6021      	streq	r1, [r4, #0]
 8008f78:	6054      	str	r4, [r2, #4]
 8008f7a:	e7c7      	b.n	8008f0c <_free_r+0x28>
 8008f7c:	b003      	add	sp, #12
 8008f7e:	bd30      	pop	{r4, r5, pc}
 8008f80:	200007ac 	.word	0x200007ac

08008f84 <_malloc_r>:
 8008f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f86:	1ccd      	adds	r5, r1, #3
 8008f88:	f025 0503 	bic.w	r5, r5, #3
 8008f8c:	3508      	adds	r5, #8
 8008f8e:	2d0c      	cmp	r5, #12
 8008f90:	bf38      	it	cc
 8008f92:	250c      	movcc	r5, #12
 8008f94:	2d00      	cmp	r5, #0
 8008f96:	4606      	mov	r6, r0
 8008f98:	db01      	blt.n	8008f9e <_malloc_r+0x1a>
 8008f9a:	42a9      	cmp	r1, r5
 8008f9c:	d903      	bls.n	8008fa6 <_malloc_r+0x22>
 8008f9e:	230c      	movs	r3, #12
 8008fa0:	6033      	str	r3, [r6, #0]
 8008fa2:	2000      	movs	r0, #0
 8008fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fa6:	f000 f87d 	bl	80090a4 <__malloc_lock>
 8008faa:	4921      	ldr	r1, [pc, #132]	; (8009030 <_malloc_r+0xac>)
 8008fac:	680a      	ldr	r2, [r1, #0]
 8008fae:	4614      	mov	r4, r2
 8008fb0:	b99c      	cbnz	r4, 8008fda <_malloc_r+0x56>
 8008fb2:	4f20      	ldr	r7, [pc, #128]	; (8009034 <_malloc_r+0xb0>)
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	b923      	cbnz	r3, 8008fc2 <_malloc_r+0x3e>
 8008fb8:	4621      	mov	r1, r4
 8008fba:	4630      	mov	r0, r6
 8008fbc:	f000 f862 	bl	8009084 <_sbrk_r>
 8008fc0:	6038      	str	r0, [r7, #0]
 8008fc2:	4629      	mov	r1, r5
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	f000 f85d 	bl	8009084 <_sbrk_r>
 8008fca:	1c43      	adds	r3, r0, #1
 8008fcc:	d123      	bne.n	8009016 <_malloc_r+0x92>
 8008fce:	230c      	movs	r3, #12
 8008fd0:	6033      	str	r3, [r6, #0]
 8008fd2:	4630      	mov	r0, r6
 8008fd4:	f000 f86c 	bl	80090b0 <__malloc_unlock>
 8008fd8:	e7e3      	b.n	8008fa2 <_malloc_r+0x1e>
 8008fda:	6823      	ldr	r3, [r4, #0]
 8008fdc:	1b5b      	subs	r3, r3, r5
 8008fde:	d417      	bmi.n	8009010 <_malloc_r+0x8c>
 8008fe0:	2b0b      	cmp	r3, #11
 8008fe2:	d903      	bls.n	8008fec <_malloc_r+0x68>
 8008fe4:	6023      	str	r3, [r4, #0]
 8008fe6:	441c      	add	r4, r3
 8008fe8:	6025      	str	r5, [r4, #0]
 8008fea:	e004      	b.n	8008ff6 <_malloc_r+0x72>
 8008fec:	6863      	ldr	r3, [r4, #4]
 8008fee:	42a2      	cmp	r2, r4
 8008ff0:	bf0c      	ite	eq
 8008ff2:	600b      	streq	r3, [r1, #0]
 8008ff4:	6053      	strne	r3, [r2, #4]
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	f000 f85a 	bl	80090b0 <__malloc_unlock>
 8008ffc:	f104 000b 	add.w	r0, r4, #11
 8009000:	1d23      	adds	r3, r4, #4
 8009002:	f020 0007 	bic.w	r0, r0, #7
 8009006:	1ac2      	subs	r2, r0, r3
 8009008:	d0cc      	beq.n	8008fa4 <_malloc_r+0x20>
 800900a:	1a1b      	subs	r3, r3, r0
 800900c:	50a3      	str	r3, [r4, r2]
 800900e:	e7c9      	b.n	8008fa4 <_malloc_r+0x20>
 8009010:	4622      	mov	r2, r4
 8009012:	6864      	ldr	r4, [r4, #4]
 8009014:	e7cc      	b.n	8008fb0 <_malloc_r+0x2c>
 8009016:	1cc4      	adds	r4, r0, #3
 8009018:	f024 0403 	bic.w	r4, r4, #3
 800901c:	42a0      	cmp	r0, r4
 800901e:	d0e3      	beq.n	8008fe8 <_malloc_r+0x64>
 8009020:	1a21      	subs	r1, r4, r0
 8009022:	4630      	mov	r0, r6
 8009024:	f000 f82e 	bl	8009084 <_sbrk_r>
 8009028:	3001      	adds	r0, #1
 800902a:	d1dd      	bne.n	8008fe8 <_malloc_r+0x64>
 800902c:	e7cf      	b.n	8008fce <_malloc_r+0x4a>
 800902e:	bf00      	nop
 8009030:	200007ac 	.word	0x200007ac
 8009034:	200007b0 	.word	0x200007b0

08009038 <_realloc_r>:
 8009038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903a:	4607      	mov	r7, r0
 800903c:	4614      	mov	r4, r2
 800903e:	460e      	mov	r6, r1
 8009040:	b921      	cbnz	r1, 800904c <_realloc_r+0x14>
 8009042:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009046:	4611      	mov	r1, r2
 8009048:	f7ff bf9c 	b.w	8008f84 <_malloc_r>
 800904c:	b922      	cbnz	r2, 8009058 <_realloc_r+0x20>
 800904e:	f7ff ff49 	bl	8008ee4 <_free_r>
 8009052:	4625      	mov	r5, r4
 8009054:	4628      	mov	r0, r5
 8009056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009058:	f000 f830 	bl	80090bc <_malloc_usable_size_r>
 800905c:	42a0      	cmp	r0, r4
 800905e:	d20f      	bcs.n	8009080 <_realloc_r+0x48>
 8009060:	4621      	mov	r1, r4
 8009062:	4638      	mov	r0, r7
 8009064:	f7ff ff8e 	bl	8008f84 <_malloc_r>
 8009068:	4605      	mov	r5, r0
 800906a:	2800      	cmp	r0, #0
 800906c:	d0f2      	beq.n	8009054 <_realloc_r+0x1c>
 800906e:	4631      	mov	r1, r6
 8009070:	4622      	mov	r2, r4
 8009072:	f7ff ff0f 	bl	8008e94 <memcpy>
 8009076:	4631      	mov	r1, r6
 8009078:	4638      	mov	r0, r7
 800907a:	f7ff ff33 	bl	8008ee4 <_free_r>
 800907e:	e7e9      	b.n	8009054 <_realloc_r+0x1c>
 8009080:	4635      	mov	r5, r6
 8009082:	e7e7      	b.n	8009054 <_realloc_r+0x1c>

08009084 <_sbrk_r>:
 8009084:	b538      	push	{r3, r4, r5, lr}
 8009086:	4d06      	ldr	r5, [pc, #24]	; (80090a0 <_sbrk_r+0x1c>)
 8009088:	2300      	movs	r3, #0
 800908a:	4604      	mov	r4, r0
 800908c:	4608      	mov	r0, r1
 800908e:	602b      	str	r3, [r5, #0]
 8009090:	f7fb f8a4 	bl	80041dc <_sbrk>
 8009094:	1c43      	adds	r3, r0, #1
 8009096:	d102      	bne.n	800909e <_sbrk_r+0x1a>
 8009098:	682b      	ldr	r3, [r5, #0]
 800909a:	b103      	cbz	r3, 800909e <_sbrk_r+0x1a>
 800909c:	6023      	str	r3, [r4, #0]
 800909e:	bd38      	pop	{r3, r4, r5, pc}
 80090a0:	20000d50 	.word	0x20000d50

080090a4 <__malloc_lock>:
 80090a4:	4801      	ldr	r0, [pc, #4]	; (80090ac <__malloc_lock+0x8>)
 80090a6:	f000 b811 	b.w	80090cc <__retarget_lock_acquire_recursive>
 80090aa:	bf00      	nop
 80090ac:	20000d58 	.word	0x20000d58

080090b0 <__malloc_unlock>:
 80090b0:	4801      	ldr	r0, [pc, #4]	; (80090b8 <__malloc_unlock+0x8>)
 80090b2:	f000 b80c 	b.w	80090ce <__retarget_lock_release_recursive>
 80090b6:	bf00      	nop
 80090b8:	20000d58 	.word	0x20000d58

080090bc <_malloc_usable_size_r>:
 80090bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090c0:	1f18      	subs	r0, r3, #4
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	bfbc      	itt	lt
 80090c6:	580b      	ldrlt	r3, [r1, r0]
 80090c8:	18c0      	addlt	r0, r0, r3
 80090ca:	4770      	bx	lr

080090cc <__retarget_lock_acquire_recursive>:
 80090cc:	4770      	bx	lr

080090ce <__retarget_lock_release_recursive>:
 80090ce:	4770      	bx	lr

080090d0 <log>:
 80090d0:	b538      	push	{r3, r4, r5, lr}
 80090d2:	ed2d 8b02 	vpush	{d8}
 80090d6:	ec55 4b10 	vmov	r4, r5, d0
 80090da:	f000 f841 	bl	8009160 <__ieee754_log>
 80090de:	4b1e      	ldr	r3, [pc, #120]	; (8009158 <log+0x88>)
 80090e0:	eeb0 8a40 	vmov.f32	s16, s0
 80090e4:	eef0 8a60 	vmov.f32	s17, s1
 80090e8:	f993 3000 	ldrsb.w	r3, [r3]
 80090ec:	3301      	adds	r3, #1
 80090ee:	d01a      	beq.n	8009126 <log+0x56>
 80090f0:	4622      	mov	r2, r4
 80090f2:	462b      	mov	r3, r5
 80090f4:	4620      	mov	r0, r4
 80090f6:	4629      	mov	r1, r5
 80090f8:	f7f7 fd38 	bl	8000b6c <__aeabi_dcmpun>
 80090fc:	b998      	cbnz	r0, 8009126 <log+0x56>
 80090fe:	2200      	movs	r2, #0
 8009100:	2300      	movs	r3, #0
 8009102:	4620      	mov	r0, r4
 8009104:	4629      	mov	r1, r5
 8009106:	f7f7 fd27 	bl	8000b58 <__aeabi_dcmpgt>
 800910a:	b960      	cbnz	r0, 8009126 <log+0x56>
 800910c:	2200      	movs	r2, #0
 800910e:	2300      	movs	r3, #0
 8009110:	4620      	mov	r0, r4
 8009112:	4629      	mov	r1, r5
 8009114:	f7f7 fcf8 	bl	8000b08 <__aeabi_dcmpeq>
 8009118:	b160      	cbz	r0, 8009134 <log+0x64>
 800911a:	f7ff fb79 	bl	8008810 <__errno>
 800911e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8009150 <log+0x80>
 8009122:	2322      	movs	r3, #34	; 0x22
 8009124:	6003      	str	r3, [r0, #0]
 8009126:	eeb0 0a48 	vmov.f32	s0, s16
 800912a:	eef0 0a68 	vmov.f32	s1, s17
 800912e:	ecbd 8b02 	vpop	{d8}
 8009132:	bd38      	pop	{r3, r4, r5, pc}
 8009134:	f7ff fb6c 	bl	8008810 <__errno>
 8009138:	ecbd 8b02 	vpop	{d8}
 800913c:	2321      	movs	r3, #33	; 0x21
 800913e:	6003      	str	r3, [r0, #0]
 8009140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009144:	4805      	ldr	r0, [pc, #20]	; (800915c <log+0x8c>)
 8009146:	f000 b9c7 	b.w	80094d8 <nan>
 800914a:	bf00      	nop
 800914c:	f3af 8000 	nop.w
 8009150:	00000000 	.word	0x00000000
 8009154:	fff00000 	.word	0xfff00000
 8009158:	20000768 	.word	0x20000768
 800915c:	0800982f 	.word	0x0800982f

08009160 <__ieee754_log>:
 8009160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009164:	ec51 0b10 	vmov	r0, r1, d0
 8009168:	ed2d 8b04 	vpush	{d8-d9}
 800916c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8009170:	b083      	sub	sp, #12
 8009172:	460d      	mov	r5, r1
 8009174:	da29      	bge.n	80091ca <__ieee754_log+0x6a>
 8009176:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800917a:	4303      	orrs	r3, r0
 800917c:	ee10 2a10 	vmov	r2, s0
 8009180:	d10c      	bne.n	800919c <__ieee754_log+0x3c>
 8009182:	49cf      	ldr	r1, [pc, #828]	; (80094c0 <__ieee754_log+0x360>)
 8009184:	2200      	movs	r2, #0
 8009186:	2300      	movs	r3, #0
 8009188:	2000      	movs	r0, #0
 800918a:	f7f7 fb7f 	bl	800088c <__aeabi_ddiv>
 800918e:	ec41 0b10 	vmov	d0, r0, r1
 8009192:	b003      	add	sp, #12
 8009194:	ecbd 8b04 	vpop	{d8-d9}
 8009198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800919c:	2900      	cmp	r1, #0
 800919e:	da05      	bge.n	80091ac <__ieee754_log+0x4c>
 80091a0:	460b      	mov	r3, r1
 80091a2:	f7f7 f891 	bl	80002c8 <__aeabi_dsub>
 80091a6:	2200      	movs	r2, #0
 80091a8:	2300      	movs	r3, #0
 80091aa:	e7ee      	b.n	800918a <__ieee754_log+0x2a>
 80091ac:	4bc5      	ldr	r3, [pc, #788]	; (80094c4 <__ieee754_log+0x364>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	f7f7 fa42 	bl	8000638 <__aeabi_dmul>
 80091b4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80091b8:	460d      	mov	r5, r1
 80091ba:	4ac3      	ldr	r2, [pc, #780]	; (80094c8 <__ieee754_log+0x368>)
 80091bc:	4295      	cmp	r5, r2
 80091be:	dd06      	ble.n	80091ce <__ieee754_log+0x6e>
 80091c0:	4602      	mov	r2, r0
 80091c2:	460b      	mov	r3, r1
 80091c4:	f7f7 f882 	bl	80002cc <__adddf3>
 80091c8:	e7e1      	b.n	800918e <__ieee754_log+0x2e>
 80091ca:	2300      	movs	r3, #0
 80091cc:	e7f5      	b.n	80091ba <__ieee754_log+0x5a>
 80091ce:	152c      	asrs	r4, r5, #20
 80091d0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80091d4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80091d8:	441c      	add	r4, r3
 80091da:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80091de:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80091e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091e6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80091ea:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80091ee:	ea42 0105 	orr.w	r1, r2, r5
 80091f2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80091f6:	2200      	movs	r2, #0
 80091f8:	4bb4      	ldr	r3, [pc, #720]	; (80094cc <__ieee754_log+0x36c>)
 80091fa:	f7f7 f865 	bl	80002c8 <__aeabi_dsub>
 80091fe:	1cab      	adds	r3, r5, #2
 8009200:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009204:	2b02      	cmp	r3, #2
 8009206:	4682      	mov	sl, r0
 8009208:	468b      	mov	fp, r1
 800920a:	f04f 0200 	mov.w	r2, #0
 800920e:	dc53      	bgt.n	80092b8 <__ieee754_log+0x158>
 8009210:	2300      	movs	r3, #0
 8009212:	f7f7 fc79 	bl	8000b08 <__aeabi_dcmpeq>
 8009216:	b1d0      	cbz	r0, 800924e <__ieee754_log+0xee>
 8009218:	2c00      	cmp	r4, #0
 800921a:	f000 8122 	beq.w	8009462 <__ieee754_log+0x302>
 800921e:	4620      	mov	r0, r4
 8009220:	f7f7 f9a0 	bl	8000564 <__aeabi_i2d>
 8009224:	a390      	add	r3, pc, #576	; (adr r3, 8009468 <__ieee754_log+0x308>)
 8009226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922a:	4606      	mov	r6, r0
 800922c:	460f      	mov	r7, r1
 800922e:	f7f7 fa03 	bl	8000638 <__aeabi_dmul>
 8009232:	a38f      	add	r3, pc, #572	; (adr r3, 8009470 <__ieee754_log+0x310>)
 8009234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009238:	4604      	mov	r4, r0
 800923a:	460d      	mov	r5, r1
 800923c:	4630      	mov	r0, r6
 800923e:	4639      	mov	r1, r7
 8009240:	f7f7 f9fa 	bl	8000638 <__aeabi_dmul>
 8009244:	4602      	mov	r2, r0
 8009246:	460b      	mov	r3, r1
 8009248:	4620      	mov	r0, r4
 800924a:	4629      	mov	r1, r5
 800924c:	e7ba      	b.n	80091c4 <__ieee754_log+0x64>
 800924e:	a38a      	add	r3, pc, #552	; (adr r3, 8009478 <__ieee754_log+0x318>)
 8009250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009254:	4650      	mov	r0, sl
 8009256:	4659      	mov	r1, fp
 8009258:	f7f7 f9ee 	bl	8000638 <__aeabi_dmul>
 800925c:	4602      	mov	r2, r0
 800925e:	460b      	mov	r3, r1
 8009260:	2000      	movs	r0, #0
 8009262:	499b      	ldr	r1, [pc, #620]	; (80094d0 <__ieee754_log+0x370>)
 8009264:	f7f7 f830 	bl	80002c8 <__aeabi_dsub>
 8009268:	4652      	mov	r2, sl
 800926a:	4606      	mov	r6, r0
 800926c:	460f      	mov	r7, r1
 800926e:	465b      	mov	r3, fp
 8009270:	4650      	mov	r0, sl
 8009272:	4659      	mov	r1, fp
 8009274:	f7f7 f9e0 	bl	8000638 <__aeabi_dmul>
 8009278:	4602      	mov	r2, r0
 800927a:	460b      	mov	r3, r1
 800927c:	4630      	mov	r0, r6
 800927e:	4639      	mov	r1, r7
 8009280:	f7f7 f9da 	bl	8000638 <__aeabi_dmul>
 8009284:	4606      	mov	r6, r0
 8009286:	460f      	mov	r7, r1
 8009288:	b914      	cbnz	r4, 8009290 <__ieee754_log+0x130>
 800928a:	4632      	mov	r2, r6
 800928c:	463b      	mov	r3, r7
 800928e:	e0a2      	b.n	80093d6 <__ieee754_log+0x276>
 8009290:	4620      	mov	r0, r4
 8009292:	f7f7 f967 	bl	8000564 <__aeabi_i2d>
 8009296:	a374      	add	r3, pc, #464	; (adr r3, 8009468 <__ieee754_log+0x308>)
 8009298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929c:	4680      	mov	r8, r0
 800929e:	4689      	mov	r9, r1
 80092a0:	f7f7 f9ca 	bl	8000638 <__aeabi_dmul>
 80092a4:	a372      	add	r3, pc, #456	; (adr r3, 8009470 <__ieee754_log+0x310>)
 80092a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092aa:	4604      	mov	r4, r0
 80092ac:	460d      	mov	r5, r1
 80092ae:	4640      	mov	r0, r8
 80092b0:	4649      	mov	r1, r9
 80092b2:	f7f7 f9c1 	bl	8000638 <__aeabi_dmul>
 80092b6:	e0a7      	b.n	8009408 <__ieee754_log+0x2a8>
 80092b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092bc:	f7f7 f806 	bl	80002cc <__adddf3>
 80092c0:	4602      	mov	r2, r0
 80092c2:	460b      	mov	r3, r1
 80092c4:	4650      	mov	r0, sl
 80092c6:	4659      	mov	r1, fp
 80092c8:	f7f7 fae0 	bl	800088c <__aeabi_ddiv>
 80092cc:	ec41 0b18 	vmov	d8, r0, r1
 80092d0:	4620      	mov	r0, r4
 80092d2:	f7f7 f947 	bl	8000564 <__aeabi_i2d>
 80092d6:	ec53 2b18 	vmov	r2, r3, d8
 80092da:	ec41 0b19 	vmov	d9, r0, r1
 80092de:	ec51 0b18 	vmov	r0, r1, d8
 80092e2:	f7f7 f9a9 	bl	8000638 <__aeabi_dmul>
 80092e6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80092ea:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80092ee:	9301      	str	r3, [sp, #4]
 80092f0:	4602      	mov	r2, r0
 80092f2:	460b      	mov	r3, r1
 80092f4:	4680      	mov	r8, r0
 80092f6:	4689      	mov	r9, r1
 80092f8:	f7f7 f99e 	bl	8000638 <__aeabi_dmul>
 80092fc:	a360      	add	r3, pc, #384	; (adr r3, 8009480 <__ieee754_log+0x320>)
 80092fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009302:	4606      	mov	r6, r0
 8009304:	460f      	mov	r7, r1
 8009306:	f7f7 f997 	bl	8000638 <__aeabi_dmul>
 800930a:	a35f      	add	r3, pc, #380	; (adr r3, 8009488 <__ieee754_log+0x328>)
 800930c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009310:	f7f6 ffdc 	bl	80002cc <__adddf3>
 8009314:	4632      	mov	r2, r6
 8009316:	463b      	mov	r3, r7
 8009318:	f7f7 f98e 	bl	8000638 <__aeabi_dmul>
 800931c:	a35c      	add	r3, pc, #368	; (adr r3, 8009490 <__ieee754_log+0x330>)
 800931e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009322:	f7f6 ffd3 	bl	80002cc <__adddf3>
 8009326:	4632      	mov	r2, r6
 8009328:	463b      	mov	r3, r7
 800932a:	f7f7 f985 	bl	8000638 <__aeabi_dmul>
 800932e:	a35a      	add	r3, pc, #360	; (adr r3, 8009498 <__ieee754_log+0x338>)
 8009330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009334:	f7f6 ffca 	bl	80002cc <__adddf3>
 8009338:	4642      	mov	r2, r8
 800933a:	464b      	mov	r3, r9
 800933c:	f7f7 f97c 	bl	8000638 <__aeabi_dmul>
 8009340:	a357      	add	r3, pc, #348	; (adr r3, 80094a0 <__ieee754_log+0x340>)
 8009342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009346:	4680      	mov	r8, r0
 8009348:	4689      	mov	r9, r1
 800934a:	4630      	mov	r0, r6
 800934c:	4639      	mov	r1, r7
 800934e:	f7f7 f973 	bl	8000638 <__aeabi_dmul>
 8009352:	a355      	add	r3, pc, #340	; (adr r3, 80094a8 <__ieee754_log+0x348>)
 8009354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009358:	f7f6 ffb8 	bl	80002cc <__adddf3>
 800935c:	4632      	mov	r2, r6
 800935e:	463b      	mov	r3, r7
 8009360:	f7f7 f96a 	bl	8000638 <__aeabi_dmul>
 8009364:	a352      	add	r3, pc, #328	; (adr r3, 80094b0 <__ieee754_log+0x350>)
 8009366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936a:	f7f6 ffaf 	bl	80002cc <__adddf3>
 800936e:	4632      	mov	r2, r6
 8009370:	463b      	mov	r3, r7
 8009372:	f7f7 f961 	bl	8000638 <__aeabi_dmul>
 8009376:	460b      	mov	r3, r1
 8009378:	4602      	mov	r2, r0
 800937a:	4649      	mov	r1, r9
 800937c:	4640      	mov	r0, r8
 800937e:	f7f6 ffa5 	bl	80002cc <__adddf3>
 8009382:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8009386:	9b01      	ldr	r3, [sp, #4]
 8009388:	3551      	adds	r5, #81	; 0x51
 800938a:	431d      	orrs	r5, r3
 800938c:	2d00      	cmp	r5, #0
 800938e:	4680      	mov	r8, r0
 8009390:	4689      	mov	r9, r1
 8009392:	dd48      	ble.n	8009426 <__ieee754_log+0x2c6>
 8009394:	4b4e      	ldr	r3, [pc, #312]	; (80094d0 <__ieee754_log+0x370>)
 8009396:	2200      	movs	r2, #0
 8009398:	4650      	mov	r0, sl
 800939a:	4659      	mov	r1, fp
 800939c:	f7f7 f94c 	bl	8000638 <__aeabi_dmul>
 80093a0:	4652      	mov	r2, sl
 80093a2:	465b      	mov	r3, fp
 80093a4:	f7f7 f948 	bl	8000638 <__aeabi_dmul>
 80093a8:	4602      	mov	r2, r0
 80093aa:	460b      	mov	r3, r1
 80093ac:	4606      	mov	r6, r0
 80093ae:	460f      	mov	r7, r1
 80093b0:	4640      	mov	r0, r8
 80093b2:	4649      	mov	r1, r9
 80093b4:	f7f6 ff8a 	bl	80002cc <__adddf3>
 80093b8:	ec53 2b18 	vmov	r2, r3, d8
 80093bc:	f7f7 f93c 	bl	8000638 <__aeabi_dmul>
 80093c0:	4680      	mov	r8, r0
 80093c2:	4689      	mov	r9, r1
 80093c4:	b964      	cbnz	r4, 80093e0 <__ieee754_log+0x280>
 80093c6:	4602      	mov	r2, r0
 80093c8:	460b      	mov	r3, r1
 80093ca:	4630      	mov	r0, r6
 80093cc:	4639      	mov	r1, r7
 80093ce:	f7f6 ff7b 	bl	80002c8 <__aeabi_dsub>
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	4650      	mov	r0, sl
 80093d8:	4659      	mov	r1, fp
 80093da:	f7f6 ff75 	bl	80002c8 <__aeabi_dsub>
 80093de:	e6d6      	b.n	800918e <__ieee754_log+0x2e>
 80093e0:	a321      	add	r3, pc, #132	; (adr r3, 8009468 <__ieee754_log+0x308>)
 80093e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e6:	ec51 0b19 	vmov	r0, r1, d9
 80093ea:	f7f7 f925 	bl	8000638 <__aeabi_dmul>
 80093ee:	a320      	add	r3, pc, #128	; (adr r3, 8009470 <__ieee754_log+0x310>)
 80093f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f4:	4604      	mov	r4, r0
 80093f6:	460d      	mov	r5, r1
 80093f8:	ec51 0b19 	vmov	r0, r1, d9
 80093fc:	f7f7 f91c 	bl	8000638 <__aeabi_dmul>
 8009400:	4642      	mov	r2, r8
 8009402:	464b      	mov	r3, r9
 8009404:	f7f6 ff62 	bl	80002cc <__adddf3>
 8009408:	4602      	mov	r2, r0
 800940a:	460b      	mov	r3, r1
 800940c:	4630      	mov	r0, r6
 800940e:	4639      	mov	r1, r7
 8009410:	f7f6 ff5a 	bl	80002c8 <__aeabi_dsub>
 8009414:	4652      	mov	r2, sl
 8009416:	465b      	mov	r3, fp
 8009418:	f7f6 ff56 	bl	80002c8 <__aeabi_dsub>
 800941c:	4602      	mov	r2, r0
 800941e:	460b      	mov	r3, r1
 8009420:	4620      	mov	r0, r4
 8009422:	4629      	mov	r1, r5
 8009424:	e7d9      	b.n	80093da <__ieee754_log+0x27a>
 8009426:	4602      	mov	r2, r0
 8009428:	460b      	mov	r3, r1
 800942a:	4650      	mov	r0, sl
 800942c:	4659      	mov	r1, fp
 800942e:	f7f6 ff4b 	bl	80002c8 <__aeabi_dsub>
 8009432:	ec53 2b18 	vmov	r2, r3, d8
 8009436:	f7f7 f8ff 	bl	8000638 <__aeabi_dmul>
 800943a:	4606      	mov	r6, r0
 800943c:	460f      	mov	r7, r1
 800943e:	2c00      	cmp	r4, #0
 8009440:	f43f af23 	beq.w	800928a <__ieee754_log+0x12a>
 8009444:	a308      	add	r3, pc, #32	; (adr r3, 8009468 <__ieee754_log+0x308>)
 8009446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944a:	ec51 0b19 	vmov	r0, r1, d9
 800944e:	f7f7 f8f3 	bl	8000638 <__aeabi_dmul>
 8009452:	a307      	add	r3, pc, #28	; (adr r3, 8009470 <__ieee754_log+0x310>)
 8009454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009458:	4604      	mov	r4, r0
 800945a:	460d      	mov	r5, r1
 800945c:	ec51 0b19 	vmov	r0, r1, d9
 8009460:	e727      	b.n	80092b2 <__ieee754_log+0x152>
 8009462:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80094b8 <__ieee754_log+0x358>
 8009466:	e694      	b.n	8009192 <__ieee754_log+0x32>
 8009468:	fee00000 	.word	0xfee00000
 800946c:	3fe62e42 	.word	0x3fe62e42
 8009470:	35793c76 	.word	0x35793c76
 8009474:	3dea39ef 	.word	0x3dea39ef
 8009478:	55555555 	.word	0x55555555
 800947c:	3fd55555 	.word	0x3fd55555
 8009480:	df3e5244 	.word	0xdf3e5244
 8009484:	3fc2f112 	.word	0x3fc2f112
 8009488:	96cb03de 	.word	0x96cb03de
 800948c:	3fc74664 	.word	0x3fc74664
 8009490:	94229359 	.word	0x94229359
 8009494:	3fd24924 	.word	0x3fd24924
 8009498:	55555593 	.word	0x55555593
 800949c:	3fe55555 	.word	0x3fe55555
 80094a0:	d078c69f 	.word	0xd078c69f
 80094a4:	3fc39a09 	.word	0x3fc39a09
 80094a8:	1d8e78af 	.word	0x1d8e78af
 80094ac:	3fcc71c5 	.word	0x3fcc71c5
 80094b0:	9997fa04 	.word	0x9997fa04
 80094b4:	3fd99999 	.word	0x3fd99999
	...
 80094c0:	c3500000 	.word	0xc3500000
 80094c4:	43500000 	.word	0x43500000
 80094c8:	7fefffff 	.word	0x7fefffff
 80094cc:	3ff00000 	.word	0x3ff00000
 80094d0:	3fe00000 	.word	0x3fe00000
 80094d4:	00000000 	.word	0x00000000

080094d8 <nan>:
 80094d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80094e0 <nan+0x8>
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	00000000 	.word	0x00000000
 80094e4:	7ff80000 	.word	0x7ff80000

080094e8 <_init>:
 80094e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ea:	bf00      	nop
 80094ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ee:	bc08      	pop	{r3}
 80094f0:	469e      	mov	lr, r3
 80094f2:	4770      	bx	lr

080094f4 <_fini>:
 80094f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f6:	bf00      	nop
 80094f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094fa:	bc08      	pop	{r3}
 80094fc:	469e      	mov	lr, r3
 80094fe:	4770      	bx	lr
