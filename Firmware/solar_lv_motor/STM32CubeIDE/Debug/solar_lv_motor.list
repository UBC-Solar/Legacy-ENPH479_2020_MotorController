
solar_lv_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  080074bc  080074bc  000174bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007768  08007768  00020768  2**0
                  CONTENTS
  4 .ARM          00000008  08007768  08007768  00017768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007770  08007770  00020768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007770  08007770  00017770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007774  08007774  00017774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000768  20000000  08007778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  20000768  08007ee0  00020768  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b1c  08007ee0  00020b1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020768  2**0
                  CONTENTS, READONLY
 12 .debug_line   00031369  00000000  00000000  00020798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   000534ab  00000000  00000000  00051b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000076f6  00000000  00000000  000a4fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001720  00000000  00000000  000ac6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f2850  00000000  00000000  000addc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002f70  00000000  00000000  001a0618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    000178d5  00000000  00000000  001a3588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002c8a0  00000000  00000000  001bae5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000d2  00000000  00000000  001e76fd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004464  00000000  00000000  001e77d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000768 	.word	0x20000768
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080074a4 	.word	0x080074a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000076c 	.word	0x2000076c
 800020c:	080074a4 	.word	0x080074a4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005be:	e003      	b.n	80005c8 <LoopCopyDataInit>

080005c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005c6:	3104      	adds	r1, #4

080005c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005c8:	480b      	ldr	r0, [pc, #44]	; (80005f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005ca:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005d0:	d3f6      	bcc.n	80005c0 <CopyDataInit>
  ldr  r2, =_sbss
 80005d2:	4a0b      	ldr	r2, [pc, #44]	; (8000600 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005d4:	e002      	b.n	80005dc <LoopFillZerobss>

080005d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005d8:	f842 3b04 	str.w	r3, [r2], #4

080005dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005dc:	4b09      	ldr	r3, [pc, #36]	; (8000604 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005e0:	d3f9      	bcc.n	80005d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005e2:	f002 ff3f 	bl	8003464 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005e6:	f006 fb03 	bl	8006bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005ea:	f000 f897 	bl	800071c <main>
  bx  lr    
 80005ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80005f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80005f4:	08007778 	.word	0x08007778
  ldr  r0, =_sdata
 80005f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80005fc:	20000768 	.word	0x20000768
  ldr  r2, =_sbss
 8000600:	20000768 	.word	0x20000768
  ldr  r3, = _ebss
 8000604:	20000b1c 	.word	0x20000b1c

08000608 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000608:	e7fe      	b.n	8000608 <BusFault_Handler>
	...

0800060c <DAC_Init>:
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  SET_BIT(DACx->CR,
 800060c:	4a02      	ldr	r2, [pc, #8]	; (8000618 <DAC_Init+0xc>)
 800060e:	6813      	ldr	r3, [r2, #0]
 8000610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000614:	6013      	str	r3, [r2, #0]
  */
__weak void DAC_Init(UI_Handle_t *pHandle)
{
  /* Enable DAC Channel2 */
  LL_DAC_Enable(DAC1, LL_DAC_CHANNEL_2);
}
 8000616:	4770      	bx	lr
 8000618:	40007400 	.word	0x40007400

0800061c <DAC_Exec>:
  *         variables will be provided in the related output channels. This is
  *         the implementation of the virtual function.
  * @param  pHandle pointer on related component instance.
  */
__weak void DAC_Exec(UI_Handle_t *pHandle)
{
 800061c:	b538      	push	{r3, r4, r5, lr}
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  MC_Protocol_REG_t bCh_var;

  bCh_var = pDacHandle->bChannel_variable[DAC_CH1];
  LL_DAC_ConvertData12LeftAligned(DAC1, LL_DAC_CHANNEL_2,
                                  DACOFF + ((int16_t)UI_GetReg(pHandle,bCh_var,MC_NULL)));
 800061e:	2200      	movs	r2, #0
 8000620:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
 8000624:	f002 fc1c 	bl	8002e60 <UI_GetReg>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000628:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 800062c:	fa93 f3a3 	rbit	r3, r3
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 8000630:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8000634:	fab3 f383 	clz	r3, r3
 8000638:	40d9      	lsrs	r1, r3
 800063a:	4d09      	ldr	r5, [pc, #36]	; (8000660 <DAC_Exec+0x44>)
  SET_BIT(DACx->SWTRIGR,
 800063c:	4c09      	ldr	r4, [pc, #36]	; (8000664 <DAC_Exec+0x48>)
  
  MODIFY_REG(*preg,
 800063e:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 8000642:	b200      	sxth	r0, r0
 8000644:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000648:	f500 4300 	add.w	r3, r0, #32768	; 0x8000
 800064c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000650:	4313      	orrs	r3, r2
 8000652:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
  SET_BIT(DACx->SWTRIGR,
 8000656:	6863      	ldr	r3, [r4, #4]
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	6063      	str	r3, [r4, #4]
  LL_DAC_TrigSWConversion(DAC1, LL_DAC_CHANNEL_2);
}
 800065e:	bd38      	pop	{r3, r4, r5, pc}
 8000660:	40007408 	.word	0x40007408
 8000664:	40007400 	.word	0x40007400

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	2300      	movs	r3, #0
{
 800066c:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8000672:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000676:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800067a:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067e:	4925      	ldr	r1, [pc, #148]	; (8000714 <SystemClock_Config+0xac>)
 8000680:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000682:	9302      	str	r3, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000686:	4a24      	ldr	r2, [pc, #144]	; (8000718 <SystemClock_Config+0xb0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800068c:	6408      	str	r0, [r1, #64]	; 0x40
 800068e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000690:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8000694:	9100      	str	r1, [sp, #0]
 8000696:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	6813      	ldr	r3, [r2, #0]
 800069c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a0:	6013      	str	r3, [r2, #0]
 80006a2:	6813      	ldr	r3, [r2, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a8:	9301      	str	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006aa:	2401      	movs	r4, #1
 80006ac:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2202      	movs	r2, #2
 80006b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b6:	e9cd 4508 	strd	r4, r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006be:	9801      	ldr	r0, [sp, #4]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c0:	2102      	movs	r1, #2
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2404      	movs	r4, #4
 80006c4:	25b4      	movs	r5, #180	; 0xb4
 80006c6:	2202      	movs	r2, #2
 80006c8:	2302      	movs	r3, #2
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 80006d0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d4:	9114      	str	r1, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f003 fcaf 	bl	8004038 <HAL_RCC_OscConfig>
 80006da:	b108      	cbz	r0, 80006e0 <SystemClock_Config+0x78>
  __ASM volatile ("cpsid i" : : : "memory");
 80006dc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006de:	e7fe      	b.n	80006de <SystemClock_Config+0x76>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006e0:	f003 fb50 	bl	8003d84 <HAL_PWREx_EnableOverDrive>
 80006e4:	b108      	cbz	r0, 80006ea <SystemClock_Config+0x82>
 80006e6:	b672      	cpsid	i
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <SystemClock_Config+0x80>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	260f      	movs	r6, #15
 80006ec:	2702      	movs	r7, #2
 80006ee:	2400      	movs	r4, #0
 80006f0:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f8:	a802      	add	r0, sp, #8
 80006fa:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8000700:	e9cd 4504 	strd	r4, r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000704:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000706:	f003 fb7b 	bl	8003e00 <HAL_RCC_ClockConfig>
 800070a:	b108      	cbz	r0, 8000710 <SystemClock_Config+0xa8>
 800070c:	b672      	cpsid	i
  while (1)
 800070e:	e7fe      	b.n	800070e <SystemClock_Config+0xa6>
}
 8000710:	b017      	add	sp, #92	; 0x5c
 8000712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <main>:
{
 800071c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000720:	b09f      	sub	sp, #124	; 0x7c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000722:	2600      	movs	r6, #0
  HAL_Init();
 8000724:	f002 fed0 	bl	80034c8 <HAL_Init>
  SystemClock_Config();
 8000728:	f7ff ff9e 	bl	8000668 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072c:	4aac      	ldr	r2, [pc, #688]	; (80009e0 <main+0x2c4>)
 800072e:	9602      	str	r6, [sp, #8]
 8000730:	6b11      	ldr	r1, [r2, #48]	; 0x30
  hadc1.Instance = ADC1;
 8000732:	4fac      	ldr	r7, [pc, #688]	; (80009e4 <main+0x2c8>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000734:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8000a00 <main+0x2e4>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000738:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800073c:	6311      	str	r1, [r2, #48]	; 0x30
 800073e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000740:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8000744:	9102      	str	r1, [sp, #8]
 8000746:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000748:	9603      	str	r6, [sp, #12]
 800074a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800074c:	f041 0101 	orr.w	r1, r1, #1
 8000750:	6311      	str	r1, [r2, #48]	; 0x30
 8000752:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000754:	f001 0101 	and.w	r1, r1, #1
 8000758:	9103      	str	r1, [sp, #12]
 800075a:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075c:	9604      	str	r6, [sp, #16]
 800075e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000760:	f041 0104 	orr.w	r1, r1, #4
 8000764:	6311      	str	r1, [r2, #48]	; 0x30
 8000766:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000768:	f001 0104 	and.w	r1, r1, #4
 800076c:	9104      	str	r1, [sp, #16]
 800076e:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000770:	9605      	str	r6, [sp, #20]
 8000772:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000774:	f041 0102 	orr.w	r1, r1, #2
 8000778:	6311      	str	r1, [r2, #48]	; 0x30
 800077a:	6b12      	ldr	r2, [r2, #48]	; 0x30
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800077c:	2520      	movs	r5, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	f002 0202 	and.w	r2, r2, #2
 8000782:	9205      	str	r2, [sp, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000784:	4631      	mov	r1, r6
 8000786:	462a      	mov	r2, r5
 8000788:	a816      	add	r0, sp, #88	; 0x58
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	9c05      	ldr	r4, [sp, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800078c:	f006 fa54 	bl	8006c38 <memset>
  hadc1.Instance = ADC1;
 8000790:	4a95      	ldr	r2, [pc, #596]	; (80009e8 <main+0x2cc>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000792:	960e      	str	r6, [sp, #56]	; 0x38
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000794:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
  hadc1.Init.ScanConvMode = ENABLE;
 8000798:	2401      	movs	r4, #1
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800079a:	f44f 6800 	mov.w	r8, #2048	; 0x800
  hadc1.Init.NbrOfConversion = 2;
 800079e:	f04f 0b02 	mov.w	fp, #2
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a2:	4638      	mov	r0, r7
  ADC_ChannelConfTypeDef sConfig = {0};
 80007a4:	e9cd 660f 	strd	r6, r6, [sp, #60]	; 0x3c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007a8:	e9c7 2a00 	strd	r2, sl, [r7]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ac:	e9c7 4404 	strd	r4, r4, [r7, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007b0:	9611      	str	r6, [sp, #68]	; 0x44
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007b2:	60be      	str	r6, [r7, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007b4:	763e      	strb	r6, [r7, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007b6:	f887 6020 	strb.w	r6, [r7, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ba:	62fe      	str	r6, [r7, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007bc:	f887 6030 	strb.w	r6, [r7, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007c0:	f8c7 9028 	str.w	r9, [r7, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80007c4:	f8c7 800c 	str.w	r8, [r7, #12]
  hadc1.Init.NbrOfConversion = 2;
 80007c8:	f8c7 b01c 	str.w	fp, [r7, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007cc:	f002 feba 	bl	8003544 <HAL_ADC_Init>
 80007d0:	b108      	cbz	r0, 80007d6 <main+0xba>
 80007d2:	b672      	cpsid	i
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <main+0xb8>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80007d6:	4602      	mov	r2, r0
 80007d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80007dc:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80007e0:	2200      	movs	r2, #0
 80007e2:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80007e6:	2201      	movs	r2, #1
 80007e8:	2301      	movs	r3, #1
 80007ea:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80007ee:	a916      	add	r1, sp, #88	; 0x58
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80007f0:	2201      	movs	r2, #1
 80007f2:	2300      	movs	r3, #0
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80007f4:	4638      	mov	r0, r7
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80007f6:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  sConfigInjected.InjectedNbrOfConversion = 1;
 80007fa:	941a      	str	r4, [sp, #104]	; 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80007fc:	f003 f80a 	bl	8003814 <HAL_ADCEx_InjectedConfigChannel>
 8000800:	b108      	cbz	r0, 8000806 <main+0xea>
 8000802:	b672      	cpsid	i
  while (1)
 8000804:	e7fe      	b.n	8000804 <main+0xe8>
  sConfig.Channel = ADC_CHANNEL_15;
 8000806:	220f      	movs	r2, #15
 8000808:	2301      	movs	r3, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800080a:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080c:	a90e      	add	r1, sp, #56	; 0x38
 800080e:	4638      	mov	r0, r7
  sConfig.Channel = ADC_CHANNEL_15;
 8000810:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000814:	f002 ff44 	bl	80036a0 <HAL_ADC_ConfigChannel>
 8000818:	b108      	cbz	r0, 800081e <main+0x102>
 800081a:	b672      	cpsid	i
  while (1)
 800081c:	e7fe      	b.n	800081c <main+0x100>
  sConfig.Channel = ADC_CHANNEL_14;
 800081e:	220e      	movs	r2, #14
 8000820:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000822:	a90e      	add	r1, sp, #56	; 0x38
 8000824:	4638      	mov	r0, r7
  sConfig.Channel = ADC_CHANNEL_14;
 8000826:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800082a:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082e:	f002 ff37 	bl	80036a0 <HAL_ADC_ConfigChannel>
 8000832:	4601      	mov	r1, r0
 8000834:	b108      	cbz	r0, 800083a <main+0x11e>
 8000836:	b672      	cpsid	i
  while (1)
 8000838:	e7fe      	b.n	8000838 <main+0x11c>
  hadc2.Instance = ADC2;
 800083a:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 8000a04 <main+0x2e8>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800083e:	9001      	str	r0, [sp, #4]
 8000840:	462a      	mov	r2, r5
 8000842:	a816      	add	r0, sp, #88	; 0x58
 8000844:	f006 f9f8 	bl	8006c38 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000848:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 800084a:	4b68      	ldr	r3, [pc, #416]	; (80009ec <main+0x2d0>)
 800084c:	f8cb 3000 	str.w	r3, [fp]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000850:	4658      	mov	r0, fp
  ADC_ChannelConfTypeDef sConfig = {0};
 8000852:	e9cd 110f 	strd	r1, r1, [sp, #60]	; 0x3c
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000856:	e9cb a101 	strd	sl, r1, [fp, #4]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800085a:	e9cb 910a 	strd	r9, r1, [fp, #40]	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 800085e:	910e      	str	r1, [sp, #56]	; 0x38
 8000860:	9111      	str	r1, [sp, #68]	; 0x44
  hadc2.Init.ScanConvMode = ENABLE;
 8000862:	f8cb 4010 	str.w	r4, [fp, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000866:	f88b 1018 	strb.w	r1, [fp, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800086a:	f88b 1020 	strb.w	r1, [fp, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800086e:	f8cb 800c 	str.w	r8, [fp, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000872:	f8cb 401c 	str.w	r4, [fp, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000876:	f88b 1030 	strb.w	r1, [fp, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800087a:	f8cb 4014 	str.w	r4, [fp, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800087e:	f002 fe61 	bl	8003544 <HAL_ADC_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	b108      	cbz	r0, 800088a <main+0x16e>
 8000886:	b672      	cpsid	i
  while (1)
 8000888:	e7fe      	b.n	8000888 <main+0x16c>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800088a:	2600      	movs	r6, #0
 800088c:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 8000890:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000894:	2601      	movs	r6, #1
 8000896:	2700      	movs	r7, #0
 8000898:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800089c:	a916      	add	r1, sp, #88	; 0x58
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 800089e:	2604      	movs	r6, #4
 80008a0:	2701      	movs	r7, #1
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80008a2:	4658      	mov	r0, fp
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 80008a4:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
  sConfigInjected.InjectedNbrOfConversion = 1;
 80008a8:	941a      	str	r4, [sp, #104]	; 0x68
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80008aa:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80008ae:	f002 ffb1 	bl	8003814 <HAL_ADCEx_InjectedConfigChannel>
 80008b2:	b108      	cbz	r0, 80008b8 <main+0x19c>
 80008b4:	b672      	cpsid	i
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <main+0x19a>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008b8:	4658      	mov	r0, fp
 80008ba:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_4;
 80008bc:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80008c0:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008c2:	f002 feed 	bl	80036a0 <HAL_ADC_ConfigChannel>
 80008c6:	b108      	cbz	r0, 80008cc <main+0x1b0>
 80008c8:	b672      	cpsid	i
  while (1)
 80008ca:	e7fe      	b.n	80008ca <main+0x1ae>
  hdac.Instance = DAC;
 80008cc:	4e48      	ldr	r6, [pc, #288]	; (80009f0 <main+0x2d4>)
 80008ce:	4b49      	ldr	r3, [pc, #292]	; (80009f4 <main+0x2d8>)
 80008d0:	6033      	str	r3, [r6, #0]
  DAC_ChannelConfTypeDef sConfig = {0};
 80008d2:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80008d6:	4630      	mov	r0, r6
 80008d8:	f003 f902 	bl	8003ae0 <HAL_DAC_Init>
 80008dc:	b108      	cbz	r0, 80008e2 <main+0x1c6>
 80008de:	b672      	cpsid	i
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <main+0x1c4>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80008e2:	4630      	mov	r0, r6
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 80008e4:	2702      	movs	r7, #2
 80008e6:	263c      	movs	r6, #60	; 0x3c
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80008e8:	2210      	movs	r2, #16
 80008ea:	a916      	add	r1, sp, #88	; 0x58
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 80008ec:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80008f0:	f003 f90c 	bl	8003b0c <HAL_DAC_ConfigChannel>
 80008f4:	4606      	mov	r6, r0
 80008f6:	b108      	cbz	r0, 80008fc <main+0x1e0>
 80008f8:	b672      	cpsid	i
  while (1)
 80008fa:	e7fe      	b.n	80008fa <main+0x1de>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008fc:	4601      	mov	r1, r0
 80008fe:	462a      	mov	r2, r5
 8000900:	a816      	add	r0, sp, #88	; 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000902:	e9cd 660e 	strd	r6, r6, [sp, #56]	; 0x38
 8000906:	e9cd 6610 	strd	r6, r6, [sp, #64]	; 0x40
 800090a:	e9cd 6612 	strd	r6, r6, [sp, #72]	; 0x48
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800090e:	e9cd 6609 	strd	r6, r6, [sp, #36]	; 0x24
 8000912:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 8000916:	9608      	str	r6, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000918:	9606      	str	r6, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800091a:	9614      	str	r6, [sp, #80]	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091c:	9607      	str	r6, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800091e:	f006 f98b 	bl	8006c38 <memset>
  htim1.Instance = TIM1;
 8000922:	4835      	ldr	r0, [pc, #212]	; (80009f8 <main+0x2dc>)
 8000924:	4935      	ldr	r1, [pc, #212]	; (80009fc <main+0x2e0>)
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000926:	6046      	str	r6, [r0, #4]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8000928:	f241 1294 	movw	r2, #4500	; 0x1194
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800092c:	f44f 7380 	mov.w	r3, #256	; 0x100
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000930:	e9c0 4605 	strd	r4, r6, [r0, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000934:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000938:	6085      	str	r5, [r0, #8]
  htim1.Instance = TIM1;
 800093a:	6001      	str	r1, [r0, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800093c:	f003 fd50 	bl	80043e0 <HAL_TIM_Base_Init>
 8000940:	b108      	cbz	r0, 8000946 <main+0x22a>
 8000942:	b672      	cpsid	i
  while (1)
 8000944:	e7fe      	b.n	8000944 <main+0x228>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000946:	482c      	ldr	r0, [pc, #176]	; (80009f8 <main+0x2dc>)
 8000948:	f003 fdc8 	bl	80044dc <HAL_TIM_PWM_Init>
 800094c:	b108      	cbz	r0, 8000952 <main+0x236>
 800094e:	b672      	cpsid	i
  while (1)
 8000950:	e7fe      	b.n	8000950 <main+0x234>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000952:	2206      	movs	r2, #6
 8000954:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000956:	4828      	ldr	r0, [pc, #160]	; (80009f8 <main+0x2dc>)
 8000958:	a908      	add	r1, sp, #32
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800095a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800095e:	f003 ffe9 	bl	8004934 <HAL_TIM_SlaveConfigSynchro>
 8000962:	b108      	cbz	r0, 8000968 <main+0x24c>
 8000964:	b672      	cpsid	i
  while (1)
 8000966:	e7fe      	b.n	8000966 <main+0x24a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000968:	2220      	movs	r2, #32
 800096a:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800096c:	4822      	ldr	r0, [pc, #136]	; (80009f8 <main+0x2dc>)
 800096e:	a906      	add	r1, sp, #24
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000970:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000974:	f004 f984 	bl	8004c80 <HAL_TIMEx_MasterConfigSynchronization>
 8000978:	b108      	cbz	r0, 800097e <main+0x262>
 800097a:	b672      	cpsid	i
  while (1)
 800097c:	e7fe      	b.n	800097c <main+0x260>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800097e:	2460      	movs	r4, #96	; 0x60
 8000980:	2500      	movs	r5, #0
 8000982:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000986:	4602      	mov	r2, r0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000988:	2400      	movs	r4, #0
 800098a:	2500      	movs	r5, #0
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800098c:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800098e:	a90e      	add	r1, sp, #56	; 0x38
 8000990:	4819      	ldr	r0, [pc, #100]	; (80009f8 <main+0x2dc>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000992:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 8000996:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800099a:	f003 fe1b 	bl	80045d4 <HAL_TIM_PWM_ConfigChannel>
 800099e:	b108      	cbz	r0, 80009a4 <main+0x288>
 80009a0:	b672      	cpsid	i
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <main+0x286>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009a4:	4814      	ldr	r0, [pc, #80]	; (80009f8 <main+0x2dc>)
 80009a6:	2204      	movs	r2, #4
 80009a8:	a90e      	add	r1, sp, #56	; 0x38
 80009aa:	f003 fe13 	bl	80045d4 <HAL_TIM_PWM_ConfigChannel>
 80009ae:	b108      	cbz	r0, 80009b4 <main+0x298>
 80009b0:	b672      	cpsid	i
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <main+0x296>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009b4:	4810      	ldr	r0, [pc, #64]	; (80009f8 <main+0x2dc>)
 80009b6:	2208      	movs	r2, #8
 80009b8:	a90e      	add	r1, sp, #56	; 0x38
 80009ba:	f003 fe0b 	bl	80045d4 <HAL_TIM_PWM_ConfigChannel>
 80009be:	b108      	cbz	r0, 80009c4 <main+0x2a8>
 80009c0:	b672      	cpsid	i
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <main+0x2a6>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80009c4:	2470      	movs	r4, #112	; 0x70
 80009c6:	f241 1593 	movw	r5, #4499	; 0x1193
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009ca:	480b      	ldr	r0, [pc, #44]	; (80009f8 <main+0x2dc>)
 80009cc:	220c      	movs	r2, #12
 80009ce:	a90e      	add	r1, sp, #56	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80009d0:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009d4:	f003 fdfe 	bl	80045d4 <HAL_TIM_PWM_ConfigChannel>
 80009d8:	b1b0      	cbz	r0, 8000a08 <main+0x2ec>
 80009da:	b672      	cpsid	i
  while (1)
 80009dc:	e7fe      	b.n	80009dc <main+0x2c0>
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800
 80009e4:	200007f4 	.word	0x200007f4
 80009e8:	40012000 	.word	0x40012000
 80009ec:	40012100 	.word	0x40012100
 80009f0:	2000083c 	.word	0x2000083c
 80009f4:	40007400 	.word	0x40007400
 80009f8:	20000850 	.word	0x20000850
 80009fc:	40010000 	.word	0x40010000
 8000a00:	0f000001 	.word	0x0f000001
 8000a04:	200007ac 	.word	0x200007ac
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a10:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8000a14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a18:	2348      	movs	r3, #72	; 0x48
 8000a1a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a1e:	901d      	str	r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a28:	4851      	ldr	r0, [pc, #324]	; (8000b70 <main+0x454>)
 8000a2a:	a916      	add	r1, sp, #88	; 0x58
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a2c:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a30:	f004 f968 	bl	8004d04 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a34:	4604      	mov	r4, r0
 8000a36:	b108      	cbz	r0, 8000a3c <main+0x320>
 8000a38:	b672      	cpsid	i
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <main+0x31e>
  htim2.Instance = TIM2;
 8000a3c:	4d4d      	ldr	r5, [pc, #308]	; (8000b74 <main+0x458>)
  HAL_TIM_MspPostInit(&htim1);
 8000a3e:	484c      	ldr	r0, [pc, #304]	; (8000b70 <main+0x454>)
 8000a40:	f001 fdac 	bl	800259c <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8000a44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a48:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4a:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 8000a4e:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000a52:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8000a56:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5a:	e9cd 4408 	strd	r4, r4, [sp, #32]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5e:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a62:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a64:	61ac      	str	r4, [r5, #24]
  htim2.Instance = TIM2;
 8000a66:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a68:	f003 fcba 	bl	80043e0 <HAL_TIM_Base_Init>
 8000a6c:	b108      	cbz	r0, 8000a72 <main+0x356>
 8000a6e:	b672      	cpsid	i
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <main+0x354>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a76:	4628      	mov	r0, r5
 8000a78:	a916      	add	r1, sp, #88	; 0x58
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a7a:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a7c:	f003 feb6 	bl	80047ec <HAL_TIM_ConfigClockSource>
 8000a80:	b108      	cbz	r0, 8000a86 <main+0x36a>
 8000a82:	b672      	cpsid	i
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <main+0x368>
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a86:	2400      	movs	r4, #0
 8000a88:	2500      	movs	r5, #0
  sConfig.Commutation_Delay = 0;
 8000a8a:	2300      	movs	r3, #0
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000a8c:	4839      	ldr	r0, [pc, #228]	; (8000b74 <main+0x458>)
  sConfig.Commutation_Delay = 0;
 8000a8e:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000a90:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a92:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000a96:	f004 f899 	bl	8004bcc <HAL_TIMEx_HallSensor_Init>
 8000a9a:	b108      	cbz	r0, 8000aa0 <main+0x384>
 8000a9c:	b672      	cpsid	i
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <main+0x382>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000aa0:	2250      	movs	r2, #80	; 0x50
 8000aa2:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aa4:	4833      	ldr	r0, [pc, #204]	; (8000b74 <main+0x458>)
 8000aa6:	a908      	add	r1, sp, #32
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000aa8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aac:	f004 f8e8 	bl	8004c80 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab0:	b108      	cbz	r0, 8000ab6 <main+0x39a>
 8000ab2:	b672      	cpsid	i
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <main+0x398>
  huart2.Instance = USART2;
 8000ab6:	4c30      	ldr	r4, [pc, #192]	; (8000b78 <main+0x45c>)
 8000ab8:	4930      	ldr	r1, [pc, #192]	; (8000b7c <main+0x460>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aba:	60a0      	str	r0, [r4, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000abc:	e9c4 0003 	strd	r0, r0, [r4, #12]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart2.Init.BaudRate = 115200;
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aca:	4620      	mov	r0, r4
  huart2.Init.BaudRate = 115200;
 8000acc:	e9c4 1200 	strd	r1, r2, [r4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad2:	f004 f941 	bl	8004d58 <HAL_UART_Init>
 8000ad6:	4605      	mov	r5, r0
 8000ad8:	b108      	cbz	r0, 8000ade <main+0x3c2>
 8000ada:	b672      	cpsid	i
  while (1)
 8000adc:	e7fe      	b.n	8000adc <main+0x3c0>
  MX_MotorControl_Init();
 8000ade:	f001 fac5 	bl	800206c <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8000ae2:	462a      	mov	r2, r5
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	2012      	movs	r0, #18
 8000ae8:	f002 ff94 	bl	8003a14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000aec:	2012      	movs	r0, #18
 8000aee:	f002 ffc9 	bl	8003a84 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000af2:	462a      	mov	r2, r5
 8000af4:	4629      	mov	r1, r5
 8000af6:	2019      	movs	r0, #25
 8000af8:	f002 ff8c 	bl	8003a14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000afc:	2019      	movs	r0, #25
 8000afe:	f002 ffc1 	bl	8003a84 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 1);
 8000b02:	2201      	movs	r2, #1
 8000b04:	2104      	movs	r1, #4
 8000b06:	2018      	movs	r0, #24
 8000b08:	f002 ff84 	bl	8003a14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000b0c:	2018      	movs	r0, #24
 8000b0e:	f002 ffb9 	bl	8003a84 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8000b12:	462a      	mov	r2, r5
 8000b14:	2103      	movs	r1, #3
 8000b16:	201c      	movs	r0, #28
 8000b18:	f002 ff7c 	bl	8003a14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b1c:	201c      	movs	r0, #28
 8000b1e:	f002 ffb1 	bl	8003a84 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8000b22:	2201      	movs	r2, #1
 8000b24:	2103      	movs	r1, #3
 8000b26:	2026      	movs	r0, #38	; 0x26
 8000b28:	f002 ff74 	bl	8003a14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b2c:	2026      	movs	r0, #38	; 0x26
 8000b2e:	f002 ffa9 	bl	8003a84 <HAL_NVIC_EnableIRQ>
  MC_ProgramSpeedRampMotor1(500/6.0, 1500);
 8000b32:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000b36:	2053      	movs	r0, #83	; 0x53
 8000b38:	f000 f82a 	bl	8000b90 <MC_ProgramSpeedRampMotor1>
  MC_StartMotor1();
 8000b3c:	f000 f822 	bl	8000b84 <MC_StartMotor1>
	  sprintf(msg_debug, "%hu\r\n", user_speed);
 8000b40:	4d0f      	ldr	r5, [pc, #60]	; (8000b80 <main+0x464>)
	  user_speed = HAL_GetTick();
 8000b42:	f002 fce7 	bl	8003514 <HAL_GetTick>
	  sprintf(msg_debug, "%hu\r\n", user_speed);
 8000b46:	4629      	mov	r1, r5
 8000b48:	b282      	uxth	r2, r0
 8000b4a:	a816      	add	r0, sp, #88	; 0x58
 8000b4c:	f006 f87c 	bl	8006c48 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8000b50:	a816      	add	r0, sp, #88	; 0x58
 8000b52:	f7ff fb5d 	bl	8000210 <strlen>
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5a:	b282      	uxth	r2, r0
 8000b5c:	a916      	add	r1, sp, #88	; 0x58
 8000b5e:	4620      	mov	r0, r4
 8000b60:	f004 f99c 	bl	8004e9c <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000b64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b68:	f002 fcda 	bl	8003520 <HAL_Delay>
  while (1)
 8000b6c:	e7e9      	b.n	8000b42 <main+0x426>
 8000b6e:	bf00      	nop
 8000b70:	20000850 	.word	0x20000850
 8000b74:	20000890 	.word	0x20000890
 8000b78:	200008d0 	.word	0x200008d0
 8000b7c:	40004400 	.word	0x40004400
 8000b80:	080074bc 	.word	0x080074bc

08000b84 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8000b84:	4b01      	ldr	r3, [pc, #4]	; (8000b8c <MC_StartMotor1+0x8>)
 8000b86:	6818      	ldr	r0, [r3, #0]
 8000b88:	f000 b838 	b.w	8000bfc <MCI_StartMotor>
 8000b8c:	200009f8 	.word	0x200009f8

08000b90 <MC_ProgramSpeedRampMotor1>:
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1( int16_t hFinalSpeed, uint16_t hDurationms )
{
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 8000b90:	4b02      	ldr	r3, [pc, #8]	; (8000b9c <MC_ProgramSpeedRampMotor1+0xc>)
{
 8000b92:	460a      	mov	r2, r1
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 8000b94:	4601      	mov	r1, r0
 8000b96:	6818      	ldr	r0, [r3, #0]
 8000b98:	f000 b810 	b.w	8000bbc <MCI_ExecSpeedRamp>
 8000b9c:	200009f8 	.word	0x200009f8

08000ba0 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 8000ba0:	b410      	push	{r4}
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000ba2:	2400      	movs	r4, #0
 8000ba4:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8000ba6:	81c4      	strh	r4, [r0, #14]
  pHandle->hFinalTorque = 0;
 8000ba8:	8204      	strh	r4, [r0, #16]
  pHandle->hDurationms = 0;
 8000baa:	82c4      	strh	r4, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8000bac:	7604      	strb	r4, [r0, #24]
  pHandle->pSTC = pSTC;
 8000bae:	e9c0 1200 	strd	r1, r2, [r0]
}
 8000bb2:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->pFOCVars = pFOCVars;
 8000bb6:	6083      	str	r3, [r0, #8]
}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
 8000bbc:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000bbe:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000bc2:	2401      	movs	r4, #1
 8000bc4:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8000bc6:	81c1      	strh	r1, [r0, #14]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8000bc8:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 8000bcc:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000bce:	8303      	strh	r3, [r0, #24]
}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8000bd4:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000bd6:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000bd8:	2402      	movs	r4, #2
 8000bda:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8000bdc:	8201      	strh	r1, [r0, #16]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000bde:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 8000be2:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000be4:	8303      	strh	r3, [r0, #24]
}
 8000be6:	4770      	bx	lr

08000be8 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8000be8:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000bea:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000bec:	2301      	movs	r3, #1
  pHandle->Iqdref.q = Iqdref.q;
 8000bee:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000bf2:	7302      	strb	r2, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000bf4:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000bf6:	b002      	add	sp, #8
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8000bfc:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000bfe:	2103      	movs	r1, #3
{
 8000c00:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000c02:	6800      	ldr	r0, [r0, #0]
 8000c04:	f005 f980 	bl	8005f08 <STM_NextState>

  if ( RetVal == true )
 8000c08:	b108      	cbz	r0, 8000c0e <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8000c0e:	bd10      	pop	{r4, pc}

08000c10 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8000c10:	6800      	ldr	r0, [r0, #0]
 8000c12:	2107      	movs	r1, #7
 8000c14:	f005 b978 	b.w	8005f08 <STM_NextState>

08000c18 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8000c18:	6800      	ldr	r0, [r0, #0]
 8000c1a:	f005 b9eb 	b.w	8005ff4 <STM_FaultAcknowledged>
 8000c1e:	bf00      	nop

08000c20 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8000c20:	6800      	ldr	r0, [r0, #0]
 8000c22:	2101      	movs	r1, #1
 8000c24:	f005 b970 	b.w	8005f08 <STM_NextState>

08000c28 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8000c28:	b178      	cbz	r0, 8000c4a <MCI_ExecBufferedCommands+0x22>
{
 8000c2a:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000c2c:	7e03      	ldrb	r3, [r0, #24]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	4604      	mov	r4, r0
 8000c32:	d000      	beq.n	8000c36 <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8000c34:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 8000c36:	7b01      	ldrb	r1, [r0, #12]
 8000c38:	2902      	cmp	r1, #2
 8000c3a:	d020      	beq.n	8000c7e <MCI_ExecBufferedCommands+0x56>
 8000c3c:	2903      	cmp	r1, #3
 8000c3e:	d005      	beq.n	8000c4c <MCI_ExecBufferedCommands+0x24>
 8000c40:	2901      	cmp	r1, #1
 8000c42:	d00c      	beq.n	8000c5e <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000c44:	2303      	movs	r3, #3
 8000c46:	7623      	strb	r3, [r4, #24]
}
 8000c48:	bd10      	pop	{r4, pc}
 8000c4a:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000c4c:	6882      	ldr	r2, [r0, #8]
 8000c4e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000c52:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8000c56:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	7623      	strb	r3, [r4, #24]
}
 8000c5c:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000c5e:	6883      	ldr	r3, [r0, #8]
 8000c60:	2200      	movs	r2, #0
 8000c62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000c66:	6840      	ldr	r0, [r0, #4]
 8000c68:	f005 f888 	bl	8005d7c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8000c6c:	8ae2      	ldrh	r2, [r4, #22]
 8000c6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c72:	6860      	ldr	r0, [r4, #4]
 8000c74:	f005 f886 	bl	8005d84 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000c78:	2800      	cmp	r0, #0
 8000c7a:	d0e3      	beq.n	8000c44 <MCI_ExecBufferedCommands+0x1c>
 8000c7c:	e7ec      	b.n	8000c58 <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000c7e:	6883      	ldr	r3, [r0, #8]
 8000c80:	2100      	movs	r1, #0
 8000c82:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000c86:	6840      	ldr	r0, [r0, #4]
 8000c88:	f005 f878 	bl	8005d7c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000c8c:	8ae2      	ldrh	r2, [r4, #22]
 8000c8e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8000c92:	6860      	ldr	r0, [r4, #4]
 8000c94:	f005 f876 	bl	8005d84 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000c98:	2800      	cmp	r0, #0
 8000c9a:	d0d3      	beq.n	8000c44 <MCI_ExecBufferedCommands+0x1c>
 8000c9c:	e7dc      	b.n	8000c58 <MCI_ExecBufferedCommands+0x30>
 8000c9e:	bf00      	nop

08000ca0 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8000ca0:	6800      	ldr	r0, [r0, #0]
 8000ca2:	f005 b9a5 	b.w	8005ff0 <STM_GetState>
 8000ca6:	bf00      	nop

08000ca8 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8000ca8:	7e40      	ldrb	r0, [r0, #25]
 8000caa:	4770      	bx	lr

08000cac <MCI_GetImposedMotorDirection>:
  */
__weak int16_t MCI_GetImposedMotorDirection( MCI_Handle_t * pHandle )
{
  int16_t retVal = 1;

  switch ( pHandle->lastCommand )
 8000cac:	7b03      	ldrb	r3, [r0, #12]
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d005      	beq.n	8000cbe <MCI_GetImposedMotorDirection+0x12>
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	d013      	beq.n	8000cde <MCI_GetImposedMotorDirection+0x32>
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d009      	beq.n	8000cce <MCI_GetImposedMotorDirection+0x22>
 8000cba:	2001      	movs	r0, #1
      break;
    default:
      break;
  }
  return retVal;
}
 8000cbc:	4770      	bx	lr
      if ( pHandle->hFinalTorque < 0 )
 8000cbe:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 8000cc2:	2b00      	cmp	r3, #0
        retVal = -1;
 8000cc4:	bfac      	ite	ge
 8000cc6:	2001      	movge	r0, #1
 8000cc8:	f04f 30ff 	movlt.w	r0, #4294967295
 8000ccc:	4770      	bx	lr
      if ( pHandle->hFinalSpeed < 0 )
 8000cce:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8000cd2:	2b00      	cmp	r3, #0
        retVal = -1;
 8000cd4:	bfac      	ite	ge
 8000cd6:	2001      	movge	r0, #1
 8000cd8:	f04f 30ff 	movlt.w	r0, #4294967295
 8000cdc:	4770      	bx	lr
      if ( pHandle->Iqdref.q < 0 )
 8000cde:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 8000ce2:	2b00      	cmp	r3, #0
        retVal = -1;
 8000ce4:	bfac      	ite	ge
 8000ce6:	2001      	movge	r0, #1
 8000ce8:	f04f 30ff 	movlt.w	r0, #4294967295
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000cf0:	7b03      	ldrb	r3, [r0, #12]
 8000cf2:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8000cf4:	bf0c      	ite	eq
 8000cf6:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 8000cfa:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8000d00:	6840      	ldr	r0, [r0, #4]
 8000d02:	f005 b887 	b.w	8005e14 <STC_StopRamp>
 8000d06:	bf00      	nop

08000d08 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8000d08:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8000d0a:	6840      	ldr	r0, [r0, #4]
 8000d0c:	f005 f81c 	bl	8005d48 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8000d10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000d14:	f004 bfc4 	b.w	8005ca0 <SPD_GetAvrgMecSpeedUnit>

08000d18 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8000d18:	6840      	ldr	r0, [r0, #4]
 8000d1a:	f005 b81f 	b.w	8005d5c <STC_GetMecSpeedRefUnit>
 8000d1e:	bf00      	nop

08000d20 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8000d20:	6882      	ldr	r2, [r0, #8]
 8000d22:	6810      	ldr	r0, [r2, #0]
 8000d24:	2300      	movs	r3, #0
 8000d26:	b282      	uxth	r2, r0
 8000d28:	f362 030f 	bfi	r3, r2, #0, #16
 8000d2c:	0c00      	lsrs	r0, r0, #16
 8000d2e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000d32:	b082      	sub	sp, #8
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	b002      	add	sp, #8
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8000d3c:	6882      	ldr	r2, [r0, #8]
 8000d3e:	6850      	ldr	r0, [r2, #4]
 8000d40:	2300      	movs	r3, #0
 8000d42:	b282      	uxth	r2, r0
 8000d44:	f362 030f 	bfi	r3, r2, #0, #16
 8000d48:	0c00      	lsrs	r0, r0, #16
 8000d4a:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000d4e:	b082      	sub	sp, #8
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	b002      	add	sp, #8
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8000d58:	6882      	ldr	r2, [r0, #8]
 8000d5a:	68d0      	ldr	r0, [r2, #12]
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	b282      	uxth	r2, r0
 8000d60:	f362 030f 	bfi	r3, r2, #0, #16
 8000d64:	0c00      	lsrs	r0, r0, #16
 8000d66:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000d6a:	b082      	sub	sp, #8
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	b002      	add	sp, #8
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8000d74:	6882      	ldr	r2, [r0, #8]
 8000d76:	6910      	ldr	r0, [r2, #16]
 8000d78:	2300      	movs	r3, #0
 8000d7a:	b282      	uxth	r2, r0
 8000d7c:	f362 030f 	bfi	r3, r2, #0, #16
 8000d80:	0c00      	lsrs	r0, r0, #16
 8000d82:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000d86:	b082      	sub	sp, #8
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	b002      	add	sp, #8
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8000d90:	6882      	ldr	r2, [r0, #8]
 8000d92:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8000d96:	2300      	movs	r3, #0
 8000d98:	b282      	uxth	r2, r0
 8000d9a:	f362 030f 	bfi	r3, r2, #0, #16
 8000d9e:	0c00      	lsrs	r0, r0, #16
 8000da0:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000da4:	b082      	sub	sp, #8
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	b002      	add	sp, #8
 8000daa:	4770      	bx	lr

08000dac <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8000dac:	6882      	ldr	r2, [r0, #8]
 8000dae:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8000db2:	2300      	movs	r3, #0
 8000db4:	b282      	uxth	r2, r0
 8000db6:	f362 030f 	bfi	r3, r2, #0, #16
 8000dba:	0c00      	lsrs	r0, r0, #16
 8000dbc:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000dc0:	b082      	sub	sp, #8
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	b002      	add	sp, #8
 8000dc6:	4770      	bx	lr

08000dc8 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8000dc8:	6883      	ldr	r3, [r0, #8]
}
 8000dca:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8000dce:	4770      	bx	lr

08000dd0 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	6882      	ldr	r2, [r0, #8]
 8000dd4:	f361 030f 	bfi	r3, r1, #0, #16
 8000dd8:	f361 431f 	bfi	r3, r1, #16, #16
 8000ddc:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8000de4:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8000de6:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8000dea:	f005 f853 	bl	8005e94 <STC_GetDefaultIqdref>
 8000dee:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8000df2:	8220      	strh	r0, [r4, #16]
 8000df4:	8263      	strh	r3, [r4, #18]
}
 8000df6:	bd10      	pop	{r4, pc}

08000df8 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 8000df8:	b203      	sxth	r3, r0
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000dfa:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8000dfe:	f3c0 400f 	ubfx	r0, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8000e02:	fb13 f201 	smulbb	r2, r3, r1
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000e06:	fb10 f101 	smulbb	r1, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000e0a:	4250      	negs	r0, r2
 8000e0c:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000e10:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8000e14:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8000e16:	da05      	bge.n	8000e24 <MCM_Clarke+0x2c>
 8000e18:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000e1a:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8000e1e:	da0c      	bge.n	8000e3a <MCM_Clarke+0x42>
 8000e20:	4a09      	ldr	r2, [pc, #36]	; (8000e48 <MCM_Clarke+0x50>)
 8000e22:	e001      	b.n	8000e28 <MCM_Clarke+0x30>
 8000e24:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	b292      	uxth	r2, r2
 8000e2e:	f363 000f 	bfi	r0, r3, #0, #16
 8000e32:	f362 401f 	bfi	r0, r2, #16, #16
}
 8000e36:	b004      	add	sp, #16
 8000e38:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000e3a:	4803      	ldr	r0, [pc, #12]	; (8000e48 <MCM_Clarke+0x50>)
 8000e3c:	b20a      	sxth	r2, r1
 8000e3e:	4282      	cmp	r2, r0
 8000e40:	bfb8      	it	lt
 8000e42:	4602      	movlt	r2, r0
 8000e44:	e7f0      	b.n	8000e28 <MCM_Clarke+0x30>
 8000e46:	bf00      	nop
 8000e48:	ffff8001 	.word	0xffff8001

08000e4c <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8000e4c:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 8000e50:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000e54:	f400 7140 	and.w	r1, r0, #768	; 0x300
 8000e58:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
{
 8000e5c:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000e5e:	d028      	beq.n	8000eb2 <MCM_Trig_Functions+0x66>
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	461a      	mov	r2, r3
 8000e66:	d816      	bhi.n	8000e96 <MCM_Trig_Functions+0x4a>
 8000e68:	b361      	cbz	r1, 8000ec4 <MCM_Trig_Functions+0x78>
 8000e6a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8000e6e:	d109      	bne.n	8000e84 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000e70:	b2c0      	uxtb	r0, r0
 8000e72:	43c3      	mvns	r3, r0
 8000e74:	491a      	ldr	r1, [pc, #104]	; (8000ee0 <MCM_Trig_Functions+0x94>)
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000e7c:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000e80:	4252      	negs	r2, r2
 8000e82:	b212      	sxth	r2, r2
      break;
    default:
      break;
  }
  return ( Local_Components );
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	2000      	movs	r0, #0
 8000e88:	b292      	uxth	r2, r2
 8000e8a:	f363 000f 	bfi	r0, r3, #0, #16
 8000e8e:	f362 401f 	bfi	r0, r2, #16, #16
}
 8000e92:	b002      	add	sp, #8
 8000e94:	4770      	bx	lr
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000e96:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8000e9a:	d1f3      	bne.n	8000e84 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000e9c:	4910      	ldr	r1, [pc, #64]	; (8000ee0 <MCM_Trig_Functions+0x94>)
 8000e9e:	b2c0      	uxtb	r0, r0
 8000ea0:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ea2:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000ea6:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ea8:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000eaa:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000eae:	b21b      	sxth	r3, r3
      break;
 8000eb0:	e7e8      	b.n	8000e84 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000eb2:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000eb4:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ebe:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
      break;
 8000ec2:	e7df      	b.n	8000e84 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ec4:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000ec6:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ec8:	4a05      	ldr	r2, [pc, #20]	; (8000ee0 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ed0:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000ed4:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ed6:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000ed8:	b21b      	sxth	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000eda:	b212      	sxth	r2, r2
      break;
 8000edc:	e7d2      	b.n	8000e84 <MCM_Trig_Functions+0x38>
 8000ede:	bf00      	nop
 8000ee0:	080074c4 	.word	0x080074c4

08000ee4 <MCM_Park>:
{
 8000ee4:	b570      	push	{r4, r5, r6, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	4605      	mov	r5, r0
 8000eea:	9001      	str	r0, [sp, #4]
 8000eec:	4606      	mov	r6, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000eee:	4608      	mov	r0, r1
 8000ef0:	f7ff ffac 	bl	8000e4c <MCM_Trig_Functions>
 8000ef4:	b22d      	sxth	r5, r5
 8000ef6:	b204      	sxth	r4, r0
 8000ef8:	1436      	asrs	r6, r6, #16
 8000efa:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000efc:	fb05 f204 	mul.w	r2, r5, r4
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000f00:	fb06 2210 	mls	r2, r6, r0, r2
  if ( wqd_tmp > INT16_MAX )
 8000f04:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8000f08:	da12      	bge.n	8000f30 <MCM_Park+0x4c>
 8000f0a:	13d3      	asrs	r3, r2, #15
  else if ( wqd_tmp < ( -32768 ) )
 8000f0c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000f10:	4914      	ldr	r1, [pc, #80]	; (8000f64 <MCM_Park+0x80>)
 8000f12:	da21      	bge.n	8000f58 <MCM_Park+0x74>
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000f14:	fb04 f406 	mul.w	r4, r4, r6
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000f18:	fb05 4000 	mla	r0, r5, r0, r4
  if ( wqd_tmp > INT16_MAX )
 8000f1c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000f20:	ea4f 32e0 	mov.w	r2, r0, asr #15
  if ( wqd_tmp > INT16_MAX )
 8000f24:	da07      	bge.n	8000f36 <MCM_Park+0x52>
  else if ( wqd_tmp < ( -32768 ) )
 8000f26:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8000f2a:	da0f      	bge.n	8000f4c <MCM_Park+0x68>
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <MCM_Park+0x80>)
 8000f2e:	e004      	b.n	8000f3a <MCM_Park+0x56>
 8000f30:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000f34:	e7ee      	b.n	8000f14 <MCM_Park+0x30>
 8000f36:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 8000f3a:	b28a      	uxth	r2, r1
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	f362 000f 	bfi	r0, r2, #0, #16
 8000f44:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000f48:	b004      	add	sp, #16
 8000f4a:	bd70      	pop	{r4, r5, r6, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000f4c:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MCM_Park+0x80>)
 8000f4e:	b213      	sxth	r3, r2
 8000f50:	4283      	cmp	r3, r0
 8000f52:	bfb8      	it	lt
 8000f54:	4603      	movlt	r3, r0
 8000f56:	e7f0      	b.n	8000f3a <MCM_Park+0x56>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000f58:	b21a      	sxth	r2, r3
 8000f5a:	4291      	cmp	r1, r2
 8000f5c:	bfb8      	it	lt
 8000f5e:	4611      	movlt	r1, r2
 8000f60:	e7d8      	b.n	8000f14 <MCM_Park+0x30>
 8000f62:	bf00      	nop
 8000f64:	ffff8001 	.word	0xffff8001

08000f68 <MCM_Rev_Park>:
{
 8000f68:	b530      	push	{r4, r5, lr}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	4604      	mov	r4, r0
 8000f6e:	9001      	str	r0, [sp, #4]
 8000f70:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000f72:	4608      	mov	r0, r1
 8000f74:	f7ff ff6a 	bl	8000e4c <MCM_Trig_Functions>
 8000f78:	142d      	asrs	r5, r5, #16
 8000f7a:	1403      	asrs	r3, r0, #16
 8000f7c:	b224      	sxth	r4, r4
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000f7e:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000f82:	b200      	sxth	r0, r0
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8000f84:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8000f88:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8000f8c:	fb04 0313 	mls	r3, r4, r3, r0
  return ( Output );
 8000f90:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 8000f94:	2000      	movs	r0, #0
 8000f96:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8000f9a:	f362 000f 	bfi	r0, r2, #0, #16
 8000f9e:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000fa2:	b005      	add	sp, #20
 8000fa4:	bd30      	pop	{r4, r5, pc}
 8000fa6:	bf00      	nop

08000fa8 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8000fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000faa:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 8000fae:	4b1b      	ldr	r3, [pc, #108]	; (800101c <FOC_Clear+0x74>)
 8000fb0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8000fb4:	eb03 0c41 	add.w	ip, r3, r1, lsl #1
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8000fb8:	004a      	lsls	r2, r1, #1
  FOCVars[bMotor].Iab = NULL_ab;
 8000fba:	2500      	movs	r5, #0
{
 8000fbc:	4604      	mov	r4, r0
  FOCVars[bMotor].Iqd = NULL_qd;
 8000fbe:	f102 070c 	add.w	r7, r2, #12
  FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000fc2:	2626      	movs	r6, #38	; 0x26
  FOCVars[bMotor].Vqd = NULL_qd;
 8000fc4:	3216      	adds	r2, #22
  FOCVars[bMotor].Iab = NULL_ab;
 8000fc6:	f843 5011 	str.w	r5, [r3, r1, lsl #1]
  FOCVars[bMotor].Iqd = NULL_qd;
 8000fca:	eb07 0e03 	add.w	lr, r7, r3
  FOCVars[bMotor].Iab = NULL_ab;
 8000fce:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000fd2:	fb06 3604 	mla	r6, r6, r4, r3
  FOCVars[bMotor].Vqd = NULL_qd;
 8000fd6:	eb02 0c03 	add.w	ip, r2, r3
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000fda:	4811      	ldr	r0, [pc, #68]	; (8001020 <FOC_Clear+0x78>)
  FOCVars[bMotor].Iqd = NULL_qd;
 8000fdc:	50fd      	str	r5, [r7, r3]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000fde:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8000fe2:	f8ce 5004 	str.w	r5, [lr, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000fe6:	4629      	mov	r1, r5
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000fe8:	83f5      	strh	r5, [r6, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000fea:	50d5      	str	r5, [r2, r3]
 8000fec:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8000ff0:	8435      	strh	r5, [r6, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000ff2:	f004 fb2d 	bl	8005650 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <FOC_Clear+0x7c>)
 8000ff8:	4629      	mov	r1, r5
 8000ffa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8000ffe:	f004 fb27 	bl	8005650 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <FOC_Clear+0x80>)
 8001004:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001008:	f004 fea0 	bl	8005d4c <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800100c:	4b07      	ldr	r3, [pc, #28]	; (800102c <FOC_Clear+0x84>)
 800100e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8001012:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001016:	f004 bd1f 	b.w	8005a58 <PWMC_SwitchOffPWM>
 800101a:	bf00      	nop
 800101c:	20000940 	.word	0x20000940
 8001020:	20000934 	.word	0x20000934
 8001024:	200009f0 	.word	0x200009f0
 8001028:	200009f4 	.word	0x200009f4
 800102c:	2000092c 	.word	0x2000092c

08001030 <MCboot>:
{
 8001030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001034:	ed2d 8b02 	vpush	{d8}
  STM_Init(&STM[M1]);
 8001038:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 8001230 <MCboot+0x200>
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800103c:	4c63      	ldr	r4, [pc, #396]	; (80011cc <MCboot+0x19c>)
  STO_PLL_Init (&STO_PLL_M1);
 800103e:	ed9f 8a64 	vldr	s16, [pc, #400]	; 80011d0 <MCboot+0x1a0>
  pSTC[M1] = &SpeednTorqCtrlM1;
 8001042:	4d64      	ldr	r5, [pc, #400]	; (80011d4 <MCboot+0x1a4>)
  PID_HandleInit(&PIDIqHandle_M1);
 8001044:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 8001234 <MCboot+0x204>
  PID_HandleInit(&PIDIdHandle_M1);
 8001048:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 8001238 <MCboot+0x208>
  NTC_Init(&TempSensorParamsM1);
 800104c:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 800123c <MCboot+0x20c>
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001050:	4e61      	ldr	r6, [pc, #388]	; (80011d8 <MCboot+0x1a8>)
{
 8001052:	b087      	sub	sp, #28
 8001054:	4603      	mov	r3, r0
  STM_Init(&STM[M1]);
 8001056:	4658      	mov	r0, fp
{
 8001058:	461f      	mov	r7, r3
 800105a:	9103      	str	r1, [sp, #12]
  STM_Init(&STM[M1]);
 800105c:	f004 ff30 	bl	8005ec0 <STM_Init>
  pCLM[M1] = &CircleLimitationM1;
 8001060:	4b5e      	ldr	r3, [pc, #376]	; (80011dc <MCboot+0x1ac>)
  bMCBootCompleted = 0;
 8001062:	495f      	ldr	r1, [pc, #380]	; (80011e0 <MCboot+0x1b0>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001064:	485f      	ldr	r0, [pc, #380]	; (80011e4 <MCboot+0x1b4>)
  pCLM[M1] = &CircleLimitationM1;
 8001066:	4a60      	ldr	r2, [pc, #384]	; (80011e8 <MCboot+0x1b8>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001068:	6020      	str	r0, [r4, #0]
  bMCBootCompleted = 0;
 800106a:	2400      	movs	r4, #0
 800106c:	700c      	strb	r4, [r1, #0]
  pCLM[M1] = &CircleLimitationM1;
 800106e:	601a      	str	r2, [r3, #0]
  ICS_Init(&PWM_Handle_M1);
 8001070:	f004 f88c 	bl	800518c <ICS_Init>
  startTimers();
 8001074:	f004 fb72 	bl	800575c <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8001078:	485c      	ldr	r0, [pc, #368]	; (80011ec <MCboot+0x1bc>)
 800107a:	f004 fad5 	bl	8005628 <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 800107e:	4a5c      	ldr	r2, [pc, #368]	; (80011f0 <MCboot+0x1c0>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8001080:	4b5c      	ldr	r3, [pc, #368]	; (80011f4 <MCboot+0x1c4>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8001082:	495a      	ldr	r1, [pc, #360]	; (80011ec <MCboot+0x1bc>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8001084:	602b      	str	r3, [r5, #0]
  STO_PLL_Init (&STO_PLL_M1);
 8001086:	ee18 0a10 	vmov	r0, s16
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 800108a:	6011      	str	r1, [r2, #0]
  STO_PLL_Init (&STO_PLL_M1);
 800108c:	f005 fcae 	bl	80069ec <STO_PLL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &STO_PLL_M1._Super);
 8001090:	4857      	ldr	r0, [pc, #348]	; (80011f0 <MCboot+0x1c0>)
 8001092:	ee18 2a10 	vmov	r2, s16
 8001096:	6801      	ldr	r1, [r0, #0]
 8001098:	6828      	ldr	r0, [r5, #0]
 800109a:	f004 fe3f 	bl	8005d1c <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 800109e:	4856      	ldr	r0, [pc, #344]	; (80011f8 <MCboot+0x1c8>)
 80010a0:	f005 f8d6 	bl	8006250 <VSS_Init>
  RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 80010a4:	4a49      	ldr	r2, [pc, #292]	; (80011cc <MCboot+0x19c>)
 80010a6:	4855      	ldr	r0, [pc, #340]	; (80011fc <MCboot+0x1cc>)
 80010a8:	6813      	ldr	r3, [r2, #0]
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	6829      	ldr	r1, [r5, #0]
 80010ae:	4a52      	ldr	r2, [pc, #328]	; (80011f8 <MCboot+0x1c8>)
 80010b0:	4b53      	ldr	r3, [pc, #332]	; (8001200 <MCboot+0x1d0>)
 80010b2:	f005 f9c3 	bl	800643c <RUC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 80010b6:	4650      	mov	r0, sl
 80010b8:	f004 fab6 	bl	8005628 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 80010bc:	4648      	mov	r0, r9
 80010be:	f004 fab3 	bl	8005628 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 80010c2:	4b50      	ldr	r3, [pc, #320]	; (8001204 <MCboot+0x1d4>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 80010c4:	4850      	ldr	r0, [pc, #320]	; (8001208 <MCboot+0x1d8>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 80010c6:	f8c3 a000 	str.w	sl, [r3]
  pPIDId[M1] = &PIDIdHandle_M1;
 80010ca:	4b50      	ldr	r3, [pc, #320]	; (800120c <MCboot+0x1dc>)
 80010cc:	f8c3 9000 	str.w	r9, [r3]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 80010d0:	4b4f      	ldr	r3, [pc, #316]	; (8001210 <MCboot+0x1e0>)
 80010d2:	6018      	str	r0, [r3, #0]
  RVBS_Init(pBusSensorM1);
 80010d4:	f004 fd0a 	bl	8005aec <RVBS_Init>
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 80010d8:	494d      	ldr	r1, [pc, #308]	; (8001210 <MCboot+0x1e0>)
  pMPM[M1] = &PQD_MotorPowMeasM1;
 80010da:	4b4e      	ldr	r3, [pc, #312]	; (8001214 <MCboot+0x1e4>)
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 80010dc:	680a      	ldr	r2, [r1, #0]
 80010de:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1] = &PQD_MotorPowMeasM1;
 80010e2:	4a4d      	ldr	r2, [pc, #308]	; (8001218 <MCboot+0x1e8>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 80010e4:	f8c3 610c 	str.w	r6, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 80010e8:	4640      	mov	r0, r8
  pMPM[M1] = &PQD_MotorPowMeasM1;
 80010ea:	6013      	str	r3, [r2, #0]
  NTC_Init(&TempSensorParamsM1);
 80010ec:	f004 fa58 	bl	80055a0 <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 80010f0:	494a      	ldr	r1, [pc, #296]	; (800121c <MCboot+0x1ec>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 80010f2:	4b4b      	ldr	r3, [pc, #300]	; (8001220 <MCboot+0x1f0>)
 80010f4:	484b      	ldr	r0, [pc, #300]	; (8001224 <MCboot+0x1f4>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 80010f6:	f8c1 8000 	str.w	r8, [r1]
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 80010fa:	6018      	str	r0, [r3, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 80010fc:	f04f 0901 	mov.w	r9, #1
  REMNG_Init(pREMNG[M1]);
 8001100:	f004 fd42 	bl	8005b88 <REMNG_Init>
  FOC_Clear(M1);
 8001104:	4620      	mov	r0, r4
 8001106:	f7ff ff4f 	bl	8000fa8 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 800110a:	f886 9024 	strb.w	r9, [r6, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800110e:	6828      	ldr	r0, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8001110:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8001240 <MCboot+0x210>
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001114:	f004 febe 	bl	8005e94 <STC_GetDefaultIqdref>
 8001118:	4603      	mov	r3, r0
 800111a:	f3c0 420f 	ubfx	r2, r0, #16, #16
 800111e:	8233      	strh	r3, [r6, #16]
 8001120:	8272      	strh	r2, [r6, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001122:	6828      	ldr	r0, [r5, #0]
 8001124:	f004 feb6 	bl	8005e94 <STC_GetDefaultIqdref>
  oMCInterface[M1] = & Mci[M1];
 8001128:	493f      	ldr	r1, [pc, #252]	; (8001228 <MCboot+0x1f8>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 800112a:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 800112c:	f8c8 1000 	str.w	r1, [r8]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001130:	f3c0 4c0f 	ubfx	ip, r0, #16, #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001134:	4633      	mov	r3, r6
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001136:	f8a6 c014 	strh.w	ip, [r6, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 800113a:	4608      	mov	r0, r1
 800113c:	4659      	mov	r1, fp
 800113e:	f7ff fd2f 	bl	8000ba0 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8001142:	6828      	ldr	r0, [r5, #0]
 8001144:	f8d8 6000 	ldr.w	r6, [r8]
 8001148:	f004 fe9a 	bl	8005e80 <STC_GetMecSpeedRefUnitDefault>
 800114c:	4622      	mov	r2, r4
 800114e:	4601      	mov	r1, r0
 8001150:	4630      	mov	r0, r6
 8001152:	f7ff fd33 	bl	8000bbc <MCI_ExecSpeedRamp>
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001156:	4826      	ldr	r0, [pc, #152]	; (80011f0 <MCboot+0x1c0>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001158:	4a1c      	ldr	r2, [pc, #112]	; (80011cc <MCboot+0x19c>)
  pMCIList[M1] = oMCInterface[M1];
 800115a:	f8d8 a000 	ldr.w	sl, [r8]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 800115e:	f8d0 8000 	ldr.w	r8, [r0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001162:	4828      	ldr	r0, [pc, #160]	; (8001204 <MCboot+0x1d4>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001164:	6816      	ldr	r6, [r2, #0]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8001166:	4a2a      	ldr	r2, [pc, #168]	; (8001210 <MCboot+0x1e0>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001168:	f8d0 e000 	ldr.w	lr, [r0]
  MCT[M1].pPIDId = pPIDId[M1];
 800116c:	4827      	ldr	r0, [pc, #156]	; (800120c <MCboot+0x1dc>)
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 800116e:	6811      	ldr	r1, [r2, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001170:	4a29      	ldr	r2, [pc, #164]	; (8001218 <MCboot+0x1e8>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001172:	4b2e      	ldr	r3, [pc, #184]	; (800122c <MCboot+0x1fc>)
  MCT[M1].pPIDId = pPIDId[M1];
 8001174:	f8d0 c000 	ldr.w	ip, [r0]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001178:	4828      	ldr	r0, [pc, #160]	; (800121c <MCboot+0x1ec>)
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 800117a:	6812      	ldr	r2, [r2, #0]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 800117c:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 800117e:	6800      	ldr	r0, [r0, #0]
  pMCIList[M1] = oMCInterface[M1];
 8001180:	f8c7 a000 	str.w	sl, [r7]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001184:	63da      	str	r2, [r3, #60]	; 0x3c
  MCT[M1].pRevupCtrl = &RevUpControlM1;              /* only if M1 is sensorless*/
 8001186:	4a1d      	ldr	r2, [pc, #116]	; (80011fc <MCboot+0x1cc>)
 8001188:	615a      	str	r2, [r3, #20]
  MCT[M1].pSpeedSensorVirtual = &VirtualSpeedSensorM1;  /* only if M1 is sensorless*/
 800118a:	4a1b      	ldr	r2, [pc, #108]	; (80011f8 <MCboot+0x1c8>)
 800118c:	621a      	str	r2, [r3, #32]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 800118e:	e9c3 010b 	strd	r0, r1, [r3, #44]	; 0x2c
  pMCTList[M1] = &MCT[M1];
 8001192:	9a03      	ldr	r2, [sp, #12]
  bMCBootCompleted = 1;
 8001194:	4912      	ldr	r1, [pc, #72]	; (80011e0 <MCboot+0x1b0>)
  MCT[M1].pPIDId = pPIDId[M1];
 8001196:	f8c3 c008 	str.w	ip, [r3, #8]
  MCT[M1].pPIDIq = pPIDIq[M1];
 800119a:	e9c3 8e00 	strd	r8, lr, [r3]
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 800119e:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  MCT[M1].pFF = MC_NULL;
 80011a2:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  MCT[M1].pSCC = MC_NULL;
 80011a6:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 80011aa:	611e      	str	r6, [r3, #16]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 80011ac:	625d      	str	r5, [r3, #36]	; 0x24
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 80011ae:	60dc      	str	r4, [r3, #12]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1;
 80011b0:	ed83 8a06 	vstr	s16, [r3, #24]
  MCT[M1].pSpeedSensorAux = MC_NULL;
 80011b4:	61dc      	str	r4, [r3, #28]
  MCT[M1].pStateMachine = &STM[M1];
 80011b6:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
  MCT[M1].pOTT = MC_NULL;
 80011ba:	651c      	str	r4, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 80011bc:	6013      	str	r3, [r2, #0]
  bMCBootCompleted = 1;
 80011be:	f881 9000 	strb.w	r9, [r1]
}
 80011c2:	b007      	add	sp, #28
 80011c4:	ecbd 8b02 	vpop	{d8}
 80011c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011cc:	2000092c 	.word	0x2000092c
 80011d0:	200003c8 	.word	0x200003c8
 80011d4:	200009f4 	.word	0x200009f4
 80011d8:	20000940 	.word	0x20000940
 80011dc:	200009bc 	.word	0x200009bc
 80011e0:	20000784 	.word	0x20000784
 80011e4:	20000288 	.word	0x20000288
 80011e8:	20000000 	.word	0x20000000
 80011ec:	20000148 	.word	0x20000148
 80011f0:	20000930 	.word	0x20000930
 80011f4:	200004f0 	.word	0x200004f0
 80011f8:	2000057c 	.word	0x2000057c
 80011fc:	2000033c 	.word	0x2000033c
 8001200:	200003b4 	.word	0x200003b4
 8001204:	20000934 	.word	0x20000934
 8001208:	20000314 	.word	0x20000314
 800120c:	200009f0 	.word	0x200009f0
 8001210:	200009c0 	.word	0x200009c0
 8001214:	20000174 	.word	0x20000174
 8001218:	200009ec 	.word	0x200009ec
 800121c:	20000928 	.word	0x20000928
 8001220:	200009e8 	.word	0x200009e8
 8001224:	200002fc 	.word	0x200002fc
 8001228:	200009c4 	.word	0x200009c4
 800122c:	20000968 	.word	0x20000968
 8001230:	200009e0 	.word	0x200009e0
 8001234:	2000011c 	.word	0x2000011c
 8001238:	200000f0 	.word	0x200000f0
 800123c:	20000524 	.word	0x20000524
 8001240:	20000938 	.word	0x20000938

08001244 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop

08001248 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001248:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <FOC_CalcCurrRef+0x24>)
 800124c:	2426      	movs	r4, #38	; 0x26
 800124e:	fb04 3400 	mla	r4, r4, r0, r3
 8001252:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001256:	b103      	cbz	r3, 800125a <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001258:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <FOC_CalcCurrRef+0x28>)
 800125c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001260:	f004 fddc 	bl	8005e1c <STC_CalcTorqueReference>
 8001264:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8001266:	8220      	strh	r0, [r4, #16]
}
 8001268:	bd10      	pop	{r4, pc}
 800126a:	bf00      	nop
 800126c:	20000940 	.word	0x20000940
 8001270:	200009f4 	.word	0x200009f4

08001274 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001274:	4b01      	ldr	r3, [pc, #4]	; (800127c <TSK_SetChargeBootCapDelayM1+0x8>)
 8001276:	8018      	strh	r0, [r3, #0]
}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	20000786 	.word	0x20000786

08001280 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8001282:	8818      	ldrh	r0, [r3, #0]
 8001284:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001286:	fab0 f080 	clz	r0, r0
 800128a:	0940      	lsrs	r0, r0, #5
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000786 	.word	0x20000786

08001294 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001294:	4b01      	ldr	r3, [pc, #4]	; (800129c <TSK_SetStopPermanencyTimeM1+0x8>)
 8001296:	8018      	strh	r0, [r3, #0]
}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	2000078a 	.word	0x2000078a

080012a0 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 80012a2:	8818      	ldrh	r0, [r3, #0]
 80012a4:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80012a6:	fab0 f080 	clz	r0, r0
 80012aa:	0940      	lsrs	r0, r0, #5
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	2000078a 	.word	0x2000078a

080012b4 <TSK_MediumFrequencyTaskM1>:
{
 80012b4:	b530      	push	{r4, r5, lr}
  PQD_CalcElMotorPower( pMPM[M1] );
 80012b6:	4c98      	ldr	r4, [pc, #608]	; (8001518 <TSK_MediumFrequencyTaskM1+0x264>)
  (void) STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 80012b8:	4898      	ldr	r0, [pc, #608]	; (800151c <TSK_MediumFrequencyTaskM1+0x268>)
{
 80012ba:	b083      	sub	sp, #12
  int16_t wAux = 0;
 80012bc:	2300      	movs	r3, #0
  (void) STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 80012be:	4669      	mov	r1, sp
  int16_t wAux = 0;
 80012c0:	f8ad 3000 	strh.w	r3, [sp]
  (void) STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 80012c4:	f005 fa9a 	bl	80067fc <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 80012c8:	6820      	ldr	r0, [r4, #0]
 80012ca:	f004 fa13 	bl	80056f4 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 80012ce:	4894      	ldr	r0, [pc, #592]	; (8001520 <TSK_MediumFrequencyTaskM1+0x26c>)
 80012d0:	f004 fe8e 	bl	8005ff0 <STM_GetState>
  switch ( StateM1 )
 80012d4:	3803      	subs	r0, #3
 80012d6:	2810      	cmp	r0, #16
 80012d8:	d85a      	bhi.n	8001390 <TSK_MediumFrequencyTaskM1+0xdc>
 80012da:	e8df f010 	tbh	[pc, r0, lsl #1]
 80012de:	007e      	.short	0x007e
 80012e0:	00920011 	.word	0x00920011
 80012e4:	00b100a9 	.word	0x00b100a9
 80012e8:	00cd00c4 	.word	0x00cd00c4
 80012ec:	00590059 	.word	0x00590059
 80012f0:	00590059 	.word	0x00590059
 80012f4:	00590059 	.word	0x00590059
 80012f8:	00e900da 	.word	0x00e900da
 80012fc:	005b00f6 	.word	0x005b00f6
      if( ! RUC_Exec( &RevUpControlM1 ) )
 8001300:	4888      	ldr	r0, [pc, #544]	; (8001524 <TSK_MediumFrequencyTaskM1+0x270>)
 8001302:	f005 f921 	bl	8006548 <RUC_Exec>
 8001306:	2800      	cmp	r0, #0
 8001308:	f000 80fa 	beq.w	8001500 <TSK_MediumFrequencyTaskM1+0x24c>
        IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 800130c:	4b86      	ldr	r3, [pc, #536]	; (8001528 <TSK_MediumFrequencyTaskM1+0x274>)
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	f004 fd84 	bl	8005e1c <STC_CalcTorqueReference>
        IqdRef.d = FOCVars[M1].UserIdref;
 8001314:	4b85      	ldr	r3, [pc, #532]	; (800152c <TSK_MediumFrequencyTaskM1+0x278>)
 8001316:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
        FOCVars[M1].Iqdref = IqdRef;
 800131a:	8218      	strh	r0, [r3, #16]
 800131c:	825a      	strh	r2, [r3, #18]
      (void) VSS_CalcAvrgMecSpeedUnit( &VirtualSpeedSensorM1, &hForcedMecSpeedUnit );
 800131e:	4884      	ldr	r0, [pc, #528]	; (8001530 <TSK_MediumFrequencyTaskM1+0x27c>)
 8001320:	f10d 0102 	add.w	r1, sp, #2
 8001324:	f004 ffe8 	bl	80062f8 <VSS_CalcAvrgMecSpeedUnit>
      if (RUC_FirstAccelerationStageReached(&RevUpControlM1) == true)
 8001328:	487e      	ldr	r0, [pc, #504]	; (8001524 <TSK_MediumFrequencyTaskM1+0x270>)
 800132a:	f005 f947 	bl	80065bc <RUC_FirstAccelerationStageReached>
 800132e:	b378      	cbz	r0, 8001390 <TSK_MediumFrequencyTaskM1+0xdc>
        ObserverConverged = STO_PLL_IsObserverConverged( &STO_PLL_M1,hForcedMecSpeedUnit );
 8001330:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8001334:	4879      	ldr	r0, [pc, #484]	; (800151c <TSK_MediumFrequencyTaskM1+0x268>)
 8001336:	f005 fb93 	bl	8006a60 <STO_PLL_IsObserverConverged>
 800133a:	4604      	mov	r4, r0
        STO_SetDirection(&STO_PLL_M1, MCI_GetImposedMotorDirection( &Mci[M1]));
 800133c:	487d      	ldr	r0, [pc, #500]	; (8001534 <TSK_MediumFrequencyTaskM1+0x280>)
 800133e:	f7ff fcb5 	bl	8000cac <MCI_GetImposedMotorDirection>
 8001342:	b2c1      	uxtb	r1, r0
 8001344:	4875      	ldr	r0, [pc, #468]	; (800151c <TSK_MediumFrequencyTaskM1+0x268>)
 8001346:	f005 fc49 	bl	8006bdc <STO_SetDirection>
        (void) VSS_SetStartTransition( &VirtualSpeedSensorM1, ObserverConverged );
 800134a:	4879      	ldr	r0, [pc, #484]	; (8001530 <TSK_MediumFrequencyTaskM1+0x27c>)
 800134c:	4621      	mov	r1, r4
 800134e:	f005 f863 	bl	8006418 <VSS_SetStartTransition>
      if ( ObserverConverged )
 8001352:	b1ec      	cbz	r4, 8001390 <TSK_MediumFrequencyTaskM1+0xdc>
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8001354:	4871      	ldr	r0, [pc, #452]	; (800151c <TSK_MediumFrequencyTaskM1+0x268>)
 8001356:	4d75      	ldr	r5, [pc, #468]	; (800152c <TSK_MediumFrequencyTaskM1+0x278>)
        REMNG_Init( pREMNG[M1] );
 8001358:	4c77      	ldr	r4, [pc, #476]	; (8001538 <TSK_MediumFrequencyTaskM1+0x284>)
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 800135a:	f004 fc9d 	bl	8005c98 <SPD_GetElAngle>
 800135e:	4601      	mov	r1, r0
 8001360:	6868      	ldr	r0, [r5, #4]
 8001362:	f7ff fdbf 	bl	8000ee4 <MCM_Park>
 8001366:	4603      	mov	r3, r0
        REMNG_Init( pREMNG[M1] );
 8001368:	6820      	ldr	r0, [r4, #0]
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 800136a:	9301      	str	r3, [sp, #4]
        REMNG_Init( pREMNG[M1] );
 800136c:	f004 fc0c 	bl	8005b88 <REMNG_Init>
        REMNG_ExecRamp( pREMNG[M1], FOCVars[M1].Iqdref.q, 0 );
 8001370:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
 8001374:	6820      	ldr	r0, [r4, #0]
 8001376:	2200      	movs	r2, #0
 8001378:	f004 fc4c 	bl	8005c14 <REMNG_ExecRamp>
        REMNG_ExecRamp( pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION );
 800137c:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8001380:	6820      	ldr	r0, [r4, #0]
 8001382:	2200      	movs	r2, #0
 8001384:	f004 fc46 	bl	8005c14 <REMNG_ExecRamp>
        STM_NextState( &STM[M1], SWITCH_OVER );
 8001388:	4865      	ldr	r0, [pc, #404]	; (8001520 <TSK_MediumFrequencyTaskM1+0x26c>)
 800138a:	2113      	movs	r1, #19
 800138c:	f004 fdbc 	bl	8005f08 <STM_NextState>
}
 8001390:	b003      	add	sp, #12
 8001392:	bd30      	pop	{r4, r5, pc}
      if( ! RUC_Exec( &RevUpControlM1 ) )
 8001394:	4863      	ldr	r0, [pc, #396]	; (8001524 <TSK_MediumFrequencyTaskM1+0x270>)
 8001396:	f005 f8d7 	bl	8006548 <RUC_Exec>
 800139a:	2800      	cmp	r0, #0
 800139c:	f000 80b6 	beq.w	800150c <TSK_MediumFrequencyTaskM1+0x258>
        LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1,&hForcedMecSpeedUnit);
 80013a0:	4863      	ldr	r0, [pc, #396]	; (8001530 <TSK_MediumFrequencyTaskM1+0x27c>)
 80013a2:	a901      	add	r1, sp, #4
 80013a4:	f004 ffa8 	bl	80062f8 <VSS_CalcAvrgMecSpeedUnit>
 80013a8:	4604      	mov	r4, r0
        LoopClosed |= VSS_TransitionEnded( &VirtualSpeedSensorM1 );
 80013aa:	4861      	ldr	r0, [pc, #388]	; (8001530 <TSK_MediumFrequencyTaskM1+0x27c>)
 80013ac:	f005 f842 	bl	8006434 <VSS_TransitionEnded>
        if ( LoopClosed == true )
 80013b0:	b90c      	cbnz	r4, 80013b6 <TSK_MediumFrequencyTaskM1+0x102>
 80013b2:	2800      	cmp	r0, #0
 80013b4:	d0ec      	beq.n	8001390 <TSK_MediumFrequencyTaskM1+0xdc>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 80013b6:	4a61      	ldr	r2, [pc, #388]	; (800153c <TSK_MediumFrequencyTaskM1+0x288>)
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 80013b8:	4b5c      	ldr	r3, [pc, #368]	; (800152c <TSK_MediumFrequencyTaskM1+0x278>)
          PID_SetIntegralTerm( pPIDSpeed[M1],
 80013ba:	6814      	ldr	r4, [r2, #0]
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 80013bc:	f9b3 5010 	ldrsh.w	r5, [r3, #16]
 80013c0:	4620      	mov	r0, r4
 80013c2:	f004 f949 	bl	8005658 <PID_GetKIDivisor>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 80013c6:	fb05 f100 	mul.w	r1, r5, r0
 80013ca:	4620      	mov	r0, r4
 80013cc:	f004 f940 	bl	8005650 <PID_SetIntegralTerm>
          STM_NextState( &STM[M1], START_RUN );
 80013d0:	2105      	movs	r1, #5
 80013d2:	4853      	ldr	r0, [pc, #332]	; (8001520 <TSK_MediumFrequencyTaskM1+0x26c>)
 80013d4:	f004 fd98 	bl	8005f08 <STM_NextState>
    break;
 80013d8:	e7da      	b.n	8001390 <TSK_MediumFrequencyTaskM1+0xdc>
    RUC_Clear( &RevUpControlM1, MCI_GetImposedMotorDirection( oMCInterface[M1] ) );
 80013da:	4b59      	ldr	r3, [pc, #356]	; (8001540 <TSK_MediumFrequencyTaskM1+0x28c>)
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	f7ff fc65 	bl	8000cac <MCI_GetImposedMotorDirection>
 80013e2:	4601      	mov	r1, r0
 80013e4:	484f      	ldr	r0, [pc, #316]	; (8001524 <TSK_MediumFrequencyTaskM1+0x270>)
 80013e6:	f005 f867 	bl	80064b8 <RUC_Clear>
    ICS_TurnOnLowSides( pwmcHandle[M1] );
 80013ea:	4b56      	ldr	r3, [pc, #344]	; (8001544 <TSK_MediumFrequencyTaskM1+0x290>)
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	f003 ff33 	bl	8005258 <ICS_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 80013f2:	2014      	movs	r0, #20
 80013f4:	f7ff ff3e 	bl	8001274 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 80013f8:	2110      	movs	r1, #16
 80013fa:	4849      	ldr	r0, [pc, #292]	; (8001520 <TSK_MediumFrequencyTaskM1+0x26c>)
 80013fc:	f004 fd84 	bl	8005f08 <STM_NextState>
    break;
 8001400:	e7c6      	b.n	8001390 <TSK_MediumFrequencyTaskM1+0xdc>
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8001402:	4c49      	ldr	r4, [pc, #292]	; (8001528 <TSK_MediumFrequencyTaskM1+0x274>)
 8001404:	4945      	ldr	r1, [pc, #276]	; (800151c <TSK_MediumFrequencyTaskM1+0x268>)
 8001406:	6820      	ldr	r0, [r4, #0]
 8001408:	f004 fc9c 	bl	8005d44 <STC_SetSpeedSensor>
	  FOC_InitAdditionalMethods(M1);
 800140c:	2000      	movs	r0, #0
 800140e:	f7ff ff19 	bl	8001244 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8001412:	2000      	movs	r0, #0
 8001414:	f7ff ff18 	bl	8001248 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8001418:	2106      	movs	r1, #6
 800141a:	4841      	ldr	r0, [pc, #260]	; (8001520 <TSK_MediumFrequencyTaskM1+0x26c>)
 800141c:	f004 fd74 	bl	8005f08 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001420:	6820      	ldr	r0, [r4, #0]
 8001422:	f004 fd45 	bl	8005eb0 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8001426:	4b46      	ldr	r3, [pc, #280]	; (8001540 <TSK_MediumFrequencyTaskM1+0x28c>)
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	f7ff fbfd 	bl	8000c28 <MCI_ExecBufferedCommands>
    break;
 800142e:	e7af      	b.n	8001390 <TSK_MediumFrequencyTaskM1+0xdc>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8001430:	4b43      	ldr	r3, [pc, #268]	; (8001540 <TSK_MediumFrequencyTaskM1+0x28c>)
 8001432:	6818      	ldr	r0, [r3, #0]
 8001434:	f7ff fbf8 	bl	8000c28 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8001438:	2000      	movs	r0, #0
 800143a:	f7ff ff05 	bl	8001248 <FOC_CalcCurrRef>
    break;
 800143e:	e7a7      	b.n	8001390 <TSK_MediumFrequencyTaskM1+0xdc>
    ICS_SwitchOffPWM( pwmcHandle[M1] );
 8001440:	4b40      	ldr	r3, [pc, #256]	; (8001544 <TSK_MediumFrequencyTaskM1+0x290>)
 8001442:	6818      	ldr	r0, [r3, #0]
 8001444:	f003 ff70 	bl	8005328 <ICS_SwitchOffPWM>
    FOC_Clear( M1 );
 8001448:	2000      	movs	r0, #0
 800144a:	f7ff fdad 	bl	8000fa8 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 800144e:	6820      	ldr	r0, [r4, #0]
 8001450:	f004 f862 	bl	8005518 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8001454:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001458:	f7ff ff1c 	bl	8001294 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 800145c:	2108      	movs	r1, #8
 800145e:	4830      	ldr	r0, [pc, #192]	; (8001520 <TSK_MediumFrequencyTaskM1+0x26c>)
 8001460:	f004 fd52 	bl	8005f08 <STM_NextState>
    break;
 8001464:	e794      	b.n	8001390 <TSK_MediumFrequencyTaskM1+0xdc>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8001466:	f7ff ff1b 	bl	80012a0 <TSK_StopPermanencyTimeHasElapsedM1>
 800146a:	2800      	cmp	r0, #0
 800146c:	d090      	beq.n	8001390 <TSK_MediumFrequencyTaskM1+0xdc>
      STM_NextState( &STM[M1], STOP_IDLE );
 800146e:	2109      	movs	r1, #9
 8001470:	482b      	ldr	r0, [pc, #172]	; (8001520 <TSK_MediumFrequencyTaskM1+0x26c>)
 8001472:	f004 fd49 	bl	8005f08 <STM_NextState>
 8001476:	e78b      	b.n	8001390 <TSK_MediumFrequencyTaskM1+0xdc>
    STC_SetSpeedSensor( pSTC[M1],&VirtualSpeedSensorM1._Super );  	/*  sensor-less */
 8001478:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <TSK_MediumFrequencyTaskM1+0x274>)
 800147a:	492d      	ldr	r1, [pc, #180]	; (8001530 <TSK_MediumFrequencyTaskM1+0x27c>)
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	f004 fc61 	bl	8005d44 <STC_SetSpeedSensor>
    VSS_Clear( &VirtualSpeedSensorM1 ); /* Reset measured speed in IDLE */
 8001482:	482b      	ldr	r0, [pc, #172]	; (8001530 <TSK_MediumFrequencyTaskM1+0x27c>)
 8001484:	f004 fed6 	bl	8006234 <VSS_Clear>
    STM_NextState( &STM[M1], IDLE );
 8001488:	2100      	movs	r1, #0
 800148a:	4825      	ldr	r0, [pc, #148]	; (8001520 <TSK_MediumFrequencyTaskM1+0x26c>)
 800148c:	f004 fd3c 	bl	8005f08 <STM_NextState>
}
 8001490:	e77e      	b.n	8001390 <TSK_MediumFrequencyTaskM1+0xdc>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 8001492:	f7ff fef5 	bl	8001280 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001496:	2800      	cmp	r0, #0
 8001498:	f43f af7a 	beq.w	8001390 <TSK_MediumFrequencyTaskM1+0xdc>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 800149c:	4b29      	ldr	r3, [pc, #164]	; (8001544 <TSK_MediumFrequencyTaskM1+0x290>)
 800149e:	2100      	movs	r1, #0
 80014a0:	6818      	ldr	r0, [r3, #0]
 80014a2:	f004 fadb 	bl	8005a5c <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 80014a6:	2111      	movs	r1, #17
 80014a8:	481d      	ldr	r0, [pc, #116]	; (8001520 <TSK_MediumFrequencyTaskM1+0x26c>)
 80014aa:	f004 fd2d 	bl	8005f08 <STM_NextState>
 80014ae:	e76f      	b.n	8001390 <TSK_MediumFrequencyTaskM1+0xdc>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 80014b0:	4b24      	ldr	r3, [pc, #144]	; (8001544 <TSK_MediumFrequencyTaskM1+0x290>)
 80014b2:	2101      	movs	r1, #1
 80014b4:	6818      	ldr	r0, [r3, #0]
 80014b6:	f004 fad1 	bl	8005a5c <PWMC_CurrentReadingCalibr>
 80014ba:	2800      	cmp	r0, #0
 80014bc:	f43f af68 	beq.w	8001390 <TSK_MediumFrequencyTaskM1+0xdc>
      STM_NextState( &STM[M1], CLEAR );
 80014c0:	2112      	movs	r1, #18
 80014c2:	4817      	ldr	r0, [pc, #92]	; (8001520 <TSK_MediumFrequencyTaskM1+0x26c>)
 80014c4:	f004 fd20 	bl	8005f08 <STM_NextState>
 80014c8:	e762      	b.n	8001390 <TSK_MediumFrequencyTaskM1+0xdc>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80014ca:	4a17      	ldr	r2, [pc, #92]	; (8001528 <TSK_MediumFrequencyTaskM1+0x274>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 80014cc:	4b17      	ldr	r3, [pc, #92]	; (800152c <TSK_MediumFrequencyTaskM1+0x278>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80014ce:	6810      	ldr	r0, [r2, #0]
 80014d0:	4917      	ldr	r1, [pc, #92]	; (8001530 <TSK_MediumFrequencyTaskM1+0x27c>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80014d8:	f004 fc34 	bl	8005d44 <STC_SetSpeedSensor>
    STO_PLL_Clear( &STO_PLL_M1 );
 80014dc:	480f      	ldr	r0, [pc, #60]	; (800151c <TSK_MediumFrequencyTaskM1+0x268>)
 80014de:	f005 fa57 	bl	8006990 <STO_PLL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 80014e2:	480f      	ldr	r0, [pc, #60]	; (8001520 <TSK_MediumFrequencyTaskM1+0x26c>)
 80014e4:	2104      	movs	r1, #4
 80014e6:	f004 fd0f 	bl	8005f08 <STM_NextState>
 80014ea:	2800      	cmp	r0, #0
 80014ec:	f43f af50 	beq.w	8001390 <TSK_MediumFrequencyTaskM1+0xdc>
      FOC_Clear( M1 );
 80014f0:	2000      	movs	r0, #0
 80014f2:	f7ff fd59 	bl	8000fa8 <FOC_Clear>
      ICS_SwitchOnPWM( pwmcHandle[M1] );
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <TSK_MediumFrequencyTaskM1+0x290>)
 80014f8:	6818      	ldr	r0, [r3, #0]
 80014fa:	f003 fed1 	bl	80052a0 <ICS_SwitchOnPWM>
 80014fe:	e747      	b.n	8001390 <TSK_MediumFrequencyTaskM1+0xdc>
        STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 8001500:	4602      	mov	r2, r0
 8001502:	2110      	movs	r1, #16
 8001504:	4806      	ldr	r0, [pc, #24]	; (8001520 <TSK_MediumFrequencyTaskM1+0x26c>)
 8001506:	f004 fce1 	bl	8005ecc <STM_FaultProcessing>
 800150a:	e708      	b.n	800131e <TSK_MediumFrequencyTaskM1+0x6a>
          STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 800150c:	4602      	mov	r2, r0
 800150e:	2110      	movs	r1, #16
 8001510:	4803      	ldr	r0, [pc, #12]	; (8001520 <TSK_MediumFrequencyTaskM1+0x26c>)
 8001512:	f004 fcdb 	bl	8005ecc <STM_FaultProcessing>
 8001516:	e73b      	b.n	8001390 <TSK_MediumFrequencyTaskM1+0xdc>
 8001518:	200009ec 	.word	0x200009ec
 800151c:	200003c8 	.word	0x200003c8
 8001520:	200009e0 	.word	0x200009e0
 8001524:	2000033c 	.word	0x2000033c
 8001528:	200009f4 	.word	0x200009f4
 800152c:	20000940 	.word	0x20000940
 8001530:	2000057c 	.word	0x2000057c
 8001534:	200009c4 	.word	0x200009c4
 8001538:	200009e8 	.word	0x200009e8
 800153c:	20000930 	.word	0x20000930
 8001540:	20000938 	.word	0x20000938
 8001544:	2000092c 	.word	0x2000092c

08001548 <MC_Scheduler>:
{
 8001548:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MC_Scheduler+0x48>)
 800154c:	781c      	ldrb	r4, [r3, #0]
 800154e:	2c01      	cmp	r4, #1
 8001550:	d000      	beq.n	8001554 <MC_Scheduler+0xc>
}
 8001552:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 8001554:	4d0f      	ldr	r5, [pc, #60]	; (8001594 <MC_Scheduler+0x4c>)
 8001556:	882b      	ldrh	r3, [r5, #0]
 8001558:	b29b      	uxth	r3, r3
 800155a:	b1ab      	cbz	r3, 8001588 <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 800155c:	882b      	ldrh	r3, [r5, #0]
 800155e:	3b01      	subs	r3, #1
 8001560:	b29b      	uxth	r3, r3
 8001562:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8001564:	4a0c      	ldr	r2, [pc, #48]	; (8001598 <MC_Scheduler+0x50>)
 8001566:	8813      	ldrh	r3, [r2, #0]
 8001568:	b29b      	uxth	r3, r3
 800156a:	b11b      	cbz	r3, 8001574 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 800156c:	8813      	ldrh	r3, [r2, #0]
 800156e:	3b01      	subs	r3, #1
 8001570:	b29b      	uxth	r3, r3
 8001572:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8001574:	4a09      	ldr	r2, [pc, #36]	; (800159c <MC_Scheduler+0x54>)
 8001576:	8813      	ldrh	r3, [r2, #0]
 8001578:	b29b      	uxth	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0e9      	beq.n	8001552 <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 800157e:	8813      	ldrh	r3, [r2, #0]
 8001580:	3b01      	subs	r3, #1
 8001582:	b29b      	uxth	r3, r3
 8001584:	8013      	strh	r3, [r2, #0]
}
 8001586:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 8001588:	f7ff fe94 	bl	80012b4 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 800158c:	802c      	strh	r4, [r5, #0]
 800158e:	e7e9      	b.n	8001564 <MC_Scheduler+0x1c>
 8001590:	20000784 	.word	0x20000784
 8001594:	20000788 	.word	0x20000788
 8001598:	20000786 	.word	0x20000786
 800159c:	2000078a 	.word	0x2000078a

080015a0 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 80015a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  uint16_t hState;  /*  only if sensorless main*/
  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
  if ( STM[M1].bState == SWITCH_OVER )
 80015a4:	4b54      	ldr	r3, [pc, #336]	; (80016f8 <TSK_HighFrequencyTask+0x158>)
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 80015a6:	4c55      	ldr	r4, [pc, #340]	; (80016fc <TSK_HighFrequencyTask+0x15c>)
  if ( STM[M1].bState == SWITCH_OVER )
 80015a8:	781b      	ldrb	r3, [r3, #0]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 80015aa:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 80015ae:	b089      	sub	sp, #36	; 0x24
  if ( STM[M1].bState == SWITCH_OVER )
 80015b0:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 80015b2:	9005      	str	r0, [sp, #20]
  if ( STM[M1].bState == SWITCH_OVER )
 80015b4:	f000 8093 	beq.w	80016de <TSK_HighFrequencyTask+0x13e>

  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80015b8:	4b51      	ldr	r3, [pc, #324]	; (8001700 <TSK_HighFrequencyTask+0x160>)
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80015ba:	4f52      	ldr	r7, [pc, #328]	; (8001704 <TSK_HighFrequencyTask+0x164>)
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80015bc:	6818      	ldr	r0, [r3, #0]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80015be:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8001728 <TSK_HighFrequencyTask+0x188>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80015c2:	f004 fbc1 	bl	8005d48 <STC_GetSpeedSensor>
 80015c6:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 80015c8:	f004 fb66 	bl	8005c98 <SPD_GetElAngle>
 80015cc:	4606      	mov	r6, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80015ce:	4628      	mov	r0, r5
 80015d0:	f004 fb6a 	bl	8005ca8 <SPD_GetInstElSpeedDpp>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80015d4:	a902      	add	r1, sp, #8
 80015d6:	6838      	ldr	r0, [r7, #0]
 80015d8:	f004 f914 	bl	8005804 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 80015dc:	9802      	ldr	r0, [sp, #8]
 80015de:	f7ff fc0b 	bl	8000df8 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80015e2:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 80015e4:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80015e6:	f7ff fc7d 	bl	8000ee4 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 80015ea:	4a47      	ldr	r2, [pc, #284]	; (8001708 <TSK_HighFrequencyTask+0x168>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80015ec:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80015f0:	9000      	str	r0, [sp, #0]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80015f2:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 80015f4:	1ac9      	subs	r1, r1, r3
 80015f6:	6810      	ldr	r0, [r2, #0]
 80015f8:	f004 f836 	bl	8005668 <PI_Controller>
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80015fc:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
  Vqd.d = PI_Controller(pPIDId[M1],
 8001600:	4b42      	ldr	r3, [pc, #264]	; (800170c <TSK_HighFrequencyTask+0x16c>)
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001602:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001606:	4681      	mov	r9, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 8001608:	1a89      	subs	r1, r1, r2
 800160a:	6818      	ldr	r0, [r3, #0]
 800160c:	f004 f82c 	bl	8005668 <PI_Controller>
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001610:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <TSK_HighFrequencyTask+0x170>)
 8001612:	f8ad 9004 	strh.w	r9, [sp, #4]
 8001616:	f8ad 0006 	strh.w	r0, [sp, #6]
 800161a:	9901      	ldr	r1, [sp, #4]
 800161c:	6818      	ldr	r0, [r3, #0]
 800161e:	f003 fcd9 	bl	8004fd4 <Circle_Limitation>
 8001622:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001624:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001626:	fa0f f983 	sxth.w	r9, r3
 800162a:	141d      	asrs	r5, r3, #16
 800162c:	9301      	str	r3, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 800162e:	f004 fb3b 	bl	8005ca8 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001632:	4631      	mov	r1, r6
 8001634:	9801      	ldr	r0, [sp, #4]
 8001636:	f7ff fc97 	bl	8000f68 <MCM_Rev_Park>
 800163a:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800163c:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 800163e:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001640:	f004 f8e2 	bl	8005808 <PWMC_SetPhaseVoltage>
 8001644:	4601      	mov	r1, r0
  FOCVars[M1].Iab = Iab;
 8001646:	9802      	ldr	r0, [sp, #8]
 8001648:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 800164a:	9803      	ldr	r0, [sp, #12]
 800164c:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 800164e:	9800      	ldr	r0, [sp, #0]
 8001650:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_FOC_DURATION)
 8001652:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 8001654:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Vqd = Vqd;
 8001656:	f8a4 9016 	strh.w	r9, [r4, #22]
 800165a:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].hElAngle = hElAngle;
 800165c:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 800165e:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_FOC_DURATION)
 8001662:	d034      	beq.n	80016ce <TSK_HighFrequencyTask+0x12e>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001664:	482b      	ldr	r0, [pc, #172]	; (8001714 <TSK_HighFrequencyTask+0x174>)
 8001666:	f004 ffa9 	bl	80065bc <RUC_FirstAccelerationStageReached>
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 800166a:	4b2b      	ldr	r3, [pc, #172]	; (8001718 <TSK_HighFrequencyTask+0x178>)
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 800166c:	4604      	mov	r4, r0
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 800166e:	f8d8 0000 	ldr.w	r0, [r8]
 8001672:	9006      	str	r0, [sp, #24]
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001674:	6818      	ldr	r0, [r3, #0]
 8001676:	f003 fca5 	bl	8004fc4 <VBS_GetAvBusVoltage_d>
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 800167a:	a905      	add	r1, sp, #20
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 800167c:	4603      	mov	r3, r0
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 800167e:	4827      	ldr	r0, [pc, #156]	; (800171c <TSK_HighFrequencyTask+0x17c>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001680:	f8ad 301c 	strh.w	r3, [sp, #28]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8001684:	f004 ffd0 	bl	8006628 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1); /*  Only in case of Sensor-less */
 8001688:	4824      	ldr	r0, [pc, #144]	; (800171c <TSK_HighFrequencyTask+0x17c>)
 800168a:	f005 f957 	bl	800693c <STO_PLL_CalcAvrgElSpeedDpp>
	 if (IsAccelerationStageReached == false)
 800168e:	b164      	cbz	r4, 80016aa <TSK_HighFrequencyTask+0x10a>
    hState = STM_GetState(&STM[M1]);
 8001690:	4819      	ldr	r0, [pc, #100]	; (80016f8 <TSK_HighFrequencyTask+0x158>)
 8001692:	f004 fcad 	bl	8005ff0 <STM_GetState>
    if((hState == START) || (hState == SWITCH_OVER) || (hState == START_RUN)) /*  only for sensor-less*/
 8001696:	1f03      	subs	r3, r0, #4
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b01      	cmp	r3, #1
 800169c:	d909      	bls.n	80016b2 <TSK_HighFrequencyTask+0x112>
 800169e:	2813      	cmp	r0, #19
 80016a0:	d007      	beq.n	80016b2 <TSK_HighFrequencyTask+0x112>
}
 80016a2:	2000      	movs	r0, #0
 80016a4:	b009      	add	sp, #36	; 0x24
 80016a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      STO_ResetPLL(&STO_PLL_M1);
 80016aa:	481c      	ldr	r0, [pc, #112]	; (800171c <TSK_HighFrequencyTask+0x17c>)
 80016ac:	f005 fa7a 	bl	8006ba4 <STO_ResetPLL>
 80016b0:	e7ee      	b.n	8001690 <TSK_HighFrequencyTask+0xf0>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 80016b2:	481a      	ldr	r0, [pc, #104]	; (800171c <TSK_HighFrequencyTask+0x17c>)
 80016b4:	f004 faf0 	bl	8005c98 <SPD_GetElAngle>
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 80016b8:	a904      	add	r1, sp, #16
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 80016ba:	4603      	mov	r3, r0
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 80016bc:	4818      	ldr	r0, [pc, #96]	; (8001720 <TSK_HighFrequencyTask+0x180>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 80016be:	f8ad 3010 	strh.w	r3, [sp, #16]
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 80016c2:	f004 fdc9 	bl	8006258 <VSS_CalcElAngle>
}
 80016c6:	2000      	movs	r0, #0
 80016c8:	b009      	add	sp, #36	; 0x24
 80016ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	4809      	ldr	r0, [pc, #36]	; (80016f8 <TSK_HighFrequencyTask+0x158>)
 80016d2:	f004 fbfb 	bl	8005ecc <STM_FaultProcessing>
}
 80016d6:	2000      	movs	r0, #0
 80016d8:	b009      	add	sp, #36	; 0x24
 80016da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!REMNG_RampCompleted(pREMNG[M1]))
 80016de:	4d11      	ldr	r5, [pc, #68]	; (8001724 <TSK_HighFrequencyTask+0x184>)
 80016e0:	6828      	ldr	r0, [r5, #0]
 80016e2:	f004 fa7b 	bl	8005bdc <REMNG_RampCompleted>
 80016e6:	2800      	cmp	r0, #0
 80016e8:	f47f af66 	bne.w	80015b8 <TSK_HighFrequencyTask+0x18>
      FOCVars[M1].Iqdref.q = REMNG_Calc(pREMNG[M1]);
 80016ec:	6828      	ldr	r0, [r5, #0]
 80016ee:	f004 fa53 	bl	8005b98 <REMNG_Calc>
 80016f2:	8220      	strh	r0, [r4, #16]
 80016f4:	e760      	b.n	80015b8 <TSK_HighFrequencyTask+0x18>
 80016f6:	bf00      	nop
 80016f8:	200009e0 	.word	0x200009e0
 80016fc:	20000940 	.word	0x20000940
 8001700:	200009f4 	.word	0x200009f4
 8001704:	2000092c 	.word	0x2000092c
 8001708:	20000934 	.word	0x20000934
 800170c:	200009f0 	.word	0x200009f0
 8001710:	200009bc 	.word	0x200009bc
 8001714:	2000033c 	.word	0x2000033c
 8001718:	200009c0 	.word	0x200009c0
 800171c:	200003c8 	.word	0x200003c8
 8001720:	2000057c 	.word	0x2000057c
 8001724:	200009e8 	.word	0x200009e8
 8001728:	20000944 	.word	0x20000944

0800172c <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 800172c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800172e:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <TSK_SafetyTask_PWMOFF+0x84>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001730:	4e20      	ldr	r6, [pc, #128]	; (80017b4 <TSK_SafetyTask_PWMOFF+0x88>)
{
 8001732:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001734:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001738:	f003 ff44 	bl	80055c4 <NTC_CalcAvTemp>
 800173c:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800173e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001742:	f004 f9b5 	bl	8005ab0 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001746:	f025 050c 	bic.w	r5, r5, #12
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800174a:	4328      	orrs	r0, r5
 800174c:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 800174e:	b334      	cbz	r4, 800179e <TSK_SafetyTask_PWMOFF+0x72>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8001750:	4f19      	ldr	r7, [pc, #100]	; (80017b8 <TSK_SafetyTask_PWMOFF+0x8c>)
 8001752:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001756:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 800175a:	43ea      	mvns	r2, r5
 800175c:	b292      	uxth	r2, r2
 800175e:	4629      	mov	r1, r5
 8001760:	4638      	mov	r0, r7
 8001762:	f004 fbb3 	bl	8005ecc <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8001766:	4638      	mov	r0, r7
 8001768:	f004 fc42 	bl	8005ff0 <STM_GetState>
 800176c:	280a      	cmp	r0, #10
 800176e:	d002      	beq.n	8001776 <TSK_SafetyTask_PWMOFF+0x4a>
 8001770:	280b      	cmp	r0, #11
 8001772:	d00e      	beq.n	8001792 <TSK_SafetyTask_PWMOFF+0x66>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001776:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800177a:	f004 f96d 	bl	8005a58 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 800177e:	4620      	mov	r0, r4
 8001780:	f7ff fc12 	bl	8000fa8 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001784:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <TSK_SafetyTask_PWMOFF+0x90>)
 8001786:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 800178a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 800178e:	f003 bec3 	b.w	8005518 <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001792:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 8001796:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800179a:	f004 b95d 	b.w	8005a58 <PWMC_SwitchOffPWM>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <TSK_SafetyTask_PWMOFF+0x94>)
 80017a0:	6818      	ldr	r0, [r3, #0]
 80017a2:	f004 f9bb 	bl	8005b1c <RVBS_CalcAvVbus>
 80017a6:	f020 000c 	bic.w	r0, r0, #12
 80017aa:	4305      	orrs	r5, r0
 80017ac:	b2ad      	uxth	r5, r5
 80017ae:	e7cf      	b.n	8001750 <TSK_SafetyTask_PWMOFF+0x24>
 80017b0:	20000928 	.word	0x20000928
 80017b4:	2000092c 	.word	0x2000092c
 80017b8:	200009e0 	.word	0x200009e0
 80017bc:	200009ec 	.word	0x200009ec
 80017c0:	200009c0 	.word	0x200009c0

080017c4 <TSK_SafetyTask>:
{
 80017c4:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <TSK_SafetyTask+0x1c>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d000      	beq.n	80017d0 <TSK_SafetyTask+0xc>
}
 80017ce:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 80017d0:	2000      	movs	r0, #0
 80017d2:	f7ff ffab 	bl	800172c <TSK_SafetyTask_PWMOFF>
}
 80017d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 80017da:	f000 bd79 	b.w	80022d0 <RCM_ExecUserConv>
 80017de:	bf00      	nop
 80017e0:	20000784 	.word	0x20000784

080017e4 <MC_RunMotorControlTasks>:
{
 80017e4:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <MC_RunMotorControlTasks+0x1c>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	b903      	cbnz	r3, 80017ee <MC_RunMotorControlTasks+0xa>
}
 80017ec:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 80017ee:	f7ff feab 	bl	8001548 <MC_Scheduler>
    TSK_SafetyTask();
 80017f2:	f7ff ffe7 	bl	80017c4 <TSK_SafetyTask>
}
 80017f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 80017fa:	f001 b8b3 	b.w	8002964 <UI_Scheduler>
 80017fe:	bf00      	nop
 8001800:	20000784 	.word	0x20000784

08001804 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001804:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  ICS_SwitchOffPWM(pwmcHandle[M1]);
 8001806:	4b05      	ldr	r3, [pc, #20]	; (800181c <TSK_HardwareFaultTask+0x18>)
 8001808:	6818      	ldr	r0, [r3, #0]
 800180a:	f003 fd8d 	bl	8005328 <ICS_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 800180e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8001812:	4803      	ldr	r0, [pc, #12]	; (8001820 <TSK_HardwareFaultTask+0x1c>)
 8001814:	2200      	movs	r2, #0
 8001816:	2180      	movs	r1, #128	; 0x80
 8001818:	f004 bb58 	b.w	8005ecc <STM_FaultProcessing>
 800181c:	2000092c 	.word	0x2000092c
 8001820:	200009e0 	.word	0x200009e0

08001824 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8001824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001828:	4b50      	ldr	r3, [pc, #320]	; (800196c <mc_lock_pins+0x148>)
 800182a:	4951      	ldr	r1, [pc, #324]	; (8001970 <mc_lock_pins+0x14c>)
 800182c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800182e:	2510      	movs	r5, #16
 8001830:	61dd      	str	r5, [r3, #28]
 8001832:	b08e      	sub	sp, #56	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001834:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001836:	69d8      	ldr	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001838:	4a4e      	ldr	r2, [pc, #312]	; (8001974 <mc_lock_pins+0x150>)
  temp = READ_REG(GPIOx->LCKR);
 800183a:	900d      	str	r0, [sp, #52]	; 0x34
  (void) temp;
 800183c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800183e:	484e      	ldr	r0, [pc, #312]	; (8001978 <mc_lock_pins+0x154>)
 8001840:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001842:	2408      	movs	r4, #8
 8001844:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001846:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001848:	69d0      	ldr	r0, [r2, #28]
 800184a:	900c      	str	r0, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800184c:	f44f 3482 	mov.w	r4, #66560	; 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001850:	f44f 6780 	mov.w	r7, #1024	; 0x400
  (void) temp;
 8001854:	980c      	ldr	r0, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001856:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001858:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800185a:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800185c:	69d0      	ldr	r0, [r2, #28]
 800185e:	900b      	str	r0, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001860:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001864:	f44f 30c0 	mov.w	r0, #98304	; 0x18000
  (void) temp;
 8001868:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800186c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800186e:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001870:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001872:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8001876:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
  (void) temp;
 800187a:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800187e:	f8df c104 	ldr.w	ip, [pc, #260]	; 8001984 <mc_lock_pins+0x160>
 8001882:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001886:	f44f 7e80 	mov.w	lr, #256	; 0x100
 800188a:	f8c3 e01c 	str.w	lr, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800188e:	f8c3 c01c 	str.w	ip, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001892:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8001896:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 800189a:	f44f 7e00 	mov.w	lr, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800189e:	f44f 3c81 	mov.w	ip, #66048	; 0x10200
  (void) temp;
 80018a2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018a6:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018aa:	f8c3 e01c 	str.w	lr, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018ae:	f8c3 c01c 	str.w	ip, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018b2:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 80018b6:	f8cd c020 	str.w	ip, [sp, #32]
  (void) temp;
 80018ba:	f8dd e020 	ldr.w	lr, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018be:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 8001988 <mc_lock_pins+0x164>
 80018c2:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018c6:	f04f 0e40 	mov.w	lr, #64	; 0x40
 80018ca:	f8c3 e01c 	str.w	lr, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018ce:	f8c3 c01c 	str.w	ip, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018d2:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 80018d6:	f8cd c01c 	str.w	ip, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018da:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018de:	f44f 3ca0 	mov.w	ip, #81920	; 0x14000
  (void) temp;
 80018e2:	f8dd 801c 	ldr.w	r8, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018e6:	f8c2 c01c 	str.w	ip, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018ea:	f8c2 e01c 	str.w	lr, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018ee:	f8c2 c01c 	str.w	ip, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018f2:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 80018f6:	f8cd c018 	str.w	ip, [sp, #24]
  (void) temp;
 80018fa:	f8dd c018 	ldr.w	ip, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018fe:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001900:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001902:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001904:	69dc      	ldr	r4, [r3, #28]
 8001906:	9405      	str	r4, [sp, #20]
  (void) temp;
 8001908:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800190a:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800190c:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800190e:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001910:	69d0      	ldr	r0, [r2, #28]
 8001912:	9004      	str	r0, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001914:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001918:	f44f 3090 	mov.w	r0, #73728	; 0x12000
  (void) temp;
 800191c:	9e04      	ldr	r6, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800191e:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001920:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001922:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001924:	69d0      	ldr	r0, [r2, #28]
 8001926:	9003      	str	r0, [sp, #12]
  (void) temp;
 8001928:	9c03      	ldr	r4, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800192a:	4814      	ldr	r0, [pc, #80]	; (800197c <mc_lock_pins+0x158>)
 800192c:	f8c2 041c 	str.w	r0, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001930:	2420      	movs	r4, #32
 8001932:	f8c2 441c 	str.w	r4, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001936:	f8c2 041c 	str.w	r0, [r2, #1052]	; 0x41c
  temp = READ_REG(GPIOx->LCKR);
 800193a:	f8d2 041c 	ldr.w	r0, [r2, #1052]	; 0x41c
 800193e:	9002      	str	r0, [sp, #8]
  (void) temp;
 8001940:	9c02      	ldr	r4, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001942:	480f      	ldr	r0, [pc, #60]	; (8001980 <mc_lock_pins+0x15c>)
 8001944:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001946:	2402      	movs	r4, #2
 8001948:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800194a:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	9301      	str	r3, [sp, #4]
  (void) temp;
 8001950:	9b01      	ldr	r3, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001952:	f8c2 141c 	str.w	r1, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001956:	f8c2 541c 	str.w	r5, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800195a:	f8c2 141c 	str.w	r1, [r2, #1052]	; 0x41c
  temp = READ_REG(GPIOx->LCKR);
 800195e:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 8001962:	9300      	str	r3, [sp, #0]
  (void) temp;
 8001964:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
}
 8001966:	b00e      	add	sp, #56	; 0x38
 8001968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800196c:	40020000 	.word	0x40020000
 8001970:	00010010 	.word	0x00010010
 8001974:	40020400 	.word	0x40020400
 8001978:	00010008 	.word	0x00010008
 800197c:	00010020 	.word	0x00010020
 8001980:	00010002 	.word	0x00010002
 8001984:	00010100 	.word	0x00010100
 8001988:	00010040 	.word	0x00010040

0800198c <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 800198c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001990:	b08e      	sub	sp, #56	; 0x38
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 8001992:	f04f 0800 	mov.w	r8, #0
{
 8001996:	4616      	mov	r6, r2
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 8001998:	094a      	lsrs	r2, r1, #5
{
 800199a:	460c      	mov	r4, r1
 800199c:	461f      	mov	r7, r3
 800199e:	4605      	mov	r5, r0
  bool bNoError = false; // Default is error
 80019a0:	f88d 8011 	strb.w	r8, [sp, #17]
  if (bMotorSelection != 0)
 80019a4:	d123      	bne.n	80019ee <MCP_ReceivedFrame+0x62>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 80019a6:	2912      	cmp	r1, #18
 80019a8:	d814      	bhi.n	80019d4 <MCP_ReceivedFrame+0x48>
 80019aa:	e8df f011 	tbh	[pc, r1, lsl #1]
 80019ae:	0016      	.short	0x0016
 80019b0:	00db0049 	.word	0x00db0049
 80019b4:	0013016d 	.word	0x0013016d
 80019b8:	017a0013 	.word	0x017a0013
 80019bc:	02030227 	.word	0x02030227
 80019c0:	01a7023f 	.word	0x01a7023f
 80019c4:	01d701c0 	.word	0x01d701c0
 80019c8:	001301f0 	.word	0x001301f0
 80019cc:	00130013 	.word	0x00130013
 80019d0:	00160013 	.word	0x00160013
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 80019d4:	2301      	movs	r3, #1
 80019d6:	f88d 3016 	strb.w	r3, [sp, #22]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 80019da:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 80019de:	2301      	movs	r3, #1
 80019e0:	f10d 0216 	add.w	r2, sp, #22
 80019e4:	21ff      	movs	r1, #255	; 0xff
 80019e6:	47a0      	blx	r4
    }
  }
}
 80019e8:	b00e      	add	sp, #56	; 0x38
 80019ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 80019ee:	3a01      	subs	r2, #1
 80019f0:	4641      	mov	r1, r8
 80019f2:	9203      	str	r2, [sp, #12]
 80019f4:	f001 f80c 	bl	8002a10 <UI_SetReg>
 80019f8:	2800      	cmp	r0, #0
 80019fa:	f000 823c 	beq.w	8001e76 <MCP_ReceivedFrame+0x4ea>
      if (pHandle->pDAC)
 80019fe:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
      Code &= 0x1F; /* Mask: 0001|1111 */
 8001a02:	f004 041f 	and.w	r4, r4, #31
      if (pHandle->pDAC)
 8001a06:	b118      	cbz	r0, 8001a10 <MCP_ReceivedFrame+0x84>
        UI_SetReg(&pHandle->pDAC->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1);
 8001a08:	9a03      	ldr	r2, [sp, #12]
 8001a0a:	4641      	mov	r1, r8
 8001a0c:	f001 f800 	bl	8002a10 <UI_SetReg>
  switch (Code)
 8001a10:	2c12      	cmp	r4, #18
 8001a12:	f200 8239 	bhi.w	8001e88 <MCP_ReceivedFrame+0x4fc>
 8001a16:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001a1a:	01eb      	.short	0x01eb
 8001a1c:	00a50013 	.word	0x00a50013
 8001a20:	02370137 	.word	0x02370137
 8001a24:	01440237 	.word	0x01440237
 8001a28:	01cd01f1 	.word	0x01cd01f1
 8001a2c:	01710209 	.word	0x01710209
 8001a30:	01a1018a 	.word	0x01a1018a
 8001a34:	023701ba 	.word	0x023701ba
 8001a38:	02370237 	.word	0x02370237
 8001a3c:	01eb0237 	.word	0x01eb0237
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001a40:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 8001a42:	2305      	movs	r3, #5
 8001a44:	f88d 3016 	strb.w	r3, [sp, #22]
      switch (bRegID)
 8001a48:	2988      	cmp	r1, #136	; 0x88
 8001a4a:	f200 8238 	bhi.w	8001ebe <MCP_ReceivedFrame+0x532>
 8001a4e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001a52:	029c      	.short	0x029c
 8001a54:	02360236 	.word	0x02360236
 8001a58:	0236027e 	.word	0x0236027e
 8001a5c:	023a023a 	.word	0x023a023a
 8001a60:	023a023a 	.word	0x023a023a
 8001a64:	023a023a 	.word	0x023a023a
 8001a68:	023a023a 	.word	0x023a023a
 8001a6c:	023a023a 	.word	0x023a023a
 8001a70:	0259023a 	.word	0x0259023a
 8001a74:	02360259 	.word	0x02360259
 8001a78:	023a0236 	.word	0x023a0236
 8001a7c:	023a023a 	.word	0x023a023a
 8001a80:	023a023a 	.word	0x023a023a
 8001a84:	02360236 	.word	0x02360236
 8001a88:	02880236 	.word	0x02880236
 8001a8c:	02360292 	.word	0x02360292
 8001a90:	02360236 	.word	0x02360236
 8001a94:	02360236 	.word	0x02360236
 8001a98:	02360236 	.word	0x02360236
 8001a9c:	02360236 	.word	0x02360236
 8001aa0:	02360236 	.word	0x02360236
 8001aa4:	02360236 	.word	0x02360236
 8001aa8:	02360236 	.word	0x02360236
 8001aac:	02360236 	.word	0x02360236
 8001ab0:	02360236 	.word	0x02360236
 8001ab4:	02360236 	.word	0x02360236
 8001ab8:	02360236 	.word	0x02360236
 8001abc:	02360236 	.word	0x02360236
 8001ac0:	02360236 	.word	0x02360236
 8001ac4:	02360236 	.word	0x02360236
 8001ac8:	02360236 	.word	0x02360236
 8001acc:	02360236 	.word	0x02360236
 8001ad0:	02360236 	.word	0x02360236
 8001ad4:	0236023a 	.word	0x0236023a
 8001ad8:	02360236 	.word	0x02360236
 8001adc:	02590236 	.word	0x02590236
 8001ae0:	02590259 	.word	0x02590259
 8001ae4:	02360236 	.word	0x02360236
 8001ae8:	02360236 	.word	0x02360236
 8001aec:	02360236 	.word	0x02360236
 8001af0:	0236023a 	.word	0x0236023a
 8001af4:	02360236 	.word	0x02360236
 8001af8:	023a023a 	.word	0x023a023a
 8001afc:	023a023a 	.word	0x023a023a
 8001b00:	023a023a 	.word	0x023a023a
 8001b04:	0236023a 	.word	0x0236023a
 8001b08:	02360259 	.word	0x02360259
 8001b0c:	02360236 	.word	0x02360236
 8001b10:	02360236 	.word	0x02360236
 8001b14:	0236023a 	.word	0x0236023a
 8001b18:	023a0236 	.word	0x023a0236
 8001b1c:	0236023a 	.word	0x0236023a
 8001b20:	02360236 	.word	0x02360236
 8001b24:	02360236 	.word	0x02360236
 8001b28:	02360236 	.word	0x02360236
 8001b2c:	02360236 	.word	0x02360236
 8001b30:	02360236 	.word	0x02360236
 8001b34:	02360236 	.word	0x02360236
 8001b38:	027e0236 	.word	0x027e0236
 8001b3c:	02590259 	.word	0x02590259
 8001b40:	02590259 	.word	0x02590259
 8001b44:	02360259 	.word	0x02360259
 8001b48:	02360236 	.word	0x02360236
 8001b4c:	02590259 	.word	0x02590259
 8001b50:	02360236 	.word	0x02360236
 8001b54:	02360236 	.word	0x02360236
 8001b58:	02360236 	.word	0x02360236
 8001b5c:	023a0236 	.word	0x023a0236
 8001b60:	023a023a 	.word	0x023a023a
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001b64:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8001b66:	2303      	movs	r3, #3
 8001b68:	f88d 3016 	strb.w	r3, [sp, #22]
      switch (bRegID)
 8001b6c:	2988      	cmp	r1, #136	; 0x88
 8001b6e:	f200 813f 	bhi.w	8001df0 <MCP_ReceivedFrame+0x464>
 8001b72:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001b76:	01da      	.short	0x01da
 8001b78:	01da01b5 	.word	0x01da01b5
 8001b7c:	01b501da 	.word	0x01b501da
 8001b80:	01920192 	.word	0x01920192
 8001b84:	01920192 	.word	0x01920192
 8001b88:	01920192 	.word	0x01920192
 8001b8c:	01920192 	.word	0x01920192
 8001b90:	01920192 	.word	0x01920192
 8001b94:	01920192 	.word	0x01920192
 8001b98:	01920192 	.word	0x01920192
 8001b9c:	01920192 	.word	0x01920192
 8001ba0:	01920192 	.word	0x01920192
 8001ba4:	01920192 	.word	0x01920192
 8001ba8:	01920192 	.word	0x01920192
 8001bac:	02300192 	.word	0x02300192
 8001bb0:	01b5021c 	.word	0x01b5021c
 8001bb4:	01920192 	.word	0x01920192
 8001bb8:	01da0192 	.word	0x01da0192
 8001bbc:	013d013d 	.word	0x013d013d
 8001bc0:	013d013d 	.word	0x013d013d
 8001bc4:	013d013d 	.word	0x013d013d
 8001bc8:	013d013d 	.word	0x013d013d
 8001bcc:	013d013d 	.word	0x013d013d
 8001bd0:	013d013d 	.word	0x013d013d
 8001bd4:	013d013d 	.word	0x013d013d
 8001bd8:	013d013d 	.word	0x013d013d
 8001bdc:	013d013d 	.word	0x013d013d
 8001be0:	013d013d 	.word	0x013d013d
 8001be4:	013d013d 	.word	0x013d013d
 8001be8:	013d013d 	.word	0x013d013d
 8001bec:	013d013d 	.word	0x013d013d
 8001bf0:	013d013d 	.word	0x013d013d
 8001bf4:	013d013d 	.word	0x013d013d
 8001bf8:	013d0192 	.word	0x013d0192
 8001bfc:	013d013d 	.word	0x013d013d
 8001c00:	01b5013d 	.word	0x01b5013d
 8001c04:	01b501b5 	.word	0x01b501b5
 8001c08:	01920192 	.word	0x01920192
 8001c0c:	01920192 	.word	0x01920192
 8001c10:	01b501da 	.word	0x01b501da
 8001c14:	01920192 	.word	0x01920192
 8001c18:	01920192 	.word	0x01920192
 8001c1c:	01920192 	.word	0x01920192
 8001c20:	01920192 	.word	0x01920192
 8001c24:	01920192 	.word	0x01920192
 8001c28:	01da0192 	.word	0x01da0192
 8001c2c:	013d01b5 	.word	0x013d01b5
 8001c30:	01920192 	.word	0x01920192
 8001c34:	01920192 	.word	0x01920192
 8001c38:	013d0192 	.word	0x013d0192
 8001c3c:	0192013d 	.word	0x0192013d
 8001c40:	01da0192 	.word	0x01da0192
 8001c44:	01b501da 	.word	0x01b501da
 8001c48:	01b501b5 	.word	0x01b501b5
 8001c4c:	01b501b5 	.word	0x01b501b5
 8001c50:	019201da 	.word	0x019201da
 8001c54:	01b50192 	.word	0x01b50192
 8001c58:	0192013d 	.word	0x0192013d
 8001c5c:	01da0192 	.word	0x01da0192
 8001c60:	01b501b5 	.word	0x01b501b5
 8001c64:	01b501b5 	.word	0x01b501b5
 8001c68:	01b501b5 	.word	0x01b501b5
 8001c6c:	01b501b5 	.word	0x01b501b5
 8001c70:	01b501b5 	.word	0x01b501b5
 8001c74:	01da01b5 	.word	0x01da01b5
 8001c78:	01da013d 	.word	0x01da013d
 8001c7c:	01b501b5 	.word	0x01b501b5
 8001c80:	019201b5 	.word	0x019201b5
 8001c84:	01920192 	.word	0x01920192
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001c88:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001c8a:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001c8c:	f88d 3016 	strb.w	r3, [sp, #22]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001c90:	4628      	mov	r0, r5
 8001c92:	f001 f82b 	bl	8002cec <UI_ExecCmd>
 8001c96:	f88d 0011 	strb.w	r0, [sp, #17]
    if (bNoError)
 8001c9a:	2800      	cmp	r0, #0
 8001c9c:	f43f ae9d 	beq.w	80019da <MCP_ReceivedFrame+0x4e>
 8001ca0:	e03c      	b.n	8001d1c <MCP_ReceivedFrame+0x390>
 8001ca2:	ac06      	add	r4, sp, #24
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	2220      	movs	r2, #32
 8001caa:	f004 ffc5 	bl	8006c38 <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001cae:	f8d5 60c0 	ldr.w	r6, [r5, #192]	; 0xc0
 8001cb2:	f10d 001a 	add.w	r0, sp, #26
 8001cb6:	1e71      	subs	r1, r6, #1
 8001cb8:	2300      	movs	r3, #0
 8001cba:	e005      	b.n	8001cc8 <MCP_ReceivedFrame+0x33c>
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 8001cc0:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001cc4:	f000 8192 	beq.w	8001fec <MCP_ReceivedFrame+0x660>
 8001cc8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001ccc:	2a09      	cmp	r2, #9
 8001cce:	d1f5      	bne.n	8001cbc <MCP_ReceivedFrame+0x330>
 8001cd0:	1d5a      	adds	r2, r3, #5
 8001cd2:	1dd9      	adds	r1, r3, #7
 8001cd4:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001cd6:	5cb2      	ldrb	r2, [r6, r2]
 8001cd8:	f88d 2018 	strb.w	r2, [sp, #24]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001cdc:	5c72      	ldrb	r2, [r6, r1]
 8001cde:	f88d 2019 	strb.w	r2, [sp, #25]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001ce2:	5cf3      	ldrb	r3, [r6, r3]
 8001ce4:	f88d 301a 	strb.w	r3, [sp, #26]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001ce8:	4622      	mov	r2, r4
 8001cea:	2320      	movs	r3, #32
 8001cec:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001cf0:	21f0      	movs	r1, #240	; 0xf0
 8001cf2:	47a0      	blx	r4
      bNoError = true;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 8001cfa:	e00f      	b.n	8001d1c <MCP_ReceivedFrame+0x390>
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001cfc:	78f0      	ldrb	r0, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001cfe:	7873      	ldrb	r3, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001d00:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001d02:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001d04:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001d08:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8001d0c:	b212      	sxth	r2, r2
 8001d0e:	b209      	sxth	r1, r1
 8001d10:	4628      	mov	r0, r5
 8001d12:	f001 f87f 	bl	8002e14 <UI_SetCurrentReferences>
      bNoError = true;
 8001d16:	2301      	movs	r3, #1
 8001d18:	f88d 3011 	strb.w	r3, [sp, #17]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001d22:	461a      	mov	r2, r3
 8001d24:	21f0      	movs	r1, #240	; 0xf0
 8001d26:	47a0      	blx	r4
}
 8001d28:	b00e      	add	sp, #56	; 0x38
 8001d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001d2e:	4cb1      	ldr	r4, [pc, #708]	; (8001ff4 <MCP_ReceivedFrame+0x668>)
      stepList.data = buffer;
 8001d30:	9606      	str	r6, [sp, #24]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001d32:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001d34:	4621      	mov	r1, r4
 8001d36:	a806      	add	r0, sp, #24
      stepList.len = Size;
 8001d38:	f88d 701c 	strb.w	r7, [sp, #28]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001d3c:	f88d 3016 	strb.w	r3, [sp, #22]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001d40:	f001 f87a 	bl	8002e38 <UI_GetMPInfo>
 8001d44:	f88d 0011 	strb.w	r0, [sp, #17]
      if (bNoError)
 8001d48:	2800      	cmp	r0, #0
 8001d4a:	f43f ae46 	beq.w	80019da <MCP_ReceivedFrame+0x4e>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8001d4e:	e9d5 060c 	ldrd	r0, r6, [r5, #48]	; 0x30
 8001d52:	7923      	ldrb	r3, [r4, #4]
 8001d54:	6822      	ldr	r2, [r4, #0]
 8001d56:	21f0      	movs	r1, #240	; 0xf0
 8001d58:	47b0      	blx	r6
  if (RequireAck)
 8001d5a:	e645      	b.n	80019e8 <MCP_ReceivedFrame+0x5c>
 8001d5c:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8001d60:	ac06      	add	r4, sp, #24
 8001d62:	3b01      	subs	r3, #1
 8001d64:	4622      	mov	r2, r4
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001d66:	2000      	movs	r0, #0
 8001d68:	e004      	b.n	8001d74 <MCP_ReceivedFrame+0x3e8>
 8001d6a:	3001      	adds	r0, #1
 8001d6c:	2820      	cmp	r0, #32
        outBuff[i] = pHandle->s_fwVer[i];
 8001d6e:	f802 1b01 	strb.w	r1, [r2], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001d72:	d0b9      	beq.n	8001ce8 <MCP_ReceivedFrame+0x35c>
 8001d74:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001d78:	b2c6      	uxtb	r6, r0
 8001d7a:	2900      	cmp	r1, #0
 8001d7c:	d1f5      	bne.n	8001d6a <MCP_ReceivedFrame+0x3de>
        outBuff[i] = 0;
 8001d7e:	f1c6 021f 	rsb	r2, r6, #31
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	3201      	adds	r2, #1
 8001d86:	4420      	add	r0, r4
 8001d88:	f004 ff56 	bl	8006c38 <memset>
 8001d8c:	e7ac      	b.n	8001ce8 <MCP_ReceivedFrame+0x35c>
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001d8e:	7970      	ldrb	r0, [r6, #5]
 8001d90:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001d92:	7873      	ldrb	r3, [r6, #1]
 8001d94:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001d96:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001d9a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8001d9e:	b292      	uxth	r2, r2
 8001da0:	b209      	sxth	r1, r1
 8001da2:	4628      	mov	r0, r5
 8001da4:	f000 fff2 	bl	8002d8c <UI_ExecTorqueRamp>
 8001da8:	f88d 0011 	strb.w	r0, [sp, #17]
    if (bNoError)
 8001dac:	2800      	cmp	r0, #0
 8001dae:	f43f ae14 	beq.w	80019da <MCP_ReceivedFrame+0x4e>
 8001db2:	e7b3      	b.n	8001d1c <MCP_ReceivedFrame+0x390>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8001db4:	f10d 0316 	add.w	r3, sp, #22
 8001db8:	7831      	ldrb	r1, [r6, #0]
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	f10d 0212 	add.w	r2, sp, #18
 8001dc0:	ab05      	add	r3, sp, #20
 8001dc2:	4628      	mov	r0, r5
 8001dc4:	f000 ffec 	bl	8002da0 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001dc8:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
      outBuff[4] = (uint8_t)(FinalTorque);
 8001dcc:	f8bd 1016 	ldrh.w	r1, [sp, #22]
      outBuff[6] = (uint8_t)(Durationms);
 8001dd0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
      outBuff[4] = (uint8_t)(FinalTorque);
 8001dd4:	f8ad 101c 	strh.w	r1, [sp, #28]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001dd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001ddc:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 8001dde:	9306      	str	r3, [sp, #24]
      outBuff[6] = (uint8_t)(Durationms);
 8001de0:	f8ad 201e 	strh.w	r2, [sp, #30]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001de4:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001de8:	2308      	movs	r3, #8
 8001dea:	aa06      	add	r2, sp, #24
 8001dec:	21f0      	movs	r1, #240	; 0xf0
 8001dee:	47a0      	blx	r4
  if (RequireAck)
 8001df0:	f89d 0011 	ldrb.w	r0, [sp, #17]
    if (bNoError)
 8001df4:	2800      	cmp	r0, #0
 8001df6:	f43f adf0 	beq.w	80019da <MCP_ReceivedFrame+0x4e>
 8001dfa:	e78f      	b.n	8001d1c <MCP_ReceivedFrame+0x390>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001dfc:	7877      	ldrb	r7, [r6, #1]
 8001dfe:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001e00:	7970      	ldrb	r0, [r6, #5]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001e02:	78b4      	ldrb	r4, [r6, #2]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001e04:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001e06:	78f1      	ldrb	r1, [r6, #3]
 8001e08:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8001e0c:	eb03 4304 	add.w	r3, r3, r4, lsl #16
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001e10:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8001e14:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 8001e18:	b292      	uxth	r2, r2
 8001e1a:	4628      	mov	r0, r5
 8001e1c:	f000 ffa4 	bl	8002d68 <UI_ExecSpeedRamp>
 8001e20:	f88d 0011 	strb.w	r0, [sp, #17]
    if (bNoError)
 8001e24:	2800      	cmp	r0, #0
 8001e26:	f43f add8 	beq.w	80019da <MCP_ReceivedFrame+0x4e>
 8001e2a:	e777      	b.n	8001d1c <MCP_ReceivedFrame+0x390>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001e2c:	78b1      	ldrb	r1, [r6, #2]
 8001e2e:	7873      	ldrb	r3, [r6, #1]
 8001e30:	78f2      	ldrb	r2, [r6, #3]
 8001e32:	7934      	ldrb	r4, [r6, #4]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001e34:	7970      	ldrb	r0, [r6, #5]
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001e36:	7a37      	ldrb	r7, [r6, #8]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001e38:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8001e3c:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001e40:	4a6d      	ldr	r2, [pc, #436]	; (8001ff8 <MCP_ReceivedFrame+0x66c>)
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001e42:	79b1      	ldrb	r1, [r6, #6]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001e44:	eb03 6304 	add.w	r3, r3, r4, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001e48:	fb82 4203 	smull	r4, r2, r2, r3
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001e4c:	79f4      	ldrb	r4, [r6, #7]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001e4e:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001e52:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001e56:	b200      	sxth	r0, r0
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001e58:	eb04 2207 	add.w	r2, r4, r7, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001e5c:	7831      	ldrb	r1, [r6, #0]
 8001e5e:	9000      	str	r0, [sp, #0]
 8001e60:	b21b      	sxth	r3, r3
 8001e62:	b292      	uxth	r2, r2
 8001e64:	4628      	mov	r0, r5
 8001e66:	f000 ffb9 	bl	8002ddc <UI_SetRevupData>
 8001e6a:	f88d 0011 	strb.w	r0, [sp, #17]
    if (bNoError)
 8001e6e:	2800      	cmp	r0, #0
 8001e70:	f43f adb3 	beq.w	80019da <MCP_ReceivedFrame+0x4e>
 8001e74:	e752      	b.n	8001d1c <MCP_ReceivedFrame+0x390>
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8001e76:	f89d 0011 	ldrb.w	r0, [sp, #17]
 8001e7a:	230b      	movs	r3, #11
 8001e7c:	f88d 3016 	strb.w	r3, [sp, #22]
    if (bNoError)
 8001e80:	2800      	cmp	r0, #0
 8001e82:	f43f adaa 	beq.w	80019da <MCP_ReceivedFrame+0x4e>
 8001e86:	e749      	b.n	8001d1c <MCP_ReceivedFrame+0x390>
 8001e88:	f89d 0011 	ldrb.w	r0, [sp, #17]
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f88d 3016 	strb.w	r3, [sp, #22]
    if (bNoError)
 8001e92:	2800      	cmp	r0, #0
 8001e94:	f43f ada1 	beq.w	80019da <MCP_ReceivedFrame+0x4e>
 8001e98:	e740      	b.n	8001d1c <MCP_ReceivedFrame+0x390>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001e9a:	f10d 0211 	add.w	r2, sp, #17
 8001e9e:	4628      	mov	r0, r5
 8001ea0:	f000 ffde 	bl	8002e60 <UI_GetReg>
          if ( bNoError == true )
 8001ea4:	f89d 3011 	ldrb.w	r3, [sp, #17]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001ea8:	9006      	str	r0, [sp, #24]
          if ( bNoError == true )
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f43f ad95 	beq.w	80019da <MCP_ReceivedFrame+0x4e>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8001eb0:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	aa06      	add	r2, sp, #24
 8001eb8:	21f0      	movs	r1, #240	; 0xf0
 8001eba:	47a0      	blx	r4
  if (RequireAck)
 8001ebc:	e594      	b.n	80019e8 <MCP_ReceivedFrame+0x5c>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	f88d 3016 	strb.w	r3, [sp, #22]
 8001ec4:	e794      	b.n	8001df0 <MCP_ReceivedFrame+0x464>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8001ec6:	78b2      	ldrb	r2, [r6, #2]
 8001ec8:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001eca:	4628      	mov	r0, r5
 8001ecc:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8001ed0:	f000 fd9e 	bl	8002a10 <UI_SetReg>
 8001ed4:	f88d 0011 	strb.w	r0, [sp, #17]
    if (bNoError)
 8001ed8:	2800      	cmp	r0, #0
 8001eda:	f43f ad7e 	beq.w	80019da <MCP_ReceivedFrame+0x4e>
 8001ede:	e71d      	b.n	8001d1c <MCP_ReceivedFrame+0x390>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001ee0:	f10d 0211 	add.w	r2, sp, #17
 8001ee4:	4628      	mov	r0, r5
 8001ee6:	f000 ffbb 	bl	8002e60 <UI_GetReg>
          if ( bNoError == true )
 8001eea:	f89d 3011 	ldrb.w	r3, [sp, #17]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001eee:	9006      	str	r0, [sp, #24]
          if ( bNoError == true )
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f43f ad72 	beq.w	80019da <MCP_ReceivedFrame+0x4e>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8001ef6:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001efa:	2304      	movs	r3, #4
 8001efc:	aa06      	add	r2, sp, #24
 8001efe:	21f0      	movs	r1, #240	; 0xf0
 8001f00:	47a0      	blx	r4
  if (RequireAck)
 8001f02:	e571      	b.n	80019e8 <MCP_ReceivedFrame+0x5c>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001f04:	78b4      	ldrb	r4, [r6, #2]
 8001f06:	7873      	ldrb	r3, [r6, #1]
 8001f08:	78f0      	ldrb	r0, [r6, #3]
 8001f0a:	7932      	ldrb	r2, [r6, #4]
 8001f0c:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8001f10:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001f14:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 8001f18:	4628      	mov	r0, r5
 8001f1a:	f000 fd79 	bl	8002a10 <UI_SetReg>
 8001f1e:	f88d 0011 	strb.w	r0, [sp, #17]
    if (bNoError)
 8001f22:	2800      	cmp	r0, #0
 8001f24:	f43f ad59 	beq.w	80019da <MCP_ReceivedFrame+0x4e>
 8001f28:	e6f8      	b.n	8001d1c <MCP_ReceivedFrame+0x390>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001f2a:	f10d 0211 	add.w	r2, sp, #17
 8001f2e:	4628      	mov	r0, r5
 8001f30:	f000 ff96 	bl	8002e60 <UI_GetReg>
           if ( bNoError == true )
 8001f34:	f89d 3011 	ldrb.w	r3, [sp, #17]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001f38:	9006      	str	r0, [sp, #24]
           if ( bNoError == true )
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f43f ad4d 	beq.w	80019da <MCP_ReceivedFrame+0x4e>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001f40:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001f44:	2301      	movs	r3, #1
 8001f46:	aa06      	add	r2, sp, #24
 8001f48:	21f0      	movs	r1, #240	; 0xf0
 8001f4a:	47a0      	blx	r4
  if (RequireAck)
 8001f4c:	e54c      	b.n	80019e8 <MCP_ReceivedFrame+0x5c>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8001f4e:	7872      	ldrb	r2, [r6, #1]
 8001f50:	4628      	mov	r0, r5
 8001f52:	f000 fd5d 	bl	8002a10 <UI_SetReg>
 8001f56:	f88d 0011 	strb.w	r0, [sp, #17]
    if (bNoError)
 8001f5a:	2800      	cmp	r0, #0
 8001f5c:	f43f ad3d 	beq.w	80019da <MCP_ReceivedFrame+0x4e>
 8001f60:	e6dc      	b.n	8001d1c <MCP_ReceivedFrame+0x390>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH0, (MC_Protocol_REG_t)(buffer[1]));
 8001f62:	7872      	ldrb	r2, [r6, #1]
 8001f64:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001f68:	2100      	movs	r1, #0
 8001f6a:	f000 ff6f 	bl	8002e4c <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 8001f6e:	2301      	movs	r3, #1
 8001f70:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 8001f74:	e6d2      	b.n	8001d1c <MCP_ReceivedFrame+0x390>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH1, (MC_Protocol_REG_t)(buffer[1]));
 8001f76:	7872      	ldrb	r2, [r6, #1]
 8001f78:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	f000 ff65 	bl	8002e4c <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 8001f82:	2301      	movs	r3, #1
 8001f84:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 8001f88:	e6c8      	b.n	8001d1c <MCP_ReceivedFrame+0x390>
          int32_t wValue = (int32_t)(buffer[1]);
 8001f8a:	7872      	ldrb	r2, [r6, #1]
          UI_SetReg(&pHandle->pDAC->_Super, bRegID, wValue);
 8001f8c:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001f90:	9203      	str	r2, [sp, #12]
 8001f92:	2100      	movs	r1, #0
 8001f94:	f000 fd3c 	bl	8002a10 <UI_SetReg>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001f98:	9a03      	ldr	r2, [sp, #12]
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4628      	mov	r0, r5
 8001f9e:	f000 fd37 	bl	8002a10 <UI_SetReg>
 8001fa2:	f88d 0011 	strb.w	r0, [sp, #17]
    if (bNoError)
 8001fa6:	2800      	cmp	r0, #0
 8001fa8:	f43f ad17 	beq.w	80019da <MCP_ReceivedFrame+0x4e>
 8001fac:	e6b6      	b.n	8001d1c <MCP_ReceivedFrame+0x390>
          if (pHandle->pDAC)
 8001fae:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001fb2:	2800      	cmp	r0, #0
 8001fb4:	f43f af1c 	beq.w	8001df0 <MCP_ReceivedFrame+0x464>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 8001fb8:	2101      	movs	r1, #1
 8001fba:	f000 ff4b 	bl	8002e54 <UI_GetDAC>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001fbe:	2301      	movs	r3, #1
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 8001fc0:	f88d 0018 	strb.w	r0, [sp, #24]
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001fc4:	aa06      	add	r2, sp, #24
 8001fc6:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001fca:	21f0      	movs	r1, #240	; 0xf0
 8001fcc:	47a0      	blx	r4
            bNoError = true;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 8001fd4:	e6a2      	b.n	8001d1c <MCP_ReceivedFrame+0x390>
          if (pHandle->pDAC)
 8001fd6:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001fda:	2800      	cmp	r0, #0
 8001fdc:	f43f af08 	beq.w	8001df0 <MCP_ReceivedFrame+0x464>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH0);
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	f000 ff37 	bl	8002e54 <UI_GetDAC>
 8001fe6:	f88d 0018 	strb.w	r0, [sp, #24]
 8001fea:	e7a9      	b.n	8001f40 <MCP_ReceivedFrame+0x5b4>
 8001fec:	2326      	movs	r3, #38	; 0x26
 8001fee:	2124      	movs	r1, #36	; 0x24
 8001ff0:	2222      	movs	r2, #34	; 0x22
 8001ff2:	e670      	b.n	8001cd6 <MCP_ReceivedFrame+0x34a>
 8001ff4:	2000078c 	.word	0x2000078c
 8001ff8:	2aaaaaab 	.word	0x2aaaaaab

08001ffc <MCP_WaitNextFrame>:
{
 8001ffc:	b510      	push	{r4, lr}
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001ffe:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 8002000:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8002002:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002004:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
  pHandle->fFcpReceive(pHandle->pFCP);
 800200c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800200e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
 8002010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8002014:	4718      	bx	r3
 8002016:	bf00      	nop

08002018 <MCP_Init>:
{
 8002018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201a:	b083      	sub	sp, #12
 800201c:	4604      	mov	r4, r0
 800201e:	461d      	mov	r5, r3
 8002020:	4608      	mov	r0, r1
  pHandle->pDAC = pDAC;
 8002022:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
 8002024:	990a      	ldr	r1, [sp, #40]	; 0x28
  FCP_SetClient( pFCP, pHandle,
 8002026:	4f0a      	ldr	r7, [pc, #40]	; (8002050 <MCP_Init+0x38>)
  pHandle->pFCP = pFCP;
 8002028:	6320      	str	r0, [r4, #48]	; 0x30
  pHandle->s_fwVer = s_fwVer;
 800202a:	e9c4 1330 	strd	r1, r3, [r4, #192]	; 0xc0
{
 800202e:	4616      	mov	r6, r2
  FCP_SetClient( pFCP, pHandle,
 8002030:	4b08      	ldr	r3, [pc, #32]	; (8002054 <MCP_Init+0x3c>)
 8002032:	4a09      	ldr	r2, [pc, #36]	; (8002058 <MCP_Init+0x40>)
 8002034:	9700      	str	r7, [sp, #0]
 8002036:	4621      	mov	r1, r4
{
 8002038:	9f08      	ldr	r7, [sp, #32]
  FCP_SetClient( pFCP, pHandle,
 800203a:	f003 f81b 	bl	8005074 <FCP_SetClient>
  pHandle->fFcpReceive = fFcpReceive;
 800203e:	e9c4 650d 	strd	r6, r5, [r4, #52]	; 0x34
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8002042:	63e7      	str	r7, [r4, #60]	; 0x3c
  MCP_WaitNextFrame(pHandle);
 8002044:	4620      	mov	r0, r4
 8002046:	f7ff ffd9 	bl	8001ffc <MCP_WaitNextFrame>
}
 800204a:	b003      	add	sp, #12
 800204c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800204e:	bf00      	nop
 8002050:	0800205d 	.word	0x0800205d
 8002054:	0800198d 	.word	0x0800198d
 8002058:	08002065 	.word	0x08002065

0800205c <MCP_OnTimeOut>:
{
 800205c:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 800205e:	f7ff ffcd 	bl	8001ffc <MCP_WaitNextFrame>
}
 8002062:	bd08      	pop	{r3, pc}

08002064 <MCP_SentFrame>:
{
 8002064:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 8002066:	f7ff ffc9 	bl	8001ffc <MCP_WaitNextFrame>
}
 800206a:	bd08      	pop	{r3, pc}

0800206c <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 800206c:	b530      	push	{r4, r5, lr}
 800206e:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8002070:	f001 ff64 	bl	8003f3c <HAL_RCC_GetHCLKFreq>
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8002076:	4d0c      	ldr	r5, [pc, #48]	; (80020a8 <MX_MotorControl_Init+0x3c>)
 8002078:	4c0c      	ldr	r4, [pc, #48]	; (80020ac <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 800207a:	fba3 3000 	umull	r3, r0, r3, r0
 800207e:	09c0      	lsrs	r0, r0, #7
 8002080:	f001 fd0e 	bl	8003aa0 <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 8002084:	4629      	mov	r1, r5
 8002086:	4620      	mov	r0, r4
 8002088:	f7fe ffd2 	bl	8001030 <MCboot>
  mc_lock_pins();
 800208c:	f7ff fbca 	bl	8001824 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8002090:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <MX_MotorControl_Init+0x44>)
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	4807      	ldr	r0, [pc, #28]	; (80020b4 <MX_MotorControl_Init+0x48>)
 8002096:	462b      	mov	r3, r5
 8002098:	4622      	mov	r2, r4
 800209a:	2101      	movs	r1, #1
 800209c:	f000 fbf2 	bl	8002884 <UI_TaskInit>
}
 80020a0:	b003      	add	sp, #12
 80020a2:	bd30      	pop	{r4, r5, pc}
 80020a4:	10624dd3 	.word	0x10624dd3
 80020a8:	200009fc 	.word	0x200009fc
 80020ac:	200009f8 	.word	0x200009f8
 80020b0:	080076f4 	.word	0x080076f4
 80020b4:	200006f0 	.word	0x200006f0

080020b8 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80020b8:	4b66      	ldr	r3, [pc, #408]	; (8002254 <RCM_RegisterRegConv+0x19c>)
 80020ba:	681a      	ldr	r2, [r3, #0]
{
 80020bc:	b4f0      	push	{r4, r5, r6, r7}
 80020be:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80020c0:	2a00      	cmp	r2, #0
 80020c2:	f000 808f 	beq.w	80021e4 <RCM_RegisterRegConv+0x12c>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80020c6:	7904      	ldrb	r4, [r0, #4]
 80020c8:	7910      	ldrb	r0, [r2, #4]
 80020ca:	4284      	cmp	r4, r0
 80020cc:	d01e      	beq.n	800210c <RCM_RegisterRegConv+0x54>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80020ce:	685d      	ldr	r5, [r3, #4]
 80020d0:	2d00      	cmp	r5, #0
 80020d2:	f000 80ad 	beq.w	8002230 <RCM_RegisterRegConv+0x178>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80020d6:	792a      	ldrb	r2, [r5, #4]
 80020d8:	42a2      	cmp	r2, r4
  uint8_t handle=255;
 80020da:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80020de:	f000 8089 	beq.w	80021f4 <RCM_RegisterRegConv+0x13c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80020e2:	689e      	ldr	r6, [r3, #8]
 80020e4:	b1fe      	cbz	r6, 8002126 <RCM_RegisterRegConv+0x6e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80020e6:	7932      	ldrb	r2, [r6, #4]
 80020e8:	42a2      	cmp	r2, r4
 80020ea:	f000 8094 	beq.w	8002216 <RCM_RegisterRegConv+0x15e>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80020ee:	68dd      	ldr	r5, [r3, #12]
 80020f0:	2d00      	cmp	r5, #0
 80020f2:	f000 8099 	beq.w	8002228 <RCM_RegisterRegConv+0x170>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80020f6:	792a      	ldrb	r2, [r5, #4]
 80020f8:	42a2      	cmp	r2, r4
 80020fa:	f000 80a8 	beq.w	800224e <RCM_RegisterRegConv+0x196>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 80020fe:	2803      	cmp	r0, #3
 8002100:	bf98      	it	ls
 8002102:	680a      	ldrls	r2, [r1, #0]
 8002104:	d91e      	bls.n	8002144 <RCM_RegisterRegConv+0x8c>
 8002106:	20ff      	movs	r0, #255	; 0xff
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8002108:	bcf0      	pop	{r4, r5, r6, r7}
 800210a:	4770      	bx	lr
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800210c:	6810      	ldr	r0, [r2, #0]
 800210e:	680a      	ldr	r2, [r1, #0]
 8002110:	4290      	cmp	r0, r2
 8002112:	f000 8087 	beq.w	8002224 <RCM_RegisterRegConv+0x16c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002116:	685d      	ldr	r5, [r3, #4]
 8002118:	2d00      	cmp	r5, #0
 800211a:	d1dc      	bne.n	80020d6 <RCM_RegisterRegConv+0x1e>
 800211c:	689e      	ldr	r6, [r3, #8]
      i++;
 800211e:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002120:	2e00      	cmp	r6, #0
 8002122:	d1e0      	bne.n	80020e6 <RCM_RegisterRegConv+0x2e>
 8002124:	e004      	b.n	8002130 <RCM_RegisterRegConv+0x78>
 8002126:	2804      	cmp	r0, #4
 8002128:	f240 808e 	bls.w	8002248 <RCM_RegisterRegConv+0x190>
 800212c:	680a      	ldr	r2, [r1, #0]
      i++;
 800212e:	2002      	movs	r0, #2
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002130:	68dd      	ldr	r5, [r3, #12]
 8002132:	b13d      	cbz	r5, 8002144 <RCM_RegisterRegConv+0x8c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002134:	792e      	ldrb	r6, [r5, #4]
 8002136:	790c      	ldrb	r4, [r1, #4]
 8002138:	42a6      	cmp	r6, r4
 800213a:	d103      	bne.n	8002144 <RCM_RegisterRegConv+0x8c>
 800213c:	682c      	ldr	r4, [r5, #0]
 800213e:	4294      	cmp	r4, r2
 8002140:	d1dd      	bne.n	80020fe <RCM_RegisterRegConv+0x46>
      i++;
 8002142:	2003      	movs	r0, #3
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002144:	6894      	ldr	r4, [r2, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8002146:	4d44      	ldr	r5, [pc, #272]	; (8002258 <RCM_RegisterRegConv+0x1a0>)
      RCM_handle_array [handle] = regConv;
 8002148:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 800214c:	2300      	movs	r3, #0
 800214e:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8002152:	07e3      	lsls	r3, r4, #31
 8002154:	d411      	bmi.n	800217a <RCM_RegisterRegConv+0xc2>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8002156:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8002158:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 800215c:	f023 0320 	bic.w	r3, r3, #32
 8002160:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8002162:	6014      	str	r4, [r2, #0]
{
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8002164:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8002166:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800216a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800216e:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8002170:	6014      	str	r4, [r2, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8002172:	6893      	ldr	r3, [r2, #8]
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800217a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800217c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002180:	62d3      	str	r3, [r2, #44]	; 0x2c
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8002182:	790b      	ldrb	r3, [r1, #4]
 8002184:	2b09      	cmp	r3, #9
 8002186:	d83c      	bhi.n	8002202 <RCM_RegisterRegConv+0x14a>
 8002188:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800218c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8002190:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002194:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002198:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 800219c:	fa94 f4a4 	rbit	r4, r4
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80021a0:	fab4 f484 	clz	r4, r4
 80021a4:	40e6      	lsrs	r6, r4
 80021a6:	320c      	adds	r2, #12
  MODIFY_REG(*preg,
 80021a8:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80021ac:	f852 5026 	ldr.w	r5, [r2, r6, lsl #2]
 80021b0:	f04f 74f8 	mov.w	r4, #32505856	; 0x1f00000
 80021b4:	fa94 f7a4 	rbit	r7, r4
 80021b8:	fab7 f787 	clz	r7, r7
 80021bc:	fa94 f4a4 	rbit	r4, r4
 80021c0:	f04f 0c07 	mov.w	ip, #7
 80021c4:	6889      	ldr	r1, [r1, #8]
 80021c6:	fab4 f484 	clz	r4, r4
 80021ca:	fa23 f707 	lsr.w	r7, r3, r7
 80021ce:	fa0c f707 	lsl.w	r7, ip, r7
 80021d2:	40e3      	lsrs	r3, r4
 80021d4:	4099      	lsls	r1, r3
 80021d6:	ea25 0307 	bic.w	r3, r5, r7
 80021da:	430b      	orrs	r3, r1
 80021dc:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
}
 80021e0:	bcf0      	pop	{r4, r5, r6, r7}
 80021e2:	4770      	bx	lr
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80021e4:	685d      	ldr	r5, [r3, #4]
 80021e6:	b355      	cbz	r5, 800223e <RCM_RegisterRegConv+0x186>
 80021e8:	790c      	ldrb	r4, [r1, #4]
  uint8_t i=0;
 80021ea:	4610      	mov	r0, r2
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80021ec:	792a      	ldrb	r2, [r5, #4]
 80021ee:	42a2      	cmp	r2, r4
 80021f0:	f47f af77 	bne.w	80020e2 <RCM_RegisterRegConv+0x2a>
 80021f4:	682d      	ldr	r5, [r5, #0]
 80021f6:	680a      	ldr	r2, [r1, #0]
 80021f8:	4295      	cmp	r5, r2
 80021fa:	f47f af72 	bne.w	80020e2 <RCM_RegisterRegConv+0x2a>
 80021fe:	2001      	movs	r0, #1
 8002200:	e7a0      	b.n	8002144 <RCM_RegisterRegConv+0x8c>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8002202:	2403      	movs	r4, #3
 8002204:	f06f 051d 	mvn.w	r5, #29
 8002208:	fb14 5403 	smlabb	r4, r4, r3, r5
 800220c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8002210:	f003 7600 	and.w	r6, r3, #33554432	; 0x2000000
 8002214:	e7c0      	b.n	8002198 <RCM_RegisterRegConv+0xe0>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002216:	6835      	ldr	r5, [r6, #0]
 8002218:	680a      	ldr	r2, [r1, #0]
 800221a:	4295      	cmp	r5, r2
 800221c:	f47f af67 	bne.w	80020ee <RCM_RegisterRegConv+0x36>
      i++;
 8002220:	2002      	movs	r0, #2
 8002222:	e78f      	b.n	8002144 <RCM_RegisterRegConv+0x8c>
  uint8_t i=0;
 8002224:	2000      	movs	r0, #0
 8002226:	e78d      	b.n	8002144 <RCM_RegisterRegConv+0x8c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002228:	2804      	cmp	r0, #4
 800222a:	680a      	ldr	r2, [r1, #0]
 800222c:	d889      	bhi.n	8002142 <RCM_RegisterRegConv+0x8a>
 800222e:	e789      	b.n	8002144 <RCM_RegisterRegConv+0x8c>
 8002230:	689e      	ldr	r6, [r3, #8]
      i++;
 8002232:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002234:	2e00      	cmp	r6, #0
 8002236:	f47f af56 	bne.w	80020e6 <RCM_RegisterRegConv+0x2e>
 800223a:	680a      	ldr	r2, [r1, #0]
 800223c:	e778      	b.n	8002130 <RCM_RegisterRegConv+0x78>
 800223e:	689e      	ldr	r6, [r3, #8]
 8002240:	b116      	cbz	r6, 8002248 <RCM_RegisterRegConv+0x190>
 8002242:	790c      	ldrb	r4, [r1, #4]
  uint8_t i=0;
 8002244:	4628      	mov	r0, r5
 8002246:	e74e      	b.n	80020e6 <RCM_RegisterRegConv+0x2e>
 8002248:	680a      	ldr	r2, [r1, #0]
 800224a:	4630      	mov	r0, r6
 800224c:	e770      	b.n	8002130 <RCM_RegisterRegConv+0x78>
 800224e:	680a      	ldr	r2, [r1, #0]
 8002250:	e774      	b.n	800213c <RCM_RegisterRegConv+0x84>
 8002252:	bf00      	nop
 8002254:	20000a28 	.word	0x20000a28
 8002258:	20000a04 	.word	0x20000a04

0800225c <RCM_ExecRegularConv>:
 * There is no issue to execute regular conversion asynchronously.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 800225c:	b430      	push	{r4, r5}
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800225e:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <RCM_ExecRegularConv+0x70>)
 8002260:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002264:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	2b09      	cmp	r3, #9
 800226a:	d827      	bhi.n	80022bc <RCM_ExecRegularConv+0x60>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800226c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8002270:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002274:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002278:	f44f 7140 	mov.w	r1, #768	; 0x300
 800227c:	fa91 f1a1 	rbit	r1, r1
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8002280:	f44f 7500 	mov.w	r5, #512	; 0x200
 8002284:	fab1 f181 	clz	r1, r1
 8002288:	40cd      	lsrs	r5, r1
 800228a:	f102 042c 	add.w	r4, r2, #44	; 0x2c
  MODIFY_REG(*preg,
 800228e:	f003 031f 	and.w	r3, r3, #31
 8002292:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8002296:	f020 001f 	bic.w	r0, r0, #31
 800229a:	4303      	orrs	r3, r0

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 800229c:	0151      	lsls	r1, r2, #5
 800229e:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
 80022a2:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 80022a6:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80022a8:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 80022aa:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 80022ae:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}
 80022b0:	079b      	lsls	r3, r3, #30
 80022b2:	d5fc      	bpl.n	80022ae <RCM_ExecRegularConv+0x52>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80022b4:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
return retVal;
}
 80022b6:	bc30      	pop	{r4, r5}
 80022b8:	b280      	uxth	r0, r0
 80022ba:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80022bc:	2103      	movs	r1, #3
 80022be:	f06f 001d 	mvn.w	r0, #29
 80022c2:	fb11 0103 	smlabb	r1, r1, r3, r0
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80022c6:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 80022ca:	e7d5      	b.n	8002278 <RCM_ExecRegularConv+0x1c>
 80022cc:	20000a28 	.word	0x20000a28

080022d0 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 80022d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 80022d4:	4c0f      	ldr	r4, [pc, #60]	; (8002314 <RCM_ExecUserConv+0x44>)
 80022d6:	7823      	ldrb	r3, [r4, #0]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d001      	beq.n	80022e0 <RCM_ExecUserConv+0x10>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 80022dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80022e0:	4d0d      	ldr	r5, [pc, #52]	; (8002318 <RCM_ExecUserConv+0x48>)
 80022e2:	4f0e      	ldr	r7, [pc, #56]	; (800231c <RCM_ExecUserConv+0x4c>)
 80022e4:	7828      	ldrb	r0, [r5, #0]
 80022e6:	f7ff ffb9 	bl	800225c <RCM_ExecRegularConv>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 80022ea:	782d      	ldrb	r5, [r5, #0]
 80022ec:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <RCM_ExecUserConv+0x50>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80022ee:	8038      	strh	r0, [r7, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 80022f0:	f853 6035 	ldr.w	r6, [r3, r5, lsl #3]
    RCM_UserConvState = RCM_USERCONV_EOC;
 80022f4:	2202      	movs	r2, #2
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80022f6:	4601      	mov	r1, r0
    RCM_UserConvState = RCM_USERCONV_EOC;
 80022f8:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 80022fa:	2e00      	cmp	r6, #0
 80022fc:	d0ee      	beq.n	80022dc <RCM_ExecUserConv+0xc>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80022fe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8002302:	2000      	movs	r0, #0
 8002304:	7020      	strb	r0, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	4628      	mov	r0, r5
 800230a:	4633      	mov	r3, r6
}
 800230c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002310:	4718      	bx	r3
 8002312:	bf00      	nop
 8002314:	20000a24 	.word	0x20000a24
 8002318:	20000a00 	.word	0x20000a00
 800231c:	20000a38 	.word	0x20000a38
 8002320:	20000a04 	.word	0x20000a04

08002324 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002324:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002326:	4b0d      	ldr	r3, [pc, #52]	; (800235c <HAL_MspInit+0x38>)
 8002328:	2100      	movs	r1, #0
 800232a:	9100      	str	r1, [sp, #0]
 800232c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800232e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002332:	645a      	str	r2, [r3, #68]	; 0x44
 8002334:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002336:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800233a:	9200      	str	r2, [sp, #0]
 800233c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800233e:	9101      	str	r1, [sp, #4]
 8002340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002342:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002346:	641a      	str	r2, [r3, #64]	; 0x40
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	9301      	str	r3, [sp, #4]
 8002350:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002352:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002354:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002356:	f001 bb49 	b.w	80039ec <HAL_NVIC_SetPriorityGrouping>
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800

08002360 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002360:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8002362:	6803      	ldr	r3, [r0, #0]
 8002364:	4a30      	ldr	r2, [pc, #192]	; (8002428 <HAL_ADC_MspInit+0xc8>)
{
 8002366:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 800236a:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002370:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8002374:	940a      	str	r4, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 8002376:	d004      	beq.n	8002382 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8002378:	4a2c      	ldr	r2, [pc, #176]	; (800242c <HAL_ADC_MspInit+0xcc>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d034      	beq.n	80023e8 <HAL_ADC_MspInit+0x88>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800237e:	b00d      	add	sp, #52	; 0x34
 8002380:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002382:	4b2b      	ldr	r3, [pc, #172]	; (8002430 <HAL_ADC_MspInit+0xd0>)
 8002384:	9401      	str	r4, [sp, #4]
 8002386:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 8002388:	482a      	ldr	r0, [pc, #168]	; (8002434 <HAL_ADC_MspInit+0xd4>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800238a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800238e:	645a      	str	r2, [r3, #68]	; 0x44
 8002390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002392:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002396:	9201      	str	r2, [sp, #4]
 8002398:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239a:	9402      	str	r4, [sp, #8]
 800239c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800239e:	f042 0201 	orr.w	r2, r2, #1
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
 80023a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023a6:	f002 0201 	and.w	r2, r2, #1
 80023aa:	9202      	str	r2, [sp, #8]
 80023ac:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ae:	9403      	str	r4, [sp, #12]
 80023b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023b2:	f042 0204 	orr.w	r2, r2, #4
 80023b6:	631a      	str	r2, [r3, #48]	; 0x30
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ba:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 80023c2:	2202      	movs	r2, #2
 80023c4:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 80023c6:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 80023c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023cc:	9d03      	ldr	r5, [sp, #12]
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 80023ce:	f001 fbc3 	bl	8003b58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin|M1_BUS_VOLTAGE_Pin;
 80023d2:	2230      	movs	r2, #48	; 0x30
 80023d4:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d6:	4818      	ldr	r0, [pc, #96]	; (8002438 <HAL_ADC_MspInit+0xd8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023da:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin|M1_BUS_VOLTAGE_Pin;
 80023dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023e0:	f001 fbba 	bl	8003b58 <HAL_GPIO_Init>
}
 80023e4:	b00d      	add	sp, #52	; 0x34
 80023e6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 80023e8:	4b11      	ldr	r3, [pc, #68]	; (8002430 <HAL_ADC_MspInit+0xd0>)
 80023ea:	9404      	str	r4, [sp, #16]
 80023ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 80023ee:	4811      	ldr	r0, [pc, #68]	; (8002434 <HAL_ADC_MspInit+0xd4>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 80023f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f4:	645a      	str	r2, [r3, #68]	; 0x44
 80023f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023f8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80023fc:	9204      	str	r2, [sp, #16]
 80023fe:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002400:	9405      	str	r4, [sp, #20]
 8002402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002404:	f042 0201 	orr.w	r2, r2, #1
 8002408:	631a      	str	r2, [r3, #48]	; 0x30
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8002414:	2210      	movs	r2, #16
 8002416:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8002418:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 800241a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241e:	9c05      	ldr	r4, [sp, #20]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8002420:	f001 fb9a 	bl	8003b58 <HAL_GPIO_Init>
}
 8002424:	b00d      	add	sp, #52	; 0x34
 8002426:	bd30      	pop	{r4, r5, pc}
 8002428:	40012000 	.word	0x40012000
 800242c:	40012100 	.word	0x40012100
 8002430:	40023800 	.word	0x40023800
 8002434:	40020000 	.word	0x40020000
 8002438:	40020800 	.word	0x40020800

0800243c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800243c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 800243e:	6801      	ldr	r1, [r0, #0]
 8002440:	4a16      	ldr	r2, [pc, #88]	; (800249c <HAL_DAC_MspInit+0x60>)
{
 8002442:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002444:	2300      	movs	r3, #0
  if(hdac->Instance==DAC)
 8002446:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800244c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002450:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC)
 8002452:	d001      	beq.n	8002458 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002454:	b008      	add	sp, #32
 8002456:	bd10      	pop	{r4, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 8002458:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(DBG_DAC_CH2_GPIO_Port, &GPIO_InitStruct);
 8002460:	480f      	ldr	r0, [pc, #60]	; (80024a0 <HAL_DAC_MspInit+0x64>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8002462:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8002466:	6411      	str	r1, [r2, #64]	; 0x40
 8002468:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800246a:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
 800246e:	9100      	str	r1, [sp, #0]
 8002470:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002472:	9301      	str	r3, [sp, #4]
 8002474:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002476:	f041 0101 	orr.w	r1, r1, #1
 800247a:	6311      	str	r1, [r2, #48]	; 0x30
 800247c:	6b12      	ldr	r2, [r2, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	9304      	str	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002480:	f002 0201 	and.w	r2, r2, #1
 8002484:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = DBG_DAC_CH2_Pin;
 8002486:	2303      	movs	r3, #3
 8002488:	2220      	movs	r2, #32
    HAL_GPIO_Init(DBG_DAC_CH2_GPIO_Port, &GPIO_InitStruct);
 800248a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = DBG_DAC_CH2_Pin;
 800248c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002490:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(DBG_DAC_CH2_GPIO_Port, &GPIO_InitStruct);
 8002492:	f001 fb61 	bl	8003b58 <HAL_GPIO_Init>
}
 8002496:	b008      	add	sp, #32
 8002498:	bd10      	pop	{r4, pc}
 800249a:	bf00      	nop
 800249c:	40007400 	.word	0x40007400
 80024a0:	40020000 	.word	0x40020000

080024a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024a4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 80024a6:	6802      	ldr	r2, [r0, #0]
 80024a8:	4938      	ldr	r1, [pc, #224]	; (800258c <HAL_TIM_Base_MspInit+0xe8>)
{
 80024aa:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 80024ae:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80024b4:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80024b8:	930a      	str	r3, [sp, #40]	; 0x28
  if(htim_base->Instance==TIM1)
 80024ba:	d004      	beq.n	80024c6 <HAL_TIM_Base_MspInit+0x22>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80024bc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80024c0:	d026      	beq.n	8002510 <HAL_TIM_Base_MspInit+0x6c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80024c2:	b00c      	add	sp, #48	; 0x30
 80024c4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024c6:	4a32      	ldr	r2, [pc, #200]	; (8002590 <HAL_TIM_Base_MspInit+0xec>)
 80024c8:	9301      	str	r3, [sp, #4]
 80024ca:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80024cc:	4831      	ldr	r0, [pc, #196]	; (8002594 <HAL_TIM_Base_MspInit+0xf0>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024ce:	f041 0101 	orr.w	r1, r1, #1
 80024d2:	6451      	str	r1, [r2, #68]	; 0x44
 80024d4:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80024d6:	f001 0101 	and.w	r1, r1, #1
 80024da:	9101      	str	r1, [sp, #4]
 80024dc:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024de:	9302      	str	r3, [sp, #8]
 80024e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6313      	str	r3, [r2, #48]	; 0x30
 80024e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024f0:	2301      	movs	r3, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f2:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024f4:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 80024f6:	2202      	movs	r2, #2
 80024f8:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80024fa:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 80024fc:	2440      	movs	r4, #64	; 0x40
 80024fe:	2502      	movs	r5, #2
 8002500:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002504:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8002508:	f001 fb26 	bl	8003b58 <HAL_GPIO_Init>
}
 800250c:	b00c      	add	sp, #48	; 0x30
 800250e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002510:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8002514:	9303      	str	r3, [sp, #12]
 8002516:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002518:	481f      	ldr	r0, [pc, #124]	; (8002598 <HAL_TIM_Base_MspInit+0xf4>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 800251a:	f041 0101 	orr.w	r1, r1, #1
 800251e:	6411      	str	r1, [r2, #64]	; 0x40
 8002520:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002522:	f001 0101 	and.w	r1, r1, #1
 8002526:	9103      	str	r1, [sp, #12]
 8002528:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800252a:	9304      	str	r3, [sp, #16]
 800252c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800252e:	f041 0102 	orr.w	r1, r1, #2
 8002532:	6311      	str	r1, [r2, #48]	; 0x30
 8002534:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002536:	f001 0102 	and.w	r1, r1, #2
 800253a:	9104      	str	r1, [sp, #16]
 800253c:	9904      	ldr	r1, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253e:	9305      	str	r3, [sp, #20]
 8002540:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	6313      	str	r3, [r2, #48]	; 0x30
 8002548:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	9305      	str	r3, [sp, #20]
 8002550:	9905      	ldr	r1, [sp, #20]
    GPIO_InitStruct.Pin = M1_HALL_H3_Pin|M1_HALL_H2_Pin;
 8002552:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8002556:	2302      	movs	r3, #2
 8002558:	2400      	movs	r4, #0
 800255a:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800255c:	2601      	movs	r6, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800255e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_HALL_H3_Pin|M1_HALL_H2_Pin;
 8002560:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002564:	e9cd 4508 	strd	r4, r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002568:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256a:	f001 faf5 	bl	8003b58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 800256e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002572:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8002574:	4807      	ldr	r0, [pc, #28]	; (8002594 <HAL_TIM_Base_MspInit+0xf0>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002576:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8002578:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 800257a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800257e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8002582:	f001 fae9 	bl	8003b58 <HAL_GPIO_Init>
}
 8002586:	b00c      	add	sp, #48	; 0x30
 8002588:	bd70      	pop	{r4, r5, r6, pc}
 800258a:	bf00      	nop
 800258c:	40010000 	.word	0x40010000
 8002590:	40023800 	.word	0x40023800
 8002594:	40020000 	.word	0x40020000
 8002598:	40020400 	.word	0x40020400

0800259c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800259c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 800259e:	6801      	ldr	r1, [r0, #0]
 80025a0:	4a1f      	ldr	r2, [pc, #124]	; (8002620 <HAL_TIM_MspPostInit+0x84>)
{
 80025a2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80025a6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80025ac:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80025b0:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 80025b2:	d001      	beq.n	80025b8 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80025b4:	b008      	add	sp, #32
 80025b6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b8:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c0:	4818      	ldr	r0, [pc, #96]	; (8002624 <HAL_TIM_MspPostInit+0x88>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c2:	f041 0102 	orr.w	r1, r1, #2
 80025c6:	6311      	str	r1, [r2, #48]	; 0x30
 80025c8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80025ca:	f001 0102 	and.w	r1, r1, #2
 80025ce:	9100      	str	r1, [sp, #0]
 80025d0:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d2:	9301      	str	r3, [sp, #4]
 80025d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	6313      	str	r3, [r2, #48]	; 0x30
 80025dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	9301      	str	r3, [sp, #4]
 80025e4:	9901      	ldr	r1, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 80025e6:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80025ea:	2302      	movs	r3, #2
 80025ec:	2402      	movs	r4, #2
 80025ee:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025f0:	2601      	movs	r6, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 80025f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80025f8:	e9cd 4504 	strd	r4, r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025fc:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025fe:	f001 faab 	bl	8003b58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002602:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002606:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002608:	4807      	ldr	r0, [pc, #28]	; (8002628 <HAL_TIM_MspPostInit+0x8c>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800260a:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800260e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002612:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002616:	f001 fa9f 	bl	8003b58 <HAL_GPIO_Init>
}
 800261a:	b008      	add	sp, #32
 800261c:	bd70      	pop	{r4, r5, r6, pc}
 800261e:	bf00      	nop
 8002620:	40010000 	.word	0x40010000
 8002624:	40020400 	.word	0x40020400
 8002628:	40020000 	.word	0x40020000

0800262c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800262c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 800262e:	6801      	ldr	r1, [r0, #0]
 8002630:	4a18      	ldr	r2, [pc, #96]	; (8002694 <HAL_UART_MspInit+0x68>)
{
 8002632:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 8002636:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800263c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002640:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART2)
 8002642:	d001      	beq.n	8002648 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002644:	b009      	add	sp, #36	; 0x24
 8002646:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8002648:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002650:	4811      	ldr	r0, [pc, #68]	; (8002698 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002652:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002656:	6411      	str	r1, [r2, #64]	; 0x40
 8002658:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800265a:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
 800265e:	9100      	str	r1, [sp, #0]
 8002660:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002662:	9301      	str	r3, [sp, #4]
 8002664:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6313      	str	r3, [r2, #48]	; 0x30
 800266c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002674:	2307      	movs	r3, #7
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002676:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002678:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800267a:	2200      	movs	r2, #0
 800267c:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002680:	240c      	movs	r4, #12
 8002682:	2502      	movs	r5, #2
 8002684:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002688:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268c:	f001 fa64 	bl	8003b58 <HAL_GPIO_Init>
}
 8002690:	b009      	add	sp, #36	; 0x24
 8002692:	bd30      	pop	{r4, r5, pc}
 8002694:	40004400 	.word	0x40004400
 8002698:	40020000 	.word	0x40020000

0800269c <ADC_IRQHandler>:
  * @brief  This function handles ADC1/ADC2 interrupt request.
  * @param  None
  * @retval None
  */
void ADC_IRQHandler(void)
{
 800269c:	b508      	push	{r3, lr}
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 800269e:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <ADC_IRQHandler+0x34>)
 80026a0:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 80026a2:	0752      	lsls	r2, r2, #29
 80026a4:	d509      	bpl.n	80026ba <ADC_IRQHandler+0x1e>
  {
    // Clear Flags
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	f022 020c 	bic.w	r2, r2, #12
 80026ac:	601a      	str	r2, [r3, #0]

    UI_DACUpdate(TSK_HighFrequencyTask());  /*GUI, this section is present only if DAC is enabled*/
 80026ae:	f7fe ff77 	bl	80015a0 <TSK_HighFrequencyTask>
  }
#endif
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80026b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_DACUpdate(TSK_HighFrequencyTask());  /*GUI, this section is present only if DAC is enabled*/
 80026b6:	f000 b977 	b.w	80029a8 <UI_DACUpdate>
    ADC3->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 80026ba:	4a06      	ldr	r2, [pc, #24]	; (80026d4 <ADC_IRQHandler+0x38>)
 80026bc:	6813      	ldr	r3, [r2, #0]
 80026be:	f023 030c 	bic.w	r3, r3, #12
 80026c2:	6013      	str	r3, [r2, #0]
    UI_DACUpdate(TSK_HighFrequencyTask());  /*GUI, this section is present only if DAC is enabled*/
 80026c4:	f7fe ff6c 	bl	80015a0 <TSK_HighFrequencyTask>
}
 80026c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_DACUpdate(TSK_HighFrequencyTask());  /*GUI, this section is present only if DAC is enabled*/
 80026cc:	f000 b96c 	b.w	80029a8 <UI_DACUpdate>
 80026d0:	40012000 	.word	0x40012000
 80026d4:	40012200 	.word	0x40012200

080026d8 <TIM1_UP_TIM10_IRQHandler>:
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 80026d8:	4803      	ldr	r0, [pc, #12]	; (80026e8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80026da:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80026dc:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80026de:	f06f 0201 	mvn.w	r2, #1
 80026e2:	611a      	str	r2, [r3, #16]
  ICS_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 80026e4:	f002 bea8 	b.w	8005438 <ICS_TIMx_UP_IRQHandler>
 80026e8:	20000288 	.word	0x20000288

080026ec <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 80026ec:	4807      	ldr	r0, [pc, #28]	; (800270c <TIM1_BRK_TIM9_IRQHandler+0x20>)
{
 80026ee:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 80026f0:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80026f2:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	0612      	lsls	r2, r2, #24
 80026f8:	d504      	bpl.n	8002704 <TIM1_BRK_TIM9_IRQHandler+0x18>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80026fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026fe:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    ICS_BRK_IRQHandler(&PWM_Handle_M1);
 8002700:	f002 fee4 	bl	80054cc <ICS_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8002704:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8002708:	f7fe bf1e 	b.w	8001548 <MC_Scheduler>
 800270c:	20000288 	.word	0x20000288

08002710 <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8002710:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002712:	4c1f      	ldr	r4, [pc, #124]	; (8002790 <USART2_IRQHandler+0x80>)
 8002714:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	0691      	lsls	r1, r2, #26
{
 800271c:	b082      	sub	sp, #8
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 800271e:	d407      	bmi.n	8002730 <USART2_IRQHandler+0x20>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002720:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002722:	0612      	lsls	r2, r2, #24
 8002724:	d413      	bmi.n	800274e <USART2_IRQHandler+0x3e>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002726:	681b      	ldr	r3, [r3, #0]
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002728:	071b      	lsls	r3, r3, #28
 800272a:	d418      	bmi.n	800275e <USART2_IRQHandler+0x4e>
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 800272c:	b002      	add	sp, #8
 800272e:	bd10      	pop	{r4, pc}
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002730:	6859      	ldr	r1, [r3, #4]
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 8002732:	4620      	mov	r0, r4
 8002734:	b2c9      	uxtb	r1, r1
 8002736:	f003 fd09 	bl	800614c <UFCP_RX_IRQ_Handler>
 800273a:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 800273c:	2b01      	cmp	r3, #1
 800273e:	d021      	beq.n	8002784 <USART2_IRQHandler+0x74>
    if (retVal == 2)
 8002740:	2b02      	cmp	r3, #2
 8002742:	d01c      	beq.n	800277e <USART2_IRQHandler+0x6e>
 8002744:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002748:	681a      	ldr	r2, [r3, #0]
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 800274a:	0612      	lsls	r2, r2, #24
 800274c:	d5eb      	bpl.n	8002726 <USART2_IRQHandler+0x16>
    UFCP_TX_IRQ_Handler(&pUSART);
 800274e:	4810      	ldr	r0, [pc, #64]	; (8002790 <USART2_IRQHandler+0x80>)
 8002750:	f003 fc64 	bl	800601c <UFCP_TX_IRQ_Handler>
 8002754:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002758:	681b      	ldr	r3, [r3, #0]
  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 800275a:	071b      	lsls	r3, r3, #28
 800275c:	d5e6      	bpl.n	800272c <USART2_IRQHandler+0x1c>
    UFCP_OVR_IRQ_Handler(&pUSART);
 800275e:	480c      	ldr	r0, [pc, #48]	; (8002790 <USART2_IRQHandler+0x80>)
 8002760:	f003 fd56 	bl	8006210 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002764:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 800276c:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8002772:	9b01      	ldr	r3, [sp, #4]
}
 8002774:	b002      	add	sp, #8
 8002776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UI_SerialCommunicationTimeOutStop();
 800277a:	f000 b925 	b.w	80029c8 <UI_SerialCommunicationTimeOutStop>
      UI_SerialCommunicationTimeOutStop();
 800277e:	f000 f923 	bl	80029c8 <UI_SerialCommunicationTimeOutStop>
 8002782:	e7df      	b.n	8002744 <USART2_IRQHandler+0x34>
      UI_SerialCommunicationTimeOutStart();
 8002784:	f000 f926 	bl	80029d4 <UI_SerialCommunicationTimeOutStart>
    if (retVal == 2)
 8002788:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800278c:	e7c8      	b.n	8002720 <USART2_IRQHandler+0x10>
 800278e:	bf00      	nop
 8002790:	200005b4 	.word	0x200005b4

08002794 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002794:	b530      	push	{r4, r5, lr}
 8002796:	b083      	sub	sp, #12
 8002798:	4c1c      	ldr	r4, [pc, #112]	; (800280c <HardFault_Handler+0x78>)
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 800279a:	f7ff f833 	bl	8001804 <TSK_HardwareFaultTask>
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 800279e:	4625      	mov	r5, r4
 80027a0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80027a4:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80027a6:	0712      	lsls	r2, r2, #28
 80027a8:	d41d      	bmi.n	80027e6 <HardFault_Handler+0x52>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80027aa:	681a      	ldr	r2, [r3, #0]
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
        UI_SerialCommunicationTimeOutStop();
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80027ac:	0610      	lsls	r0, r2, #24
 80027ae:	d40f      	bmi.n	80027d0 <HardFault_Handler+0x3c>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80027b0:	681a      	ldr	r2, [r3, #0]
      {
        UFCP_TX_IRQ_Handler(&pUSART);
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80027b2:	0692      	lsls	r2, r2, #26
 80027b4:	d5f6      	bpl.n	80027a4 <HardFault_Handler+0x10>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80027b6:	6859      	ldr	r1, [r3, #4]
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 80027b8:	4628      	mov	r0, r5
 80027ba:	b2c9      	uxtb	r1, r1
 80027bc:	f003 fcc6 	bl	800614c <UFCP_RX_IRQ_Handler>
 80027c0:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d01f      	beq.n	8002806 <HardFault_Handler+0x72>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d1ea      	bne.n	80027a0 <HardFault_Handler+0xc>
        {
          UI_SerialCommunicationTimeOutStop();
 80027ca:	f000 f8fd 	bl	80029c8 <UI_SerialCommunicationTimeOutStop>
 80027ce:	e7e7      	b.n	80027a0 <HardFault_Handler+0xc>
        UFCP_TX_IRQ_Handler(&pUSART);
 80027d0:	4628      	mov	r0, r5
 80027d2:	f003 fc23 	bl	800601c <UFCP_TX_IRQ_Handler>
 80027d6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80027da:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80027dc:	0691      	lsls	r1, r2, #26
 80027de:	d4ea      	bmi.n	80027b6 <HardFault_Handler+0x22>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80027e0:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80027e2:	0712      	lsls	r2, r2, #28
 80027e4:	d5e1      	bpl.n	80027aa <HardFault_Handler+0x16>
        UFCP_OVR_IRQ_Handler(&pUSART);
 80027e6:	4628      	mov	r0, r5
 80027e8:	f003 fd12 	bl	8006210 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 80027ec:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 80027f4:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80027fa:	9b01      	ldr	r3, [sp, #4]
        UI_SerialCommunicationTimeOutStop();
 80027fc:	f000 f8e4 	bl	80029c8 <UI_SerialCommunicationTimeOutStop>
 8002800:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002804:	e7d1      	b.n	80027aa <HardFault_Handler+0x16>
          UI_SerialCommunicationTimeOutStart();
 8002806:	f000 f8e5 	bl	80029d4 <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 800280a:	e7c9      	b.n	80027a0 <HardFault_Handler+0xc>
 800280c:	200005b4 	.word	0x200005b4

08002810 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8002810:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8002812:	4c0a      	ldr	r4, [pc, #40]	; (800283c <SysTick_Handler+0x2c>)
 8002814:	7823      	ldrb	r3, [r4, #0]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d006      	beq.n	8002828 <SysTick_Handler+0x18>
 800281a:	3301      	adds	r3, #1
 800281c:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 800281e:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8002820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002824:	f7fe bfde 	b.w	80017e4 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8002828:	f000 fe68 	bl	80034fc <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 800282c:	f001 f954 	bl	8003ad8 <HAL_SYSTICK_IRQHandler>
 8002830:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8002832:	7023      	strb	r3, [r4, #0]
}
 8002834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002838:	f7fe bfd4 	b.w	80017e4 <MC_RunMotorControlTasks>
 800283c:	200006f4 	.word	0x200006f4

08002840 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002840:	490c      	ldr	r1, [pc, #48]	; (8002874 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002842:	4a0d      	ldr	r2, [pc, #52]	; (8002878 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8002844:	680b      	ldr	r3, [r1, #0]
{
 8002846:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002848:	4c0c      	ldr	r4, [pc, #48]	; (800287c <_sbrk+0x3c>)
 800284a:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800284c:	b12b      	cbz	r3, 800285a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800284e:	4418      	add	r0, r3
 8002850:	4290      	cmp	r0, r2
 8002852:	d807      	bhi.n	8002864 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002854:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8002856:	4618      	mov	r0, r3
 8002858:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800285a:	4b09      	ldr	r3, [pc, #36]	; (8002880 <_sbrk+0x40>)
 800285c:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800285e:	4418      	add	r0, r3
 8002860:	4290      	cmp	r0, r2
 8002862:	d9f7      	bls.n	8002854 <_sbrk+0x14>
    errno = ENOMEM;
 8002864:	f004 f9be 	bl	8006be4 <__errno>
 8002868:	230c      	movs	r3, #12
 800286a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800286c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002870:	4618      	mov	r0, r3
 8002872:	bd10      	pop	{r4, pc}
 8002874:	20000794 	.word	0x20000794
 8002878:	20020000 	.word	0x20020000
 800287c:	00000400 	.word	0x00000400
 8002880:	20000b20 	.word	0x20000b20

08002884 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8002884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002888:	b087      	sub	sp, #28
      pDAC = &DAC_UI_Params;
      pDAC->_Super = UI_Params;
 800288a:	4d2d      	ldr	r5, [pc, #180]	; (8002940 <UI_TaskInit+0xbc>)
{
 800288c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800288e:	9405      	str	r4, [sp, #20]
      pDAC->_Super = UI_Params;
 8002890:	462c      	mov	r4, r5
{
 8002892:	4682      	mov	sl, r0
 8002894:	460f      	mov	r7, r1
 8002896:	4690      	mov	r8, r2
 8002898:	4699      	mov	r9, r3
      pDAC->_Super = UI_Params;
 800289a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
      pDAC = &DAC_UI_Params;
 800289c:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 8002958 <UI_TaskInit+0xd4>
 80028a0:	4e28      	ldr	r6, [pc, #160]	; (8002944 <UI_TaskInit+0xc0>)
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_MEAS_ROT_SPEED );

    pMCP = &MCP_UI_Params;
    pMCP->_Super = UI_Params;

    UFCP_Init( & pUSART );
 80028a2:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 800295c <UI_TaskInit+0xd8>
      pDAC = &DAC_UI_Params;
 80028a6:	f8c6 e000 	str.w	lr, [r6]
      pDAC->_Super = UI_Params;
 80028aa:	46f4      	mov	ip, lr
 80028ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80028b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80028b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 80028ba:	f8cd a000 	str.w	sl, [sp]
      pDAC->_Super = UI_Params;
 80028be:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 80028c2:	464b      	mov	r3, r9
 80028c4:	4670      	mov	r0, lr
 80028c6:	4642      	mov	r2, r8
 80028c8:	4639      	mov	r1, r7
 80028ca:	f000 f889 	bl	80029e0 <UI_Init>
      UI_DACInit( &pDAC->_Super ); /* Init DAC */
 80028ce:	6830      	ldr	r0, [r6, #0]
 80028d0:	f000 fab4 	bl	8002e3c <UI_DACInit>
      UI_SetDAC( &pDAC->_Super, DAC_CH0, MC_PROTOCOL_REG_MEAS_ROT_SPEED );
 80028d4:	6830      	ldr	r0, [r6, #0]
 80028d6:	2230      	movs	r2, #48	; 0x30
 80028d8:	2100      	movs	r1, #0
 80028da:	f000 fab7 	bl	8002e4c <UI_SetDAC>
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_MEAS_ROT_SPEED );
 80028de:	6830      	ldr	r0, [r6, #0]
 80028e0:	2230      	movs	r2, #48	; 0x30
 80028e2:	2101      	movs	r1, #1
 80028e4:	f000 fab2 	bl	8002e4c <UI_SetDAC>
    pMCP->_Super = UI_Params;
 80028e8:	46ae      	mov	lr, r5
 80028ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    pMCP = &MCP_UI_Params;
 80028ee:	f8df c070 	ldr.w	ip, [pc, #112]	; 8002960 <UI_TaskInit+0xdc>
    pMCP->_Super = UI_Params;
 80028f2:	4665      	mov	r5, ip
 80028f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028f6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80028fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    pMCP = &MCP_UI_Params;
 8002900:	4c11      	ldr	r4, [pc, #68]	; (8002948 <UI_TaskInit+0xc4>)
    pMCP->_Super = UI_Params;
 8002902:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    UFCP_Init( & pUSART );
 8002906:	4658      	mov	r0, fp
    pMCP = &MCP_UI_Params;
 8002908:	f8c4 c000 	str.w	ip, [r4]
    UFCP_Init( & pUSART );
 800290c:	f003 fb84 	bl	8006018 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, pDAC, s_fwVer);
 8002910:	6832      	ldr	r2, [r6, #0]
 8002912:	9905      	ldr	r1, [sp, #20]
 8002914:	4b0d      	ldr	r3, [pc, #52]	; (800294c <UI_TaskInit+0xc8>)
 8002916:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800291a:	4659      	mov	r1, fp
 800291c:	6820      	ldr	r0, [r4, #0]
 800291e:	4a0c      	ldr	r2, [pc, #48]	; (8002950 <UI_TaskInit+0xcc>)
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <UI_TaskInit+0xd0>)
 8002924:	f7ff fb78 	bl	8002018 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002928:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800292c:	6820      	ldr	r0, [r4, #0]
 800292e:	464b      	mov	r3, r9
 8002930:	4642      	mov	r2, r8
 8002932:	4639      	mov	r1, r7

}
 8002934:	b007      	add	sp, #28
 8002936:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 800293a:	f000 b851 	b.w	80029e0 <UI_Init>
 800293e:	bf00      	nop
 8002940:	2000054c 	.word	0x2000054c
 8002944:	2000079c 	.word	0x2000079c
 8002948:	200007a0 	.word	0x200007a0
 800294c:	0800622d 	.word	0x0800622d
 8002950:	0800609d 	.word	0x0800609d
 8002954:	0800607d 	.word	0x0800607d
 8002958:	200000b4 	.word	0x200000b4
 800295c:	200005b4 	.word	0x200005b4
 8002960:	20000a3c 	.word	0x20000a3c

08002964 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8002964:	4a0d      	ldr	r2, [pc, #52]	; (800299c <UI_Scheduler+0x38>)
 8002966:	8813      	ldrh	r3, [r2, #0]
 8002968:	b29b      	uxth	r3, r3
 800296a:	b11b      	cbz	r3, 8002974 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 800296c:	8813      	ldrh	r3, [r2, #0]
 800296e:	3b01      	subs	r3, #1
 8002970:	b29b      	uxth	r3, r3
 8002972:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8002974:	4a0a      	ldr	r2, [pc, #40]	; (80029a0 <UI_Scheduler+0x3c>)
 8002976:	8813      	ldrh	r3, [r2, #0]
 8002978:	b29b      	uxth	r3, r3
 800297a:	2b01      	cmp	r3, #1
 800297c:	d903      	bls.n	8002986 <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 800297e:	8813      	ldrh	r3, [r2, #0]
 8002980:	3b01      	subs	r3, #1
 8002982:	b29b      	uxth	r3, r3
 8002984:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8002986:	4a07      	ldr	r2, [pc, #28]	; (80029a4 <UI_Scheduler+0x40>)
 8002988:	8813      	ldrh	r3, [r2, #0]
 800298a:	b29b      	uxth	r3, r3
 800298c:	2b01      	cmp	r3, #1
 800298e:	d903      	bls.n	8002998 <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 8002990:	8813      	ldrh	r3, [r2, #0]
 8002992:	3b01      	subs	r3, #1
 8002994:	b29b      	uxth	r3, r3
 8002996:	8013      	strh	r3, [r2, #0]
  }
}
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	2000079a 	.word	0x2000079a
 80029a0:	20000798 	.word	0x20000798
 80029a4:	200006f6 	.word	0x200006f6

080029a8 <UI_DACUpdate>:

__weak void UI_DACUpdate(uint8_t bMotorNbr)
{
 80029a8:	b538      	push	{r3, r4, r5, lr}
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 80029aa:	4d06      	ldr	r5, [pc, #24]	; (80029c4 <UI_DACUpdate+0x1c>)
{
 80029ac:	4604      	mov	r4, r0
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 80029ae:	6828      	ldr	r0, [r5, #0]
 80029b0:	f000 f82a 	bl	8002a08 <UI_GetSelectedMC>
 80029b4:	42a0      	cmp	r0, r4
 80029b6:	d000      	beq.n	80029ba <UI_DACUpdate+0x12>
  {
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
  }
}
 80029b8:	bd38      	pop	{r3, r4, r5, pc}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 80029ba:	6828      	ldr	r0, [r5, #0]
}
 80029bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 80029c0:	f000 ba40 	b.w	8002e44 <UI_DACExec>
 80029c4:	2000079c 	.word	0x2000079c

080029c8 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 80029c8:	4b01      	ldr	r3, [pc, #4]	; (80029d0 <UI_SerialCommunicationTimeOutStop+0x8>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	801a      	strh	r2, [r3, #0]
}
 80029ce:	4770      	bx	lr
 80029d0:	20000798 	.word	0x20000798

080029d4 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 80029d4:	4b01      	ldr	r3, [pc, #4]	; (80029dc <UI_SerialCommunicationTimeOutStart+0x8>)
 80029d6:	224f      	movs	r2, #79	; 0x4f
 80029d8:	801a      	strh	r2, [r3, #0]
}
 80029da:	4770      	bx	lr
 80029dc:	20000798 	.word	0x20000798

080029e0 <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  * @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 80029e0:	b430      	push	{r4, r5}
 80029e2:	9c02      	ldr	r4, [sp, #8]
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 80029e4:	6284      	str	r4, [r0, #40]	; 0x28
  pHandle->bSelectedDrive = 0u;
 80029e6:	2500      	movs	r5, #0
 80029e8:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
  pHandle->pMCT = pMCT;
 80029ec:	e9c0 2308 	strd	r2, r3, [r0, #32]
}
 80029f0:	bc30      	pop	{r4, r5}
  pHandle->bDriveNum = bMCNum;
 80029f2:	7701      	strb	r1, [r0, #28]
}
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop

080029f8 <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 80029f8:	7f03      	ldrb	r3, [r0, #28]
 80029fa:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 80029fc:	bf86      	itte	hi
 80029fe:	f880 102c 	strbhi.w	r1, [r0, #44]	; 0x2c
  bool retVal = true;
 8002a02:	2001      	movhi	r0, #1
    retVal = false;
 8002a04:	2000      	movls	r0, #0
  }
  return retVal;
}
 8002a06:	4770      	bx	lr

08002a08 <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 8002a08:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop

08002a10 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8002a10:	b570      	push	{r4, r5, r6, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002a12:	e9d0 5408 	ldrd	r5, r4, [r0, #32]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002a16:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8002a1a:	b082      	sub	sp, #8
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002a1c:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002a20:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
{
 8002a24:	4614      	mov	r4, r2
 8002a26:	295b      	cmp	r1, #91	; 0x5b
 8002a28:	d85d      	bhi.n	8002ae6 <UI_SetReg+0xd6>
 8002a2a:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002a2e:	006b      	.short	0x006b
 8002a30:	005c005c 	.word	0x005c005c
 8002a34:	005c006f 	.word	0x005c006f
 8002a38:	007f0079 	.word	0x007f0079
 8002a3c:	008b0085 	.word	0x008b0085
 8002a40:	009d0097 	.word	0x009d0097
 8002a44:	00a900a3 	.word	0x00a900a3
 8002a48:	00bb00b5 	.word	0x00bb00b5
 8002a4c:	00c700c1 	.word	0x00c700c1
 8002a50:	005c00e1 	.word	0x005c00e1
 8002a54:	00fb005c 	.word	0x00fb005c
 8002a58:	005c0117 	.word	0x005c0117
 8002a5c:	005c005c 	.word	0x005c005c
 8002a60:	005c005c 	.word	0x005c005c
 8002a64:	005c005c 	.word	0x005c005c
 8002a68:	005c005c 	.word	0x005c005c
 8002a6c:	005c005c 	.word	0x005c005c
 8002a70:	005c005c 	.word	0x005c005c
 8002a74:	005c005c 	.word	0x005c005c
 8002a78:	005c005c 	.word	0x005c005c
 8002a7c:	005c005c 	.word	0x005c005c
 8002a80:	005c005c 	.word	0x005c005c
 8002a84:	005c005c 	.word	0x005c005c
 8002a88:	005c005c 	.word	0x005c005c
 8002a8c:	005c005c 	.word	0x005c005c
 8002a90:	005c005c 	.word	0x005c005c
 8002a94:	005c005c 	.word	0x005c005c
 8002a98:	005c005c 	.word	0x005c005c
 8002a9c:	005c005c 	.word	0x005c005c
 8002aa0:	005c005c 	.word	0x005c005c
 8002aa4:	005c005c 	.word	0x005c005c
 8002aa8:	005c005c 	.word	0x005c005c
 8002aac:	005c005c 	.word	0x005c005c
 8002ab0:	005c0133 	.word	0x005c0133
 8002ab4:	005c005c 	.word	0x005c005c
 8002ab8:	005c005c 	.word	0x005c005c
 8002abc:	005c005c 	.word	0x005c005c
 8002ac0:	005c005c 	.word	0x005c005c
 8002ac4:	005c005c 	.word	0x005c005c
 8002ac8:	005c005c 	.word	0x005c005c
 8002acc:	005c005c 	.word	0x005c005c
 8002ad0:	005c005c 	.word	0x005c005c
 8002ad4:	005c005c 	.word	0x005c005c
 8002ad8:	005c005c 	.word	0x005c005c
 8002adc:	005c005c 	.word	0x005c005c
 8002ae0:	005c005c 	.word	0x005c005c
 8002ae4:	005f      	.short	0x005f
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002ae6:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 8002ae8:	b002      	add	sp, #8
 8002aea:	bd70      	pop	{r4, r5, r6, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8002aec:	4a7e      	ldr	r2, [pc, #504]	; (8002ce8 <UI_SetReg+0x2d8>)
 8002aee:	fb82 3204 	smull	r3, r2, r2, r4
 8002af2:	eba2 74e4 	sub.w	r4, r2, r4, asr #31
 8002af6:	4630      	mov	r0, r6
 8002af8:	b221      	sxth	r1, r4
 8002afa:	2200      	movs	r2, #0
 8002afc:	f7fe f85e 	bl	8000bbc <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002b00:	2001      	movs	r0, #1
    break;
 8002b02:	e7f1      	b.n	8002ae8 <UI_SetReg+0xd8>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8002b04:	b2e1      	uxtb	r1, r4
 8002b06:	f7ff ff77 	bl	80029f8 <UI_SelectMC>
    break;
 8002b0a:	e7ed      	b.n	8002ae8 <UI_SetReg+0xd8>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8002b0c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002b10:	f000 80d6 	beq.w	8002cc0 <UI_SetReg+0x2b0>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8002b14:	2c01      	cmp	r4, #1
 8002b16:	f000 80dd 	beq.w	8002cd4 <UI_SetReg+0x2c4>
  bool retVal = true;
 8002b1a:	2001      	movs	r0, #1
}
 8002b1c:	b002      	add	sp, #8
 8002b1e:	bd70      	pop	{r4, r5, r6, pc}
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8002b20:	6828      	ldr	r0, [r5, #0]
 8002b22:	b221      	sxth	r1, r4
 8002b24:	f002 fd88 	bl	8005638 <PID_SetKP>
  bool retVal = true;
 8002b28:	2001      	movs	r0, #1
    break;
 8002b2a:	e7dd      	b.n	8002ae8 <UI_SetReg+0xd8>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8002b2c:	6828      	ldr	r0, [r5, #0]
 8002b2e:	b221      	sxth	r1, r4
 8002b30:	f002 fd84 	bl	800563c <PID_SetKI>
  bool retVal = true;
 8002b34:	2001      	movs	r0, #1
    break;
 8002b36:	e7d7      	b.n	8002ae8 <UI_SetReg+0xd8>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8002b38:	6828      	ldr	r0, [r5, #0]
 8002b3a:	b221      	sxth	r1, r4
 8002b3c:	f002 fd8e 	bl	800565c <PID_SetKD>
  bool retVal = true;
 8002b40:	2001      	movs	r0, #1
    break;
 8002b42:	e7d1      	b.n	8002ae8 <UI_SetReg+0xd8>
      currComp = MCI_GetIqdref(pMCI);
 8002b44:	4630      	mov	r0, r6
 8002b46:	f7fe f915 	bl	8000d74 <MCI_GetIqdref>
 8002b4a:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 8002b4c:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002b50:	4630      	mov	r0, r6
 8002b52:	9901      	ldr	r1, [sp, #4]
 8002b54:	f7fe f848 	bl	8000be8 <MCI_SetCurrentReferences>
  bool retVal = true;
 8002b58:	2001      	movs	r0, #1
    break;
 8002b5a:	e7c5      	b.n	8002ae8 <UI_SetReg+0xd8>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8002b5c:	6868      	ldr	r0, [r5, #4]
 8002b5e:	b221      	sxth	r1, r4
 8002b60:	f002 fd6a 	bl	8005638 <PID_SetKP>
  bool retVal = true;
 8002b64:	2001      	movs	r0, #1
    break;
 8002b66:	e7bf      	b.n	8002ae8 <UI_SetReg+0xd8>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8002b68:	6868      	ldr	r0, [r5, #4]
 8002b6a:	b221      	sxth	r1, r4
 8002b6c:	f002 fd66 	bl	800563c <PID_SetKI>
  bool retVal = true;
 8002b70:	2001      	movs	r0, #1
    break;
 8002b72:	e7b9      	b.n	8002ae8 <UI_SetReg+0xd8>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8002b74:	6868      	ldr	r0, [r5, #4]
 8002b76:	b221      	sxth	r1, r4
 8002b78:	f002 fd70 	bl	800565c <PID_SetKD>
  bool retVal = true;
 8002b7c:	2001      	movs	r0, #1
    break;
 8002b7e:	e7b3      	b.n	8002ae8 <UI_SetReg+0xd8>
      currComp = MCI_GetIqdref(pMCI);
 8002b80:	4630      	mov	r0, r6
 8002b82:	f7fe f8f7 	bl	8000d74 <MCI_GetIqdref>
 8002b86:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 8002b88:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002b8c:	4630      	mov	r0, r6
 8002b8e:	9901      	ldr	r1, [sp, #4]
 8002b90:	f7fe f82a 	bl	8000be8 <MCI_SetCurrentReferences>
  bool retVal = true;
 8002b94:	2001      	movs	r0, #1
    break;
 8002b96:	e7a7      	b.n	8002ae8 <UI_SetReg+0xd8>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8002b98:	68a8      	ldr	r0, [r5, #8]
 8002b9a:	b221      	sxth	r1, r4
 8002b9c:	f002 fd4c 	bl	8005638 <PID_SetKP>
  bool retVal = true;
 8002ba0:	2001      	movs	r0, #1
    break;
 8002ba2:	e7a1      	b.n	8002ae8 <UI_SetReg+0xd8>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8002ba4:	68a8      	ldr	r0, [r5, #8]
 8002ba6:	b221      	sxth	r1, r4
 8002ba8:	f002 fd48 	bl	800563c <PID_SetKI>
  bool retVal = true;
 8002bac:	2001      	movs	r0, #1
    break;
 8002bae:	e79b      	b.n	8002ae8 <UI_SetReg+0xd8>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 8002bb0:	68a8      	ldr	r0, [r5, #8]
 8002bb2:	b221      	sxth	r1, r4
 8002bb4:	f002 fd52 	bl	800565c <PID_SetKD>
  bool retVal = true;
 8002bb8:	2001      	movs	r0, #1
    break;
 8002bba:	e795      	b.n	8002ae8 <UI_SetReg+0xd8>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002bbc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bc2:	0f1a      	lsrs	r2, r3, #28
 8002bc4:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bc6:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bca:	d06d      	beq.n	8002ca8 <UI_SetReg+0x298>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bcc:	2b09      	cmp	r3, #9
 8002bce:	d1a4      	bne.n	8002b1a <UI_SetReg+0x10a>
        pSPD = pMCT->pSpeedSensorAux;
 8002bd0:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 8002bd2:	2e00      	cmp	r6, #0
 8002bd4:	d0a1      	beq.n	8002b1a <UI_SetReg+0x10a>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002bd6:	aa01      	add	r2, sp, #4
 8002bd8:	f10d 0102 	add.w	r1, sp, #2
 8002bdc:	4630      	mov	r0, r6
 8002bde:	f003 ffb3 	bl	8006b48 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hC2);
 8002be2:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002be6:	b221      	sxth	r1, r4
 8002be8:	4630      	mov	r0, r6
 8002bea:	f003 ffb5 	bl	8006b58 <STO_PLL_SetObserverGains>
    break;
 8002bee:	e794      	b.n	8002b1a <UI_SetReg+0x10a>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002bf0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bf6:	0f1a      	lsrs	r2, r3, #28
 8002bf8:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bfa:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bfe:	d04f      	beq.n	8002ca0 <UI_SetReg+0x290>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c00:	2b09      	cmp	r3, #9
 8002c02:	d18a      	bne.n	8002b1a <UI_SetReg+0x10a>
        pSPD = pMCT->pSpeedSensorAux;
 8002c04:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 8002c06:	2e00      	cmp	r6, #0
 8002c08:	d087      	beq.n	8002b1a <UI_SetReg+0x10a>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002c0a:	aa01      	add	r2, sp, #4
 8002c0c:	f10d 0102 	add.w	r1, sp, #2
 8002c10:	4630      	mov	r0, r6
 8002c12:	f003 ff99 	bl	8006b48 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,hC1,(int16_t)wValue);
 8002c16:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002c1a:	b222      	sxth	r2, r4
 8002c1c:	4630      	mov	r0, r6
 8002c1e:	f003 ff9b 	bl	8006b58 <STO_PLL_SetObserverGains>
    break;
 8002c22:	e77a      	b.n	8002b1a <UI_SetReg+0x10a>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002c24:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c2a:	0f1a      	lsrs	r2, r3, #28
 8002c2c:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c2e:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c32:	d03d      	beq.n	8002cb0 <UI_SetReg+0x2a0>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c34:	2b09      	cmp	r3, #9
 8002c36:	f47f af70 	bne.w	8002b1a <UI_SetReg+0x10a>
        pSPD = pMCT->pSpeedSensorAux;
 8002c3a:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 8002c3c:	2e00      	cmp	r6, #0
 8002c3e:	f43f af6c 	beq.w	8002b1a <UI_SetReg+0x10a>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002c42:	aa01      	add	r2, sp, #4
 8002c44:	f10d 0102 	add.w	r1, sp, #2
 8002c48:	4630      	mov	r0, r6
 8002c4a:	f003 ff89 	bl	8006b60 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,hPgain,(int16_t)wValue);
 8002c4e:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002c52:	b222      	sxth	r2, r4
 8002c54:	4630      	mov	r0, r6
 8002c56:	f003 ff91 	bl	8006b7c <STO_SetPLLGains>
    break;
 8002c5a:	e75e      	b.n	8002b1a <UI_SetReg+0x10a>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002c5c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c62:	0f1a      	lsrs	r2, r3, #28
 8002c64:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c66:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c6a:	d025      	beq.n	8002cb8 <UI_SetReg+0x2a8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c6c:	2b09      	cmp	r3, #9
 8002c6e:	f47f af54 	bne.w	8002b1a <UI_SetReg+0x10a>
        pSPD = pMCT->pSpeedSensorAux;
 8002c72:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 8002c74:	2e00      	cmp	r6, #0
 8002c76:	f43f af50 	beq.w	8002b1a <UI_SetReg+0x10a>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002c7a:	aa01      	add	r2, sp, #4
 8002c7c:	f10d 0102 	add.w	r1, sp, #2
 8002c80:	4630      	mov	r0, r6
 8002c82:	f003 ff6d 	bl	8006b60 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hIgain);
 8002c86:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002c8a:	b221      	sxth	r1, r4
 8002c8c:	4630      	mov	r0, r6
 8002c8e:	f003 ff75 	bl	8006b7c <STO_SetPLLGains>
    break;
 8002c92:	e742      	b.n	8002b1a <UI_SetReg+0x10a>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8002c94:	4630      	mov	r0, r6
 8002c96:	b221      	sxth	r1, r4
 8002c98:	f7fe f89a 	bl	8000dd0 <MCI_SetIdref>
  bool retVal = true;
 8002c9c:	2001      	movs	r0, #1
    break;
 8002c9e:	e723      	b.n	8002ae8 <UI_SetReg+0xd8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ca0:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002ca2:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ca4:	d1af      	bne.n	8002c06 <UI_SetReg+0x1f6>
 8002ca6:	e7ad      	b.n	8002c04 <UI_SetReg+0x1f4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ca8:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002caa:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002cac:	d191      	bne.n	8002bd2 <UI_SetReg+0x1c2>
 8002cae:	e78f      	b.n	8002bd0 <UI_SetReg+0x1c0>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002cb0:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002cb2:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002cb4:	d1c2      	bne.n	8002c3c <UI_SetReg+0x22c>
 8002cb6:	e7c0      	b.n	8002c3a <UI_SetReg+0x22a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002cb8:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002cba:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002cbc:	d1da      	bne.n	8002c74 <UI_SetReg+0x264>
 8002cbe:	e7d8      	b.n	8002c72 <UI_SetReg+0x262>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8002cc0:	4630      	mov	r0, r6
 8002cc2:	f7fe f881 	bl	8000dc8 <MCI_GetTeref>
 8002cc6:	4622      	mov	r2, r4
 8002cc8:	4601      	mov	r1, r0
 8002cca:	4630      	mov	r0, r6
 8002ccc:	f7fd ff82 	bl	8000bd4 <MCI_ExecTorqueRamp>
  bool retVal = true;
 8002cd0:	2001      	movs	r0, #1
 8002cd2:	e709      	b.n	8002ae8 <UI_SetReg+0xd8>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8002cd4:	4630      	mov	r0, r6
 8002cd6:	f7fe f81f 	bl	8000d18 <MCI_GetMecSpeedRefUnit>
 8002cda:	2200      	movs	r2, #0
 8002cdc:	4601      	mov	r1, r0
 8002cde:	4630      	mov	r0, r6
 8002ce0:	f7fd ff6c 	bl	8000bbc <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	e6ff      	b.n	8002ae8 <UI_SetReg+0xd8>
 8002ce8:	2aaaaaab 	.word	0x2aaaaaab

08002cec <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8002cec:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002cee:	6a03      	ldr	r3, [r0, #32]
 8002cf0:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8002cf4:	3901      	subs	r1, #1
 8002cf6:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]

  switch (bCmdID)
 8002cfa:	290d      	cmp	r1, #13
 8002cfc:	d808      	bhi.n	8002d10 <UI_ExecCmd+0x24>
 8002cfe:	e8df f001 	tbb	[pc, r1]
 8002d02:	1419      	.short	0x1419
 8002d04:	100e0e09 	.word	0x100e0e09
 8002d08:	0728231e 	.word	0x0728231e
 8002d0c:	14070707 	.word	0x14070707
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002d10:	2000      	movs	r0, #0
    retVal = false;
	}
    break;
  }
  return retVal;
}
 8002d12:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == RUN)
 8002d14:	4620      	mov	r0, r4
 8002d16:	f7fd ffc3 	bl	8000ca0 <MCI_GetSTMState>
 8002d1a:	2806      	cmp	r0, #6
 8002d1c:	d01e      	beq.n	8002d5c <UI_ExecCmd+0x70>
  bool retVal = true;
 8002d1e:	2001      	movs	r0, #1
}
 8002d20:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 8002d22:	4620      	mov	r0, r4
 8002d24:	f7fd ffbc 	bl	8000ca0 <MCI_GetSTMState>
 8002d28:	b120      	cbz	r0, 8002d34 <UI_ExecCmd+0x48>
        MCI_StopMotor(pMCI);
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	f7fd ff70 	bl	8000c10 <MCI_StopMotor>
  bool retVal = true;
 8002d30:	2001      	movs	r0, #1
}
 8002d32:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 8002d34:	4620      	mov	r0, r4
 8002d36:	f7fd ff61 	bl	8000bfc <MCI_StartMotor>
  bool retVal = true;
 8002d3a:	2001      	movs	r0, #1
}
 8002d3c:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 8002d3e:	4620      	mov	r0, r4
 8002d40:	f7fd ff6a 	bl	8000c18 <MCI_FaultAcknowledged>
  bool retVal = true;
 8002d44:	2001      	movs	r0, #1
}
 8002d46:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 8002d48:	4620      	mov	r0, r4
 8002d4a:	f7fd ff69 	bl	8000c20 <MCI_EncoderAlign>
  bool retVal = true;
 8002d4e:	2001      	movs	r0, #1
}
 8002d50:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 8002d52:	4620      	mov	r0, r4
 8002d54:	f7fe f846 	bl	8000de4 <MCI_Clear_Iqdref>
  bool retVal = true;
 8002d58:	2001      	movs	r0, #1
}
 8002d5a:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	f7fd ffcf 	bl	8000d00 <MCI_StopRamp>
  bool retVal = true;
 8002d62:	2001      	movs	r0, #1
}
 8002d64:	bd10      	pop	{r4, pc}
 8002d66:	bf00      	nop

08002d68 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8002d68:	b510      	push	{r4, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002d6a:	4b07      	ldr	r3, [pc, #28]	; (8002d88 <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002d6c:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8002d70:	6a00      	ldr	r0, [r0, #32]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002d72:	fb83 c301 	smull	ip, r3, r3, r1
 8002d76:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8002d7a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8002d7e:	b209      	sxth	r1, r1
 8002d80:	f7fd ff1c 	bl	8000bbc <MCI_ExecSpeedRamp>
  return true;
}
 8002d84:	2001      	movs	r0, #1
 8002d86:	bd10      	pop	{r4, pc}
 8002d88:	2aaaaaab 	.word	0x2aaaaaab

08002d8c <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8002d8c:	b510      	push	{r4, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002d8e:	6a03      	ldr	r3, [r0, #32]
 8002d90:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8002d94:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002d98:	f7fd ff1c 	bl	8000bd4 <MCI_ExecTorqueRamp>
  return true;
}
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	bd10      	pop	{r4, pc}

08002da0 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8002da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002da2:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8002da6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002da8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8002dac:	6944      	ldr	r4, [r0, #20]
  if (pRevupCtrl)
 8002dae:	b19c      	cbz	r4, 8002dd8 <UI_GetRevupData+0x38>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002db0:	4620      	mov	r0, r4
 8002db2:	461e      	mov	r6, r3
 8002db4:	4617      	mov	r7, r2
 8002db6:	460d      	mov	r5, r1
 8002db8:	f003 fc1c 	bl	80065f4 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002dbc:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002dbe:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002dc0:	4620      	mov	r0, r4
 8002dc2:	f003 fc1d 	bl	8006600 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002dc6:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002dc8:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002dca:	4620      	mov	r0, r4
 8002dcc:	f003 fc20 	bl	8006610 <RUC_GetPhaseFinalTorque>
 8002dd0:	9b06      	ldr	r3, [sp, #24]
 8002dd2:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 8002dd4:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 8002dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 8002dd8:	4620      	mov	r0, r4
}
 8002dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002ddc <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8002ddc:	b570      	push	{r4, r5, r6, lr}
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002dde:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8002de2:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8002de4:	b082      	sub	sp, #8
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002de6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
{
 8002dea:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002dee:	6940      	ldr	r0, [r0, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8002df0:	9001      	str	r0, [sp, #4]
{
 8002df2:	461d      	mov	r5, r3
 8002df4:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8002df6:	f003 fbeb 	bl	80065d0 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8002dfa:	9801      	ldr	r0, [sp, #4]
 8002dfc:	462a      	mov	r2, r5
 8002dfe:	4621      	mov	r1, r4
 8002e00:	f003 fbec 	bl	80065dc <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8002e04:	9801      	ldr	r0, [sp, #4]
 8002e06:	4632      	mov	r2, r6
 8002e08:	4621      	mov	r1, r4
 8002e0a:	f003 fbed 	bl	80065e8 <RUC_SetPhaseFinalTorque>
  return true;
}
 8002e0e:	2001      	movs	r0, #1
 8002e10:	b002      	add	sp, #8
 8002e12:	bd70      	pop	{r4, r5, r6, pc}

08002e14 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8002e14:	b410      	push	{r4}
 8002e16:	b083      	sub	sp, #12

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002e18:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8002e1c:	6a03      	ldr	r3, [r0, #32]
  qd_t currComp;
  currComp.q = hIqRef;
 8002e1e:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 8002e22:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 8002e26:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002e2a:	9901      	ldr	r1, [sp, #4]
}
 8002e2c:	b003      	add	sp, #12
 8002e2e:	f85d 4b04 	ldr.w	r4, [sp], #4
  MCI_SetCurrentReferences(pMCI,currComp);
 8002e32:	f7fd bed9 	b.w	8000be8 <MCI_SetCurrentReferences>
 8002e36:	bf00      	nop

08002e38 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 8002e38:	2000      	movs	r0, #0
 8002e3a:	4770      	bx	lr

08002e3c <UI_DACInit>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
__weak void UI_DACInit(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACInit)
 8002e3c:	6943      	ldr	r3, [r0, #20]
 8002e3e:	b103      	cbz	r3, 8002e42 <UI_DACInit+0x6>
  {
	  pHandle->pFct_DACInit(pHandle);
 8002e40:	4718      	bx	r3
  }
}
 8002e42:	4770      	bx	lr

08002e44 <UI_DACExec>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
void UI_DACExec(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACExec)
 8002e44:	6983      	ldr	r3, [r0, #24]
 8002e46:	b103      	cbz	r3, 8002e4a <UI_DACExec+0x6>
  {
    pHandle->pFct_DACExec(pHandle);
 8002e48:	4718      	bx	r3
  }
}
 8002e4a:	4770      	bx	lr

08002e4c <UI_SetDAC>:
  * @retval none.
  */
void UI_SetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                         MC_Protocol_REG_t bVariable)
{
  if (pHandle->pFctDACSetChannelConfig)
 8002e4c:	6843      	ldr	r3, [r0, #4]
 8002e4e:	b103      	cbz	r3, 8002e52 <UI_SetDAC+0x6>
  {
	  pHandle->pFctDACSetChannelConfig(pHandle, bChannel, bVariable);
 8002e50:	4718      	bx	r3
  }
}
 8002e52:	4770      	bx	lr

08002e54 <UI_GetDAC>:
  *         It must be one of the exported UI register (Example: MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t UI_GetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  MC_Protocol_REG_t retVal = MC_PROTOCOL_REG_UNDEFINED;
  if (pHandle->pFctDACGetChannelConfig)
 8002e54:	6883      	ldr	r3, [r0, #8]
 8002e56:	b103      	cbz	r3, 8002e5a <UI_GetDAC+0x6>
  {
    retVal = pHandle->pFctDACGetChannelConfig(pHandle, bChannel);
 8002e58:	4718      	bx	r3
  }
  return retVal;
}
 8002e5a:	2089      	movs	r0, #137	; 0x89
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop

08002e60 <UI_GetReg>:
{
 8002e60:	b570      	push	{r4, r5, r6, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002e62:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002e66:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8002e6a:	b090      	sub	sp, #64	; 0x40
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002e6c:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002e70:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
  if ( success != (bool *) 0 )
 8002e74:	2a00      	cmp	r2, #0
 8002e76:	f000 8089 	beq.w	8002f8c <UI_GetReg+0x12c>
    *success = true;
 8002e7a:	2401      	movs	r4, #1
 8002e7c:	7014      	strb	r4, [r2, #0]
  switch (bRegID)
 8002e7e:	2981      	cmp	r1, #129	; 0x81
 8002e80:	f200 829c 	bhi.w	80033bc <UI_GetReg+0x55c>
 8002e84:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002e88:	01e501e9 	.word	0x01e501e9
 8002e8c:	021b021f 	.word	0x021b021f
 8002e90:	01ec01f0 	.word	0x01ec01f0
 8002e94:	01890156 	.word	0x01890156
 8002e98:	026000ff 	.word	0x026000ff
 8002e9c:	0258025c 	.word	0x0258025c
 8002ea0:	025400fa 	.word	0x025400fa
 8002ea4:	02640268 	.word	0x02640268
 8002ea8:	022e023d 	.word	0x022e023d
 8002eac:	029a029a 	.word	0x029a029a
 8002eb0:	02740286 	.word	0x02740286
 8002eb4:	029a029a 	.word	0x029a029a
 8002eb8:	0250029a 	.word	0x0250029a
 8002ebc:	0270024c 	.word	0x0270024c
 8002ec0:	01e1026c 	.word	0x01e1026c
 8002ec4:	020801da 	.word	0x020801da
 8002ec8:	029a0203 	.word	0x029a0203
 8002ecc:	01f701fc 	.word	0x01f701fc
 8002ed0:	018d0192 	.word	0x018d0192
 8002ed4:	020801ad 	.word	0x020801ad
 8002ed8:	00ff0203 	.word	0x00ff0203
 8002edc:	015f00fa 	.word	0x015f00fa
 8002ee0:	01a8015a 	.word	0x01a8015a
 8002ee4:	029a0151 	.word	0x029a0151
 8002ee8:	0140029a 	.word	0x0140029a
 8002eec:	01750164 	.word	0x01750164
 8002ef0:	011c012e 	.word	0x011c012e
 8002ef4:	029a010a 	.word	0x029a010a
 8002ef8:	029a029a 	.word	0x029a029a
 8002efc:	029a029a 	.word	0x029a029a
 8002f00:	0104029a 	.word	0x0104029a
 8002f04:	020d0214 	.word	0x020d0214
 8002f08:	00fa0227 	.word	0x00fa0227
 8002f0c:	01b201c6 	.word	0x01b201c6
 8002f10:	029a029a 	.word	0x029a029a
 8002f14:	029a029a 	.word	0x029a029a
 8002f18:	029a029a 	.word	0x029a029a
 8002f1c:	029a029a 	.word	0x029a029a
 8002f20:	029a029a 	.word	0x029a029a
 8002f24:	029a029a 	.word	0x029a029a
 8002f28:	029a029a 	.word	0x029a029a
 8002f2c:	029a029a 	.word	0x029a029a
 8002f30:	029a029a 	.word	0x029a029a
 8002f34:	029a029a 	.word	0x029a029a
 8002f38:	029a029a 	.word	0x029a029a
 8002f3c:	019b029a 	.word	0x019b029a
 8002f40:	029a029a 	.word	0x029a029a
 8002f44:	029a029a 	.word	0x029a029a
 8002f48:	029a029a 	.word	0x029a029a
 8002f4c:	029a029a 	.word	0x029a029a
 8002f50:	029a029a 	.word	0x029a029a
 8002f54:	029a029a 	.word	0x029a029a
 8002f58:	029a029a 	.word	0x029a029a
 8002f5c:	029a029a 	.word	0x029a029a
 8002f60:	029a029a 	.word	0x029a029a
 8002f64:	02230197 	.word	0x02230197
 8002f68:	029a0298 	.word	0x029a0298
 8002f6c:	00f700f7 	.word	0x00f700f7
 8002f70:	029a029a 	.word	0x029a029a
 8002f74:	029a029a 	.word	0x029a029a
 8002f78:	029a029a 	.word	0x029a029a
 8002f7c:	029a029a 	.word	0x029a029a
 8002f80:	029a029a 	.word	0x029a029a
 8002f84:	029a029a 	.word	0x029a029a
 8002f88:	00f7029a 	.word	0x00f7029a
 8002f8c:	2970      	cmp	r1, #112	; 0x70
 8002f8e:	d872      	bhi.n	8003076 <UI_GetReg+0x216>
 8002f90:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002f94:	015f0163 	.word	0x015f0163
 8002f98:	01950199 	.word	0x01950199
 8002f9c:	0166016a 	.word	0x0166016a
 8002fa0:	010300d0 	.word	0x010300d0
 8002fa4:	01da0079 	.word	0x01da0079
 8002fa8:	01d201d6 	.word	0x01d201d6
 8002fac:	01ce0074 	.word	0x01ce0074
 8002fb0:	01de01e2 	.word	0x01de01e2
 8002fb4:	01a801b7 	.word	0x01a801b7
 8002fb8:	00710071 	.word	0x00710071
 8002fbc:	01ee0200 	.word	0x01ee0200
 8002fc0:	00710071 	.word	0x00710071
 8002fc4:	01ca0071 	.word	0x01ca0071
 8002fc8:	01ea01c6 	.word	0x01ea01c6
 8002fcc:	015b01e6 	.word	0x015b01e6
 8002fd0:	01820154 	.word	0x01820154
 8002fd4:	0071017d 	.word	0x0071017d
 8002fd8:	01710176 	.word	0x01710176
 8002fdc:	0107010c 	.word	0x0107010c
 8002fe0:	01820127 	.word	0x01820127
 8002fe4:	0079017d 	.word	0x0079017d
 8002fe8:	00d90074 	.word	0x00d90074
 8002fec:	012200d4 	.word	0x012200d4
 8002ff0:	007100cb 	.word	0x007100cb
 8002ff4:	00ba0071 	.word	0x00ba0071
 8002ff8:	00ef00de 	.word	0x00ef00de
 8002ffc:	009600a8 	.word	0x009600a8
 8003000:	00710084 	.word	0x00710084
 8003004:	00710071 	.word	0x00710071
 8003008:	00710071 	.word	0x00710071
 800300c:	007e0071 	.word	0x007e0071
 8003010:	0187018e 	.word	0x0187018e
 8003014:	007401a1 	.word	0x007401a1
 8003018:	012c0140 	.word	0x012c0140
 800301c:	00710071 	.word	0x00710071
 8003020:	00710071 	.word	0x00710071
 8003024:	00710071 	.word	0x00710071
 8003028:	00710071 	.word	0x00710071
 800302c:	00710071 	.word	0x00710071
 8003030:	00710071 	.word	0x00710071
 8003034:	00710071 	.word	0x00710071
 8003038:	00710071 	.word	0x00710071
 800303c:	00710071 	.word	0x00710071
 8003040:	00710071 	.word	0x00710071
 8003044:	00710071 	.word	0x00710071
 8003048:	01150071 	.word	0x01150071
 800304c:	00710071 	.word	0x00710071
 8003050:	00710071 	.word	0x00710071
 8003054:	00710071 	.word	0x00710071
 8003058:	00710071 	.word	0x00710071
 800305c:	00710071 	.word	0x00710071
 8003060:	00710071 	.word	0x00710071
 8003064:	00710071 	.word	0x00710071
 8003068:	00710071 	.word	0x00710071
 800306c:	00710071 	.word	0x00710071
 8003070:	019d0111 	.word	0x019d0111
 8003074:	0212      	.short	0x0212
  int32_t bRetVal = 0;
 8003076:	2000      	movs	r0, #0
}
 8003078:	b010      	add	sp, #64	; 0x40
 800307a:	bd70      	pop	{r4, r5, r6, pc}
      bRetVal = MCI_GetIqdref(pMCI).d;
 800307c:	4630      	mov	r0, r6
 800307e:	f7fd fe79 	bl	8000d74 <MCI_GetIqdref>
 8003082:	1400      	asrs	r0, r0, #16
    break;
 8003084:	e7f8      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = MCI_GetIqdref(pMCI).q;
 8003086:	4630      	mov	r0, r6
 8003088:	f7fd fe74 	bl	8000d74 <MCI_GetIqdref>
 800308c:	b200      	sxth	r0, r0
    break;
 800308e:	e7f3      	b.n	8003078 <UI_GetReg+0x218>
      if (pHandle->pFctDACGetUserChannelValue)
 8003090:	6903      	ldr	r3, [r0, #16]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0ef      	beq.n	8003076 <UI_GetReg+0x216>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 0);
 8003096:	2100      	movs	r1, #0
 8003098:	4798      	blx	r3
 800309a:	e7ed      	b.n	8003078 <UI_GetReg+0x218>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800309c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800309e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80030a2:	0f1a      	lsrs	r2, r3, #28
 80030a4:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80030a6:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80030aa:	f000 81a7 	beq.w	80033fc <UI_GetReg+0x59c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80030ae:	2b09      	cmp	r3, #9
 80030b0:	d1e1      	bne.n	8003076 <UI_GetReg+0x216>
        pSPD = pMCT->pSpeedSensorAux;
 80030b2:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80030b4:	2800      	cmp	r0, #0
 80030b6:	d0de      	beq.n	8003076 <UI_GetReg+0x216>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).beta;
 80030b8:	f003 fd26 	bl	8006b08 <STO_PLL_GetEstimatedBemf>
 80030bc:	1400      	asrs	r0, r0, #16
 80030be:	e7db      	b.n	8003078 <UI_GetReg+0x218>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80030c0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80030c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80030c6:	0f1a      	lsrs	r2, r3, #28
 80030c8:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80030ca:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80030ce:	f000 8181 	beq.w	80033d4 <UI_GetReg+0x574>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80030d2:	2b09      	cmp	r3, #9
 80030d4:	d1cf      	bne.n	8003076 <UI_GetReg+0x216>
        pSPD =  pMCT->pSpeedSensorAux;
 80030d6:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80030d8:	2800      	cmp	r0, #0
 80030da:	d0cc      	beq.n	8003076 <UI_GetReg+0x216>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).alpha;
 80030dc:	f003 fd14 	bl	8006b08 <STO_PLL_GetEstimatedBemf>
 80030e0:	b200      	sxth	r0, r0
 80030e2:	e7c9      	b.n	8003078 <UI_GetReg+0x218>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80030e4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80030e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80030ea:	0f1a      	lsrs	r2, r3, #28
 80030ec:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80030ee:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80030f2:	f000 81af 	beq.w	8003454 <UI_GetReg+0x5f4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80030f6:	2b09      	cmp	r3, #9
 80030f8:	d1bd      	bne.n	8003076 <UI_GetReg+0x216>
        pSPD = pMCT->pSpeedSensorAux;
 80030fa:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80030fc:	2800      	cmp	r0, #0
 80030fe:	d0ba      	beq.n	8003076 <UI_GetReg+0x216>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).beta;
 8003100:	f003 fd0e 	bl	8006b20 <STO_PLL_GetEstimatedCurrent>
 8003104:	1400      	asrs	r0, r0, #16
 8003106:	e7b7      	b.n	8003078 <UI_GetReg+0x218>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003108:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800310a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800310e:	0f1a      	lsrs	r2, r3, #28
 8003110:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003112:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003116:	f000 816c 	beq.w	80033f2 <UI_GetReg+0x592>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800311a:	2b09      	cmp	r3, #9
 800311c:	d1ab      	bne.n	8003076 <UI_GetReg+0x216>
        pSPD = pMCT->pSpeedSensorAux;
 800311e:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003120:	2800      	cmp	r0, #0
 8003122:	d0a8      	beq.n	8003076 <UI_GetReg+0x216>
        bRetVal = SPD_GetElAngle(pSPD);
 8003124:	f002 fdb8 	bl	8005c98 <SPD_GetElAngle>
 8003128:	e7a6      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 800312a:	4630      	mov	r0, r6
 800312c:	f7fd fe3e 	bl	8000dac <MCI_GetValphabeta>
 8003130:	1400      	asrs	r0, r0, #16
    break;
 8003132:	e7a1      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8003134:	6828      	ldr	r0, [r5, #0]
 8003136:	f002 fa87 	bl	8005648 <PID_GetKI>
    break;
 800313a:	e79d      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = MCI_GetVqd(pMCI).d;
 800313c:	4630      	mov	r0, r6
 800313e:	f7fd fe27 	bl	8000d90 <MCI_GetVqd>
 8003142:	1400      	asrs	r0, r0, #16
    break;
 8003144:	e798      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = MCI_GetVqd(pMCI).q;
 8003146:	4630      	mov	r0, r6
 8003148:	f7fd fe22 	bl	8000d90 <MCI_GetVqd>
 800314c:	b200      	sxth	r0, r0
    break;
 800314e:	e793      	b.n	8003078 <UI_GetReg+0x218>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003150:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003156:	0f1a      	lsrs	r2, r3, #28
 8003158:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800315a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800315e:	f000 8134 	beq.w	80033ca <UI_GetReg+0x56a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003162:	2b09      	cmp	r3, #9
 8003164:	d187      	bne.n	8003076 <UI_GetReg+0x216>
        pSPD = pMCT->pSpeedSensorAux;
 8003166:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003168:	2800      	cmp	r0, #0
 800316a:	d084      	beq.n	8003076 <UI_GetReg+0x216>
        bRetVal = SPD_GetS16Speed(pSPD);
 800316c:	f002 fdcc 	bl	8005d08 <SPD_GetS16Speed>
 8003170:	e782      	b.n	8003078 <UI_GetReg+0x218>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003172:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003178:	0f1a      	lsrs	r2, r3, #28
 800317a:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800317c:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003180:	f000 8132 	beq.w	80033e8 <UI_GetReg+0x588>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003184:	2b09      	cmp	r3, #9
 8003186:	f47f af76 	bne.w	8003076 <UI_GetReg+0x216>
        pSPD = pMCT->pSpeedSensorAux;
 800318a:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 800318c:	2800      	cmp	r0, #0
 800318e:	f43f af72 	beq.w	8003076 <UI_GetReg+0x216>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).alpha;
 8003192:	f003 fcc5 	bl	8006b20 <STO_PLL_GetEstimatedCurrent>
 8003196:	b200      	sxth	r0, r0
 8003198:	e76e      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 800319a:	6828      	ldr	r0, [r5, #0]
 800319c:	f002 fa60 	bl	8005660 <PID_GetKD>
    break;
 80031a0:	e76a      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 80031a2:	4630      	mov	r0, r6
 80031a4:	f7fd fdca 	bl	8000d3c <MCI_GetIalphabeta>
 80031a8:	b200      	sxth	r0, r0
    break;
 80031aa:	e765      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = MCI_GetIab(pMCI).b;
 80031ac:	4630      	mov	r0, r6
 80031ae:	f7fd fdb7 	bl	8000d20 <MCI_GetIab>
 80031b2:	1400      	asrs	r0, r0, #16
    break;
 80031b4:	e760      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 80031b6:	6828      	ldr	r0, [r5, #0]
 80031b8:	f002 fa4c 	bl	8005654 <PID_GetKPDivisor>
    break;
 80031bc:	e75c      	b.n	8003078 <UI_GetReg+0x218>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 80031be:	4630      	mov	r0, r6
 80031c0:	f7fd fd72 	bl	8000ca8 <MCI_GetControlMode>
 80031c4:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80031c6:	4630      	mov	r0, r6
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 80031c8:	f000 811d 	beq.w	8003406 <UI_GetReg+0x5a6>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 80031cc:	f7fd fda4 	bl	8000d18 <MCI_GetMecSpeedRefUnit>
 80031d0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80031d4:	0040      	lsls	r0, r0, #1
 80031d6:	e74f      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 80031d8:	4630      	mov	r0, r6
 80031da:	f7fd fde7 	bl	8000dac <MCI_GetValphabeta>
 80031de:	b200      	sxth	r0, r0
    break;
 80031e0:	e74a      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 80031e2:	4630      	mov	r0, r6
 80031e4:	f7fd fdaa 	bl	8000d3c <MCI_GetIalphabeta>
 80031e8:	1400      	asrs	r0, r0, #16
    break;
 80031ea:	e745      	b.n	8003078 <UI_GetReg+0x218>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80031ec:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80031ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80031f2:	0f1a      	lsrs	r2, r3, #28
 80031f4:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80031f6:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80031fa:	f000 80f0 	beq.w	80033de <UI_GetReg+0x57e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80031fe:	2b09      	cmp	r3, #9
 8003200:	f47f af39 	bne.w	8003076 <UI_GetReg+0x216>
        pSPD = pMCT->pSpeedSensorAux;
 8003204:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003206:	2800      	cmp	r0, #0
 8003208:	f43f af35 	beq.w	8003076 <UI_GetReg+0x216>
        bRetVal = STO_PLL_GetObservedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 800320c:	f003 fcd2 	bl	8006bb4 <STO_PLL_GetObservedBemfLevel>
 8003210:	1400      	asrs	r0, r0, #16
 8003212:	e731      	b.n	8003078 <UI_GetReg+0x218>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003214:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800321a:	0f1a      	lsrs	r2, r3, #28
 800321c:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800321e:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003222:	f000 80f6 	beq.w	8003412 <UI_GetReg+0x5b2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003226:	2b09      	cmp	r3, #9
 8003228:	f47f af25 	bne.w	8003076 <UI_GetReg+0x216>
        pSPD = pMCT->pSpeedSensorAux;
 800322c:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 800322e:	2800      	cmp	r0, #0
 8003230:	f43f af21 	beq.w	8003076 <UI_GetReg+0x216>
        bRetVal = STO_PLL_GetEstimatedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8003234:	f003 fcba 	bl	8006bac <STO_PLL_GetEstimatedBemfLevel>
 8003238:	1400      	asrs	r0, r0, #16
 800323a:	e71d      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 800323c:	4630      	mov	r0, r6
 800323e:	f7fd fd63 	bl	8000d08 <MCI_GetAvrgMecSpeedUnit>
 8003242:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003246:	0040      	lsls	r0, r0, #1
    break;
 8003248:	e716      	b.n	8003078 <UI_GetReg+0x218>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH1);
 800324a:	2101      	movs	r1, #1
 800324c:	f7ff fe02 	bl	8002e54 <UI_GetDAC>
    break;
 8003250:	e712      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8003252:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8003254:	f002 feda 	bl	800600c <STM_GetFaultState>
	break;
 8003258:	e70e      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 800325a:	f7ff fbd5 	bl	8002a08 <UI_GetSelectedMC>
    break;
 800325e:	e70b      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8003260:	6828      	ldr	r0, [r5, #0]
 8003262:	f002 f9ed 	bl	8005640 <PID_GetKP>
    break;
 8003266:	e707      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8003268:	4630      	mov	r0, r6
 800326a:	f7fd fd55 	bl	8000d18 <MCI_GetMecSpeedRefUnit>
 800326e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003272:	0040      	lsls	r0, r0, #1
    break;
 8003274:	e700      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = MCI_GetIab(pMCI).a;
 8003276:	4630      	mov	r0, r6
 8003278:	f7fd fd52 	bl	8000d20 <MCI_GetIab>
 800327c:	b200      	sxth	r0, r0
    break;
 800327e:	e6fb      	b.n	8003078 <UI_GetReg+0x218>
      if (pMCT->pRevupCtrl)
 8003280:	6968      	ldr	r0, [r5, #20]
 8003282:	2800      	cmp	r0, #0
 8003284:	f43f aef7 	beq.w	8003076 <UI_GetReg+0x216>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8003288:	f003 f9ca 	bl	8006620 <RUC_GetNumberOfPhases>
 800328c:	e6f4      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = MCI_GetIqd(pMCI).d;
 800328e:	4630      	mov	r0, r6
 8003290:	f7fd fd62 	bl	8000d58 <MCI_GetIqd>
 8003294:	1400      	asrs	r0, r0, #16
    break;
 8003296:	e6ef      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = MCI_GetIqd(pMCI).q;
 8003298:	4630      	mov	r0, r6
 800329a:	f7fd fd5d 	bl	8000d58 <MCI_GetIqd>
 800329e:	b200      	sxth	r0, r0
    break;
 80032a0:	e6ea      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 80032a2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80032a4:	f002 fdf0 	bl	8005e88 <STC_GetMaxAppPositiveMecSpeedUnit>
 80032a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80032ac:	0040      	lsls	r0, r0, #1
    break;
 80032ae:	e6e3      	b.n	8003078 <UI_GetReg+0x218>
      if (pHandle->pFctDACGetUserChannelValue)
 80032b0:	6903      	ldr	r3, [r0, #16]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f43f aedf 	beq.w	8003076 <UI_GetReg+0x216>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 1);
 80032b8:	2101      	movs	r1, #1
 80032ba:	4798      	blx	r3
 80032bc:	e6dc      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 80032be:	4630      	mov	r0, r6
 80032c0:	f7fd fcf2 	bl	8000ca8 <MCI_GetControlMode>
    break;
 80032c4:	e6d8      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 80032c6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80032c8:	f002 fe92 	bl	8005ff0 <STM_GetState>
	break;
 80032cc:	e6d4      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 80032ce:	6828      	ldr	r0, [r5, #0]
 80032d0:	f002 f9c2 	bl	8005658 <PID_GetKIDivisor>
    break;
 80032d4:	e6d0      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 80032d6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80032d8:	f002 fdd8 	bl	8005e8c <STC_GetMinAppNegativeMecSpeedUnit>
 80032dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80032e0:	0040      	lsls	r0, r0, #1
    break;
 80032e2:	e6c9      	b.n	8003078 <UI_GetReg+0x218>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80032e4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80032e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80032ea:	0f1a      	lsrs	r2, r3, #28
 80032ec:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80032ee:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80032f2:	f000 8093 	beq.w	800341c <UI_GetReg+0x5bc>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80032f6:	2b09      	cmp	r3, #9
 80032f8:	f000 8093 	beq.w	8003422 <UI_GetReg+0x5c2>
      bRetVal = (int32_t)hIgain;
 80032fc:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
    break;
 8003300:	e6ba      	b.n	8003078 <UI_GetReg+0x218>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003302:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003308:	0f1a      	lsrs	r2, r3, #28
 800330a:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800330c:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003310:	f000 8090 	beq.w	8003434 <UI_GetReg+0x5d4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003314:	2b09      	cmp	r3, #9
 8003316:	f000 8090 	beq.w	800343a <UI_GetReg+0x5da>
      bRetVal = (int32_t)hPgain;
 800331a:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
    break;
 800331e:	e6ab      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8003320:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8003322:	f002 f96b 	bl	80055fc <NTC_GetAvTemp_C>
    break;
 8003326:	e6a7      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8003328:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800332a:	f001 fe4d 	bl	8004fc8 <VBS_GetAvBusVoltage_V>
    break;
 800332e:	e6a3      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 8003330:	68a8      	ldr	r0, [r5, #8]
 8003332:	f002 f985 	bl	8005640 <PID_GetKP>
    break;
 8003336:	e69f      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8003338:	6868      	ldr	r0, [r5, #4]
 800333a:	f002 f991 	bl	8005660 <PID_GetKD>
    break;
 800333e:	e69b      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8003340:	6868      	ldr	r0, [r5, #4]
 8003342:	f002 f981 	bl	8005648 <PID_GetKI>
    break;
 8003346:	e697      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 8003348:	6868      	ldr	r0, [r5, #4]
 800334a:	f002 f979 	bl	8005640 <PID_GetKP>
    break;
 800334e:	e693      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8003350:	68a8      	ldr	r0, [r5, #8]
 8003352:	f002 f985 	bl	8005660 <PID_GetKD>
    break;
 8003356:	e68f      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 8003358:	68a8      	ldr	r0, [r5, #8]
 800335a:	f002 f975 	bl	8005648 <PID_GetKI>
    break;
 800335e:	e68b      	b.n	8003078 <UI_GetReg+0x218>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH0);
 8003360:	2100      	movs	r1, #0
 8003362:	f7ff fd77 	bl	8002e54 <UI_GetDAC>
    break;
 8003366:	e687      	b.n	8003078 <UI_GetReg+0x218>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 8003368:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800336a:	f002 f903 	bl	8005574 <MPM_GetAvrgElMotorPowerW>
    break;
 800336e:	e683      	b.n	8003078 <UI_GetReg+0x218>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003370:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003376:	0f1a      	lsrs	r2, r3, #28
 8003378:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800337a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800337e:	d065      	beq.n	800344c <UI_GetReg+0x5ec>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003380:	2b09      	cmp	r3, #9
 8003382:	d1ca      	bne.n	800331a <UI_GetReg+0x4ba>
        pSPD = pMCT->pSpeedSensorAux;
 8003384:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003386:	2800      	cmp	r0, #0
 8003388:	d0c7      	beq.n	800331a <UI_GetReg+0x4ba>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 800338a:	aa0f      	add	r2, sp, #60	; 0x3c
 800338c:	a90e      	add	r1, sp, #56	; 0x38
 800338e:	f003 fbe7 	bl	8006b60 <STO_GetPLLGains>
 8003392:	e7c2      	b.n	800331a <UI_GetReg+0x4ba>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003394:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800339a:	0f1a      	lsrs	r2, r3, #28
 800339c:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800339e:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033a2:	d00e      	beq.n	80033c2 <UI_GetReg+0x562>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033a4:	2b09      	cmp	r3, #9
 80033a6:	d1a9      	bne.n	80032fc <UI_GetReg+0x49c>
        pSPD = pMCT->pSpeedSensorAux;
 80033a8:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80033aa:	2800      	cmp	r0, #0
 80033ac:	d0a6      	beq.n	80032fc <UI_GetReg+0x49c>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 80033ae:	aa0f      	add	r2, sp, #60	; 0x3c
 80033b0:	a90e      	add	r1, sp, #56	; 0x38
 80033b2:	f003 fbd5 	bl	8006b60 <STO_GetPLLGains>
 80033b6:	e7a1      	b.n	80032fc <UI_GetReg+0x49c>
      bRetVal = (int32_t)(MC_UID);
 80033b8:	4829      	ldr	r0, [pc, #164]	; (8003460 <UI_GetReg+0x600>)
 80033ba:	e65d      	b.n	8003078 <UI_GetReg+0x218>
        *success = false;
 80033bc:	2000      	movs	r0, #0
 80033be:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 80033c0:	e65a      	b.n	8003078 <UI_GetReg+0x218>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033c2:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80033c4:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033c6:	d1f0      	bne.n	80033aa <UI_GetReg+0x54a>
 80033c8:	e7ee      	b.n	80033a8 <UI_GetReg+0x548>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033ca:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80033cc:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033ce:	f47f aecb 	bne.w	8003168 <UI_GetReg+0x308>
 80033d2:	e6c8      	b.n	8003166 <UI_GetReg+0x306>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033d4:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80033d6:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033d8:	f47f ae7e 	bne.w	80030d8 <UI_GetReg+0x278>
 80033dc:	e67b      	b.n	80030d6 <UI_GetReg+0x276>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033de:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80033e0:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033e2:	f47f af10 	bne.w	8003206 <UI_GetReg+0x3a6>
 80033e6:	e70d      	b.n	8003204 <UI_GetReg+0x3a4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033e8:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80033ea:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033ec:	f47f aece 	bne.w	800318c <UI_GetReg+0x32c>
 80033f0:	e6cb      	b.n	800318a <UI_GetReg+0x32a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033f2:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80033f4:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033f6:	f47f ae93 	bne.w	8003120 <UI_GetReg+0x2c0>
 80033fa:	e690      	b.n	800311e <UI_GetReg+0x2be>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033fc:	2b09      	cmp	r3, #9
       pSPD = pMCT->pSpeedSensorMain;
 80033fe:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003400:	f47f ae58 	bne.w	80030b4 <UI_GetReg+0x254>
 8003404:	e655      	b.n	80030b2 <UI_GetReg+0x252>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8003406:	f7fd fc73 	bl	8000cf0 <MCI_GetLastRampFinalSpeed>
 800340a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800340e:	0040      	lsls	r0, r0, #1
 8003410:	e632      	b.n	8003078 <UI_GetReg+0x218>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003412:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003414:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003416:	f47f af0a 	bne.w	800322e <UI_GetReg+0x3ce>
 800341a:	e707      	b.n	800322c <UI_GetReg+0x3cc>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800341c:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 800341e:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003420:	d100      	bne.n	8003424 <UI_GetReg+0x5c4>
        pSPD = pMCT->pSpeedSensorAux;
 8003422:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003424:	2800      	cmp	r0, #0
 8003426:	f43f af69 	beq.w	80032fc <UI_GetReg+0x49c>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 800342a:	aa0f      	add	r2, sp, #60	; 0x3c
 800342c:	a90e      	add	r1, sp, #56	; 0x38
 800342e:	f003 fb8b 	bl	8006b48 <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hC2;
 8003432:	e763      	b.n	80032fc <UI_GetReg+0x49c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003434:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003436:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003438:	d100      	bne.n	800343c <UI_GetReg+0x5dc>
        pSPD = pMCT->pSpeedSensorAux;
 800343a:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 800343c:	2800      	cmp	r0, #0
 800343e:	f43f af6c 	beq.w	800331a <UI_GetReg+0x4ba>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8003442:	aa0f      	add	r2, sp, #60	; 0x3c
 8003444:	a90e      	add	r1, sp, #56	; 0x38
 8003446:	f003 fb7f 	bl	8006b48 <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hC1;
 800344a:	e766      	b.n	800331a <UI_GetReg+0x4ba>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800344c:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 800344e:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003450:	d199      	bne.n	8003386 <UI_GetReg+0x526>
 8003452:	e797      	b.n	8003384 <UI_GetReg+0x524>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003454:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003456:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003458:	f47f ae50 	bne.w	80030fc <UI_GetReg+0x29c>
 800345c:	e64d      	b.n	80030fa <UI_GetReg+0x29a>
 800345e:	bf00      	nop
 8003460:	34a6847a 	.word	0x34a6847a

08003464 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003464:	4b05      	ldr	r3, [pc, #20]	; (800347c <SystemInit+0x18>)
 8003466:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800346a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800346e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003476:	6099      	str	r1, [r3, #8]
#endif
}
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	e000ed00 	.word	0xe000ed00

08003480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003480:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003482:	4a0e      	ldr	r2, [pc, #56]	; (80034bc <HAL_InitTick+0x3c>)
 8003484:	4b0e      	ldr	r3, [pc, #56]	; (80034c0 <HAL_InitTick+0x40>)
 8003486:	7812      	ldrb	r2, [r2, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
{
 800348a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800348c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003490:	fbb0 f0f2 	udiv	r0, r0, r2
 8003494:	fbb3 f0f0 	udiv	r0, r3, r0
 8003498:	f000 fb02 	bl	8003aa0 <HAL_SYSTICK_Config>
 800349c:	b908      	cbnz	r0, 80034a2 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800349e:	2d0f      	cmp	r5, #15
 80034a0:	d901      	bls.n	80034a6 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80034a2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80034a4:	bd38      	pop	{r3, r4, r5, pc}
 80034a6:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034a8:	4602      	mov	r2, r0
 80034aa:	4629      	mov	r1, r5
 80034ac:	f04f 30ff 	mov.w	r0, #4294967295
 80034b0:	f000 fab0 	bl	8003a14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034b4:	4b03      	ldr	r3, [pc, #12]	; (80034c4 <HAL_InitTick+0x44>)
 80034b6:	4620      	mov	r0, r4
 80034b8:	601d      	str	r5, [r3, #0]
}
 80034ba:	bd38      	pop	{r3, r4, r5, pc}
 80034bc:	200006fc 	.word	0x200006fc
 80034c0:	200006f8 	.word	0x200006f8
 80034c4:	20000700 	.word	0x20000700

080034c8 <HAL_Init>:
{
 80034c8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034ca:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <HAL_Init+0x30>)
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034da:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034e2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034e4:	2003      	movs	r0, #3
 80034e6:	f000 fa81 	bl	80039ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80034ea:	2004      	movs	r0, #4
 80034ec:	f7ff ffc8 	bl	8003480 <HAL_InitTick>
  HAL_MspInit();
 80034f0:	f7fe ff18 	bl	8002324 <HAL_MspInit>
}
 80034f4:	2000      	movs	r0, #0
 80034f6:	bd08      	pop	{r3, pc}
 80034f8:	40023c00 	.word	0x40023c00

080034fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80034fc:	4a03      	ldr	r2, [pc, #12]	; (800350c <HAL_IncTick+0x10>)
 80034fe:	4b04      	ldr	r3, [pc, #16]	; (8003510 <HAL_IncTick+0x14>)
 8003500:	6811      	ldr	r1, [r2, #0]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	440b      	add	r3, r1
 8003506:	6013      	str	r3, [r2, #0]
}
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	20000b08 	.word	0x20000b08
 8003510:	200006fc 	.word	0x200006fc

08003514 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003514:	4b01      	ldr	r3, [pc, #4]	; (800351c <HAL_GetTick+0x8>)
 8003516:	6818      	ldr	r0, [r3, #0]
}
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	20000b08 	.word	0x20000b08

08003520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003520:	b538      	push	{r3, r4, r5, lr}
 8003522:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003524:	f7ff fff6 	bl	8003514 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003528:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800352a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800352c:	d002      	beq.n	8003534 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800352e:	4b04      	ldr	r3, [pc, #16]	; (8003540 <HAL_Delay+0x20>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003534:	f7ff ffee 	bl	8003514 <HAL_GetTick>
 8003538:	1b43      	subs	r3, r0, r5
 800353a:	42a3      	cmp	r3, r4
 800353c:	d3fa      	bcc.n	8003534 <HAL_Delay+0x14>
  {
  }
}
 800353e:	bd38      	pop	{r3, r4, r5, pc}
 8003540:	200006fc 	.word	0x200006fc

08003544 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003544:	2800      	cmp	r0, #0
 8003546:	f000 80a0 	beq.w	800368a <HAL_ADC_Init+0x146>
{
 800354a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800354c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800354e:	4604      	mov	r4, r0
 8003550:	b13d      	cbz	r5, 8003562 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003552:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003554:	06db      	lsls	r3, r3, #27
 8003556:	d50c      	bpl.n	8003572 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003558:	2300      	movs	r3, #0
 800355a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 800355e:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8003560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8003562:	f7fe fefd 	bl	8002360 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003566:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003568:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 800356a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800356e:	06db      	lsls	r3, r3, #27
 8003570:	d4f2      	bmi.n	8003558 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8003572:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003574:	4948      	ldr	r1, [pc, #288]	; (8003698 <HAL_ADC_Init+0x154>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003576:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003578:	4d48      	ldr	r5, [pc, #288]	; (800369c <HAL_ADC_Init+0x158>)
    ADC_STATE_CLR_SET(hadc->State,
 800357a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800357e:	f022 0202 	bic.w	r2, r2, #2
 8003582:	f042 0202 	orr.w	r2, r2, #2
 8003586:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003588:	684a      	ldr	r2, [r1, #4]
 800358a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800358e:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003590:	684a      	ldr	r2, [r1, #4]
 8003592:	6860      	ldr	r0, [r4, #4]
 8003594:	4302      	orrs	r2, r0
 8003596:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003598:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800359a:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800359c:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800359e:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035a0:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 80035a4:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80035ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035ae:	6858      	ldr	r0, [r3, #4]
 80035b0:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 80035b4:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035b6:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035ba:	4339      	orrs	r1, r7
 80035bc:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035be:	6899      	ldr	r1, [r3, #8]
 80035c0:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80035c4:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035c6:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035c8:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035ca:	ea42 0206 	orr.w	r2, r2, r6
 80035ce:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035d0:	d052      	beq.n	8003678 <HAL_ADC_Init+0x134>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035d2:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035d4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035d6:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80035da:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	4310      	orrs	r0, r2
 80035e0:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035e2:	6899      	ldr	r1, [r3, #8]
 80035e4:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 80035e8:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	432a      	orrs	r2, r5
 80035ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	f022 0202 	bic.w	r2, r2, #2
 80035f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	7e21      	ldrb	r1, [r4, #24]
 80035fc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8003600:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003602:	f894 2020 	ldrb.w	r2, [r4, #32]
 8003606:	2a00      	cmp	r2, #0
 8003608:	d041      	beq.n	800368e <HAL_ADC_Init+0x14a>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800360a:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800360c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800360e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003612:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800361a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	3901      	subs	r1, #1
 8003620:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003624:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003628:	69e0      	ldr	r0, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800362a:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800362c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003630:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003632:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003634:	3801      	subs	r0, #1
 8003636:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
 800363a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800363c:	6899      	ldr	r1, [r3, #8]
 800363e:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8003642:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003644:	6899      	ldr	r1, [r3, #8]
 8003646:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800364a:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 800364e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003650:	6899      	ldr	r1, [r3, #8]
 8003652:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003656:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003658:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800365a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800365c:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8003660:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003662:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8003664:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003666:	f023 0303 	bic.w	r3, r3, #3
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8003670:	2300      	movs	r3, #0
 8003672:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800367e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003686:	609a      	str	r2, [r3, #8]
 8003688:	e7b2      	b.n	80035f0 <HAL_ADC_Init+0xac>
    return HAL_ERROR;
 800368a:	2001      	movs	r0, #1
}
 800368c:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003694:	605a      	str	r2, [r3, #4]
 8003696:	e7c6      	b.n	8003626 <HAL_ADC_Init+0xe2>
 8003698:	40012300 	.word	0x40012300
 800369c:	0f000001 	.word	0x0f000001

080036a0 <HAL_ADC_ConfigChannel>:
{
 80036a0:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 80036a2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80036a6:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80036a8:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80036aa:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 80036ac:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80036ae:	f000 8097 	beq.w	80037e0 <HAL_ADC_ConfigChannel+0x140>
 80036b2:	2301      	movs	r3, #1
 80036b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80036b8:	680d      	ldr	r5, [r1, #0]
 80036ba:	2d09      	cmp	r5, #9
 80036bc:	d829      	bhi.n	8003712 <HAL_ADC_ConfigChannel+0x72>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80036be:	6804      	ldr	r4, [r0, #0]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80036c0:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80036c2:	6922      	ldr	r2, [r4, #16]
 80036c4:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80036c8:	2607      	movs	r6, #7
 80036ca:	40be      	lsls	r6, r7
 80036cc:	ea22 0206 	bic.w	r2, r2, r6
 80036d0:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80036d2:	6922      	ldr	r2, [r4, #16]
 80036d4:	40bb      	lsls	r3, r7
 80036d6:	4313      	orrs	r3, r2
 80036d8:	6123      	str	r3, [r4, #16]
  if (sConfig->Rank < 7U)
 80036da:	684b      	ldr	r3, [r1, #4]
 80036dc:	2b06      	cmp	r3, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80036de:	462e      	mov	r6, r5
  if (sConfig->Rank < 7U)
 80036e0:	d82c      	bhi.n	800373c <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80036e6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80036e8:	3b05      	subs	r3, #5
 80036ea:	211f      	movs	r1, #31
 80036ec:	4099      	lsls	r1, r3
 80036ee:	ea22 0201 	bic.w	r2, r2, r1
 80036f2:	6362      	str	r2, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80036f4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80036f6:	fa06 f303 	lsl.w	r3, r6, r3
 80036fa:	4313      	orrs	r3, r2
 80036fc:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036fe:	4b40      	ldr	r3, [pc, #256]	; (8003800 <HAL_ADC_ConfigChannel+0x160>)
 8003700:	429c      	cmp	r4, r3
 8003702:	d02f      	beq.n	8003764 <HAL_ADC_ConfigChannel+0xc4>
  __HAL_UNLOCK(hadc);
 8003704:	2300      	movs	r3, #0
 8003706:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800370a:	4618      	mov	r0, r3
}
 800370c:	b002      	add	sp, #8
 800370e:	bcf0      	pop	{r4, r5, r6, r7}
 8003710:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003712:	6804      	ldr	r4, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003714:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003716:	68e7      	ldr	r7, [r4, #12]
 8003718:	b2ae      	uxth	r6, r5
 800371a:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 800371e:	3a1e      	subs	r2, #30
 8003720:	f04f 0c07 	mov.w	ip, #7
 8003724:	fa0c fc02 	lsl.w	ip, ip, r2
 8003728:	ea27 070c 	bic.w	r7, r7, ip
 800372c:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800372e:	68e7      	ldr	r7, [r4, #12]
 8003730:	4093      	lsls	r3, r2
 8003732:	433b      	orrs	r3, r7
 8003734:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8003736:	684b      	ldr	r3, [r1, #4]
 8003738:	2b06      	cmp	r3, #6
 800373a:	d9d2      	bls.n	80036e2 <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 800373c:	2b0c      	cmp	r3, #12
 800373e:	d833      	bhi.n	80037a8 <HAL_ADC_ConfigChannel+0x108>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003740:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003744:	f1a3 0123 	sub.w	r1, r3, #35	; 0x23
 8003748:	221f      	movs	r2, #31
 800374a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800374c:	408a      	lsls	r2, r1
 800374e:	ea23 0302 	bic.w	r3, r3, r2
 8003752:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003754:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003756:	fa06 f101 	lsl.w	r1, r6, r1
 800375a:	4319      	orrs	r1, r3
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800375c:	4b28      	ldr	r3, [pc, #160]	; (8003800 <HAL_ADC_ConfigChannel+0x160>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800375e:	6321      	str	r1, [r4, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003760:	429c      	cmp	r4, r3
 8003762:	d1cf      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x64>
 8003764:	2d12      	cmp	r5, #18
 8003766:	d02e      	beq.n	80037c6 <HAL_ADC_ConfigChannel+0x126>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003768:	4b26      	ldr	r3, [pc, #152]	; (8003804 <HAL_ADC_ConfigChannel+0x164>)
 800376a:	429d      	cmp	r5, r3
 800376c:	d13c      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x148>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800376e:	4a26      	ldr	r2, [pc, #152]	; (8003808 <HAL_ADC_ConfigChannel+0x168>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003770:	4b26      	ldr	r3, [pc, #152]	; (800380c <HAL_ADC_ConfigChannel+0x16c>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003772:	6851      	ldr	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003774:	4c26      	ldr	r4, [pc, #152]	; (8003810 <HAL_ADC_ConfigChannel+0x170>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003776:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 800377a:	6051      	str	r1, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800377c:	6851      	ldr	r1, [r2, #4]
 800377e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8003782:	6051      	str	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	fba4 2303 	umull	r2, r3, r4, r3
 800378a:	0c9b      	lsrs	r3, r3, #18
 800378c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003794:	9b01      	ldr	r3, [sp, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0b4      	beq.n	8003704 <HAL_ADC_ConfigChannel+0x64>
        counter--;
 800379a:	9b01      	ldr	r3, [sp, #4]
 800379c:	3b01      	subs	r3, #1
 800379e:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80037a0:	9b01      	ldr	r3, [sp, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f9      	bne.n	800379a <HAL_ADC_ConfigChannel+0xfa>
 80037a6:	e7ad      	b.n	8003704 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80037a8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80037ac:	3a41      	subs	r2, #65	; 0x41
 80037ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80037b0:	211f      	movs	r1, #31
 80037b2:	4091      	lsls	r1, r2
 80037b4:	ea23 0301 	bic.w	r3, r3, r1
 80037b8:	62e3      	str	r3, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80037ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80037bc:	fa06 f102 	lsl.w	r1, r6, r2
 80037c0:	4319      	orrs	r1, r3
 80037c2:	62e1      	str	r1, [r4, #44]	; 0x2c
 80037c4:	e79b      	b.n	80036fe <HAL_ADC_ConfigChannel+0x5e>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80037c6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 80037ca:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80037ce:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80037d2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 80037d6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80037da:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80037de:	e791      	b.n	8003704 <HAL_ADC_ConfigChannel+0x64>
  __HAL_LOCK(hadc);
 80037e0:	2002      	movs	r0, #2
}
 80037e2:	b002      	add	sp, #8
 80037e4:	bcf0      	pop	{r4, r5, r6, r7}
 80037e6:	4770      	bx	lr
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80037e8:	2d11      	cmp	r5, #17
 80037ea:	d18b      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x64>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80037ec:	4b06      	ldr	r3, [pc, #24]	; (8003808 <HAL_ADC_ConfigChannel+0x168>)
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80037f4:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80037fc:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80037fe:	e781      	b.n	8003704 <HAL_ADC_ConfigChannel+0x64>
 8003800:	40012000 	.word	0x40012000
 8003804:	10000012 	.word	0x10000012
 8003808:	40012300 	.word	0x40012300
 800380c:	200006f8 	.word	0x200006f8
 8003810:	431bde83 	.word	0x431bde83

08003814 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8003814:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003816:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800381a:	698f      	ldr	r7, [r1, #24]
  __HAL_LOCK(hadc);
 800381c:	2b01      	cmp	r3, #1
 800381e:	f000 80db 	beq.w	80039d8 <HAL_ADCEx_InjectedConfigChannel+0x1c4>
 8003822:	2301      	movs	r3, #1
 8003824:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8003828:	680e      	ldr	r6, [r1, #0]
 800382a:	2e09      	cmp	r6, #9
 800382c:	d870      	bhi.n	8003910 <HAL_ADCEx_InjectedConfigChannel+0xfc>
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 800382e:	6803      	ldr	r3, [r0, #0]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003830:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8003832:	691c      	ldr	r4, [r3, #16]
 8003834:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8003838:	2507      	movs	r5, #7
 800383a:	fa05 f50c 	lsl.w	r5, r5, ip
 800383e:	ea24 0405 	bic.w	r4, r4, r5
 8003842:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003844:	691c      	ldr	r4, [r3, #16]
 8003846:	fa02 f20c 	lsl.w	r2, r2, ip
 800384a:	4322      	orrs	r2, r4
 800384c:	611a      	str	r2, [r3, #16]
 800384e:	4634      	mov	r4, r6
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8003850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8003852:	f8d1 e010 	ldr.w	lr, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003856:	684d      	ldr	r5, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8003858:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800385c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800385e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003860:	f10e 3cff 	add.w	ip, lr, #4294967295
 8003864:	ea42 5c0c 	orr.w	ip, r2, ip, lsl #20
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003868:	1cea      	adds	r2, r5, #3
 800386a:	eba2 020e 	sub.w	r2, r2, lr
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800386e:	f8c3 c038 	str.w	ip, [r3, #56]	; 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	f8d3 c038 	ldr.w	ip, [r3, #56]	; 0x38
 8003878:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800387c:	f04f 0e1f 	mov.w	lr, #31
 8003880:	fa0e fe02 	lsl.w	lr, lr, r2
 8003884:	ea2c 0c0e 	bic.w	ip, ip, lr
 8003888:	f8c3 c038 	str.w	ip, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800388c:	f8d3 e038 	ldr.w	lr, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003890:	f8df c154 	ldr.w	ip, [pc, #340]	; 80039e8 <HAL_ADCEx_InjectedConfigChannel+0x1d4>
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003894:	fa04 f202 	lsl.w	r2, r4, r2
 8003898:	ea42 020e 	orr.w	r2, r2, lr
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800389c:	4567      	cmp	r7, ip
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800389e:	639a      	str	r2, [r3, #56]	; 0x38
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80038a0:	d074      	beq.n	800398c <HAL_ADCEx_InjectedConfigChannel+0x178>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80038a2:	689c      	ldr	r4, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80038a4:	f8d1 c01c 	ldr.w	ip, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80038a8:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
 80038ac:	609c      	str	r4, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	4317      	orrs	r7, r2
 80038b2:	609f      	str	r7, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80038b4:	689c      	ldr	r4, [r3, #8]
 80038b6:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 80038ba:	609c      	str	r4, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	ea42 020c 	orr.w	r2, r2, ip
 80038c2:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80038c4:	7d4a      	ldrb	r2, [r1, #21]
 80038c6:	2a00      	cmp	r2, #0
 80038c8:	d039      	beq.n	800393e <HAL_ADCEx_InjectedConfigChannel+0x12a>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038d0:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80038d2:	7d0a      	ldrb	r2, [r1, #20]
 80038d4:	2a00      	cmp	r2, #0
 80038d6:	d039      	beq.n	800394c <HAL_ADCEx_InjectedConfigChannel+0x138>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80038d8:	685a      	ldr	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 80038da:	2d02      	cmp	r5, #2
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80038dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038e0:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 80038e2:	d039      	beq.n	8003958 <HAL_ADCEx_InjectedConfigChannel+0x144>
 80038e4:	2d03      	cmp	r5, #3
 80038e6:	d065      	beq.n	80039b4 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
 80038e8:	2d01      	cmp	r5, #1
 80038ea:	d058      	beq.n	800399e <HAL_ADCEx_InjectedConfigChannel+0x18a>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80038ec:	6a1a      	ldr	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80038ee:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80038f0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80038f4:	f022 020f 	bic.w	r2, r2, #15
 80038f8:	621a      	str	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80038fa:	6a1a      	ldr	r2, [r3, #32]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8003900:	4a36      	ldr	r2, [pc, #216]	; (80039dc <HAL_ADCEx_InjectedConfigChannel+0x1c8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d035      	beq.n	8003972 <HAL_ADCEx_InjectedConfigChannel+0x15e>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003906:	2300      	movs	r3, #0
 8003908:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800390c:	4618      	mov	r0, r3
}
 800390e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8003910:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003912:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8003914:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8003918:	b2b4      	uxth	r4, r6
 800391a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800391e:	3d1e      	subs	r5, #30
 8003920:	f04f 0e07 	mov.w	lr, #7
 8003924:	fa0e fe05 	lsl.w	lr, lr, r5
 8003928:	ea2c 0c0e 	bic.w	ip, ip, lr
 800392c:	f8c3 c00c 	str.w	ip, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003930:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8003934:	40aa      	lsls	r2, r5
 8003936:	ea42 020c 	orr.w	r2, r2, ip
 800393a:	60da      	str	r2, [r3, #12]
 800393c:	e788      	b.n	8003850 <HAL_ADCEx_InjectedConfigChannel+0x3c>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003944:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8003946:	7d0a      	ldrb	r2, [r1, #20]
 8003948:	2a00      	cmp	r2, #0
 800394a:	d1c5      	bne.n	80038d8 <HAL_ADCEx_InjectedConfigChannel+0xc4>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 800394c:	685a      	ldr	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 800394e:	2d02      	cmp	r5, #2
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8003950:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003954:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8003956:	d1c5      	bne.n	80038e4 <HAL_ADCEx_InjectedConfigChannel+0xd0>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8003958:	699a      	ldr	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800395a:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800395c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003960:	f022 020f 	bic.w	r2, r2, #15
 8003964:	619a      	str	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8003966:	699a      	ldr	r2, [r3, #24]
 8003968:	430a      	orrs	r2, r1
 800396a:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800396c:	4a1b      	ldr	r2, [pc, #108]	; (80039dc <HAL_ADCEx_InjectedConfigChannel+0x1c8>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d1c9      	bne.n	8003906 <HAL_ADCEx_InjectedConfigChannel+0xf2>
 8003972:	2e12      	cmp	r6, #18
 8003974:	d029      	beq.n	80039ca <HAL_ADCEx_InjectedConfigChannel+0x1b6>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8003976:	4b1a      	ldr	r3, [pc, #104]	; (80039e0 <HAL_ADCEx_InjectedConfigChannel+0x1cc>)
 8003978:	429e      	cmp	r6, r3
 800397a:	d001      	beq.n	8003980 <HAL_ADCEx_InjectedConfigChannel+0x16c>
 800397c:	2e11      	cmp	r6, #17
 800397e:	d1c2      	bne.n	8003906 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003980:	4a18      	ldr	r2, [pc, #96]	; (80039e4 <HAL_ADCEx_InjectedConfigChannel+0x1d0>)
 8003982:	6853      	ldr	r3, [r2, #4]
 8003984:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003988:	6053      	str	r3, [r2, #4]
 800398a:	e7bc      	b.n	8003906 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8003992:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800399a:	609a      	str	r2, [r3, #8]
 800399c:	e792      	b.n	80038c4 <HAL_ADCEx_InjectedConfigChannel+0xb0>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800399e:	695a      	ldr	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80039a0:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80039a2:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80039a6:	f022 020f 	bic.w	r2, r2, #15
 80039aa:	615a      	str	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	615a      	str	r2, [r3, #20]
      break;
 80039b2:	e7a5      	b.n	8003900 <HAL_ADCEx_InjectedConfigChannel+0xec>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80039b4:	69da      	ldr	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80039b6:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80039b8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80039bc:	f022 020f 	bic.w	r2, r2, #15
 80039c0:	61da      	str	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80039c2:	69da      	ldr	r2, [r3, #28]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	61da      	str	r2, [r3, #28]
      break;
 80039c8:	e79a      	b.n	8003900 <HAL_ADCEx_InjectedConfigChannel+0xec>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80039ca:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 80039ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039d2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80039d6:	e796      	b.n	8003906 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  __HAL_LOCK(hadc);
 80039d8:	2002      	movs	r0, #2
}
 80039da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039dc:	40012000 	.word	0x40012000
 80039e0:	10000012 	.word	0x10000012
 80039e4:	40012300 	.word	0x40012300
 80039e8:	000f0001 	.word	0x000f0001

080039ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039ec:	4908      	ldr	r1, [pc, #32]	; (8003a10 <HAL_NVIC_SetPriorityGrouping+0x24>)
 80039ee:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039f0:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039f2:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039f4:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80039f8:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039fa:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003a08:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8003a0c:	60cb      	str	r3, [r1, #12]
 8003a0e:	4770      	bx	lr
 8003a10:	e000ed00 	.word	0xe000ed00

08003a14 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a14:	4b19      	ldr	r3, [pc, #100]	; (8003a7c <HAL_NVIC_SetPriority+0x68>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a1c:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a1e:	f1c3 0507 	rsb	r5, r3, #7
 8003a22:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a24:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a28:	bf28      	it	cs
 8003a2a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a2c:	2c06      	cmp	r4, #6
 8003a2e:	d919      	bls.n	8003a64 <HAL_NVIC_SetPriority+0x50>
 8003a30:	3b03      	subs	r3, #3
 8003a32:	f04f 34ff 	mov.w	r4, #4294967295
 8003a36:	409c      	lsls	r4, r3
 8003a38:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a3c:	f04f 34ff 	mov.w	r4, #4294967295
 8003a40:	40ac      	lsls	r4, r5
 8003a42:	ea21 0104 	bic.w	r1, r1, r4
 8003a46:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003a48:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a4a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003a4e:	db0c      	blt.n	8003a6a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a50:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003a54:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003a58:	0109      	lsls	r1, r1, #4
 8003a5a:	b2c9      	uxtb	r1, r1
 8003a5c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003a60:	bc30      	pop	{r4, r5}
 8003a62:	4770      	bx	lr
 8003a64:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a66:	4613      	mov	r3, r2
 8003a68:	e7e8      	b.n	8003a3c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a6a:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <HAL_NVIC_SetPriority+0x6c>)
 8003a6c:	f000 000f 	and.w	r0, r0, #15
 8003a70:	0109      	lsls	r1, r1, #4
 8003a72:	4403      	add	r3, r0
 8003a74:	b2c9      	uxtb	r1, r1
 8003a76:	7619      	strb	r1, [r3, #24]
 8003a78:	bc30      	pop	{r4, r5}
 8003a7a:	4770      	bx	lr
 8003a7c:	e000ed00 	.word	0xe000ed00
 8003a80:	e000ecfc 	.word	0xe000ecfc

08003a84 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003a84:	2800      	cmp	r0, #0
 8003a86:	db07      	blt.n	8003a98 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a88:	f000 011f 	and.w	r1, r0, #31
 8003a8c:	4a03      	ldr	r2, [pc, #12]	; (8003a9c <HAL_NVIC_EnableIRQ+0x18>)
 8003a8e:	0940      	lsrs	r0, r0, #5
 8003a90:	2301      	movs	r3, #1
 8003a92:	408b      	lsls	r3, r1
 8003a94:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	e000e100 	.word	0xe000e100

08003aa0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003aa0:	3801      	subs	r0, #1
 8003aa2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003aa6:	d20e      	bcs.n	8003ac6 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aa8:	4b08      	ldr	r3, [pc, #32]	; (8003acc <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aaa:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aac:	4c08      	ldr	r4, [pc, #32]	; (8003ad0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aae:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ab0:	20f0      	movs	r0, #240	; 0xf0
 8003ab2:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ab6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ab8:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003aba:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003abc:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8003abe:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ac2:	6019      	str	r1, [r3, #0]
 8003ac4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003ac6:	2001      	movs	r0, #1
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	e000e010 	.word	0xe000e010
 8003ad0:	e000ed00 	.word	0xe000ed00

08003ad4 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop

08003ad8 <HAL_SYSTICK_IRQHandler>:
{
 8003ad8:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8003ada:	f7ff fffb 	bl	8003ad4 <HAL_SYSTICK_Callback>
}
 8003ade:	bd08      	pop	{r3, pc}

08003ae0 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 8003ae0:	b188      	cbz	r0, 8003b06 <HAL_DAC_Init+0x26>
{ 
 8003ae2:	b510      	push	{r4, lr}
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003ae4:	7903      	ldrb	r3, [r0, #4]
 8003ae6:	4604      	mov	r4, r0
 8003ae8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003aec:	b13b      	cbz	r3, 8003afe <HAL_DAC_Init+0x1e>
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003aee:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8003af0:	2102      	movs	r1, #2
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003af2:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8003af4:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003af6:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8003af8:	7122      	strb	r2, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8003afa:	4618      	mov	r0, r3
}
 8003afc:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8003afe:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8003b00:	f7fe fc9c 	bl	800243c <HAL_DAC_MspInit>
 8003b04:	e7f3      	b.n	8003aee <HAL_DAC_Init+0xe>
     return HAL_ERROR;
 8003b06:	2001      	movs	r0, #1
}
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop

08003b0c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003b0c:	4603      	mov	r3, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003b0e:	7940      	ldrb	r0, [r0, #5]
 8003b10:	2801      	cmp	r0, #1
 8003b12:	d01e      	beq.n	8003b52 <HAL_DAC_ConfigChannel+0x46>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b14:	2002      	movs	r0, #2
{
 8003b16:	b470      	push	{r4, r5, r6}
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b18:	7118      	strb	r0, [r3, #4]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003b1a:	e9d1 0100 	ldrd	r0, r1, [r1]
  tmpreg1 = hdac->Instance->CR;
 8003b1e:	681c      	ldr	r4, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003b20:	f640 76fe 	movw	r6, #4094	; 0xffe
  tmpreg1 = hdac->Instance->CR;
 8003b24:	6825      	ldr	r5, [r4, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003b26:	4301      	orrs	r1, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003b28:	fa06 f002 	lsl.w	r0, r6, r2
 8003b2c:	ea25 0000 	bic.w	r0, r5, r0
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003b30:	4091      	lsls	r1, r2
 8003b32:	4301      	orrs	r1, r0
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003b34:	6021      	str	r1, [r4, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003b36:	6821      	ldr	r1, [r4, #0]
 8003b38:	20c0      	movs	r0, #192	; 0xc0
 8003b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b3e:	ea21 0202 	bic.w	r2, r1, r2
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b42:	2501      	movs	r5, #1
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b44:	2100      	movs	r1, #0
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003b46:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8003b48:	711d      	strb	r5, [r3, #4]
  __HAL_UNLOCK(hdac);
 8003b4a:	7159      	strb	r1, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003b4c:	4608      	mov	r0, r1
}
 8003b4e:	bc70      	pop	{r4, r5, r6}
 8003b50:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8003b52:	2002      	movs	r0, #2
}
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop

08003b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b5c:	f8df c21c 	ldr.w	ip, [pc, #540]	; 8003d7c <HAL_GPIO_Init+0x224>
 8003b60:	680d      	ldr	r5, [r1, #0]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b62:	f8df b21c 	ldr.w	fp, [pc, #540]	; 8003d80 <HAL_GPIO_Init+0x228>
{
 8003b66:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b68:	2300      	movs	r3, #0
 8003b6a:	e003      	b.n	8003b74 <HAL_GPIO_Init+0x1c>
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	2b10      	cmp	r3, #16
 8003b70:	f000 8097 	beq.w	8003ca2 <HAL_GPIO_Init+0x14a>
    ioposition = 0x01U << position;
 8003b74:	2201      	movs	r2, #1
 8003b76:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b78:	ea05 0a02 	and.w	sl, r5, r2
    if(iocurrent == ioposition)
 8003b7c:	43aa      	bics	r2, r5
 8003b7e:	d1f5      	bne.n	8003b6c <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b80:	684c      	ldr	r4, [r1, #4]
 8003b82:	f024 0e10 	bic.w	lr, r4, #16
 8003b86:	f10e 32ff 	add.w	r2, lr, #4294967295
 8003b8a:	2a01      	cmp	r2, #1
 8003b8c:	ea4f 0643 	mov.w	r6, r3, lsl #1
 8003b90:	f240 808a 	bls.w	8003ca8 <HAL_GPIO_Init+0x150>
      temp = GPIOx->PUPDR;
 8003b94:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b96:	2203      	movs	r2, #3
 8003b98:	40b2      	lsls	r2, r6
 8003b9a:	ea27 0e02 	bic.w	lr, r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b9e:	688f      	ldr	r7, [r1, #8]
 8003ba0:	40b7      	lsls	r7, r6
 8003ba2:	ea47 070e 	orr.w	r7, r7, lr
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ba6:	43d2      	mvns	r2, r2
 8003ba8:	9201      	str	r2, [sp, #4]
      GPIOx->PUPDR = temp;
 8003baa:	60c7      	str	r7, [r0, #12]
      temp = GPIOx->MODER;
 8003bac:	f8d0 e000 	ldr.w	lr, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bb0:	9a01      	ldr	r2, [sp, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bb2:	f004 0703 	and.w	r7, r4, #3
 8003bb6:	fa07 f606 	lsl.w	r6, r7, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bba:	ea0e 0e02 	and.w	lr, lr, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bbe:	ea46 060e 	orr.w	r6, r6, lr
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bc2:	00e7      	lsls	r7, r4, #3
      GPIOx->MODER = temp;
 8003bc4:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bc6:	d5d1      	bpl.n	8003b6c <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bc8:	2200      	movs	r2, #0
 8003bca:	9203      	str	r2, [sp, #12]
 8003bcc:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 8003bd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bd4:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
 8003bd8:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 8003bdc:	f023 0603 	bic.w	r6, r3, #3
 8003be0:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8003be4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003be8:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8003bec:	9203      	str	r2, [sp, #12]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bee:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bf2:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003bf4:	f8d6 e008 	ldr.w	lr, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bf8:	00bf      	lsls	r7, r7, #2
 8003bfa:	220f      	movs	r2, #15
 8003bfc:	40ba      	lsls	r2, r7
 8003bfe:	ea2e 0802 	bic.w	r8, lr, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c02:	4a58      	ldr	r2, [pc, #352]	; (8003d64 <HAL_GPIO_Init+0x20c>)
 8003c04:	4290      	cmp	r0, r2
 8003c06:	d01f      	beq.n	8003c48 <HAL_GPIO_Init+0xf0>
 8003c08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c0c:	4290      	cmp	r0, r2
 8003c0e:	f000 8085 	beq.w	8003d1c <HAL_GPIO_Init+0x1c4>
 8003c12:	4a55      	ldr	r2, [pc, #340]	; (8003d68 <HAL_GPIO_Init+0x210>)
 8003c14:	4290      	cmp	r0, r2
 8003c16:	f000 8088 	beq.w	8003d2a <HAL_GPIO_Init+0x1d2>
 8003c1a:	4a54      	ldr	r2, [pc, #336]	; (8003d6c <HAL_GPIO_Init+0x214>)
 8003c1c:	4290      	cmp	r0, r2
 8003c1e:	f000 808b 	beq.w	8003d38 <HAL_GPIO_Init+0x1e0>
 8003c22:	4a53      	ldr	r2, [pc, #332]	; (8003d70 <HAL_GPIO_Init+0x218>)
 8003c24:	4290      	cmp	r0, r2
 8003c26:	f000 808e 	beq.w	8003d46 <HAL_GPIO_Init+0x1ee>
 8003c2a:	4a52      	ldr	r2, [pc, #328]	; (8003d74 <HAL_GPIO_Init+0x21c>)
 8003c2c:	4290      	cmp	r0, r2
 8003c2e:	f000 8091 	beq.w	8003d54 <HAL_GPIO_Init+0x1fc>
 8003c32:	4a51      	ldr	r2, [pc, #324]	; (8003d78 <HAL_GPIO_Init+0x220>)
 8003c34:	4290      	cmp	r0, r2
 8003c36:	bf0c      	ite	eq
 8003c38:	f04f 0e06 	moveq.w	lr, #6
 8003c3c:	f04f 0e07 	movne.w	lr, #7
 8003c40:	fa0e f707 	lsl.w	r7, lr, r7
 8003c44:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c48:	f8c6 8008 	str.w	r8, [r6, #8]
        temp = EXTI->IMR;
 8003c4c:	f8dc 2000 	ldr.w	r2, [ip]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c50:	03e6      	lsls	r6, r4, #15
        temp &= ~((uint32_t)iocurrent);
 8003c52:	ea6f 070a 	mvn.w	r7, sl
 8003c56:	bf54      	ite	pl
 8003c58:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 8003c5a:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR = temp;
 8003c5e:	f8cc 2000 	str.w	r2, [ip]

        temp = EXTI->EMR;
 8003c62:	f8dc 6004 	ldr.w	r6, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c66:	03a2      	lsls	r2, r4, #14
        temp &= ~((uint32_t)iocurrent);
 8003c68:	bf54      	ite	pl
 8003c6a:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8003c6c:	ea4a 0606 	orrmi.w	r6, sl, r6
        }
        EXTI->EMR = temp;
 8003c70:	f8cc 6004 	str.w	r6, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c74:	f8dc 6008 	ldr.w	r6, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c78:	02e2      	lsls	r2, r4, #11
        temp &= ~((uint32_t)iocurrent);
 8003c7a:	bf54      	ite	pl
 8003c7c:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8003c7e:	ea4a 0606 	orrmi.w	r6, sl, r6
        }
        EXTI->RTSR = temp;
 8003c82:	f8cc 6008 	str.w	r6, [ip, #8]

        temp = EXTI->FTSR;
 8003c86:	f8dc 200c 	ldr.w	r2, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c8a:	02a4      	lsls	r4, r4, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c8c:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8003c90:	bf54      	ite	pl
 8003c92:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 8003c94:	ea4a 0202 	orrmi.w	r2, sl, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c98:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 8003c9a:	f8cc 200c 	str.w	r2, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c9e:	f47f af69 	bne.w	8003b74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ca2:	b005      	add	sp, #20
 8003ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8003ca8:	6887      	ldr	r7, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003caa:	688a      	ldr	r2, [r1, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cac:	f04f 0803 	mov.w	r8, #3
 8003cb0:	fa08 f806 	lsl.w	r8, r8, r6
 8003cb4:	ea27 0908 	bic.w	r9, r7, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cb8:	68cf      	ldr	r7, [r1, #12]
 8003cba:	40b7      	lsls	r7, r6
 8003cbc:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8003cc0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003cc2:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003cc6:	f3c4 1700 	ubfx	r7, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cca:	ea29 090a 	bic.w	r9, r9, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003cce:	409f      	lsls	r7, r3
 8003cd0:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8003cd4:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8003cd6:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cd8:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cda:	ea27 0708 	bic.w	r7, r7, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cde:	4317      	orrs	r7, r2
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ce0:	f1be 0f02 	cmp.w	lr, #2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ce4:	ea6f 0208 	mvn.w	r2, r8
 8003ce8:	9201      	str	r2, [sp, #4]
      GPIOx->PUPDR = temp;
 8003cea:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cec:	f47f af5e 	bne.w	8003bac <HAL_GPIO_Init+0x54>
        temp = GPIOx->AFR[position >> 3U];
 8003cf0:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8003cf4:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cf8:	f003 0707 	and.w	r7, r3, #7
 8003cfc:	00ba      	lsls	r2, r7, #2
        temp = GPIOx->AFR[position >> 3U];
 8003cfe:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d02:	690f      	ldr	r7, [r1, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d04:	f04f 0e0f 	mov.w	lr, #15
 8003d08:	fa0e fe02 	lsl.w	lr, lr, r2
 8003d0c:	ea29 0e0e 	bic.w	lr, r9, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d10:	4097      	lsls	r7, r2
 8003d12:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8003d16:	f8c8 7020 	str.w	r7, [r8, #32]
 8003d1a:	e747      	b.n	8003bac <HAL_GPIO_Init+0x54>
 8003d1c:	f04f 0e01 	mov.w	lr, #1
 8003d20:	fa0e f707 	lsl.w	r7, lr, r7
 8003d24:	ea48 0807 	orr.w	r8, r8, r7
 8003d28:	e78e      	b.n	8003c48 <HAL_GPIO_Init+0xf0>
 8003d2a:	f04f 0e02 	mov.w	lr, #2
 8003d2e:	fa0e f707 	lsl.w	r7, lr, r7
 8003d32:	ea48 0807 	orr.w	r8, r8, r7
 8003d36:	e787      	b.n	8003c48 <HAL_GPIO_Init+0xf0>
 8003d38:	f04f 0e03 	mov.w	lr, #3
 8003d3c:	fa0e f707 	lsl.w	r7, lr, r7
 8003d40:	ea48 0807 	orr.w	r8, r8, r7
 8003d44:	e780      	b.n	8003c48 <HAL_GPIO_Init+0xf0>
 8003d46:	f04f 0e04 	mov.w	lr, #4
 8003d4a:	fa0e f707 	lsl.w	r7, lr, r7
 8003d4e:	ea48 0807 	orr.w	r8, r8, r7
 8003d52:	e779      	b.n	8003c48 <HAL_GPIO_Init+0xf0>
 8003d54:	f04f 0e05 	mov.w	lr, #5
 8003d58:	fa0e f707 	lsl.w	r7, lr, r7
 8003d5c:	ea48 0807 	orr.w	r8, r8, r7
 8003d60:	e772      	b.n	8003c48 <HAL_GPIO_Init+0xf0>
 8003d62:	bf00      	nop
 8003d64:	40020000 	.word	0x40020000
 8003d68:	40020800 	.word	0x40020800
 8003d6c:	40020c00 	.word	0x40020c00
 8003d70:	40021000 	.word	0x40021000
 8003d74:	40021400 	.word	0x40021400
 8003d78:	40021800 	.word	0x40021800
 8003d7c:	40013c00 	.word	0x40013c00
 8003d80:	40023800 	.word	0x40023800

08003d84 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003d84:	b530      	push	{r4, r5, lr}
 8003d86:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d88:	4b19      	ldr	r3, [pc, #100]	; (8003df0 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003d8a:	491a      	ldr	r1, [pc, #104]	; (8003df4 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d8c:	4d1a      	ldr	r5, [pc, #104]	; (8003df8 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d8e:	2200      	movs	r2, #0
 8003d90:	9201      	str	r2, [sp, #4]
 8003d92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d98:	641a      	str	r2, [r3, #64]	; 0x40
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da0:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003da2:	2301      	movs	r3, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8003da4:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003da6:	600b      	str	r3, [r1, #0]
  tickstart = HAL_GetTick();
 8003da8:	f7ff fbb4 	bl	8003514 <HAL_GetTick>
 8003dac:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003dae:	e005      	b.n	8003dbc <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003db0:	f7ff fbb0 	bl	8003514 <HAL_GetTick>
 8003db4:	1b00      	subs	r0, r0, r4
 8003db6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003dba:	d816      	bhi.n	8003dea <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003dbc:	686b      	ldr	r3, [r5, #4]
 8003dbe:	03da      	lsls	r2, r3, #15
 8003dc0:	d5f6      	bpl.n	8003db0 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	; (8003dfc <HAL_PWREx_EnableOverDrive+0x78>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003dc4:	4d0c      	ldr	r5, [pc, #48]	; (8003df8 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8003dca:	f7ff fba3 	bl	8003514 <HAL_GetTick>
 8003dce:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003dd0:	e005      	b.n	8003dde <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003dd2:	f7ff fb9f 	bl	8003514 <HAL_GetTick>
 8003dd6:	1b00      	subs	r0, r0, r4
 8003dd8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003ddc:	d805      	bhi.n	8003dea <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003dde:	686b      	ldr	r3, [r5, #4]
 8003de0:	039b      	lsls	r3, r3, #14
 8003de2:	d5f6      	bpl.n	8003dd2 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8003de4:	2000      	movs	r0, #0
}
 8003de6:	b003      	add	sp, #12
 8003de8:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8003dea:	2003      	movs	r0, #3
}
 8003dec:	b003      	add	sp, #12
 8003dee:	bd30      	pop	{r4, r5, pc}
 8003df0:	40023800 	.word	0x40023800
 8003df4:	420e0040 	.word	0x420e0040
 8003df8:	40007000 	.word	0x40007000
 8003dfc:	420e0044 	.word	0x420e0044

08003e00 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e00:	2800      	cmp	r0, #0
 8003e02:	f000 8087 	beq.w	8003f14 <HAL_RCC_ClockConfig+0x114>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e06:	4a48      	ldr	r2, [pc, #288]	; (8003f28 <HAL_RCC_ClockConfig+0x128>)
 8003e08:	6813      	ldr	r3, [r2, #0]
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	428b      	cmp	r3, r1
{
 8003e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e14:	460d      	mov	r5, r1
 8003e16:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e18:	d209      	bcs.n	8003e2e <HAL_RCC_ClockConfig+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1a:	b2cb      	uxtb	r3, r1
 8003e1c:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e1e:	6813      	ldr	r3, [r2, #0]
 8003e20:	f003 030f 	and.w	r3, r3, #15
 8003e24:	428b      	cmp	r3, r1
 8003e26:	d002      	beq.n	8003e2e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003e28:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8003e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	0798      	lsls	r0, r3, #30
 8003e32:	d514      	bpl.n	8003e5e <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e34:	0759      	lsls	r1, r3, #29
 8003e36:	d504      	bpl.n	8003e42 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e38:	493c      	ldr	r1, [pc, #240]	; (8003f2c <HAL_RCC_ClockConfig+0x12c>)
 8003e3a:	688a      	ldr	r2, [r1, #8]
 8003e3c:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8003e40:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e42:	071a      	lsls	r2, r3, #28
 8003e44:	d504      	bpl.n	8003e50 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e46:	4939      	ldr	r1, [pc, #228]	; (8003f2c <HAL_RCC_ClockConfig+0x12c>)
 8003e48:	688a      	ldr	r2, [r1, #8]
 8003e4a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8003e4e:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e50:	4936      	ldr	r1, [pc, #216]	; (8003f2c <HAL_RCC_ClockConfig+0x12c>)
 8003e52:	68a0      	ldr	r0, [r4, #8]
 8003e54:	688a      	ldr	r2, [r1, #8]
 8003e56:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003e5a:	4302      	orrs	r2, r0
 8003e5c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e5e:	07df      	lsls	r7, r3, #31
 8003e60:	d521      	bpl.n	8003ea6 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e62:	6862      	ldr	r2, [r4, #4]
 8003e64:	2a01      	cmp	r2, #1
 8003e66:	d057      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e68:	1e93      	subs	r3, r2, #2
 8003e6a:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6c:	4b2f      	ldr	r3, [pc, #188]	; (8003f2c <HAL_RCC_ClockConfig+0x12c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e70:	d94d      	bls.n	8003f0e <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e72:	0799      	lsls	r1, r3, #30
 8003e74:	d5d8      	bpl.n	8003e28 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e76:	4e2d      	ldr	r6, [pc, #180]	; (8003f2c <HAL_RCC_ClockConfig+0x12c>)
 8003e78:	68b3      	ldr	r3, [r6, #8]
 8003e7a:	f023 0303 	bic.w	r3, r3, #3
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003e82:	f7ff fb47 	bl	8003514 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e86:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003e8a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8c:	e004      	b.n	8003e98 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e8e:	f7ff fb41 	bl	8003514 <HAL_GetTick>
 8003e92:	1bc0      	subs	r0, r0, r7
 8003e94:	4540      	cmp	r0, r8
 8003e96:	d844      	bhi.n	8003f22 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e98:	68b3      	ldr	r3, [r6, #8]
 8003e9a:	6862      	ldr	r2, [r4, #4]
 8003e9c:	f003 030c 	and.w	r3, r3, #12
 8003ea0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003ea4:	d1f3      	bne.n	8003e8e <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ea6:	4a20      	ldr	r2, [pc, #128]	; (8003f28 <HAL_RCC_ClockConfig+0x128>)
 8003ea8:	6813      	ldr	r3, [r2, #0]
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	42ab      	cmp	r3, r5
 8003eb0:	d906      	bls.n	8003ec0 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb2:	b2eb      	uxtb	r3, r5
 8003eb4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb6:	6813      	ldr	r3, [r2, #0]
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	42ab      	cmp	r3, r5
 8003ebe:	d1b3      	bne.n	8003e28 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec0:	6823      	ldr	r3, [r4, #0]
 8003ec2:	075a      	lsls	r2, r3, #29
 8003ec4:	d506      	bpl.n	8003ed4 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ec6:	4919      	ldr	r1, [pc, #100]	; (8003f2c <HAL_RCC_ClockConfig+0x12c>)
 8003ec8:	68e0      	ldr	r0, [r4, #12]
 8003eca:	688a      	ldr	r2, [r1, #8]
 8003ecc:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8003ed0:	4302      	orrs	r2, r0
 8003ed2:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed4:	071b      	lsls	r3, r3, #28
 8003ed6:	d507      	bpl.n	8003ee8 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ed8:	4a14      	ldr	r2, [pc, #80]	; (8003f2c <HAL_RCC_ClockConfig+0x12c>)
 8003eda:	6921      	ldr	r1, [r4, #16]
 8003edc:	6893      	ldr	r3, [r2, #8]
 8003ede:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003ee2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003ee6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ee8:	f000 f84e 	bl	8003f88 <HAL_RCC_GetSysClockFreq>
 8003eec:	4a0f      	ldr	r2, [pc, #60]	; (8003f2c <HAL_RCC_ClockConfig+0x12c>)
 8003eee:	4c10      	ldr	r4, [pc, #64]	; (8003f30 <HAL_RCC_ClockConfig+0x130>)
 8003ef0:	6892      	ldr	r2, [r2, #8]
 8003ef2:	4910      	ldr	r1, [pc, #64]	; (8003f34 <HAL_RCC_ClockConfig+0x134>)
 8003ef4:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003ef8:	4603      	mov	r3, r0
 8003efa:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8003efc:	480e      	ldr	r0, [pc, #56]	; (8003f38 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003efe:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8003f00:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f02:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8003f04:	f7ff fabc 	bl	8003480 <HAL_InitTick>
  return HAL_OK;
 8003f08:	2000      	movs	r0, #0
}
 8003f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f0e:	0198      	lsls	r0, r3, #6
 8003f10:	d4b1      	bmi.n	8003e76 <HAL_RCC_ClockConfig+0x76>
 8003f12:	e789      	b.n	8003e28 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8003f14:	2001      	movs	r0, #1
}
 8003f16:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f18:	4b04      	ldr	r3, [pc, #16]	; (8003f2c <HAL_RCC_ClockConfig+0x12c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	039e      	lsls	r6, r3, #14
 8003f1e:	d4aa      	bmi.n	8003e76 <HAL_RCC_ClockConfig+0x76>
 8003f20:	e782      	b.n	8003e28 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8003f22:	2003      	movs	r0, #3
 8003f24:	e781      	b.n	8003e2a <HAL_RCC_ClockConfig+0x2a>
 8003f26:	bf00      	nop
 8003f28:	40023c00 	.word	0x40023c00
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	08007714 	.word	0x08007714
 8003f34:	200006f8 	.word	0x200006f8
 8003f38:	20000700 	.word	0x20000700

08003f3c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003f3c:	4b01      	ldr	r3, [pc, #4]	; (8003f44 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8003f3e:	6818      	ldr	r0, [r3, #0]
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	200006f8 	.word	0x200006f8

08003f48 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f48:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <HAL_RCC_GetPCLK1Freq+0x14>)
 8003f4a:	4a05      	ldr	r2, [pc, #20]	; (8003f60 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003f4e:	4905      	ldr	r1, [pc, #20]	; (8003f64 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f50:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003f54:	6808      	ldr	r0, [r1, #0]
 8003f56:	5cd3      	ldrb	r3, [r2, r3]
}
 8003f58:	40d8      	lsrs	r0, r3
 8003f5a:	4770      	bx	lr
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	08007724 	.word	0x08007724
 8003f64:	200006f8 	.word	0x200006f8

08003f68 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f68:	4b04      	ldr	r3, [pc, #16]	; (8003f7c <HAL_RCC_GetPCLK2Freq+0x14>)
 8003f6a:	4a05      	ldr	r2, [pc, #20]	; (8003f80 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003f6e:	4905      	ldr	r1, [pc, #20]	; (8003f84 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f70:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003f74:	6808      	ldr	r0, [r1, #0]
 8003f76:	5cd3      	ldrb	r3, [r2, r3]
}
 8003f78:	40d8      	lsrs	r0, r3
 8003f7a:	4770      	bx	lr
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	08007724 	.word	0x08007724
 8003f84:	200006f8 	.word	0x200006f8

08003f88 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f88:	4928      	ldr	r1, [pc, #160]	; (800402c <HAL_RCC_GetSysClockFreq+0xa4>)
{
 8003f8a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f8c:	688b      	ldr	r3, [r1, #8]
 8003f8e:	f003 030c 	and.w	r3, r3, #12
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d007      	beq.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x1e>
 8003f96:	2b0c      	cmp	r3, #12
 8003f98:	d01d      	beq.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x4e>
 8003f9a:	4a25      	ldr	r2, [pc, #148]	; (8004030 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003f9c:	4825      	ldr	r0, [pc, #148]	; (8004034 <HAL_RCC_GetSysClockFreq+0xac>)
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	bf08      	it	eq
 8003fa2:	4610      	moveq	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003fa4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fa6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fa8:	684b      	ldr	r3, [r1, #4]
 8003faa:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fb2:	d130      	bne.n	8004016 <HAL_RCC_GetSysClockFreq+0x8e>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fb4:	6849      	ldr	r1, [r1, #4]
 8003fb6:	481f      	ldr	r0, [pc, #124]	; (8004034 <HAL_RCC_GetSysClockFreq+0xac>)
 8003fb8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003fbc:	fba1 0100 	umull	r0, r1, r1, r0
 8003fc0:	f7fc f97e 	bl	80002c0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fc4:	4b19      	ldr	r3, [pc, #100]	; (800402c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003fcc:	3301      	adds	r3, #1
 8003fce:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8003fd0:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003fd4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fd6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fd8:	684b      	ldr	r3, [r1, #4]
 8003fda:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fde:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fe2:	d10e      	bne.n	8004002 <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fe4:	6849      	ldr	r1, [r1, #4]
 8003fe6:	4813      	ldr	r0, [pc, #76]	; (8004034 <HAL_RCC_GetSysClockFreq+0xac>)
 8003fe8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003fec:	fba1 0100 	umull	r0, r1, r1, r0
 8003ff0:	f7fc f966 	bl	80002c0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003ff4:	4b0d      	ldr	r3, [pc, #52]	; (800402c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 8003ffc:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004000:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004002:	684b      	ldr	r3, [r1, #4]
 8004004:	480a      	ldr	r0, [pc, #40]	; (8004030 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004006:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800400a:	fba3 0100 	umull	r0, r1, r3, r0
 800400e:	2300      	movs	r3, #0
 8004010:	f7fc f956 	bl	80002c0 <__aeabi_uldivmod>
 8004014:	e7ee      	b.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004016:	684b      	ldr	r3, [r1, #4]
 8004018:	4805      	ldr	r0, [pc, #20]	; (8004030 <HAL_RCC_GetSysClockFreq+0xa8>)
 800401a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800401e:	fba3 0100 	umull	r0, r1, r3, r0
 8004022:	2300      	movs	r3, #0
 8004024:	f7fc f94c 	bl	80002c0 <__aeabi_uldivmod>
 8004028:	e7cc      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x3c>
 800402a:	bf00      	nop
 800402c:	40023800 	.word	0x40023800
 8004030:	007a1200 	.word	0x007a1200
 8004034:	00f42400 	.word	0x00f42400

08004038 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800403c:	6803      	ldr	r3, [r0, #0]
 800403e:	07da      	lsls	r2, r3, #31
{
 8004040:	b082      	sub	sp, #8
 8004042:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004044:	d536      	bpl.n	80040b4 <HAL_RCC_OscConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004046:	49ae      	ldr	r1, [pc, #696]	; (8004300 <HAL_RCC_OscConfig+0x2c8>)
 8004048:	688a      	ldr	r2, [r1, #8]
 800404a:	f002 020c 	and.w	r2, r2, #12
 800404e:	2a04      	cmp	r2, #4
 8004050:	f000 80d1 	beq.w	80041f6 <HAL_RCC_OscConfig+0x1be>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004054:	688a      	ldr	r2, [r1, #8]
 8004056:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800405a:	2a08      	cmp	r2, #8
 800405c:	f000 80c7 	beq.w	80041ee <HAL_RCC_OscConfig+0x1b6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004060:	49a7      	ldr	r1, [pc, #668]	; (8004300 <HAL_RCC_OscConfig+0x2c8>)
 8004062:	688a      	ldr	r2, [r1, #8]
 8004064:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004068:	2a0c      	cmp	r2, #12
 800406a:	f000 8104 	beq.w	8004276 <HAL_RCC_OscConfig+0x23e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800406e:	6863      	ldr	r3, [r4, #4]
 8004070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004074:	f000 8104 	beq.w	8004280 <HAL_RCC_OscConfig+0x248>
 8004078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800407c:	f000 818f 	beq.w	800439e <HAL_RCC_OscConfig+0x366>
 8004080:	4d9f      	ldr	r5, [pc, #636]	; (8004300 <HAL_RCC_OscConfig+0x2c8>)
 8004082:	682a      	ldr	r2, [r5, #0]
 8004084:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004088:	602a      	str	r2, [r5, #0]
 800408a:	682a      	ldr	r2, [r5, #0]
 800408c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004090:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004092:	2b00      	cmp	r3, #0
 8004094:	f040 80f9 	bne.w	800428a <HAL_RCC_OscConfig+0x252>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004098:	f7ff fa3c 	bl	8003514 <HAL_GetTick>
 800409c:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800409e:	e005      	b.n	80040ac <HAL_RCC_OscConfig+0x74>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040a0:	f7ff fa38 	bl	8003514 <HAL_GetTick>
 80040a4:	1b80      	subs	r0, r0, r6
 80040a6:	2864      	cmp	r0, #100	; 0x64
 80040a8:	f200 810d 	bhi.w	80042c6 <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ac:	682b      	ldr	r3, [r5, #0]
 80040ae:	0399      	lsls	r1, r3, #14
 80040b0:	d4f6      	bmi.n	80040a0 <HAL_RCC_OscConfig+0x68>
 80040b2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040b4:	079a      	lsls	r2, r3, #30
 80040b6:	d52f      	bpl.n	8004118 <HAL_RCC_OscConfig+0xe0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80040b8:	4a91      	ldr	r2, [pc, #580]	; (8004300 <HAL_RCC_OscConfig+0x2c8>)
 80040ba:	6891      	ldr	r1, [r2, #8]
 80040bc:	f011 0f0c 	tst.w	r1, #12
 80040c0:	f000 80a7 	beq.w	8004212 <HAL_RCC_OscConfig+0x1da>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040c4:	6891      	ldr	r1, [r2, #8]
 80040c6:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80040ca:	2908      	cmp	r1, #8
 80040cc:	f000 809d 	beq.w	800420a <HAL_RCC_OscConfig+0x1d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040d0:	498b      	ldr	r1, [pc, #556]	; (8004300 <HAL_RCC_OscConfig+0x2c8>)
 80040d2:	688a      	ldr	r2, [r1, #8]
 80040d4:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040d8:	2a0c      	cmp	r2, #12
 80040da:	f000 812c 	beq.w	8004336 <HAL_RCC_OscConfig+0x2fe>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040de:	68e3      	ldr	r3, [r4, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 8117 	beq.w	8004314 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040e6:	4b87      	ldr	r3, [pc, #540]	; (8004304 <HAL_RCC_OscConfig+0x2cc>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e8:	4e85      	ldr	r6, [pc, #532]	; (8004300 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 80040ea:	2201      	movs	r2, #1
 80040ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80040ee:	f7ff fa11 	bl	8003514 <HAL_GetTick>
 80040f2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f4:	e005      	b.n	8004102 <HAL_RCC_OscConfig+0xca>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040f6:	f7ff fa0d 	bl	8003514 <HAL_GetTick>
 80040fa:	1b40      	subs	r0, r0, r5
 80040fc:	2802      	cmp	r0, #2
 80040fe:	f200 80e2 	bhi.w	80042c6 <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004102:	6833      	ldr	r3, [r6, #0]
 8004104:	0798      	lsls	r0, r3, #30
 8004106:	d5f6      	bpl.n	80040f6 <HAL_RCC_OscConfig+0xbe>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004108:	6833      	ldr	r3, [r6, #0]
 800410a:	6922      	ldr	r2, [r4, #16]
 800410c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004110:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004114:	6033      	str	r3, [r6, #0]
 8004116:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004118:	071a      	lsls	r2, r3, #28
 800411a:	d515      	bpl.n	8004148 <HAL_RCC_OscConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800411c:	6963      	ldr	r3, [r4, #20]
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 808d 	beq.w	800423e <HAL_RCC_OscConfig+0x206>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004124:	4b78      	ldr	r3, [pc, #480]	; (8004308 <HAL_RCC_OscConfig+0x2d0>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004126:	4e76      	ldr	r6, [pc, #472]	; (8004300 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8004128:	2201      	movs	r2, #1
 800412a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800412c:	f7ff f9f2 	bl	8003514 <HAL_GetTick>
 8004130:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004132:	e005      	b.n	8004140 <HAL_RCC_OscConfig+0x108>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004134:	f7ff f9ee 	bl	8003514 <HAL_GetTick>
 8004138:	1b40      	subs	r0, r0, r5
 800413a:	2802      	cmp	r0, #2
 800413c:	f200 80c3 	bhi.w	80042c6 <HAL_RCC_OscConfig+0x28e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004140:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004142:	079b      	lsls	r3, r3, #30
 8004144:	d5f6      	bpl.n	8004134 <HAL_RCC_OscConfig+0xfc>
 8004146:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004148:	0758      	lsls	r0, r3, #29
 800414a:	d530      	bpl.n	80041ae <HAL_RCC_OscConfig+0x176>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800414c:	4a6c      	ldr	r2, [pc, #432]	; (8004300 <HAL_RCC_OscConfig+0x2c8>)
 800414e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004150:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8004154:	f000 8083 	beq.w	800425e <HAL_RCC_OscConfig+0x226>
    FlagStatus       pwrclkchanged = RESET;
 8004158:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800415a:	4e6c      	ldr	r6, [pc, #432]	; (800430c <HAL_RCC_OscConfig+0x2d4>)
 800415c:	6833      	ldr	r3, [r6, #0]
 800415e:	05d9      	lsls	r1, r3, #23
 8004160:	f140 80a1 	bpl.w	80042a6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004164:	68a3      	ldr	r3, [r4, #8]
 8004166:	2b01      	cmp	r3, #1
 8004168:	f000 80b1 	beq.w	80042ce <HAL_RCC_OscConfig+0x296>
 800416c:	2b05      	cmp	r3, #5
 800416e:	f000 8120 	beq.w	80043b2 <HAL_RCC_OscConfig+0x37a>
 8004172:	4e63      	ldr	r6, [pc, #396]	; (8004300 <HAL_RCC_OscConfig+0x2c8>)
 8004174:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8004176:	f022 0201 	bic.w	r2, r2, #1
 800417a:	6732      	str	r2, [r6, #112]	; 0x70
 800417c:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800417e:	f022 0204 	bic.w	r2, r2, #4
 8004182:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004184:	2b00      	cmp	r3, #0
 8004186:	f040 80a7 	bne.w	80042d8 <HAL_RCC_OscConfig+0x2a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418a:	f7ff f9c3 	bl	8003514 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800418e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004192:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004194:	e005      	b.n	80041a2 <HAL_RCC_OscConfig+0x16a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004196:	f7ff f9bd 	bl	8003514 <HAL_GetTick>
 800419a:	1bc0      	subs	r0, r0, r7
 800419c:	4540      	cmp	r0, r8
 800419e:	f200 8092 	bhi.w	80042c6 <HAL_RCC_OscConfig+0x28e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041a2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80041a4:	0798      	lsls	r0, r3, #30
 80041a6:	d4f6      	bmi.n	8004196 <HAL_RCC_OscConfig+0x15e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041a8:	2d00      	cmp	r5, #0
 80041aa:	f040 810c 	bne.w	80043c6 <HAL_RCC_OscConfig+0x38e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041ae:	69a3      	ldr	r3, [r4, #24]
 80041b0:	b1cb      	cbz	r3, 80041e6 <HAL_RCC_OscConfig+0x1ae>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041b2:	4d53      	ldr	r5, [pc, #332]	; (8004300 <HAL_RCC_OscConfig+0x2c8>)
 80041b4:	68aa      	ldr	r2, [r5, #8]
 80041b6:	f002 020c 	and.w	r2, r2, #12
 80041ba:	2a08      	cmp	r2, #8
 80041bc:	d030      	beq.n	8004220 <HAL_RCC_OscConfig+0x1e8>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041be:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c0:	4b53      	ldr	r3, [pc, #332]	; (8004310 <HAL_RCC_OscConfig+0x2d8>)
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041c8:	f000 80ba 	beq.w	8004340 <HAL_RCC_OscConfig+0x308>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041cc:	f7ff f9a2 	bl	8003514 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d0:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80041d2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d4:	e004      	b.n	80041e0 <HAL_RCC_OscConfig+0x1a8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041d6:	f7ff f99d 	bl	8003514 <HAL_GetTick>
 80041da:	1b40      	subs	r0, r0, r5
 80041dc:	2802      	cmp	r0, #2
 80041de:	d872      	bhi.n	80042c6 <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	019b      	lsls	r3, r3, #6
 80041e4:	d4f7      	bmi.n	80041d6 <HAL_RCC_OscConfig+0x19e>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80041e6:	2000      	movs	r0, #0
}
 80041e8:	b002      	add	sp, #8
 80041ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041ee:	684a      	ldr	r2, [r1, #4]
 80041f0:	0257      	lsls	r7, r2, #9
 80041f2:	f57f af35 	bpl.w	8004060 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f6:	4a42      	ldr	r2, [pc, #264]	; (8004300 <HAL_RCC_OscConfig+0x2c8>)
 80041f8:	6812      	ldr	r2, [r2, #0]
 80041fa:	0395      	lsls	r5, r2, #14
 80041fc:	f57f af5a 	bpl.w	80040b4 <HAL_RCC_OscConfig+0x7c>
 8004200:	6862      	ldr	r2, [r4, #4]
 8004202:	2a00      	cmp	r2, #0
 8004204:	f47f af56 	bne.w	80040b4 <HAL_RCC_OscConfig+0x7c>
 8004208:	e00a      	b.n	8004220 <HAL_RCC_OscConfig+0x1e8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800420a:	6852      	ldr	r2, [r2, #4]
 800420c:	0257      	lsls	r7, r2, #9
 800420e:	f53f af5f 	bmi.w	80040d0 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004212:	4a3b      	ldr	r2, [pc, #236]	; (8004300 <HAL_RCC_OscConfig+0x2c8>)
 8004214:	6812      	ldr	r2, [r2, #0]
 8004216:	0795      	lsls	r5, r2, #30
 8004218:	d506      	bpl.n	8004228 <HAL_RCC_OscConfig+0x1f0>
 800421a:	68e2      	ldr	r2, [r4, #12]
 800421c:	2a01      	cmp	r2, #1
 800421e:	d003      	beq.n	8004228 <HAL_RCC_OscConfig+0x1f0>
        return HAL_ERROR;
 8004220:	2001      	movs	r0, #1
}
 8004222:	b002      	add	sp, #8
 8004224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004228:	4935      	ldr	r1, [pc, #212]	; (8004300 <HAL_RCC_OscConfig+0x2c8>)
 800422a:	6920      	ldr	r0, [r4, #16]
 800422c:	680a      	ldr	r2, [r1, #0]
 800422e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004232:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004236:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004238:	071a      	lsls	r2, r3, #28
 800423a:	d585      	bpl.n	8004148 <HAL_RCC_OscConfig+0x110>
 800423c:	e76e      	b.n	800411c <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_LSI_DISABLE();
 800423e:	4a32      	ldr	r2, [pc, #200]	; (8004308 <HAL_RCC_OscConfig+0x2d0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004240:	4e2f      	ldr	r6, [pc, #188]	; (8004300 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8004242:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004244:	f7ff f966 	bl	8003514 <HAL_GetTick>
 8004248:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800424a:	e004      	b.n	8004256 <HAL_RCC_OscConfig+0x21e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800424c:	f7ff f962 	bl	8003514 <HAL_GetTick>
 8004250:	1b40      	subs	r0, r0, r5
 8004252:	2802      	cmp	r0, #2
 8004254:	d837      	bhi.n	80042c6 <HAL_RCC_OscConfig+0x28e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004256:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004258:	079f      	lsls	r7, r3, #30
 800425a:	d4f7      	bmi.n	800424c <HAL_RCC_OscConfig+0x214>
 800425c:	e773      	b.n	8004146 <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800425e:	9301      	str	r3, [sp, #4]
 8004260:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004266:	6413      	str	r3, [r2, #64]	; 0x40
 8004268:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800426a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426e:	9301      	str	r3, [sp, #4]
 8004270:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004272:	2501      	movs	r5, #1
 8004274:	e771      	b.n	800415a <HAL_RCC_OscConfig+0x122>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004276:	684a      	ldr	r2, [r1, #4]
 8004278:	0256      	lsls	r6, r2, #9
 800427a:	f57f aef8 	bpl.w	800406e <HAL_RCC_OscConfig+0x36>
 800427e:	e7ba      	b.n	80041f6 <HAL_RCC_OscConfig+0x1be>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004280:	4a1f      	ldr	r2, [pc, #124]	; (8004300 <HAL_RCC_OscConfig+0x2c8>)
 8004282:	6813      	ldr	r3, [r2, #0]
 8004284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004288:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800428a:	f7ff f943 	bl	8003514 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428e:	4e1c      	ldr	r6, [pc, #112]	; (8004300 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8004290:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004292:	e004      	b.n	800429e <HAL_RCC_OscConfig+0x266>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004294:	f7ff f93e 	bl	8003514 <HAL_GetTick>
 8004298:	1b40      	subs	r0, r0, r5
 800429a:	2864      	cmp	r0, #100	; 0x64
 800429c:	d813      	bhi.n	80042c6 <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429e:	6833      	ldr	r3, [r6, #0]
 80042a0:	0398      	lsls	r0, r3, #14
 80042a2:	d5f7      	bpl.n	8004294 <HAL_RCC_OscConfig+0x25c>
 80042a4:	e705      	b.n	80040b2 <HAL_RCC_OscConfig+0x7a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042a6:	6833      	ldr	r3, [r6, #0]
 80042a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ac:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80042ae:	f7ff f931 	bl	8003514 <HAL_GetTick>
 80042b2:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b4:	6833      	ldr	r3, [r6, #0]
 80042b6:	05da      	lsls	r2, r3, #23
 80042b8:	f53f af54 	bmi.w	8004164 <HAL_RCC_OscConfig+0x12c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042bc:	f7ff f92a 	bl	8003514 <HAL_GetTick>
 80042c0:	1bc0      	subs	r0, r0, r7
 80042c2:	2802      	cmp	r0, #2
 80042c4:	d9f6      	bls.n	80042b4 <HAL_RCC_OscConfig+0x27c>
            return HAL_TIMEOUT;
 80042c6:	2003      	movs	r0, #3
}
 80042c8:	b002      	add	sp, #8
 80042ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ce:	4a0c      	ldr	r2, [pc, #48]	; (8004300 <HAL_RCC_OscConfig+0x2c8>)
 80042d0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80042d2:	f043 0301 	orr.w	r3, r3, #1
 80042d6:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80042d8:	f7ff f91c 	bl	8003514 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042dc:	4f08      	ldr	r7, [pc, #32]	; (8004300 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80042de:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042e0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e4:	e004      	b.n	80042f0 <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042e6:	f7ff f915 	bl	8003514 <HAL_GetTick>
 80042ea:	1b80      	subs	r0, r0, r6
 80042ec:	4540      	cmp	r0, r8
 80042ee:	d8ea      	bhi.n	80042c6 <HAL_RCC_OscConfig+0x28e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042f2:	079b      	lsls	r3, r3, #30
 80042f4:	d5f7      	bpl.n	80042e6 <HAL_RCC_OscConfig+0x2ae>
    if(pwrclkchanged == SET)
 80042f6:	2d00      	cmp	r5, #0
 80042f8:	f43f af59 	beq.w	80041ae <HAL_RCC_OscConfig+0x176>
 80042fc:	e063      	b.n	80043c6 <HAL_RCC_OscConfig+0x38e>
 80042fe:	bf00      	nop
 8004300:	40023800 	.word	0x40023800
 8004304:	42470000 	.word	0x42470000
 8004308:	42470e80 	.word	0x42470e80
 800430c:	40007000 	.word	0x40007000
 8004310:	42470060 	.word	0x42470060
        __HAL_RCC_HSI_DISABLE();
 8004314:	4a2f      	ldr	r2, [pc, #188]	; (80043d4 <HAL_RCC_OscConfig+0x39c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004316:	4e30      	ldr	r6, [pc, #192]	; (80043d8 <HAL_RCC_OscConfig+0x3a0>)
        __HAL_RCC_HSI_DISABLE();
 8004318:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800431a:	f7ff f8fb 	bl	8003514 <HAL_GetTick>
 800431e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004320:	e004      	b.n	800432c <HAL_RCC_OscConfig+0x2f4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004322:	f7ff f8f7 	bl	8003514 <HAL_GetTick>
 8004326:	1b40      	subs	r0, r0, r5
 8004328:	2802      	cmp	r0, #2
 800432a:	d8cc      	bhi.n	80042c6 <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800432c:	6833      	ldr	r3, [r6, #0]
 800432e:	0799      	lsls	r1, r3, #30
 8004330:	d4f7      	bmi.n	8004322 <HAL_RCC_OscConfig+0x2ea>
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	e6f0      	b.n	8004118 <HAL_RCC_OscConfig+0xe0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004336:	684a      	ldr	r2, [r1, #4]
 8004338:	0256      	lsls	r6, r2, #9
 800433a:	f53f aed0 	bmi.w	80040de <HAL_RCC_OscConfig+0xa6>
 800433e:	e768      	b.n	8004212 <HAL_RCC_OscConfig+0x1da>
        tickstart = HAL_GetTick();
 8004340:	f7ff f8e8 	bl	8003514 <HAL_GetTick>
 8004344:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004346:	e004      	b.n	8004352 <HAL_RCC_OscConfig+0x31a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004348:	f7ff f8e4 	bl	8003514 <HAL_GetTick>
 800434c:	1b80      	subs	r0, r0, r6
 800434e:	2802      	cmp	r0, #2
 8004350:	d8b9      	bhi.n	80042c6 <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004352:	682b      	ldr	r3, [r5, #0]
 8004354:	0199      	lsls	r1, r3, #6
 8004356:	d4f7      	bmi.n	8004348 <HAL_RCC_OscConfig+0x310>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004358:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800435c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800435e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004360:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004362:	4313      	orrs	r3, r2
 8004364:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004366:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 800436a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800436e:	0852      	lsrs	r2, r2, #1
 8004370:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004374:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8004376:	4919      	ldr	r1, [pc, #100]	; (80043dc <HAL_RCC_OscConfig+0x3a4>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004378:	4e17      	ldr	r6, [pc, #92]	; (80043d8 <HAL_RCC_OscConfig+0x3a0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800437a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800437e:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004380:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004382:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8004384:	f7ff f8c6 	bl	8003514 <HAL_GetTick>
 8004388:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800438a:	e004      	b.n	8004396 <HAL_RCC_OscConfig+0x35e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800438c:	f7ff f8c2 	bl	8003514 <HAL_GetTick>
 8004390:	1b00      	subs	r0, r0, r4
 8004392:	2802      	cmp	r0, #2
 8004394:	d897      	bhi.n	80042c6 <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004396:	6833      	ldr	r3, [r6, #0]
 8004398:	019a      	lsls	r2, r3, #6
 800439a:	d5f7      	bpl.n	800438c <HAL_RCC_OscConfig+0x354>
 800439c:	e723      	b.n	80041e6 <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800439e:	4b0e      	ldr	r3, [pc, #56]	; (80043d8 <HAL_RCC_OscConfig+0x3a0>)
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80043ae:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043b0:	e76b      	b.n	800428a <HAL_RCC_OscConfig+0x252>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043b2:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <HAL_RCC_OscConfig+0x3a0>)
 80043b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043b6:	f042 0204 	orr.w	r2, r2, #4
 80043ba:	671a      	str	r2, [r3, #112]	; 0x70
 80043bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043be:	f042 0201 	orr.w	r2, r2, #1
 80043c2:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043c4:	e788      	b.n	80042d8 <HAL_RCC_OscConfig+0x2a0>
      __HAL_RCC_PWR_CLK_DISABLE();
 80043c6:	4a04      	ldr	r2, [pc, #16]	; (80043d8 <HAL_RCC_OscConfig+0x3a0>)
 80043c8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80043ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ce:	6413      	str	r3, [r2, #64]	; 0x40
 80043d0:	e6ed      	b.n	80041ae <HAL_RCC_OscConfig+0x176>
 80043d2:	bf00      	nop
 80043d4:	42470000 	.word	0x42470000
 80043d8:	40023800 	.word	0x40023800
 80043dc:	42470060 	.word	0x42470060

080043e0 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043e0:	2800      	cmp	r0, #0
 80043e2:	d074      	beq.n	80044ce <HAL_TIM_Base_Init+0xee>
{
 80043e4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80043ea:	4604      	mov	r4, r0
 80043ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d067      	beq.n	80044c4 <HAL_TIM_Base_Init+0xe4>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043f4:	6821      	ldr	r1, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043f6:	4a37      	ldr	r2, [pc, #220]	; (80044d4 <HAL_TIM_Base_Init+0xf4>)
  htim->State = HAL_TIM_STATE_BUSY;
 80043f8:	2302      	movs	r3, #2
 80043fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043fe:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 8004400:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004402:	d04b      	beq.n	800449c <HAL_TIM_Base_Init+0xbc>
 8004404:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8004408:	d031      	beq.n	800446e <HAL_TIM_Base_Init+0x8e>
 800440a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800440e:	4291      	cmp	r1, r2
 8004410:	d02d      	beq.n	800446e <HAL_TIM_Base_Init+0x8e>
 8004412:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004416:	4291      	cmp	r1, r2
 8004418:	d029      	beq.n	800446e <HAL_TIM_Base_Init+0x8e>
 800441a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800441e:	4291      	cmp	r1, r2
 8004420:	d025      	beq.n	800446e <HAL_TIM_Base_Init+0x8e>
 8004422:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004426:	4291      	cmp	r1, r2
 8004428:	d038      	beq.n	800449c <HAL_TIM_Base_Init+0xbc>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800442a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800442e:	4291      	cmp	r1, r2
 8004430:	d021      	beq.n	8004476 <HAL_TIM_Base_Init+0x96>
 8004432:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004436:	4291      	cmp	r1, r2
 8004438:	d01d      	beq.n	8004476 <HAL_TIM_Base_Init+0x96>
 800443a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800443e:	4291      	cmp	r1, r2
 8004440:	d019      	beq.n	8004476 <HAL_TIM_Base_Init+0x96>
 8004442:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004446:	4291      	cmp	r1, r2
 8004448:	d015      	beq.n	8004476 <HAL_TIM_Base_Init+0x96>
 800444a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800444e:	4291      	cmp	r1, r2
 8004450:	d011      	beq.n	8004476 <HAL_TIM_Base_Init+0x96>
 8004452:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004456:	4291      	cmp	r1, r2
 8004458:	d00d      	beq.n	8004476 <HAL_TIM_Base_Init+0x96>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800445a:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800445c:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800445e:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004460:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004464:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004466:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004468:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800446a:	628a      	str	r2, [r1, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800446c:	e010      	b.n	8004490 <HAL_TIM_Base_Init+0xb0>
    tmpcr1 |= Structure->CounterMode;
 800446e:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004474:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004476:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004478:	69a2      	ldr	r2, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800447a:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800447c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004480:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004482:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004486:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8004488:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800448a:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800448c:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800448e:	628a      	str	r2, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004490:	2301      	movs	r3, #1
 8004492:	614b      	str	r3, [r1, #20]
  htim->State = HAL_TIM_STATE_READY;
 8004494:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004498:	2000      	movs	r0, #0
}
 800449a:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 800449c:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800449e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044a0:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80044a6:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80044a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ac:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044b2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80044b4:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044b6:	68e3      	ldr	r3, [r4, #12]
 80044b8:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80044ba:	6863      	ldr	r3, [r4, #4]
 80044bc:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80044be:	6963      	ldr	r3, [r4, #20]
 80044c0:	630b      	str	r3, [r1, #48]	; 0x30
 80044c2:	e7e5      	b.n	8004490 <HAL_TIM_Base_Init+0xb0>
    htim->Lock = HAL_UNLOCKED;
 80044c4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80044c8:	f7fd ffec 	bl	80024a4 <HAL_TIM_Base_MspInit>
 80044cc:	e792      	b.n	80043f4 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 80044ce:	2001      	movs	r0, #1
}
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	40010000 	.word	0x40010000

080044d8 <HAL_TIM_PWM_MspInit>:
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop

080044dc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80044dc:	2800      	cmp	r0, #0
 80044de:	d074      	beq.n	80045ca <HAL_TIM_PWM_Init+0xee>
{
 80044e0:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80044e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80044e6:	4604      	mov	r4, r0
 80044e8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d067      	beq.n	80045c0 <HAL_TIM_PWM_Init+0xe4>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044f0:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f2:	4a37      	ldr	r2, [pc, #220]	; (80045d0 <HAL_TIM_PWM_Init+0xf4>)
  htim->State = HAL_TIM_STATE_BUSY;
 80044f4:	2302      	movs	r3, #2
 80044f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044fa:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 80044fc:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044fe:	d04b      	beq.n	8004598 <HAL_TIM_PWM_Init+0xbc>
 8004500:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8004504:	d031      	beq.n	800456a <HAL_TIM_PWM_Init+0x8e>
 8004506:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800450a:	4291      	cmp	r1, r2
 800450c:	d02d      	beq.n	800456a <HAL_TIM_PWM_Init+0x8e>
 800450e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004512:	4291      	cmp	r1, r2
 8004514:	d029      	beq.n	800456a <HAL_TIM_PWM_Init+0x8e>
 8004516:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800451a:	4291      	cmp	r1, r2
 800451c:	d025      	beq.n	800456a <HAL_TIM_PWM_Init+0x8e>
 800451e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004522:	4291      	cmp	r1, r2
 8004524:	d038      	beq.n	8004598 <HAL_TIM_PWM_Init+0xbc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004526:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800452a:	4291      	cmp	r1, r2
 800452c:	d021      	beq.n	8004572 <HAL_TIM_PWM_Init+0x96>
 800452e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004532:	4291      	cmp	r1, r2
 8004534:	d01d      	beq.n	8004572 <HAL_TIM_PWM_Init+0x96>
 8004536:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800453a:	4291      	cmp	r1, r2
 800453c:	d019      	beq.n	8004572 <HAL_TIM_PWM_Init+0x96>
 800453e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004542:	4291      	cmp	r1, r2
 8004544:	d015      	beq.n	8004572 <HAL_TIM_PWM_Init+0x96>
 8004546:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800454a:	4291      	cmp	r1, r2
 800454c:	d011      	beq.n	8004572 <HAL_TIM_PWM_Init+0x96>
 800454e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004552:	4291      	cmp	r1, r2
 8004554:	d00d      	beq.n	8004572 <HAL_TIM_PWM_Init+0x96>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004556:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004558:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800455a:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800455c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004560:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004562:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004564:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004566:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004568:	e010      	b.n	800458c <HAL_TIM_PWM_Init+0xb0>
    tmpcr1 |= Structure->CounterMode;
 800456a:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800456c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004570:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004572:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004574:	69a2      	ldr	r2, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004576:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800457c:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800457e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004582:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8004584:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004586:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004588:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800458a:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800458c:	2301      	movs	r3, #1
 800458e:	614b      	str	r3, [r1, #20]
  htim->State = HAL_TIM_STATE_READY;
 8004590:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004594:	2000      	movs	r0, #0
}
 8004596:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8004598:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800459a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800459c:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800459e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80045a2:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80045a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045a8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045ae:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80045b0:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045b2:	68e3      	ldr	r3, [r4, #12]
 80045b4:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80045b6:	6863      	ldr	r3, [r4, #4]
 80045b8:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80045ba:	6963      	ldr	r3, [r4, #20]
 80045bc:	630b      	str	r3, [r1, #48]	; 0x30
 80045be:	e7e5      	b.n	800458c <HAL_TIM_PWM_Init+0xb0>
    htim->Lock = HAL_UNLOCKED;
 80045c0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80045c4:	f7ff ff88 	bl	80044d8 <HAL_TIM_PWM_MspInit>
 80045c8:	e792      	b.n	80044f0 <HAL_TIM_PWM_Init+0x14>
    return HAL_ERROR;
 80045ca:	2001      	movs	r0, #1
}
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40010000 	.word	0x40010000

080045d4 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80045d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80045d8:	2b01      	cmp	r3, #1
 80045da:	f000 80ce 	beq.w	800477a <HAL_TIM_PWM_ConfigChannel+0x1a6>
{
 80045de:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80045e0:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80045e2:	2401      	movs	r4, #1
 80045e4:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80045e8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80045ec:	2a0c      	cmp	r2, #12
 80045ee:	d835      	bhi.n	800465c <HAL_TIM_PWM_ConfigChannel+0x88>
 80045f0:	e8df f002 	tbb	[pc, r2]
 80045f4:	34343407 	.word	0x34343407
 80045f8:	3434346c 	.word	0x3434346c
 80045fc:	34343498 	.word	0x34343498
 8004600:	3d          	.byte	0x3d
 8004601:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004602:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004604:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004608:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800460a:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800460c:	4e75      	ldr	r6, [pc, #468]	; (80047e4 <HAL_TIM_PWM_ConfigChannel+0x210>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800460e:	f025 0501 	bic.w	r5, r5, #1
 8004612:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8004614:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004616:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004618:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 800461a:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800461e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004622:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 8004624:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmrx |= OC_Config->OCMode;
 8004628:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800462c:	f000 80a7 	beq.w	800477e <HAL_TIM_PWM_ConfigChannel+0x1aa>
 8004630:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004634:	42b3      	cmp	r3, r6
 8004636:	f000 80a2 	beq.w	800477e <HAL_TIM_PWM_ConfigChannel+0x1aa>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800463a:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800463c:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800463e:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004640:	635e      	str	r6, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004642:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004644:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004646:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004648:	f044 0408 	orr.w	r4, r4, #8
 800464c:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800464e:	6999      	ldr	r1, [r3, #24]
 8004650:	f021 0104 	bic.w	r1, r1, #4
 8004654:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004656:	699a      	ldr	r2, [r3, #24]
 8004658:	432a      	orrs	r2, r5
 800465a:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800465c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800465e:	2201      	movs	r2, #1
 8004660:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004664:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8004668:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800466a:	4618      	mov	r0, r3
}
 800466c:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800466e:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004670:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004674:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004676:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004678:	4e5a      	ldr	r6, [pc, #360]	; (80047e4 <HAL_TIM_PWM_ConfigChannel+0x210>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800467a:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 800467e:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8004680:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004682:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004684:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8004686:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800468a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800468e:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004690:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004694:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004698:	f000 808e 	beq.w	80047b8 <HAL_TIM_PWM_ConfigChannel+0x1e4>
 800469c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80046a0:	42b3      	cmp	r3, r6
 80046a2:	f000 8089 	beq.w	80047b8 <HAL_TIM_PWM_ConfigChannel+0x1e4>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046a6:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80046a8:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80046aa:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80046ac:	641e      	str	r6, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ae:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046b0:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046b2:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046b4:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80046b8:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046ba:	69d9      	ldr	r1, [r3, #28]
 80046bc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80046c0:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046c2:	69da      	ldr	r2, [r3, #28]
 80046c4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80046c8:	61da      	str	r2, [r3, #28]
      break;
 80046ca:	e7c7      	b.n	800465c <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046cc:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046ce:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046d0:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046d2:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046d4:	f8df c10c 	ldr.w	ip, [pc, #268]	; 80047e4 <HAL_TIM_PWM_ConfigChannel+0x210>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046d8:	f025 0510 	bic.w	r5, r5, #16
 80046dc:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80046de:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80046e0:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80046e2:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 80046e4:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046e8:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046ec:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046ee:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046f2:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046f6:	d04f      	beq.n	8004798 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 80046f8:	4f3b      	ldr	r7, [pc, #236]	; (80047e8 <HAL_TIM_PWM_ConfigChannel+0x214>)
 80046fa:	42bb      	cmp	r3, r7
 80046fc:	d04c      	beq.n	8004798 <HAL_TIM_PWM_ConfigChannel+0x1c4>
  TIMx->CCR2 = OC_Config->Pulse;
 80046fe:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004700:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004702:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004704:	639e      	str	r6, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004706:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004708:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800470a:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800470c:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8004710:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004712:	6999      	ldr	r1, [r3, #24]
 8004714:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004718:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800471a:	699a      	ldr	r2, [r3, #24]
 800471c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004720:	619a      	str	r2, [r3, #24]
      break;
 8004722:	e79b      	b.n	800465c <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004724:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004726:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004728:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800472a:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800472c:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80047e4 <HAL_TIM_PWM_ConfigChannel+0x210>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004730:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8004734:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8004736:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004738:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800473a:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 800473c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004740:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004744:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004746:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800474a:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800474e:	d039      	beq.n	80047c4 <HAL_TIM_PWM_ConfigChannel+0x1f0>
 8004750:	4f25      	ldr	r7, [pc, #148]	; (80047e8 <HAL_TIM_PWM_ConfigChannel+0x214>)
 8004752:	42bb      	cmp	r3, r7
 8004754:	d036      	beq.n	80047c4 <HAL_TIM_PWM_ConfigChannel+0x1f0>
  TIMx->CCR3 = OC_Config->Pulse;
 8004756:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004758:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800475a:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800475c:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800475e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004760:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004762:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004764:	f044 0408 	orr.w	r4, r4, #8
 8004768:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800476a:	69d9      	ldr	r1, [r3, #28]
 800476c:	f021 0104 	bic.w	r1, r1, #4
 8004770:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004772:	69da      	ldr	r2, [r3, #28]
 8004774:	432a      	orrs	r2, r5
 8004776:	61da      	str	r2, [r3, #28]
      break;
 8004778:	e770      	b.n	800465c <HAL_TIM_PWM_ConfigChannel+0x88>
  __HAL_LOCK(htim);
 800477a:	2002      	movs	r0, #2
}
 800477c:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 800477e:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004780:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004784:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8004786:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800478a:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800478e:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 8004790:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004794:	4335      	orrs	r5, r6
 8004796:	e750      	b.n	800463a <HAL_TIM_PWM_ConfigChannel+0x66>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004798:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800479a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800479e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047a2:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047a6:	f425 6c40 	bic.w	ip, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047aa:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 80047ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047b2:	ea4c 0585 	orr.w	r5, ip, r5, lsl #2
 80047b6:	e7a2      	b.n	80046fe <HAL_TIM_PWM_ConfigChannel+0x12a>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047b8:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047ba:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047be:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 80047c2:	e770      	b.n	80046a6 <HAL_TIM_PWM_ConfigChannel+0xd2>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047c4:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80047c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047ca:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047ce:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047d2:	f425 5c40 	bic.w	ip, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047d6:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 80047da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047de:	ea4c 1505 	orr.w	r5, ip, r5, lsl #4
 80047e2:	e7b8      	b.n	8004756 <HAL_TIM_PWM_ConfigChannel+0x182>
 80047e4:	40010000 	.word	0x40010000
 80047e8:	40010400 	.word	0x40010400

080047ec <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80047ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d074      	beq.n	80048de <HAL_TIM_ConfigClockSource+0xf2>
{
 80047f4:	b4f0      	push	{r4, r5, r6, r7}
  tmpsmcr = htim->Instance->SMCR;
 80047f6:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 80047f8:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80047fa:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80047fc:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004800:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004804:	6894      	ldr	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004806:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004808:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 800480c:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8004810:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8004812:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004814:	d065      	beq.n	80048e2 <HAL_TIM_ConfigClockSource+0xf6>
 8004816:	d831      	bhi.n	800487c <HAL_TIM_ConfigClockSource+0x90>
 8004818:	2b40      	cmp	r3, #64	; 0x40
 800481a:	d048      	beq.n	80048ae <HAL_TIM_ConfigClockSource+0xc2>
 800481c:	d921      	bls.n	8004862 <HAL_TIM_ConfigClockSource+0x76>
 800481e:	2b50      	cmp	r3, #80	; 0x50
 8004820:	d116      	bne.n	8004850 <HAL_TIM_ConfigClockSource+0x64>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004822:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004824:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004826:	684c      	ldr	r4, [r1, #4]
 8004828:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800482a:	f026 0601 	bic.w	r6, r6, #1
 800482e:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004830:	6993      	ldr	r3, [r2, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004832:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004836:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800483a:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 800483e:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004840:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8004842:	6211      	str	r1, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004844:	6893      	ldr	r3, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800484a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800484e:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 8004850:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004852:	2201      	movs	r2, #1
 8004854:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004858:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800485c:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800485e:	4618      	mov	r0, r3
}
 8004860:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8004862:	2b20      	cmp	r3, #32
 8004864:	d002      	beq.n	800486c <HAL_TIM_ConfigClockSource+0x80>
 8004866:	d91e      	bls.n	80048a6 <HAL_TIM_ConfigClockSource+0xba>
 8004868:	2b30      	cmp	r3, #48	; 0x30
 800486a:	d1f1      	bne.n	8004850 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 800486c:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800486e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004872:	430b      	orrs	r3, r1
 8004874:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8004878:	6093      	str	r3, [r2, #8]
}
 800487a:	e7e9      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 800487c:	2b70      	cmp	r3, #112	; 0x70
 800487e:	d049      	beq.n	8004914 <HAL_TIM_ConfigClockSource+0x128>
 8004880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004884:	d1e4      	bne.n	8004850 <HAL_TIM_ConfigClockSource+0x64>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004886:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 800488a:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 800488c:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800488e:	432b      	orrs	r3, r5
 8004890:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004894:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004898:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800489a:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800489c:	6893      	ldr	r3, [r2, #8]
 800489e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048a2:	6093      	str	r3, [r2, #8]
      break;
 80048a4:	e7d4      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 80048a6:	f033 0110 	bics.w	r1, r3, #16
 80048aa:	d1d1      	bne.n	8004850 <HAL_TIM_ConfigClockSource+0x64>
 80048ac:	e7de      	b.n	800486c <HAL_TIM_ConfigClockSource+0x80>
  tmpccer = TIMx->CCER;
 80048ae:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048b0:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048b2:	684c      	ldr	r4, [r1, #4]
 80048b4:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048b6:	f026 0601 	bic.w	r6, r6, #1
 80048ba:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048bc:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048be:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048c6:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80048ca:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80048cc:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 80048ce:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80048d0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80048d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048d6:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80048da:	6093      	str	r3, [r2, #8]
}
 80048dc:	e7b8      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x64>
  __HAL_LOCK(htim);
 80048de:	2002      	movs	r0, #2
}
 80048e0:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048e2:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048e4:	684d      	ldr	r5, [r1, #4]
 80048e6:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048e8:	f024 0410 	bic.w	r4, r4, #16
 80048ec:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ee:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 80048f0:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048f2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80048fa:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048fe:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004902:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8004904:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8004906:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800490c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004910:	6093      	str	r3, [r2, #8]
}
 8004912:	e79d      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004914:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8004918:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 800491a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800491c:	432b      	orrs	r3, r5
 800491e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004922:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004926:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004928:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800492a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800492c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004930:	6093      	str	r3, [r2, #8]
      break;
 8004932:	e78d      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x64>

08004934 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8004934:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8004938:	2a01      	cmp	r2, #1
 800493a:	d049      	beq.n	80049d0 <HAL_TIM_SlaveConfigSynchro+0x9c>
 800493c:	4603      	mov	r3, r0
{
 800493e:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8004940:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8004942:	681c      	ldr	r4, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004948:	2001      	movs	r0, #1
 800494a:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800494e:	e9d1 6500 	ldrd	r6, r5, [r1]
  tmpsmcr = htim->Instance->SMCR;
 8004952:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004954:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004958:	432a      	orrs	r2, r5
  tmpsmcr &= ~TIM_SMCR_SMS;
 800495a:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800495e:	4332      	orrs	r2, r6
  switch (sSlaveConfig->InputTrigger)
 8004960:	2d60      	cmp	r5, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8004962:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8004964:	d04d      	beq.n	8004a02 <HAL_TIM_SlaveConfigSynchro+0xce>
 8004966:	d825      	bhi.n	80049b4 <HAL_TIM_SlaveConfigSynchro+0x80>
 8004968:	2d40      	cmp	r5, #64	; 0x40
 800496a:	d033      	beq.n	80049d4 <HAL_TIM_SlaveConfigSynchro+0xa0>
 800496c:	2d50      	cmp	r5, #80	; 0x50
 800496e:	d110      	bne.n	8004992 <HAL_TIM_SlaveConfigSynchro+0x5e>
  tmpccer = TIMx->CCER;
 8004970:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004972:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004974:	6888      	ldr	r0, [r1, #8]
 8004976:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004978:	f026 0601 	bic.w	r6, r6, #1
 800497c:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800497e:	69a2      	ldr	r2, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004980:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004984:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8004988:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800498a:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800498e:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8004990:	6221      	str	r1, [r4, #32]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004992:	68e2      	ldr	r2, [r4, #12]
 8004994:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004998:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800499a:	68e2      	ldr	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 800499c:	2501      	movs	r5, #1
  __HAL_UNLOCK(htim);
 800499e:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80049a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049a4:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 80049a6:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80049aa:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
  return HAL_OK;
 80049ae:	4608      	mov	r0, r1
}
 80049b0:	bcf0      	pop	{r4, r5, r6, r7}
 80049b2:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80049b4:	2d70      	cmp	r5, #112	; 0x70
 80049b6:	d1ec      	bne.n	8004992 <HAL_TIM_SlaveConfigSynchro+0x5e>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049b8:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
 80049bc:	6908      	ldr	r0, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 80049be:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049c0:	432a      	orrs	r2, r5
 80049c2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049c6:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049ca:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80049cc:	60a2      	str	r2, [r4, #8]
 80049ce:	e7e0      	b.n	8004992 <HAL_TIM_SlaveConfigSynchro+0x5e>
  __HAL_LOCK(htim);
 80049d0:	2002      	movs	r0, #2
}
 80049d2:	4770      	bx	lr
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80049d4:	2e05      	cmp	r6, #5
 80049d6:	d00d      	beq.n	80049f4 <HAL_TIM_SlaveConfigSynchro+0xc0>
      tmpccer = htim->Instance->CCER;
 80049d8:	6a25      	ldr	r5, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80049da:	6a20      	ldr	r0, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80049dc:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80049de:	f020 0001 	bic.w	r0, r0, #1
 80049e2:	6220      	str	r0, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80049e4:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049e6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80049ea:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80049ee:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 80049f0:	6225      	str	r5, [r4, #32]
      break;
 80049f2:	e7ce      	b.n	8004992 <HAL_TIM_SlaveConfigSynchro+0x5e>
    __HAL_UNLOCK(htim);
 80049f4:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 80049f6:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80049fe:	bcf0      	pop	{r4, r5, r6, r7}
 8004a00:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a02:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a04:	688d      	ldr	r5, [r1, #8]
 8004a06:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a08:	f020 0010 	bic.w	r0, r0, #16
 8004a0c:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a0e:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8004a10:	6a22      	ldr	r2, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a12:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a16:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a1a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a1e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8004a22:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8004a24:	6222      	str	r2, [r4, #32]
 8004a26:	e7b4      	b.n	8004992 <HAL_TIM_SlaveConfigSynchro+0x5e>

08004a28 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a28:	4a2f      	ldr	r2, [pc, #188]	; (8004ae8 <TIM_Base_SetConfig+0xc0>)
  tmpcr1 = TIMx->CR1;
 8004a2a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a2c:	4290      	cmp	r0, r2
{
 8004a2e:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a30:	d043      	beq.n	8004aba <TIM_Base_SetConfig+0x92>
 8004a32:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004a36:	d034      	beq.n	8004aa2 <TIM_Base_SetConfig+0x7a>
 8004a38:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004a3c:	4290      	cmp	r0, r2
 8004a3e:	d030      	beq.n	8004aa2 <TIM_Base_SetConfig+0x7a>
 8004a40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a44:	4290      	cmp	r0, r2
 8004a46:	d02c      	beq.n	8004aa2 <TIM_Base_SetConfig+0x7a>
 8004a48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a4c:	4290      	cmp	r0, r2
 8004a4e:	d028      	beq.n	8004aa2 <TIM_Base_SetConfig+0x7a>
 8004a50:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004a54:	4290      	cmp	r0, r2
 8004a56:	d030      	beq.n	8004aba <TIM_Base_SetConfig+0x92>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a58:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004a5c:	4290      	cmp	r0, r2
 8004a5e:	d024      	beq.n	8004aaa <TIM_Base_SetConfig+0x82>
 8004a60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a64:	4290      	cmp	r0, r2
 8004a66:	d020      	beq.n	8004aaa <TIM_Base_SetConfig+0x82>
 8004a68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a6c:	4290      	cmp	r0, r2
 8004a6e:	d01c      	beq.n	8004aaa <TIM_Base_SetConfig+0x82>
 8004a70:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004a74:	4290      	cmp	r0, r2
 8004a76:	d018      	beq.n	8004aaa <TIM_Base_SetConfig+0x82>
 8004a78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a7c:	4290      	cmp	r0, r2
 8004a7e:	d014      	beq.n	8004aaa <TIM_Base_SetConfig+0x82>
 8004a80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a84:	4290      	cmp	r0, r2
 8004a86:	d010      	beq.n	8004aaa <TIM_Base_SetConfig+0x82>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a88:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a8a:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8004a8c:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a92:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004a94:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8004a96:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a98:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004a9a:	6282      	str	r2, [r0, #40]	; 0x28
}
 8004a9c:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 8004a9e:	6143      	str	r3, [r0, #20]
}
 8004aa0:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8004aa2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004aa8:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aaa:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aac:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aae:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8004ab0:	680a      	ldr	r2, [r1, #0]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ab6:	4333      	orrs	r3, r6
 8004ab8:	e7e9      	b.n	8004a8e <TIM_Base_SetConfig+0x66>
    tmpcr1 |= Structure->CounterMode;
 8004aba:	684d      	ldr	r5, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004abc:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004abe:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004ac4:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aca:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004acc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ad0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004ad2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ad4:	688b      	ldr	r3, [r1, #8]
 8004ad6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004ad8:	680b      	ldr	r3, [r1, #0]
 8004ada:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004adc:	690b      	ldr	r3, [r1, #16]
 8004ade:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004ae0:	2301      	movs	r3, #1
}
 8004ae2:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 8004ae4:	6143      	str	r3, [r0, #20]
}
 8004ae6:	4770      	bx	lr
 8004ae8:	40010000 	.word	0x40010000

08004aec <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aec:	6a03      	ldr	r3, [r0, #32]
 8004aee:	f023 0310 	bic.w	r3, r3, #16
 8004af2:	6203      	str	r3, [r0, #32]
{
 8004af4:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer = TIMx->CCER;
 8004af6:	6a03      	ldr	r3, [r0, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004af8:	4c13      	ldr	r4, [pc, #76]	; (8004b48 <TIM_OC2_SetConfig+0x5c>)
  tmpcr2 =  TIMx->CR2;
 8004afa:	6847      	ldr	r7, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004afc:	6982      	ldr	r2, [r0, #24]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004afe:	688e      	ldr	r6, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b00:	680d      	ldr	r5, [r1, #0]
  tmpccer &= ~TIM_CCER_CC2P;
 8004b02:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b06:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b0a:	42a0      	cmp	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b0c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b10:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b14:	d009      	beq.n	8004b2a <TIM_OC2_SetConfig+0x3e>
 8004b16:	4d0d      	ldr	r5, [pc, #52]	; (8004b4c <TIM_OC2_SetConfig+0x60>)
 8004b18:	42a8      	cmp	r0, r5
 8004b1a:	d006      	beq.n	8004b2a <TIM_OC2_SetConfig+0x3e>
  TIMx->CCR2 = OC_Config->Pulse;
 8004b1c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004b1e:	6047      	str	r7, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004b20:	6182      	str	r2, [r0, #24]
}
 8004b22:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8004b24:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004b26:	6203      	str	r3, [r0, #32]
}
 8004b28:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b2a:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b30:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b34:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b38:	f427 6740 	bic.w	r7, r7, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b3c:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b42:	ea47 0784 	orr.w	r7, r7, r4, lsl #2
 8004b46:	e7e9      	b.n	8004b1c <TIM_OC2_SetConfig+0x30>
 8004b48:	40010000 	.word	0x40010000
 8004b4c:	40010400 	.word	0x40010400

08004b50 <TIM_TI1_SetConfig>:
{
 8004b50:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b52:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004b54:	4e1b      	ldr	r6, [pc, #108]	; (8004bc4 <TIM_TI1_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b56:	f024 0401 	bic.w	r4, r4, #1
 8004b5a:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004b5c:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8004b5e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004b60:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004b62:	d01d      	beq.n	8004ba0 <TIM_TI1_SetConfig+0x50>
 8004b64:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004b68:	d01a      	beq.n	8004ba0 <TIM_TI1_SetConfig+0x50>
 8004b6a:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8004b6e:	42b0      	cmp	r0, r6
 8004b70:	d016      	beq.n	8004ba0 <TIM_TI1_SetConfig+0x50>
 8004b72:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004b76:	42b0      	cmp	r0, r6
 8004b78:	d012      	beq.n	8004ba0 <TIM_TI1_SetConfig+0x50>
 8004b7a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004b7e:	42b0      	cmp	r0, r6
 8004b80:	d00e      	beq.n	8004ba0 <TIM_TI1_SetConfig+0x50>
 8004b82:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8004b86:	42b0      	cmp	r0, r6
 8004b88:	d00a      	beq.n	8004ba0 <TIM_TI1_SetConfig+0x50>
 8004b8a:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8004b8e:	42b0      	cmp	r0, r6
 8004b90:	d006      	beq.n	8004ba0 <TIM_TI1_SetConfig+0x50>
 8004b92:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8004b96:	42b0      	cmp	r0, r6
 8004b98:	d002      	beq.n	8004ba0 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004b9a:	f044 0201 	orr.w	r2, r4, #1
 8004b9e:	e002      	b.n	8004ba6 <TIM_TI1_SetConfig+0x56>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004ba0:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8004ba4:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004ba6:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ba8:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004bac:	b2db      	uxtb	r3, r3
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004bb2:	f001 010a 	and.w	r1, r1, #10
 8004bb6:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004bb8:	4313      	orrs	r3, r2
  TIMx->CCMR1 = tmpccmr1;
 8004bba:	6183      	str	r3, [r0, #24]
}
 8004bbc:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 8004bbe:	6201      	str	r1, [r0, #32]
}
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	40010000 	.word	0x40010000

08004bc8 <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop

08004bcc <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	d055      	beq.n	8004c7c <HAL_TIMEx_HallSensor_Init+0xb0>
{
 8004bd0:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004bd2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	460d      	mov	r5, r1
 8004bda:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004bdc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d046      	beq.n	8004c72 <HAL_TIMEx_HallSensor_Init+0xa6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be4:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8004be6:	2302      	movs	r3, #2
 8004be8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bec:	f851 0b04 	ldr.w	r0, [r1], #4
 8004bf0:	f7ff ff1a 	bl	8004a28 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8004bf4:	68ab      	ldr	r3, [r5, #8]
 8004bf6:	6829      	ldr	r1, [r5, #0]
 8004bf8:	6820      	ldr	r0, [r4, #0]
 8004bfa:	2203      	movs	r2, #3
 8004bfc:	f7ff ffa8 	bl	8004b50 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004c00:	6820      	ldr	r0, [r4, #0]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8004c02:	686e      	ldr	r6, [r5, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004c04:	6982      	ldr	r2, [r0, #24]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004c06:	68e9      	ldr	r1, [r5, #12]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004c08:	f022 020c 	bic.w	r2, r2, #12
 8004c0c:	6182      	str	r2, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8004c0e:	6983      	ldr	r3, [r0, #24]
 8004c10:	4333      	orrs	r3, r6
 8004c12:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8004c14:	6843      	ldr	r3, [r0, #4]
 8004c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c1a:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004c1c:	6883      	ldr	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004c1e:	9102      	str	r1, [sp, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c24:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8004c26:	6883      	ldr	r3, [r0, #8]
 8004c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c2c:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004c2e:	6883      	ldr	r3, [r0, #8]
 8004c30:	f023 0307 	bic.w	r3, r3, #7
 8004c34:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8004c36:	6883      	ldr	r3, [r0, #8]
 8004c38:	f043 0304 	orr.w	r3, r3, #4
 8004c3c:	6083      	str	r3, [r0, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8004c3e:	2500      	movs	r5, #0
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8004c40:	2370      	movs	r3, #112	; 0x70
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004c42:	a901      	add	r1, sp, #4
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8004c44:	9301      	str	r3, [sp, #4]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004c46:	e9cd 5505 	strd	r5, r5, [sp, #20]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c4a:	e9cd 5503 	strd	r5, r5, [sp, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004c4e:	9507      	str	r5, [sp, #28]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004c50:	f7ff ff4c 	bl	8004aec <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004c5c:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004c5e:	685a      	ldr	r2, [r3, #4]
  htim->State = HAL_TIM_STATE_READY;
 8004c60:	2101      	movs	r1, #1
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004c62:	f042 0250 	orr.w	r2, r2, #80	; 0x50
  return HAL_OK;
 8004c66:	4628      	mov	r0, r5
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004c68:	605a      	str	r2, [r3, #4]
  htim->State = HAL_TIM_STATE_READY;
 8004c6a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
}
 8004c6e:	b008      	add	sp, #32
 8004c70:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004c72:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 8004c76:	f7ff ffa7 	bl	8004bc8 <HAL_TIMEx_HallSensor_MspInit>
 8004c7a:	e7b3      	b.n	8004be4 <HAL_TIMEx_HallSensor_Init+0x18>
    return HAL_ERROR;
 8004c7c:	2001      	movs	r0, #1
}
 8004c7e:	4770      	bx	lr

08004c80 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c80:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d036      	beq.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0x76>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c88:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004c8a:	2202      	movs	r2, #2
{
 8004c8c:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004c8e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004c92:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c94:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c96:	4d19      	ldr	r5, [pc, #100]	; (8004cfc <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c98:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c9c:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c9e:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 8004ca0:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 8004ca2:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ca4:	d019      	beq.n	8004cda <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8004ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004caa:	d016      	beq.n	8004cda <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8004cac:	4a14      	ldr	r2, [pc, #80]	; (8004d00 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d013      	beq.n	8004cda <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8004cb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00f      	beq.n	8004cda <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8004cba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00b      	beq.n	8004cda <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8004cc2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d007      	beq.n	8004cda <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8004cca:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d003      	beq.n	8004cda <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8004cd2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d104      	bne.n	8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cda:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cdc:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ce0:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ce2:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004ce4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004cec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8004cf0:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8004cf2:	4618      	mov	r0, r3
}
 8004cf4:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004cf6:	2002      	movs	r0, #2
}
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	40010000 	.word	0x40010000
 8004d00:	40000400 	.word	0x40000400

08004d04 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d04:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d022      	beq.n	8004d52 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
{
 8004d0c:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d0e:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8004d12:	4604      	mov	r4, r0
 8004d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d18:	e9d1 2000 	ldrd	r2, r0, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d1c:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d22:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d28:	e9d1 5004 	ldrd	r5, r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d2c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d32:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d38:	69c9      	ldr	r1, [r1, #28]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d3a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d3c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d42:	430b      	orrs	r3, r1

  __HAL_UNLOCK(htim);
 8004d44:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8004d46:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8004d48:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c

  return HAL_OK;
 8004d4c:	4608      	mov	r0, r1
}
 8004d4e:	bc30      	pop	{r4, r5}
 8004d50:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004d52:	2002      	movs	r0, #2
}
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop

08004d58 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	f000 8098 	beq.w	8004e8e <HAL_UART_Init+0x136>
{
 8004d5e:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d60:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004d64:	4604      	mov	r4, r0
 8004d66:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 8087 	beq.w	8004e7e <HAL_UART_Init+0x126>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d70:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d72:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8004d74:	2224      	movs	r2, #36	; 0x24
 8004d76:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8004d7a:	68d8      	ldr	r0, [r3, #12]
 8004d7c:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d80:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8004d84:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d86:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d88:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d8a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8004d8e:	4329      	orrs	r1, r5
 8004d90:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004d92:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d94:	6965      	ldr	r5, [r4, #20]
 8004d96:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 8004d98:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d9c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8004d9e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004da2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004da4:	430a      	orrs	r2, r1
 8004da6:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004da8:	695a      	ldr	r2, [r3, #20]
 8004daa:	69a1      	ldr	r1, [r4, #24]
 8004dac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004db0:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004db2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004db6:	615a      	str	r2, [r3, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004db8:	4a36      	ldr	r2, [pc, #216]	; (8004e94 <HAL_UART_Init+0x13c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dba:	d037      	beq.n	8004e2c <HAL_UART_Init+0xd4>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d032      	beq.n	8004e26 <HAL_UART_Init+0xce>
 8004dc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d02e      	beq.n	8004e26 <HAL_UART_Init+0xce>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004dc8:	f7ff f8be 	bl	8003f48 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dcc:	6863      	ldr	r3, [r4, #4]
 8004dce:	4e32      	ldr	r6, [pc, #200]	; (8004e98 <HAL_UART_Init+0x140>)
 8004dd0:	2219      	movs	r2, #25
 8004dd2:	fba0 0102 	umull	r0, r1, r0, r2
 8004dd6:	009a      	lsls	r2, r3, #2
 8004dd8:	0f9b      	lsrs	r3, r3, #30
 8004dda:	f7fb fa71 	bl	80002c0 <__aeabi_uldivmod>
 8004dde:	fba6 2500 	umull	r2, r5, r6, r0
 8004de2:	096d      	lsrs	r5, r5, #5
 8004de4:	2164      	movs	r1, #100	; 0x64
 8004de6:	fb01 0215 	mls	r2, r1, r5, r0
 8004dea:	0112      	lsls	r2, r2, #4
 8004dec:	3232      	adds	r2, #50	; 0x32
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	fba6 1202 	umull	r1, r2, r6, r2
 8004df4:	012d      	lsls	r5, r5, #4
 8004df6:	eb05 1252 	add.w	r2, r5, r2, lsr #5
 8004dfa:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dfc:	691a      	ldr	r2, [r3, #16]
 8004dfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e02:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e04:	695a      	ldr	r2, [r3, #20]
 8004e06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e0a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004e0c:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e0e:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8004e10:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8004e12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e16:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e18:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004e1a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004e1e:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
  return HAL_OK;
 8004e22:	4628      	mov	r0, r5
}
 8004e24:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e26:	f7ff f89f 	bl	8003f68 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e2a:	e7cf      	b.n	8004dcc <HAL_UART_Init+0x74>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d02b      	beq.n	8004e88 <HAL_UART_Init+0x130>
 8004e30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d027      	beq.n	8004e88 <HAL_UART_Init+0x130>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e38:	f7ff f886 	bl	8003f48 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e3c:	6862      	ldr	r2, [r4, #4]
 8004e3e:	4e16      	ldr	r6, [pc, #88]	; (8004e98 <HAL_UART_Init+0x140>)
 8004e40:	1892      	adds	r2, r2, r2
 8004e42:	f04f 0300 	mov.w	r3, #0
 8004e46:	f04f 0119 	mov.w	r1, #25
 8004e4a:	415b      	adcs	r3, r3
 8004e4c:	fba0 0101 	umull	r0, r1, r0, r1
 8004e50:	f7fb fa36 	bl	80002c0 <__aeabi_uldivmod>
 8004e54:	fba6 2100 	umull	r2, r1, r6, r0
 8004e58:	094d      	lsrs	r5, r1, #5
 8004e5a:	2164      	movs	r1, #100	; 0x64
 8004e5c:	fb01 0215 	mls	r2, r1, r5, r0
 8004e60:	00d2      	lsls	r2, r2, #3
 8004e62:	3232      	adds	r2, #50	; 0x32
 8004e64:	fba6 1202 	umull	r1, r2, r6, r2
 8004e68:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8004e6c:	0912      	lsrs	r2, r2, #4
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8004e74:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8004e78:	440a      	add	r2, r1
 8004e7a:	609a      	str	r2, [r3, #8]
 8004e7c:	e7be      	b.n	8004dfc <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8004e7e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8004e82:	f7fd fbd3 	bl	800262c <HAL_UART_MspInit>
 8004e86:	e773      	b.n	8004d70 <HAL_UART_Init+0x18>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e88:	f7ff f86e 	bl	8003f68 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e8c:	e7d6      	b.n	8004e3c <HAL_UART_Init+0xe4>
    return HAL_ERROR;
 8004e8e:	2001      	movs	r0, #1
}
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40011000 	.word	0x40011000
 8004e98:	51eb851f 	.word	0x51eb851f

08004e9c <HAL_UART_Transmit>:
{
 8004e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8004ea2:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 8004ea6:	2820      	cmp	r0, #32
 8004ea8:	d17c      	bne.n	8004fa4 <HAL_UART_Transmit+0x108>
    if ((pData == NULL) || (Size == 0U))
 8004eaa:	460e      	mov	r6, r1
 8004eac:	2900      	cmp	r1, #0
 8004eae:	d055      	beq.n	8004f5c <HAL_UART_Transmit+0xc0>
 8004eb0:	4615      	mov	r5, r2
 8004eb2:	2a00      	cmp	r2, #0
 8004eb4:	d052      	beq.n	8004f5c <HAL_UART_Transmit+0xc0>
 8004eb6:	4698      	mov	r8, r3
    __HAL_LOCK(huart);
 8004eb8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d071      	beq.n	8004fa4 <HAL_UART_Transmit+0x108>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec0:	2700      	movs	r7, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ec2:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8004ec4:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec6:	63e7      	str	r7, [r4, #60]	; 0x3c
    __HAL_LOCK(huart);
 8004ec8:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ecc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    tickstart = HAL_GetTick();
 8004ed0:	f7fe fb20 	bl	8003514 <HAL_GetTick>
    huart->TxXferCount = Size;
 8004ed4:	84e5      	strh	r5, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ed6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8004ed8:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8004edc:	b29b      	uxth	r3, r3
    huart->TxXferSize = Size;
 8004ede:	84a5      	strh	r5, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8004ee0:	4607      	mov	r7, r0
    while (huart->TxXferCount > 0U)
 8004ee2:	6825      	ldr	r5, [r4, #0]
 8004ee4:	b1a3      	cbz	r3, 8004f10 <HAL_UART_Transmit+0x74>
      huart->TxXferCount--;
 8004ee6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004ee8:	68a1      	ldr	r1, [r4, #8]
      huart->TxXferCount--;
 8004eea:	3a01      	subs	r2, #1
 8004eec:	b292      	uxth	r2, r2
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004eee:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      huart->TxXferCount--;
 8004ef2:	84e2      	strh	r2, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004ef4:	d024      	beq.n	8004f40 <HAL_UART_Transmit+0xa4>
 8004ef6:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004efa:	d132      	bne.n	8004f62 <HAL_UART_Transmit+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004efc:	682b      	ldr	r3, [r5, #0]
 8004efe:	0618      	lsls	r0, r3, #24
 8004f00:	d5fc      	bpl.n	8004efc <HAL_UART_Transmit+0x60>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004f02:	f816 3b01 	ldrb.w	r3, [r6], #1
 8004f06:	606b      	str	r3, [r5, #4]
    while (huart->TxXferCount > 0U)
 8004f08:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1ea      	bne.n	8004ee6 <HAL_UART_Transmit+0x4a>
 8004f10:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004f14:	d149      	bne.n	8004faa <HAL_UART_Transmit+0x10e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f16:	682b      	ldr	r3, [r5, #0]
 8004f18:	065a      	lsls	r2, r3, #25
 8004f1a:	d5fc      	bpl.n	8004f16 <HAL_UART_Transmit+0x7a>
    huart->gState = HAL_UART_STATE_READY;
 8004f1c:	2320      	movs	r3, #32
 8004f1e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8004f22:	2000      	movs	r0, #0
}
 8004f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f28:	682b      	ldr	r3, [r5, #0]
 8004f2a:	061b      	lsls	r3, r3, #24
 8004f2c:	d40e      	bmi.n	8004f4c <HAL_UART_Transmit+0xb0>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f2e:	f1b8 0f00 	cmp.w	r8, #0
 8004f32:	d022      	beq.n	8004f7a <HAL_UART_Transmit+0xde>
 8004f34:	f7fe faee 	bl	8003514 <HAL_GetTick>
 8004f38:	1bc0      	subs	r0, r0, r7
 8004f3a:	4580      	cmp	r8, r0
 8004f3c:	6825      	ldr	r5, [r4, #0]
 8004f3e:	d31c      	bcc.n	8004f7a <HAL_UART_Transmit+0xde>
 8004f40:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004f44:	d1f0      	bne.n	8004f28 <HAL_UART_Transmit+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f46:	682b      	ldr	r3, [r5, #0]
 8004f48:	061a      	lsls	r2, r3, #24
 8004f4a:	d5fc      	bpl.n	8004f46 <HAL_UART_Transmit+0xaa>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004f4c:	8833      	ldrh	r3, [r6, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004f4e:	6922      	ldr	r2, [r4, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f54:	606b      	str	r3, [r5, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004f56:	bb1a      	cbnz	r2, 8004fa0 <HAL_UART_Transmit+0x104>
          pData += 2U;
 8004f58:	3602      	adds	r6, #2
 8004f5a:	e7d5      	b.n	8004f08 <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 8004f5c:	2001      	movs	r0, #1
}
 8004f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f62:	682b      	ldr	r3, [r5, #0]
 8004f64:	0619      	lsls	r1, r3, #24
 8004f66:	d4cc      	bmi.n	8004f02 <HAL_UART_Transmit+0x66>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f68:	f1b8 0f00 	cmp.w	r8, #0
 8004f6c:	d005      	beq.n	8004f7a <HAL_UART_Transmit+0xde>
 8004f6e:	f7fe fad1 	bl	8003514 <HAL_GetTick>
 8004f72:	1bc0      	subs	r0, r0, r7
 8004f74:	4580      	cmp	r8, r0
 8004f76:	6825      	ldr	r5, [r4, #0]
 8004f78:	d2bd      	bcs.n	8004ef6 <HAL_UART_Transmit+0x5a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f7a:	68eb      	ldr	r3, [r5, #12]
 8004f7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f80:	60eb      	str	r3, [r5, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f82:	696b      	ldr	r3, [r5, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8004f84:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f86:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8004f8a:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8c:	616b      	str	r3, [r5, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8004f8e:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
        __HAL_UNLOCK(huart);
 8004f92:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8004f96:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
      return HAL_TIMEOUT;
 8004f9a:	2003      	movs	r0, #3
}
 8004f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          pData += 1U;
 8004fa0:	3601      	adds	r6, #1
 8004fa2:	e7b1      	b.n	8004f08 <HAL_UART_Transmit+0x6c>
    return HAL_BUSY;
 8004fa4:	2002      	movs	r0, #2
}
 8004fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004faa:	682b      	ldr	r3, [r5, #0]
 8004fac:	065b      	lsls	r3, r3, #25
 8004fae:	d4b5      	bmi.n	8004f1c <HAL_UART_Transmit+0x80>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004fb0:	f1b8 0f00 	cmp.w	r8, #0
 8004fb4:	d0e1      	beq.n	8004f7a <HAL_UART_Transmit+0xde>
 8004fb6:	f7fe faad 	bl	8003514 <HAL_GetTick>
 8004fba:	1bc0      	subs	r0, r0, r7
 8004fbc:	4580      	cmp	r8, r0
 8004fbe:	6825      	ldr	r5, [r4, #0]
 8004fc0:	d2a6      	bcs.n	8004f10 <HAL_UART_Transmit+0x74>
 8004fc2:	e7da      	b.n	8004f7a <HAL_UART_Transmit+0xde>

08004fc4 <VBS_GetAvBusVoltage_d>:
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
__weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
  return ( pHandle->AvBusVoltage_d );
}
 8004fc4:	88c0      	ldrh	r0, [r0, #6]
 8004fc6:	4770      	bx	lr

08004fc8 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8004fc8:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 8004fca:	8840      	ldrh	r0, [r0, #2]
 8004fcc:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 8004fd0:	0c00      	lsrs	r0, r0, #16
 8004fd2:	4770      	bx	lr

08004fd4 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 8004fd4:	b410      	push	{r4}
 8004fd6:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004fd8:	8802      	ldrh	r2, [r0, #0]
 8004fda:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 8004fdc:	fb03 f403 	mul.w	r4, r3, r3
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004fe0:	fb02 f202 	mul.w	r2, r2, r2
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 8004fe4:	fb01 4401 	mla	r4, r1, r1, r4
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004fe8:	42a2      	cmp	r2, r4
{
 8004fea:	b085      	sub	sp, #20
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004fec:	d219      	bcs.n	8005022 <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 8004fee:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 8004ff2:	ebc2 6414 	rsb	r4, r2, r4, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 8004ff6:	b2e4      	uxtb	r4, r4
 8004ff8:	eb00 0044 	add.w	r0, r0, r4, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 8004ffc:	8882      	ldrh	r2, [r0, #4]
 8004ffe:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8005002:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 8005004:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8005008:	bfbc      	itt	lt
 800500a:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 800500e:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8005010:	2b00      	cmp	r3, #0
 8005012:	bfbc      	itt	lt
 8005014:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 8005018:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 800501a:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 800501e:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 8005022:	b289      	uxth	r1, r1
 8005024:	2000      	movs	r0, #0
 8005026:	b29b      	uxth	r3, r3
 8005028:	f361 000f 	bfi	r0, r1, #0, #16
 800502c:	f363 401f 	bfi	r0, r3, #16, #16
}
 8005030:	b005      	add	sp, #20
 8005032:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005036:	4770      	bx	lr

08005038 <DAC_SetChannelConfig>:
  */
__weak void DAC_SetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                              MC_Protocol_REG_t bVariable)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->bChannel_variable[bChannel] = bVariable;
 8005038:	4401      	add	r1, r0
 800503a:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
}
 800503e:	4770      	bx	lr

08005040 <DAC_GetChannelConfig>:
  *         MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t DAC_GetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->bChannel_variable[bChannel]);
 8005040:	4401      	add	r1, r0
}
 8005042:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 8005046:	4770      	bx	lr

08005048 <DAC_SetUserChannelValue>:
  */
__weak void DAC_SetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber,
                              int16_t hValue)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->hUserValue[bUserChNumber] = hValue;
 8005048:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800504c:	864a      	strh	r2, [r1, #50]	; 0x32
}
 800504e:	4770      	bx	lr

08005050 <DAC_GetUserChannelValue>:
  * @retval none.
  */
__weak int16_t DAC_GetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->hUserValue[bUserChNumber]);
 8005050:	eb00 0141 	add.w	r1, r0, r1, lsl #1
}
 8005054:	f9b1 0032 	ldrsh.w	r0, [r1, #50]	; 0x32
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop

0800505c <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 800505c:	2300      	movs	r3, #0
 800505e:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 8005060:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 8005062:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 8005066:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 800506a:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800506e:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
}
 8005072:	4770      	bx	lr

08005074 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8005074:	b120      	cbz	r0, 8005080 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8005076:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 800507a:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 800507c:	9b00      	ldr	r3, [sp, #0]
 800507e:	60c3      	str	r3, [r0, #12]
  }
}
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop

08005084 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8005084:	b190      	cbz	r0, 80050ac <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 8005086:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8005088:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 800508a:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 800508c:	b151      	cbz	r1, 80050a4 <FCP_CalcCRC+0x20>
 800508e:	1c82      	adds	r2, r0, #2
 8005090:	3901      	subs	r1, #1
 8005092:	fa52 f181 	uxtab	r1, r2, r1
 8005096:	3001      	adds	r0, #1
    {
      nSum += pFrame->Buffer[idx];
 8005098:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800509c:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 800509e:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 80050a0:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 80050a2:	d1f9      	bne.n	8005098 <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 80050a4:	eb03 2013 	add.w	r0, r3, r3, lsr #8
 80050a8:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  }

  return nCRC ;
}
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop

080050b0 <ICS_GetPhaseCurrents>:
__weak void ICS_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  int32_t aux;
  uint16_t reg;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80050b0:	6f02      	ldr	r2, [r0, #112]	; 0x70

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  /* Ia = (hPhaseAOffset)-(PHASE_A_ADC_CHANNEL vale)  */
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 80050b2:	4b20      	ldr	r3, [pc, #128]	; (8005134 <ICS_GetPhaseCurrents+0x84>)
{
 80050b4:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80050b6:	68d4      	ldr	r4, [r2, #12]
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 80050b8:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
  CLEAR_BIT(TIMx->CCER, Channels);
 80050ba:	6a22      	ldr	r2, [r4, #32]

  /* Saturation of Ia */
  if ( aux < -INT16_MAX )
 80050bc:	4d1e      	ldr	r5, [pc, #120]	; (8005138 <ICS_GetPhaseCurrents+0x88>)
 80050be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050c2:	6222      	str	r2, [r4, #32]
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 80050c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c6:	005b      	lsls	r3, r3, #1
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	1b9b      	subs	r3, r3, r6
  if ( aux < -INT16_MAX )
 80050cc:	42ab      	cmp	r3, r5
 80050ce:	da18      	bge.n	8005102 <ICS_GetPhaseCurrents+0x52>
  {
    pStator_Currents->a = -INT16_MAX;
 80050d0:	800d      	strh	r5, [r1, #0]
 80050d2:	f248 0201 	movw	r2, #32769	; 0x8001
  {
    pStator_Currents->a = ( int16_t )aux;
  }

  /* Ib = (hPhaseBOffset)-(PHASE_B_ADC_CHANNEL value) */
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 80050d6:	4b19      	ldr	r3, [pc, #100]	; (800513c <ICS_GetPhaseCurrents+0x8c>)
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 80050d8:	6e06      	ldr	r6, [r0, #96]	; 0x60
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 80050da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c

  /* Saturation of Ib */
  if ( aux < -INT16_MAX )
 80050dc:	4c16      	ldr	r4, [pc, #88]	; (8005138 <ICS_GetPhaseCurrents+0x88>)
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 80050de:	005b      	lsls	r3, r3, #1
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	1b9b      	subs	r3, r3, r6
  if ( aux < -INT16_MAX )
 80050e4:	42a3      	cmp	r3, r4
 80050e6:	da15      	bge.n	8005114 <ICS_GetPhaseCurrents+0x64>
  {
    pStator_Currents->b = -INT16_MAX;
 80050e8:	804c      	strh	r4, [r1, #2]
 80050ea:	f248 0301 	movw	r3, #32769	; 0x8001
    pStator_Currents->b = ( int16_t )aux;
  }

  pHandle->_Super.Ia = pStator_Currents->a;
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80050ee:	4413      	add	r3, r2
 80050f0:	425b      	negs	r3, r3
  pHandle->_Super.Ia = pStator_Currents->a;
 80050f2:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
  pHandle->_Super.Ib = pStator_Currents->b;
 80050f6:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80050fa:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c

}
 80050fe:	bc70      	pop	{r4, r5, r6}
 8005100:	4770      	bx	lr
  else  if ( aux > INT16_MAX )
 8005102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005106:	db11      	blt.n	800512c <ICS_GetPhaseCurrents+0x7c>
    pStator_Currents->a = INT16_MAX;
 8005108:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800510c:	461a      	mov	r2, r3
 800510e:	800b      	strh	r3, [r1, #0]
 8005110:	461d      	mov	r5, r3
 8005112:	e7e0      	b.n	80050d6 <ICS_GetPhaseCurrents+0x26>
  else  if ( aux > INT16_MAX )
 8005114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005118:	db04      	blt.n	8005124 <ICS_GetPhaseCurrents+0x74>
    pStator_Currents->b = INT16_MAX;
 800511a:	f647 74ff 	movw	r4, #32767	; 0x7fff
 800511e:	4623      	mov	r3, r4
 8005120:	804c      	strh	r4, [r1, #2]
 8005122:	e7e4      	b.n	80050ee <ICS_GetPhaseCurrents+0x3e>
    pStator_Currents->b = ( int16_t )aux;
 8005124:	b21c      	sxth	r4, r3
 8005126:	804c      	strh	r4, [r1, #2]
 8005128:	b29b      	uxth	r3, r3
 800512a:	e7e0      	b.n	80050ee <ICS_GetPhaseCurrents+0x3e>
    pStator_Currents->a = ( int16_t )aux;
 800512c:	b21d      	sxth	r5, r3
 800512e:	800d      	strh	r5, [r1, #0]
 8005130:	b29a      	uxth	r2, r3
 8005132:	e7d0      	b.n	80050d6 <ICS_GetPhaseCurrents+0x26>
 8005134:	40012000 	.word	0x40012000
 8005138:	ffff8001 	.word	0xffff8001
 800513c:	40012100 	.word	0x40012100

08005140 <ICS_HFCurrentsCalibration>:
* @retval Always returns {0,0} in ab_t format
*/
__weak void ICS_HFCurrentsCalibration( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005140:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8005142:	68da      	ldr	r2, [r3, #12]
 8005144:	6a13      	ldr	r3, [r2, #32]
 8005146:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800514a:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH4 );

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800514c:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8005150:	2b0f      	cmp	r3, #15
 8005152:	d814      	bhi.n	800517e <ICS_HFCurrentsCalibration+0x3e>
  {
    pHandle->PhaseAOffset += ADC1->JDR1;
 8005154:	4a0b      	ldr	r2, [pc, #44]	; (8005184 <ICS_HFCurrentsCalibration+0x44>)
 8005156:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
{
 8005158:	b430      	push	{r4, r5}
    pHandle->PhaseAOffset += ADC1->JDR1;
 800515a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
    pHandle->PhaseBOffset += ADC2->JDR1;
 800515c:	4c0a      	ldr	r4, [pc, #40]	; (8005188 <ICS_HFCurrentsCalibration+0x48>)
 800515e:	6e02      	ldr	r2, [r0, #96]	; 0x60
    pHandle->PhaseAOffset += ADC1->JDR1;
 8005160:	442b      	add	r3, r5
 8005162:	65c3      	str	r3, [r0, #92]	; 0x5c
    pHandle->PhaseBOffset += ADC2->JDR1;
 8005164:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    pHandle->PolarizationCounter++;
 8005166:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 800516a:	3301      	adds	r3, #1
 800516c:	b2db      	uxtb	r3, r3
    pHandle->PhaseBOffset += ADC2->JDR1;
 800516e:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8005170:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8005174:	2300      	movs	r3, #0
    pHandle->PhaseBOffset += ADC2->JDR1;
 8005176:	6602      	str	r2, [r0, #96]	; 0x60
  pStator_Currents->b = 0;
}
 8005178:	bc30      	pop	{r4, r5}
  pStator_Currents->a = 0;
 800517a:	600b      	str	r3, [r1, #0]
}
 800517c:	4770      	bx	lr
  pStator_Currents->a = 0;
 800517e:	2300      	movs	r3, #0
 8005180:	600b      	str	r3, [r1, #0]
 8005182:	4770      	bx	lr
 8005184:	40012000 	.word	0x40012000
 8005188:	40012100 	.word	0x40012100

0800518c <ICS_Init>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800518c:	6f01      	ldr	r1, [r0, #112]	; 0x70
 800518e:	68cb      	ldr	r3, [r1, #12]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	f022 0201 	bic.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]
    if ( ( pHandle->pParams_str->EmergencyStop ) != DISABLE )
 8005198:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
 800519c:	b132      	cbz	r2, 80051ac <ICS_Init+0x20>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800519e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051a2:	611a      	str	r2, [r3, #16]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_BRK(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051aa:	60da      	str	r2, [r3, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80051ac:	695a      	ldr	r2, [r3, #20]
 80051ae:	f042 0201 	orr.w	r2, r2, #1
 80051b2:	615a      	str	r2, [r3, #20]
    if ( pHandle->pParams_str->FreqRatio == 2u )
 80051b4:	790a      	ldrb	r2, [r1, #4]
 80051b6:	2a02      	cmp	r2, #2
 80051b8:	d034      	beq.n	8005224 <ICS_Init+0x98>
      if ( pHandle->pParams_str->InstanceNbr == 1u )
 80051ba:	780a      	ldrb	r2, [r1, #0]
 80051bc:	2a01      	cmp	r2, #1
 80051be:	d03d      	beq.n	800523c <ICS_Init+0xb0>
  SET_BIT(TIMx->CCER, Channels);
 80051c0:	6a1a      	ldr	r2, [r3, #32]
    if ( pHandle->pParams_str->TIMx == TIM1 )
 80051c2:	4921      	ldr	r1, [pc, #132]	; (8005248 <ICS_Init+0xbc>)
 80051c4:	f442 62aa 	orr.w	r2, r2, #1360	; 0x550
 80051c8:	f042 0205 	orr.w	r2, r2, #5
 80051cc:	621a      	str	r2, [r3, #32]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 80051ce:	4a1f      	ldr	r2, [pc, #124]	; (800524c <ICS_Init+0xc0>)
 80051d0:	428b      	cmp	r3, r1
 80051d2:	68d3      	ldr	r3, [r2, #12]
 80051d4:	bf0c      	ite	eq
 80051d6:	f043 0301 	orreq.w	r3, r3, #1
 80051da:	f043 0302 	orrne.w	r3, r3, #2
 80051de:	60d3      	str	r3, [r2, #12]
      pHandle->ADCTriggerSet = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 80051e0:	bf08      	it	eq
 80051e2:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80051e6:	4b1a      	ldr	r3, [pc, #104]	; (8005250 <ICS_Init+0xc4>)
      pHandle->ADCTriggerSet = LL_ADC_INJ_TRIG_EXT_TIM8_CH4;
 80051e8:	bf18      	it	ne
 80051ea:	f44f 11f0 	movne.w	r1, #1966080	; 0x1e0000
 80051ee:	6681      	str	r1, [r0, #104]	; 0x68
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	4918      	ldr	r1, [pc, #96]	; (8005254 <ICS_Init+0xc8>)
 80051f4:	f042 0201 	orr.w	r2, r2, #1
 80051f8:	609a      	str	r2, [r3, #8]
 80051fa:	688a      	ldr	r2, [r1, #8]
 80051fc:	f042 0201 	orr.w	r2, r2, #1
 8005200:	608a      	str	r2, [r1, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8005202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8005204:	f06f 0104 	mvn.w	r1, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8005208:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800520c:	62da      	str	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800520e:	6019      	str	r1, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8005210:	685a      	ldr	r2, [r3, #4]
    pHandle->OverCurrentFlag = false;
 8005212:	2100      	movs	r1, #0
 8005214:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005218:	605a      	str	r2, [r3, #4]
 800521a:	f880 106c 	strb.w	r1, [r0, #108]	; 0x6c
    pHandle->_Super.DTTest = 0u;
 800521e:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
}
 8005222:	4770      	bx	lr
      if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 8005224:	794a      	ldrb	r2, [r1, #5]
 8005226:	2a01      	cmp	r2, #1
 8005228:	d108      	bne.n	800523c <ICS_Init+0xb0>
        if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800522a:	7a09      	ldrb	r1, [r1, #8]
 800522c:	2903      	cmp	r1, #3
 800522e:	d105      	bne.n	800523c <ICS_Init+0xb0>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8005230:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005232:	695a      	ldr	r2, [r3, #20]
 8005234:	f042 0201 	orr.w	r2, r2, #1
 8005238:	615a      	str	r2, [r3, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800523a:	6319      	str	r1, [r3, #48]	; 0x30
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 800523c:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 8005240:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 8005242:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005244:	e7bc      	b.n	80051c0 <ICS_Init+0x34>
 8005246:	bf00      	nop
 8005248:	40010000 	.word	0x40010000
 800524c:	e0042000 	.word	0xe0042000
 8005250:	40012000 	.word	0x40012000
 8005254:	40012100 	.word	0x40012100

08005258 <ICS_TurnOnLowSides>:
  * @param pHdl ICS F4xx PWM Current Feedback Handle
  */
__weak void ICS_TurnOnLowSides( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005258:	6f01      	ldr	r1, [r0, #112]	; 0x70

  pHandle->_Super.TurnOnLowSidesAction = true;
 800525a:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800525c:	68ca      	ldr	r2, [r1, #12]
  pHandle->_Super.TurnOnLowSidesAction = true;
 800525e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005262:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005264:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005268:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800526a:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800526c:	63d3      	str	r3, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800526e:	6110      	str	r0, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005270:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0 );
  LL_TIM_OC_SetCompareCH2( TIMx, 0 );
  LL_TIM_OC_SetCompareCH3( TIMx, 0 );

  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET ) ;
 8005272:	07db      	lsls	r3, r3, #31
 8005274:	d5fc      	bpl.n	8005270 <ICS_TurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005276:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800527c:	6453      	str	r3, [r2, #68]	; 0x44

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800527e:	7c0b      	ldrb	r3, [r1, #16]
 8005280:	2b02      	cmp	r3, #2
 8005282:	d000      	beq.n	8005286 <ICS_TurnOnLowSides+0x2e>
 8005284:	4770      	bx	lr
{
 8005286:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005288:	69c8      	ldr	r0, [r1, #28]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800528a:	694d      	ldr	r5, [r1, #20]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800528c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800528e:	698e      	ldr	r6, [r1, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005290:	6a0c      	ldr	r4, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005292:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005294:	61ae      	str	r6, [r5, #24]
 8005296:	6184      	str	r4, [r0, #24]
  }
}
 8005298:	bc70      	pop	{r4, r5, r6}
 800529a:	619a      	str	r2, [r3, #24]
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop

080052a0 <ICS_SwitchOnPWM>:
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOnPWM( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80052a0:	6f01      	ldr	r1, [r0, #112]	; 0x70

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80052a2:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80052a6:	68cb      	ldr	r3, [r1, #12]
{
 80052a8:	b4f0      	push	{r4, r5, r6, r7}
  pHandle->_Super.TurnOnLowSidesAction = false;
 80052aa:	2400      	movs	r4, #0
 80052ac:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80052b0:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80052b2:	f06f 0401 	mvn.w	r4, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 80052b6:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 80052b8:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80052ba:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80052bc:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80052be:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80052c0:	611c      	str	r4, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80052c2:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80052c4:	07d2      	lsls	r2, r2, #31
 80052c6:	d5fc      	bpl.n	80052c2 <ICS_SwitchOnPWM+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80052c8:	f06f 0201 	mvn.w	r2, #1
 80052cc:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80052ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052d4:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80052d6:	7c0a      	ldrb	r2, [r1, #16]
 80052d8:	2a02      	cmp	r2, #2
 80052da:	d008      	beq.n	80052ee <ICS_SwitchOnPWM+0x4e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80052dc:	f06f 0201 	mvn.w	r2, #1
 80052e0:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80052e2:	68da      	ldr	r2, [r3, #12]
 80052e4:	f042 0201 	orr.w	r2, r2, #1
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

}
 80052e8:	bcf0      	pop	{r4, r5, r6, r7}
 80052ea:	60da      	str	r2, [r3, #12]
 80052ec:	4770      	bx	lr
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 80052ee:	6a18      	ldr	r0, [r3, #32]
 80052f0:	f240 5255 	movw	r2, #1365	; 0x555
 80052f4:	4382      	bics	r2, r0
 80052f6:	d00c      	beq.n	8005312 <ICS_SwitchOnPWM+0x72>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80052f8:	698c      	ldr	r4, [r1, #24]
 80052fa:	6a08      	ldr	r0, [r1, #32]
 80052fc:	6a8a      	ldr	r2, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80052fe:	694f      	ldr	r7, [r1, #20]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005300:	69ce      	ldr	r6, [r1, #28]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005302:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8005304:	0424      	lsls	r4, r4, #16
 8005306:	0400      	lsls	r0, r0, #16
 8005308:	0412      	lsls	r2, r2, #16
 800530a:	61bc      	str	r4, [r7, #24]
 800530c:	61b0      	str	r0, [r6, #24]
 800530e:	61aa      	str	r2, [r5, #24]
}
 8005310:	e7e4      	b.n	80052dc <ICS_SwitchOnPWM+0x3c>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005312:	694c      	ldr	r4, [r1, #20]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005314:	69c8      	ldr	r0, [r1, #28]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005316:	6a4a      	ldr	r2, [r1, #36]	; 0x24
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005318:	698d      	ldr	r5, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800531a:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800531c:	6a0c      	ldr	r4, [r1, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800531e:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8005320:	6184      	str	r4, [r0, #24]
 8005322:	6191      	str	r1, [r2, #24]
}
 8005324:	e7da      	b.n	80052dc <ICS_SwitchOnPWM+0x3c>
 8005326:	bf00      	nop

08005328 <ICS_SwitchOffPWM>:
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005328:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800532a:	68da      	ldr	r2, [r3, #12]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800532c:	68d1      	ldr	r1, [r2, #12]
 800532e:	f021 0101 	bic.w	r1, r1, #1
{
 8005332:	b4f0      	push	{r4, r5, r6, r7}
 8005334:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005336:	6c51      	ldr	r1, [r2, #68]	; 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 8005338:	2400      	movs	r4, #0
 800533a:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800533e:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
 8005342:	6451      	str	r1, [r2, #68]	; 0x44

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005344:	7c19      	ldrb	r1, [r3, #16]
 8005346:	2902      	cmp	r1, #2
 8005348:	d10b      	bne.n	8005362 <ICS_SwitchOffPWM+0x3a>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800534a:	699c      	ldr	r4, [r3, #24]
 800534c:	6a18      	ldr	r0, [r3, #32]
 800534e:	6a99      	ldr	r1, [r3, #40]	; 0x28
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005350:	695f      	ldr	r7, [r3, #20]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005352:	69de      	ldr	r6, [r3, #28]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005354:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8005356:	0424      	lsls	r4, r4, #16
 8005358:	0400      	lsls	r0, r0, #16
 800535a:	0409      	lsls	r1, r1, #16
 800535c:	61bc      	str	r4, [r7, #24]
 800535e:	61b0      	str	r0, [r6, #24]
 8005360:	61a9      	str	r1, [r5, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005362:	f06f 0301 	mvn.w	r3, #1
 8005366:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005368:	6913      	ldr	r3, [r2, #16]
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800536a:	07db      	lsls	r3, r3, #31
 800536c:	d5fc      	bpl.n	8005368 <ICS_SwitchOffPWM+0x40>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800536e:	f06f 0301 	mvn.w	r3, #1
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  return;
}
 8005372:	bcf0      	pop	{r4, r5, r6, r7}
 8005374:	6113      	str	r3, [r2, #16]
 8005376:	4770      	bx	lr

08005378 <ICS_CurrentReadingCalibration>:
{
 8005378:	b538      	push	{r3, r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800537a:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsCalibration;
 800537c:	4924      	ldr	r1, [pc, #144]	; (8005410 <ICS_CurrentReadingCalibration+0x98>)
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800537e:	68dc      	ldr	r4, [r3, #12]
  pHandle->PhaseAOffset = 0u;
 8005380:	2200      	movs	r2, #0
  pHandle->PolarizationCounter = 0u;
 8005382:	f880 2066 	strb.w	r2, [r0, #102]	; 0x66
  CLEAR_BIT(TIMx->CCER, Channels);
 8005386:	6a23      	ldr	r3, [r4, #32]
  pHandle->PhaseAOffset = 0u;
 8005388:	65c2      	str	r2, [r0, #92]	; 0x5c
 800538a:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
{
 800538e:	4605      	mov	r5, r0
 8005390:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseBOffset = 0u;
 8005394:	6602      	str	r2, [r0, #96]	; 0x60
 8005396:	6223      	str	r3, [r4, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsCalibration;
 8005398:	6041      	str	r1, [r0, #4]
  ICS_SwitchOnPWM( &pHandle->_Super );
 800539a:	f7ff ff81 	bl	80052a0 <ICS_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 800539e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80053a0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80053a4:	7a1a      	ldrb	r2, [r3, #8]
 80053a6:	4620      	mov	r0, r4
 80053a8:	f105 0366 	add.w	r3, r5, #102	; 0x66
 80053ac:	f000 fa08 	bl	80057c0 <waitForPolarizationEnd>
  ICS_SwitchOffPWM( &pHandle->_Super );
 80053b0:	4628      	mov	r0, r5
 80053b2:	f7ff ffb9 	bl	8005328 <ICS_SwitchOffPWM>
  pHandle->PhaseBOffset >>= 3;
 80053b6:	e9d5 0217 	ldrd	r0, r2, [r5, #92]	; 0x5c
 80053ba:	08d2      	lsrs	r2, r2, #3
  pHandle->PhaseAOffset >>= 3;
 80053bc:	08c0      	lsrs	r0, r0, #3
  pHandle->PhaseBOffset >>= 3;
 80053be:	e9c5 0217 	strd	r0, r2, [r5, #92]	; 0x5c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80053c2:	69a2      	ldr	r2, [r4, #24]
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->Half_PWMPeriod );
 80053c4:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_GetPhaseCurrents;
 80053c8:	4912      	ldr	r1, [pc, #72]	; (8005414 <ICS_CurrentReadingCalibration+0x9c>)
 80053ca:	f022 0208 	bic.w	r2, r2, #8
 80053ce:	61a2      	str	r2, [r4, #24]
 80053d0:	69a2      	ldr	r2, [r4, #24]
 80053d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053d6:	61a2      	str	r2, [r4, #24]
 80053d8:	69e2      	ldr	r2, [r4, #28]
 80053da:	f022 0208 	bic.w	r2, r2, #8
 80053de:	61e2      	str	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80053e0:	6363      	str	r3, [r4, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80053e2:	63a3      	str	r3, [r4, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80053e4:	63e3      	str	r3, [r4, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80053e6:	69a3      	ldr	r3, [r4, #24]
 80053e8:	f043 0308 	orr.w	r3, r3, #8
 80053ec:	61a3      	str	r3, [r4, #24]
 80053ee:	69a3      	ldr	r3, [r4, #24]
 80053f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80053f4:	61a3      	str	r3, [r4, #24]
 80053f6:	69e3      	ldr	r3, [r4, #28]
 80053f8:	f043 0308 	orr.w	r3, r3, #8
 80053fc:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 80053fe:	6a23      	ldr	r3, [r4, #32]
 8005400:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8005404:	f043 0305 	orr.w	r3, r3, #5
 8005408:	6223      	str	r3, [r4, #32]
 800540a:	6069      	str	r1, [r5, #4]
}
 800540c:	bd38      	pop	{r3, r4, r5, pc}
 800540e:	bf00      	nop
 8005410:	08005141 	.word	0x08005141
 8005414:	080050b1 	.word	0x080050b1

08005418 <ICS_WriteTIMRegisters>:
*/
__weak uint16_t ICS_WriteTIMRegisters( PWMC_Handle_t * pHdl )
{
  uint16_t aux;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005418:	6f03      	ldr	r3, [r0, #112]	; 0x70

  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
  LL_TIM_OC_SetCompareCH2( TIMx, pHandle->_Super.CntPhB );
 800541a:	8e81      	ldrh	r1, [r0, #52]	; 0x34
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800541c:	68db      	ldr	r3, [r3, #12]
  LL_TIM_OC_SetCompareCH3( TIMx, pHandle->_Super.CntPhC );
 800541e:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
{
 8005420:	b410      	push	{r4}
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
 8005422:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005424:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005426:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005428:	63da      	str	r2, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 800542a:	6a18      	ldr	r0, [r3, #32]
  else
  {
    aux = MC_NO_ERROR;
  }
  return aux;
}
 800542c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005430:	f3c0 3000 	ubfx	r0, r0, #12, #1
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop

08005438 <ICS_TIMx_UP_IRQHandler>:
__weak void * ICS_TIMx_UP_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{
  uint32_t adcinjflags;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;

  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 8005438:	4922      	ldr	r1, [pc, #136]	; (80054c4 <ICS_TIMx_UP_IRQHandler+0x8c>)
 800543a:	680b      	ldr	r3, [r1, #0]
{
 800543c:	b4f0      	push	{r4, r5, r6, r7}
  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 800543e:	f003 030c 	and.w	r3, r3, #12
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005442:	6f04      	ldr	r4, [r0, #112]	; 0x70

  if ( adcinjflags == CONV_STARTED )
 8005444:	2b08      	cmp	r3, #8
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005446:	68e2      	ldr	r2, [r4, #12]
  if ( adcinjflags == CONV_STARTED )
 8005448:	d026      	beq.n	8005498 <ICS_TIMx_UP_IRQHandler+0x60>
    {
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
    }
    while ( adcinjflags != CONV_FINISHED );
  }
  else if ( adcinjflags == FLAGS_CLEARED )
 800544a:	b94b      	cbnz	r3, 8005460 <ICS_TIMx_UP_IRQHandler+0x28>
  {
    while ( ( TIMx->CNT ) < ( pHandle->pParams_str->Tw ) )
 800544c:	8861      	ldrh	r1, [r4, #2]
 800544e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8005450:	428b      	cmp	r3, r1
 8005452:	d3fc      	bcc.n	800544e <ICS_TIMx_UP_IRQHandler+0x16>
    {}
    adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8005454:	491b      	ldr	r1, [pc, #108]	; (80054c4 <ICS_TIMx_UP_IRQHandler+0x8c>)
 8005456:	680b      	ldr	r3, [r1, #0]
 8005458:	f003 030c 	and.w	r3, r3, #12

    if ( adcinjflags == CONV_STARTED )
 800545c:	2b08      	cmp	r3, #8
 800545e:	d026      	beq.n	80054ae <ICS_TIMx_UP_IRQHandler+0x76>
  MODIFY_REG(ADCx->CR2, ADC_CR2_JEXTSEL, (TriggerSource & ADC_CR2_JEXTSEL));
 8005460:	4f18      	ldr	r7, [pc, #96]	; (80054c4 <ICS_TIMx_UP_IRQHandler+0x8c>)
 8005462:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8005464:	68b9      	ldr	r1, [r7, #8]
 8005466:	4e18      	ldr	r6, [pc, #96]	; (80054c8 <ICS_TIMx_UP_IRQHandler+0x90>)
 8005468:	f403 2570 	and.w	r5, r3, #983040	; 0xf0000
 800546c:	f421 2170 	bic.w	r1, r1, #983040	; 0xf0000
 8005470:	4329      	orrs	r1, r5
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	68b3      	ldr	r3, [r6, #8]
 8005476:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800547a:	432b      	orrs	r3, r5
 800547c:	60b3      	str	r3, [r6, #8]
  /* It re-initilize AD converter in run time when using dual MC */
  LL_ADC_INJ_SetTriggerSource(ADC1, pHandle->ADCTriggerSet);
  LL_ADC_INJ_SetTriggerSource(ADC2, pHandle->ADCTriggerSet);

  /* Change channels keeping equal to 1 element the sequencer lenght */
  ADC1->JSQR = ( uint32_t )( pHandle->pParams_str->IaChannel ) << 15;
 800547e:	79a3      	ldrb	r3, [r4, #6]
 8005480:	03db      	lsls	r3, r3, #15
 8005482:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC2->JSQR = ( uint32_t )( pHandle->pParams_str->IbChannel ) << 15;
 8005484:	79e3      	ldrb	r3, [r4, #7]
 8005486:	03db      	lsls	r3, r3, #15
 8005488:	63b3      	str	r3, [r6, #56]	; 0x38
  SET_BIT(TIMx->CCER, Channels);
 800548a:	6a13      	ldr	r3, [r2, #32]
 800548c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000

  LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH4 );

  return &( pHandle->_Super.Motor );
}
 8005490:	3046      	adds	r0, #70	; 0x46
 8005492:	bcf0      	pop	{r4, r5, r6, r7}
 8005494:	6213      	str	r3, [r2, #32]
 8005496:	4770      	bx	lr
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8005498:	680b      	ldr	r3, [r1, #0]
 800549a:	f003 030c 	and.w	r3, r3, #12
    while ( adcinjflags != CONV_FINISHED );
 800549e:	2b0c      	cmp	r3, #12
 80054a0:	d0de      	beq.n	8005460 <ICS_TIMx_UP_IRQHandler+0x28>
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 80054a2:	680b      	ldr	r3, [r1, #0]
 80054a4:	f003 030c 	and.w	r3, r3, #12
    while ( adcinjflags != CONV_FINISHED );
 80054a8:	2b0c      	cmp	r3, #12
 80054aa:	d1f5      	bne.n	8005498 <ICS_TIMx_UP_IRQHandler+0x60>
 80054ac:	e7d8      	b.n	8005460 <ICS_TIMx_UP_IRQHandler+0x28>
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 80054ae:	680b      	ldr	r3, [r1, #0]
 80054b0:	f003 030c 	and.w	r3, r3, #12
      while ( adcinjflags != CONV_FINISHED );
 80054b4:	2b0c      	cmp	r3, #12
 80054b6:	d0d3      	beq.n	8005460 <ICS_TIMx_UP_IRQHandler+0x28>
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 80054b8:	680b      	ldr	r3, [r1, #0]
 80054ba:	f003 030c 	and.w	r3, r3, #12
      while ( adcinjflags != CONV_FINISHED );
 80054be:	2b0c      	cmp	r3, #12
 80054c0:	d1f5      	bne.n	80054ae <ICS_TIMx_UP_IRQHandler+0x76>
 80054c2:	e7cd      	b.n	8005460 <ICS_TIMx_UP_IRQHandler+0x28>
 80054c4:	40012000 	.word	0x40012000
 80054c8:	40012100 	.word	0x40012100

080054cc <ICS_BRK_IRQHandler>:
 * @retval none
 */
__weak void * ICS_BRK_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80054cc:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80054ce:	7c1a      	ldrb	r2, [r3, #16]
 80054d0:	2a02      	cmp	r2, #2
 80054d2:	d004      	beq.n	80054de <ICS_BRK_IRQHandler+0x12>
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
  }
  pHandle->OverCurrentFlag = true;
 80054d4:	2301      	movs	r3, #1
 80054d6:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c

  return &( pHandle->_Super.Motor );
}
 80054da:	3046      	adds	r0, #70	; 0x46
 80054dc:	4770      	bx	lr
{
 80054de:	b4f0      	push	{r4, r5, r6, r7}
 80054e0:	6a19      	ldr	r1, [r3, #32]
 80054e2:	699c      	ldr	r4, [r3, #24]
 80054e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80054e6:	695f      	ldr	r7, [r3, #20]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80054e8:	69de      	ldr	r6, [r3, #28]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80054ea:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80054ec:	0424      	lsls	r4, r4, #16
 80054ee:	0409      	lsls	r1, r1, #16
 80054f0:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 80054f2:	2301      	movs	r3, #1
 80054f4:	61bc      	str	r4, [r7, #24]
}
 80054f6:	3046      	adds	r0, #70	; 0x46
 80054f8:	61b1      	str	r1, [r6, #24]
 80054fa:	61aa      	str	r2, [r5, #24]
  pHandle->OverCurrentFlag = true;
 80054fc:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
}
 8005500:	bcf0      	pop	{r4, r5, r6, r7}
 8005502:	4770      	bx	lr

08005504 <ICS_IsOverCurrentOccurred>:
__weak uint16_t ICS_IsOverCurrentOccurred( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  uint16_t retval = MC_NO_FAULTS;

  if ( pHandle->OverCurrentFlag == true )
 8005504:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 8005508:	b90b      	cbnz	r3, 800550e <ICS_IsOverCurrentOccurred+0xa>
  uint16_t retval = MC_NO_FAULTS;
 800550a:	4618      	mov	r0, r3
  {
    retval = MC_BREAK_IN;
    pHandle->OverCurrentFlag = false;
  }
  return retval;
}
 800550c:	4770      	bx	lr
    pHandle->OverCurrentFlag = false;
 800550e:	2300      	movs	r3, #0
 8005510:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
    retval = MC_BREAK_IN;
 8005514:	2040      	movs	r0, #64	; 0x40
 8005516:	4770      	bx	lr

08005518 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8005518:	b510      	push	{r4, lr}
 800551a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800551e:	4604      	mov	r4, r0
 8005520:	2100      	movs	r1, #0
 8005522:	f001 fb89 	bl	8006c38 <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8005526:	2300      	movs	r3, #0
 8005528:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 800552c:	bd10      	pop	{r4, pc}
 800552e:	bf00      	nop

08005530 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8005530:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8005534:	1c53      	adds	r3, r2, #1
 8005536:	b29b      	uxth	r3, r3
{
 8005538:	b470      	push	{r4, r5, r6}
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 800553a:	2b7f      	cmp	r3, #127	; 0x7f
{
 800553c:	4606      	mov	r6, r0
  {
    pHandle->hNextMeasBufferIndex = 0u;
 800553e:	bf88      	it	hi
 8005540:	2300      	movhi	r3, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8005542:	f826 1012 	strh.w	r1, [r6, r2, lsl #1]
{
 8005546:	4608      	mov	r0, r1
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8005548:	f8a6 2102 	strh.w	r2, [r6, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 800554c:	f8a6 3100 	strh.w	r3, [r6, #256]	; 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8005550:	f106 05fe 	add.w	r5, r6, #254	; 0xfe
 8005554:	1eb3      	subs	r3, r6, #2
  int32_t wAux = 0;
 8005556:	2200      	movs	r2, #0
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8005558:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800555c:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 800555e:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8005560:	d1fa      	bne.n	8005558 <MPM_CalcElMotorPower+0x28>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8005562:	2a00      	cmp	r2, #0
 8005564:	bfb8      	it	lt
 8005566:	327f      	addlt	r2, #127	; 0x7f
 8005568:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 800556a:	f8a6 2104 	strh.w	r2, [r6, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 800556e:	bc70      	pop	{r4, r5, r6}
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop

08005574 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8005574:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop

0800557c <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 800557c:	8a03      	ldrh	r3, [r0, #16]
 800557e:	8b42      	ldrh	r2, [r0, #26]
 8005580:	429a      	cmp	r2, r3
 8005582:	d306      	bcc.n	8005592 <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8005584:	8b82      	ldrh	r2, [r0, #28]
 8005586:	429a      	cmp	r2, r3
 8005588:	d901      	bls.n	800558e <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 800558a:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 800558c:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 800558e:	8ac0      	ldrh	r0, [r0, #22]
 8005590:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8005592:	2008      	movs	r0, #8
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop

08005598 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8005598:	2300      	movs	r3, #0
 800559a:	8203      	strh	r3, [r0, #16]
}
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop

080055a0 <NTC_Init>:
{
 80055a0:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 80055a2:	7803      	ldrb	r3, [r0, #0]
{
 80055a4:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 80055a6:	b123      	cbz	r3, 80055b2 <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 80055a8:	8a43      	ldrh	r3, [r0, #18]
 80055aa:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 80055ac:	2200      	movs	r2, #0
 80055ae:	82c2      	strh	r2, [r0, #22]
}
 80055b0:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 80055b2:	3004      	adds	r0, #4
 80055b4:	f7fc fd80 	bl	80020b8 <RCM_RegisterRegConv>
 80055b8:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 80055bc:	4620      	mov	r0, r4
 80055be:	f7ff ffeb 	bl	8005598 <NTC_Clear>
}
 80055c2:	bd10      	pop	{r4, pc}

080055c4 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 80055c4:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 80055c6:	7803      	ldrb	r3, [r0, #0]
{
 80055c8:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 80055ca:	b113      	cbz	r3, 80055d2 <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 80055cc:	2000      	movs	r0, #0
 80055ce:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 80055d0:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80055d2:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 80055d6:	f7fc fe41 	bl	800225c <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 80055da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055de:	4298      	cmp	r0, r3
 80055e0:	d007      	beq.n	80055f2 <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 80055e2:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 80055e4:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 80055e6:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 80055e8:	fb01 0003 	mla	r0, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 80055ec:	fbb0 f0f2 	udiv	r0, r0, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 80055f0:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 80055f2:	4620      	mov	r0, r4
 80055f4:	f7ff ffc2 	bl	800557c <NTC_SetFaultState>
 80055f8:	82e0      	strh	r0, [r4, #22]
}
 80055fa:	bd10      	pop	{r4, pc}

080055fc <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 80055fc:	7803      	ldrb	r3, [r0, #0]
 80055fe:	b983      	cbnz	r3, 8005622 <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8005600:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8005602:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8005604:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8005608:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 800560a:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 800560c:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8005610:	2b00      	cmp	r3, #0
 8005612:	bfbc      	itt	lt
 8005614:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8005618:	33ff      	addlt	r3, #255	; 0xff
 800561a:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 800561e:	b200      	sxth	r0, r0
 8005620:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 8005622:	8a80      	ldrh	r0, [r0, #20]
}
 8005624:	b200      	sxth	r0, r0
 8005626:	4770      	bx	lr

08005628 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8005628:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 800562a:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 800562c:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 800562e:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8005630:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8005632:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8005634:	6283      	str	r3, [r0, #40]	; 0x28
}
 8005636:	4770      	bx	lr

08005638 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8005638:	8081      	strh	r1, [r0, #4]
}
 800563a:	4770      	bx	lr

0800563c <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 800563c:	80c1      	strh	r1, [r0, #6]
}
 800563e:	4770      	bx	lr

08005640 <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8005640:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop

08005648 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8005648:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop

08005650 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8005650:	6081      	str	r1, [r0, #8]

  return;
}
 8005652:	4770      	bx	lr

08005654 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8005654:	8b00      	ldrh	r0, [r0, #24]
 8005656:	4770      	bx	lr

08005658 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8005658:	8b40      	ldrh	r0, [r0, #26]
 800565a:	4770      	bx	lr

0800565c <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 800565c:	8441      	strh	r1, [r0, #34]	; 0x22
}
 800565e:	4770      	bx	lr

08005660 <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8005660:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop

08005668 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8005668:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 800566c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
{
 8005670:	b470      	push	{r4, r5, r6}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8005672:	fb01 f303 	mul.w	r3, r1, r3
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8005676:	f9b0 4014 	ldrsh.w	r4, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 800567a:	f9b0 5016 	ldrsh.w	r5, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 800567e:	b162      	cbz	r2, 800569a <PI_Controller+0x32>
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8005680:	6886      	ldr	r6, [r0, #8]
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8005682:	fb01 f102 	mul.w	r1, r1, r2

    if ( wIntegral_sum_temp < 0 )
 8005686:	1872      	adds	r2, r6, r1
 8005688:	d420      	bmi.n	80056cc <PI_Controller+0x64>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 800568a:	2e00      	cmp	r6, #0
 800568c:	db29      	blt.n	80056e2 <PI_Controller+0x7a>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 800568e:	68c1      	ldr	r1, [r0, #12]
 8005690:	4291      	cmp	r1, r2
 8005692:	db03      	blt.n	800569c <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8005694:	6901      	ldr	r1, [r0, #16]
 8005696:	4291      	cmp	r1, r2
 8005698:	dc00      	bgt.n	800569c <PI_Controller+0x34>
 800569a:	4611      	mov	r1, r2
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 800569c:	8b86      	ldrh	r6, [r0, #28]
 800569e:	8bc2      	ldrh	r2, [r0, #30]
 80056a0:	4133      	asrs	r3, r6
 80056a2:	fa41 f202 	asr.w	r2, r1, r2
 80056a6:	4413      	add	r3, r2
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 80056a8:	429c      	cmp	r4, r3
 80056aa:	da05      	bge.n	80056b8 <PI_Controller+0x50>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 80056ac:	1ae3      	subs	r3, r4, r3
 80056ae:	4419      	add	r1, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 80056b0:	6081      	str	r1, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 80056b2:	4620      	mov	r0, r4
 80056b4:	bc70      	pop	{r4, r5, r6}
 80056b6:	4770      	bx	lr
  else if ( wOutput_32 < hLowerOutputLimit )
 80056b8:	429d      	cmp	r5, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
 80056ba:	bfc9      	itett	gt
 80056bc:	1aeb      	subgt	r3, r5, r3
 80056be:	b21c      	sxthle	r4, r3
    wOutput_32 = hLowerOutputLimit;
 80056c0:	462c      	movgt	r4, r5
  pHandle->wIntegralTerm += wDischarge;
 80056c2:	18c9      	addgt	r1, r1, r3
 80056c4:	6081      	str	r1, [r0, #8]
}
 80056c6:	4620      	mov	r0, r4
 80056c8:	bc70      	pop	{r4, r5, r6}
 80056ca:	4770      	bx	lr
      if ( pHandle->wIntegralTerm > 0 )
 80056cc:	2e00      	cmp	r6, #0
 80056ce:	ddde      	ble.n	800568e <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 80056d0:	2900      	cmp	r1, #0
 80056d2:	dddc      	ble.n	800568e <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 80056d4:	68c1      	ldr	r1, [r0, #12]
 80056d6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80056da:	4291      	cmp	r1, r2
 80056dc:	d1de      	bne.n	800569c <PI_Controller+0x34>
          wIntegral_sum_temp = INT32_MAX;
 80056de:	460a      	mov	r2, r1
 80056e0:	e7db      	b.n	800569a <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 80056e2:	4e03      	ldr	r6, [pc, #12]	; (80056f0 <PI_Controller+0x88>)
 80056e4:	ea32 0221 	bics.w	r2, r2, r1, asr #32
 80056e8:	bf28      	it	cs
 80056ea:	4632      	movcs	r2, r6
 80056ec:	e7cf      	b.n	800568e <PI_Controller+0x26>
 80056ee:	bf00      	nop
 80056f0:	80000001 	.word	0x80000001

080056f4 <PQD_CalcElMotorPower>:
  *         motor power.
  * @param power handle.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{
 80056f4:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80056f6:	e9d0 4242 	ldrd	r4, r2, [r0, #264]	; 0x108
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 80056fa:	8b11      	ldrh	r1, [r2, #24]
 80056fc:	89d3      	ldrh	r3, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 80056fe:	8995      	ldrh	r5, [r2, #12]
 8005700:	8ad2      	ldrh	r2, [r2, #22]
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8005702:	fb13 f301 	smulbb	r3, r3, r1
{
 8005706:	4606      	mov	r6, r0
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8005708:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 800570c:	fb15 3502 	smlabb	r5, r5, r2, r3
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8005710:	f7ff fc5a 	bl	8004fc8 <VBS_GetAvBusVoltage_V>
 8005714:	fb04 f200 	mul.w	r2, r4, r0
  wAux /= 65536;
 8005718:	1e2c      	subs	r4, r5, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800571a:	480e      	ldr	r0, [pc, #56]	; (8005754 <PQD_CalcElMotorPower+0x60>)

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 800571c:	490e      	ldr	r1, [pc, #56]	; (8005758 <PQD_CalcElMotorPower+0x64>)
  wAux /= 65536;
 800571e:	bfb8      	it	lt
 8005720:	f504 447f 	addlt.w	r4, r4, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8005724:	fb80 3002 	smull	r3, r0, r0, r2
  wAux /= 65536;
 8005728:	bfb8      	it	lt
 800572a:	34ff      	addlt	r4, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800572c:	17d3      	asrs	r3, r2, #31
  wAux /= 65536;
 800572e:	1424      	asrs	r4, r4, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8005730:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
  wAux3 = wAux * wAux2;
 8005734:	fb03 f304 	mul.w	r3, r3, r4
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8005738:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800573c:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 800573e:	fb81 2103 	smull	r2, r1, r1, r3
 8005742:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8005744:	4630      	mov	r0, r6
 8005746:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 800574a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 800574e:	f7ff beef 	b.w	8005530 <MPM_CalcElMotorPower>
 8005752:	bf00      	nop
 8005754:	1b4e81b5 	.word	0x1b4e81b5
 8005758:	66666667 	.word	0x66666667

0800575c <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 800575c:	4b17      	ldr	r3, [pc, #92]	; (80057bc <startTimers+0x60>)
 800575e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 8005760:	07d2      	lsls	r2, r2, #31
 8005762:	d415      	bmi.n	8005790 <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 8005764:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005766:	f042 0201 	orr.w	r2, r2, #1
 800576a:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800576c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800576e:	b082      	sub	sp, #8
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005770:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005774:	f002 0201 	and.w	r2, r2, #1
 8005778:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800577a:	9a01      	ldr	r2, [sp, #4]
 800577c:	694a      	ldr	r2, [r1, #20]
 800577e:	f042 0201 	orr.w	r2, r2, #1
 8005782:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8005784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005786:	f022 0201 	bic.w	r2, r2, #1
 800578a:	641a      	str	r2, [r3, #64]	; 0x40
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 800578c:	b002      	add	sp, #8
 800578e:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8005790:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005794:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005796:	6859      	ldr	r1, [r3, #4]
 8005798:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800579c:	f041 0120 	orr.w	r1, r1, #32
 80057a0:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80057a2:	6959      	ldr	r1, [r3, #20]
 80057a4:	f041 0101 	orr.w	r1, r1, #1
 80057a8:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80057aa:	6859      	ldr	r1, [r3, #4]
 80057ac:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80057b0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80057b4:	430a      	orrs	r2, r1
 80057b6:	605a      	str	r2, [r3, #4]
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	40023800 	.word	0x40023800

080057c0 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 80057c0:	b4f0      	push	{r4, r5, r6, r7}
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR | TIM_CR1_CMS));
 80057c2:	6804      	ldr	r4, [r0, #0]
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 80057c4:	f004 0460 	and.w	r4, r4, #96	; 0x60
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 80057c8:	3201      	adds	r2, #1
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 80057ca:	2c60      	cmp	r4, #96	; 0x60
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 80057cc:	bf18      	it	ne
 80057ce:	0856      	lsrne	r6, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80057d0:	f06f 0702 	mvn.w	r7, #2
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 80057d4:	bf0c      	ite	eq
 80057d6:	0156      	lsleq	r6, r2, #5
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 80057d8:	0176      	lslne	r6, r6, #5
 80057da:	6107      	str	r7, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 80057dc:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 80057de:	781c      	ldrb	r4, [r3, #0]
 80057e0:	2c0f      	cmp	r4, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 80057e2:	f102 0501 	add.w	r5, r2, #1
  while (*cnt < NB_CONVERSIONS)
 80057e6:	d80b      	bhi.n	8005800 <waitForPolarizationEnd+0x40>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80057e8:	6904      	ldr	r4, [r0, #16]
 80057ea:	07a4      	lsls	r4, r4, #30
 80057ec:	d5f7      	bpl.n	80057de <waitForPolarizationEnd+0x1e>
      hCalibrationPeriodCounter++;
 80057ee:	b2aa      	uxth	r2, r5
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 80057f0:	4296      	cmp	r6, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80057f2:	6107      	str	r7, [r0, #16]
 80057f4:	d8f3      	bhi.n	80057de <waitForPolarizationEnd+0x1e>
      {
        if (*cnt < NB_CONVERSIONS)
 80057f6:	781c      	ldrb	r4, [r3, #0]
 80057f8:	2c0f      	cmp	r4, #15
 80057fa:	d8f0      	bhi.n	80057de <waitForPolarizationEnd+0x1e>
        {
          *SWerror = 1u;
 80057fc:	2301      	movs	r3, #1
 80057fe:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8005800:	bcf0      	pop	{r4, r5, r6, r7}
 8005802:	4770      	bx	lr

08005804 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8005804:	6843      	ldr	r3, [r0, #4]
 8005806:	4718      	bx	r3

08005808 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8005808:	b470      	push	{r4, r5, r6}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800580a:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 800580e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
 8005810:	b083      	sub	sp, #12
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005812:	140c      	asrs	r4, r1, #16
{
 8005814:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005816:	fb06 f404 	mul.w	r4, r6, r4
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 800581a:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800581c:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8005820:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8005824:	eb01 0344 	add.w	r3, r1, r4, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8005828:	ebc1 0144 	rsb	r1, r1, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 800582c:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8005830:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8005834:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005838:	ea4f 0444 	mov.w	r4, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 800583c:	ea4f 0565 	mov.w	r5, r5, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8005840:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 8005844:	db77      	blt.n	8005936 <PWMC_SetPhaseVoltage+0x12e>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8005846:	f1b1 3fff 	cmp.w	r1, #4294967295
 800584a:	db4e      	blt.n	80058ea <PWMC_SetPhaseVoltage+0xe2>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800584c:	1aad      	subs	r5, r5, r2
 800584e:	bf44      	itt	mi
 8005850:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8005854:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8005858:	2900      	cmp	r1, #0
 800585a:	bfbc      	itt	lt
 800585c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8005860:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8005864:	2b00      	cmp	r3, #0
 8005866:	bfb8      	it	lt
 8005868:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800586c:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8005870:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8005874:	bfb8      	it	lt
 8005876:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 800587a:	2401      	movs	r4, #1
      wTimePhB = wTimePhA + wZ / 131072;
 800587c:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8005880:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 8005884:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
      pHandle->highDuty = wTimePhC;
 8005888:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
      pHandle->lowDuty = wTimePhB;
 800588c:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 800588e:	87c2      	strh	r2, [r0, #62]	; 0x3e

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8005890:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 8005894:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8005898:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800589c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80058a0:	b292      	uxth	r2, r2
 80058a2:	b289      	uxth	r1, r1
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 80058a8:	8642      	strh	r2, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 80058aa:	8681      	strh	r1, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 80058ac:	86c3      	strh	r3, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 80058ae:	d118      	bne.n	80058e2 <PWMC_SetPhaseVoltage+0xda>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 80058b0:	f9b0 4048 	ldrsh.w	r4, [r0, #72]	; 0x48
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ib > 0 )
 80058b4:	f9b0 504a 	ldrsh.w	r5, [r0, #74]	; 0x4a
    if ( pHandle->Ia > 0 )
 80058b8:	2c00      	cmp	r4, #0
      pHandle->CntPhA += pHandle->DTCompCnt;
 80058ba:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 80058be:	bfcc      	ite	gt
 80058c0:	1912      	addgt	r2, r2, r4
      pHandle->CntPhA -= pHandle->DTCompCnt;
 80058c2:	1b12      	suble	r2, r2, r4
 80058c4:	b292      	uxth	r2, r2
 80058c6:	8642      	strh	r2, [r0, #50]	; 0x32
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 80058c8:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
    if ( pHandle->Ib > 0 )
 80058cc:	2d00      	cmp	r5, #0
      pHandle->CntPhB += pHandle->DTCompCnt;
 80058ce:	bfcc      	ite	gt
 80058d0:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 80058d2:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 80058d4:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 80058d6:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 80058d8:	bfcc      	ite	gt
 80058da:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 80058dc:	1b1b      	suble	r3, r3, r4
 80058de:	8681      	strh	r1, [r0, #52]	; 0x34
 80058e0:	86c3      	strh	r3, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 80058e2:	6983      	ldr	r3, [r0, #24]
}
 80058e4:	b003      	add	sp, #12
 80058e6:	bc70      	pop	{r4, r5, r6}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 80058e8:	4718      	bx	r3
      if ( wX <= 0 )
 80058ea:	2c00      	cmp	r4, #0
 80058ec:	dd47      	ble.n	800597e <PWMC_SetPhaseVoltage+0x176>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80058ee:	1aa5      	subs	r5, r4, r2
 80058f0:	bf44      	itt	mi
 80058f2:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 80058f6:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 80058fa:	2900      	cmp	r1, #0
 80058fc:	bfb8      	it	lt
 80058fe:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 8005902:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 8005906:	bfb8      	it	lt
 8005908:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 800590c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005910:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 8005912:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005914:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8005918:	bfb8      	it	lt
 800591a:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 800591e:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8005922:	bfb8      	it	lt
 8005924:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8005928:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->highDuty = wTimePhC;
 800592c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 8005930:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8005932:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 8005934:	e7ac      	b.n	8005890 <PWMC_SetPhaseVoltage+0x88>
    if ( wZ < 0 )
 8005936:	f1b1 3fff 	cmp.w	r1, #4294967295
 800593a:	db69      	blt.n	8005a10 <PWMC_SetPhaseVoltage+0x208>
      if ( wX <= 0 )
 800593c:	2c00      	cmp	r4, #0
 800593e:	dd43      	ble.n	80059c8 <PWMC_SetPhaseVoltage+0x1c0>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005940:	1b2d      	subs	r5, r5, r4
 8005942:	bf48      	it	mi
 8005944:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8005948:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800594c:	bf48      	it	mi
 800594e:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8005952:	2b00      	cmp	r3, #0
 8005954:	bfb8      	it	lt
 8005956:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 800595a:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800595e:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8005962:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8005966:	bfb8      	it	lt
 8005968:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 800596c:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8005970:	eb03 4164 	add.w	r1, r3, r4, asr #17
        pHandle->lowDuty = wTimePhB;
 8005974:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8005976:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8005978:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800597c:	e788      	b.n	8005890 <PWMC_SetPhaseVoltage+0x88>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800597e:	1b2d      	subs	r5, r5, r4
 8005980:	bf44      	itt	mi
 8005982:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8005986:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 800598a:	2b00      	cmp	r3, #0
 800598c:	bfb8      	it	lt
 800598e:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 8005992:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 8005996:	bfb8      	it	lt
 8005998:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 800599c:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 80059a0:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80059a2:	ea4f 0296 	mov.w	r2, r6, lsr #2
 80059a6:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 80059aa:	bfb8      	it	lt
 80059ac:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 80059b0:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 80059b4:	bfb8      	it	lt
 80059b6:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 80059ba:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->highDuty = wTimePhB;
 80059be:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 80059c2:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 80059c4:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 80059c6:	e763      	b.n	8005890 <PWMC_SetPhaseVoltage+0x88>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80059c8:	1aa5      	subs	r5, r4, r2
 80059ca:	bf44      	itt	mi
 80059cc:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 80059d0:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 80059d4:	2900      	cmp	r1, #0
 80059d6:	bfb8      	it	lt
 80059d8:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 80059dc:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 80059e0:	bfb8      	it	lt
 80059e2:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 80059e6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80059ea:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 80059ec:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80059ee:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80059f2:	bfb8      	it	lt
 80059f4:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 80059f8:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80059fc:	bfb8      	it	lt
 80059fe:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8005a02:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 8005a06:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8005a08:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8005a0a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8005a0e:	e73f      	b.n	8005890 <PWMC_SetPhaseVoltage+0x88>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005a10:	1aad      	subs	r5, r5, r2
 8005a12:	bf44      	itt	mi
 8005a14:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8005a18:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8005a1c:	2900      	cmp	r1, #0
 8005a1e:	bfbc      	itt	lt
 8005a20:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8005a24:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	bfb8      	it	lt
 8005a2c:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005a30:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8005a34:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8005a38:	bfb8      	it	lt
 8005a3a:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 8005a3e:	2404      	movs	r4, #4
      wTimePhB = wTimePhA + wZ / 131072;
 8005a40:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8005a44:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 8005a48:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 8005a4c:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8005a4e:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 8005a50:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8005a54:	e71c      	b.n	8005890 <PWMC_SetPhaseVoltage+0x88>
 8005a56:	bf00      	nop

08005a58 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8005a58:	6883      	ldr	r3, [r0, #8]
 8005a5a:	4718      	bx	r3

08005a5c <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8005a5c:	b510      	push	{r4, lr}
 8005a5e:	4604      	mov	r4, r0
 8005a60:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 8005a62:	b199      	cbz	r1, 8005a8c <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8005a64:	2901      	cmp	r1, #1
 8005a66:	d002      	beq.n	8005a6e <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8005a68:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8005a6a:	b002      	add	sp, #8
 8005a6c:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8005a6e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8005a72:	b1cb      	cbz	r3, 8005aa8 <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 8005a74:	3b01      	subs	r3, #1
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	9101      	str	r1, [sp, #4]
 8005a7a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1f2      	bne.n	8005a68 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 8005a82:	6903      	ldr	r3, [r0, #16]
 8005a84:	4798      	blx	r3
        retVal = true;
 8005a86:	9901      	ldr	r1, [sp, #4]
 8005a88:	4608      	mov	r0, r1
 8005a8a:	e7ee      	b.n	8005a6a <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 8005a8c:	f7ff ffe4 	bl	8005a58 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8005a90:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8005a94:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e5      	bne.n	8005a68 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	6923      	ldr	r3, [r4, #16]
 8005aa0:	4798      	blx	r3
      retVal = true;
 8005aa2:	2001      	movs	r0, #1
}
 8005aa4:	b002      	add	sp, #8
 8005aa6:	bd10      	pop	{r4, pc}
      retVal = true;
 8005aa8:	4608      	mov	r0, r1
}
 8005aaa:	b002      	add	sp, #8
 8005aac:	bd10      	pop	{r4, pc}
 8005aae:	bf00      	nop

08005ab0 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8005ab0:	69c3      	ldr	r3, [r0, #28]
 8005ab2:	4718      	bx	r3

08005ab4 <RVBS_Clear>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
 8005ab4:	b430      	push	{r4, r5}
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8005ab6:	8b82      	ldrh	r2, [r0, #28]
 8005ab8:	8b44      	ldrh	r4, [r0, #26]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8005aba:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8005abc:	4414      	add	r4, r2
 8005abe:	0864      	lsrs	r4, r4, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8005ac0:	b14b      	cbz	r3, 8005ad6 <RVBS_Clear+0x22>
  {
    pHandle->aBuffer[index] = aux;
 8005ac2:	6a05      	ldr	r5, [r0, #32]
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	3301      	adds	r3, #1
 8005aca:	f825 4012 	strh.w	r4, [r5, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8005ace:	8b01      	ldrh	r1, [r0, #24]
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	4291      	cmp	r1, r2
 8005ad4:	d8f7      	bhi.n	8005ac6 <RVBS_Clear+0x12>
  }
  pHandle->_Super.LatestConv = aux;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f364 030f 	bfi	r3, r4, #0, #16
 8005adc:	f364 431f 	bfi	r3, r4, #16, #16
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8005ae0:	2200      	movs	r2, #0
}
 8005ae2:	bc30      	pop	{r4, r5}
  pHandle->_Super.LatestConv = aux;
 8005ae4:	6043      	str	r3, [r0, #4]
  pHandle->index = 0;
 8005ae6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8005aea:	4770      	bx	lr

08005aec <RVBS_Init>:
{
 8005aec:	b510      	push	{r4, lr}
 8005aee:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8005af0:	300c      	adds	r0, #12
 8005af2:	f7fc fae1 	bl	80020b8 <RCM_RegisterRegConv>
 8005af6:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 8005afa:	4620      	mov	r0, r4
 8005afc:	f7ff ffda 	bl	8005ab4 <RVBS_Clear>
}
 8005b00:	bd10      	pop	{r4, pc}
 8005b02:	bf00      	nop

08005b04 <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8005b04:	88c3      	ldrh	r3, [r0, #6]
 8005b06:	8b42      	ldrh	r2, [r0, #26]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d305      	bcc.n	8005b18 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8005b0c:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 8005b0e:	4298      	cmp	r0, r3
 8005b10:	bf8c      	ite	hi
 8005b12:	2004      	movhi	r0, #4
 8005b14:	2000      	movls	r0, #0
 8005b16:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 8005b18:	2002      	movs	r0, #2
  }
  return fault;
}
 8005b1a:	4770      	bx	lr

08005b1c <RVBS_CalcAvVbus>:
{
 8005b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1e:	4605      	mov	r5, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8005b20:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8005b24:	f7fc fb9a 	bl	800225c <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 8005b28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b2c:	4298      	cmp	r0, r3
 8005b2e:	d01c      	beq.n	8005b6a <RVBS_CalcAvVbus+0x4e>
    pHandle->aBuffer[pHandle->index] = hAux;
 8005b30:	6a2f      	ldr	r7, [r5, #32]
 8005b32:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8005b36:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8005b3a:	8b2e      	ldrh	r6, [r5, #24]
 8005b3c:	b1d6      	cbz	r6, 8005b74 <RVBS_CalcAvVbus+0x58>
 8005b3e:	2300      	movs	r3, #0
    wtemp = 0;
 8005b40:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 8005b42:	f837 4013 	ldrh.w	r4, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8005b46:	3301      	adds	r3, #1
 8005b48:	b2d9      	uxtb	r1, r3
 8005b4a:	42b1      	cmp	r1, r6
      wtemp += pHandle->aBuffer[i];
 8005b4c:	4422      	add	r2, r4
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8005b4e:	460b      	mov	r3, r1
 8005b50:	d3f7      	bcc.n	8005b42 <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 8005b52:	fbb2 f2f6 	udiv	r2, r2, r6
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8005b56:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8005b5a:	80ea      	strh	r2, [r5, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8005b5c:	3e01      	subs	r6, #1
 8005b5e:	42b3      	cmp	r3, r6
    pHandle->_Super.LatestConv = hAux;
 8005b60:	80a8      	strh	r0, [r5, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8005b62:	da09      	bge.n	8005b78 <RVBS_CalcAvVbus+0x5c>
      pHandle->index++;
 8005b64:	3301      	adds	r3, #1
 8005b66:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	f7ff ffca 	bl	8005b04 <RVBS_CheckFaultState>
 8005b70:	8128      	strh	r0, [r5, #8]
}
 8005b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8005b74:	80ee      	strh	r6, [r5, #6]
    pHandle->_Super.LatestConv = hAux;
 8005b76:	80a8      	strh	r0, [r5, #4]
      pHandle->index = 0;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8005b7e:	4628      	mov	r0, r5
 8005b80:	f7ff ffc0 	bl	8005b04 <RVBS_CheckFaultState>
 8005b84:	8128      	strh	r0, [r5, #8]
}
 8005b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005b88 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8005b88:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8005b8a:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 8005b8c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8005b90:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 8005b94:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 8005b96:	4770      	bx	lr

08005b98 <REMNG_Calc>:
__weak int32_t REMNG_Calc( RampExtMngr_Handle_t * pHandle )
{
  int32_t ret_val;
  int32_t current_ref;

  current_ref = pHandle->Ext;
 8005b98:	e9d0 3102 	ldrd	r3, r1, [r0, #8]

  /* Update the variable and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8005b9c:	2901      	cmp	r1, #1
 8005b9e:	d90c      	bls.n	8005bba <REMNG_Calc+0x22>
{
 8005ba0:	b410      	push	{r4}
 8005ba2:	e9d0 4204 	ldrd	r4, r2, [r0, #16]
  {
    /* Increment/decrement the reference value. */
    current_ref += pHandle->IncDecAmount;

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep --;
 8005ba6:	3901      	subs	r1, #1
    current_ref += pHandle->IncDecAmount;
 8005ba8:	4423      	add	r3, r4
    pHandle->RampRemainingStep --;
 8005baa:	60c1      	str	r1, [r0, #12]
  else
  {
    /* Do nothing. */
  }

  pHandle->Ext = current_ref;
 8005bac:	6083      	str	r3, [r0, #8]
 8005bae:	fb93 f2f2 	sdiv	r2, r3, r2
#else
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
#endif

  return ret_val;
}
 8005bb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bb6:	4610      	mov	r0, r2
 8005bb8:	4770      	bx	lr
  else if ( pHandle->RampRemainingStep == 1u )
 8005bba:	d005      	beq.n	8005bc8 <REMNG_Calc+0x30>
 8005bbc:	6942      	ldr	r2, [r0, #20]
  pHandle->Ext = current_ref;
 8005bbe:	6083      	str	r3, [r0, #8]
 8005bc0:	fb93 f2f2 	sdiv	r2, r3, r2
}
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	4770      	bx	lr
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8005bc8:	6842      	ldr	r2, [r0, #4]
 8005bca:	6943      	ldr	r3, [r0, #20]
    pHandle->RampRemainingStep = 0u;
 8005bcc:	2100      	movs	r1, #0
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8005bce:	fb03 f302 	mul.w	r3, r3, r2
    pHandle->RampRemainingStep = 0u;
 8005bd2:	60c1      	str	r1, [r0, #12]
  pHandle->Ext = current_ref;
 8005bd4:	6083      	str	r3, [r0, #8]
}
 8005bd6:	4610      	mov	r0, r2
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop

08005bdc <REMNG_RampCompleted>:
  * @retval bool It returns true if the ramp is completed, false otherwise.
  */
__weak bool REMNG_RampCompleted( RampExtMngr_Handle_t * pHandle )
{
  bool retVal = false;
  if ( pHandle->RampRemainingStep == 0u )
 8005bdc:	68c0      	ldr	r0, [r0, #12]
  {
    retVal = true;
  }
  return retVal;
}
 8005bde:	fab0 f080 	clz	r0, r0
 8005be2:	0940      	lsrs	r0, r0, #5
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop

08005be8 <getScalingFactor>:
  uint32_t TargetAbs;
  int32_t aux;

  if ( Target < 0 )
  {
    aux = -Target;
 8005be8:	2800      	cmp	r0, #0
 8005bea:	bfb8      	it	lt
 8005bec:	4240      	neglt	r0, r0
{
 8005bee:	2301      	movs	r3, #1
  {
    TargetAbs = ( uint32_t )( Target );
  }
  for ( i = 1u; i < 32u; i++ )
  {
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8005bf0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005bf4:	e002      	b.n	8005bfc <getScalingFactor+0x14>
 8005bf6:	3301      	adds	r3, #1
  for ( i = 1u; i < 32u; i++ )
 8005bf8:	2b20      	cmp	r3, #32
 8005bfa:	d007      	beq.n	8005c0c <getScalingFactor+0x24>
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8005bfc:	fa21 f203 	lsr.w	r2, r1, r3
    if ( TargetAbs >= limit )
 8005c00:	4290      	cmp	r0, r2
 8005c02:	d3f8      	bcc.n	8005bf6 <getScalingFactor+0xe>
 8005c04:	3b01      	subs	r3, #1
 8005c06:	2001      	movs	r0, #1
 8005c08:	4098      	lsls	r0, r3
    {
      break;
    }
  }
  return ( ( uint32_t )( 1u ) << ( i - 1u ) );
}
 8005c0a:	4770      	bx	lr
 8005c0c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop

08005c14 <REMNG_ExecRamp>:
{
 8005c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c18:	4604      	mov	r4, r0
 8005c1a:	460d      	mov	r5, r1
  if ( Durationms == 0u )
 8005c1c:	4690      	mov	r8, r2
 8005c1e:	b95a      	cbnz	r2, 8005c38 <REMNG_ExecRamp+0x24>
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 8005c20:	4608      	mov	r0, r1
 8005c22:	f7ff ffe1 	bl	8005be8 <getScalingFactor>
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8005c26:	fb05 f500 	mul.w	r5, r5, r0
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 8005c2a:	6160      	str	r0, [r4, #20]
    pHandle->IncDecAmount = 0;
 8005c2c:	e9c4 8803 	strd	r8, r8, [r4, #12]
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8005c30:	60a5      	str	r5, [r4, #8]
}
 8005c32:	2001      	movs	r0, #1
 8005c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8005c38:	6943      	ldr	r3, [r0, #20]
 8005c3a:	6887      	ldr	r7, [r0, #8]
 8005c3c:	fb97 f7f3 	sdiv	r7, r7, r3
    uint32_t wScalingFactor = getScalingFactor( TargetFinal - current_ref );
 8005c40:	1bce      	subs	r6, r1, r7
 8005c42:	4630      	mov	r0, r6
 8005c44:	f7ff ffd0 	bl	8005be8 <getScalingFactor>
 8005c48:	4682      	mov	sl, r0
    uint32_t wScalingFactor2 = getScalingFactor( current_ref );
 8005c4a:	4638      	mov	r0, r7
 8005c4c:	f7ff ffcc 	bl	8005be8 <getScalingFactor>
 8005c50:	4681      	mov	r9, r0
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 8005c52:	4628      	mov	r0, r5
 8005c54:	f7ff ffc8 	bl	8005be8 <getScalingFactor>
    if ( wScalingFactor <  wScalingFactor2 )
 8005c58:	45ca      	cmp	sl, r9
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 8005c5a:	4603      	mov	r3, r0
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8005c5c:	6821      	ldr	r1, [r4, #0]
    pHandle->TargetFinal = TargetFinal;
 8005c5e:	6065      	str	r5, [r4, #4]
 8005c60:	bf2c      	ite	cs
 8005c62:	4648      	movcs	r0, r9
 8005c64:	4650      	movcc	r0, sl
      if ( wScalingFactor2 < wScalingFactor3 )
 8005c66:	4298      	cmp	r0, r3
 8005c68:	bf28      	it	cs
 8005c6a:	4618      	movcs	r0, r3
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8005c6c:	fb01 f308 	mul.w	r3, r1, r8
    aux /= 1000u;
 8005c70:	4908      	ldr	r1, [pc, #32]	; (8005c94 <REMNG_ExecRamp+0x80>)
    pHandle->ScalingFactor = wScalingFactorMin;
 8005c72:	6160      	str	r0, [r4, #20]
    aux /= 1000u;
 8005c74:	fba1 2303 	umull	r2, r3, r1, r3
 8005c78:	099b      	lsrs	r3, r3, #6
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 8005c7a:	fb07 f700 	mul.w	r7, r7, r0
    pHandle->RampRemainingStep++;
 8005c7e:	3301      	adds	r3, #1
    aux1 = ( TargetFinal - current_ref ) * ( int32_t )( pHandle->ScalingFactor );
 8005c80:	fb00 f006 	mul.w	r0, r0, r6
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 8005c84:	60a7      	str	r7, [r4, #8]
    aux1 /= ( int32_t )( pHandle->RampRemainingStep );
 8005c86:	fb90 f0f3 	sdiv	r0, r0, r3
    pHandle->IncDecAmount = aux1;
 8005c8a:	e9c4 3003 	strd	r3, r0, [r4, #12]
}
 8005c8e:	2001      	movs	r0, #1
 8005c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c94:	10624dd3 	.word	0x10624dd3

08005c98 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8005c98:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop

08005ca0 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8005ca0:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop

08005ca8 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8005ca8:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop

08005cb0 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8005cb0:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8005cb4:	8a81      	ldrh	r1, [r0, #20]
{
 8005cb6:	b430      	push	{r4, r5}
  if ( *pMecSpeedUnit < 0 )
 8005cb8:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 8005cba:	bfb8      	it	lt
 8005cbc:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8005cbe:	8ac5      	ldrh	r5, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8005cc0:	78c4      	ldrb	r4, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8005cc2:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 8005cc4:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8005cc6:	429d      	cmp	r5, r3
 8005cc8:	d817      	bhi.n	8005cfa <SPD_IsMecSpeedReliable+0x4a>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8005cca:	4299      	cmp	r1, r3
 8005ccc:	bf2c      	ite	cs
 8005cce:	2300      	movcs	r3, #0
 8005cd0:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8005cd2:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8005cd6:	8b05      	ldrh	r5, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 8005cd8:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 8005cda:	bfb8      	it	lt
 8005cdc:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 8005cde:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8005ce0:	428d      	cmp	r5, r1
 8005ce2:	d300      	bcc.n	8005ce6 <SPD_IsMecSpeedReliable+0x36>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8005ce4:	b15b      	cbz	r3, 8005cfe <SPD_IsMecSpeedReliable+0x4e>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8005ce6:	4294      	cmp	r4, r2
 8005ce8:	d901      	bls.n	8005cee <SPD_IsMecSpeedReliable+0x3e>
    {
      bSpeedErrorNumber++;
 8005cea:	3201      	adds	r2, #1
 8005cec:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8005cee:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 8005cf0:	1b10      	subs	r0, r2, r4
 8005cf2:	bf18      	it	ne
 8005cf4:	2001      	movne	r0, #1
 8005cf6:	bc30      	pop	{r4, r5}
 8005cf8:	4770      	bx	lr
    SpeedError = true;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e7e9      	b.n	8005cd2 <SPD_IsMecSpeedReliable+0x22>
      bSpeedErrorNumber = 0u;
 8005cfe:	4294      	cmp	r4, r2
 8005d00:	bf88      	it	hi
 8005d02:	2200      	movhi	r2, #0
 8005d04:	e7f3      	b.n	8005cee <SPD_IsMecSpeedReliable+0x3e>
 8005d06:	bf00      	nop

08005d08 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8005d08:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8005d0c:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 8005d10:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8005d14:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 8005d18:	b200      	sxth	r0, r0
 8005d1a:	4770      	bx	lr

08005d1c <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 8005d1c:	b430      	push	{r4, r5}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8005d1e:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8005d22:	f9b0 402c 	ldrsh.w	r4, [r0, #44]	; 0x2c
  pHandle->Mode = pHandle->ModeDefault;
 8005d26:	f890 502a 	ldrb.w	r5, [r0, #42]	; 0x2a
  pHandle->PISpeed = pPI;
 8005d2a:	6101      	str	r1, [r0, #16]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8005d2c:	0424      	lsls	r4, r4, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8005d2e:	0419      	lsls	r1, r3, #16
  pHandle->TargetFinal = 0;
 8005d30:	2300      	movs	r3, #0
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8005d32:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->Mode = pHandle->ModeDefault;
 8005d36:	7005      	strb	r5, [r0, #0]
  pHandle->SPD = SPD_Handle;
 8005d38:	6142      	str	r2, [r0, #20]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 8005d3a:	bc30      	pop	{r4, r5}
  pHandle->TargetFinal = 0;
 8005d3c:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 8005d3e:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8005d40:	6183      	str	r3, [r0, #24]
}
 8005d42:	4770      	bx	lr

08005d44 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 8005d44:	6141      	str	r1, [r0, #20]
}
 8005d46:	4770      	bx	lr

08005d48 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8005d48:	6940      	ldr	r0, [r0, #20]
 8005d4a:	4770      	bx	lr

08005d4c <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 8005d4c:	7803      	ldrb	r3, [r0, #0]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d000      	beq.n	8005d54 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8005d52:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8005d54:	6900      	ldr	r0, [r0, #16]
 8005d56:	2100      	movs	r1, #0
 8005d58:	f7ff bc7a 	b.w	8005650 <PID_SetIntegralTerm>

08005d5c <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 8005d5c:	6840      	ldr	r0, [r0, #4]
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	bfbc      	itt	lt
 8005d62:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8005d66:	30ff      	addlt	r0, #255	; 0xff
}
 8005d68:	1400      	asrs	r0, r0, #16
 8005d6a:	4770      	bx	lr

08005d6c <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8005d6c:	6880      	ldr	r0, [r0, #8]
 8005d6e:	2800      	cmp	r0, #0
 8005d70:	bfbc      	itt	lt
 8005d72:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8005d76:	30ff      	addlt	r0, #255	; 0xff
}
 8005d78:	1400      	asrs	r0, r0, #16
 8005d7a:	4770      	bx	lr

08005d7c <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8005d7c:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 8005d7e:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8005d80:	60c3      	str	r3, [r0, #12]
}
 8005d82:	4770      	bx	lr

08005d84 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8005d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8005d86:	7806      	ldrb	r6, [r0, #0]
{
 8005d88:	4604      	mov	r4, r0
 8005d8a:	460d      	mov	r5, r1
 8005d8c:	4617      	mov	r7, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8005d8e:	b326      	cbz	r6, 8005dda <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8005d90:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8005d92:	8be1      	ldrh	r1, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8005d94:	2800      	cmp	r0, #0
 8005d96:	bfbc      	itt	lt
 8005d98:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8005d9c:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8005d9e:	428d      	cmp	r5, r1
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8005da0:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8005da4:	dd01      	ble.n	8005daa <STC_ExecRamp+0x26>
      AllowedRange = false;
 8005da6:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8005da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 8005daa:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
 8005dae:	42a9      	cmp	r1, r5
 8005db0:	dcf9      	bgt.n	8005da6 <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8005db2:	8c23      	ldrh	r3, [r4, #32]
 8005db4:	429d      	cmp	r5, r3
 8005db6:	da03      	bge.n	8005dc0 <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8005db8:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8005dbc:	42ab      	cmp	r3, r5
 8005dbe:	dbf2      	blt.n	8005da6 <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 8005dc0:	b9af      	cbnz	r7, 8005dee <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8005dc2:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8005dc4:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8005dc6:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 8005dc8:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8005dcc:	bf0c      	ite	eq
 8005dce:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8005dd0:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 8005dd2:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 8005dd4:	61a3      	str	r3, [r4, #24]
 8005dd6:	2001      	movs	r0, #1
}
 8005dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8005dda:	f7ff ffc7 	bl	8005d6c <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8005dde:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
 8005de0:	42b5      	cmp	r5, r6
 8005de2:	dce0      	bgt.n	8005da6 <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8005de4:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8005de8:	42ab      	cmp	r3, r5
 8005dea:	dcdc      	bgt.n	8005da6 <STC_ExecRamp+0x22>
 8005dec:	e7e8      	b.n	8005dc0 <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8005dee:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 8005df0:	4a07      	ldr	r2, [pc, #28]	; (8005e10 <STC_ExecRamp+0x8c>)
      pHandle->TargetFinal = hTargetFinal;
 8005df2:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8005df4:	fb07 f303 	mul.w	r3, r7, r3
      wAux /= 1000u;
 8005df8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfc:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 8005dfe:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8005e00:	1a2d      	subs	r5, r5, r0
 8005e02:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep++;
 8005e04:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8005e06:	fb95 f5f3 	sdiv	r5, r5, r3
      pHandle->IncDecAmount = wAux1;
 8005e0a:	2001      	movs	r0, #1
 8005e0c:	61a5      	str	r5, [r4, #24]
}
 8005e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e10:	10624dd3 	.word	0x10624dd3

08005e14 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8005e14:	2300      	movs	r3, #0
 8005e16:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8005e18:	6183      	str	r3, [r0, #24]
}
 8005e1a:	4770      	bx	lr

08005e1c <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 8005e1c:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 8005e1e:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8005e22:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8005e24:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 8005e26:	2a00      	cmp	r2, #0
 8005e28:	bf08      	it	eq
 8005e2a:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 8005e2c:	2b01      	cmp	r3, #1
{
 8005e2e:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 8005e30:	d90c      	bls.n	8005e4c <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8005e32:	6981      	ldr	r1, [r0, #24]
 8005e34:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8005e36:	3b01      	subs	r3, #1
 8005e38:	2e00      	cmp	r6, #0
 8005e3a:	60c3      	str	r3, [r0, #12]
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	db09      	blt.n	8005e54 <STC_CalcTorqueReference+0x38>
 8005e40:	1405      	asrs	r5, r0, #16
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 8005e42:	2a01      	cmp	r2, #1
 8005e44:	d00a      	beq.n	8005e5c <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 8005e46:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8005e48:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 8005e4a:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 8005e4c:	d012      	beq.n	8005e74 <STC_CalcTorqueReference+0x58>
 8005e4e:	2e00      	cmp	r6, #0
 8005e50:	4630      	mov	r0, r6
 8005e52:	daf5      	bge.n	8005e40 <STC_CalcTorqueReference+0x24>
 8005e54:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 8005e58:	30ff      	adds	r0, #255	; 0xff
 8005e5a:	e7f1      	b.n	8005e40 <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8005e5c:	6960      	ldr	r0, [r4, #20]
 8005e5e:	f7ff ff1f 	bl	8005ca0 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8005e62:	1a28      	subs	r0, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8005e64:	b201      	sxth	r1, r0
 8005e66:	6920      	ldr	r0, [r4, #16]
 8005e68:	f7ff fbfe 	bl	8005668 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8005e6c:	0403      	lsls	r3, r0, #16
 8005e6e:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 8005e72:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8005e74:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8005e78:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8005e7a:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 8005e7c:	60c3      	str	r3, [r0, #12]
 8005e7e:	e7e0      	b.n	8005e42 <STC_CalcTorqueReference+0x26>

08005e80 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8005e80:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop

08005e88 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 8005e88:	8bc0      	ldrh	r0, [r0, #30]
 8005e8a:	4770      	bx	lr

08005e8c <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 8005e8c:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop

08005e94 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8005e94:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 8005e98:	2200      	movs	r2, #0
 8005e9a:	b299      	uxth	r1, r3
 8005e9c:	f361 020f 	bfi	r2, r1, #0, #16
 8005ea0:	0c1b      	lsrs	r3, r3, #16
 8005ea2:	f363 421f 	bfi	r2, r3, #16, #16
{
 8005ea6:	b082      	sub	sp, #8
}
 8005ea8:	4610      	mov	r0, r2
 8005eaa:	b002      	add	sp, #8
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop

08005eb0 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8005eb0:	b510      	push	{r4, lr}
 8005eb2:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8005eb4:	6940      	ldr	r0, [r0, #20]
 8005eb6:	f7ff fef3 	bl	8005ca0 <SPD_GetAvrgMecSpeedUnit>
 8005eba:	0400      	lsls	r0, r0, #16
 8005ebc:	6060      	str	r0, [r4, #4]
}
 8005ebe:	bd10      	pop	{r4, pc}

08005ec0 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8005ec4:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop

08005ecc <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 8005ecc:	b430      	push	{r4, r5}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8005ece:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8005ed0:	8885      	ldrh	r5, [r0, #4]
  State_t LocalState =  pHandle->bState;
 8005ed2:	7804      	ldrb	r4, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8005ed4:	430b      	orrs	r3, r1
 8005ed6:	ea23 0202 	bic.w	r2, r3, r2
 8005eda:	b292      	uxth	r2, r2
  pHandle->hFaultOccurred |= hSetErrors;
 8005edc:	4329      	orrs	r1, r5

  if ( LocalState == FAULT_NOW )
 8005ede:	2c0a      	cmp	r4, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8005ee0:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8005ee2:	8081      	strh	r1, [r0, #4]
  if ( LocalState == FAULT_NOW )
 8005ee4:	d008      	beq.n	8005ef8 <STM_FaultProcessing+0x2c>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 8005ee6:	b912      	cbnz	r2, 8005eee <STM_FaultProcessing+0x22>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 8005ee8:	4620      	mov	r0, r4
 8005eea:	bc30      	pop	{r4, r5}
 8005eec:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 8005eee:	240a      	movs	r4, #10
 8005ef0:	7004      	strb	r4, [r0, #0]
}
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	bc30      	pop	{r4, r5}
 8005ef6:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 8005ef8:	2a00      	cmp	r2, #0
 8005efa:	d1f5      	bne.n	8005ee8 <STM_FaultProcessing+0x1c>
      pHandle->bState = FAULT_OVER;
 8005efc:	240b      	movs	r4, #11
 8005efe:	7004      	strb	r4, [r0, #0]
}
 8005f00:	4620      	mov	r0, r4
 8005f02:	bc30      	pop	{r4, r5}
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop

08005f08 <STM_NextState>:
{
 8005f08:	b508      	push	{r3, lr}
 8005f0a:	7803      	ldrb	r3, [r0, #0]
 8005f0c:	2b14      	cmp	r3, #20
 8005f0e:	d810      	bhi.n	8005f32 <STM_NextState+0x2a>
 8005f10:	e8df f003 	tbb	[pc, r3]
 8005f14:	240d545e 	.word	0x240d545e
 8005f18:	390d352e 	.word	0x390d352e
 8005f1c:	0f0f3f3c 	.word	0x0f0f3f3c
 8005f20:	47650b44 	.word	0x47650b44
 8005f24:	504d1b4a 	.word	0x504d1b4a
 8005f28:	5b          	.byte	0x5b
 8005f29:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8005f2a:	290e      	cmp	r1, #14
 8005f2c:	d013      	beq.n	8005f56 <STM_NextState+0x4e>
      if ( bState == ANY_STOP )
 8005f2e:	2907      	cmp	r1, #7
 8005f30:	d011      	beq.n	8005f56 <STM_NextState+0x4e>
 8005f32:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d018      	beq.n	8005f6c <STM_NextState+0x64>
 8005f3a:	2907      	cmp	r1, #7
 8005f3c:	d016      	beq.n	8005f6c <STM_NextState+0x64>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2180      	movs	r1, #128	; 0x80
 8005f42:	f7ff ffc3 	bl	8005ecc <STM_FaultProcessing>
 8005f46:	2000      	movs	r0, #0
}
 8005f48:	bd08      	pop	{r3, pc}
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8005f4a:	2914      	cmp	r1, #20
 8005f4c:	d8f1      	bhi.n	8005f32 <STM_NextState+0x2a>
 8005f4e:	4b26      	ldr	r3, [pc, #152]	; (8005fe8 <STM_NextState+0xe0>)
 8005f50:	40cb      	lsrs	r3, r1
 8005f52:	07db      	lsls	r3, r3, #31
 8005f54:	d5ed      	bpl.n	8005f32 <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 8005f56:	7001      	strb	r1, [r0, #0]
 8005f58:	2001      	movs	r0, #1
}
 8005f5a:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 8005f5c:	2911      	cmp	r1, #17
 8005f5e:	d8ee      	bhi.n	8005f3e <STM_NextState+0x36>
 8005f60:	4b22      	ldr	r3, [pc, #136]	; (8005fec <STM_NextState+0xe4>)
 8005f62:	40cb      	lsrs	r3, r1
 8005f64:	07da      	lsls	r2, r3, #31
 8005f66:	d4f6      	bmi.n	8005f56 <STM_NextState+0x4e>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8005f68:	2903      	cmp	r1, #3
 8005f6a:	d1e8      	bne.n	8005f3e <STM_NextState+0x36>
 8005f6c:	2000      	movs	r0, #0
}
 8005f6e:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8005f70:	2913      	cmp	r1, #19
 8005f72:	d0f0      	beq.n	8005f56 <STM_NextState+0x4e>
 8005f74:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8005f78:	2b05      	cmp	r3, #5
 8005f7a:	d1dc      	bne.n	8005f36 <STM_NextState+0x2e>
 8005f7c:	e7eb      	b.n	8005f56 <STM_NextState+0x4e>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8005f7e:	1f8b      	subs	r3, r1, #6
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d8d6      	bhi.n	8005f32 <STM_NextState+0x2a>
 8005f84:	e7e7      	b.n	8005f56 <STM_NextState+0x4e>
      if ( bState == STOP )
 8005f86:	2908      	cmp	r1, #8
 8005f88:	d1d3      	bne.n	8005f32 <STM_NextState+0x2a>
 8005f8a:	e7e4      	b.n	8005f56 <STM_NextState+0x4e>
      if ( bState == STOP_IDLE )
 8005f8c:	2909      	cmp	r1, #9
 8005f8e:	d1d0      	bne.n	8005f32 <STM_NextState+0x2a>
 8005f90:	e7e1      	b.n	8005f56 <STM_NextState+0x4e>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8005f92:	2900      	cmp	r1, #0
 8005f94:	d0df      	beq.n	8005f56 <STM_NextState+0x4e>
 8005f96:	290c      	cmp	r1, #12
 8005f98:	d1cb      	bne.n	8005f32 <STM_NextState+0x2a>
 8005f9a:	e7dc      	b.n	8005f56 <STM_NextState+0x4e>
      if ( bState == IDLE )
 8005f9c:	2900      	cmp	r1, #0
 8005f9e:	d0da      	beq.n	8005f56 <STM_NextState+0x4e>
 8005fa0:	e7c7      	b.n	8005f32 <STM_NextState+0x2a>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8005fa2:	2902      	cmp	r1, #2
 8005fa4:	d1c3      	bne.n	8005f2e <STM_NextState+0x26>
 8005fa6:	e7d6      	b.n	8005f56 <STM_NextState+0x4e>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8005fa8:	2911      	cmp	r1, #17
 8005faa:	d1c0      	bne.n	8005f2e <STM_NextState+0x26>
 8005fac:	e7d3      	b.n	8005f56 <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8005fae:	2904      	cmp	r1, #4
 8005fb0:	d1bd      	bne.n	8005f2e <STM_NextState+0x26>
 8005fb2:	e7d0      	b.n	8005f56 <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8005fb4:	1f0b      	subs	r3, r1, #4
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d8b9      	bhi.n	8005f2e <STM_NextState+0x26>
 8005fba:	e7cc      	b.n	8005f56 <STM_NextState+0x4e>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8005fbc:	2907      	cmp	r1, #7
 8005fbe:	d0ca      	beq.n	8005f56 <STM_NextState+0x4e>
 8005fc0:	f1a1 030d 	sub.w	r3, r1, #13
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d8b4      	bhi.n	8005f32 <STM_NextState+0x2a>
 8005fc8:	e7c5      	b.n	8005f56 <STM_NextState+0x4e>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 8005fca:	2912      	cmp	r1, #18
 8005fcc:	d1af      	bne.n	8005f2e <STM_NextState+0x26>
 8005fce:	e7c2      	b.n	8005f56 <STM_NextState+0x4e>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8005fd0:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d0be      	beq.n	8005f56 <STM_NextState+0x4e>
           || ( bState == ICLWAIT ) )
 8005fd8:	290c      	cmp	r1, #12
 8005fda:	d1ae      	bne.n	8005f3a <STM_NextState+0x32>
 8005fdc:	e7bb      	b.n	8005f56 <STM_NextState+0x4e>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 8005fde:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 8005fe2:	2b07      	cmp	r3, #7
 8005fe4:	d1a5      	bne.n	8005f32 <STM_NextState+0x2a>
 8005fe6:	e7b6      	b.n	8005f56 <STM_NextState+0x4e>
 8005fe8:	00140080 	.word	0x00140080
 8005fec:	00030092 	.word	0x00030092

08005ff0 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 8005ff0:	7800      	ldrb	r0, [r0, #0]
 8005ff2:	4770      	bx	lr

08005ff4 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 8005ff4:	7803      	ldrb	r3, [r0, #0]
 8005ff6:	2b0b      	cmp	r3, #11
 8005ff8:	d001      	beq.n	8005ffe <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 8005ffa:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 8005ffc:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 8005ffe:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8006000:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 8006002:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8006004:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 8006006:	2001      	movs	r0, #1
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop

0800600c <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 800600c:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 800600e:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 8006010:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop

08006018 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 8006018:	f7ff b820 	b.w	800505c <FCP_Init>

0800601c <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 800601c:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
 8006020:	b16a      	cbz	r2, 800603e <UFCP_TX_IRQ_Handler+0x22>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 8006022:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
 8006026:	4603      	mov	r3, r0
 8006028:	b1a2      	cbz	r2, 8006054 <UFCP_TX_IRQ_Handler+0x38>
 800602a:	2a01      	cmp	r2, #1
 800602c:	d108      	bne.n	8006040 <UFCP_TX_IRQ_Handler+0x24>
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
        break;

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 800602e:	7d41      	ldrb	r1, [r0, #21]
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8006030:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8006034:	6041      	str	r1, [r0, #4]

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 8006036:	3201      	adds	r2, #1
 8006038:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 800603c:	4770      	bx	lr
 800603e:	4770      	bx	lr
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8006040:	7d41      	ldrb	r1, [r0, #21]
 8006042:	3101      	adds	r1, #1
 8006044:	428a      	cmp	r2, r1
 8006046:	dc07      	bgt.n	8006058 <UFCP_TX_IRQ_Handler+0x3c>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 8006048:	1881      	adds	r1, r0, r2
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 800604a:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
 800604e:	7d09      	ldrb	r1, [r1, #20]
 8006050:	6041      	str	r1, [r0, #4]
    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8006052:	e7f0      	b.n	8006036 <UFCP_TX_IRQ_Handler+0x1a>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 8006054:	7d01      	ldrb	r1, [r0, #20]
        break;
 8006056:	e7eb      	b.n	8006030 <UFCP_TX_IRQ_Handler+0x14>
{
 8006058:	b430      	push	{r4, r5}
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 800605a:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 800605e:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
 8006062:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8006064:	68d1      	ldr	r1, [r2, #12]
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8006066:	e9d0 0400 	ldrd	r0, r4, [r0]
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 800606a:	2500      	movs	r5, #0
 800606c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006070:	60d1      	str	r1, [r2, #12]
 8006072:	f883 5097 	strb.w	r5, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8006076:	4623      	mov	r3, r4
}
 8006078:	bc30      	pop	{r4, r5}
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800607a:	4718      	bx	r3

0800607c <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 800607c:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8006080:	b10b      	cbz	r3, 8006086 <UFCP_Receive+0xa>
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8006082:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8006084:	4770      	bx	lr
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 8006086:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 800608a:	2301      	movs	r3, #1
 800608c:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8006090:	68d3      	ldr	r3, [r2, #12]
 8006092:	f043 0320 	orr.w	r3, r3, #32
 8006096:	60d3      	str	r3, [r2, #12]
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8006098:	2002      	movs	r0, #2
 800609a:	4770      	bx	lr

0800609c <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 800609c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609e:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 80060a0:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 80060a4:	b108      	cbz	r0, 80060aa <UFCP_Send+0xe>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 80060a6:	2001      	movs	r0, #1
  }

  return ret_val;
}
 80060a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while ( size-- ) *dest++ = *buffer++;
 80060aa:	1e58      	subs	r0, r3, #1
    pHandle->TxFrame.Code = code;
 80060ac:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 80060ae:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 80060b0:	b2c0      	uxtb	r0, r0
    uint8_t *dest = pHandle->TxFrame.Buffer;
 80060b2:	f104 0c16 	add.w	ip, r4, #22
    while ( size-- ) *dest++ = *buffer++;
 80060b6:	b34b      	cbz	r3, 800610c <UFCP_Send+0x70>
 80060b8:	f104 011a 	add.w	r1, r4, #26
 80060bc:	1d17      	adds	r7, r2, #4
 80060be:	45bc      	cmp	ip, r7
 80060c0:	bf38      	it	cc
 80060c2:	428a      	cmpcc	r2, r1
 80060c4:	d336      	bcc.n	8006134 <UFCP_Send+0x98>
 80060c6:	2807      	cmp	r0, #7
 80060c8:	d934      	bls.n	8006134 <UFCP_Send+0x98>
 80060ca:	0899      	lsrs	r1, r3, #2
 80060cc:	3901      	subs	r1, #1
 80060ce:	b2c9      	uxtb	r1, r1
 80060d0:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 80060d4:	4665      	mov	r5, ip
 80060d6:	4611      	mov	r1, r2
 80060d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80060dc:	f845 6b04 	str.w	r6, [r5], #4
 80060e0:	42b9      	cmp	r1, r7
 80060e2:	d1f9      	bne.n	80060d8 <UFCP_Send+0x3c>
 80060e4:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 80060e8:	1a40      	subs	r0, r0, r1
 80060ea:	428b      	cmp	r3, r1
 80060ec:	b2c0      	uxtb	r0, r0
 80060ee:	eb02 0601 	add.w	r6, r2, r1
 80060f2:	eb0c 0501 	add.w	r5, ip, r1
 80060f6:	d009      	beq.n	800610c <UFCP_Send+0x70>
 80060f8:	5c53      	ldrb	r3, [r2, r1]
 80060fa:	f80c 3001 	strb.w	r3, [ip, r1]
 80060fe:	b128      	cbz	r0, 800610c <UFCP_Send+0x70>
 8006100:	7873      	ldrb	r3, [r6, #1]
 8006102:	706b      	strb	r3, [r5, #1]
 8006104:	2801      	cmp	r0, #1
 8006106:	d001      	beq.n	800610c <UFCP_Send+0x70>
 8006108:	78b3      	ldrb	r3, [r6, #2]
 800610a:	70ab      	strb	r3, [r5, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 800610c:	f104 0014 	add.w	r0, r4, #20
 8006110:	f7fe ffb8 	bl	8005084 <FCP_CalcCRC>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 8006114:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8006118:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 800611c:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 800611e:	2301      	movs	r3, #1
    pHandle->TxFrameLevel = 0;
 8006120:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8006124:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8006128:	68d3      	ldr	r3, [r2, #12]
 800612a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800612e:	60d3      	str	r3, [r2, #12]
 8006130:	2002      	movs	r0, #2
}
 8006132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006134:	3001      	adds	r0, #1
 8006136:	4410      	add	r0, r2
 8006138:	f104 0315 	add.w	r3, r4, #21
    while ( size-- ) *dest++ = *buffer++;
 800613c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006140:	f803 1f01 	strb.w	r1, [r3, #1]!
 8006144:	4282      	cmp	r2, r0
 8006146:	d1f9      	bne.n	800613c <UFCP_Send+0xa0>
 8006148:	e7e0      	b.n	800610c <UFCP_Send+0x70>
 800614a:	bf00      	nop

0800614c <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 800614c:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8006150:	b90b      	cbnz	r3, 8006156 <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8006152:	482c      	ldr	r0, [pc, #176]	; (8006204 <UFCP_RX_IRQ_Handler+0xb8>)
}
 8006154:	4770      	bx	lr
{
 8006156:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 8006158:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
{
 800615c:	b083      	sub	sp, #12
 800615e:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 8006160:	b2ca      	uxtb	r2, r1
    switch ( pBaseHandle->RxFrameLevel )
 8006162:	b1d3      	cbz	r3, 800619a <UFCP_RX_IRQ_Handler+0x4e>
 8006164:	2b01      	cmp	r3, #1
 8006166:	d00d      	beq.n	8006184 <UFCP_RX_IRQ_Handler+0x38>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8006168:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
 800616c:	3101      	adds	r1, #1
 800616e:	428b      	cmp	r3, r1
 8006170:	dc1d      	bgt.n	80061ae <UFCP_RX_IRQ_Handler+0x62>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8006172:	18c1      	adds	r1, r0, r3
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8006174:	4823      	ldr	r0, [pc, #140]	; (8006204 <UFCP_RX_IRQ_Handler+0xb8>)
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8006176:	f881 2099 	strb.w	r2, [r1, #153]	; 0x99
          pBaseHandle->RxFrameLevel++;
 800617a:	3301      	adds	r3, #1
 800617c:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8006180:	b003      	add	sp, #12
 8006182:	bd30      	pop	{r4, r5, pc}
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 8006184:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrameLevel++;
 8006186:	bf54      	ite	pl
 8006188:	2302      	movpl	r3, #2
          pBaseHandle->RxFrameLevel =0 ;
 800618a:	2300      	movmi	r3, #0
        pBaseHandle->RxFrame.Size = rx_byte;
 800618c:	f880 209a 	strb.w	r2, [r0, #154]	; 0x9a
          pBaseHandle->RxFrameLevel =0 ;
 8006190:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8006194:	481b      	ldr	r0, [pc, #108]	; (8006204 <UFCP_RX_IRQ_Handler+0xb8>)
}
 8006196:	b003      	add	sp, #12
 8006198:	bd30      	pop	{r4, r5, pc}
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 800619a:	8a01      	ldrh	r1, [r0, #16]
        pBaseHandle->RxFrame.Code = rx_byte;
 800619c:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
        pBaseHandle->RxFrameLevel++;
 80061a0:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80061a2:	8241      	strh	r1, [r0, #18]
        pBaseHandle->RxFrameLevel++;
 80061a4:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 80061a8:	4817      	ldr	r0, [pc, #92]	; (8006208 <UFCP_RX_IRQ_Handler+0xbc>)
}
 80061aa:	b003      	add	sp, #12
 80061ac:	bd30      	pop	{r4, r5, pc}
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 80061ae:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 80061b2:	f880 211b 	strb.w	r2, [r0, #283]	; 0x11b
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80061b6:	68cb      	ldr	r3, [r1, #12]
          pBaseHandle->RxTimeoutCountdown = 0;
 80061b8:	2200      	movs	r2, #0
 80061ba:	f023 0320 	bic.w	r3, r3, #32
 80061be:	8242      	strh	r2, [r0, #18]
 80061c0:	60cb      	str	r3, [r1, #12]
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 80061c2:	3099      	adds	r0, #153	; 0x99
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 80061c4:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 80061c8:	f7fe ff5c 	bl	8005084 <FCP_CalcCRC>
 80061cc:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 80061d0:	4283      	cmp	r3, r0
 80061d2:	d10a      	bne.n	80061ea <UFCP_RX_IRQ_Handler+0x9e>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 80061d4:	6820      	ldr	r0, [r4, #0]
 80061d6:	68a5      	ldr	r5, [r4, #8]
 80061d8:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 80061dc:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 80061e0:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 80061e4:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 80061e6:	4809      	ldr	r0, [pc, #36]	; (800620c <UFCP_RX_IRQ_Handler+0xc0>)
 80061e8:	e7d5      	b.n	8006196 <UFCP_RX_IRQ_Handler+0x4a>
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80061ea:	4620      	mov	r0, r4
 80061ec:	2301      	movs	r3, #1
            error_code = FCP_MSG_RX_BAD_CRC;
 80061ee:	240a      	movs	r4, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80061f0:	f10d 0207 	add.w	r2, sp, #7
 80061f4:	21ff      	movs	r1, #255	; 0xff
            error_code = FCP_MSG_RX_BAD_CRC;
 80061f6:	f88d 4007 	strb.w	r4, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80061fa:	f7ff ff4f 	bl	800609c <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 80061fe:	4803      	ldr	r0, [pc, #12]	; (800620c <UFCP_RX_IRQ_Handler+0xc0>)
  return ret_val;
 8006200:	e7c9      	b.n	8006196 <UFCP_RX_IRQ_Handler+0x4a>
 8006202:	bf00      	nop
 8006204:	0800772c 	.word	0x0800772c
 8006208:	0800772e 	.word	0x0800772e
 800620c:	08007730 	.word	0x08007730

08006210 <UFCP_OVR_IRQ_Handler>:
{
 8006210:	b510      	push	{r4, lr}
 8006212:	b082      	sub	sp, #8
  error_code = UFCP_MSG_OVERRUN;
 8006214:	2408      	movs	r4, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8006216:	2301      	movs	r3, #1
 8006218:	f10d 0207 	add.w	r2, sp, #7
 800621c:	21ff      	movs	r1, #255	; 0xff
  error_code = UFCP_MSG_OVERRUN;
 800621e:	f88d 4007 	strb.w	r4, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8006222:	f7ff ff3b 	bl	800609c <UFCP_Send>
}
 8006226:	b002      	add	sp, #8
 8006228:	bd10      	pop	{r4, pc}
 800622a:	bf00      	nop

0800622c <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800622c:	2300      	movs	r3, #0
 800622e:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 8006232:	4770      	bx	lr

08006234 <VSS_Clear>:
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 8006234:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8006236:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 8006238:	85c2      	strh	r2, [r0, #46]	; 0x2e
  pHandle->wElSpeedDpp32 = 0;
 800623a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  pHandle->_Super.bSpeedErrorNumber = 0u;
 800623e:	7003      	strb	r3, [r0, #0]
  pHandle->_Super.hElAngle = 0;
 8006240:	6043      	str	r3, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 8006242:	60c3      	str	r3, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = 0;
 8006244:	8243      	strh	r3, [r0, #18]
  pHandle->hRemainingStep = 0u;
 8006246:	8503      	strh	r3, [r0, #40]	; 0x28
  pHandle->bTransitionStarted = false;
 8006248:	8583      	strh	r3, [r0, #44]	; 0x2c
  pHandle->hElAngleAccu = 0;
 800624a:	6303      	str	r3, [r0, #48]	; 0x30
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop

08006250 <VSS_Init>:
{
 8006250:	b508      	push	{r3, lr}
  VSS_Clear( pHandle );
 8006252:	f7ff ffef 	bl	8006234 <VSS_Clear>
}
 8006256:	bd08      	pop	{r3, pc}

08006258 <VSS_CalcElAngle>:
  int16_t hAngleDiff;
  int16_t hAngleCorr;
  int32_t wAux;
  int16_t hSignCorr = 1;

  if ( pHandle->bCopyObserver == true )
 8006258:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 800625c:	b123      	cbz	r3, 8006268 <VSS_CalcElAngle+0x10>
  {
    hRetAngle = *( int16_t * )pInputVars_str;
 800625e:	f9b1 2000 	ldrsh.w	r2, [r1]
    {
      hRetAngle = pHandle->hElAngleAccu;
    }
  }

  pHandle->_Super.hElAngle = hRetAngle;
 8006262:	8082      	strh	r2, [r0, #4]
  return hRetAngle;
}
 8006264:	4610      	mov	r0, r2
 8006266:	4770      	bx	lr
{
 8006268:	b4f0      	push	{r4, r5, r6, r7}
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800626a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800626c:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8006270:	88c7      	ldrh	r7, [r0, #6]
    if ( pHandle->bTransitionStarted == true )
 8006272:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
                                 ( int16_t )pHandle->_Super.bElToMecRatio;
 8006276:	7844      	ldrb	r4, [r0, #1]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8006278:	fb95 f4f4 	sdiv	r4, r5, r4
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800627c:	442b      	add	r3, r5
 800627e:	b21a      	sxth	r2, r3
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8006280:	443c      	add	r4, r7
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8006282:	8602      	strh	r2, [r0, #48]	; 0x30
 8006284:	b29b      	uxth	r3, r3
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8006286:	80c4      	strh	r4, [r0, #6]
    if ( pHandle->bTransitionStarted == true )
 8006288:	b1de      	cbz	r6, 80062c2 <VSS_CalcElAngle+0x6a>
      if ( pHandle->hTransitionRemainingSteps == 0 )
 800628a:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
 800628e:	b1e4      	cbz	r4, 80062ca <VSS_CalcElAngle+0x72>
        pHandle->hTransitionRemainingSteps--;
 8006290:	3c01      	subs	r4, #1
 8006292:	b224      	sxth	r4, r4
 8006294:	85c4      	strh	r4, [r0, #46]	; 0x2e
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 8006296:	2d00      	cmp	r5, #0
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 8006298:	8809      	ldrh	r1, [r1, #0]
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 800629a:	db27      	blt.n	80062ec <VSS_CalcElAngle+0x94>
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 800629c:	1acb      	subs	r3, r1, r3
 800629e:	b21b      	sxth	r3, r3
 80062a0:	2601      	movs	r6, #1
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 80062a2:	f9b0 5036 	ldrsh.w	r5, [r0, #54]	; 0x36
        wAux = ( int32_t )hAngleDiff * pHandle->hTransitionRemainingSteps;
 80062a6:	fb03 f404 	mul.w	r4, r3, r4
        if ( hAngleDiff >= 0 )
 80062aa:	2b00      	cmp	r3, #0
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 80062ac:	fb94 f4f5 	sdiv	r4, r4, r5
        hAngleCorr *= hSignCorr;
 80062b0:	fb14 f406 	smulbb	r4, r4, r6
 80062b4:	b2a4      	uxth	r4, r4
        if ( hAngleDiff >= 0 )
 80062b6:	db12      	blt.n	80062de <VSS_CalcElAngle+0x86>
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 80062b8:	1b0c      	subs	r4, r1, r4
          pHandle->bTransitionLocked = true;
 80062ba:	2301      	movs	r3, #1
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 80062bc:	b222      	sxth	r2, r4
          pHandle->bTransitionLocked = true;
 80062be:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
  pHandle->_Super.hElAngle = hRetAngle;
 80062c2:	8082      	strh	r2, [r0, #4]
}
 80062c4:	bcf0      	pop	{r4, r5, r6, r7}
 80062c6:	4610      	mov	r0, r2
 80062c8:	4770      	bx	lr
        hRetAngle = *( int16_t * )pInputVars_str;
 80062ca:	f9b1 2000 	ldrsh.w	r2, [r1]
        pHandle->_Super.bSpeedErrorNumber = 0u;
 80062ce:	7004      	strb	r4, [r0, #0]
        pHandle->bTransitionEnded = true;
 80062d0:	2301      	movs	r3, #1
 80062d2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  pHandle->_Super.hElAngle = hRetAngle;
 80062d6:	8082      	strh	r2, [r0, #4]
}
 80062d8:	bcf0      	pop	{r4, r5, r6, r7}
 80062da:	4610      	mov	r0, r2
 80062dc:	4770      	bx	lr
          if ( pHandle->bTransitionLocked == false )
 80062de:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0ed      	beq.n	80062c2 <VSS_CalcElAngle+0x6a>
            hRetAngle = *( int16_t * )pInputVars_str + hAngleCorr;
 80062e6:	440c      	add	r4, r1
 80062e8:	b222      	sxth	r2, r4
 80062ea:	e7ea      	b.n	80062c2 <VSS_CalcElAngle+0x6a>
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
 80062ec:	1a5b      	subs	r3, r3, r1
 80062ee:	b21b      	sxth	r3, r3
 80062f0:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80062f4:	e7d5      	b.n	80062a2 <VSS_CalcElAngle+0x4a>
 80062f6:	bf00      	nop

080062f8 <VSS_CalcAvrgMecSpeedUnit>:
  */
__weak bool VSS_CalcAvrgMecSpeedUnit( VirtualSpeedSensor_Handle_t * pHandle, int16_t * hMecSpeedUnit )
{
  bool SpeedSensorReliability = false;

  if ( pHandle->hRemainingStep > 1u )
 80062f8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 80062fa:	2b01      	cmp	r3, #1
{
 80062fc:	b470      	push	{r4, r5, r6}
  if ( pHandle->hRemainingStep > 1u )
 80062fe:	d925      	bls.n	800634c <VSS_CalcAvrgMecSpeedUnit+0x54>
  {
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8006300:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
 8006304:	4413      	add	r3, r2
 8006306:	6243      	str	r3, [r0, #36]	; 0x24
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8006308:	2b00      	cmp	r3, #0
 800630a:	bfb8      	it	lt
 800630c:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00

    /* Convert dpp into MecUnit */
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8006310:	8b42      	ldrh	r2, [r0, #26]
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8006312:	7846      	ldrb	r6, [r0, #1]
 8006314:	69c5      	ldr	r5, [r0, #28]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8006316:	bfb8      	it	lt
 8006318:	33ff      	addlt	r3, #255	; 0xff
 800631a:	141c      	asrs	r4, r3, #16
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 800631c:	fb04 f202 	mul.w	r2, r4, r2
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8006320:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006324:	0053      	lsls	r3, r2, #1
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8006326:	fb05 f506 	mul.w	r5, r5, r6
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 800632a:	fb93 f3f5 	sdiv	r3, r3, r5
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 800632e:	b21b      	sxth	r3, r3
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8006330:	81c4      	strh	r4, [r0, #14]
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8006332:	800b      	strh	r3, [r1, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;

    pHandle->hRemainingStep--;
 8006334:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8006336:	8183      	strh	r3, [r0, #12]
    pHandle->hRemainingStep--;
 8006338:	1e53      	subs	r3, r2, #1
 800633a:	8503      	strh	r3, [r0, #40]	; 0x28
  else
  {
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
  }
  /* If the transition is not done yet, we already know that speed is not reliable */
  if ( pHandle->bTransitionEnded == false )
 800633c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8006340:	b963      	cbnz	r3, 800635c <VSS_CalcAvrgMecSpeedUnit+0x64>
  {
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8006342:	78c2      	ldrb	r2, [r0, #3]
 8006344:	7002      	strb	r2, [r0, #0]
  {
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
  }

  return ( SpeedSensorReliability );
}
 8006346:	bc70      	pop	{r4, r5, r6}
 8006348:	4618      	mov	r0, r3
 800634a:	4770      	bx	lr
  else if ( pHandle->hRemainingStep == 1u )
 800634c:	d009      	beq.n	8006362 <VSS_CalcAvrgMecSpeedUnit+0x6a>
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800634e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8006352:	800b      	strh	r3, [r1, #0]
  if ( pHandle->bTransitionEnded == false )
 8006354:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8006358:	2b00      	cmp	r3, #0
 800635a:	d0f2      	beq.n	8006342 <VSS_CalcAvrgMecSpeedUnit+0x4a>
}
 800635c:	bc70      	pop	{r4, r5, r6}
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
 800635e:	f7ff bca7 	b.w	8005cb0 <SPD_IsMecSpeedReliable>
    *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 8006362:	f9b0 502a 	ldrsh.w	r5, [r0, #42]	; 0x2a
 8006366:	800d      	strh	r5, [r1, #0]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8006368:	8b43      	ldrh	r3, [r0, #26]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 800636a:	69c2      	ldr	r2, [r0, #28]
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800636c:	7844      	ldrb	r4, [r0, #1]
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800636e:	8185      	strh	r5, [r0, #12]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8006370:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 8006374:	fb02 f205 	mul.w	r2, r2, r5
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8006378:	005b      	lsls	r3, r3, #1
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 800637a:	fb92 f3f3 	sdiv	r3, r2, r3
    pHandle->hRemainingStep = 0u;
 800637e:	2200      	movs	r2, #0
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8006380:	fb14 f303 	smulbb	r3, r4, r3
 8006384:	81c3      	strh	r3, [r0, #14]
    pHandle->hRemainingStep = 0u;
 8006386:	8502      	strh	r2, [r0, #40]	; 0x28
 8006388:	e7d8      	b.n	800633c <VSS_CalcAvrgMecSpeedUnit+0x44>
 800638a:	bf00      	nop

0800638c <VSS_SetMecAngle>:
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 800638c:	7843      	ldrb	r3, [r0, #1]
  pHandle->hElAngleAccu = hMecAngle;
 800638e:	8601      	strh	r1, [r0, #48]	; 0x30
  pHandle->_Super.hElAngle = hMecAngle;
 8006390:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8006392:	fb91 f1f3 	sdiv	r1, r1, r3
 8006396:	80c1      	strh	r1, [r0, #6]
}
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop

0800639c <VSS_SetMecAcceleration>:
            instantaneous the final speed.
  * @retval none
  */
__weak void  VSS_SetMecAcceleration( VirtualSpeedSensor_Handle_t * pHandle, int16_t  hFinalMecSpeedUnit,
                              uint16_t hDurationms )
{
 800639c:	b470      	push	{r4, r5, r6}
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 800639e:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 80063a2:	b984      	cbnz	r4, 80063c6 <VSS_SetMecAcceleration+0x2a>
  {
    if ( hDurationms == 0u )
 80063a4:	b98a      	cbnz	r2, 80063ca <VSS_SetMecAcceleration+0x2e>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 80063a6:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 80063a8:	69c4      	ldr	r4, [r0, #28]

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 80063aa:	7845      	ldrb	r5, [r0, #1]
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 80063ac:	8181      	strh	r1, [r0, #12]
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 80063ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80063b2:	005b      	lsls	r3, r3, #1
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 80063b4:	fb04 f401 	mul.w	r4, r4, r1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 80063b8:	fb94 f3f3 	sdiv	r3, r4, r3
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 80063bc:	fb15 f303 	smulbb	r3, r5, r3

      pHandle->hRemainingStep = 0u;
 80063c0:	8502      	strh	r2, [r0, #40]	; 0x28

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80063c2:	8541      	strh	r1, [r0, #42]	; 0x2a
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 80063c4:	81c3      	strh	r3, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 80063c6:	bc70      	pop	{r4, r5, r6}
 80063c8:	4770      	bx	lr
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 80063ca:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 80063cc:	4d11      	ldr	r5, [pc, #68]	; (8006414 <VSS_SetMecAcceleration+0x78>)
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 80063ce:	8b44      	ldrh	r4, [r0, #26]
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 80063d0:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80063d4:	8541      	strh	r1, [r0, #42]	; 0x2a
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 80063d6:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 80063da:	fba5 2303 	umull	r2, r3, r5, r3
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 80063de:	69c2      	ldr	r2, [r0, #28]
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 80063e0:	7845      	ldrb	r5, [r0, #1]
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 80063e2:	f3c3 138f 	ubfx	r3, r3, #6, #16
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 80063e6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80063ea:	0064      	lsls	r4, r4, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 80063ec:	fb02 f201 	mul.w	r2, r2, r1
      hNbrStep++;
 80063f0:	3301      	adds	r3, #1
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 80063f2:	fb96 f1f5 	sdiv	r1, r6, r5
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 80063f6:	fb92 f2f4 	sdiv	r2, r2, r4
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 80063fa:	1a52      	subs	r2, r2, r1
      hNbrStep++;
 80063fc:	b29b      	uxth	r3, r3
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 80063fe:	0436      	lsls	r6, r6, #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8006400:	0412      	lsls	r2, r2, #16
 8006402:	fb92 f2f3 	sdiv	r2, r2, r3
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 8006406:	fb05 f202 	mul.w	r2, r5, r2
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 800640a:	e9c0 2608 	strd	r2, r6, [r0, #32]
      pHandle->hRemainingStep = hNbrStep;
 800640e:	8503      	strh	r3, [r0, #40]	; 0x28
}
 8006410:	bc70      	pop	{r4, r5, r6}
 8006412:	4770      	bx	lr
 8006414:	10624dd3 	.word	0x10624dd3

08006418 <VSS_SetStartTransition>:
            (parameter hTransitionSteps = 0)
  */
__weak bool VSS_SetStartTransition( VirtualSpeedSensor_Handle_t * pHandle, bool bCommand )
{
  bool bAux = true;
  if ( bCommand == true )
 8006418:	b151      	cbz	r1, 8006430 <VSS_SetStartTransition+0x18>
  {
    pHandle->bTransitionStarted = true;

    if ( pHandle->hTransitionSteps == 0 )
 800641a:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	; 0x36
    pHandle->bTransitionStarted = true;
 800641e:	2201      	movs	r2, #1
 8006420:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    if ( pHandle->hTransitionSteps == 0 )
 8006424:	b923      	cbnz	r3, 8006430 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionEnded = true;
 8006426:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
      pHandle->_Super.bSpeedErrorNumber = 0u;
 800642a:	7003      	strb	r3, [r0, #0]
      bAux = false;
 800642c:	4618      	mov	r0, r3
    }
  }
  return bAux;
}
 800642e:	4770      	bx	lr
  bool bAux = true;
 8006430:	2001      	movs	r0, #1
 8006432:	4770      	bx	lr

08006434 <VSS_TransitionEnded>:
}

__weak bool VSS_TransitionEnded( VirtualSpeedSensor_Handle_t * pHandle )
{
    return pHandle->bTransitionEnded;
}
 8006434:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop

0800643c <RUC_Init>:
 800643c:	b430      	push	{r4, r5}
 800643e:	6681      	str	r1, [r0, #104]	; 0x68
 8006440:	2100      	movs	r1, #0
 8006442:	9c02      	ldr	r4, [sp, #8]
 8006444:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 8006448:	f880 1055 	strb.w	r1, [r0, #85]	; 0x55
 800644c:	f110 010c 	adds.w	r1, r0, #12
 8006450:	e9c0 231b 	strd	r2, r3, [r0, #108]	; 0x6c
 8006454:	6744      	str	r4, [r0, #116]	; 0x74
 8006456:	d023      	beq.n	80064a0 <RUC_Init+0x64>
 8006458:	6943      	ldr	r3, [r0, #20]
 800645a:	b323      	cbz	r3, 80064a6 <RUC_Init+0x6a>
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	b323      	cbz	r3, 80064aa <RUC_Init+0x6e>
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	b323      	cbz	r3, 80064ae <RUC_Init+0x72>
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	b1c3      	cbz	r3, 800649a <RUC_Init+0x5e>
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	2105      	movs	r1, #5
 800646c:	b1b3      	cbz	r3, 800649c <RUC_Init+0x60>
 800646e:	2204      	movs	r2, #4
 8006470:	2105      	movs	r1, #5
 8006472:	8805      	ldrh	r5, [r0, #0]
 8006474:	4c0f      	ldr	r4, [pc, #60]	; (80064b4 <RUC_Init+0x78>)
 8006476:	2364      	movs	r3, #100	; 0x64
 8006478:	fb03 f305 	mul.w	r3, r3, r5
 800647c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006480:	fba4 4303 	umull	r4, r3, r4, r3
 8006484:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006488:	2400      	movs	r4, #0
 800648a:	099b      	lsrs	r3, r3, #6
 800648c:	6154      	str	r4, [r2, #20]
 800648e:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
 8006492:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
 8006496:	bc30      	pop	{r4, r5}
 8006498:	4770      	bx	lr
 800649a:	2104      	movs	r1, #4
 800649c:	1e4a      	subs	r2, r1, #1
 800649e:	e7e8      	b.n	8006472 <RUC_Init+0x36>
 80064a0:	f04f 32ff 	mov.w	r2, #4294967295
 80064a4:	e7e5      	b.n	8006472 <RUC_Init+0x36>
 80064a6:	2101      	movs	r1, #1
 80064a8:	e7f8      	b.n	800649c <RUC_Init+0x60>
 80064aa:	2102      	movs	r1, #2
 80064ac:	e7f6      	b.n	800649c <RUC_Init+0x60>
 80064ae:	2103      	movs	r1, #3
 80064b0:	e7f4      	b.n	800649c <RUC_Init+0x60>
 80064b2:	bf00      	nop
 80064b4:	10624dd3 	.word	0x10624dd3

080064b8 <RUC_Clear>:
 80064b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064bc:	4604      	mov	r4, r0
 80064be:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
 80064c0:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
 80064c4:	80e1      	strh	r1, [r4, #6]
 80064c6:	2500      	movs	r5, #0
 80064c8:	4638      	mov	r0, r7
 80064ca:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
 80064ce:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80064d2:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 80064d6:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 80064da:	460e      	mov	r6, r1
 80064dc:	f7ff feaa 	bl	8006234 <VSS_Clear>
 80064e0:	4629      	mov	r1, r5
 80064e2:	4640      	mov	r0, r8
 80064e4:	f7ff fc4a 	bl	8005d7c <STC_SetControlMode>
 80064e8:	8861      	ldrh	r1, [r4, #2]
 80064ea:	b2b6      	uxth	r6, r6
 80064ec:	fb11 f106 	smulbb	r1, r1, r6
 80064f0:	b209      	sxth	r1, r1
 80064f2:	4638      	mov	r0, r7
 80064f4:	f7ff ff4a 	bl	800638c <VSS_SetMecAngle>
 80064f8:	462a      	mov	r2, r5
 80064fa:	4629      	mov	r1, r5
 80064fc:	4640      	mov	r0, r8
 80064fe:	f7ff fc41 	bl	8005d84 <STC_ExecRamp>
 8006502:	8a21      	ldrh	r1, [r4, #16]
 8006504:	89a2      	ldrh	r2, [r4, #12]
 8006506:	fb11 f106 	smulbb	r1, r1, r6
 800650a:	b209      	sxth	r1, r1
 800650c:	4640      	mov	r0, r8
 800650e:	f7ff fc39 	bl	8005d84 <STC_ExecRamp>
 8006512:	89e1      	ldrh	r1, [r4, #14]
 8006514:	89a2      	ldrh	r2, [r4, #12]
 8006516:	fb11 f106 	smulbb	r1, r1, r6
 800651a:	4638      	mov	r0, r7
 800651c:	b209      	sxth	r1, r1
 800651e:	f7ff ff3d 	bl	800639c <VSS_SetMecAcceleration>
 8006522:	89a0      	ldrh	r0, [r4, #12]
 8006524:	8823      	ldrh	r3, [r4, #0]
 8006526:	4907      	ldr	r1, [pc, #28]	; (8006544 <RUC_Clear+0x8c>)
 8006528:	6962      	ldr	r2, [r4, #20]
 800652a:	f884 5057 	strb.w	r5, [r4, #87]	; 0x57
 800652e:	fb03 f300 	mul.w	r3, r3, r0
 8006532:	fba1 1303 	umull	r1, r3, r1, r3
 8006536:	099b      	lsrs	r3, r3, #6
 8006538:	3301      	adds	r3, #1
 800653a:	80a3      	strh	r3, [r4, #4]
 800653c:	60a2      	str	r2, [r4, #8]
 800653e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006542:	bf00      	nop
 8006544:	10624dd3 	.word	0x10624dd3

08006548 <RUC_Exec>:
 8006548:	b538      	push	{r3, r4, r5, lr}
 800654a:	8883      	ldrh	r3, [r0, #4]
 800654c:	bb53      	cbnz	r3, 80065a4 <RUC_Exec+0x5c>
 800654e:	6883      	ldr	r3, [r0, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d02e      	beq.n	80065b2 <RUC_Exec+0x6a>
 8006554:	88c5      	ldrh	r5, [r0, #6]
 8006556:	8899      	ldrh	r1, [r3, #4]
 8006558:	881a      	ldrh	r2, [r3, #0]
 800655a:	4604      	mov	r4, r0
 800655c:	fb11 f105 	smulbb	r1, r1, r5
 8006560:	b209      	sxth	r1, r1
 8006562:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8006564:	f7ff fc0e 	bl	8005d84 <STC_ExecRamp>
 8006568:	68a3      	ldr	r3, [r4, #8]
 800656a:	88e5      	ldrh	r5, [r4, #6]
 800656c:	8859      	ldrh	r1, [r3, #2]
 800656e:	881a      	ldrh	r2, [r3, #0]
 8006570:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006572:	fb11 f105 	smulbb	r1, r1, r5
 8006576:	b209      	sxth	r1, r1
 8006578:	f7ff ff10 	bl	800639c <VSS_SetMecAcceleration>
 800657c:	68a2      	ldr	r2, [r4, #8]
 800657e:	8823      	ldrh	r3, [r4, #0]
 8006580:	8810      	ldrh	r0, [r2, #0]
 8006582:	490d      	ldr	r1, [pc, #52]	; (80065b8 <RUC_Exec+0x70>)
 8006584:	6892      	ldr	r2, [r2, #8]
 8006586:	60a2      	str	r2, [r4, #8]
 8006588:	fb03 f300 	mul.w	r3, r3, r0
 800658c:	fba1 2303 	umull	r2, r3, r1, r3
 8006590:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8006594:	099b      	lsrs	r3, r3, #6
 8006596:	3301      	adds	r3, #1
 8006598:	3201      	adds	r2, #1
 800659a:	80a3      	strh	r3, [r4, #4]
 800659c:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 80065a0:	2001      	movs	r0, #1
 80065a2:	bd38      	pop	{r3, r4, r5, pc}
 80065a4:	3b01      	subs	r3, #1
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	8083      	strh	r3, [r0, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d0cf      	beq.n	800654e <RUC_Exec+0x6>
 80065ae:	2001      	movs	r0, #1
 80065b0:	e7f7      	b.n	80065a2 <RUC_Exec+0x5a>
 80065b2:	4618      	mov	r0, r3
 80065b4:	bd38      	pop	{r3, r4, r5, pc}
 80065b6:	bf00      	nop
 80065b8:	10624dd3 	.word	0x10624dd3

080065bc <RUC_FirstAccelerationStageReached>:
 80065bc:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 80065c0:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
 80065c4:	4282      	cmp	r2, r0
 80065c6:	bf34      	ite	cc
 80065c8:	2000      	movcc	r0, #0
 80065ca:	2001      	movcs	r0, #1
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop

080065d0 <RUC_SetPhaseDurationms>:
 80065d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80065d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80065d8:	818a      	strh	r2, [r1, #12]
 80065da:	4770      	bx	lr

080065dc <RUC_SetPhaseFinalMecSpeedUnit>:
 80065dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80065e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80065e4:	81ca      	strh	r2, [r1, #14]
 80065e6:	4770      	bx	lr

080065e8 <RUC_SetPhaseFinalTorque>:
 80065e8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80065ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80065f0:	820a      	strh	r2, [r1, #16]
 80065f2:	4770      	bx	lr

080065f4 <RUC_GetPhaseDurationms>:
 80065f4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80065f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80065fc:	8988      	ldrh	r0, [r1, #12]
 80065fe:	4770      	bx	lr

08006600 <RUC_GetPhaseFinalMecSpeedUnit>:
 8006600:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006604:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006608:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop

08006610 <RUC_GetPhaseFinalTorque>:
 8006610:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006614:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006618:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop

08006620 <RUC_GetNumberOfPhases>:
 8006620:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop

08006628 <STO_PLL_CalcElAngle>:
 8006628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662c:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 8006630:	f8d0 e068 	ldr.w	lr, [r0, #104]	; 0x68
 8006634:	4604      	mov	r4, r0
 8006636:	03d8      	lsls	r0, r3, #15
 8006638:	1ac2      	subs	r2, r0, r3
 800663a:	4596      	cmp	lr, r2
 800663c:	b089      	sub	sp, #36	; 0x24
 800663e:	f340 80c1 	ble.w	80067c4 <STO_PLL_CalcElAngle+0x19c>
 8006642:	66a2      	str	r2, [r4, #104]	; 0x68
 8006644:	4696      	mov	lr, r2
 8006646:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
 800664a:	f8d4 c06c 	ldr.w	ip, [r4, #108]	; 0x6c
 800664e:	fa4e f605 	asr.w	r6, lr, r5
 8006652:	9603      	str	r6, [sp, #12]
 8006654:	4562      	cmp	r2, ip
 8006656:	b236      	sxth	r6, r6
 8006658:	9601      	str	r6, [sp, #4]
 800665a:	f280 80c8 	bge.w	80067ee <STO_PLL_CalcElAngle+0x1c6>
 800665e:	66e2      	str	r2, [r4, #108]	; 0x6c
 8006660:	4694      	mov	ip, r2
 8006662:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8006666:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8006668:	03de      	lsls	r6, r3, #15
 800666a:	fa4c f205 	asr.w	r2, ip, r5
 800666e:	1af5      	subs	r5, r6, r3
 8006670:	9204      	str	r2, [sp, #16]
 8006672:	42a8      	cmp	r0, r5
 8006674:	b212      	sxth	r2, r2
 8006676:	9202      	str	r2, [sp, #8]
 8006678:	f340 80b3 	ble.w	80067e2 <STO_PLL_CalcElAngle+0x1ba>
 800667c:	6625      	str	r5, [r4, #96]	; 0x60
 800667e:	4628      	mov	r0, r5
 8006680:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006682:	4295      	cmp	r5, r2
 8006684:	f280 80a7 	bge.w	80067d6 <STO_PLL_CalcElAngle+0x1ae>
 8006688:	6665      	str	r5, [r4, #100]	; 0x64
 800668a:	462a      	mov	r2, r5
 800668c:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
 8006690:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 8006694:	890d      	ldrh	r5, [r1, #8]
 8006696:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
 800669a:	888e      	ldrh	r6, [r1, #4]
 800669c:	f9b1 7000 	ldrsh.w	r7, [r1]
 80066a0:	f9b4 9020 	ldrsh.w	r9, [r4, #32]
 80066a4:	9901      	ldr	r1, [sp, #4]
 80066a6:	f8a4 1070 	strh.w	r1, [r4, #112]	; 0x70
 80066aa:	fa40 f103 	asr.w	r1, r0, r3
 80066ae:	fa42 f303 	asr.w	r3, r2, r3
 80066b2:	1b8e      	subs	r6, r1, r6
 80066b4:	fb11 f109 	smulbb	r1, r1, r9
 80066b8:	fb13 f909 	smulbb	r9, r3, r9
 80066bc:	eba3 030a 	sub.w	r3, r3, sl
 80066c0:	9305      	str	r3, [sp, #20]
 80066c2:	f9b4 b022 	ldrsh.w	fp, [r4, #34]	; 0x22
 80066c6:	9b02      	ldr	r3, [sp, #8]
 80066c8:	f9b4 a028 	ldrsh.w	sl, [r4, #40]	; 0x28
 80066cc:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 80066d0:	b236      	sxth	r6, r6
 80066d2:	1a41      	subs	r1, r0, r1
 80066d4:	fb05 f707 	mul.w	r7, r5, r7
 80066d8:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80066dc:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 80066de:	eba2 0209 	sub.w	r2, r2, r9
 80066e2:	fb0b 1106 	mla	r1, fp, r6, r1
 80066e6:	143f      	asrs	r7, r7, #16
 80066e8:	fb0b 2b03 	mla	fp, fp, r3, r2
 80066ec:	fb0a 1107 	mla	r1, sl, r7, r1
 80066f0:	fb05 f508 	mul.w	r5, r5, r8
 80066f4:	9a01      	ldr	r2, [sp, #4]
 80066f6:	9f02      	ldr	r7, [sp, #8]
 80066f8:	f9b4 802a 	ldrsh.w	r8, [r4, #42]	; 0x2a
 80066fc:	f9b4 9026 	ldrsh.w	r9, [r4, #38]	; 0x26
 8006700:	142d      	asrs	r5, r5, #16
 8006702:	fb0a b505 	mla	r5, sl, r5, fp
 8006706:	4107      	asrs	r7, r0
 8006708:	f9b4 a00e 	ldrsh.w	sl, [r4, #14]
 800670c:	f9b4 b024 	ldrsh.w	fp, [r4, #36]	; 0x24
 8006710:	fa42 f000 	asr.w	r0, r2, r0
 8006714:	fb06 e609 	mla	r6, r6, r9, lr
 8006718:	fb09 c303 	mla	r3, r9, r3, ip
 800671c:	fb07 f708 	mul.w	r7, r7, r8
 8006720:	fb00 f008 	mul.w	r0, r0, r8
 8006724:	fb07 670a 	mla	r7, r7, sl, r6
 8006728:	fb00 361a 	mls	r6, r0, sl, r3
 800672c:	9b01      	ldr	r3, [sp, #4]
 800672e:	f994 2124 	ldrsb.w	r2, [r4, #292]	; 0x124
 8006732:	fb0b 1813 	mls	r8, fp, r3, r1
 8006736:	9b02      	ldr	r3, [sp, #8]
 8006738:	fb0b 5513 	mls	r5, fp, r3, r5
 800673c:	2a00      	cmp	r2, #0
 800673e:	d147      	bne.n	80067d0 <STO_PLL_CalcElAngle+0x1a8>
 8006740:	f1ba 0f00 	cmp.w	sl, #0
 8006744:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006748:	bfb4      	ite	lt
 800674a:	4691      	movlt	r9, r2
 800674c:	f04f 0901 	movge.w	r9, #1
 8006750:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8006754:	f7fa fb7a 	bl	8000e4c <MCM_Trig_Functions>
 8006758:	9b04      	ldr	r3, [sp, #16]
 800675a:	9a03      	ldr	r2, [sp, #12]
 800675c:	fb13 f309 	smulbb	r3, r3, r9
 8006760:	fb12 f109 	smulbb	r1, r2, r9
 8006764:	425b      	negs	r3, r3
 8006766:	fb10 f303 	smulbb	r3, r0, r3
 800676a:	fb10 f021 	smultb	r0, r0, r1
 800676e:	f343 33cf 	sbfx	r3, r3, #15, #16
 8006772:	f340 31cf 	sbfx	r1, r0, #15, #16
 8006776:	1a59      	subs	r1, r3, r1
 8006778:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800677c:	f7fe ff74 	bl	8005668 <PI_Controller>
 8006780:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
 8006784:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
 8006788:	8220      	strh	r0, [r4, #16]
 800678a:	3301      	adds	r3, #1
 800678c:	b2db      	uxtb	r3, r3
 800678e:	429a      	cmp	r2, r3
 8006790:	bf0a      	itet	eq
 8006792:	2200      	moveq	r2, #0
 8006794:	461a      	movne	r2, r3
 8006796:	4613      	moveq	r3, r2
 8006798:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800679c:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 80067a0:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 80067a4:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
 80067a8:	88a2      	ldrh	r2, [r4, #4]
 80067aa:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
 80067ae:	4410      	add	r0, r2
 80067b0:	b200      	sxth	r0, r0
 80067b2:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
 80067b6:	e9c4 5719 	strd	r5, r7, [r4, #100]	; 0x64
 80067ba:	66e6      	str	r6, [r4, #108]	; 0x6c
 80067bc:	80a0      	strh	r0, [r4, #4]
 80067be:	b009      	add	sp, #36	; 0x24
 80067c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c4:	1a1d      	subs	r5, r3, r0
 80067c6:	45ae      	cmp	lr, r5
 80067c8:	bfdc      	itt	le
 80067ca:	66a5      	strle	r5, [r4, #104]	; 0x68
 80067cc:	46ae      	movle	lr, r5
 80067ce:	e73a      	b.n	8006646 <STO_PLL_CalcElAngle+0x1e>
 80067d0:	fa1f f982 	uxth.w	r9, r2
 80067d4:	e7bc      	b.n	8006750 <STO_PLL_CalcElAngle+0x128>
 80067d6:	1b9b      	subs	r3, r3, r6
 80067d8:	429a      	cmp	r2, r3
 80067da:	bfdc      	itt	le
 80067dc:	6663      	strle	r3, [r4, #100]	; 0x64
 80067de:	461a      	movle	r2, r3
 80067e0:	e754      	b.n	800668c <STO_PLL_CalcElAngle+0x64>
 80067e2:	1b9a      	subs	r2, r3, r6
 80067e4:	4290      	cmp	r0, r2
 80067e6:	bfdc      	itt	le
 80067e8:	6622      	strle	r2, [r4, #96]	; 0x60
 80067ea:	4610      	movle	r0, r2
 80067ec:	e748      	b.n	8006680 <STO_PLL_CalcElAngle+0x58>
 80067ee:	1a1b      	subs	r3, r3, r0
 80067f0:	459c      	cmp	ip, r3
 80067f2:	bfdc      	itt	le
 80067f4:	66e3      	strle	r3, [r4, #108]	; 0x6c
 80067f6:	469c      	movle	ip, r3
 80067f8:	e733      	b.n	8006662 <STO_PLL_CalcElAngle+0x3a>
 80067fa:	bf00      	nop

080067fc <STO_PLL_CalcAvrgMecSpeedUnit>:
 80067fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067fe:	f890 c10e 	ldrb.w	ip, [r0, #270]	; 0x10e
 8006802:	f1bc 0f00 	cmp.w	ip, #0
 8006806:	f000 8095 	beq.w	8006934 <STO_PLL_CalcAvrgMecSpeedUnit+0x138>
 800680a:	f10c 37ff 	add.w	r7, ip, #4294967295
 800680e:	b2fb      	uxtb	r3, r7
 8006810:	f100 0672 	add.w	r6, r0, #114	; 0x72
 8006814:	f100 0774 	add.w	r7, r0, #116	; 0x74
 8006818:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 800681c:	4632      	mov	r2, r6
 800681e:	2300      	movs	r3, #0
 8006820:	f932 5f02 	ldrsh.w	r5, [r2, #2]!
 8006824:	4297      	cmp	r7, r2
 8006826:	442b      	add	r3, r5
 8006828:	d1fa      	bne.n	8006820 <STO_PLL_CalcAvrgMecSpeedUnit+0x24>
 800682a:	fb93 f5fc 	sdiv	r5, r3, ip
 800682e:	2400      	movs	r4, #0
 8006830:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
 8006834:	1b5b      	subs	r3, r3, r5
 8006836:	42b2      	cmp	r2, r6
 8006838:	fb03 4403 	mla	r4, r3, r3, r4
 800683c:	d1f8      	bne.n	8006830 <STO_PLL_CalcAvrgMecSpeedUnit+0x34>
 800683e:	fb94 f4fc 	sdiv	r4, r4, ip
 8006842:	fb05 fc05 	mul.w	ip, r5, r5
 8006846:	f8b0 2110 	ldrh.w	r2, [r0, #272]	; 0x110
 800684a:	8b43      	ldrh	r3, [r0, #26]
 800684c:	7887      	ldrb	r7, [r0, #2]
 800684e:	f890 6104 	ldrb.w	r6, [r0, #260]	; 0x104
 8006852:	fb0c fc02 	mul.w	ip, ip, r2
 8006856:	ea4f 1cec 	mov.w	ip, ip, asr #7
 800685a:	fb05 f303 	mul.w	r3, r5, r3
 800685e:	45a4      	cmp	ip, r4
 8006860:	69c2      	ldr	r2, [r0, #28]
 8006862:	bfd4      	ite	le
 8006864:	2500      	movle	r5, #0
 8006866:	2501      	movgt	r5, #1
 8006868:	fb03 f307 	mul.w	r3, r3, r7
 800686c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006870:	7842      	ldrb	r2, [r0, #1]
 8006872:	fb93 f3f2 	sdiv	r3, r3, r2
 8006876:	b21a      	sxth	r2, r3
 8006878:	800a      	strh	r2, [r1, #0]
 800687a:	f880 50f5 	strb.w	r5, [r0, #245]	; 0xf5
 800687e:	8182      	strh	r2, [r0, #12]
 8006880:	f890 50f8 	ldrb.w	r5, [r0, #248]	; 0xf8
 8006884:	b99e      	cbnz	r6, 80068ae <STO_PLL_CalcAvrgMecSpeedUnit+0xb2>
 8006886:	b355      	cbz	r5, 80068de <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 8006888:	45a4      	cmp	ip, r4
 800688a:	dc25      	bgt.n	80068d8 <STO_PLL_CalcAvrgMecSpeedUnit+0xdc>
 800688c:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
 8006890:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
 8006894:	3301      	adds	r3, #1
 8006896:	b2db      	uxtb	r3, r3
 8006898:	429a      	cmp	r2, r3
 800689a:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 800689e:	d81e      	bhi.n	80068de <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 80068a0:	2300      	movs	r3, #0
 80068a2:	78c2      	ldrb	r2, [r0, #3]
 80068a4:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 80068a8:	7002      	strb	r2, [r0, #0]
 80068aa:	4618      	mov	r0, r3
 80068ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f8b0 211a 	ldrh.w	r2, [r0, #282]	; 0x11a
 80068b4:	bfb8      	it	lt
 80068b6:	425b      	neglt	r3, r3
 80068b8:	429a      	cmp	r2, r3
 80068ba:	dc14      	bgt.n	80068e6 <STO_PLL_CalcAvrgMecSpeedUnit+0xea>
 80068bc:	2200      	movs	r2, #0
 80068be:	4613      	mov	r3, r2
 80068c0:	4616      	mov	r6, r2
 80068c2:	f880 20f9 	strb.w	r2, [r0, #249]	; 0xf9
 80068c6:	f8c0 60fc 	str.w	r6, [r0, #252]	; 0xfc
 80068ca:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80068ce:	b135      	cbz	r5, 80068de <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 80068d0:	45a4      	cmp	ip, r4
 80068d2:	dddb      	ble.n	800688c <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 80068d4:	2a00      	cmp	r2, #0
 80068d6:	d0d9      	beq.n	800688c <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 80068d8:	2300      	movs	r3, #0
 80068da:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 80068de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80068e2:	f7ff b9e5 	b.w	8005cb0 <SPD_IsMecSpeedReliable>
 80068e6:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
 80068ea:	f9b0 e014 	ldrsh.w	lr, [r0, #20]
 80068ee:	f9b0 7070 	ldrsh.w	r7, [r0, #112]	; 0x70
 80068f2:	f9b0 6072 	ldrsh.w	r6, [r0, #114]	; 0x72
 80068f6:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 80068fa:	fb93 f3fe 	sdiv	r3, r3, lr
 80068fe:	fb03 f202 	mul.w	r2, r3, r2
 8006902:	2a00      	cmp	r2, #0
 8006904:	bfb8      	it	lt
 8006906:	323f      	addlt	r2, #63	; 0x3f
 8006908:	1192      	asrs	r2, r2, #6
 800690a:	fb02 f303 	mul.w	r3, r2, r3
 800690e:	fb07 f707 	mul.w	r7, r7, r7
 8006912:	2b00      	cmp	r3, #0
 8006914:	fb06 7606 	mla	r6, r6, r6, r7
 8006918:	461a      	mov	r2, r3
 800691a:	f890 7118 	ldrb.w	r7, [r0, #280]	; 0x118
 800691e:	bfb8      	it	lt
 8006920:	f103 023f 	addlt.w	r2, r3, #63	; 0x3f
 8006924:	1192      	asrs	r2, r2, #6
 8006926:	fb07 3212 	mls	r2, r7, r2, r3
 800692a:	4296      	cmp	r6, r2
 800692c:	bfd4      	ite	le
 800692e:	2200      	movle	r2, #0
 8006930:	2201      	movgt	r2, #1
 8006932:	e7c6      	b.n	80068c2 <STO_PLL_CalcAvrgMecSpeedUnit+0xc6>
 8006934:	4664      	mov	r4, ip
 8006936:	4665      	mov	r5, ip
 8006938:	e785      	b.n	8006846 <STO_PLL_CalcAvrgMecSpeedUnit+0x4a>
 800693a:	bf00      	nop

0800693c <STO_PLL_CalcAvrgElSpeedDpp>:
 800693c:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
 8006940:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
 8006944:	b470      	push	{r4, r5, r6}
 8006946:	f890 410e 	ldrb.w	r4, [r0, #270]	; 0x10e
 800694a:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
 800694e:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 8006952:	b2a6      	uxth	r6, r4
 8006954:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	; 0x74
 8006958:	1af3      	subs	r3, r6, r3
 800695a:	b29b      	uxth	r3, r3
 800695c:	442a      	add	r2, r5
 800695e:	b19b      	cbz	r3, 8006988 <STO_PLL_CalcAvrgElSpeedDpp+0x4c>
 8006960:	440b      	add	r3, r1
 8006962:	b29b      	uxth	r3, r3
 8006964:	b219      	sxth	r1, r3
 8006966:	428c      	cmp	r4, r1
 8006968:	bfdc      	itt	le
 800696a:	1b9b      	suble	r3, r3, r6
 800696c:	b219      	sxthle	r1, r3
 800696e:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 8006972:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
 800697c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8006980:	4113      	asrs	r3, r2
 8006982:	81c3      	strh	r3, [r0, #14]
 8006984:	bc70      	pop	{r4, r5, r6}
 8006986:	4770      	bx	lr
 8006988:	f9b0 310c 	ldrsh.w	r3, [r0, #268]	; 0x10c
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	e7f3      	b.n	8006978 <STO_PLL_CalcAvrgElSpeedDpp+0x3c>

08006990 <STO_PLL_Clear>:
 8006990:	b510      	push	{r4, lr}
 8006992:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
 8006996:	2100      	movs	r1, #0
 8006998:	4604      	mov	r4, r0
 800699a:	e9c0 1118 	strd	r1, r1, [r0, #96]	; 0x60
 800699e:	e9c0 111a 	strd	r1, r1, [r0, #104]	; 0x68
 80069a2:	8081      	strh	r1, [r0, #4]
 80069a4:	81c1      	strh	r1, [r0, #14]
 80069a6:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
 80069aa:	f880 10f8 	strb.w	r1, [r0, #248]	; 0xf8
 80069ae:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
 80069b2:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
 80069b6:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
 80069ba:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
 80069be:	f880 1122 	strb.w	r1, [r0, #290]	; 0x122
 80069c2:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
 80069c6:	b132      	cbz	r2, 80069d6 <STO_PLL_Clear+0x46>
 80069c8:	3a01      	subs	r2, #1
 80069ca:	b2d2      	uxtb	r2, r2
 80069cc:	3201      	adds	r2, #1
 80069ce:	0052      	lsls	r2, r2, #1
 80069d0:	3074      	adds	r0, #116	; 0x74
 80069d2:	f000 f931 	bl	8006c38 <memset>
 80069d6:	2100      	movs	r1, #0
 80069d8:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
 80069dc:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 80069e0:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80069e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069e8:	f7fe be32 	b.w	8005650 <PID_SetIntegralTerm>

080069ec <STO_PLL_Init>:
 80069ec:	b538      	push	{r3, r4, r5, lr}
 80069ee:	4604      	mov	r4, r0
 80069f0:	f9b0 502e 	ldrsh.w	r5, [r0, #46]	; 0x2e
 80069f4:	4b18      	ldr	r3, [pc, #96]	; (8006a58 <STO_PLL_Init+0x6c>)
 80069f6:	f890 0116 	ldrb.w	r0, [r0, #278]	; 0x116
 80069fa:	fb93 f3f5 	sdiv	r3, r3, r5
 80069fe:	2200      	movs	r2, #0
 8006a00:	2101      	movs	r1, #1
 8006a02:	b21b      	sxth	r3, r3
 8006a04:	f884 00f6 	strb.w	r0, [r4, #246]	; 0xf6
 8006a08:	8662      	strh	r2, [r4, #50]	; 0x32
 8006a0a:	f884 1104 	strb.w	r1, [r4, #260]	; 0x104
 8006a0e:	b303      	cbz	r3, 8006a52 <STO_PLL_Init+0x66>
 8006a10:	4608      	mov	r0, r1
 8006a12:	e000      	b.n	8006a16 <STO_PLL_Init+0x2a>
 8006a14:	4611      	mov	r1, r2
 8006a16:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8006a1a:	1c4a      	adds	r2, r1, #1
 8006a1c:	105b      	asrs	r3, r3, #1
 8006a1e:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8006a22:	b292      	uxth	r2, r2
 8006a24:	d1f6      	bne.n	8006a14 <STO_PLL_Init+0x28>
 8006a26:	b200      	sxth	r0, r0
 8006a28:	fb05 f200 	mul.w	r2, r5, r0
 8006a2c:	8661      	strh	r1, [r4, #50]	; 0x32
 8006a2e:	4b0b      	ldr	r3, [pc, #44]	; (8006a5c <STO_PLL_Init+0x70>)
 8006a30:	8620      	strh	r0, [r4, #48]	; 0x30
 8006a32:	fb83 1302 	smull	r1, r3, r3, r2
 8006a36:	17d2      	asrs	r2, r2, #31
 8006a38:	ebc2 2223 	rsb	r2, r2, r3, asr #8
 8006a3c:	8562      	strh	r2, [r4, #42]	; 0x2a
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f7ff ffa6 	bl	8006990 <STO_PLL_Clear>
 8006a44:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8006a48:	f7fe fdee 	bl	8005628 <PID_HandleInit>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	8263      	strh	r3, [r4, #18]
 8006a50:	bd38      	pop	{r3, r4, r5, pc}
 8006a52:	462a      	mov	r2, r5
 8006a54:	4608      	mov	r0, r1
 8006a56:	e7ea      	b.n	8006a2e <STO_PLL_Init+0x42>
 8006a58:	000fea5e 	.word	0x000fea5e
 8006a5c:	06488dc5 	.word	0x06488dc5

08006a60 <STO_PLL_IsObserverConverged>:
 8006a60:	f890 2123 	ldrb.w	r2, [r0, #291]	; 0x123
 8006a64:	4603      	mov	r3, r0
 8006a66:	b10a      	cbz	r2, 8006a6c <STO_PLL_IsObserverConverged+0xc>
 8006a68:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8006a6c:	f893 0122 	ldrb.w	r0, [r3, #290]	; 0x122
 8006a70:	2800      	cmp	r0, #0
 8006a72:	d143      	bne.n	8006afc <STO_PLL_IsObserverConverged+0x9c>
 8006a74:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8006a78:	b430      	push	{r4, r5}
 8006a7a:	fb02 f501 	mul.w	r5, r2, r1
 8006a7e:	2d00      	cmp	r5, #0
 8006a80:	460c      	mov	r4, r1
 8006a82:	dd34      	ble.n	8006aee <STO_PLL_IsObserverConverged+0x8e>
 8006a84:	2a00      	cmp	r2, #0
 8006a86:	bfbc      	itt	lt
 8006a88:	4252      	neglt	r2, r2
 8006a8a:	b212      	sxthlt	r2, r2
 8006a8c:	2900      	cmp	r1, #0
 8006a8e:	bfbc      	itt	lt
 8006a90:	4249      	neglt	r1, r1
 8006a92:	b20c      	sxthlt	r4, r1
 8006a94:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
 8006a98:	b359      	cbz	r1, 8006af2 <STO_PLL_IsObserverConverged+0x92>
 8006a9a:	f8b3 5114 	ldrh.w	r5, [r3, #276]	; 0x114
 8006a9e:	b291      	uxth	r1, r2
 8006aa0:	428d      	cmp	r5, r1
 8006aa2:	d226      	bcs.n	8006af2 <STO_PLL_IsObserverConverged+0x92>
 8006aa4:	f893 1113 	ldrb.w	r1, [r3, #275]	; 0x113
 8006aa8:	fb04 f101 	mul.w	r1, r4, r1
 8006aac:	2900      	cmp	r1, #0
 8006aae:	bfb8      	it	lt
 8006ab0:	310f      	addlt	r1, #15
 8006ab2:	f341 110f 	sbfx	r1, r1, #4, #16
 8006ab6:	428a      	cmp	r2, r1
 8006ab8:	db1b      	blt.n	8006af2 <STO_PLL_IsObserverConverged+0x92>
 8006aba:	f893 1112 	ldrb.w	r1, [r3, #274]	; 0x112
 8006abe:	fb04 f101 	mul.w	r1, r4, r1
 8006ac2:	2900      	cmp	r1, #0
 8006ac4:	bfb8      	it	lt
 8006ac6:	310f      	addlt	r1, #15
 8006ac8:	f341 110f 	sbfx	r1, r1, #4, #16
 8006acc:	428a      	cmp	r2, r1
 8006ace:	dc10      	bgt.n	8006af2 <STO_PLL_IsObserverConverged+0x92>
 8006ad0:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
 8006ad4:	f893 1116 	ldrb.w	r1, [r3, #278]	; 0x116
 8006ad8:	3201      	adds	r2, #1
 8006ada:	b2d2      	uxtb	r2, r2
 8006adc:	4291      	cmp	r1, r2
 8006ade:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 8006ae2:	d804      	bhi.n	8006aee <STO_PLL_IsObserverConverged+0x8e>
 8006ae4:	2001      	movs	r0, #1
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 8006aec:	701a      	strb	r2, [r3, #0]
 8006aee:	bc30      	pop	{r4, r5}
 8006af0:	4770      	bx	lr
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 8006af8:	bc30      	pop	{r4, r5}
 8006afa:	4770      	bx	lr
 8006afc:	2001      	movs	r0, #1
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 8006b04:	701a      	strb	r2, [r3, #0]
 8006b06:	4770      	bx	lr

08006b08 <STO_PLL_GetEstimatedBemf>:
 8006b08:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8006b0a:	2000      	movs	r0, #0
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	f362 000f 	bfi	r0, r2, #0, #16
 8006b12:	0c1b      	lsrs	r3, r3, #16
 8006b14:	b082      	sub	sp, #8
 8006b16:	f363 401f 	bfi	r0, r3, #16, #16
 8006b1a:	b002      	add	sp, #8
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop

08006b20 <STO_PLL_GetEstimatedCurrent>:
 8006b20:	e9d0 2318 	ldrd	r2, r3, [r0, #96]	; 0x60
 8006b24:	b410      	push	{r4}
 8006b26:	f8b0 411c 	ldrh.w	r4, [r0, #284]	; 0x11c
 8006b2a:	4122      	asrs	r2, r4
 8006b2c:	b292      	uxth	r2, r2
 8006b2e:	4123      	asrs	r3, r4
 8006b30:	2100      	movs	r1, #0
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	f362 010f 	bfi	r1, r2, #0, #16
 8006b38:	f363 411f 	bfi	r1, r3, #16, #16
 8006b3c:	b083      	sub	sp, #12
 8006b3e:	4608      	mov	r0, r1
 8006b40:	b003      	add	sp, #12
 8006b42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <STO_PLL_GetObserverGains>:
 8006b48:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8006b4c:	800b      	strh	r3, [r1, #0]
 8006b4e:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 8006b52:	8013      	strh	r3, [r2, #0]
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop

08006b58 <STO_PLL_SetObserverGains>:
 8006b58:	8441      	strh	r1, [r0, #34]	; 0x22
 8006b5a:	84c2      	strh	r2, [r0, #38]	; 0x26
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop

08006b60 <STO_GetPLLGains>:
 8006b60:	b570      	push	{r4, r5, r6, lr}
 8006b62:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8006b66:	4620      	mov	r0, r4
 8006b68:	460e      	mov	r6, r1
 8006b6a:	4615      	mov	r5, r2
 8006b6c:	f7fe fd68 	bl	8005640 <PID_GetKP>
 8006b70:	8030      	strh	r0, [r6, #0]
 8006b72:	4620      	mov	r0, r4
 8006b74:	f7fe fd68 	bl	8005648 <PID_GetKI>
 8006b78:	8028      	strh	r0, [r5, #0]
 8006b7a:	bd70      	pop	{r4, r5, r6, pc}

08006b7c <STO_SetPLLGains>:
 8006b7c:	b538      	push	{r3, r4, r5, lr}
 8006b7e:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8006b82:	4615      	mov	r5, r2
 8006b84:	4620      	mov	r0, r4
 8006b86:	f7fe fd57 	bl	8005638 <PID_SetKP>
 8006b8a:	4629      	mov	r1, r5
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b92:	f7fe bd53 	b.w	800563c <PID_SetKI>
 8006b96:	bf00      	nop

08006b98 <STO_OTF_ResetPLL>:
 8006b98:	6800      	ldr	r0, [r0, #0]
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	3034      	adds	r0, #52	; 0x34
 8006b9e:	f7fe bd57 	b.w	8005650 <PID_SetIntegralTerm>
 8006ba2:	bf00      	nop

08006ba4 <STO_ResetPLL>:
 8006ba4:	3034      	adds	r0, #52	; 0x34
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	f7fe bd52 	b.w	8005650 <PID_SetIntegralTerm>

08006bac <STO_PLL_GetEstimatedBemfLevel>:
 8006bac:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop

08006bb4 <STO_PLL_GetObservedBemfLevel>:
 8006bb4:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop

08006bbc <STO_PLL_IsVarianceTight>:
 8006bbc:	6803      	ldr	r3, [r0, #0]
 8006bbe:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
 8006bc2:	4770      	bx	lr

08006bc4 <STO_PLL_ForceConvergency1>:
 8006bc4:	6803      	ldr	r3, [r0, #0]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop

08006bd0 <STO_PLL_ForceConvergency2>:
 8006bd0:	6803      	ldr	r3, [r0, #0]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop

08006bdc <STO_SetDirection>:
 8006bdc:	f880 1124 	strb.w	r1, [r0, #292]	; 0x124
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop

08006be4 <__errno>:
 8006be4:	4b01      	ldr	r3, [pc, #4]	; (8006bec <__errno+0x8>)
 8006be6:	6818      	ldr	r0, [r3, #0]
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	20000704 	.word	0x20000704

08006bf0 <__libc_init_array>:
 8006bf0:	b570      	push	{r4, r5, r6, lr}
 8006bf2:	4d0d      	ldr	r5, [pc, #52]	; (8006c28 <__libc_init_array+0x38>)
 8006bf4:	4c0d      	ldr	r4, [pc, #52]	; (8006c2c <__libc_init_array+0x3c>)
 8006bf6:	1b64      	subs	r4, r4, r5
 8006bf8:	10a4      	asrs	r4, r4, #2
 8006bfa:	2600      	movs	r6, #0
 8006bfc:	42a6      	cmp	r6, r4
 8006bfe:	d109      	bne.n	8006c14 <__libc_init_array+0x24>
 8006c00:	4d0b      	ldr	r5, [pc, #44]	; (8006c30 <__libc_init_array+0x40>)
 8006c02:	4c0c      	ldr	r4, [pc, #48]	; (8006c34 <__libc_init_array+0x44>)
 8006c04:	f000 fc4e 	bl	80074a4 <_init>
 8006c08:	1b64      	subs	r4, r4, r5
 8006c0a:	10a4      	asrs	r4, r4, #2
 8006c0c:	2600      	movs	r6, #0
 8006c0e:	42a6      	cmp	r6, r4
 8006c10:	d105      	bne.n	8006c1e <__libc_init_array+0x2e>
 8006c12:	bd70      	pop	{r4, r5, r6, pc}
 8006c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c18:	4798      	blx	r3
 8006c1a:	3601      	adds	r6, #1
 8006c1c:	e7ee      	b.n	8006bfc <__libc_init_array+0xc>
 8006c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c22:	4798      	blx	r3
 8006c24:	3601      	adds	r6, #1
 8006c26:	e7f2      	b.n	8006c0e <__libc_init_array+0x1e>
 8006c28:	08007770 	.word	0x08007770
 8006c2c:	08007770 	.word	0x08007770
 8006c30:	08007770 	.word	0x08007770
 8006c34:	08007774 	.word	0x08007774

08006c38 <memset>:
 8006c38:	4402      	add	r2, r0
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d100      	bne.n	8006c42 <memset+0xa>
 8006c40:	4770      	bx	lr
 8006c42:	f803 1b01 	strb.w	r1, [r3], #1
 8006c46:	e7f9      	b.n	8006c3c <memset+0x4>

08006c48 <siprintf>:
 8006c48:	b40e      	push	{r1, r2, r3}
 8006c4a:	b500      	push	{lr}
 8006c4c:	b09c      	sub	sp, #112	; 0x70
 8006c4e:	ab1d      	add	r3, sp, #116	; 0x74
 8006c50:	9002      	str	r0, [sp, #8]
 8006c52:	9006      	str	r0, [sp, #24]
 8006c54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c58:	4809      	ldr	r0, [pc, #36]	; (8006c80 <siprintf+0x38>)
 8006c5a:	9107      	str	r1, [sp, #28]
 8006c5c:	9104      	str	r1, [sp, #16]
 8006c5e:	4909      	ldr	r1, [pc, #36]	; (8006c84 <siprintf+0x3c>)
 8006c60:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c64:	9105      	str	r1, [sp, #20]
 8006c66:	6800      	ldr	r0, [r0, #0]
 8006c68:	9301      	str	r3, [sp, #4]
 8006c6a:	a902      	add	r1, sp, #8
 8006c6c:	f000 f868 	bl	8006d40 <_svfiprintf_r>
 8006c70:	9b02      	ldr	r3, [sp, #8]
 8006c72:	2200      	movs	r2, #0
 8006c74:	701a      	strb	r2, [r3, #0]
 8006c76:	b01c      	add	sp, #112	; 0x70
 8006c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c7c:	b003      	add	sp, #12
 8006c7e:	4770      	bx	lr
 8006c80:	20000704 	.word	0x20000704
 8006c84:	ffff0208 	.word	0xffff0208

08006c88 <__ssputs_r>:
 8006c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c8c:	688e      	ldr	r6, [r1, #8]
 8006c8e:	429e      	cmp	r6, r3
 8006c90:	4682      	mov	sl, r0
 8006c92:	460c      	mov	r4, r1
 8006c94:	4690      	mov	r8, r2
 8006c96:	461f      	mov	r7, r3
 8006c98:	d838      	bhi.n	8006d0c <__ssputs_r+0x84>
 8006c9a:	898a      	ldrh	r2, [r1, #12]
 8006c9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ca0:	d032      	beq.n	8006d08 <__ssputs_r+0x80>
 8006ca2:	6825      	ldr	r5, [r4, #0]
 8006ca4:	6909      	ldr	r1, [r1, #16]
 8006ca6:	eba5 0901 	sub.w	r9, r5, r1
 8006caa:	6965      	ldr	r5, [r4, #20]
 8006cac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006cb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	444b      	add	r3, r9
 8006cb8:	106d      	asrs	r5, r5, #1
 8006cba:	429d      	cmp	r5, r3
 8006cbc:	bf38      	it	cc
 8006cbe:	461d      	movcc	r5, r3
 8006cc0:	0553      	lsls	r3, r2, #21
 8006cc2:	d531      	bpl.n	8006d28 <__ssputs_r+0xa0>
 8006cc4:	4629      	mov	r1, r5
 8006cc6:	f000 fb47 	bl	8007358 <_malloc_r>
 8006cca:	4606      	mov	r6, r0
 8006ccc:	b950      	cbnz	r0, 8006ce4 <__ssputs_r+0x5c>
 8006cce:	230c      	movs	r3, #12
 8006cd0:	f8ca 3000 	str.w	r3, [sl]
 8006cd4:	89a3      	ldrh	r3, [r4, #12]
 8006cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cda:	81a3      	strh	r3, [r4, #12]
 8006cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce4:	6921      	ldr	r1, [r4, #16]
 8006ce6:	464a      	mov	r2, r9
 8006ce8:	f000 fabe 	bl	8007268 <memcpy>
 8006cec:	89a3      	ldrh	r3, [r4, #12]
 8006cee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cf6:	81a3      	strh	r3, [r4, #12]
 8006cf8:	6126      	str	r6, [r4, #16]
 8006cfa:	6165      	str	r5, [r4, #20]
 8006cfc:	444e      	add	r6, r9
 8006cfe:	eba5 0509 	sub.w	r5, r5, r9
 8006d02:	6026      	str	r6, [r4, #0]
 8006d04:	60a5      	str	r5, [r4, #8]
 8006d06:	463e      	mov	r6, r7
 8006d08:	42be      	cmp	r6, r7
 8006d0a:	d900      	bls.n	8006d0e <__ssputs_r+0x86>
 8006d0c:	463e      	mov	r6, r7
 8006d0e:	4632      	mov	r2, r6
 8006d10:	6820      	ldr	r0, [r4, #0]
 8006d12:	4641      	mov	r1, r8
 8006d14:	f000 fab6 	bl	8007284 <memmove>
 8006d18:	68a3      	ldr	r3, [r4, #8]
 8006d1a:	6822      	ldr	r2, [r4, #0]
 8006d1c:	1b9b      	subs	r3, r3, r6
 8006d1e:	4432      	add	r2, r6
 8006d20:	60a3      	str	r3, [r4, #8]
 8006d22:	6022      	str	r2, [r4, #0]
 8006d24:	2000      	movs	r0, #0
 8006d26:	e7db      	b.n	8006ce0 <__ssputs_r+0x58>
 8006d28:	462a      	mov	r2, r5
 8006d2a:	f000 fb6f 	bl	800740c <_realloc_r>
 8006d2e:	4606      	mov	r6, r0
 8006d30:	2800      	cmp	r0, #0
 8006d32:	d1e1      	bne.n	8006cf8 <__ssputs_r+0x70>
 8006d34:	6921      	ldr	r1, [r4, #16]
 8006d36:	4650      	mov	r0, sl
 8006d38:	f000 fabe 	bl	80072b8 <_free_r>
 8006d3c:	e7c7      	b.n	8006cce <__ssputs_r+0x46>
	...

08006d40 <_svfiprintf_r>:
 8006d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d44:	4698      	mov	r8, r3
 8006d46:	898b      	ldrh	r3, [r1, #12]
 8006d48:	061b      	lsls	r3, r3, #24
 8006d4a:	b09d      	sub	sp, #116	; 0x74
 8006d4c:	4607      	mov	r7, r0
 8006d4e:	460d      	mov	r5, r1
 8006d50:	4614      	mov	r4, r2
 8006d52:	d50e      	bpl.n	8006d72 <_svfiprintf_r+0x32>
 8006d54:	690b      	ldr	r3, [r1, #16]
 8006d56:	b963      	cbnz	r3, 8006d72 <_svfiprintf_r+0x32>
 8006d58:	2140      	movs	r1, #64	; 0x40
 8006d5a:	f000 fafd 	bl	8007358 <_malloc_r>
 8006d5e:	6028      	str	r0, [r5, #0]
 8006d60:	6128      	str	r0, [r5, #16]
 8006d62:	b920      	cbnz	r0, 8006d6e <_svfiprintf_r+0x2e>
 8006d64:	230c      	movs	r3, #12
 8006d66:	603b      	str	r3, [r7, #0]
 8006d68:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6c:	e0d1      	b.n	8006f12 <_svfiprintf_r+0x1d2>
 8006d6e:	2340      	movs	r3, #64	; 0x40
 8006d70:	616b      	str	r3, [r5, #20]
 8006d72:	2300      	movs	r3, #0
 8006d74:	9309      	str	r3, [sp, #36]	; 0x24
 8006d76:	2320      	movs	r3, #32
 8006d78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d80:	2330      	movs	r3, #48	; 0x30
 8006d82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006f2c <_svfiprintf_r+0x1ec>
 8006d86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d8a:	f04f 0901 	mov.w	r9, #1
 8006d8e:	4623      	mov	r3, r4
 8006d90:	469a      	mov	sl, r3
 8006d92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d96:	b10a      	cbz	r2, 8006d9c <_svfiprintf_r+0x5c>
 8006d98:	2a25      	cmp	r2, #37	; 0x25
 8006d9a:	d1f9      	bne.n	8006d90 <_svfiprintf_r+0x50>
 8006d9c:	ebba 0b04 	subs.w	fp, sl, r4
 8006da0:	d00b      	beq.n	8006dba <_svfiprintf_r+0x7a>
 8006da2:	465b      	mov	r3, fp
 8006da4:	4622      	mov	r2, r4
 8006da6:	4629      	mov	r1, r5
 8006da8:	4638      	mov	r0, r7
 8006daa:	f7ff ff6d 	bl	8006c88 <__ssputs_r>
 8006dae:	3001      	adds	r0, #1
 8006db0:	f000 80aa 	beq.w	8006f08 <_svfiprintf_r+0x1c8>
 8006db4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006db6:	445a      	add	r2, fp
 8006db8:	9209      	str	r2, [sp, #36]	; 0x24
 8006dba:	f89a 3000 	ldrb.w	r3, [sl]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 80a2 	beq.w	8006f08 <_svfiprintf_r+0x1c8>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dce:	f10a 0a01 	add.w	sl, sl, #1
 8006dd2:	9304      	str	r3, [sp, #16]
 8006dd4:	9307      	str	r3, [sp, #28]
 8006dd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006dda:	931a      	str	r3, [sp, #104]	; 0x68
 8006ddc:	4654      	mov	r4, sl
 8006dde:	2205      	movs	r2, #5
 8006de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006de4:	4851      	ldr	r0, [pc, #324]	; (8006f2c <_svfiprintf_r+0x1ec>)
 8006de6:	f7f9 fa1b 	bl	8000220 <memchr>
 8006dea:	9a04      	ldr	r2, [sp, #16]
 8006dec:	b9d8      	cbnz	r0, 8006e26 <_svfiprintf_r+0xe6>
 8006dee:	06d0      	lsls	r0, r2, #27
 8006df0:	bf44      	itt	mi
 8006df2:	2320      	movmi	r3, #32
 8006df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006df8:	0711      	lsls	r1, r2, #28
 8006dfa:	bf44      	itt	mi
 8006dfc:	232b      	movmi	r3, #43	; 0x2b
 8006dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e02:	f89a 3000 	ldrb.w	r3, [sl]
 8006e06:	2b2a      	cmp	r3, #42	; 0x2a
 8006e08:	d015      	beq.n	8006e36 <_svfiprintf_r+0xf6>
 8006e0a:	9a07      	ldr	r2, [sp, #28]
 8006e0c:	4654      	mov	r4, sl
 8006e0e:	2000      	movs	r0, #0
 8006e10:	f04f 0c0a 	mov.w	ip, #10
 8006e14:	4621      	mov	r1, r4
 8006e16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e1a:	3b30      	subs	r3, #48	; 0x30
 8006e1c:	2b09      	cmp	r3, #9
 8006e1e:	d94e      	bls.n	8006ebe <_svfiprintf_r+0x17e>
 8006e20:	b1b0      	cbz	r0, 8006e50 <_svfiprintf_r+0x110>
 8006e22:	9207      	str	r2, [sp, #28]
 8006e24:	e014      	b.n	8006e50 <_svfiprintf_r+0x110>
 8006e26:	eba0 0308 	sub.w	r3, r0, r8
 8006e2a:	fa09 f303 	lsl.w	r3, r9, r3
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	9304      	str	r3, [sp, #16]
 8006e32:	46a2      	mov	sl, r4
 8006e34:	e7d2      	b.n	8006ddc <_svfiprintf_r+0x9c>
 8006e36:	9b03      	ldr	r3, [sp, #12]
 8006e38:	1d19      	adds	r1, r3, #4
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	9103      	str	r1, [sp, #12]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	bfbb      	ittet	lt
 8006e42:	425b      	neglt	r3, r3
 8006e44:	f042 0202 	orrlt.w	r2, r2, #2
 8006e48:	9307      	strge	r3, [sp, #28]
 8006e4a:	9307      	strlt	r3, [sp, #28]
 8006e4c:	bfb8      	it	lt
 8006e4e:	9204      	strlt	r2, [sp, #16]
 8006e50:	7823      	ldrb	r3, [r4, #0]
 8006e52:	2b2e      	cmp	r3, #46	; 0x2e
 8006e54:	d10c      	bne.n	8006e70 <_svfiprintf_r+0x130>
 8006e56:	7863      	ldrb	r3, [r4, #1]
 8006e58:	2b2a      	cmp	r3, #42	; 0x2a
 8006e5a:	d135      	bne.n	8006ec8 <_svfiprintf_r+0x188>
 8006e5c:	9b03      	ldr	r3, [sp, #12]
 8006e5e:	1d1a      	adds	r2, r3, #4
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	9203      	str	r2, [sp, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	bfb8      	it	lt
 8006e68:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e6c:	3402      	adds	r4, #2
 8006e6e:	9305      	str	r3, [sp, #20]
 8006e70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f3c <_svfiprintf_r+0x1fc>
 8006e74:	7821      	ldrb	r1, [r4, #0]
 8006e76:	2203      	movs	r2, #3
 8006e78:	4650      	mov	r0, sl
 8006e7a:	f7f9 f9d1 	bl	8000220 <memchr>
 8006e7e:	b140      	cbz	r0, 8006e92 <_svfiprintf_r+0x152>
 8006e80:	2340      	movs	r3, #64	; 0x40
 8006e82:	eba0 000a 	sub.w	r0, r0, sl
 8006e86:	fa03 f000 	lsl.w	r0, r3, r0
 8006e8a:	9b04      	ldr	r3, [sp, #16]
 8006e8c:	4303      	orrs	r3, r0
 8006e8e:	3401      	adds	r4, #1
 8006e90:	9304      	str	r3, [sp, #16]
 8006e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e96:	4826      	ldr	r0, [pc, #152]	; (8006f30 <_svfiprintf_r+0x1f0>)
 8006e98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e9c:	2206      	movs	r2, #6
 8006e9e:	f7f9 f9bf 	bl	8000220 <memchr>
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	d038      	beq.n	8006f18 <_svfiprintf_r+0x1d8>
 8006ea6:	4b23      	ldr	r3, [pc, #140]	; (8006f34 <_svfiprintf_r+0x1f4>)
 8006ea8:	bb1b      	cbnz	r3, 8006ef2 <_svfiprintf_r+0x1b2>
 8006eaa:	9b03      	ldr	r3, [sp, #12]
 8006eac:	3307      	adds	r3, #7
 8006eae:	f023 0307 	bic.w	r3, r3, #7
 8006eb2:	3308      	adds	r3, #8
 8006eb4:	9303      	str	r3, [sp, #12]
 8006eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb8:	4433      	add	r3, r6
 8006eba:	9309      	str	r3, [sp, #36]	; 0x24
 8006ebc:	e767      	b.n	8006d8e <_svfiprintf_r+0x4e>
 8006ebe:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ec2:	460c      	mov	r4, r1
 8006ec4:	2001      	movs	r0, #1
 8006ec6:	e7a5      	b.n	8006e14 <_svfiprintf_r+0xd4>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	3401      	adds	r4, #1
 8006ecc:	9305      	str	r3, [sp, #20]
 8006ece:	4619      	mov	r1, r3
 8006ed0:	f04f 0c0a 	mov.w	ip, #10
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006eda:	3a30      	subs	r2, #48	; 0x30
 8006edc:	2a09      	cmp	r2, #9
 8006ede:	d903      	bls.n	8006ee8 <_svfiprintf_r+0x1a8>
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d0c5      	beq.n	8006e70 <_svfiprintf_r+0x130>
 8006ee4:	9105      	str	r1, [sp, #20]
 8006ee6:	e7c3      	b.n	8006e70 <_svfiprintf_r+0x130>
 8006ee8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006eec:	4604      	mov	r4, r0
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e7f0      	b.n	8006ed4 <_svfiprintf_r+0x194>
 8006ef2:	ab03      	add	r3, sp, #12
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	462a      	mov	r2, r5
 8006ef8:	4b0f      	ldr	r3, [pc, #60]	; (8006f38 <_svfiprintf_r+0x1f8>)
 8006efa:	a904      	add	r1, sp, #16
 8006efc:	4638      	mov	r0, r7
 8006efe:	f3af 8000 	nop.w
 8006f02:	1c42      	adds	r2, r0, #1
 8006f04:	4606      	mov	r6, r0
 8006f06:	d1d6      	bne.n	8006eb6 <_svfiprintf_r+0x176>
 8006f08:	89ab      	ldrh	r3, [r5, #12]
 8006f0a:	065b      	lsls	r3, r3, #25
 8006f0c:	f53f af2c 	bmi.w	8006d68 <_svfiprintf_r+0x28>
 8006f10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f12:	b01d      	add	sp, #116	; 0x74
 8006f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f18:	ab03      	add	r3, sp, #12
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	462a      	mov	r2, r5
 8006f1e:	4b06      	ldr	r3, [pc, #24]	; (8006f38 <_svfiprintf_r+0x1f8>)
 8006f20:	a904      	add	r1, sp, #16
 8006f22:	4638      	mov	r0, r7
 8006f24:	f000 f87a 	bl	800701c <_printf_i>
 8006f28:	e7eb      	b.n	8006f02 <_svfiprintf_r+0x1c2>
 8006f2a:	bf00      	nop
 8006f2c:	08007732 	.word	0x08007732
 8006f30:	0800773c 	.word	0x0800773c
 8006f34:	00000000 	.word	0x00000000
 8006f38:	08006c89 	.word	0x08006c89
 8006f3c:	08007738 	.word	0x08007738

08006f40 <_printf_common>:
 8006f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f44:	4616      	mov	r6, r2
 8006f46:	4699      	mov	r9, r3
 8006f48:	688a      	ldr	r2, [r1, #8]
 8006f4a:	690b      	ldr	r3, [r1, #16]
 8006f4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f50:	4293      	cmp	r3, r2
 8006f52:	bfb8      	it	lt
 8006f54:	4613      	movlt	r3, r2
 8006f56:	6033      	str	r3, [r6, #0]
 8006f58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f5c:	4607      	mov	r7, r0
 8006f5e:	460c      	mov	r4, r1
 8006f60:	b10a      	cbz	r2, 8006f66 <_printf_common+0x26>
 8006f62:	3301      	adds	r3, #1
 8006f64:	6033      	str	r3, [r6, #0]
 8006f66:	6823      	ldr	r3, [r4, #0]
 8006f68:	0699      	lsls	r1, r3, #26
 8006f6a:	bf42      	ittt	mi
 8006f6c:	6833      	ldrmi	r3, [r6, #0]
 8006f6e:	3302      	addmi	r3, #2
 8006f70:	6033      	strmi	r3, [r6, #0]
 8006f72:	6825      	ldr	r5, [r4, #0]
 8006f74:	f015 0506 	ands.w	r5, r5, #6
 8006f78:	d106      	bne.n	8006f88 <_printf_common+0x48>
 8006f7a:	f104 0a19 	add.w	sl, r4, #25
 8006f7e:	68e3      	ldr	r3, [r4, #12]
 8006f80:	6832      	ldr	r2, [r6, #0]
 8006f82:	1a9b      	subs	r3, r3, r2
 8006f84:	42ab      	cmp	r3, r5
 8006f86:	dc26      	bgt.n	8006fd6 <_printf_common+0x96>
 8006f88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f8c:	1e13      	subs	r3, r2, #0
 8006f8e:	6822      	ldr	r2, [r4, #0]
 8006f90:	bf18      	it	ne
 8006f92:	2301      	movne	r3, #1
 8006f94:	0692      	lsls	r2, r2, #26
 8006f96:	d42b      	bmi.n	8006ff0 <_printf_common+0xb0>
 8006f98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f9c:	4649      	mov	r1, r9
 8006f9e:	4638      	mov	r0, r7
 8006fa0:	47c0      	blx	r8
 8006fa2:	3001      	adds	r0, #1
 8006fa4:	d01e      	beq.n	8006fe4 <_printf_common+0xa4>
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	68e5      	ldr	r5, [r4, #12]
 8006faa:	6832      	ldr	r2, [r6, #0]
 8006fac:	f003 0306 	and.w	r3, r3, #6
 8006fb0:	2b04      	cmp	r3, #4
 8006fb2:	bf08      	it	eq
 8006fb4:	1aad      	subeq	r5, r5, r2
 8006fb6:	68a3      	ldr	r3, [r4, #8]
 8006fb8:	6922      	ldr	r2, [r4, #16]
 8006fba:	bf0c      	ite	eq
 8006fbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fc0:	2500      	movne	r5, #0
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	bfc4      	itt	gt
 8006fc6:	1a9b      	subgt	r3, r3, r2
 8006fc8:	18ed      	addgt	r5, r5, r3
 8006fca:	2600      	movs	r6, #0
 8006fcc:	341a      	adds	r4, #26
 8006fce:	42b5      	cmp	r5, r6
 8006fd0:	d11a      	bne.n	8007008 <_printf_common+0xc8>
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	e008      	b.n	8006fe8 <_printf_common+0xa8>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	4652      	mov	r2, sl
 8006fda:	4649      	mov	r1, r9
 8006fdc:	4638      	mov	r0, r7
 8006fde:	47c0      	blx	r8
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	d103      	bne.n	8006fec <_printf_common+0xac>
 8006fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fec:	3501      	adds	r5, #1
 8006fee:	e7c6      	b.n	8006f7e <_printf_common+0x3e>
 8006ff0:	18e1      	adds	r1, r4, r3
 8006ff2:	1c5a      	adds	r2, r3, #1
 8006ff4:	2030      	movs	r0, #48	; 0x30
 8006ff6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ffa:	4422      	add	r2, r4
 8006ffc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007000:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007004:	3302      	adds	r3, #2
 8007006:	e7c7      	b.n	8006f98 <_printf_common+0x58>
 8007008:	2301      	movs	r3, #1
 800700a:	4622      	mov	r2, r4
 800700c:	4649      	mov	r1, r9
 800700e:	4638      	mov	r0, r7
 8007010:	47c0      	blx	r8
 8007012:	3001      	adds	r0, #1
 8007014:	d0e6      	beq.n	8006fe4 <_printf_common+0xa4>
 8007016:	3601      	adds	r6, #1
 8007018:	e7d9      	b.n	8006fce <_printf_common+0x8e>
	...

0800701c <_printf_i>:
 800701c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007020:	460c      	mov	r4, r1
 8007022:	4691      	mov	r9, r2
 8007024:	7e27      	ldrb	r7, [r4, #24]
 8007026:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007028:	2f78      	cmp	r7, #120	; 0x78
 800702a:	4680      	mov	r8, r0
 800702c:	469a      	mov	sl, r3
 800702e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007032:	d807      	bhi.n	8007044 <_printf_i+0x28>
 8007034:	2f62      	cmp	r7, #98	; 0x62
 8007036:	d80a      	bhi.n	800704e <_printf_i+0x32>
 8007038:	2f00      	cmp	r7, #0
 800703a:	f000 80d8 	beq.w	80071ee <_printf_i+0x1d2>
 800703e:	2f58      	cmp	r7, #88	; 0x58
 8007040:	f000 80a3 	beq.w	800718a <_printf_i+0x16e>
 8007044:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007048:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800704c:	e03a      	b.n	80070c4 <_printf_i+0xa8>
 800704e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007052:	2b15      	cmp	r3, #21
 8007054:	d8f6      	bhi.n	8007044 <_printf_i+0x28>
 8007056:	a001      	add	r0, pc, #4	; (adr r0, 800705c <_printf_i+0x40>)
 8007058:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800705c:	080070b5 	.word	0x080070b5
 8007060:	080070c9 	.word	0x080070c9
 8007064:	08007045 	.word	0x08007045
 8007068:	08007045 	.word	0x08007045
 800706c:	08007045 	.word	0x08007045
 8007070:	08007045 	.word	0x08007045
 8007074:	080070c9 	.word	0x080070c9
 8007078:	08007045 	.word	0x08007045
 800707c:	08007045 	.word	0x08007045
 8007080:	08007045 	.word	0x08007045
 8007084:	08007045 	.word	0x08007045
 8007088:	080071d5 	.word	0x080071d5
 800708c:	080070f9 	.word	0x080070f9
 8007090:	080071b7 	.word	0x080071b7
 8007094:	08007045 	.word	0x08007045
 8007098:	08007045 	.word	0x08007045
 800709c:	080071f7 	.word	0x080071f7
 80070a0:	08007045 	.word	0x08007045
 80070a4:	080070f9 	.word	0x080070f9
 80070a8:	08007045 	.word	0x08007045
 80070ac:	08007045 	.word	0x08007045
 80070b0:	080071bf 	.word	0x080071bf
 80070b4:	680b      	ldr	r3, [r1, #0]
 80070b6:	1d1a      	adds	r2, r3, #4
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	600a      	str	r2, [r1, #0]
 80070bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80070c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070c4:	2301      	movs	r3, #1
 80070c6:	e0a3      	b.n	8007210 <_printf_i+0x1f4>
 80070c8:	6825      	ldr	r5, [r4, #0]
 80070ca:	6808      	ldr	r0, [r1, #0]
 80070cc:	062e      	lsls	r6, r5, #24
 80070ce:	f100 0304 	add.w	r3, r0, #4
 80070d2:	d50a      	bpl.n	80070ea <_printf_i+0xce>
 80070d4:	6805      	ldr	r5, [r0, #0]
 80070d6:	600b      	str	r3, [r1, #0]
 80070d8:	2d00      	cmp	r5, #0
 80070da:	da03      	bge.n	80070e4 <_printf_i+0xc8>
 80070dc:	232d      	movs	r3, #45	; 0x2d
 80070de:	426d      	negs	r5, r5
 80070e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070e4:	485e      	ldr	r0, [pc, #376]	; (8007260 <_printf_i+0x244>)
 80070e6:	230a      	movs	r3, #10
 80070e8:	e019      	b.n	800711e <_printf_i+0x102>
 80070ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80070ee:	6805      	ldr	r5, [r0, #0]
 80070f0:	600b      	str	r3, [r1, #0]
 80070f2:	bf18      	it	ne
 80070f4:	b22d      	sxthne	r5, r5
 80070f6:	e7ef      	b.n	80070d8 <_printf_i+0xbc>
 80070f8:	680b      	ldr	r3, [r1, #0]
 80070fa:	6825      	ldr	r5, [r4, #0]
 80070fc:	1d18      	adds	r0, r3, #4
 80070fe:	6008      	str	r0, [r1, #0]
 8007100:	0628      	lsls	r0, r5, #24
 8007102:	d501      	bpl.n	8007108 <_printf_i+0xec>
 8007104:	681d      	ldr	r5, [r3, #0]
 8007106:	e002      	b.n	800710e <_printf_i+0xf2>
 8007108:	0669      	lsls	r1, r5, #25
 800710a:	d5fb      	bpl.n	8007104 <_printf_i+0xe8>
 800710c:	881d      	ldrh	r5, [r3, #0]
 800710e:	4854      	ldr	r0, [pc, #336]	; (8007260 <_printf_i+0x244>)
 8007110:	2f6f      	cmp	r7, #111	; 0x6f
 8007112:	bf0c      	ite	eq
 8007114:	2308      	moveq	r3, #8
 8007116:	230a      	movne	r3, #10
 8007118:	2100      	movs	r1, #0
 800711a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800711e:	6866      	ldr	r6, [r4, #4]
 8007120:	60a6      	str	r6, [r4, #8]
 8007122:	2e00      	cmp	r6, #0
 8007124:	bfa2      	ittt	ge
 8007126:	6821      	ldrge	r1, [r4, #0]
 8007128:	f021 0104 	bicge.w	r1, r1, #4
 800712c:	6021      	strge	r1, [r4, #0]
 800712e:	b90d      	cbnz	r5, 8007134 <_printf_i+0x118>
 8007130:	2e00      	cmp	r6, #0
 8007132:	d04d      	beq.n	80071d0 <_printf_i+0x1b4>
 8007134:	4616      	mov	r6, r2
 8007136:	fbb5 f1f3 	udiv	r1, r5, r3
 800713a:	fb03 5711 	mls	r7, r3, r1, r5
 800713e:	5dc7      	ldrb	r7, [r0, r7]
 8007140:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007144:	462f      	mov	r7, r5
 8007146:	42bb      	cmp	r3, r7
 8007148:	460d      	mov	r5, r1
 800714a:	d9f4      	bls.n	8007136 <_printf_i+0x11a>
 800714c:	2b08      	cmp	r3, #8
 800714e:	d10b      	bne.n	8007168 <_printf_i+0x14c>
 8007150:	6823      	ldr	r3, [r4, #0]
 8007152:	07df      	lsls	r7, r3, #31
 8007154:	d508      	bpl.n	8007168 <_printf_i+0x14c>
 8007156:	6923      	ldr	r3, [r4, #16]
 8007158:	6861      	ldr	r1, [r4, #4]
 800715a:	4299      	cmp	r1, r3
 800715c:	bfde      	ittt	le
 800715e:	2330      	movle	r3, #48	; 0x30
 8007160:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007164:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007168:	1b92      	subs	r2, r2, r6
 800716a:	6122      	str	r2, [r4, #16]
 800716c:	f8cd a000 	str.w	sl, [sp]
 8007170:	464b      	mov	r3, r9
 8007172:	aa03      	add	r2, sp, #12
 8007174:	4621      	mov	r1, r4
 8007176:	4640      	mov	r0, r8
 8007178:	f7ff fee2 	bl	8006f40 <_printf_common>
 800717c:	3001      	adds	r0, #1
 800717e:	d14c      	bne.n	800721a <_printf_i+0x1fe>
 8007180:	f04f 30ff 	mov.w	r0, #4294967295
 8007184:	b004      	add	sp, #16
 8007186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800718a:	4835      	ldr	r0, [pc, #212]	; (8007260 <_printf_i+0x244>)
 800718c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	680e      	ldr	r6, [r1, #0]
 8007194:	061f      	lsls	r7, r3, #24
 8007196:	f856 5b04 	ldr.w	r5, [r6], #4
 800719a:	600e      	str	r6, [r1, #0]
 800719c:	d514      	bpl.n	80071c8 <_printf_i+0x1ac>
 800719e:	07d9      	lsls	r1, r3, #31
 80071a0:	bf44      	itt	mi
 80071a2:	f043 0320 	orrmi.w	r3, r3, #32
 80071a6:	6023      	strmi	r3, [r4, #0]
 80071a8:	b91d      	cbnz	r5, 80071b2 <_printf_i+0x196>
 80071aa:	6823      	ldr	r3, [r4, #0]
 80071ac:	f023 0320 	bic.w	r3, r3, #32
 80071b0:	6023      	str	r3, [r4, #0]
 80071b2:	2310      	movs	r3, #16
 80071b4:	e7b0      	b.n	8007118 <_printf_i+0xfc>
 80071b6:	6823      	ldr	r3, [r4, #0]
 80071b8:	f043 0320 	orr.w	r3, r3, #32
 80071bc:	6023      	str	r3, [r4, #0]
 80071be:	2378      	movs	r3, #120	; 0x78
 80071c0:	4828      	ldr	r0, [pc, #160]	; (8007264 <_printf_i+0x248>)
 80071c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071c6:	e7e3      	b.n	8007190 <_printf_i+0x174>
 80071c8:	065e      	lsls	r6, r3, #25
 80071ca:	bf48      	it	mi
 80071cc:	b2ad      	uxthmi	r5, r5
 80071ce:	e7e6      	b.n	800719e <_printf_i+0x182>
 80071d0:	4616      	mov	r6, r2
 80071d2:	e7bb      	b.n	800714c <_printf_i+0x130>
 80071d4:	680b      	ldr	r3, [r1, #0]
 80071d6:	6826      	ldr	r6, [r4, #0]
 80071d8:	6960      	ldr	r0, [r4, #20]
 80071da:	1d1d      	adds	r5, r3, #4
 80071dc:	600d      	str	r5, [r1, #0]
 80071de:	0635      	lsls	r5, r6, #24
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	d501      	bpl.n	80071e8 <_printf_i+0x1cc>
 80071e4:	6018      	str	r0, [r3, #0]
 80071e6:	e002      	b.n	80071ee <_printf_i+0x1d2>
 80071e8:	0671      	lsls	r1, r6, #25
 80071ea:	d5fb      	bpl.n	80071e4 <_printf_i+0x1c8>
 80071ec:	8018      	strh	r0, [r3, #0]
 80071ee:	2300      	movs	r3, #0
 80071f0:	6123      	str	r3, [r4, #16]
 80071f2:	4616      	mov	r6, r2
 80071f4:	e7ba      	b.n	800716c <_printf_i+0x150>
 80071f6:	680b      	ldr	r3, [r1, #0]
 80071f8:	1d1a      	adds	r2, r3, #4
 80071fa:	600a      	str	r2, [r1, #0]
 80071fc:	681e      	ldr	r6, [r3, #0]
 80071fe:	6862      	ldr	r2, [r4, #4]
 8007200:	2100      	movs	r1, #0
 8007202:	4630      	mov	r0, r6
 8007204:	f7f9 f80c 	bl	8000220 <memchr>
 8007208:	b108      	cbz	r0, 800720e <_printf_i+0x1f2>
 800720a:	1b80      	subs	r0, r0, r6
 800720c:	6060      	str	r0, [r4, #4]
 800720e:	6863      	ldr	r3, [r4, #4]
 8007210:	6123      	str	r3, [r4, #16]
 8007212:	2300      	movs	r3, #0
 8007214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007218:	e7a8      	b.n	800716c <_printf_i+0x150>
 800721a:	6923      	ldr	r3, [r4, #16]
 800721c:	4632      	mov	r2, r6
 800721e:	4649      	mov	r1, r9
 8007220:	4640      	mov	r0, r8
 8007222:	47d0      	blx	sl
 8007224:	3001      	adds	r0, #1
 8007226:	d0ab      	beq.n	8007180 <_printf_i+0x164>
 8007228:	6823      	ldr	r3, [r4, #0]
 800722a:	079b      	lsls	r3, r3, #30
 800722c:	d413      	bmi.n	8007256 <_printf_i+0x23a>
 800722e:	68e0      	ldr	r0, [r4, #12]
 8007230:	9b03      	ldr	r3, [sp, #12]
 8007232:	4298      	cmp	r0, r3
 8007234:	bfb8      	it	lt
 8007236:	4618      	movlt	r0, r3
 8007238:	e7a4      	b.n	8007184 <_printf_i+0x168>
 800723a:	2301      	movs	r3, #1
 800723c:	4632      	mov	r2, r6
 800723e:	4649      	mov	r1, r9
 8007240:	4640      	mov	r0, r8
 8007242:	47d0      	blx	sl
 8007244:	3001      	adds	r0, #1
 8007246:	d09b      	beq.n	8007180 <_printf_i+0x164>
 8007248:	3501      	adds	r5, #1
 800724a:	68e3      	ldr	r3, [r4, #12]
 800724c:	9903      	ldr	r1, [sp, #12]
 800724e:	1a5b      	subs	r3, r3, r1
 8007250:	42ab      	cmp	r3, r5
 8007252:	dcf2      	bgt.n	800723a <_printf_i+0x21e>
 8007254:	e7eb      	b.n	800722e <_printf_i+0x212>
 8007256:	2500      	movs	r5, #0
 8007258:	f104 0619 	add.w	r6, r4, #25
 800725c:	e7f5      	b.n	800724a <_printf_i+0x22e>
 800725e:	bf00      	nop
 8007260:	08007743 	.word	0x08007743
 8007264:	08007754 	.word	0x08007754

08007268 <memcpy>:
 8007268:	440a      	add	r2, r1
 800726a:	4291      	cmp	r1, r2
 800726c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007270:	d100      	bne.n	8007274 <memcpy+0xc>
 8007272:	4770      	bx	lr
 8007274:	b510      	push	{r4, lr}
 8007276:	f811 4b01 	ldrb.w	r4, [r1], #1
 800727a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800727e:	4291      	cmp	r1, r2
 8007280:	d1f9      	bne.n	8007276 <memcpy+0xe>
 8007282:	bd10      	pop	{r4, pc}

08007284 <memmove>:
 8007284:	4288      	cmp	r0, r1
 8007286:	b510      	push	{r4, lr}
 8007288:	eb01 0402 	add.w	r4, r1, r2
 800728c:	d902      	bls.n	8007294 <memmove+0x10>
 800728e:	4284      	cmp	r4, r0
 8007290:	4623      	mov	r3, r4
 8007292:	d807      	bhi.n	80072a4 <memmove+0x20>
 8007294:	1e43      	subs	r3, r0, #1
 8007296:	42a1      	cmp	r1, r4
 8007298:	d008      	beq.n	80072ac <memmove+0x28>
 800729a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800729e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072a2:	e7f8      	b.n	8007296 <memmove+0x12>
 80072a4:	4402      	add	r2, r0
 80072a6:	4601      	mov	r1, r0
 80072a8:	428a      	cmp	r2, r1
 80072aa:	d100      	bne.n	80072ae <memmove+0x2a>
 80072ac:	bd10      	pop	{r4, pc}
 80072ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80072b6:	e7f7      	b.n	80072a8 <memmove+0x24>

080072b8 <_free_r>:
 80072b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072ba:	2900      	cmp	r1, #0
 80072bc:	d048      	beq.n	8007350 <_free_r+0x98>
 80072be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072c2:	9001      	str	r0, [sp, #4]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f1a1 0404 	sub.w	r4, r1, #4
 80072ca:	bfb8      	it	lt
 80072cc:	18e4      	addlt	r4, r4, r3
 80072ce:	f000 f8d3 	bl	8007478 <__malloc_lock>
 80072d2:	4a20      	ldr	r2, [pc, #128]	; (8007354 <_free_r+0x9c>)
 80072d4:	9801      	ldr	r0, [sp, #4]
 80072d6:	6813      	ldr	r3, [r2, #0]
 80072d8:	4615      	mov	r5, r2
 80072da:	b933      	cbnz	r3, 80072ea <_free_r+0x32>
 80072dc:	6063      	str	r3, [r4, #4]
 80072de:	6014      	str	r4, [r2, #0]
 80072e0:	b003      	add	sp, #12
 80072e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072e6:	f000 b8cd 	b.w	8007484 <__malloc_unlock>
 80072ea:	42a3      	cmp	r3, r4
 80072ec:	d90b      	bls.n	8007306 <_free_r+0x4e>
 80072ee:	6821      	ldr	r1, [r4, #0]
 80072f0:	1862      	adds	r2, r4, r1
 80072f2:	4293      	cmp	r3, r2
 80072f4:	bf04      	itt	eq
 80072f6:	681a      	ldreq	r2, [r3, #0]
 80072f8:	685b      	ldreq	r3, [r3, #4]
 80072fa:	6063      	str	r3, [r4, #4]
 80072fc:	bf04      	itt	eq
 80072fe:	1852      	addeq	r2, r2, r1
 8007300:	6022      	streq	r2, [r4, #0]
 8007302:	602c      	str	r4, [r5, #0]
 8007304:	e7ec      	b.n	80072e0 <_free_r+0x28>
 8007306:	461a      	mov	r2, r3
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	b10b      	cbz	r3, 8007310 <_free_r+0x58>
 800730c:	42a3      	cmp	r3, r4
 800730e:	d9fa      	bls.n	8007306 <_free_r+0x4e>
 8007310:	6811      	ldr	r1, [r2, #0]
 8007312:	1855      	adds	r5, r2, r1
 8007314:	42a5      	cmp	r5, r4
 8007316:	d10b      	bne.n	8007330 <_free_r+0x78>
 8007318:	6824      	ldr	r4, [r4, #0]
 800731a:	4421      	add	r1, r4
 800731c:	1854      	adds	r4, r2, r1
 800731e:	42a3      	cmp	r3, r4
 8007320:	6011      	str	r1, [r2, #0]
 8007322:	d1dd      	bne.n	80072e0 <_free_r+0x28>
 8007324:	681c      	ldr	r4, [r3, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	6053      	str	r3, [r2, #4]
 800732a:	4421      	add	r1, r4
 800732c:	6011      	str	r1, [r2, #0]
 800732e:	e7d7      	b.n	80072e0 <_free_r+0x28>
 8007330:	d902      	bls.n	8007338 <_free_r+0x80>
 8007332:	230c      	movs	r3, #12
 8007334:	6003      	str	r3, [r0, #0]
 8007336:	e7d3      	b.n	80072e0 <_free_r+0x28>
 8007338:	6825      	ldr	r5, [r4, #0]
 800733a:	1961      	adds	r1, r4, r5
 800733c:	428b      	cmp	r3, r1
 800733e:	bf04      	itt	eq
 8007340:	6819      	ldreq	r1, [r3, #0]
 8007342:	685b      	ldreq	r3, [r3, #4]
 8007344:	6063      	str	r3, [r4, #4]
 8007346:	bf04      	itt	eq
 8007348:	1949      	addeq	r1, r1, r5
 800734a:	6021      	streq	r1, [r4, #0]
 800734c:	6054      	str	r4, [r2, #4]
 800734e:	e7c7      	b.n	80072e0 <_free_r+0x28>
 8007350:	b003      	add	sp, #12
 8007352:	bd30      	pop	{r4, r5, pc}
 8007354:	200007a4 	.word	0x200007a4

08007358 <_malloc_r>:
 8007358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735a:	1ccd      	adds	r5, r1, #3
 800735c:	f025 0503 	bic.w	r5, r5, #3
 8007360:	3508      	adds	r5, #8
 8007362:	2d0c      	cmp	r5, #12
 8007364:	bf38      	it	cc
 8007366:	250c      	movcc	r5, #12
 8007368:	2d00      	cmp	r5, #0
 800736a:	4606      	mov	r6, r0
 800736c:	db01      	blt.n	8007372 <_malloc_r+0x1a>
 800736e:	42a9      	cmp	r1, r5
 8007370:	d903      	bls.n	800737a <_malloc_r+0x22>
 8007372:	230c      	movs	r3, #12
 8007374:	6033      	str	r3, [r6, #0]
 8007376:	2000      	movs	r0, #0
 8007378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800737a:	f000 f87d 	bl	8007478 <__malloc_lock>
 800737e:	4921      	ldr	r1, [pc, #132]	; (8007404 <_malloc_r+0xac>)
 8007380:	680a      	ldr	r2, [r1, #0]
 8007382:	4614      	mov	r4, r2
 8007384:	b99c      	cbnz	r4, 80073ae <_malloc_r+0x56>
 8007386:	4f20      	ldr	r7, [pc, #128]	; (8007408 <_malloc_r+0xb0>)
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	b923      	cbnz	r3, 8007396 <_malloc_r+0x3e>
 800738c:	4621      	mov	r1, r4
 800738e:	4630      	mov	r0, r6
 8007390:	f000 f862 	bl	8007458 <_sbrk_r>
 8007394:	6038      	str	r0, [r7, #0]
 8007396:	4629      	mov	r1, r5
 8007398:	4630      	mov	r0, r6
 800739a:	f000 f85d 	bl	8007458 <_sbrk_r>
 800739e:	1c43      	adds	r3, r0, #1
 80073a0:	d123      	bne.n	80073ea <_malloc_r+0x92>
 80073a2:	230c      	movs	r3, #12
 80073a4:	6033      	str	r3, [r6, #0]
 80073a6:	4630      	mov	r0, r6
 80073a8:	f000 f86c 	bl	8007484 <__malloc_unlock>
 80073ac:	e7e3      	b.n	8007376 <_malloc_r+0x1e>
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	1b5b      	subs	r3, r3, r5
 80073b2:	d417      	bmi.n	80073e4 <_malloc_r+0x8c>
 80073b4:	2b0b      	cmp	r3, #11
 80073b6:	d903      	bls.n	80073c0 <_malloc_r+0x68>
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	441c      	add	r4, r3
 80073bc:	6025      	str	r5, [r4, #0]
 80073be:	e004      	b.n	80073ca <_malloc_r+0x72>
 80073c0:	6863      	ldr	r3, [r4, #4]
 80073c2:	42a2      	cmp	r2, r4
 80073c4:	bf0c      	ite	eq
 80073c6:	600b      	streq	r3, [r1, #0]
 80073c8:	6053      	strne	r3, [r2, #4]
 80073ca:	4630      	mov	r0, r6
 80073cc:	f000 f85a 	bl	8007484 <__malloc_unlock>
 80073d0:	f104 000b 	add.w	r0, r4, #11
 80073d4:	1d23      	adds	r3, r4, #4
 80073d6:	f020 0007 	bic.w	r0, r0, #7
 80073da:	1ac2      	subs	r2, r0, r3
 80073dc:	d0cc      	beq.n	8007378 <_malloc_r+0x20>
 80073de:	1a1b      	subs	r3, r3, r0
 80073e0:	50a3      	str	r3, [r4, r2]
 80073e2:	e7c9      	b.n	8007378 <_malloc_r+0x20>
 80073e4:	4622      	mov	r2, r4
 80073e6:	6864      	ldr	r4, [r4, #4]
 80073e8:	e7cc      	b.n	8007384 <_malloc_r+0x2c>
 80073ea:	1cc4      	adds	r4, r0, #3
 80073ec:	f024 0403 	bic.w	r4, r4, #3
 80073f0:	42a0      	cmp	r0, r4
 80073f2:	d0e3      	beq.n	80073bc <_malloc_r+0x64>
 80073f4:	1a21      	subs	r1, r4, r0
 80073f6:	4630      	mov	r0, r6
 80073f8:	f000 f82e 	bl	8007458 <_sbrk_r>
 80073fc:	3001      	adds	r0, #1
 80073fe:	d1dd      	bne.n	80073bc <_malloc_r+0x64>
 8007400:	e7cf      	b.n	80073a2 <_malloc_r+0x4a>
 8007402:	bf00      	nop
 8007404:	200007a4 	.word	0x200007a4
 8007408:	200007a8 	.word	0x200007a8

0800740c <_realloc_r>:
 800740c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740e:	4607      	mov	r7, r0
 8007410:	4614      	mov	r4, r2
 8007412:	460e      	mov	r6, r1
 8007414:	b921      	cbnz	r1, 8007420 <_realloc_r+0x14>
 8007416:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800741a:	4611      	mov	r1, r2
 800741c:	f7ff bf9c 	b.w	8007358 <_malloc_r>
 8007420:	b922      	cbnz	r2, 800742c <_realloc_r+0x20>
 8007422:	f7ff ff49 	bl	80072b8 <_free_r>
 8007426:	4625      	mov	r5, r4
 8007428:	4628      	mov	r0, r5
 800742a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800742c:	f000 f830 	bl	8007490 <_malloc_usable_size_r>
 8007430:	42a0      	cmp	r0, r4
 8007432:	d20f      	bcs.n	8007454 <_realloc_r+0x48>
 8007434:	4621      	mov	r1, r4
 8007436:	4638      	mov	r0, r7
 8007438:	f7ff ff8e 	bl	8007358 <_malloc_r>
 800743c:	4605      	mov	r5, r0
 800743e:	2800      	cmp	r0, #0
 8007440:	d0f2      	beq.n	8007428 <_realloc_r+0x1c>
 8007442:	4631      	mov	r1, r6
 8007444:	4622      	mov	r2, r4
 8007446:	f7ff ff0f 	bl	8007268 <memcpy>
 800744a:	4631      	mov	r1, r6
 800744c:	4638      	mov	r0, r7
 800744e:	f7ff ff33 	bl	80072b8 <_free_r>
 8007452:	e7e9      	b.n	8007428 <_realloc_r+0x1c>
 8007454:	4635      	mov	r5, r6
 8007456:	e7e7      	b.n	8007428 <_realloc_r+0x1c>

08007458 <_sbrk_r>:
 8007458:	b538      	push	{r3, r4, r5, lr}
 800745a:	4d06      	ldr	r5, [pc, #24]	; (8007474 <_sbrk_r+0x1c>)
 800745c:	2300      	movs	r3, #0
 800745e:	4604      	mov	r4, r0
 8007460:	4608      	mov	r0, r1
 8007462:	602b      	str	r3, [r5, #0]
 8007464:	f7fb f9ec 	bl	8002840 <_sbrk>
 8007468:	1c43      	adds	r3, r0, #1
 800746a:	d102      	bne.n	8007472 <_sbrk_r+0x1a>
 800746c:	682b      	ldr	r3, [r5, #0]
 800746e:	b103      	cbz	r3, 8007472 <_sbrk_r+0x1a>
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	bd38      	pop	{r3, r4, r5, pc}
 8007474:	20000b0c 	.word	0x20000b0c

08007478 <__malloc_lock>:
 8007478:	4801      	ldr	r0, [pc, #4]	; (8007480 <__malloc_lock+0x8>)
 800747a:	f000 b811 	b.w	80074a0 <__retarget_lock_acquire_recursive>
 800747e:	bf00      	nop
 8007480:	20000b14 	.word	0x20000b14

08007484 <__malloc_unlock>:
 8007484:	4801      	ldr	r0, [pc, #4]	; (800748c <__malloc_unlock+0x8>)
 8007486:	f000 b80c 	b.w	80074a2 <__retarget_lock_release_recursive>
 800748a:	bf00      	nop
 800748c:	20000b14 	.word	0x20000b14

08007490 <_malloc_usable_size_r>:
 8007490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007494:	1f18      	subs	r0, r3, #4
 8007496:	2b00      	cmp	r3, #0
 8007498:	bfbc      	itt	lt
 800749a:	580b      	ldrlt	r3, [r1, r0]
 800749c:	18c0      	addlt	r0, r0, r3
 800749e:	4770      	bx	lr

080074a0 <__retarget_lock_acquire_recursive>:
 80074a0:	4770      	bx	lr

080074a2 <__retarget_lock_release_recursive>:
 80074a2:	4770      	bx	lr

080074a4 <_init>:
 80074a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a6:	bf00      	nop
 80074a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074aa:	bc08      	pop	{r3}
 80074ac:	469e      	mov	lr, r3
 80074ae:	4770      	bx	lr

080074b0 <_fini>:
 80074b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b2:	bf00      	nop
 80074b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074b6:	bc08      	pop	{r3}
 80074b8:	469e      	mov	lr, r3
 80074ba:	4770      	bx	lr
