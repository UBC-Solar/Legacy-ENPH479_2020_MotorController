
solar_lv_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083a0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08008570  08008570  00018570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008858  08008858  00020770  2**0
                  CONTENTS
  4 .ARM          00000008  08008858  08008858  00018858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008860  08008860  00020770  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008860  08008860  00018860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008864  08008864  00018864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000770  20000000  08008868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  20000770  08008fd8  00020770  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b24  08008fd8  00020b24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020770  2**0
                  CONTENTS, READONLY
 12 .debug_line   00032015  00000000  00000000  000207a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00055a4f  00000000  00000000  000527b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000788e  00000000  00000000  000a8204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016f8  00000000  00000000  000afa98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f2b0d  00000000  00000000  000b1190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000032c8  00000000  00000000  001a3ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    000185cc  00000000  00000000  001a6f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002c967  00000000  00000000  001bf534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000d2  00000000  00000000  001ebe9b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004738  00000000  00000000  001ebf70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000770 	.word	0x20000770
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008558 	.word	0x08008558

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000774 	.word	0x20000774
 800020c:	08008558 	.word	0x08008558

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96e 	b.w	8000ecc <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468c      	mov	ip, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f040 8083 	bne.w	8000d1e <__udivmoddi4+0x116>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d947      	bls.n	8000cae <__udivmoddi4+0xa6>
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	b142      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	f1c2 0020 	rsb	r0, r2, #32
 8000c28:	fa24 f000 	lsr.w	r0, r4, r0
 8000c2c:	4091      	lsls	r1, r2
 8000c2e:	4097      	lsls	r7, r2
 8000c30:	ea40 0c01 	orr.w	ip, r0, r1
 8000c34:	4094      	lsls	r4, r2
 8000c36:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c40:	fa1f fe87 	uxth.w	lr, r7
 8000c44:	fb08 c116 	mls	r1, r8, r6, ip
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x60>
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5a:	f080 8119 	bcs.w	8000e90 <__udivmoddi4+0x288>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 8116 	bls.w	8000e90 <__udivmoddi4+0x288>
 8000c64:	3e02      	subs	r6, #2
 8000c66:	443b      	add	r3, r7
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c70:	fb08 3310 	mls	r3, r8, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d909      	bls.n	8000c94 <__udivmoddi4+0x8c>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c86:	f080 8105 	bcs.w	8000e94 <__udivmoddi4+0x28c>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f240 8102 	bls.w	8000e94 <__udivmoddi4+0x28c>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c98:	eba4 040e 	sub.w	r4, r4, lr
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	b11d      	cbz	r5, 8000ca8 <__udivmoddi4+0xa0>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	b902      	cbnz	r2, 8000cb2 <__udivmoddi4+0xaa>
 8000cb0:	deff      	udf	#255	; 0xff
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d150      	bne.n	8000d5c <__udivmoddi4+0x154>
 8000cba:	1bcb      	subs	r3, r1, r7
 8000cbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc0:	fa1f f887 	uxth.w	r8, r7
 8000cc4:	2601      	movs	r6, #1
 8000cc6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cca:	0c21      	lsrs	r1, r4, #16
 8000ccc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0xe4>
 8000cdc:	1879      	adds	r1, r7, r1
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0xe2>
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	f200 80e9 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1ac9      	subs	r1, r1, r3
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cf8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x10c>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x10a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80d9 	bhi.w	8000ec4 <__udivmoddi4+0x2bc>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e7bf      	b.n	8000c9e <__udivmoddi4+0x96>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x12e>
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	f000 80b1 	beq.w	8000e8a <__udivmoddi4+0x282>
 8000d28:	2600      	movs	r6, #0
 8000d2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2e:	4630      	mov	r0, r6
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f683 	clz	r6, r3
 8000d3a:	2e00      	cmp	r6, #0
 8000d3c:	d14a      	bne.n	8000dd4 <__udivmoddi4+0x1cc>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0x140>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80b8 	bhi.w	8000eb8 <__udivmoddi4+0x2b0>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	468c      	mov	ip, r1
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	d0a8      	beq.n	8000ca8 <__udivmoddi4+0xa0>
 8000d56:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d5a:	e7a5      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000d5c:	f1c2 0320 	rsb	r3, r2, #32
 8000d60:	fa20 f603 	lsr.w	r6, r0, r3
 8000d64:	4097      	lsls	r7, r2
 8000d66:	fa01 f002 	lsl.w	r0, r1, r2
 8000d6a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6e:	40d9      	lsrs	r1, r3
 8000d70:	4330      	orrs	r0, r6
 8000d72:	0c03      	lsrs	r3, r0, #16
 8000d74:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d78:	fa1f f887 	uxth.w	r8, r7
 8000d7c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb06 f108 	mul.w	r1, r6, r8
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x19c>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d96:	f080 808d 	bcs.w	8000eb4 <__udivmoddi4+0x2ac>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 808a 	bls.w	8000eb4 <__udivmoddi4+0x2ac>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b281      	uxth	r1, r0
 8000da8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db4:	fb00 f308 	mul.w	r3, r0, r8
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x1c4>
 8000dbc:	1879      	adds	r1, r7, r1
 8000dbe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dc2:	d273      	bcs.n	8000eac <__udivmoddi4+0x2a4>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d971      	bls.n	8000eac <__udivmoddi4+0x2a4>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	4439      	add	r1, r7
 8000dcc:	1acb      	subs	r3, r1, r3
 8000dce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dd2:	e778      	b.n	8000cc6 <__udivmoddi4+0xbe>
 8000dd4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dd8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ddc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000de0:	431c      	orrs	r4, r3
 8000de2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000de6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dee:	fa21 f10c 	lsr.w	r1, r1, ip
 8000df2:	431f      	orrs	r7, r3
 8000df4:	0c3b      	lsrs	r3, r7, #16
 8000df6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dfa:	fa1f f884 	uxth.w	r8, r4
 8000dfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e06:	fb09 fa08 	mul.w	sl, r9, r8
 8000e0a:	458a      	cmp	sl, r1
 8000e0c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e10:	fa00 f306 	lsl.w	r3, r0, r6
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x220>
 8000e16:	1861      	adds	r1, r4, r1
 8000e18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e1c:	d248      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e1e:	458a      	cmp	sl, r1
 8000e20:	d946      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4421      	add	r1, r4
 8000e28:	eba1 010a 	sub.w	r1, r1, sl
 8000e2c:	b2bf      	uxth	r7, r7
 8000e2e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e32:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e36:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e3a:	fb00 f808 	mul.w	r8, r0, r8
 8000e3e:	45b8      	cmp	r8, r7
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x24a>
 8000e42:	19e7      	adds	r7, r4, r7
 8000e44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e48:	d22e      	bcs.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4a:	45b8      	cmp	r8, r7
 8000e4c:	d92c      	bls.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4427      	add	r7, r4
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	eba7 0708 	sub.w	r7, r7, r8
 8000e5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5e:	454f      	cmp	r7, r9
 8000e60:	46c6      	mov	lr, r8
 8000e62:	4649      	mov	r1, r9
 8000e64:	d31a      	bcc.n	8000e9c <__udivmoddi4+0x294>
 8000e66:	d017      	beq.n	8000e98 <__udivmoddi4+0x290>
 8000e68:	b15d      	cbz	r5, 8000e82 <__udivmoddi4+0x27a>
 8000e6a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e6e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e72:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e76:	40f2      	lsrs	r2, r6
 8000e78:	ea4c 0202 	orr.w	r2, ip, r2
 8000e7c:	40f7      	lsrs	r7, r6
 8000e7e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e82:	2600      	movs	r6, #0
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e70b      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0x60>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6fd      	b.n	8000c94 <__udivmoddi4+0x8c>
 8000e98:	4543      	cmp	r3, r8
 8000e9a:	d2e5      	bcs.n	8000e68 <__udivmoddi4+0x260>
 8000e9c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7df      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e7d2      	b.n	8000e52 <__udivmoddi4+0x24a>
 8000eac:	4660      	mov	r0, ip
 8000eae:	e78d      	b.n	8000dcc <__udivmoddi4+0x1c4>
 8000eb0:	4681      	mov	r9, r0
 8000eb2:	e7b9      	b.n	8000e28 <__udivmoddi4+0x220>
 8000eb4:	4666      	mov	r6, ip
 8000eb6:	e775      	b.n	8000da4 <__udivmoddi4+0x19c>
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e74a      	b.n	8000d52 <__udivmoddi4+0x14a>
 8000ebc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec0:	4439      	add	r1, r7
 8000ec2:	e713      	b.n	8000cec <__udivmoddi4+0xe4>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	443c      	add	r4, r7
 8000ec8:	e724      	b.n	8000d14 <__udivmoddi4+0x10c>
 8000eca:	bf00      	nop

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ed4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ed6:	e003      	b.n	8000ee0 <LoopCopyDataInit>

08000ed8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000eda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000edc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ede:	3104      	adds	r1, #4

08000ee0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ee0:	480b      	ldr	r0, [pc, #44]	; (8000f10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ee4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ee6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ee8:	d3f6      	bcc.n	8000ed8 <CopyDataInit>
  ldr  r2, =_sbss
 8000eea:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000eec:	e002      	b.n	8000ef4 <LoopFillZerobss>

08000eee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000eee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ef0:	f842 3b04 	str.w	r3, [r2], #4

08000ef4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ef6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ef8:	d3f9      	bcc.n	8000eee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000efa:	f002 ffe7 	bl	8003ecc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000efe:	f006 fcc3 	bl	8007888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f02:	f000 f899 	bl	8001038 <main>
  bx  lr    
 8000f06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f08:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f0c:	08008868 	.word	0x08008868
  ldr  r0, =_sdata
 8000f10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f14:	20000770 	.word	0x20000770
  ldr  r2, =_sbss
 8000f18:	20000770 	.word	0x20000770
  ldr  r3, = _ebss
 8000f1c:	20000b24 	.word	0x20000b24

08000f20 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f20:	e7fe      	b.n	8000f20 <BusFault_Handler>
	...

08000f24 <DAC_Init>:
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  SET_BIT(DACx->CR,
 8000f24:	4a02      	ldr	r2, [pc, #8]	; (8000f30 <DAC_Init+0xc>)
 8000f26:	6813      	ldr	r3, [r2, #0]
 8000f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f2c:	6013      	str	r3, [r2, #0]
  */
__weak void DAC_Init(UI_Handle_t *pHandle)
{
  /* Enable DAC Channel2 */
  LL_DAC_Enable(DAC1, LL_DAC_CHANNEL_2);
}
 8000f2e:	4770      	bx	lr
 8000f30:	40007400 	.word	0x40007400

08000f34 <DAC_Exec>:
  *         variables will be provided in the related output channels. This is
  *         the implementation of the virtual function.
  * @param  pHandle pointer on related component instance.
  */
__weak void DAC_Exec(UI_Handle_t *pHandle)
{
 8000f34:	b538      	push	{r3, r4, r5, lr}
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  MC_Protocol_REG_t bCh_var;

  bCh_var = pDacHandle->bChannel_variable[DAC_CH1];
  LL_DAC_ConvertData12LeftAligned(DAC1, LL_DAC_CHANNEL_2,
                                  DACOFF + ((int16_t)UI_GetReg(pHandle,bCh_var,MC_NULL)));
 8000f36:	2200      	movs	r2, #0
 8000f38:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
 8000f3c:	f002 fc9a 	bl	8003874 <UI_GetReg>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f40:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 8000f44:	fa93 f3a3 	rbit	r3, r3
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 8000f48:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8000f4c:	fab3 f383 	clz	r3, r3
 8000f50:	40d9      	lsrs	r1, r3
 8000f52:	4d09      	ldr	r5, [pc, #36]	; (8000f78 <DAC_Exec+0x44>)
  SET_BIT(DACx->SWTRIGR,
 8000f54:	4c09      	ldr	r4, [pc, #36]	; (8000f7c <DAC_Exec+0x48>)
  
  MODIFY_REG(*preg,
 8000f56:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 8000f5a:	b200      	sxth	r0, r0
 8000f5c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000f60:	f500 4300 	add.w	r3, r0, #32768	; 0x8000
 8000f64:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
  SET_BIT(DACx->SWTRIGR,
 8000f6e:	6863      	ldr	r3, [r4, #4]
 8000f70:	f043 0302 	orr.w	r3, r3, #2
 8000f74:	6063      	str	r3, [r4, #4]
  LL_DAC_TrigSWConversion(DAC1, LL_DAC_CHANNEL_2);
}
 8000f76:	bd38      	pop	{r3, r4, r5, pc}
 8000f78:	40007408 	.word	0x40007408
 8000f7c:	40007400 	.word	0x40007400

08000f80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f80:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f82:	2300      	movs	r3, #0
{
 8000f84:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f86:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8000f8a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000f92:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f96:	4925      	ldr	r1, [pc, #148]	; (800102c <SystemClock_Config+0xac>)
 8000f98:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9a:	9302      	str	r3, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9c:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f9e:	4a24      	ldr	r2, [pc, #144]	; (8001030 <SystemClock_Config+0xb0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa0:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000fa4:	6408      	str	r0, [r1, #64]	; 0x40
 8000fa6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000fa8:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8000fac:	9100      	str	r1, [sp, #0]
 8000fae:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb0:	9301      	str	r3, [sp, #4]
 8000fb2:	6813      	ldr	r3, [r2, #0]
 8000fb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	6813      	ldr	r3, [r2, #0]
 8000fbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fc0:	9301      	str	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc2:	2401      	movs	r4, #1
 8000fc4:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc8:	2202      	movs	r2, #2
 8000fca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fce:	e9cd 4508 	strd	r4, r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd6:	9801      	ldr	r0, [sp, #4]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fd8:	2102      	movs	r1, #2
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fda:	2404      	movs	r4, #4
 8000fdc:	25b4      	movs	r5, #180	; 0xb4
 8000fde:	2202      	movs	r2, #2
 8000fe0:	2302      	movs	r3, #2
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe2:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe4:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 8000fe8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fec:	9114      	str	r1, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fee:	f003 fd57 	bl	8004aa0 <HAL_RCC_OscConfig>
 8000ff2:	b108      	cbz	r0, 8000ff8 <SystemClock_Config+0x78>
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <SystemClock_Config+0x76>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ff8:	f003 fbf8 	bl	80047ec <HAL_PWREx_EnableOverDrive>
 8000ffc:	b108      	cbz	r0, 8001002 <SystemClock_Config+0x82>
 8000ffe:	b672      	cpsid	i
  while (1)
 8001000:	e7fe      	b.n	8001000 <SystemClock_Config+0x80>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001002:	260f      	movs	r6, #15
 8001004:	2702      	movs	r7, #2
 8001006:	2400      	movs	r4, #0
 8001008:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800100c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001010:	a802      	add	r0, sp, #8
 8001012:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001014:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8001018:	e9cd 4504 	strd	r4, r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800101c:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800101e:	f003 fc23 	bl	8004868 <HAL_RCC_ClockConfig>
 8001022:	b108      	cbz	r0, 8001028 <SystemClock_Config+0xa8>
 8001024:	b672      	cpsid	i
  while (1)
 8001026:	e7fe      	b.n	8001026 <SystemClock_Config+0xa6>
}
 8001028:	b017      	add	sp, #92	; 0x5c
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	40023800 	.word	0x40023800
 8001030:	40007000 	.word	0x40007000
 8001034:	00000000 	.word	0x00000000

08001038 <main>:
{
 8001038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800103c:	ed2d 8b04 	vpush	{d8-d9}
 8001040:	b0a7      	sub	sp, #156	; 0x9c
	PotentiometerConv.samplingTime = ADC_SAMPLETIME_3CYCLES; /* to be modify to match your sampling time */
 8001042:	2700      	movs	r7, #0
	PotentiometerConv.regADC = ADC1 ; /* to be modify to match your ADC */
 8001044:	4ead      	ldr	r6, [pc, #692]	; (80012fc <main+0x2c4>)
 8001046:	960a      	str	r6, [sp, #40]	; 0x28
	PotentiometerConv.channel = ADC_CHANNEL_8;/* to be modify to match your ADC channel */
 8001048:	2308      	movs	r3, #8
	PotentiometerHandle = RCM_RegisterRegConv (&PotentiometerConv);
 800104a:	a80a      	add	r0, sp, #40	; 0x28
	PotentiometerConv.channel = ADC_CHANNEL_8;/* to be modify to match your ADC channel */
 800104c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	PotentiometerConv.samplingTime = ADC_SAMPLETIME_3CYCLES; /* to be modify to match your sampling time */
 8001050:	970c      	str	r7, [sp, #48]	; 0x30
	PotentiometerHandle = RCM_RegisterRegConv (&PotentiometerConv);
 8001052:	f001 fce3 	bl	8002a1c <RCM_RegisterRegConv>
	ThermistorConv.channel = ADC_CHANNEL_12;
 8001056:	230c      	movs	r3, #12
	PotentiometerHandle = RCM_RegisterRegConv (&PotentiometerConv);
 8001058:	4602      	mov	r2, r0
	ThermistorHandle = RCM_RegisterRegConv (&ThermistorConv);
 800105a:	a80d      	add	r0, sp, #52	; 0x34
	ThermistorConv.channel = ADC_CHANNEL_12;
 800105c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	PotentiometerHandle = RCM_RegisterRegConv (&PotentiometerConv);
 8001060:	ee08 2a10 	vmov	s16, r2
	ThermistorConv.regADC = ADC1;
 8001064:	960d      	str	r6, [sp, #52]	; 0x34
	ThermistorConv.samplingTime = ADC_SAMPLETIME_3CYCLES;
 8001066:	970f      	str	r7, [sp, #60]	; 0x3c
	ThermistorHandle = RCM_RegisterRegConv (&ThermistorConv);
 8001068:	f001 fcd8 	bl	8002a1c <RCM_RegisterRegConv>
	currRef.q = 0;
 800106c:	9703      	str	r7, [sp, #12]
	ThermistorHandle = RCM_RegisterRegConv (&ThermistorConv);
 800106e:	ee08 0a90 	vmov	s17, r0
  HAL_Init();
 8001072:	f002 ff5d 	bl	8003f30 <HAL_Init>
  SystemClock_Config();
 8001076:	f7ff ff83 	bl	8000f80 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800107a:	4aa1      	ldr	r2, [pc, #644]	; (8001300 <main+0x2c8>)
 800107c:	9704      	str	r7, [sp, #16]
 800107e:	6b11      	ldr	r1, [r2, #48]	; 0x30
  hadc1.Instance = ADC1;
 8001080:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800131c <main+0x2e4>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001084:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001088:	6311      	str	r1, [r2, #48]	; 0x30
 800108a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800108c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8001090:	9104      	str	r1, [sp, #16]
 8001092:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001094:	9705      	str	r7, [sp, #20]
 8001096:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001098:	f041 0104 	orr.w	r1, r1, #4
 800109c:	6311      	str	r1, [r2, #48]	; 0x30
 800109e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80010a0:	f001 0104 	and.w	r1, r1, #4
 80010a4:	9105      	str	r1, [sp, #20]
 80010a6:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	9706      	str	r7, [sp, #24]
 80010aa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80010ac:	f041 0101 	orr.w	r1, r1, #1
 80010b0:	6311      	str	r1, [r2, #48]	; 0x30
 80010b2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80010b4:	f001 0101 	and.w	r1, r1, #1
 80010b8:	9106      	str	r1, [sp, #24]
 80010ba:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010bc:	9707      	str	r7, [sp, #28]
 80010be:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80010c0:	f041 0102 	orr.w	r1, r1, #2
 80010c4:	6311      	str	r1, [r2, #48]	; 0x30
 80010c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80010c8:	2520      	movs	r5, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	f002 0202 	and.w	r2, r2, #2
 80010ce:	9207      	str	r2, [sp, #28]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80010d0:	4639      	mov	r1, r7
 80010d2:	a81e      	add	r0, sp, #120	; 0x78
 80010d4:	462a      	mov	r2, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	9c07      	ldr	r4, [sp, #28]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010d8:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80010dc:	f006 fbf8 	bl	80078d0 <memset>
  hadc1.Init.ScanConvMode = ENABLE;
 80010e0:	2401      	movs	r4, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010e2:	4b88      	ldr	r3, [pc, #544]	; (8001304 <main+0x2cc>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80010e4:	9716      	str	r7, [sp, #88]	; 0x58
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80010e6:	f44f 6800 	mov.w	r8, #2048	; 0x800
  hadc1.Init.NbrOfConversion = 2;
 80010ea:	f04f 0b02 	mov.w	fp, #2
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ee:	4648      	mov	r0, r9
  ADC_ChannelConfTypeDef sConfig = {0};
 80010f0:	e9cd 7717 	strd	r7, r7, [sp, #92]	; 0x5c
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f4:	e9c9 4404 	strd	r4, r4, [r9, #16]
  hadc1.Instance = ADC1;
 80010f8:	f8c9 6000 	str.w	r6, [r9]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010fc:	f8c9 7008 	str.w	r7, [r9, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001100:	f889 7018 	strb.w	r7, [r9, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001104:	f889 7020 	strb.w	r7, [r9, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001108:	f8c9 702c 	str.w	r7, [r9, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800110c:	f889 7030 	strb.w	r7, [r9, #48]	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8001110:	9719      	str	r7, [sp, #100]	; 0x64
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001112:	f8c9 a004 	str.w	sl, [r9, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001116:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800111a:	f8c9 800c 	str.w	r8, [r9, #12]
  hadc1.Init.NbrOfConversion = 2;
 800111e:	f8c9 b01c 	str.w	fp, [r9, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001122:	f002 ff43 	bl	8003fac <HAL_ADC_Init>
 8001126:	b108      	cbz	r0, 800112c <main+0xf4>
 8001128:	b672      	cpsid	i
  while (1)
 800112a:	e7fe      	b.n	800112a <main+0xf2>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800112c:	4602      	mov	r2, r0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 800112e:	2301      	movs	r3, #1
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001130:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001134:	2201      	movs	r2, #1
 8001136:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800113a:	2600      	movs	r6, #0
 800113c:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001140:	2201      	movs	r2, #1
 8001142:	2300      	movs	r3, #0
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001144:	a91e      	add	r1, sp, #120	; 0x78
 8001146:	4648      	mov	r0, r9
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8001148:	e9cd 6724 	strd	r6, r7, [sp, #144]	; 0x90
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 800114c:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001150:	9422      	str	r4, [sp, #136]	; 0x88
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001152:	f003 f893 	bl	800427c <HAL_ADCEx_InjectedConfigChannel>
 8001156:	b108      	cbz	r0, 800115c <main+0x124>
 8001158:	b672      	cpsid	i
  while (1)
 800115a:	e7fe      	b.n	800115a <main+0x122>
  sConfig.Channel = ADC_CHANNEL_15;
 800115c:	220f      	movs	r2, #15
 800115e:	2301      	movs	r3, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001160:	9018      	str	r0, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001162:	a916      	add	r1, sp, #88	; 0x58
 8001164:	4648      	mov	r0, r9
  sConfig.Channel = ADC_CHANNEL_15;
 8001166:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116a:	f002 ffcd 	bl	8004108 <HAL_ADC_ConfigChannel>
 800116e:	b108      	cbz	r0, 8001174 <main+0x13c>
 8001170:	b672      	cpsid	i
  while (1)
 8001172:	e7fe      	b.n	8001172 <main+0x13a>
  sConfig.Channel = ADC_CHANNEL_14;
 8001174:	220e      	movs	r2, #14
 8001176:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001178:	a916      	add	r1, sp, #88	; 0x58
 800117a:	4648      	mov	r0, r9
  sConfig.Channel = ADC_CHANNEL_14;
 800117c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001180:	f8cd b060 	str.w	fp, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001184:	f002 ffc0 	bl	8004108 <HAL_ADC_ConfigChannel>
 8001188:	4601      	mov	r1, r0
 800118a:	b108      	cbz	r0, 8001190 <main+0x158>
 800118c:	b672      	cpsid	i
  while (1)
 800118e:	e7fe      	b.n	800118e <main+0x156>
  hadc2.Instance = ADC2;
 8001190:	f8df b18c 	ldr.w	fp, [pc, #396]	; 8001320 <main+0x2e8>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001194:	9001      	str	r0, [sp, #4]
 8001196:	462a      	mov	r2, r5
 8001198:	a81e      	add	r0, sp, #120	; 0x78
 800119a:	f006 fb99 	bl	80078d0 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 800119e:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 80011a0:	4b59      	ldr	r3, [pc, #356]	; (8001308 <main+0x2d0>)
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a2:	4a58      	ldr	r2, [pc, #352]	; (8001304 <main+0x2cc>)
  hadc2.Instance = ADC2;
 80011a4:	f8cb 3000 	str.w	r3, [fp]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011a8:	4658      	mov	r0, fp
  ADC_ChannelConfTypeDef sConfig = {0};
 80011aa:	e9cd 1117 	strd	r1, r1, [sp, #92]	; 0x5c
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011ae:	e9cb a101 	strd	sl, r1, [fp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011b2:	9116      	str	r1, [sp, #88]	; 0x58
 80011b4:	9119      	str	r1, [sp, #100]	; 0x64
  hadc2.Init.ScanConvMode = ENABLE;
 80011b6:	f8cb 4010 	str.w	r4, [fp, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011ba:	f88b 1018 	strb.w	r1, [fp, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011be:	f88b 1020 	strb.w	r1, [fp, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011c2:	f8cb 102c 	str.w	r1, [fp, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011c6:	f8cb 2028 	str.w	r2, [fp, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80011ca:	f8cb 800c 	str.w	r8, [fp, #12]
  hadc2.Init.NbrOfConversion = 1;
 80011ce:	f8cb 401c 	str.w	r4, [fp, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011d2:	f88b 1030 	strb.w	r1, [fp, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d6:	f8cb 4014 	str.w	r4, [fp, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011da:	f002 fee7 	bl	8003fac <HAL_ADC_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	b108      	cbz	r0, 80011e6 <main+0x1ae>
 80011e2:	b672      	cpsid	i
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <main+0x1ac>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80011e6:	e9cd 6724 	strd	r6, r7, [sp, #144]	; 0x90
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 80011ea:	2601      	movs	r6, #1
 80011ec:	2700      	movs	r7, #0
 80011ee:	e9cd 6720 	strd	r6, r7, [sp, #128]	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80011f2:	a91e      	add	r1, sp, #120	; 0x78
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 80011f4:	2604      	movs	r6, #4
 80011f6:	2701      	movs	r7, #1
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80011f8:	4658      	mov	r0, fp
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 80011fa:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
  sConfigInjected.InjectedNbrOfConversion = 1;
 80011fe:	9422      	str	r4, [sp, #136]	; 0x88
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001200:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001204:	f003 f83a 	bl	800427c <HAL_ADCEx_InjectedConfigChannel>
 8001208:	b108      	cbz	r0, 800120e <main+0x1d6>
 800120a:	b672      	cpsid	i
  while (1)
 800120c:	e7fe      	b.n	800120c <main+0x1d4>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800120e:	4658      	mov	r0, fp
 8001210:	a916      	add	r1, sp, #88	; 0x58
  sConfig.Channel = ADC_CHANNEL_4;
 8001212:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001216:	9418      	str	r4, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001218:	f002 ff76 	bl	8004108 <HAL_ADC_ConfigChannel>
 800121c:	b108      	cbz	r0, 8001222 <main+0x1ea>
 800121e:	b672      	cpsid	i
  while (1)
 8001220:	e7fe      	b.n	8001220 <main+0x1e8>
  hdac.Instance = DAC;
 8001222:	4e3a      	ldr	r6, [pc, #232]	; (800130c <main+0x2d4>)
 8001224:	4b3a      	ldr	r3, [pc, #232]	; (8001310 <main+0x2d8>)
 8001226:	6033      	str	r3, [r6, #0]
  DAC_ChannelConfTypeDef sConfig = {0};
 8001228:	e9cd 001e 	strd	r0, r0, [sp, #120]	; 0x78
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800122c:	4630      	mov	r0, r6
 800122e:	f003 f98b 	bl	8004548 <HAL_DAC_Init>
 8001232:	b108      	cbz	r0, 8001238 <main+0x200>
 8001234:	b672      	cpsid	i
  while (1)
 8001236:	e7fe      	b.n	8001236 <main+0x1fe>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001238:	4630      	mov	r0, r6
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 800123a:	2702      	movs	r7, #2
 800123c:	263c      	movs	r6, #60	; 0x3c
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800123e:	2210      	movs	r2, #16
 8001240:	a91e      	add	r1, sp, #120	; 0x78
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001242:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001246:	f003 f995 	bl	8004574 <HAL_DAC_ConfigChannel>
 800124a:	4606      	mov	r6, r0
 800124c:	b108      	cbz	r0, 8001252 <main+0x21a>
 800124e:	b672      	cpsid	i
  while (1)
 8001250:	e7fe      	b.n	8001250 <main+0x218>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001252:	4601      	mov	r1, r0
 8001254:	462a      	mov	r2, r5
 8001256:	a81e      	add	r0, sp, #120	; 0x78
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001258:	e9cd 6616 	strd	r6, r6, [sp, #88]	; 0x58
 800125c:	e9cd 6618 	strd	r6, r6, [sp, #96]	; 0x60
 8001260:	e9cd 661a 	strd	r6, r6, [sp, #104]	; 0x68
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001264:	e9cd 6611 	strd	r6, r6, [sp, #68]	; 0x44
 8001268:	e9cd 6613 	strd	r6, r6, [sp, #76]	; 0x4c
 800126c:	9610      	str	r6, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126e:	9608      	str	r6, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001270:	961c      	str	r6, [sp, #112]	; 0x70
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001272:	9609      	str	r6, [sp, #36]	; 0x24
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001274:	f006 fb2c 	bl	80078d0 <memset>
  htim1.Instance = TIM1;
 8001278:	4826      	ldr	r0, [pc, #152]	; (8001314 <main+0x2dc>)
 800127a:	4927      	ldr	r1, [pc, #156]	; (8001318 <main+0x2e0>)
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 800127c:	6046      	str	r6, [r0, #4]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 800127e:	f241 1294 	movw	r2, #4500	; 0x1194
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001282:	f44f 7380 	mov.w	r3, #256	; 0x100
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001286:	e9c0 4605 	strd	r4, r6, [r0, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800128a:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800128e:	6085      	str	r5, [r0, #8]
  htim1.Instance = TIM1;
 8001290:	6001      	str	r1, [r0, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001292:	f003 fdd9 	bl	8004e48 <HAL_TIM_Base_Init>
 8001296:	b108      	cbz	r0, 800129c <main+0x264>
 8001298:	b672      	cpsid	i
  while (1)
 800129a:	e7fe      	b.n	800129a <main+0x262>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800129c:	481d      	ldr	r0, [pc, #116]	; (8001314 <main+0x2dc>)
 800129e:	f003 fe51 	bl	8004f44 <HAL_TIM_PWM_Init>
 80012a2:	b108      	cbz	r0, 80012a8 <main+0x270>
 80012a4:	b672      	cpsid	i
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <main+0x26e>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80012a8:	2206      	movs	r2, #6
 80012aa:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80012ac:	4819      	ldr	r0, [pc, #100]	; (8001314 <main+0x2dc>)
 80012ae:	a910      	add	r1, sp, #64	; 0x40
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80012b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80012b4:	f004 f872 	bl	800539c <HAL_TIM_SlaveConfigSynchro>
 80012b8:	b108      	cbz	r0, 80012be <main+0x286>
 80012ba:	b672      	cpsid	i
  while (1)
 80012bc:	e7fe      	b.n	80012bc <main+0x284>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012be:	2220      	movs	r2, #32
 80012c0:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012c2:	4814      	ldr	r0, [pc, #80]	; (8001314 <main+0x2dc>)
 80012c4:	a908      	add	r1, sp, #32
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ca:	f004 fa0d 	bl	80056e8 <HAL_TIMEx_MasterConfigSynchronization>
 80012ce:	b108      	cbz	r0, 80012d4 <main+0x29c>
 80012d0:	b672      	cpsid	i
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <main+0x29a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d4:	2460      	movs	r4, #96	; 0x60
 80012d6:	2500      	movs	r5, #0
 80012d8:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012dc:	4602      	mov	r2, r0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012de:	2400      	movs	r4, #0
 80012e0:	2500      	movs	r5, #0
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012e2:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e4:	a916      	add	r1, sp, #88	; 0x58
 80012e6:	480b      	ldr	r0, [pc, #44]	; (8001314 <main+0x2dc>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e8:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
 80012ec:	e9cd 451a 	strd	r4, r5, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f0:	f003 fea4 	bl	800503c <HAL_TIM_PWM_ConfigChannel>
 80012f4:	b1b0      	cbz	r0, 8001324 <main+0x2ec>
 80012f6:	b672      	cpsid	i
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <main+0x2c0>
 80012fa:	bf00      	nop
 80012fc:	40012000 	.word	0x40012000
 8001300:	40023800 	.word	0x40023800
 8001304:	0f000001 	.word	0x0f000001
 8001308:	40012100 	.word	0x40012100
 800130c:	20000844 	.word	0x20000844
 8001310:	40007400 	.word	0x40007400
 8001314:	20000858 	.word	0x20000858
 8001318:	40010000 	.word	0x40010000
 800131c:	200007fc 	.word	0x200007fc
 8001320:	200007b4 	.word	0x200007b4
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001324:	48b8      	ldr	r0, [pc, #736]	; (8001608 <main+0x5d0>)
 8001326:	2204      	movs	r2, #4
 8001328:	a916      	add	r1, sp, #88	; 0x58
 800132a:	f003 fe87 	bl	800503c <HAL_TIM_PWM_ConfigChannel>
 800132e:	b108      	cbz	r0, 8001334 <main+0x2fc>
 8001330:	b672      	cpsid	i
  while (1)
 8001332:	e7fe      	b.n	8001332 <main+0x2fa>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001334:	48b4      	ldr	r0, [pc, #720]	; (8001608 <main+0x5d0>)
 8001336:	2208      	movs	r2, #8
 8001338:	a916      	add	r1, sp, #88	; 0x58
 800133a:	f003 fe7f 	bl	800503c <HAL_TIM_PWM_ConfigChannel>
 800133e:	b108      	cbz	r0, 8001344 <main+0x30c>
 8001340:	b672      	cpsid	i
  while (1)
 8001342:	e7fe      	b.n	8001342 <main+0x30a>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001344:	2470      	movs	r4, #112	; 0x70
 8001346:	f241 1593 	movw	r5, #4499	; 0x1193
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800134a:	48af      	ldr	r0, [pc, #700]	; (8001608 <main+0x5d0>)
 800134c:	220c      	movs	r2, #12
 800134e:	a916      	add	r1, sp, #88	; 0x58
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001350:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001354:	f003 fe72 	bl	800503c <HAL_TIM_PWM_ConfigChannel>
 8001358:	b108      	cbz	r0, 800135e <main+0x326>
 800135a:	b672      	cpsid	i
  while (1)
 800135c:	e7fe      	b.n	800135c <main+0x324>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800135e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001366:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 800136a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800136e:	2348      	movs	r3, #72	; 0x48
 8001370:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001374:	9025      	str	r0, [sp, #148]	; 0x94
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001376:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800137a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800137e:	48a2      	ldr	r0, [pc, #648]	; (8001608 <main+0x5d0>)
 8001380:	a91e      	add	r1, sp, #120	; 0x78
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001382:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001386:	f004 f9f1 	bl	800576c <HAL_TIMEx_ConfigBreakDeadTime>
 800138a:	4604      	mov	r4, r0
 800138c:	b108      	cbz	r0, 8001392 <main+0x35a>
 800138e:	b672      	cpsid	i
  while (1)
 8001390:	e7fe      	b.n	8001390 <main+0x358>
  htim2.Instance = TIM2;
 8001392:	4d9e      	ldr	r5, [pc, #632]	; (800160c <main+0x5d4>)
  HAL_TIM_MspPostInit(&htim1);
 8001394:	489c      	ldr	r0, [pc, #624]	; (8001608 <main+0x5d0>)
 8001396:	f001 fdef 	bl	8002f78 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 800139a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 800139e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013a2:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013a4:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
 80013a8:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
  TIM_HallSensor_InitTypeDef sConfig = {0};
 80013ac:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 80013b0:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b4:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013bc:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013be:	61ac      	str	r4, [r5, #24]
  htim2.Instance = TIM2;
 80013c0:	602a      	str	r2, [r5, #0]
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 80013c2:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013c4:	f003 fd40 	bl	8004e48 <HAL_TIM_Base_Init>
 80013c8:	b108      	cbz	r0, 80013ce <main+0x396>
 80013ca:	b672      	cpsid	i
  while (1)
 80013cc:	e7fe      	b.n	80013cc <main+0x394>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013d2:	4628      	mov	r0, r5
 80013d4:	a91e      	add	r1, sp, #120	; 0x78
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d6:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013d8:	f003 ff3c 	bl	8005254 <HAL_TIM_ConfigClockSource>
 80013dc:	b108      	cbz	r0, 80013e2 <main+0x3aa>
 80013de:	b672      	cpsid	i
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <main+0x3a8>
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013e2:	2200      	movs	r2, #0
 80013e4:	2300      	movs	r3, #0
 80013e6:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 80013ea:	4888      	ldr	r0, [pc, #544]	; (800160c <main+0x5d4>)
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013ec:	220c      	movs	r2, #12
 80013ee:	2300      	movs	r3, #0
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 80013f0:	a916      	add	r1, sp, #88	; 0x58
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013f2:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 80013f6:	f004 f91d 	bl	8005634 <HAL_TIMEx_HallSensor_Init>
 80013fa:	b108      	cbz	r0, 8001400 <main+0x3c8>
 80013fc:	b672      	cpsid	i
  while (1)
 80013fe:	e7fe      	b.n	80013fe <main+0x3c6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001400:	2250      	movs	r2, #80	; 0x50
 8001402:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001404:	4881      	ldr	r0, [pc, #516]	; (800160c <main+0x5d4>)
 8001406:	a910      	add	r1, sp, #64	; 0x40
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001408:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800140c:	f004 f96c 	bl	80056e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001410:	b108      	cbz	r0, 8001416 <main+0x3de>
 8001412:	b672      	cpsid	i
  while (1)
 8001414:	e7fe      	b.n	8001414 <main+0x3dc>
  huart2.Instance = USART2;
 8001416:	4b7e      	ldr	r3, [pc, #504]	; (8001610 <main+0x5d8>)
 8001418:	4a7e      	ldr	r2, [pc, #504]	; (8001614 <main+0x5dc>)
  huart2.Init.Parity = UART_PARITY_NONE;
 800141a:	6118      	str	r0, [r3, #16]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800141c:	e9c3 0002 	strd	r0, r0, [r3, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001420:	e9c3 0006 	strd	r0, r0, [r3, #24]
  huart2.Init.BaudRate = 115200;
 8001424:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart2.Instance = USART2;
 8001428:	601a      	str	r2, [r3, #0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800142a:	4618      	mov	r0, r3
  huart2.Init.Mode = UART_MODE_TX_RX;
 800142c:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 800142e:	6059      	str	r1, [r3, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001430:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001432:	f004 f9c5 	bl	80057c0 <HAL_UART_Init>
 8001436:	4604      	mov	r4, r0
 8001438:	b108      	cbz	r0, 800143e <main+0x406>
 800143a:	b672      	cpsid	i
  while (1)
 800143c:	e7fe      	b.n	800143c <main+0x404>
  MX_MotorControl_Init();
 800143e:	f001 fac7 	bl	80029d0 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8001442:	4622      	mov	r2, r4
 8001444:	2102      	movs	r1, #2
 8001446:	2012      	movs	r0, #18
 8001448:	f003 f818 	bl	800447c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 800144c:	2012      	movs	r0, #18
 800144e:	f003 f84d 	bl	80044ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001452:	4622      	mov	r2, r4
 8001454:	4621      	mov	r1, r4
 8001456:	2019      	movs	r0, #25
 8001458:	f003 f810 	bl	800447c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800145c:	2019      	movs	r0, #25
 800145e:	f003 f845 	bl	80044ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 1);
 8001462:	2201      	movs	r2, #1
 8001464:	2104      	movs	r1, #4
 8001466:	2018      	movs	r0, #24
 8001468:	f003 f808 	bl	800447c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800146c:	2018      	movs	r0, #24
 800146e:	f003 f83d 	bl	80044ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8001472:	4622      	mov	r2, r4
 8001474:	2103      	movs	r1, #3
 8001476:	201c      	movs	r0, #28
 8001478:	f003 f800 	bl	800447c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800147c:	201c      	movs	r0, #28
 800147e:	f003 f835 	bl	80044ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8001482:	2201      	movs	r2, #1
 8001484:	2103      	movs	r1, #3
 8001486:	2026      	movs	r0, #38	; 0x26
 8001488:	f002 fff8 	bl	800447c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800148c:	2026      	movs	r0, #38	; 0x26
 800148e:	f003 f82d 	bl	80044ec <HAL_NVIC_EnableIRQ>
	  	       therm_value = therm_value / 16.0; // Convert left-aligned to right-aligned (0-4096)
 8001492:	4f61      	ldr	r7, [pc, #388]	; (8001618 <main+0x5e0>)
  MC_ProgramSpeedRampMotor1(500/6.0, 1500);
 8001494:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001498:	2053      	movs	r0, #83	; 0x53
 800149a:	f000 f913 	bl	80016c4 <MC_ProgramSpeedRampMotor1>
	  	       therm_value = therm_value / 16.0; // Convert left-aligned to right-aligned (0-4096)
 800149e:	2600      	movs	r6, #0
  MC_StartMotor1();
 80014a0:	f000 f90a 	bl	80016b8 <MC_StartMotor1>
	  	       therm_voltage = therm_value * 3300.0 / 4096.0; //Convert to mV (to avoid decimal places)
 80014a4:	f20f 1930 	addw	r9, pc, #304	; 0x130
 80014a8:	e9d9 8900 	ldrd	r8, r9, [r9]
	  	       therm_resistance = 3300.0 * 3300 / therm_voltage;
 80014ac:	f20f 1b30 	addw	fp, pc, #304	; 0x130
 80014b0:	e9db ab00 	ldrd	sl, fp, [fp]
	convFlag = 4;
 80014b4:	ec47 6b19 	vmov	d9, r6, r7
 80014b8:	2404      	movs	r4, #4
	  if (RCM_GetUserConvState() == RCM_USERCONV_IDLE && convFlag == 4)
 80014ba:	f001 fc05 	bl	8002cc8 <RCM_GetUserConvState>
 80014be:	b910      	cbnz	r0, 80014c6 <main+0x48e>
 80014c0:	2c04      	cmp	r4, #4
 80014c2:	f000 80e7 	beq.w	8001694 <main+0x65c>
	      else if (RCM_GetUserConvState() == RCM_USERCONV_EOC && convFlag == 1)
 80014c6:	f001 fbff 	bl	8002cc8 <RCM_GetUserConvState>
 80014ca:	2802      	cmp	r0, #2
 80014cc:	4605      	mov	r5, r0
 80014ce:	f000 80ab 	beq.w	8001628 <main+0x5f0>
	  if (RCM_GetUserConvState() == RCM_USERCONV_IDLE && convFlag == 2)
 80014d2:	f001 fbf9 	bl	8002cc8 <RCM_GetUserConvState>
 80014d6:	b910      	cbnz	r0, 80014de <main+0x4a6>
 80014d8:	2c02      	cmp	r4, #2
 80014da:	f000 80d1 	beq.w	8001680 <main+0x648>
	  	      else if (RCM_GetUserConvState() == RCM_USERCONV_EOC && convFlag == 3)
 80014de:	f001 fbf3 	bl	8002cc8 <RCM_GetUserConvState>
 80014e2:	2802      	cmp	r0, #2
 80014e4:	d1e9      	bne.n	80014ba <main+0x482>
 80014e6:	2c03      	cmp	r4, #3
 80014e8:	d1e7      	bne.n	80014ba <main+0x482>
	  	       therm_value = RCM_GetUserConv();
 80014ea:	f001 fbb3 	bl	8002c54 <RCM_GetUserConv>
	  	       therm_value = therm_value / 16.0; // Convert left-aligned to right-aligned (0-4096)
 80014ee:	f7ff f839 	bl	8000564 <__aeabi_i2d>
 80014f2:	ec53 2b19 	vmov	r2, r3, d9
 80014f6:	f7ff f89f 	bl	8000638 <__aeabi_dmul>
 80014fa:	f7ff fb4d 	bl	8000b98 <__aeabi_d2uiz>
	  	       therm_voltage = therm_value * 3300.0 / 4096.0; //Convert to mV (to avoid decimal places)
 80014fe:	b280      	uxth	r0, r0
 8001500:	f7ff f830 	bl	8000564 <__aeabi_i2d>
 8001504:	4642      	mov	r2, r8
 8001506:	464b      	mov	r3, r9
 8001508:	f7ff f896 	bl	8000638 <__aeabi_dmul>
 800150c:	f7ff fb44 	bl	8000b98 <__aeabi_d2uiz>
	  	       therm_resistance = 3300.0 * 3300 / therm_voltage;
 8001510:	b280      	uxth	r0, r0
 8001512:	f7ff f827 	bl	8000564 <__aeabi_i2d>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4650      	mov	r0, sl
 800151c:	4659      	mov	r1, fp
 800151e:	f7ff f9b5 	bl	800088c <__aeabi_ddiv>
 8001522:	f7ff fb39 	bl	8000b98 <__aeabi_d2uiz>
	  	       therm_resistance = therm_resistance - 3300;
 8001526:	f6a0 40e4 	subw	r0, r0, #3300	; 0xce4
	  	       therm_temp = 1000.0*(log(therm_resistance / 10000.0) + (3435.0/298.0));
 800152a:	b284      	uxth	r4, r0
 800152c:	4620      	mov	r0, r4
 800152e:	f7ff f819 	bl	8000564 <__aeabi_i2d>
 8001532:	a32d      	add	r3, pc, #180	; (adr r3, 80015e8 <main+0x5b0>)
 8001534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001538:	f7ff f87e 	bl	8000638 <__aeabi_dmul>
 800153c:	ec41 0b10 	vmov	d0, r0, r1
 8001540:	f006 fdfe 	bl	8008140 <log>
 8001544:	a32a      	add	r3, pc, #168	; (adr r3, 80015f0 <main+0x5b8>)
 8001546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154a:	ec51 0b10 	vmov	r0, r1, d0
 800154e:	f7fe febd 	bl	80002cc <__adddf3>
 8001552:	4b32      	ldr	r3, [pc, #200]	; (800161c <main+0x5e4>)
 8001554:	2200      	movs	r2, #0
 8001556:	f7ff f86f 	bl	8000638 <__aeabi_dmul>
 800155a:	f7ff fb1d 	bl	8000b98 <__aeabi_d2uiz>
	  	       therm_temp = 1000.0 * 3435.0 / therm_temp;
 800155e:	b280      	uxth	r0, r0
 8001560:	f7ff f800 	bl	8000564 <__aeabi_i2d>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	a123      	add	r1, pc, #140	; (adr r1, 80015f8 <main+0x5c0>)
 800156a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800156e:	f7ff f98d 	bl	800088c <__aeabi_ddiv>
 8001572:	f7ff fb11 	bl	8000b98 <__aeabi_d2uiz>
	  	       therm_temp = therm_temp - 273.0;
 8001576:	b280      	uxth	r0, r0
 8001578:	f7fe fff4 	bl	8000564 <__aeabi_i2d>
 800157c:	a320      	add	r3, pc, #128	; (adr r3, 8001600 <main+0x5c8>)
 800157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001582:	f7fe fea1 	bl	80002c8 <__aeabi_dsub>
	  	       sprintf(msg_debug, "Thermistor resistance: %hu\r\n", therm_resistance);
 8001586:	4622      	mov	r2, r4
	  	       therm_temp = therm_temp - 273.0;
 8001588:	4605      	mov	r5, r0
 800158a:	460e      	mov	r6, r1
	  	       sprintf(msg_debug, "Thermistor resistance: %hu\r\n", therm_resistance);
 800158c:	a81e      	add	r0, sp, #120	; 0x78
 800158e:	4924      	ldr	r1, [pc, #144]	; (8001620 <main+0x5e8>)
 8001590:	f006 f9a6 	bl	80078e0 <siprintf>
	  	       HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001594:	a81e      	add	r0, sp, #120	; 0x78
 8001596:	f7fe fe3b 	bl	8000210 <strlen>
 800159a:	f04f 33ff 	mov.w	r3, #4294967295
 800159e:	b282      	uxth	r2, r0
 80015a0:	a91e      	add	r1, sp, #120	; 0x78
 80015a2:	481b      	ldr	r0, [pc, #108]	; (8001610 <main+0x5d8>)
 80015a4:	f004 f9ae 	bl	8005904 <HAL_UART_Transmit>
	  	       therm_temp = therm_temp - 273.0;
 80015a8:	4631      	mov	r1, r6
 80015aa:	4628      	mov	r0, r5
 80015ac:	f7ff faf4 	bl	8000b98 <__aeabi_d2uiz>
	  	     sprintf(msg_debug, "Temperature: %hu\r\n", therm_temp);
 80015b0:	491c      	ldr	r1, [pc, #112]	; (8001624 <main+0x5ec>)
 80015b2:	b282      	uxth	r2, r0
 80015b4:	a81e      	add	r0, sp, #120	; 0x78
 80015b6:	f006 f993 	bl	80078e0 <siprintf>
	  	     HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80015ba:	a81e      	add	r0, sp, #120	; 0x78
 80015bc:	f7fe fe28 	bl	8000210 <strlen>
 80015c0:	f04f 33ff 	mov.w	r3, #4294967295
 80015c4:	b282      	uxth	r2, r0
 80015c6:	a91e      	add	r1, sp, #120	; 0x78
 80015c8:	4811      	ldr	r0, [pc, #68]	; (8001610 <main+0x5d8>)
 80015ca:	f004 f99b 	bl	8005904 <HAL_UART_Transmit>
	  	       convFlag = 4;
 80015ce:	2404      	movs	r4, #4
 80015d0:	e773      	b.n	80014ba <main+0x482>
 80015d2:	bf00      	nop
 80015d4:	f3af 8000 	nop.w
 80015d8:	00000000 	.word	0x00000000
 80015dc:	3fe9c800 	.word	0x3fe9c800
 80015e0:	00000000 	.word	0x00000000
 80015e4:	4164c562 	.word	0x4164c562
 80015e8:	eb1c432d 	.word	0xeb1c432d
 80015ec:	3f1a36e2 	.word	0x3f1a36e2
 80015f0:	b61eed1a 	.word	0xb61eed1a
 80015f4:	40270dbe 	.word	0x40270dbe
 80015f8:	00000000 	.word	0x00000000
 80015fc:	414a34fc 	.word	0x414a34fc
 8001600:	00000000 	.word	0x00000000
 8001604:	40711000 	.word	0x40711000
 8001608:	20000858 	.word	0x20000858
 800160c:	20000898 	.word	0x20000898
 8001610:	200008d8 	.word	0x200008d8
 8001614:	40004400 	.word	0x40004400
 8001618:	3fb00000 	.word	0x3fb00000
 800161c:	408f4000 	.word	0x408f4000
 8001620:	08008580 	.word	0x08008580
 8001624:	080085a0 	.word	0x080085a0
	      else if (RCM_GetUserConvState() == RCM_USERCONV_EOC && convFlag == 1)
 8001628:	2c01      	cmp	r4, #1
 800162a:	f47f af52 	bne.w	80014d2 <main+0x49a>
	       potentiometer_value = RCM_GetUserConv();
 800162e:	f001 fb11 	bl	8002c54 <RCM_GetUserConv>
	       user_speed = potentiometer_value * 4000.0 / 65520.0;
 8001632:	f7fe ff97 	bl	8000564 <__aeabi_i2d>
 8001636:	a31e      	add	r3, pc, #120	; (adr r3, 80016b0 <main+0x678>)
 8001638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163c:	f7fe fffc 	bl	8000638 <__aeabi_dmul>
 8001640:	f7ff faaa 	bl	8000b98 <__aeabi_d2uiz>
 8001644:	f8ad 000c 	strh.w	r0, [sp, #12]
	       MC_SetCurrentReferenceMotor1(currRef);
 8001648:	9803      	ldr	r0, [sp, #12]
 800164a:	f000 f843 	bl	80016d4 <MC_SetCurrentReferenceMotor1>
	       HAL_Delay(1000);
 800164e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001652:	f002 fc99 	bl	8003f88 <HAL_Delay>
	       sprintf(msg_debug, "Iq Ref: %hu\r\n", MC_GetIqdrefMotor1().q);
 8001656:	f000 f847 	bl	80016e8 <MC_GetIqdrefMotor1>
 800165a:	4913      	ldr	r1, [pc, #76]	; (80016a8 <main+0x670>)
 800165c:	9016      	str	r0, [sp, #88]	; 0x58
 800165e:	b202      	sxth	r2, r0
 8001660:	a81e      	add	r0, sp, #120	; 0x78
 8001662:	f006 f93d 	bl	80078e0 <siprintf>
	       HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8001666:	a81e      	add	r0, sp, #120	; 0x78
 8001668:	f7fe fdd2 	bl	8000210 <strlen>
 800166c:	f04f 33ff 	mov.w	r3, #4294967295
 8001670:	b282      	uxth	r2, r0
 8001672:	a91e      	add	r1, sp, #120	; 0x78
 8001674:	480d      	ldr	r0, [pc, #52]	; (80016ac <main+0x674>)
 8001676:	f004 f945 	bl	8005904 <HAL_UART_Transmit>
	  if (RCM_GetUserConvState() == RCM_USERCONV_IDLE && convFlag == 2)
 800167a:	f001 fb25 	bl	8002cc8 <RCM_GetUserConvState>
 800167e:	b928      	cbnz	r0, 800168c <main+0x654>
	  	       RCM_RequestUserConv(ThermistorHandle );
 8001680:	ee18 0a90 	vmov	r0, s17
 8001684:	f001 fad6 	bl	8002c34 <RCM_RequestUserConv>
	  	       convFlag = 3;
 8001688:	2403      	movs	r4, #3
 800168a:	e716      	b.n	80014ba <main+0x482>
	       convFlag = 2;
 800168c:	462c      	mov	r4, r5
	  	      else if (RCM_GetUserConvState() == RCM_USERCONV_EOC && convFlag == 3)
 800168e:	f001 fb1b 	bl	8002cc8 <RCM_GetUserConvState>
 8001692:	e712      	b.n	80014ba <main+0x482>
	       RCM_RequestUserConv(PotentiometerHandle);
 8001694:	ee18 0a10 	vmov	r0, s16
 8001698:	f001 facc 	bl	8002c34 <RCM_RequestUserConv>
	       convFlag = 1;
 800169c:	2401      	movs	r4, #1
	  if (RCM_GetUserConvState() == RCM_USERCONV_IDLE && convFlag == 2)
 800169e:	f001 fb13 	bl	8002cc8 <RCM_GetUserConvState>
 80016a2:	e7f4      	b.n	800168e <main+0x656>
 80016a4:	f3af 8000 	nop.w
 80016a8:	08008570 	.word	0x08008570
 80016ac:	200008d8 	.word	0x200008d8
 80016b0:	1f41f41f 	.word	0x1f41f41f
 80016b4:	3faf41f4 	.word	0x3faf41f4

080016b8 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 80016b8:	4b01      	ldr	r3, [pc, #4]	; (80016c0 <MC_StartMotor1+0x8>)
 80016ba:	6818      	ldr	r0, [r3, #0]
 80016bc:	f000 b84a 	b.w	8001754 <MCI_StartMotor>
 80016c0:	20000a00 	.word	0x20000a00

080016c4 <MC_ProgramSpeedRampMotor1>:
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1( int16_t hFinalSpeed, uint16_t hDurationms )
{
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 80016c4:	4b02      	ldr	r3, [pc, #8]	; (80016d0 <MC_ProgramSpeedRampMotor1+0xc>)
{
 80016c6:	460a      	mov	r2, r1
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 80016c8:	4601      	mov	r1, r0
 80016ca:	6818      	ldr	r0, [r3, #0]
 80016cc:	f000 b822 	b.w	8001714 <MCI_ExecSpeedRamp>
 80016d0:	20000a00 	.word	0x20000a00

080016d4 <MC_SetCurrentReferenceMotor1>:
  *
  * @param  Iqdref current reference in the Direct-Quadratic reference frame. Expressed
  *         in the qd_t format.
  */
__weak void MC_SetCurrentReferenceMotor1( qd_t Iqdref )
{
 80016d4:	b082      	sub	sp, #8
	MCI_SetCurrentReferences( pMCI[M1], Iqdref );
 80016d6:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <MC_SetCurrentReferenceMotor1+0x10>)
{
 80016d8:	9001      	str	r0, [sp, #4]
	MCI_SetCurrentReferences( pMCI[M1], Iqdref );
 80016da:	4601      	mov	r1, r0
 80016dc:	6818      	ldr	r0, [r3, #0]
}
 80016de:	b002      	add	sp, #8
	MCI_SetCurrentReferences( pMCI[M1], Iqdref );
 80016e0:	f000 b82e 	b.w	8001740 <MCI_SetCurrentReferences>
 80016e4:	20000a00 	.word	0x20000a00

080016e8 <MC_GetIqdrefMotor1>:
/**
 * @brief returns Iq and Id reference current values for Motor 1 in qd_t format
 */
__weak qd_t MC_GetIqdrefMotor1(void)
{
	return MCI_GetIqdref( pMCI[M1] );
 80016e8:	4b02      	ldr	r3, [pc, #8]	; (80016f4 <MC_GetIqdrefMotor1+0xc>)
 80016ea:	6818      	ldr	r0, [r3, #0]
{
 80016ec:	b082      	sub	sp, #8
}
 80016ee:	b002      	add	sp, #8
	return MCI_GetIqdref( pMCI[M1] );
 80016f0:	f000 b8ca 	b.w	8001888 <MCI_GetIqdref>
 80016f4:	20000a00 	.word	0x20000a00

080016f8 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 80016f8:	b410      	push	{r4}
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80016fa:	2400      	movs	r4, #0
 80016fc:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = 0;
 80016fe:	81c4      	strh	r4, [r0, #14]
  pHandle->hFinalTorque = 0;
 8001700:	8204      	strh	r4, [r0, #16]
  pHandle->hDurationms = 0;
 8001702:	82c4      	strh	r4, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8001704:	7604      	strb	r4, [r0, #24]
  pHandle->pSTC = pSTC;
 8001706:	e9c0 1200 	strd	r1, r2, [r0]
}
 800170a:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->pFOCVars = pFOCVars;
 800170e:	6083      	str	r3, [r0, #8]
}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop

08001714 <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
 8001714:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001716:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 800171a:	2401      	movs	r4, #1
 800171c:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 800171e:	81c1      	strh	r1, [r0, #14]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8001720:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 8001724:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001726:	8303      	strh	r3, [r0, #24]
}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop

0800172c <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 800172c:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800172e:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8001730:	2402      	movs	r4, #2
 8001732:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8001734:	8201      	strh	r1, [r0, #16]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8001736:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 800173a:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800173c:	8303      	strh	r3, [r0, #24]
}
 800173e:	4770      	bx	lr

08001740 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8001740:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8001742:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001744:	2301      	movs	r3, #1
  pHandle->Iqdref.q = Iqdref.q;
 8001746:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 800174a:	7302      	strb	r2, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800174c:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 800174e:	b002      	add	sp, #8
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop

08001754 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8001754:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8001756:	2103      	movs	r1, #3
{
 8001758:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 800175a:	6800      	ldr	r0, [r0, #0]
 800175c:	f005 fc60 	bl	8007020 <STM_NextState>

  if ( RetVal == true )
 8001760:	b108      	cbz	r0, 8001766 <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001762:	2301      	movs	r3, #1
 8001764:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8001766:	bd10      	pop	{r4, pc}

08001768 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8001768:	6800      	ldr	r0, [r0, #0]
 800176a:	2107      	movs	r1, #7
 800176c:	f005 bc58 	b.w	8007020 <STM_NextState>

08001770 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8001770:	6800      	ldr	r0, [r0, #0]
 8001772:	f005 bccb 	b.w	800710c <STM_FaultAcknowledged>
 8001776:	bf00      	nop

08001778 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8001778:	6800      	ldr	r0, [r0, #0]
 800177a:	2101      	movs	r1, #1
 800177c:	f005 bc50 	b.w	8007020 <STM_NextState>

08001780 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8001780:	b178      	cbz	r0, 80017a2 <MCI_ExecBufferedCommands+0x22>
{
 8001782:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001784:	7e03      	ldrb	r3, [r0, #24]
 8001786:	2b01      	cmp	r3, #1
 8001788:	4604      	mov	r4, r0
 800178a:	d000      	beq.n	800178e <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 800178c:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 800178e:	7b01      	ldrb	r1, [r0, #12]
 8001790:	2902      	cmp	r1, #2
 8001792:	d020      	beq.n	80017d6 <MCI_ExecBufferedCommands+0x56>
 8001794:	2903      	cmp	r1, #3
 8001796:	d005      	beq.n	80017a4 <MCI_ExecBufferedCommands+0x24>
 8001798:	2901      	cmp	r1, #1
 800179a:	d00c      	beq.n	80017b6 <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 800179c:	2303      	movs	r3, #3
 800179e:	7623      	strb	r3, [r4, #24]
}
 80017a0:	bd10      	pop	{r4, pc}
 80017a2:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80017a4:	6882      	ldr	r2, [r0, #8]
 80017a6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80017aa:	f8d0 3012 	ldr.w	r3, [r0, #18]
 80017ae:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 80017b0:	2302      	movs	r3, #2
 80017b2:	7623      	strb	r3, [r4, #24]
}
 80017b4:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80017b6:	6883      	ldr	r3, [r0, #8]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 80017be:	6840      	ldr	r0, [r0, #4]
 80017c0:	f005 fb68 	bl	8006e94 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 80017c4:	8ae2      	ldrh	r2, [r4, #22]
 80017c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80017ca:	6860      	ldr	r0, [r4, #4]
 80017cc:	f005 fb66 	bl	8006e9c <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 80017d0:	2800      	cmp	r0, #0
 80017d2:	d0e3      	beq.n	800179c <MCI_ExecBufferedCommands+0x1c>
 80017d4:	e7ec      	b.n	80017b0 <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80017d6:	6883      	ldr	r3, [r0, #8]
 80017d8:	2100      	movs	r1, #0
 80017da:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 80017de:	6840      	ldr	r0, [r0, #4]
 80017e0:	f005 fb58 	bl	8006e94 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 80017e4:	8ae2      	ldrh	r2, [r4, #22]
 80017e6:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80017ea:	6860      	ldr	r0, [r4, #4]
 80017ec:	f005 fb56 	bl	8006e9c <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 80017f0:	2800      	cmp	r0, #0
 80017f2:	d0d3      	beq.n	800179c <MCI_ExecBufferedCommands+0x1c>
 80017f4:	e7dc      	b.n	80017b0 <MCI_ExecBufferedCommands+0x30>
 80017f6:	bf00      	nop

080017f8 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 80017f8:	6800      	ldr	r0, [r0, #0]
 80017fa:	f005 bc85 	b.w	8007108 <STM_GetState>
 80017fe:	bf00      	nop

08001800 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8001800:	7e40      	ldrb	r0, [r0, #25]
 8001802:	4770      	bx	lr

08001804 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8001804:	7b03      	ldrb	r3, [r0, #12]
 8001806:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8001808:	bf0c      	ite	eq
 800180a:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 800180e:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop

08001814 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8001814:	6840      	ldr	r0, [r0, #4]
 8001816:	f005 bb89 	b.w	8006f2c <STC_StopRamp>
 800181a:	bf00      	nop

0800181c <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 800181c:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 800181e:	6840      	ldr	r0, [r0, #4]
 8001820:	f005 fb1e 	bl	8006e60 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8001824:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8001828:	f005 bac8 	b.w	8006dbc <SPD_GetAvrgMecSpeedUnit>

0800182c <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 800182c:	6840      	ldr	r0, [r0, #4]
 800182e:	f005 bb21 	b.w	8006e74 <STC_GetMecSpeedRefUnit>
 8001832:	bf00      	nop

08001834 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8001834:	6882      	ldr	r2, [r0, #8]
 8001836:	6810      	ldr	r0, [r2, #0]
 8001838:	2300      	movs	r3, #0
 800183a:	b282      	uxth	r2, r0
 800183c:	f362 030f 	bfi	r3, r2, #0, #16
 8001840:	0c00      	lsrs	r0, r0, #16
 8001842:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001846:	b082      	sub	sp, #8
}
 8001848:	4618      	mov	r0, r3
 800184a:	b002      	add	sp, #8
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop

08001850 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8001850:	6882      	ldr	r2, [r0, #8]
 8001852:	6850      	ldr	r0, [r2, #4]
 8001854:	2300      	movs	r3, #0
 8001856:	b282      	uxth	r2, r0
 8001858:	f362 030f 	bfi	r3, r2, #0, #16
 800185c:	0c00      	lsrs	r0, r0, #16
 800185e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001862:	b082      	sub	sp, #8
}
 8001864:	4618      	mov	r0, r3
 8001866:	b002      	add	sp, #8
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop

0800186c <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 800186c:	6882      	ldr	r2, [r0, #8]
 800186e:	68d0      	ldr	r0, [r2, #12]
 8001870:	2300      	movs	r3, #0
 8001872:	b282      	uxth	r2, r0
 8001874:	f362 030f 	bfi	r3, r2, #0, #16
 8001878:	0c00      	lsrs	r0, r0, #16
 800187a:	f360 431f 	bfi	r3, r0, #16, #16
{
 800187e:	b082      	sub	sp, #8
}
 8001880:	4618      	mov	r0, r3
 8001882:	b002      	add	sp, #8
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop

08001888 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8001888:	6882      	ldr	r2, [r0, #8]
 800188a:	6910      	ldr	r0, [r2, #16]
 800188c:	2300      	movs	r3, #0
 800188e:	b282      	uxth	r2, r0
 8001890:	f362 030f 	bfi	r3, r2, #0, #16
 8001894:	0c00      	lsrs	r0, r0, #16
 8001896:	f360 431f 	bfi	r3, r0, #16, #16
{
 800189a:	b082      	sub	sp, #8
}
 800189c:	4618      	mov	r0, r3
 800189e:	b002      	add	sp, #8
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop

080018a4 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 80018a4:	6882      	ldr	r2, [r0, #8]
 80018a6:	f8d2 0016 	ldr.w	r0, [r2, #22]
 80018aa:	2300      	movs	r3, #0
 80018ac:	b282      	uxth	r2, r0
 80018ae:	f362 030f 	bfi	r3, r2, #0, #16
 80018b2:	0c00      	lsrs	r0, r0, #16
 80018b4:	f360 431f 	bfi	r3, r0, #16, #16
{
 80018b8:	b082      	sub	sp, #8
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	b002      	add	sp, #8
 80018be:	4770      	bx	lr

080018c0 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 80018c0:	6882      	ldr	r2, [r0, #8]
 80018c2:	f8d2 001a 	ldr.w	r0, [r2, #26]
 80018c6:	2300      	movs	r3, #0
 80018c8:	b282      	uxth	r2, r0
 80018ca:	f362 030f 	bfi	r3, r2, #0, #16
 80018ce:	0c00      	lsrs	r0, r0, #16
 80018d0:	f360 431f 	bfi	r3, r0, #16, #16
{
 80018d4:	b082      	sub	sp, #8
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	b002      	add	sp, #8
 80018da:	4770      	bx	lr

080018dc <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 80018dc:	6883      	ldr	r3, [r0, #8]
}
 80018de:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 80018e2:	4770      	bx	lr

080018e4 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 80018e4:	2300      	movs	r3, #0
 80018e6:	6882      	ldr	r2, [r0, #8]
 80018e8:	f361 030f 	bfi	r3, r1, #0, #16
 80018ec:	f361 431f 	bfi	r3, r1, #16, #16
 80018f0:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop

080018f8 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 80018f8:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 80018fa:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 80018fe:	f005 fb55 	bl	8006fac <STC_GetDefaultIqdref>
 8001902:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8001906:	8220      	strh	r0, [r4, #16]
 8001908:	8263      	strh	r3, [r4, #18]
}
 800190a:	bd10      	pop	{r4, pc}

0800190c <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 800190c:	b203      	sxth	r3, r0
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 800190e:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8001912:	f3c0 400f 	ubfx	r0, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8001916:	fb13 f201 	smulbb	r2, r3, r1
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 800191a:	fb10 f101 	smulbb	r1, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 800191e:	4250      	negs	r0, r2
 8001920:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8001924:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8001928:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 800192a:	da05      	bge.n	8001938 <MCM_Clarke+0x2c>
 800192c:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 800192e:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8001932:	da0c      	bge.n	800194e <MCM_Clarke+0x42>
 8001934:	4a09      	ldr	r2, [pc, #36]	; (800195c <MCM_Clarke+0x50>)
 8001936:	e001      	b.n	800193c <MCM_Clarke+0x30>
 8001938:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 800193c:	b29b      	uxth	r3, r3
 800193e:	2000      	movs	r0, #0
 8001940:	b292      	uxth	r2, r2
 8001942:	f363 000f 	bfi	r0, r3, #0, #16
 8001946:	f362 401f 	bfi	r0, r2, #16, #16
}
 800194a:	b004      	add	sp, #16
 800194c:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 800194e:	4803      	ldr	r0, [pc, #12]	; (800195c <MCM_Clarke+0x50>)
 8001950:	b20a      	sxth	r2, r1
 8001952:	4282      	cmp	r2, r0
 8001954:	bfb8      	it	lt
 8001956:	4602      	movlt	r2, r0
 8001958:	e7f0      	b.n	800193c <MCM_Clarke+0x30>
 800195a:	bf00      	nop
 800195c:	ffff8001 	.word	0xffff8001

08001960 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8001960:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 8001964:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8001968:	f400 7140 	and.w	r1, r0, #768	; 0x300
 800196c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
{
 8001970:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8001972:	d028      	beq.n	80019c6 <MCM_Trig_Functions+0x66>
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	461a      	mov	r2, r3
 800197a:	d816      	bhi.n	80019aa <MCM_Trig_Functions+0x4a>
 800197c:	b361      	cbz	r1, 80019d8 <MCM_Trig_Functions+0x78>
 800197e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001982:	d109      	bne.n	8001998 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001984:	b2c0      	uxtb	r0, r0
 8001986:	43c3      	mvns	r3, r0
 8001988:	491a      	ldr	r1, [pc, #104]	; (80019f4 <MCM_Trig_Functions+0x94>)
 800198a:	b2db      	uxtb	r3, r3
 800198c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8001990:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001994:	4252      	negs	r2, r2
 8001996:	b212      	sxth	r2, r2
      break;
    default:
      break;
  }
  return ( Local_Components );
 8001998:	b29b      	uxth	r3, r3
 800199a:	2000      	movs	r0, #0
 800199c:	b292      	uxth	r2, r2
 800199e:	f363 000f 	bfi	r0, r3, #0, #16
 80019a2:	f362 401f 	bfi	r0, r2, #16, #16
}
 80019a6:	b002      	add	sp, #8
 80019a8:	4770      	bx	lr
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 80019aa:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 80019ae:	d1f3      	bne.n	8001998 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80019b0:	4910      	ldr	r1, [pc, #64]	; (80019f4 <MCM_Trig_Functions+0x94>)
 80019b2:	b2c0      	uxtb	r0, r0
 80019b4:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80019b6:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80019ba:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80019bc:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80019be:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80019c2:	b21b      	sxth	r3, r3
      break;
 80019c4:	e7e8      	b.n	8001998 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80019c6:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80019c8:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80019ca:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80019d2:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
      break;
 80019d6:	e7df      	b.n	8001998 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80019d8:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80019da:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80019dc:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80019e4:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80019e8:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80019ea:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80019ec:	b21b      	sxth	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80019ee:	b212      	sxth	r2, r2
      break;
 80019f0:	e7d2      	b.n	8001998 <MCM_Trig_Functions+0x38>
 80019f2:	bf00      	nop
 80019f4:	080085b4 	.word	0x080085b4

080019f8 <MCM_Park>:
{
 80019f8:	b570      	push	{r4, r5, r6, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	4605      	mov	r5, r0
 80019fe:	9001      	str	r0, [sp, #4]
 8001a00:	4606      	mov	r6, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001a02:	4608      	mov	r0, r1
 8001a04:	f7ff ffac 	bl	8001960 <MCM_Trig_Functions>
 8001a08:	b22d      	sxth	r5, r5
 8001a0a:	b204      	sxth	r4, r0
 8001a0c:	1436      	asrs	r6, r6, #16
 8001a0e:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8001a10:	fb05 f204 	mul.w	r2, r5, r4
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8001a14:	fb06 2210 	mls	r2, r6, r0, r2
  if ( wqd_tmp > INT16_MAX )
 8001a18:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8001a1c:	da12      	bge.n	8001a44 <MCM_Park+0x4c>
 8001a1e:	13d3      	asrs	r3, r2, #15
  else if ( wqd_tmp < ( -32768 ) )
 8001a20:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001a24:	4914      	ldr	r1, [pc, #80]	; (8001a78 <MCM_Park+0x80>)
 8001a26:	da21      	bge.n	8001a6c <MCM_Park+0x74>
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8001a28:	fb04 f406 	mul.w	r4, r4, r6
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8001a2c:	fb05 4000 	mla	r0, r5, r0, r4
  if ( wqd_tmp > INT16_MAX )
 8001a30:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8001a34:	ea4f 32e0 	mov.w	r2, r0, asr #15
  if ( wqd_tmp > INT16_MAX )
 8001a38:	da07      	bge.n	8001a4a <MCM_Park+0x52>
  else if ( wqd_tmp < ( -32768 ) )
 8001a3a:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8001a3e:	da0f      	bge.n	8001a60 <MCM_Park+0x68>
 8001a40:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <MCM_Park+0x80>)
 8001a42:	e004      	b.n	8001a4e <MCM_Park+0x56>
 8001a44:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001a48:	e7ee      	b.n	8001a28 <MCM_Park+0x30>
 8001a4a:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 8001a4e:	b28a      	uxth	r2, r1
 8001a50:	2000      	movs	r0, #0
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	f362 000f 	bfi	r0, r2, #0, #16
 8001a58:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001a5c:	b004      	add	sp, #16
 8001a5e:	bd70      	pop	{r4, r5, r6, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8001a60:	4805      	ldr	r0, [pc, #20]	; (8001a78 <MCM_Park+0x80>)
 8001a62:	b213      	sxth	r3, r2
 8001a64:	4283      	cmp	r3, r0
 8001a66:	bfb8      	it	lt
 8001a68:	4603      	movlt	r3, r0
 8001a6a:	e7f0      	b.n	8001a4e <MCM_Park+0x56>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8001a6c:	b21a      	sxth	r2, r3
 8001a6e:	4291      	cmp	r1, r2
 8001a70:	bfb8      	it	lt
 8001a72:	4611      	movlt	r1, r2
 8001a74:	e7d8      	b.n	8001a28 <MCM_Park+0x30>
 8001a76:	bf00      	nop
 8001a78:	ffff8001 	.word	0xffff8001

08001a7c <MCM_Rev_Park>:
{
 8001a7c:	b530      	push	{r4, r5, lr}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	4604      	mov	r4, r0
 8001a82:	9001      	str	r0, [sp, #4]
 8001a84:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001a86:	4608      	mov	r0, r1
 8001a88:	f7ff ff6a 	bl	8001960 <MCM_Trig_Functions>
 8001a8c:	142d      	asrs	r5, r5, #16
 8001a8e:	1403      	asrs	r3, r0, #16
 8001a90:	b224      	sxth	r4, r4
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8001a92:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001a96:	b200      	sxth	r0, r0
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8001a98:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8001a9c:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8001aa0:	fb04 0313 	mls	r3, r4, r3, r0
  return ( Output );
 8001aa4:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8001aae:	f362 000f 	bfi	r0, r2, #0, #16
 8001ab2:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001ab6:	b005      	add	sp, #20
 8001ab8:	bd30      	pop	{r4, r5, pc}
 8001aba:	bf00      	nop

08001abc <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8001abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001abe:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <FOC_Clear+0x74>)
 8001ac4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8001ac8:	eb03 0c41 	add.w	ip, r3, r1, lsl #1
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8001acc:	004a      	lsls	r2, r1, #1
  FOCVars[bMotor].Iab = NULL_ab;
 8001ace:	2500      	movs	r5, #0
{
 8001ad0:	4604      	mov	r4, r0
  FOCVars[bMotor].Iqd = NULL_qd;
 8001ad2:	f102 070c 	add.w	r7, r2, #12
  FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
 8001ad6:	2626      	movs	r6, #38	; 0x26
  FOCVars[bMotor].Vqd = NULL_qd;
 8001ad8:	3216      	adds	r2, #22
  FOCVars[bMotor].Iab = NULL_ab;
 8001ada:	f843 5011 	str.w	r5, [r3, r1, lsl #1]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001ade:	eb07 0e03 	add.w	lr, r7, r3
  FOCVars[bMotor].Iab = NULL_ab;
 8001ae2:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8001ae6:	fb06 3604 	mla	r6, r6, r4, r3
  FOCVars[bMotor].Vqd = NULL_qd;
 8001aea:	eb02 0c03 	add.w	ip, r2, r3
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001aee:	4811      	ldr	r0, [pc, #68]	; (8001b34 <FOC_Clear+0x78>)
  FOCVars[bMotor].Iqd = NULL_qd;
 8001af0:	50fd      	str	r5, [r7, r3]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001af2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001af6:	f8ce 5004 	str.w	r5, [lr, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001afa:	4629      	mov	r1, r5
  FOCVars[bMotor].hTeref = (int16_t)0;
 8001afc:	83f5      	strh	r5, [r6, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 8001afe:	50d5      	str	r5, [r2, r3]
 8001b00:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8001b04:	8435      	strh	r5, [r6, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001b06:	f004 feb1 	bl	800686c <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <FOC_Clear+0x7c>)
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001b12:	f004 feab 	bl	800686c <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <FOC_Clear+0x80>)
 8001b18:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001b1c:	f005 f9a2 	bl	8006e64 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001b20:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <FOC_Clear+0x84>)
 8001b22:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8001b26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001b2a:	f005 b8a3 	b.w	8006c74 <PWMC_SwitchOffPWM>
 8001b2e:	bf00      	nop
 8001b30:	20000948 	.word	0x20000948
 8001b34:	2000093c 	.word	0x2000093c
 8001b38:	200009f8 	.word	0x200009f8
 8001b3c:	200009fc 	.word	0x200009fc
 8001b40:	20000934 	.word	0x20000934

08001b44 <MCboot>:
{
 8001b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b48:	ed2d 8b02 	vpush	{d8}
  STM_Init(&STM[M1]);
 8001b4c:	ed9f 8a60 	vldr	s16, [pc, #384]	; 8001cd0 <MCboot+0x18c>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8001b50:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8001d2c <MCboot+0x1e8>
  HALL_Init (&HALL_M1);
 8001b54:	4f5f      	ldr	r7, [pc, #380]	; (8001cd4 <MCboot+0x190>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8001b56:	4d60      	ldr	r5, [pc, #384]	; (8001cd8 <MCboot+0x194>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001b58:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 8001d30 <MCboot+0x1ec>
  NTC_Init(&TempSensorParamsM1);
 8001b5c:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8001d34 <MCboot+0x1f0>
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001b60:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8001d38 <MCboot+0x1f4>
{
 8001b64:	b085      	sub	sp, #20
 8001b66:	4602      	mov	r2, r0
  STM_Init(&STM[M1]);
 8001b68:	ee18 0a10 	vmov	r0, s16
{
 8001b6c:	4616      	mov	r6, r2
 8001b6e:	9101      	str	r1, [sp, #4]
  STM_Init(&STM[M1]);
 8001b70:	f005 fa32 	bl	8006fd8 <STM_Init>
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001b74:	4b59      	ldr	r3, [pc, #356]	; (8001cdc <MCboot+0x198>)
 8001b76:	485a      	ldr	r0, [pc, #360]	; (8001ce0 <MCboot+0x19c>)
  pCLM[M1] = &CircleLimitationM1;
 8001b78:	4a5a      	ldr	r2, [pc, #360]	; (8001ce4 <MCboot+0x1a0>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001b7a:	6018      	str	r0, [r3, #0]
  bMCBootCompleted = 0;
 8001b7c:	4b5a      	ldr	r3, [pc, #360]	; (8001ce8 <MCboot+0x1a4>)
  pCLM[M1] = &CircleLimitationM1;
 8001b7e:	495b      	ldr	r1, [pc, #364]	; (8001cec <MCboot+0x1a8>)
 8001b80:	6011      	str	r1, [r2, #0]
  bMCBootCompleted = 0;
 8001b82:	2400      	movs	r4, #0
 8001b84:	701c      	strb	r4, [r3, #0]
  ICS_Init(&PWM_Handle_M1);
 8001b86:	f004 fc0f 	bl	80063a8 <ICS_Init>
  startTimers();
 8001b8a:	f004 fef5 	bl	8006978 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8001b8e:	4640      	mov	r0, r8
 8001b90:	f004 fe58 	bl	8006844 <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8001b94:	4b56      	ldr	r3, [pc, #344]	; (8001cf0 <MCboot+0x1ac>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8001b96:	4a57      	ldr	r2, [pc, #348]	; (8001cf4 <MCboot+0x1b0>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8001b98:	f8c3 8000 	str.w	r8, [r3]
  HALL_Init (&HALL_M1);
 8001b9c:	4638      	mov	r0, r7
  pSTC[M1] = &SpeednTorqCtrlM1;
 8001b9e:	602a      	str	r2, [r5, #0]
  HALL_Init (&HALL_M1);
 8001ba0:	f003 ffba 	bl	8005b18 <HALL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 8001ba4:	4b52      	ldr	r3, [pc, #328]	; (8001cf0 <MCboot+0x1ac>)
 8001ba6:	6828      	ldr	r0, [r5, #0]
 8001ba8:	6819      	ldr	r1, [r3, #0]
  oMCInterface[M1] = & Mci[M1];
 8001baa:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8001d3c <MCboot+0x1f8>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 8001bae:	463a      	mov	r2, r7
 8001bb0:	f005 f942 	bl	8006e38 <STC_Init>
  STO_PLL_Init (&STO_PLL_M1);
 8001bb4:	4850      	ldr	r0, [pc, #320]	; (8001cf8 <MCboot+0x1b4>)
 8001bb6:	f005 fdd7 	bl	8007768 <STO_PLL_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8001bba:	4850      	ldr	r0, [pc, #320]	; (8001cfc <MCboot+0x1b8>)
 8001bbc:	f004 fe42 	bl	8006844 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8001bc0:	484f      	ldr	r0, [pc, #316]	; (8001d00 <MCboot+0x1bc>)
 8001bc2:	f004 fe3f 	bl	8006844 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8001bc6:	4a4f      	ldr	r2, [pc, #316]	; (8001d04 <MCboot+0x1c0>)
 8001bc8:	494c      	ldr	r1, [pc, #304]	; (8001cfc <MCboot+0x1b8>)
 8001bca:	6011      	str	r1, [r2, #0]
  pPIDId[M1] = &PIDIdHandle_M1;
 8001bcc:	494e      	ldr	r1, [pc, #312]	; (8001d08 <MCboot+0x1c4>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001bce:	484f      	ldr	r0, [pc, #316]	; (8001d0c <MCboot+0x1c8>)
  pPIDId[M1] = &PIDIdHandle_M1;
 8001bd0:	4a4b      	ldr	r2, [pc, #300]	; (8001d00 <MCboot+0x1bc>)
 8001bd2:	600a      	str	r2, [r1, #0]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001bd4:	f8cb 0000 	str.w	r0, [fp]
  RVBS_Init(pBusSensorM1);
 8001bd8:	f005 f896 	bl	8006d08 <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8001bdc:	4a4c      	ldr	r2, [pc, #304]	; (8001d10 <MCboot+0x1cc>)
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8001bde:	f8db 1000 	ldr.w	r1, [fp]
 8001be2:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8001be6:	494b      	ldr	r1, [pc, #300]	; (8001d14 <MCboot+0x1d0>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001be8:	f8c2 a10c 	str.w	sl, [r2, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 8001bec:	4648      	mov	r0, r9
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8001bee:	600a      	str	r2, [r1, #0]
  NTC_Init(&TempSensorParamsM1);
 8001bf0:	f004 fde4 	bl	80067bc <NTC_Init>
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001bf4:	4a48      	ldr	r2, [pc, #288]	; (8001d18 <MCboot+0x1d4>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8001bf6:	4949      	ldr	r1, [pc, #292]	; (8001d1c <MCboot+0x1d8>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001bf8:	4849      	ldr	r0, [pc, #292]	; (8001d20 <MCboot+0x1dc>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8001bfa:	f8c1 9000 	str.w	r9, [r1]
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001bfe:	6010      	str	r0, [r2, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8001c00:	f04f 0901 	mov.w	r9, #1
  REMNG_Init(pREMNG[M1]);
 8001c04:	f005 f8ce 	bl	8006da4 <REMNG_Init>
  FOC_Clear(M1);
 8001c08:	4620      	mov	r0, r4
 8001c0a:	f7ff ff57 	bl	8001abc <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8001c0e:	f88a 9024 	strb.w	r9, [sl, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001c12:	6828      	ldr	r0, [r5, #0]
 8001c14:	f005 f9ca 	bl	8006fac <STC_GetDefaultIqdref>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	f3c0 410f 	ubfx	r1, r0, #16, #16
 8001c1e:	f8aa 2010 	strh.w	r2, [sl, #16]
 8001c22:	f8aa 1012 	strh.w	r1, [sl, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001c26:	6828      	ldr	r0, [r5, #0]
 8001c28:	f005 f9c0 	bl	8006fac <STC_GetDefaultIqdref>
  oMCInterface[M1] = & Mci[M1];
 8001c2c:	493d      	ldr	r1, [pc, #244]	; (8001d24 <MCboot+0x1e0>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001c2e:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8001c30:	f8c8 1000 	str.w	r1, [r8]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001c34:	f3c0 4c0f 	ubfx	ip, r0, #16, #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001c38:	4653      	mov	r3, sl
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001c3a:	f8aa c014 	strh.w	ip, [sl, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001c3e:	4608      	mov	r0, r1
 8001c40:	ee18 1a10 	vmov	r1, s16
 8001c44:	f7ff fd58 	bl	80016f8 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8001c48:	6828      	ldr	r0, [r5, #0]
 8001c4a:	f8d8 a000 	ldr.w	sl, [r8]
 8001c4e:	f005 f9a3 	bl	8006f98 <STC_GetMecSpeedRefUnitDefault>
 8001c52:	4622      	mov	r2, r4
 8001c54:	4601      	mov	r1, r0
 8001c56:	4650      	mov	r0, sl
 8001c58:	f7ff fd5c 	bl	8001714 <MCI_ExecSpeedRamp>
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001c5c:	4a29      	ldr	r2, [pc, #164]	; (8001d04 <MCboot+0x1c0>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001c5e:	4824      	ldr	r0, [pc, #144]	; (8001cf0 <MCboot+0x1ac>)
  MCT[M1].pPIDId = pPIDId[M1];
 8001c60:	4929      	ldr	r1, [pc, #164]	; (8001d08 <MCboot+0x1c4>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001c62:	f8d2 e000 	ldr.w	lr, [r2]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001c66:	4a2b      	ldr	r2, [pc, #172]	; (8001d14 <MCboot+0x1d0>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001c68:	4b2f      	ldr	r3, [pc, #188]	; (8001d28 <MCboot+0x1e4>)
 8001c6a:	f8d0 a000 	ldr.w	sl, [r0]
  MCT[M1].pPIDId = pPIDId[M1];
 8001c6e:	f8d1 c000 	ldr.w	ip, [r1]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001c72:	481a      	ldr	r0, [pc, #104]	; (8001cdc <MCboot+0x198>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001c74:	4929      	ldr	r1, [pc, #164]	; (8001d1c <MCboot+0x1d8>)
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001c76:	6812      	ldr	r2, [r2, #0]
  pMCIList[M1] = oMCInterface[M1];
 8001c78:	f8d8 8000 	ldr.w	r8, [r8]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001c7c:	6800      	ldr	r0, [r0, #0]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8001c7e:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001c80:	6809      	ldr	r1, [r1, #0]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8001c82:	f8db b000 	ldr.w	fp, [fp]
  pMCIList[M1] = oMCInterface[M1];
 8001c86:	f8c6 8000 	str.w	r8, [r6]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001c8a:	63da      	str	r2, [r3, #60]	; 0x3c
  MCT[M1].pSpeedSensorAux = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1;
 8001c8c:	4a1a      	ldr	r2, [pc, #104]	; (8001cf8 <MCboot+0x1b4>)
  MCT[M1].pPIDId = pPIDId[M1];
 8001c8e:	f8c3 c008 	str.w	ip, [r3, #8]
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 8001c92:	e9c3 2407 	strd	r2, r4, [r3, #28]
  pMCTList[M1] = &MCT[M1];
 8001c96:	9a01      	ldr	r2, [sp, #4]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001c98:	6118      	str	r0, [r3, #16]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001c9a:	e9c3 ae00 	strd	sl, lr, [r3]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8001c9e:	e9c3 1b0b 	strd	r1, fp, [r3, #44]	; 0x2c
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &HALL_M1;
 8001ca2:	e9c3 4705 	strd	r4, r7, [r3, #20]
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8001ca6:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  MCT[M1].pFF = MC_NULL;
 8001caa:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  MCT[M1].pSCC = MC_NULL;
 8001cae:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8001cb2:	625d      	str	r5, [r3, #36]	; 0x24
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8001cb4:	60dc      	str	r4, [r3, #12]
  MCT[M1].pStateMachine = &STM[M1];
 8001cb6:	ed83 8a0a 	vstr	s16, [r3, #40]	; 0x28
  MCT[M1].pOTT = MC_NULL;
 8001cba:	651c      	str	r4, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 8001cbc:	6013      	str	r3, [r2, #0]
  bMCBootCompleted = 1;
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <MCboot+0x1a4>)
 8001cc0:	f883 9000 	strb.w	r9, [r3]
}
 8001cc4:	b005      	add	sp, #20
 8001cc6:	ecbd 8b02 	vpop	{d8}
 8001cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cce:	bf00      	nop
 8001cd0:	200009e8 	.word	0x200009e8
 8001cd4:	200000f0 	.word	0x200000f0
 8001cd8:	200009fc 	.word	0x200009fc
 8001cdc:	20000934 	.word	0x20000934
 8001ce0:	20000350 	.word	0x20000350
 8001ce4:	200009c4 	.word	0x200009c4
 8001ce8:	2000078c 	.word	0x2000078c
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	20000938 	.word	0x20000938
 8001cf4:	2000052c 	.word	0x2000052c
 8001cf8:	20000404 	.word	0x20000404
 8001cfc:	200001e4 	.word	0x200001e4
 8001d00:	200001b8 	.word	0x200001b8
 8001d04:	2000093c 	.word	0x2000093c
 8001d08:	200009f8 	.word	0x200009f8
 8001d0c:	200003dc 	.word	0x200003dc
 8001d10:	2000023c 	.word	0x2000023c
 8001d14:	200009f4 	.word	0x200009f4
 8001d18:	200009f0 	.word	0x200009f0
 8001d1c:	20000930 	.word	0x20000930
 8001d20:	200003c4 	.word	0x200003c4
 8001d24:	200009cc 	.word	0x200009cc
 8001d28:	20000970 	.word	0x20000970
 8001d2c:	20000210 	.word	0x20000210
 8001d30:	200009c8 	.word	0x200009c8
 8001d34:	20000560 	.word	0x20000560
 8001d38:	20000948 	.word	0x20000948
 8001d3c:	20000940 	.word	0x20000940

08001d40 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop

08001d44 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001d44:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <FOC_CalcCurrRef+0x24>)
 8001d48:	2426      	movs	r4, #38	; 0x26
 8001d4a:	fb04 3400 	mla	r4, r4, r0, r3
 8001d4e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001d52:	b103      	cbz	r3, 8001d56 <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001d54:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001d56:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <FOC_CalcCurrRef+0x28>)
 8001d58:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001d5c:	f005 f8ea 	bl	8006f34 <STC_CalcTorqueReference>
 8001d60:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8001d62:	8220      	strh	r0, [r4, #16]
}
 8001d64:	bd10      	pop	{r4, pc}
 8001d66:	bf00      	nop
 8001d68:	20000948 	.word	0x20000948
 8001d6c:	200009fc 	.word	0x200009fc

08001d70 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001d70:	4b01      	ldr	r3, [pc, #4]	; (8001d78 <TSK_SetChargeBootCapDelayM1+0x8>)
 8001d72:	8018      	strh	r0, [r3, #0]
}
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	2000078e 	.word	0x2000078e

08001d7c <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8001d7e:	8818      	ldrh	r0, [r3, #0]
 8001d80:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001d82:	fab0 f080 	clz	r0, r0
 8001d86:	0940      	lsrs	r0, r0, #5
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	2000078e 	.word	0x2000078e

08001d90 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001d90:	4b01      	ldr	r3, [pc, #4]	; (8001d98 <TSK_SetStopPermanencyTimeM1+0x8>)
 8001d92:	8018      	strh	r0, [r3, #0]
}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20000792 	.word	0x20000792

08001d9c <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8001d9e:	8818      	ldrh	r0, [r3, #0]
 8001da0:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001da2:	fab0 f080 	clz	r0, r0
 8001da6:	0940      	lsrs	r0, r0, #5
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20000792 	.word	0x20000792

08001db0 <TSK_MediumFrequencyTaskM1>:
{
 8001db0:	b530      	push	{r4, r5, lr}
 8001db2:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8001db4:	2300      	movs	r3, #0
  (void) STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8001db6:	f10d 0106 	add.w	r1, sp, #6
 8001dba:	4851      	ldr	r0, [pc, #324]	; (8001f00 <TSK_MediumFrequencyTaskM1+0x150>)
  int16_t wAux = 0;
 8001dbc:	f8ad 3006 	strh.w	r3, [sp, #6]
  (void) STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8001dc0:	f005 fbda 	bl	8007578 <STO_PLL_CalcAvrgMecSpeedUnit>
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8001dc4:	f10d 0106 	add.w	r1, sp, #6
 8001dc8:	484e      	ldr	r0, [pc, #312]	; (8001f04 <TSK_MediumFrequencyTaskM1+0x154>)
  PQD_CalcElMotorPower( pMPM[M1] );
 8001dca:	4d4f      	ldr	r5, [pc, #316]	; (8001f08 <TSK_MediumFrequencyTaskM1+0x158>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8001dcc:	f003 ffec 	bl	8005da8 <HALL_CalcAvrgMecSpeedUnit>
 8001dd0:	4604      	mov	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 8001dd2:	6828      	ldr	r0, [r5, #0]
 8001dd4:	f004 fd9c 	bl	8006910 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8001dd8:	484c      	ldr	r0, [pc, #304]	; (8001f0c <TSK_MediumFrequencyTaskM1+0x15c>)
 8001dda:	f005 f995 	bl	8007108 <STM_GetState>
  switch ( StateM1 )
 8001dde:	1ec3      	subs	r3, r0, #3
 8001de0:	2b0f      	cmp	r3, #15
 8001de2:	d80d      	bhi.n	8001e00 <TSK_MediumFrequencyTaskM1+0x50>
 8001de4:	e8df f003 	tbb	[pc, r3]
 8001de8:	46332e22 	.word	0x46332e22
 8001dec:	0c086855 	.word	0x0c086855
 8001df0:	0c0c0c0c 	.word	0x0c0c0c0c
 8001df4:	0e7f710c 	.word	0x0e7f710c
    STM_NextState( &STM[M1], IDLE );
 8001df8:	4844      	ldr	r0, [pc, #272]	; (8001f0c <TSK_MediumFrequencyTaskM1+0x15c>)
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	f005 f910 	bl	8007020 <STM_NextState>
}
 8001e00:	b003      	add	sp, #12
 8001e02:	bd30      	pop	{r4, r5, pc}
    HALL_Clear( &HALL_M1 );
 8001e04:	483f      	ldr	r0, [pc, #252]	; (8001f04 <TSK_MediumFrequencyTaskM1+0x154>)
 8001e06:	f003 ff09 	bl	8005c1c <HALL_Clear>
    STO_PLL_Clear( &STO_PLL_M1 );
 8001e0a:	483d      	ldr	r0, [pc, #244]	; (8001f00 <TSK_MediumFrequencyTaskM1+0x150>)
 8001e0c:	f005 fc7e 	bl	800770c <STO_PLL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8001e10:	483e      	ldr	r0, [pc, #248]	; (8001f0c <TSK_MediumFrequencyTaskM1+0x15c>)
 8001e12:	2104      	movs	r1, #4
 8001e14:	f005 f904 	bl	8007020 <STM_NextState>
 8001e18:	2800      	cmp	r0, #0
 8001e1a:	d0f1      	beq.n	8001e00 <TSK_MediumFrequencyTaskM1+0x50>
      FOC_Clear( M1 );
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f7ff fe4d 	bl	8001abc <FOC_Clear>
      ICS_SwitchOnPWM( pwmcHandle[M1] );
 8001e22:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <TSK_MediumFrequencyTaskM1+0x160>)
 8001e24:	6818      	ldr	r0, [r3, #0]
 8001e26:	f004 fb49 	bl	80064bc <ICS_SwitchOnPWM>
 8001e2a:	e7e9      	b.n	8001e00 <TSK_MediumFrequencyTaskM1+0x50>
    ICS_TurnOnLowSides( pwmcHandle[M1] );
 8001e2c:	4b38      	ldr	r3, [pc, #224]	; (8001f10 <TSK_MediumFrequencyTaskM1+0x160>)
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	f004 fb20 	bl	8006474 <ICS_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8001e34:	2014      	movs	r0, #20
 8001e36:	f7ff ff9b 	bl	8001d70 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8001e3a:	2110      	movs	r1, #16
 8001e3c:	4833      	ldr	r0, [pc, #204]	; (8001f0c <TSK_MediumFrequencyTaskM1+0x15c>)
 8001e3e:	f005 f8ef 	bl	8007020 <STM_NextState>
    break;
 8001e42:	e7dd      	b.n	8001e00 <TSK_MediumFrequencyTaskM1+0x50>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 8001e44:	2105      	movs	r1, #5
 8001e46:	4831      	ldr	r0, [pc, #196]	; (8001f0c <TSK_MediumFrequencyTaskM1+0x15c>)
 8001e48:	f005 f8ea 	bl	8007020 <STM_NextState>
    break;
 8001e4c:	e7d8      	b.n	8001e00 <TSK_MediumFrequencyTaskM1+0x50>
	  FOC_InitAdditionalMethods(M1);
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f7ff ff76 	bl	8001d40 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8001e54:	2000      	movs	r0, #0
 8001e56:	f7ff ff75 	bl	8001d44 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8001e5a:	2106      	movs	r1, #6
 8001e5c:	482b      	ldr	r0, [pc, #172]	; (8001f0c <TSK_MediumFrequencyTaskM1+0x15c>)
 8001e5e:	f005 f8df 	bl	8007020 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001e62:	4b2c      	ldr	r3, [pc, #176]	; (8001f14 <TSK_MediumFrequencyTaskM1+0x164>)
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	f005 f8af 	bl	8006fc8 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8001e6a:	4b2b      	ldr	r3, [pc, #172]	; (8001f18 <TSK_MediumFrequencyTaskM1+0x168>)
 8001e6c:	6818      	ldr	r0, [r3, #0]
 8001e6e:	f7ff fc87 	bl	8001780 <MCI_ExecBufferedCommands>
    break;
 8001e72:	e7c5      	b.n	8001e00 <TSK_MediumFrequencyTaskM1+0x50>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8001e74:	4b28      	ldr	r3, [pc, #160]	; (8001f18 <TSK_MediumFrequencyTaskM1+0x168>)
 8001e76:	6818      	ldr	r0, [r3, #0]
 8001e78:	f7ff fc82 	bl	8001780 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f7ff ff61 	bl	8001d44 <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 8001e82:	2c00      	cmp	r4, #0
 8001e84:	d1bc      	bne.n	8001e00 <TSK_MediumFrequencyTaskM1+0x50>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 8001e86:	4622      	mov	r2, r4
 8001e88:	2120      	movs	r1, #32
 8001e8a:	4820      	ldr	r0, [pc, #128]	; (8001f0c <TSK_MediumFrequencyTaskM1+0x15c>)
 8001e8c:	f005 f8aa 	bl	8006fe4 <STM_FaultProcessing>
 8001e90:	e7b6      	b.n	8001e00 <TSK_MediumFrequencyTaskM1+0x50>
    ICS_SwitchOffPWM( pwmcHandle[M1] );
 8001e92:	4b1f      	ldr	r3, [pc, #124]	; (8001f10 <TSK_MediumFrequencyTaskM1+0x160>)
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	f004 fb55 	bl	8006544 <ICS_SwitchOffPWM>
    FOC_Clear( M1 );
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f7ff fe0e 	bl	8001abc <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8001ea0:	6828      	ldr	r0, [r5, #0]
 8001ea2:	f004 fc47 	bl	8006734 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8001ea6:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001eaa:	f7ff ff71 	bl	8001d90 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 8001eae:	2108      	movs	r1, #8
 8001eb0:	4816      	ldr	r0, [pc, #88]	; (8001f0c <TSK_MediumFrequencyTaskM1+0x15c>)
 8001eb2:	f005 f8b5 	bl	8007020 <STM_NextState>
    break;
 8001eb6:	e7a3      	b.n	8001e00 <TSK_MediumFrequencyTaskM1+0x50>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8001eb8:	f7ff ff70 	bl	8001d9c <TSK_StopPermanencyTimeHasElapsedM1>
 8001ebc:	2800      	cmp	r0, #0
 8001ebe:	d09f      	beq.n	8001e00 <TSK_MediumFrequencyTaskM1+0x50>
      STM_NextState( &STM[M1], STOP_IDLE );
 8001ec0:	2109      	movs	r1, #9
 8001ec2:	4812      	ldr	r0, [pc, #72]	; (8001f0c <TSK_MediumFrequencyTaskM1+0x15c>)
 8001ec4:	f005 f8ac 	bl	8007020 <STM_NextState>
 8001ec8:	e79a      	b.n	8001e00 <TSK_MediumFrequencyTaskM1+0x50>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 8001eca:	f7ff ff57 	bl	8001d7c <TSK_ChargeBootCapDelayHasElapsedM1>
 8001ece:	2800      	cmp	r0, #0
 8001ed0:	d096      	beq.n	8001e00 <TSK_MediumFrequencyTaskM1+0x50>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <TSK_MediumFrequencyTaskM1+0x160>)
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	6818      	ldr	r0, [r3, #0]
 8001ed8:	f004 fece 	bl	8006c78 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 8001edc:	2111      	movs	r1, #17
 8001ede:	480b      	ldr	r0, [pc, #44]	; (8001f0c <TSK_MediumFrequencyTaskM1+0x15c>)
 8001ee0:	f005 f89e 	bl	8007020 <STM_NextState>
 8001ee4:	e78c      	b.n	8001e00 <TSK_MediumFrequencyTaskM1+0x50>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <TSK_MediumFrequencyTaskM1+0x160>)
 8001ee8:	2101      	movs	r1, #1
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	f004 fec4 	bl	8006c78 <PWMC_CurrentReadingCalibr>
 8001ef0:	2800      	cmp	r0, #0
 8001ef2:	d085      	beq.n	8001e00 <TSK_MediumFrequencyTaskM1+0x50>
      STM_NextState( &STM[M1], CLEAR );
 8001ef4:	2112      	movs	r1, #18
 8001ef6:	4805      	ldr	r0, [pc, #20]	; (8001f0c <TSK_MediumFrequencyTaskM1+0x15c>)
 8001ef8:	f005 f892 	bl	8007020 <STM_NextState>
 8001efc:	e780      	b.n	8001e00 <TSK_MediumFrequencyTaskM1+0x50>
 8001efe:	bf00      	nop
 8001f00:	20000404 	.word	0x20000404
 8001f04:	200000f0 	.word	0x200000f0
 8001f08:	200009f4 	.word	0x200009f4
 8001f0c:	200009e8 	.word	0x200009e8
 8001f10:	20000934 	.word	0x20000934
 8001f14:	200009fc 	.word	0x200009fc
 8001f18:	20000940 	.word	0x20000940

08001f1c <MC_Scheduler>:
{
 8001f1c:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <MC_Scheduler+0x48>)
 8001f20:	781c      	ldrb	r4, [r3, #0]
 8001f22:	2c01      	cmp	r4, #1
 8001f24:	d000      	beq.n	8001f28 <MC_Scheduler+0xc>
}
 8001f26:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 8001f28:	4d0f      	ldr	r5, [pc, #60]	; (8001f68 <MC_Scheduler+0x4c>)
 8001f2a:	882b      	ldrh	r3, [r5, #0]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	b1ab      	cbz	r3, 8001f5c <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 8001f30:	882b      	ldrh	r3, [r5, #0]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8001f38:	4a0c      	ldr	r2, [pc, #48]	; (8001f6c <MC_Scheduler+0x50>)
 8001f3a:	8813      	ldrh	r3, [r2, #0]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	b11b      	cbz	r3, 8001f48 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 8001f40:	8813      	ldrh	r3, [r2, #0]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8001f48:	4a09      	ldr	r2, [pc, #36]	; (8001f70 <MC_Scheduler+0x54>)
 8001f4a:	8813      	ldrh	r3, [r2, #0]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0e9      	beq.n	8001f26 <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 8001f52:	8813      	ldrh	r3, [r2, #0]
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	8013      	strh	r3, [r2, #0]
}
 8001f5a:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 8001f5c:	f7ff ff28 	bl	8001db0 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8001f60:	802c      	strh	r4, [r5, #0]
 8001f62:	e7e9      	b.n	8001f38 <MC_Scheduler+0x1c>
 8001f64:	2000078c 	.word	0x2000078c
 8001f68:	20000790 	.word	0x20000790
 8001f6c:	2000078e 	.word	0x2000078e
 8001f70:	20000792 	.word	0x20000792

08001f74 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  Observer_Inputs_t STO_aux_Inputs; /*  only if sensorless aux*/
  STO_aux_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001f78:	4c3b      	ldr	r4, [pc, #236]	; (8002068 <TSK_HighFrequencyTask+0xf4>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001f7a:	4f3c      	ldr	r7, [pc, #240]	; (800206c <TSK_HighFrequencyTask+0xf8>)
  STO_aux_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001f7c:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 8001f80:	b088      	sub	sp, #32
  STO_aux_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001f82:	9005      	str	r0, [sp, #20]
  HALL_CalcElAngle (&HALL_M1);
 8001f84:	483a      	ldr	r0, [pc, #232]	; (8002070 <TSK_HighFrequencyTask+0xfc>)
 8001f86:	f003 feed 	bl	8005d64 <HALL_CalcElAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001f8a:	4b3a      	ldr	r3, [pc, #232]	; (8002074 <TSK_HighFrequencyTask+0x100>)
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	f004 ff67 	bl	8006e60 <STC_GetSpeedSensor>
 8001f92:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001f94:	f004 ff0e 	bl	8006db4 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001f98:	a902      	add	r1, sp, #8
  hElAngle = SPD_GetElAngle(speedHandle);
 8001f9a:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001f9c:	6838      	ldr	r0, [r7, #0]
 8001f9e:	f004 fd3f 	bl	8006a20 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 8001fa2:	9802      	ldr	r0, [sp, #8]
 8001fa4:	f7ff fcb2 	bl	800190c <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001fa8:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8001faa:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001fac:	f7ff fd24 	bl	80019f8 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001fb0:	4a31      	ldr	r2, [pc, #196]	; (8002078 <TSK_HighFrequencyTask+0x104>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001fb2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001fb6:	9000      	str	r0, [sp, #0]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001fb8:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001fba:	1ac9      	subs	r1, r1, r3
 8001fbc:	6810      	ldr	r0, [r2, #0]
 8001fbe:	f004 fc61 	bl	8006884 <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001fc2:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
  Vqd.d = PI_Controller(pPIDId[M1],
 8001fc6:	4b2d      	ldr	r3, [pc, #180]	; (800207c <TSK_HighFrequencyTask+0x108>)
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001fc8:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001fcc:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 8001fce:	1a89      	subs	r1, r1, r2
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	f004 fc57 	bl	8006884 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001fd6:	4b2a      	ldr	r3, [pc, #168]	; (8002080 <TSK_HighFrequencyTask+0x10c>)
 8001fd8:	f8ad 8004 	strh.w	r8, [sp, #4]
 8001fdc:	f8ad 0006 	strh.w	r0, [sp, #6]
 8001fe0:	9901      	ldr	r1, [sp, #4]
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	f003 fd2a 	bl	8005a3c <Circle_Limitation>
 8001fe8:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001fea:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001fec:	fa0f f883 	sxth.w	r8, r3
 8001ff0:	141d      	asrs	r5, r3, #16
 8001ff2:	9301      	str	r3, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001ff4:	f004 fee6 	bl	8006dc4 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001ff8:	4631      	mov	r1, r6
 8001ffa:	9801      	ldr	r0, [sp, #4]
 8001ffc:	f7ff fd3e 	bl	8001a7c <MCM_Rev_Park>
 8002000:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002002:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002004:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002006:	f004 fd0d 	bl	8006a24 <PWMC_SetPhaseVoltage>
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 800200a:	4623      	mov	r3, r4
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800200c:	4601      	mov	r1, r0
  FOCVars[M1].Iab = Iab;
 800200e:	9802      	ldr	r0, [sp, #8]
 8002010:	f843 0b04 	str.w	r0, [r3], #4
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8002014:	9803      	ldr	r0, [sp, #12]
 8002016:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8002018:	9800      	ldr	r0, [sp, #0]
 800201a:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_FOC_DURATION)
 800201c:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 800201e:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Vqd = Vqd;
 8002020:	f8a4 8016 	strh.w	r8, [r4, #22]
 8002024:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].hElAngle = hElAngle;
 8002026:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 8002028:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_FOC_DURATION)
 800202c:	d013      	beq.n	8002056 <TSK_HighFrequencyTask+0xe2>
    STO_aux_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 800202e:	4a15      	ldr	r2, [pc, #84]	; (8002084 <TSK_HighFrequencyTask+0x110>)
    STO_aux_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8002030:	6818      	ldr	r0, [r3, #0]
 8002032:	9006      	str	r0, [sp, #24]
    STO_aux_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8002034:	6810      	ldr	r0, [r2, #0]
 8002036:	f003 fcf9 	bl	8005a2c <VBS_GetAvBusVoltage_d>
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_aux_Inputs);
 800203a:	a905      	add	r1, sp, #20
    STO_aux_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 800203c:	4603      	mov	r3, r0
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_aux_Inputs);
 800203e:	4812      	ldr	r0, [pc, #72]	; (8002088 <TSK_HighFrequencyTask+0x114>)
    STO_aux_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8002040:	f8ad 301c 	strh.w	r3, [sp, #28]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_aux_Inputs);
 8002044:	f005 f9ae 	bl	80073a4 <STO_PLL_CalcElAngle>
	STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1);
 8002048:	480f      	ldr	r0, [pc, #60]	; (8002088 <TSK_HighFrequencyTask+0x114>)
 800204a:	f005 fb35 	bl	80076b8 <STO_PLL_CalcAvrgElSpeedDpp>
}
 800204e:	2000      	movs	r0, #0
 8002050:	b008      	add	sp, #32
 8002052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	480c      	ldr	r0, [pc, #48]	; (800208c <TSK_HighFrequencyTask+0x118>)
 800205a:	f004 ffc3 	bl	8006fe4 <STM_FaultProcessing>
}
 800205e:	2000      	movs	r0, #0
 8002060:	b008      	add	sp, #32
 8002062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002066:	bf00      	nop
 8002068:	20000948 	.word	0x20000948
 800206c:	20000934 	.word	0x20000934
 8002070:	200000f0 	.word	0x200000f0
 8002074:	200009fc 	.word	0x200009fc
 8002078:	2000093c 	.word	0x2000093c
 800207c:	200009f8 	.word	0x200009f8
 8002080:	200009c4 	.word	0x200009c4
 8002084:	200009c8 	.word	0x200009c8
 8002088:	20000404 	.word	0x20000404
 800208c:	200009e8 	.word	0x200009e8

08002090 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8002090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002092:	4b20      	ldr	r3, [pc, #128]	; (8002114 <TSK_SafetyTask_PWMOFF+0x84>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002094:	4e20      	ldr	r6, [pc, #128]	; (8002118 <TSK_SafetyTask_PWMOFF+0x88>)
{
 8002096:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002098:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800209c:	f004 fba0 	bl	80067e0 <NTC_CalcAvTemp>
 80020a0:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80020a2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80020a6:	f004 fe11 	bl	8006ccc <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80020aa:	f025 050c 	bic.w	r5, r5, #12
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80020ae:	4328      	orrs	r0, r5
 80020b0:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 80020b2:	b334      	cbz	r4, 8002102 <TSK_SafetyTask_PWMOFF+0x72>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 80020b4:	4f19      	ldr	r7, [pc, #100]	; (800211c <TSK_SafetyTask_PWMOFF+0x8c>)
 80020b6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80020ba:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 80020be:	43ea      	mvns	r2, r5
 80020c0:	b292      	uxth	r2, r2
 80020c2:	4629      	mov	r1, r5
 80020c4:	4638      	mov	r0, r7
 80020c6:	f004 ff8d 	bl	8006fe4 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 80020ca:	4638      	mov	r0, r7
 80020cc:	f005 f81c 	bl	8007108 <STM_GetState>
 80020d0:	280a      	cmp	r0, #10
 80020d2:	d002      	beq.n	80020da <TSK_SafetyTask_PWMOFF+0x4a>
 80020d4:	280b      	cmp	r0, #11
 80020d6:	d00e      	beq.n	80020f6 <TSK_SafetyTask_PWMOFF+0x66>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 80020d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80020da:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80020de:	f004 fdc9 	bl	8006c74 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 80020e2:	4620      	mov	r0, r4
 80020e4:	f7ff fcea 	bl	8001abc <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80020e8:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <TSK_SafetyTask_PWMOFF+0x90>)
 80020ea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 80020ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80020f2:	f004 bb1f 	b.w	8006734 <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80020f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 80020fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80020fe:	f004 bdb9 	b.w	8006c74 <PWMC_SwitchOffPWM>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 8002102:	4b08      	ldr	r3, [pc, #32]	; (8002124 <TSK_SafetyTask_PWMOFF+0x94>)
 8002104:	6818      	ldr	r0, [r3, #0]
 8002106:	f004 fe17 	bl	8006d38 <RVBS_CalcAvVbus>
 800210a:	f020 000c 	bic.w	r0, r0, #12
 800210e:	4305      	orrs	r5, r0
 8002110:	b2ad      	uxth	r5, r5
 8002112:	e7cf      	b.n	80020b4 <TSK_SafetyTask_PWMOFF+0x24>
 8002114:	20000930 	.word	0x20000930
 8002118:	20000934 	.word	0x20000934
 800211c:	200009e8 	.word	0x200009e8
 8002120:	200009f4 	.word	0x200009f4
 8002124:	200009c8 	.word	0x200009c8

08002128 <TSK_SafetyTask>:
{
 8002128:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <TSK_SafetyTask+0x1c>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d000      	beq.n	8002134 <TSK_SafetyTask+0xc>
}
 8002132:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8002134:	2000      	movs	r0, #0
 8002136:	f7ff ffab 	bl	8002090 <TSK_SafetyTask_PWMOFF>
}
 800213a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 800213e:	f000 bd99 	b.w	8002c74 <RCM_ExecUserConv>
 8002142:	bf00      	nop
 8002144:	2000078c 	.word	0x2000078c

08002148 <MC_RunMotorControlTasks>:
{
 8002148:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <MC_RunMotorControlTasks+0x1c>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	b903      	cbnz	r3, 8002152 <MC_RunMotorControlTasks+0xa>
}
 8002150:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8002152:	f7ff fee3 	bl	8001f1c <MC_Scheduler>
    TSK_SafetyTask();
 8002156:	f7ff ffe7 	bl	8002128 <TSK_SafetyTask>
}
 800215a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 800215e:	f001 b90b 	b.w	8003378 <UI_Scheduler>
 8002162:	bf00      	nop
 8002164:	2000078c 	.word	0x2000078c

08002168 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8002168:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  ICS_SwitchOffPWM(pwmcHandle[M1]);
 800216a:	4b05      	ldr	r3, [pc, #20]	; (8002180 <TSK_HardwareFaultTask+0x18>)
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	f004 f9e9 	bl	8006544 <ICS_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8002172:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8002176:	4803      	ldr	r0, [pc, #12]	; (8002184 <TSK_HardwareFaultTask+0x1c>)
 8002178:	2200      	movs	r2, #0
 800217a:	2180      	movs	r1, #128	; 0x80
 800217c:	f004 bf32 	b.w	8006fe4 <STM_FaultProcessing>
 8002180:	20000934 	.word	0x20000934
 8002184:	200009e8 	.word	0x200009e8

08002188 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8002188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800218c:	4b50      	ldr	r3, [pc, #320]	; (80022d0 <mc_lock_pins+0x148>)
 800218e:	4951      	ldr	r1, [pc, #324]	; (80022d4 <mc_lock_pins+0x14c>)
 8002190:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002192:	2510      	movs	r5, #16
 8002194:	61dd      	str	r5, [r3, #28]
 8002196:	b08e      	sub	sp, #56	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002198:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800219a:	69d8      	ldr	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800219c:	4a4e      	ldr	r2, [pc, #312]	; (80022d8 <mc_lock_pins+0x150>)
  temp = READ_REG(GPIOx->LCKR);
 800219e:	900d      	str	r0, [sp, #52]	; 0x34
  (void) temp;
 80021a0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021a2:	484e      	ldr	r0, [pc, #312]	; (80022dc <mc_lock_pins+0x154>)
 80021a4:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80021a6:	2408      	movs	r4, #8
 80021a8:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021aa:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80021ac:	69d0      	ldr	r0, [r2, #28]
 80021ae:	900c      	str	r0, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021b0:	f44f 3482 	mov.w	r4, #66560	; 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 80021b4:	f44f 6780 	mov.w	r7, #1024	; 0x400
  (void) temp;
 80021b8:	980c      	ldr	r0, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021ba:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80021bc:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021be:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80021c0:	69d0      	ldr	r0, [r2, #28]
 80021c2:	900b      	str	r0, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 80021c4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021c8:	f44f 30c0 	mov.w	r0, #98304	; 0x18000
  (void) temp;
 80021cc:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021d0:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80021d2:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021d4:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80021d6:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 80021da:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
  (void) temp;
 80021de:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021e2:	f8df c104 	ldr.w	ip, [pc, #260]	; 80022e8 <mc_lock_pins+0x160>
 80021e6:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80021ea:	f44f 7e80 	mov.w	lr, #256	; 0x100
 80021ee:	f8c3 e01c 	str.w	lr, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021f2:	f8c3 c01c 	str.w	ip, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80021f6:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 80021fa:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 80021fe:	f44f 7e00 	mov.w	lr, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002202:	f44f 3c81 	mov.w	ip, #66048	; 0x10200
  (void) temp;
 8002206:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800220a:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800220e:	f8c3 e01c 	str.w	lr, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002212:	f8c3 c01c 	str.w	ip, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002216:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 800221a:	f8cd c020 	str.w	ip, [sp, #32]
  (void) temp;
 800221e:	f8dd e020 	ldr.w	lr, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002222:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 80022ec <mc_lock_pins+0x164>
 8002226:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800222a:	f04f 0e40 	mov.w	lr, #64	; 0x40
 800222e:	f8c3 e01c 	str.w	lr, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002232:	f8c3 c01c 	str.w	ip, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002236:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 800223a:	f8cd c01c 	str.w	ip, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800223e:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002242:	f44f 3ca0 	mov.w	ip, #81920	; 0x14000
  (void) temp;
 8002246:	f8dd 801c 	ldr.w	r8, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800224a:	f8c2 c01c 	str.w	ip, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800224e:	f8c2 e01c 	str.w	lr, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002252:	f8c2 c01c 	str.w	ip, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002256:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800225a:	f8cd c018 	str.w	ip, [sp, #24]
  (void) temp;
 800225e:	f8dd c018 	ldr.w	ip, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002262:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002264:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002266:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002268:	69dc      	ldr	r4, [r3, #28]
 800226a:	9405      	str	r4, [sp, #20]
  (void) temp;
 800226c:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800226e:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002270:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002272:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002274:	69d0      	ldr	r0, [r2, #28]
 8002276:	9004      	str	r0, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002278:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800227c:	f44f 3090 	mov.w	r0, #73728	; 0x12000
  (void) temp;
 8002280:	9e04      	ldr	r6, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002282:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002284:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002286:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002288:	69d0      	ldr	r0, [r2, #28]
 800228a:	9003      	str	r0, [sp, #12]
  (void) temp;
 800228c:	9c03      	ldr	r4, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800228e:	4814      	ldr	r0, [pc, #80]	; (80022e0 <mc_lock_pins+0x158>)
 8002290:	f8c2 041c 	str.w	r0, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002294:	2420      	movs	r4, #32
 8002296:	f8c2 441c 	str.w	r4, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800229a:	f8c2 041c 	str.w	r0, [r2, #1052]	; 0x41c
  temp = READ_REG(GPIOx->LCKR);
 800229e:	f8d2 041c 	ldr.w	r0, [r2, #1052]	; 0x41c
 80022a2:	9002      	str	r0, [sp, #8]
  (void) temp;
 80022a4:	9c02      	ldr	r4, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022a6:	480f      	ldr	r0, [pc, #60]	; (80022e4 <mc_lock_pins+0x15c>)
 80022a8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80022aa:	2402      	movs	r4, #2
 80022ac:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022ae:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	9301      	str	r3, [sp, #4]
  (void) temp;
 80022b4:	9b01      	ldr	r3, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022b6:	f8c2 141c 	str.w	r1, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, PinMask);
 80022ba:	f8c2 541c 	str.w	r5, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022be:	f8c2 141c 	str.w	r1, [r2, #1052]	; 0x41c
  temp = READ_REG(GPIOx->LCKR);
 80022c2:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 80022c6:	9300      	str	r3, [sp, #0]
  (void) temp;
 80022c8:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
}
 80022ca:	b00e      	add	sp, #56	; 0x38
 80022cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022d0:	40020000 	.word	0x40020000
 80022d4:	00010010 	.word	0x00010010
 80022d8:	40020400 	.word	0x40020400
 80022dc:	00010008 	.word	0x00010008
 80022e0:	00010020 	.word	0x00010020
 80022e4:	00010002 	.word	0x00010002
 80022e8:	00010100 	.word	0x00010100
 80022ec:	00010040 	.word	0x00010040

080022f0 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 80022f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022f4:	b08e      	sub	sp, #56	; 0x38
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 80022f6:	f04f 0800 	mov.w	r8, #0
{
 80022fa:	4616      	mov	r6, r2
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 80022fc:	094a      	lsrs	r2, r1, #5
{
 80022fe:	460c      	mov	r4, r1
 8002300:	461f      	mov	r7, r3
 8002302:	4605      	mov	r5, r0
  bool bNoError = false; // Default is error
 8002304:	f88d 8011 	strb.w	r8, [sp, #17]
  if (bMotorSelection != 0)
 8002308:	d123      	bne.n	8002352 <MCP_ReceivedFrame+0x62>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 800230a:	2912      	cmp	r1, #18
 800230c:	d814      	bhi.n	8002338 <MCP_ReceivedFrame+0x48>
 800230e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002312:	0016      	.short	0x0016
 8002314:	00db0049 	.word	0x00db0049
 8002318:	0013016d 	.word	0x0013016d
 800231c:	017a0013 	.word	0x017a0013
 8002320:	02030227 	.word	0x02030227
 8002324:	01a7023f 	.word	0x01a7023f
 8002328:	01d701c0 	.word	0x01d701c0
 800232c:	001301f0 	.word	0x001301f0
 8002330:	00130013 	.word	0x00130013
 8002334:	00160013 	.word	0x00160013
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 8002338:	2301      	movs	r3, #1
 800233a:	f88d 3016 	strb.w	r3, [sp, #22]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 800233e:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8002342:	2301      	movs	r3, #1
 8002344:	f10d 0216 	add.w	r2, sp, #22
 8002348:	21ff      	movs	r1, #255	; 0xff
 800234a:	47a0      	blx	r4
    }
  }
}
 800234c:	b00e      	add	sp, #56	; 0x38
 800234e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8002352:	3a01      	subs	r2, #1
 8002354:	4641      	mov	r1, r8
 8002356:	9203      	str	r2, [sp, #12]
 8002358:	f001 f864 	bl	8003424 <UI_SetReg>
 800235c:	2800      	cmp	r0, #0
 800235e:	f000 823c 	beq.w	80027da <MCP_ReceivedFrame+0x4ea>
      if (pHandle->pDAC)
 8002362:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
      Code &= 0x1F; /* Mask: 0001|1111 */
 8002366:	f004 041f 	and.w	r4, r4, #31
      if (pHandle->pDAC)
 800236a:	b118      	cbz	r0, 8002374 <MCP_ReceivedFrame+0x84>
        UI_SetReg(&pHandle->pDAC->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1);
 800236c:	9a03      	ldr	r2, [sp, #12]
 800236e:	4641      	mov	r1, r8
 8002370:	f001 f858 	bl	8003424 <UI_SetReg>
  switch (Code)
 8002374:	2c12      	cmp	r4, #18
 8002376:	f200 8239 	bhi.w	80027ec <MCP_ReceivedFrame+0x4fc>
 800237a:	e8df f014 	tbh	[pc, r4, lsl #1]
 800237e:	01eb      	.short	0x01eb
 8002380:	00a50013 	.word	0x00a50013
 8002384:	02370137 	.word	0x02370137
 8002388:	01440237 	.word	0x01440237
 800238c:	01cd01f1 	.word	0x01cd01f1
 8002390:	01710209 	.word	0x01710209
 8002394:	01a1018a 	.word	0x01a1018a
 8002398:	023701ba 	.word	0x023701ba
 800239c:	02370237 	.word	0x02370237
 80023a0:	01eb0237 	.word	0x01eb0237
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80023a4:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 80023a6:	2305      	movs	r3, #5
 80023a8:	f88d 3016 	strb.w	r3, [sp, #22]
      switch (bRegID)
 80023ac:	2988      	cmp	r1, #136	; 0x88
 80023ae:	f200 8238 	bhi.w	8002822 <MCP_ReceivedFrame+0x532>
 80023b2:	e8df f011 	tbh	[pc, r1, lsl #1]
 80023b6:	029c      	.short	0x029c
 80023b8:	02360236 	.word	0x02360236
 80023bc:	0236027e 	.word	0x0236027e
 80023c0:	023a023a 	.word	0x023a023a
 80023c4:	023a023a 	.word	0x023a023a
 80023c8:	023a023a 	.word	0x023a023a
 80023cc:	023a023a 	.word	0x023a023a
 80023d0:	023a023a 	.word	0x023a023a
 80023d4:	0259023a 	.word	0x0259023a
 80023d8:	02360259 	.word	0x02360259
 80023dc:	023a0236 	.word	0x023a0236
 80023e0:	023a023a 	.word	0x023a023a
 80023e4:	023a023a 	.word	0x023a023a
 80023e8:	02360236 	.word	0x02360236
 80023ec:	02880236 	.word	0x02880236
 80023f0:	02360292 	.word	0x02360292
 80023f4:	02360236 	.word	0x02360236
 80023f8:	02360236 	.word	0x02360236
 80023fc:	02360236 	.word	0x02360236
 8002400:	02360236 	.word	0x02360236
 8002404:	02360236 	.word	0x02360236
 8002408:	02360236 	.word	0x02360236
 800240c:	02360236 	.word	0x02360236
 8002410:	02360236 	.word	0x02360236
 8002414:	02360236 	.word	0x02360236
 8002418:	02360236 	.word	0x02360236
 800241c:	02360236 	.word	0x02360236
 8002420:	02360236 	.word	0x02360236
 8002424:	02360236 	.word	0x02360236
 8002428:	02360236 	.word	0x02360236
 800242c:	02360236 	.word	0x02360236
 8002430:	02360236 	.word	0x02360236
 8002434:	02360236 	.word	0x02360236
 8002438:	0236023a 	.word	0x0236023a
 800243c:	02360236 	.word	0x02360236
 8002440:	02590236 	.word	0x02590236
 8002444:	02590259 	.word	0x02590259
 8002448:	02360236 	.word	0x02360236
 800244c:	02360236 	.word	0x02360236
 8002450:	02360236 	.word	0x02360236
 8002454:	0236023a 	.word	0x0236023a
 8002458:	02360236 	.word	0x02360236
 800245c:	023a023a 	.word	0x023a023a
 8002460:	023a023a 	.word	0x023a023a
 8002464:	023a023a 	.word	0x023a023a
 8002468:	0236023a 	.word	0x0236023a
 800246c:	02360259 	.word	0x02360259
 8002470:	02360236 	.word	0x02360236
 8002474:	02360236 	.word	0x02360236
 8002478:	0236023a 	.word	0x0236023a
 800247c:	023a0236 	.word	0x023a0236
 8002480:	0236023a 	.word	0x0236023a
 8002484:	02360236 	.word	0x02360236
 8002488:	02360236 	.word	0x02360236
 800248c:	02360236 	.word	0x02360236
 8002490:	02360236 	.word	0x02360236
 8002494:	02360236 	.word	0x02360236
 8002498:	02360236 	.word	0x02360236
 800249c:	027e0236 	.word	0x027e0236
 80024a0:	02590259 	.word	0x02590259
 80024a4:	02590259 	.word	0x02590259
 80024a8:	02360259 	.word	0x02360259
 80024ac:	02360236 	.word	0x02360236
 80024b0:	02590259 	.word	0x02590259
 80024b4:	02360236 	.word	0x02360236
 80024b8:	02360236 	.word	0x02360236
 80024bc:	02360236 	.word	0x02360236
 80024c0:	023a0236 	.word	0x023a0236
 80024c4:	023a023a 	.word	0x023a023a
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80024c8:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 80024ca:	2303      	movs	r3, #3
 80024cc:	f88d 3016 	strb.w	r3, [sp, #22]
      switch (bRegID)
 80024d0:	2988      	cmp	r1, #136	; 0x88
 80024d2:	f200 813f 	bhi.w	8002754 <MCP_ReceivedFrame+0x464>
 80024d6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80024da:	01da      	.short	0x01da
 80024dc:	01da01b5 	.word	0x01da01b5
 80024e0:	01b501da 	.word	0x01b501da
 80024e4:	01920192 	.word	0x01920192
 80024e8:	01920192 	.word	0x01920192
 80024ec:	01920192 	.word	0x01920192
 80024f0:	01920192 	.word	0x01920192
 80024f4:	01920192 	.word	0x01920192
 80024f8:	01920192 	.word	0x01920192
 80024fc:	01920192 	.word	0x01920192
 8002500:	01920192 	.word	0x01920192
 8002504:	01920192 	.word	0x01920192
 8002508:	01920192 	.word	0x01920192
 800250c:	01920192 	.word	0x01920192
 8002510:	02300192 	.word	0x02300192
 8002514:	01b5021c 	.word	0x01b5021c
 8002518:	01920192 	.word	0x01920192
 800251c:	01da0192 	.word	0x01da0192
 8002520:	013d013d 	.word	0x013d013d
 8002524:	013d013d 	.word	0x013d013d
 8002528:	013d013d 	.word	0x013d013d
 800252c:	013d013d 	.word	0x013d013d
 8002530:	013d013d 	.word	0x013d013d
 8002534:	013d013d 	.word	0x013d013d
 8002538:	013d013d 	.word	0x013d013d
 800253c:	013d013d 	.word	0x013d013d
 8002540:	013d013d 	.word	0x013d013d
 8002544:	013d013d 	.word	0x013d013d
 8002548:	013d013d 	.word	0x013d013d
 800254c:	013d013d 	.word	0x013d013d
 8002550:	013d013d 	.word	0x013d013d
 8002554:	013d013d 	.word	0x013d013d
 8002558:	013d013d 	.word	0x013d013d
 800255c:	013d0192 	.word	0x013d0192
 8002560:	013d013d 	.word	0x013d013d
 8002564:	01b5013d 	.word	0x01b5013d
 8002568:	01b501b5 	.word	0x01b501b5
 800256c:	01920192 	.word	0x01920192
 8002570:	01920192 	.word	0x01920192
 8002574:	01b501da 	.word	0x01b501da
 8002578:	01920192 	.word	0x01920192
 800257c:	01920192 	.word	0x01920192
 8002580:	01920192 	.word	0x01920192
 8002584:	01920192 	.word	0x01920192
 8002588:	01920192 	.word	0x01920192
 800258c:	01da0192 	.word	0x01da0192
 8002590:	013d01b5 	.word	0x013d01b5
 8002594:	01920192 	.word	0x01920192
 8002598:	01920192 	.word	0x01920192
 800259c:	013d0192 	.word	0x013d0192
 80025a0:	0192013d 	.word	0x0192013d
 80025a4:	01da0192 	.word	0x01da0192
 80025a8:	01b501da 	.word	0x01b501da
 80025ac:	01b501b5 	.word	0x01b501b5
 80025b0:	01b501b5 	.word	0x01b501b5
 80025b4:	019201da 	.word	0x019201da
 80025b8:	01b50192 	.word	0x01b50192
 80025bc:	0192013d 	.word	0x0192013d
 80025c0:	01da0192 	.word	0x01da0192
 80025c4:	01b501b5 	.word	0x01b501b5
 80025c8:	01b501b5 	.word	0x01b501b5
 80025cc:	01b501b5 	.word	0x01b501b5
 80025d0:	01b501b5 	.word	0x01b501b5
 80025d4:	01b501b5 	.word	0x01b501b5
 80025d8:	01da01b5 	.word	0x01da01b5
 80025dc:	01da013d 	.word	0x01da013d
 80025e0:	01b501b5 	.word	0x01b501b5
 80025e4:	019201b5 	.word	0x019201b5
 80025e8:	01920192 	.word	0x01920192
      bErrorCode = ERROR_CODE_WRONG_CMD;
 80025ec:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 80025ee:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 80025f0:	f88d 3016 	strb.w	r3, [sp, #22]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 80025f4:	4628      	mov	r0, r5
 80025f6:	f001 f883 	bl	8003700 <UI_ExecCmd>
 80025fa:	f88d 0011 	strb.w	r0, [sp, #17]
    if (bNoError)
 80025fe:	2800      	cmp	r0, #0
 8002600:	f43f ae9d 	beq.w	800233e <MCP_ReceivedFrame+0x4e>
 8002604:	e03c      	b.n	8002680 <MCP_ReceivedFrame+0x390>
 8002606:	ac06      	add	r4, sp, #24
 8002608:	2100      	movs	r1, #0
 800260a:	4620      	mov	r0, r4
 800260c:	2220      	movs	r2, #32
 800260e:	f005 f95f 	bl	80078d0 <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8002612:	f8d5 60c0 	ldr.w	r6, [r5, #192]	; 0xc0
 8002616:	f10d 001a 	add.w	r0, sp, #26
 800261a:	1e71      	subs	r1, r6, #1
 800261c:	2300      	movs	r3, #0
 800261e:	e005      	b.n	800262c <MCP_ReceivedFrame+0x33c>
 8002620:	3301      	adds	r3, #1
 8002622:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 8002624:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8002628:	f000 8192 	beq.w	8002950 <MCP_ReceivedFrame+0x660>
 800262c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002630:	2a09      	cmp	r2, #9
 8002632:	d1f5      	bne.n	8002620 <MCP_ReceivedFrame+0x330>
 8002634:	1d5a      	adds	r2, r3, #5
 8002636:	1dd9      	adds	r1, r3, #7
 8002638:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 800263a:	5cb2      	ldrb	r2, [r6, r2]
 800263c:	f88d 2018 	strb.w	r2, [sp, #24]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8002640:	5c72      	ldrb	r2, [r6, r1]
 8002642:	f88d 2019 	strb.w	r2, [sp, #25]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8002646:	5cf3      	ldrb	r3, [r6, r3]
 8002648:	f88d 301a 	strb.w	r3, [sp, #26]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 800264c:	4622      	mov	r2, r4
 800264e:	2320      	movs	r3, #32
 8002650:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8002654:	21f0      	movs	r1, #240	; 0xf0
 8002656:	47a0      	blx	r4
      bNoError = true;
 8002658:	2301      	movs	r3, #1
 800265a:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 800265e:	e00f      	b.n	8002680 <MCP_ReceivedFrame+0x390>
      hIdRef = buffer[2] + (buffer[3] << 8);
 8002660:	78f0      	ldrb	r0, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8002662:	7873      	ldrb	r3, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8002664:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8002666:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8002668:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 800266c:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8002670:	b212      	sxth	r2, r2
 8002672:	b209      	sxth	r1, r1
 8002674:	4628      	mov	r0, r5
 8002676:	f001 f8d7 	bl	8003828 <UI_SetCurrentReferences>
      bNoError = true;
 800267a:	2301      	movs	r3, #1
 800267c:	f88d 3011 	strb.w	r3, [sp, #17]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8002680:	2300      	movs	r3, #0
 8002682:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8002686:	461a      	mov	r2, r3
 8002688:	21f0      	movs	r1, #240	; 0xf0
 800268a:	47a0      	blx	r4
}
 800268c:	b00e      	add	sp, #56	; 0x38
 800268e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8002692:	4cb1      	ldr	r4, [pc, #708]	; (8002958 <MCP_ReceivedFrame+0x668>)
      stepList.data = buffer;
 8002694:	9606      	str	r6, [sp, #24]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8002696:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8002698:	4621      	mov	r1, r4
 800269a:	a806      	add	r0, sp, #24
      stepList.len = Size;
 800269c:	f88d 701c 	strb.w	r7, [sp, #28]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 80026a0:	f88d 3016 	strb.w	r3, [sp, #22]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 80026a4:	f001 f8d2 	bl	800384c <UI_GetMPInfo>
 80026a8:	f88d 0011 	strb.w	r0, [sp, #17]
      if (bNoError)
 80026ac:	2800      	cmp	r0, #0
 80026ae:	f43f ae46 	beq.w	800233e <MCP_ReceivedFrame+0x4e>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 80026b2:	e9d5 060c 	ldrd	r0, r6, [r5, #48]	; 0x30
 80026b6:	7923      	ldrb	r3, [r4, #4]
 80026b8:	6822      	ldr	r2, [r4, #0]
 80026ba:	21f0      	movs	r1, #240	; 0xf0
 80026bc:	47b0      	blx	r6
  if (RequireAck)
 80026be:	e645      	b.n	800234c <MCP_ReceivedFrame+0x5c>
 80026c0:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 80026c4:	ac06      	add	r4, sp, #24
 80026c6:	3b01      	subs	r3, #1
 80026c8:	4622      	mov	r2, r4
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 80026ca:	2000      	movs	r0, #0
 80026cc:	e004      	b.n	80026d8 <MCP_ReceivedFrame+0x3e8>
 80026ce:	3001      	adds	r0, #1
 80026d0:	2820      	cmp	r0, #32
        outBuff[i] = pHandle->s_fwVer[i];
 80026d2:	f802 1b01 	strb.w	r1, [r2], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 80026d6:	d0b9      	beq.n	800264c <MCP_ReceivedFrame+0x35c>
 80026d8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80026dc:	b2c6      	uxtb	r6, r0
 80026de:	2900      	cmp	r1, #0
 80026e0:	d1f5      	bne.n	80026ce <MCP_ReceivedFrame+0x3de>
        outBuff[i] = 0;
 80026e2:	f1c6 021f 	rsb	r2, r6, #31
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	3201      	adds	r2, #1
 80026ea:	4420      	add	r0, r4
 80026ec:	f005 f8f0 	bl	80078d0 <memset>
 80026f0:	e7ac      	b.n	800264c <MCP_ReceivedFrame+0x35c>
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80026f2:	7970      	ldrb	r0, [r6, #5]
 80026f4:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80026f6:	7873      	ldrb	r3, [r6, #1]
 80026f8:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80026fa:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80026fe:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8002702:	b292      	uxth	r2, r2
 8002704:	b209      	sxth	r1, r1
 8002706:	4628      	mov	r0, r5
 8002708:	f001 f84a 	bl	80037a0 <UI_ExecTorqueRamp>
 800270c:	f88d 0011 	strb.w	r0, [sp, #17]
    if (bNoError)
 8002710:	2800      	cmp	r0, #0
 8002712:	f43f ae14 	beq.w	800233e <MCP_ReceivedFrame+0x4e>
 8002716:	e7b3      	b.n	8002680 <MCP_ReceivedFrame+0x390>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8002718:	f10d 0316 	add.w	r3, sp, #22
 800271c:	7831      	ldrb	r1, [r6, #0]
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	f10d 0212 	add.w	r2, sp, #18
 8002724:	ab05      	add	r3, sp, #20
 8002726:	4628      	mov	r0, r5
 8002728:	f001 f844 	bl	80037b4 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 800272c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
      outBuff[4] = (uint8_t)(FinalTorque);
 8002730:	f8bd 1016 	ldrh.w	r1, [sp, #22]
      outBuff[6] = (uint8_t)(Durationms);
 8002734:	f8bd 2012 	ldrh.w	r2, [sp, #18]
      outBuff[4] = (uint8_t)(FinalTorque);
 8002738:	f8ad 101c 	strh.w	r1, [sp, #28]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 800273c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002740:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 8002742:	9306      	str	r3, [sp, #24]
      outBuff[6] = (uint8_t)(Durationms);
 8002744:	f8ad 201e 	strh.w	r2, [sp, #30]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8002748:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 800274c:	2308      	movs	r3, #8
 800274e:	aa06      	add	r2, sp, #24
 8002750:	21f0      	movs	r1, #240	; 0xf0
 8002752:	47a0      	blx	r4
  if (RequireAck)
 8002754:	f89d 0011 	ldrb.w	r0, [sp, #17]
    if (bNoError)
 8002758:	2800      	cmp	r0, #0
 800275a:	f43f adf0 	beq.w	800233e <MCP_ReceivedFrame+0x4e>
 800275e:	e78f      	b.n	8002680 <MCP_ReceivedFrame+0x390>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002760:	7877      	ldrb	r7, [r6, #1]
 8002762:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002764:	7970      	ldrb	r0, [r6, #5]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002766:	78b4      	ldrb	r4, [r6, #2]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002768:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 800276a:	78f1      	ldrb	r1, [r6, #3]
 800276c:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8002770:	eb03 4304 	add.w	r3, r3, r4, lsl #16
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002774:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8002778:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 800277c:	b292      	uxth	r2, r2
 800277e:	4628      	mov	r0, r5
 8002780:	f000 fffc 	bl	800377c <UI_ExecSpeedRamp>
 8002784:	f88d 0011 	strb.w	r0, [sp, #17]
    if (bNoError)
 8002788:	2800      	cmp	r0, #0
 800278a:	f43f add8 	beq.w	800233e <MCP_ReceivedFrame+0x4e>
 800278e:	e777      	b.n	8002680 <MCP_ReceivedFrame+0x390>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8002790:	78b1      	ldrb	r1, [r6, #2]
 8002792:	7873      	ldrb	r3, [r6, #1]
 8002794:	78f2      	ldrb	r2, [r6, #3]
 8002796:	7934      	ldrb	r4, [r6, #4]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8002798:	7970      	ldrb	r0, [r6, #5]
      hDurationms = buffer[7] + (buffer[8] << 8);
 800279a:	7a37      	ldrb	r7, [r6, #8]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 800279c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80027a0:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80027a4:	4a6d      	ldr	r2, [pc, #436]	; (800295c <MCP_ReceivedFrame+0x66c>)
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80027a6:	79b1      	ldrb	r1, [r6, #6]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80027a8:	eb03 6304 	add.w	r3, r3, r4, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80027ac:	fb82 4203 	smull	r4, r2, r2, r3
      hDurationms = buffer[7] + (buffer[8] << 8);
 80027b0:	79f4      	ldrb	r4, [r6, #7]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80027b2:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80027b6:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 80027ba:	b200      	sxth	r0, r0
      hDurationms = buffer[7] + (buffer[8] << 8);
 80027bc:	eb04 2207 	add.w	r2, r4, r7, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 80027c0:	7831      	ldrb	r1, [r6, #0]
 80027c2:	9000      	str	r0, [sp, #0]
 80027c4:	b21b      	sxth	r3, r3
 80027c6:	b292      	uxth	r2, r2
 80027c8:	4628      	mov	r0, r5
 80027ca:	f001 f811 	bl	80037f0 <UI_SetRevupData>
 80027ce:	f88d 0011 	strb.w	r0, [sp, #17]
    if (bNoError)
 80027d2:	2800      	cmp	r0, #0
 80027d4:	f43f adb3 	beq.w	800233e <MCP_ReceivedFrame+0x4e>
 80027d8:	e752      	b.n	8002680 <MCP_ReceivedFrame+0x390>
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 80027da:	f89d 0011 	ldrb.w	r0, [sp, #17]
 80027de:	230b      	movs	r3, #11
 80027e0:	f88d 3016 	strb.w	r3, [sp, #22]
    if (bNoError)
 80027e4:	2800      	cmp	r0, #0
 80027e6:	f43f adaa 	beq.w	800233e <MCP_ReceivedFrame+0x4e>
 80027ea:	e749      	b.n	8002680 <MCP_ReceivedFrame+0x390>
 80027ec:	f89d 0011 	ldrb.w	r0, [sp, #17]
      bErrorCode = ERROR_BAD_FRAME_ID;
 80027f0:	2301      	movs	r3, #1
 80027f2:	f88d 3016 	strb.w	r3, [sp, #22]
    if (bNoError)
 80027f6:	2800      	cmp	r0, #0
 80027f8:	f43f ada1 	beq.w	800233e <MCP_ReceivedFrame+0x4e>
 80027fc:	e740      	b.n	8002680 <MCP_ReceivedFrame+0x390>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80027fe:	f10d 0211 	add.w	r2, sp, #17
 8002802:	4628      	mov	r0, r5
 8002804:	f001 f836 	bl	8003874 <UI_GetReg>
          if ( bNoError == true )
 8002808:	f89d 3011 	ldrb.w	r3, [sp, #17]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 800280c:	9006      	str	r0, [sp, #24]
          if ( bNoError == true )
 800280e:	2b00      	cmp	r3, #0
 8002810:	f43f ad95 	beq.w	800233e <MCP_ReceivedFrame+0x4e>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8002814:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8002818:	2302      	movs	r3, #2
 800281a:	aa06      	add	r2, sp, #24
 800281c:	21f0      	movs	r1, #240	; 0xf0
 800281e:	47a0      	blx	r4
  if (RequireAck)
 8002820:	e594      	b.n	800234c <MCP_ReceivedFrame+0x5c>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8002822:	2302      	movs	r3, #2
 8002824:	f88d 3016 	strb.w	r3, [sp, #22]
 8002828:	e794      	b.n	8002754 <MCP_ReceivedFrame+0x464>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 800282a:	78b2      	ldrb	r2, [r6, #2]
 800282c:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 800282e:	4628      	mov	r0, r5
 8002830:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8002834:	f000 fdf6 	bl	8003424 <UI_SetReg>
 8002838:	f88d 0011 	strb.w	r0, [sp, #17]
    if (bNoError)
 800283c:	2800      	cmp	r0, #0
 800283e:	f43f ad7e 	beq.w	800233e <MCP_ReceivedFrame+0x4e>
 8002842:	e71d      	b.n	8002680 <MCP_ReceivedFrame+0x390>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8002844:	f10d 0211 	add.w	r2, sp, #17
 8002848:	4628      	mov	r0, r5
 800284a:	f001 f813 	bl	8003874 <UI_GetReg>
          if ( bNoError == true )
 800284e:	f89d 3011 	ldrb.w	r3, [sp, #17]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8002852:	9006      	str	r0, [sp, #24]
          if ( bNoError == true )
 8002854:	2b00      	cmp	r3, #0
 8002856:	f43f ad72 	beq.w	800233e <MCP_ReceivedFrame+0x4e>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 800285a:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 800285e:	2304      	movs	r3, #4
 8002860:	aa06      	add	r2, sp, #24
 8002862:	21f0      	movs	r1, #240	; 0xf0
 8002864:	47a0      	blx	r4
  if (RequireAck)
 8002866:	e571      	b.n	800234c <MCP_ReceivedFrame+0x5c>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8002868:	78b4      	ldrb	r4, [r6, #2]
 800286a:	7873      	ldrb	r3, [r6, #1]
 800286c:	78f0      	ldrb	r0, [r6, #3]
 800286e:	7932      	ldrb	r2, [r6, #4]
 8002870:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8002874:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8002878:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 800287c:	4628      	mov	r0, r5
 800287e:	f000 fdd1 	bl	8003424 <UI_SetReg>
 8002882:	f88d 0011 	strb.w	r0, [sp, #17]
    if (bNoError)
 8002886:	2800      	cmp	r0, #0
 8002888:	f43f ad59 	beq.w	800233e <MCP_ReceivedFrame+0x4e>
 800288c:	e6f8      	b.n	8002680 <MCP_ReceivedFrame+0x390>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 800288e:	f10d 0211 	add.w	r2, sp, #17
 8002892:	4628      	mov	r0, r5
 8002894:	f000 ffee 	bl	8003874 <UI_GetReg>
           if ( bNoError == true )
 8002898:	f89d 3011 	ldrb.w	r3, [sp, #17]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 800289c:	9006      	str	r0, [sp, #24]
           if ( bNoError == true )
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f43f ad4d 	beq.w	800233e <MCP_ReceivedFrame+0x4e>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 80028a4:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 80028a8:	2301      	movs	r3, #1
 80028aa:	aa06      	add	r2, sp, #24
 80028ac:	21f0      	movs	r1, #240	; 0xf0
 80028ae:	47a0      	blx	r4
  if (RequireAck)
 80028b0:	e54c      	b.n	800234c <MCP_ReceivedFrame+0x5c>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 80028b2:	7872      	ldrb	r2, [r6, #1]
 80028b4:	4628      	mov	r0, r5
 80028b6:	f000 fdb5 	bl	8003424 <UI_SetReg>
 80028ba:	f88d 0011 	strb.w	r0, [sp, #17]
    if (bNoError)
 80028be:	2800      	cmp	r0, #0
 80028c0:	f43f ad3d 	beq.w	800233e <MCP_ReceivedFrame+0x4e>
 80028c4:	e6dc      	b.n	8002680 <MCP_ReceivedFrame+0x390>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH0, (MC_Protocol_REG_t)(buffer[1]));
 80028c6:	7872      	ldrb	r2, [r6, #1]
 80028c8:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 80028cc:	2100      	movs	r1, #0
 80028ce:	f000 ffc7 	bl	8003860 <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 80028d2:	2301      	movs	r3, #1
 80028d4:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 80028d8:	e6d2      	b.n	8002680 <MCP_ReceivedFrame+0x390>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH1, (MC_Protocol_REG_t)(buffer[1]));
 80028da:	7872      	ldrb	r2, [r6, #1]
 80028dc:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 80028e0:	2101      	movs	r1, #1
 80028e2:	f000 ffbd 	bl	8003860 <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 80028e6:	2301      	movs	r3, #1
 80028e8:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 80028ec:	e6c8      	b.n	8002680 <MCP_ReceivedFrame+0x390>
          int32_t wValue = (int32_t)(buffer[1]);
 80028ee:	7872      	ldrb	r2, [r6, #1]
          UI_SetReg(&pHandle->pDAC->_Super, bRegID, wValue);
 80028f0:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 80028f4:	9203      	str	r2, [sp, #12]
 80028f6:	2100      	movs	r1, #0
 80028f8:	f000 fd94 	bl	8003424 <UI_SetReg>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 80028fc:	9a03      	ldr	r2, [sp, #12]
 80028fe:	2100      	movs	r1, #0
 8002900:	4628      	mov	r0, r5
 8002902:	f000 fd8f 	bl	8003424 <UI_SetReg>
 8002906:	f88d 0011 	strb.w	r0, [sp, #17]
    if (bNoError)
 800290a:	2800      	cmp	r0, #0
 800290c:	f43f ad17 	beq.w	800233e <MCP_ReceivedFrame+0x4e>
 8002910:	e6b6      	b.n	8002680 <MCP_ReceivedFrame+0x390>
          if (pHandle->pDAC)
 8002912:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8002916:	2800      	cmp	r0, #0
 8002918:	f43f af1c 	beq.w	8002754 <MCP_ReceivedFrame+0x464>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 800291c:	2101      	movs	r1, #1
 800291e:	f000 ffa3 	bl	8003868 <UI_GetDAC>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8002922:	2301      	movs	r3, #1
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 8002924:	f88d 0018 	strb.w	r0, [sp, #24]
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8002928:	aa06      	add	r2, sp, #24
 800292a:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 800292e:	21f0      	movs	r1, #240	; 0xf0
 8002930:	47a0      	blx	r4
            bNoError = true;
 8002932:	2301      	movs	r3, #1
 8002934:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 8002938:	e6a2      	b.n	8002680 <MCP_ReceivedFrame+0x390>
          if (pHandle->pDAC)
 800293a:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 800293e:	2800      	cmp	r0, #0
 8002940:	f43f af08 	beq.w	8002754 <MCP_ReceivedFrame+0x464>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH0);
 8002944:	2100      	movs	r1, #0
 8002946:	f000 ff8f 	bl	8003868 <UI_GetDAC>
 800294a:	f88d 0018 	strb.w	r0, [sp, #24]
 800294e:	e7a9      	b.n	80028a4 <MCP_ReceivedFrame+0x5b4>
 8002950:	2326      	movs	r3, #38	; 0x26
 8002952:	2124      	movs	r1, #36	; 0x24
 8002954:	2222      	movs	r2, #34	; 0x22
 8002956:	e670      	b.n	800263a <MCP_ReceivedFrame+0x34a>
 8002958:	20000794 	.word	0x20000794
 800295c:	2aaaaaab 	.word	0x2aaaaaab

08002960 <MCP_WaitNextFrame>:
{
 8002960:	b510      	push	{r4, lr}
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8002962:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 8002964:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8002966:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002968:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 800296a:	2380      	movs	r3, #128	; 0x80
 800296c:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
  pHandle->fFcpReceive(pHandle->pFCP);
 8002970:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002972:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
 8002974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8002978:	4718      	bx	r3
 800297a:	bf00      	nop

0800297c <MCP_Init>:
{
 800297c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800297e:	b083      	sub	sp, #12
 8002980:	4604      	mov	r4, r0
 8002982:	461d      	mov	r5, r3
 8002984:	4608      	mov	r0, r1
  pHandle->pDAC = pDAC;
 8002986:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
 8002988:	990a      	ldr	r1, [sp, #40]	; 0x28
  FCP_SetClient( pFCP, pHandle,
 800298a:	4f0a      	ldr	r7, [pc, #40]	; (80029b4 <MCP_Init+0x38>)
  pHandle->pFCP = pFCP;
 800298c:	6320      	str	r0, [r4, #48]	; 0x30
  pHandle->s_fwVer = s_fwVer;
 800298e:	e9c4 1330 	strd	r1, r3, [r4, #192]	; 0xc0
{
 8002992:	4616      	mov	r6, r2
  FCP_SetClient( pFCP, pHandle,
 8002994:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <MCP_Init+0x3c>)
 8002996:	4a09      	ldr	r2, [pc, #36]	; (80029bc <MCP_Init+0x40>)
 8002998:	9700      	str	r7, [sp, #0]
 800299a:	4621      	mov	r1, r4
{
 800299c:	9f08      	ldr	r7, [sp, #32]
  FCP_SetClient( pFCP, pHandle,
 800299e:	f003 f89d 	bl	8005adc <FCP_SetClient>
  pHandle->fFcpReceive = fFcpReceive;
 80029a2:	e9c4 650d 	strd	r6, r5, [r4, #52]	; 0x34
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 80029a6:	63e7      	str	r7, [r4, #60]	; 0x3c
  MCP_WaitNextFrame(pHandle);
 80029a8:	4620      	mov	r0, r4
 80029aa:	f7ff ffd9 	bl	8002960 <MCP_WaitNextFrame>
}
 80029ae:	b003      	add	sp, #12
 80029b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029b2:	bf00      	nop
 80029b4:	080029c1 	.word	0x080029c1
 80029b8:	080022f1 	.word	0x080022f1
 80029bc:	080029c9 	.word	0x080029c9

080029c0 <MCP_OnTimeOut>:
{
 80029c0:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 80029c2:	f7ff ffcd 	bl	8002960 <MCP_WaitNextFrame>
}
 80029c6:	bd08      	pop	{r3, pc}

080029c8 <MCP_SentFrame>:
{
 80029c8:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 80029ca:	f7ff ffc9 	bl	8002960 <MCP_WaitNextFrame>
}
 80029ce:	bd08      	pop	{r3, pc}

080029d0 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80029d0:	b530      	push	{r4, r5, lr}
 80029d2:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 80029d4:	f001 ffe6 	bl	80049a4 <HAL_RCC_GetHCLKFreq>
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 80029da:	4d0c      	ldr	r5, [pc, #48]	; (8002a0c <MX_MotorControl_Init+0x3c>)
 80029dc:	4c0c      	ldr	r4, [pc, #48]	; (8002a10 <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 80029de:	fba3 3000 	umull	r3, r0, r3, r0
 80029e2:	09c0      	lsrs	r0, r0, #7
 80029e4:	f001 fd90 	bl	8004508 <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 80029e8:	4629      	mov	r1, r5
 80029ea:	4620      	mov	r0, r4
 80029ec:	f7ff f8aa 	bl	8001b44 <MCboot>
  mc_lock_pins();
 80029f0:	f7ff fbca 	bl	8002188 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 80029f4:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <MX_MotorControl_Init+0x44>)
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	4807      	ldr	r0, [pc, #28]	; (8002a18 <MX_MotorControl_Init+0x48>)
 80029fa:	462b      	mov	r3, r5
 80029fc:	4622      	mov	r2, r4
 80029fe:	2101      	movs	r1, #1
 8002a00:	f000 fc4a 	bl	8003298 <UI_TaskInit>
}
 8002a04:	b003      	add	sp, #12
 8002a06:	bd30      	pop	{r4, r5, pc}
 8002a08:	10624dd3 	.word	0x10624dd3
 8002a0c:	20000a04 	.word	0x20000a04
 8002a10:	20000a00 	.word	0x20000a00
 8002a14:	080087e4 	.word	0x080087e4
 8002a18:	200006f4 	.word	0x200006f4

08002a1c <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002a1c:	4b66      	ldr	r3, [pc, #408]	; (8002bb8 <RCM_RegisterRegConv+0x19c>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
{
 8002a20:	b4f0      	push	{r4, r5, r6, r7}
 8002a22:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002a24:	2a00      	cmp	r2, #0
 8002a26:	f000 808f 	beq.w	8002b48 <RCM_RegisterRegConv+0x12c>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002a2a:	7904      	ldrb	r4, [r0, #4]
 8002a2c:	7910      	ldrb	r0, [r2, #4]
 8002a2e:	4284      	cmp	r4, r0
 8002a30:	d01e      	beq.n	8002a70 <RCM_RegisterRegConv+0x54>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002a32:	685d      	ldr	r5, [r3, #4]
 8002a34:	2d00      	cmp	r5, #0
 8002a36:	f000 80ad 	beq.w	8002b94 <RCM_RegisterRegConv+0x178>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002a3a:	792a      	ldrb	r2, [r5, #4]
 8002a3c:	42a2      	cmp	r2, r4
  uint8_t handle=255;
 8002a3e:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002a42:	f000 8089 	beq.w	8002b58 <RCM_RegisterRegConv+0x13c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002a46:	689e      	ldr	r6, [r3, #8]
 8002a48:	b1fe      	cbz	r6, 8002a8a <RCM_RegisterRegConv+0x6e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002a4a:	7932      	ldrb	r2, [r6, #4]
 8002a4c:	42a2      	cmp	r2, r4
 8002a4e:	f000 8094 	beq.w	8002b7a <RCM_RegisterRegConv+0x15e>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002a52:	68dd      	ldr	r5, [r3, #12]
 8002a54:	2d00      	cmp	r5, #0
 8002a56:	f000 8099 	beq.w	8002b8c <RCM_RegisterRegConv+0x170>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002a5a:	792a      	ldrb	r2, [r5, #4]
 8002a5c:	42a2      	cmp	r2, r4
 8002a5e:	f000 80a8 	beq.w	8002bb2 <RCM_RegisterRegConv+0x196>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8002a62:	2803      	cmp	r0, #3
 8002a64:	bf98      	it	ls
 8002a66:	680a      	ldrls	r2, [r1, #0]
 8002a68:	d91e      	bls.n	8002aa8 <RCM_RegisterRegConv+0x8c>
 8002a6a:	20ff      	movs	r0, #255	; 0xff
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8002a6c:	bcf0      	pop	{r4, r5, r6, r7}
 8002a6e:	4770      	bx	lr
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002a70:	6810      	ldr	r0, [r2, #0]
 8002a72:	680a      	ldr	r2, [r1, #0]
 8002a74:	4290      	cmp	r0, r2
 8002a76:	f000 8087 	beq.w	8002b88 <RCM_RegisterRegConv+0x16c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002a7a:	685d      	ldr	r5, [r3, #4]
 8002a7c:	2d00      	cmp	r5, #0
 8002a7e:	d1dc      	bne.n	8002a3a <RCM_RegisterRegConv+0x1e>
 8002a80:	689e      	ldr	r6, [r3, #8]
      i++;
 8002a82:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002a84:	2e00      	cmp	r6, #0
 8002a86:	d1e0      	bne.n	8002a4a <RCM_RegisterRegConv+0x2e>
 8002a88:	e004      	b.n	8002a94 <RCM_RegisterRegConv+0x78>
 8002a8a:	2804      	cmp	r0, #4
 8002a8c:	f240 808e 	bls.w	8002bac <RCM_RegisterRegConv+0x190>
 8002a90:	680a      	ldr	r2, [r1, #0]
      i++;
 8002a92:	2002      	movs	r0, #2
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002a94:	68dd      	ldr	r5, [r3, #12]
 8002a96:	b13d      	cbz	r5, 8002aa8 <RCM_RegisterRegConv+0x8c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002a98:	792e      	ldrb	r6, [r5, #4]
 8002a9a:	790c      	ldrb	r4, [r1, #4]
 8002a9c:	42a6      	cmp	r6, r4
 8002a9e:	d103      	bne.n	8002aa8 <RCM_RegisterRegConv+0x8c>
 8002aa0:	682c      	ldr	r4, [r5, #0]
 8002aa2:	4294      	cmp	r4, r2
 8002aa4:	d1dd      	bne.n	8002a62 <RCM_RegisterRegConv+0x46>
      i++;
 8002aa6:	2003      	movs	r0, #3
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002aa8:	6894      	ldr	r4, [r2, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8002aaa:	4d44      	ldr	r5, [pc, #272]	; (8002bbc <RCM_RegisterRegConv+0x1a0>)
      RCM_handle_array [handle] = regConv;
 8002aac:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8002ab6:	07e3      	lsls	r3, r4, #31
 8002ab8:	d411      	bmi.n	8002ade <RCM_RegisterRegConv+0xc2>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8002aba:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8002abc:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8002ac0:	f023 0320 	bic.w	r3, r3, #32
 8002ac4:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8002ac6:	6014      	str	r4, [r2, #0]
{
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8002ac8:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8002aca:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8002ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ad2:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8002ad4:	6014      	str	r4, [r2, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8002ad6:	6893      	ldr	r3, [r2, #8]
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002ade:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002ae0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002ae4:	62d3      	str	r3, [r2, #44]	; 0x2c
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8002ae6:	790b      	ldrb	r3, [r1, #4]
 8002ae8:	2b09      	cmp	r3, #9
 8002aea:	d83c      	bhi.n	8002b66 <RCM_RegisterRegConv+0x14a>
 8002aec:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8002af0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8002af4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002af8:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afc:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8002b00:	fa94 f4a4 	rbit	r4, r4
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8002b04:	fab4 f484 	clz	r4, r4
 8002b08:	40e6      	lsrs	r6, r4
 8002b0a:	320c      	adds	r2, #12
  MODIFY_REG(*preg,
 8002b0c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8002b10:	f852 5026 	ldr.w	r5, [r2, r6, lsl #2]
 8002b14:	f04f 74f8 	mov.w	r4, #32505856	; 0x1f00000
 8002b18:	fa94 f7a4 	rbit	r7, r4
 8002b1c:	fab7 f787 	clz	r7, r7
 8002b20:	fa94 f4a4 	rbit	r4, r4
 8002b24:	f04f 0c07 	mov.w	ip, #7
 8002b28:	6889      	ldr	r1, [r1, #8]
 8002b2a:	fab4 f484 	clz	r4, r4
 8002b2e:	fa23 f707 	lsr.w	r7, r3, r7
 8002b32:	fa0c f707 	lsl.w	r7, ip, r7
 8002b36:	40e3      	lsrs	r3, r4
 8002b38:	4099      	lsls	r1, r3
 8002b3a:	ea25 0307 	bic.w	r3, r5, r7
 8002b3e:	430b      	orrs	r3, r1
 8002b40:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
}
 8002b44:	bcf0      	pop	{r4, r5, r6, r7}
 8002b46:	4770      	bx	lr
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002b48:	685d      	ldr	r5, [r3, #4]
 8002b4a:	b355      	cbz	r5, 8002ba2 <RCM_RegisterRegConv+0x186>
 8002b4c:	790c      	ldrb	r4, [r1, #4]
  uint8_t i=0;
 8002b4e:	4610      	mov	r0, r2
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002b50:	792a      	ldrb	r2, [r5, #4]
 8002b52:	42a2      	cmp	r2, r4
 8002b54:	f47f af77 	bne.w	8002a46 <RCM_RegisterRegConv+0x2a>
 8002b58:	682d      	ldr	r5, [r5, #0]
 8002b5a:	680a      	ldr	r2, [r1, #0]
 8002b5c:	4295      	cmp	r5, r2
 8002b5e:	f47f af72 	bne.w	8002a46 <RCM_RegisterRegConv+0x2a>
 8002b62:	2001      	movs	r0, #1
 8002b64:	e7a0      	b.n	8002aa8 <RCM_RegisterRegConv+0x8c>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8002b66:	2403      	movs	r4, #3
 8002b68:	f06f 051d 	mvn.w	r5, #29
 8002b6c:	fb14 5403 	smlabb	r4, r4, r3, r5
 8002b70:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8002b74:	f003 7600 	and.w	r6, r3, #33554432	; 0x2000000
 8002b78:	e7c0      	b.n	8002afc <RCM_RegisterRegConv+0xe0>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002b7a:	6835      	ldr	r5, [r6, #0]
 8002b7c:	680a      	ldr	r2, [r1, #0]
 8002b7e:	4295      	cmp	r5, r2
 8002b80:	f47f af67 	bne.w	8002a52 <RCM_RegisterRegConv+0x36>
      i++;
 8002b84:	2002      	movs	r0, #2
 8002b86:	e78f      	b.n	8002aa8 <RCM_RegisterRegConv+0x8c>
  uint8_t i=0;
 8002b88:	2000      	movs	r0, #0
 8002b8a:	e78d      	b.n	8002aa8 <RCM_RegisterRegConv+0x8c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002b8c:	2804      	cmp	r0, #4
 8002b8e:	680a      	ldr	r2, [r1, #0]
 8002b90:	d889      	bhi.n	8002aa6 <RCM_RegisterRegConv+0x8a>
 8002b92:	e789      	b.n	8002aa8 <RCM_RegisterRegConv+0x8c>
 8002b94:	689e      	ldr	r6, [r3, #8]
      i++;
 8002b96:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002b98:	2e00      	cmp	r6, #0
 8002b9a:	f47f af56 	bne.w	8002a4a <RCM_RegisterRegConv+0x2e>
 8002b9e:	680a      	ldr	r2, [r1, #0]
 8002ba0:	e778      	b.n	8002a94 <RCM_RegisterRegConv+0x78>
 8002ba2:	689e      	ldr	r6, [r3, #8]
 8002ba4:	b116      	cbz	r6, 8002bac <RCM_RegisterRegConv+0x190>
 8002ba6:	790c      	ldrb	r4, [r1, #4]
  uint8_t i=0;
 8002ba8:	4628      	mov	r0, r5
 8002baa:	e74e      	b.n	8002a4a <RCM_RegisterRegConv+0x2e>
 8002bac:	680a      	ldr	r2, [r1, #0]
 8002bae:	4630      	mov	r0, r6
 8002bb0:	e770      	b.n	8002a94 <RCM_RegisterRegConv+0x78>
 8002bb2:	680a      	ldr	r2, [r1, #0]
 8002bb4:	e774      	b.n	8002aa0 <RCM_RegisterRegConv+0x84>
 8002bb6:	bf00      	nop
 8002bb8:	20000a30 	.word	0x20000a30
 8002bbc:	20000a0c 	.word	0x20000a0c

08002bc0 <RCM_ExecRegularConv>:
 * There is no issue to execute regular conversion asynchronously.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 8002bc0:	b430      	push	{r4, r5}
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002bc2:	4b1b      	ldr	r3, [pc, #108]	; (8002c30 <RCM_ExecRegularConv+0x70>)
 8002bc4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002bc8:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	2b09      	cmp	r3, #9
 8002bce:	d827      	bhi.n	8002c20 <RCM_ExecRegularConv+0x60>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002bd0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8002bd4:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002bd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bdc:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002be0:	fa91 f1a1 	rbit	r1, r1
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8002be4:	f44f 7500 	mov.w	r5, #512	; 0x200
 8002be8:	fab1 f181 	clz	r1, r1
 8002bec:	40cd      	lsrs	r5, r1
 8002bee:	f102 042c 	add.w	r4, r2, #44	; 0x2c
  MODIFY_REG(*preg,
 8002bf2:	f003 031f 	and.w	r3, r3, #31
 8002bf6:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8002bfa:	f020 001f 	bic.w	r0, r0, #31
 8002bfe:	4303      	orrs	r3, r0

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 8002c00:	0151      	lsls	r1, r2, #5
 8002c02:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
 8002c06:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 8002c0a:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8002c0c:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8002c0e:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8002c12:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8002c14:	079b      	lsls	r3, r3, #30
 8002c16:	d5fc      	bpl.n	8002c12 <RCM_ExecRegularConv+0x52>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8002c18:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
return retVal;
}
 8002c1a:	bc30      	pop	{r4, r5}
 8002c1c:	b280      	uxth	r0, r0
 8002c1e:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002c20:	2103      	movs	r1, #3
 8002c22:	f06f 001d 	mvn.w	r0, #29
 8002c26:	fb11 0103 	smlabb	r1, r1, r3, r0
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002c2a:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8002c2e:	e7d5      	b.n	8002bdc <RCM_ExecRegularConv+0x1c>
 8002c30:	20000a30 	.word	0x20000a30

08002c34 <RCM_RequestUserConv>:
 * @return true if the regular conversion could be scheduled and false otherwise.
 */
bool RCM_RequestUserConv(uint8_t handle)
{
  bool retVal = false;
  if (RCM_UserConvState == RCM_USERCONV_IDLE)
 8002c34:	4a05      	ldr	r2, [pc, #20]	; (8002c4c <RCM_RequestUserConv+0x18>)
 8002c36:	7813      	ldrb	r3, [r2, #0]
 8002c38:	b92b      	cbnz	r3, 8002c46 <RCM_RequestUserConv+0x12>
  {
    RCM_UserConvHandle = handle;
 8002c3a:	4905      	ldr	r1, [pc, #20]	; (8002c50 <RCM_RequestUserConv+0x1c>)
    /* must be done last so that RCM_UserConvHandle already has the right value */
    RCM_UserConvState = RCM_USERCONV_REQUESTED;
 8002c3c:	2301      	movs	r3, #1
    RCM_UserConvHandle = handle;
 8002c3e:	7008      	strb	r0, [r1, #0]
    RCM_UserConvState = RCM_USERCONV_REQUESTED;
 8002c40:	7013      	strb	r3, [r2, #0]
    retVal = true;
 8002c42:	4618      	mov	r0, r3
 8002c44:	4770      	bx	lr
  bool retVal = false;
 8002c46:	2000      	movs	r0, #0
  }
  return retVal;
}
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	20000a2c 	.word	0x20000a2c
 8002c50:	20000a08 	.word	0x20000a08

08002c54 <RCM_GetUserConv>:
 * @retval uint16_t The converted value or 0xFFFF in case of conversion error.
 */
uint16_t RCM_GetUserConv(void)
{
  uint16_t hRetVal = 0xFFFFu;
  if (RCM_UserConvState == RCM_USERCONV_EOC)
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <RCM_GetUserConv+0x18>)
 8002c56:	781a      	ldrb	r2, [r3, #0]
 8002c58:	2a02      	cmp	r2, #2
 8002c5a:	d002      	beq.n	8002c62 <RCM_GetUserConv+0xe>
  uint16_t hRetVal = 0xFFFFu;
 8002c5c:	f64f 70ff 	movw	r0, #65535	; 0xffff
  {
    hRetVal = RCM_UserConvValue;
    RCM_UserConvState = RCM_USERCONV_IDLE;
  }
  return hRetVal;
}
 8002c60:	4770      	bx	lr
    hRetVal = RCM_UserConvValue;
 8002c62:	4903      	ldr	r1, [pc, #12]	; (8002c70 <RCM_GetUserConv+0x1c>)
    RCM_UserConvState = RCM_USERCONV_IDLE;
 8002c64:	2200      	movs	r2, #0
    hRetVal = RCM_UserConvValue;
 8002c66:	8808      	ldrh	r0, [r1, #0]
    RCM_UserConvState = RCM_USERCONV_IDLE;
 8002c68:	701a      	strb	r2, [r3, #0]
 8002c6a:	4770      	bx	lr
 8002c6c:	20000a2c 	.word	0x20000a2c
 8002c70:	20000a40 	.word	0x20000a40

08002c74 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8002c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8002c78:	4c0f      	ldr	r4, [pc, #60]	; (8002cb8 <RCM_ExecUserConv+0x44>)
 8002c7a:	7823      	ldrb	r3, [r4, #0]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d001      	beq.n	8002c84 <RCM_ExecUserConv+0x10>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8002c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002c84:	4d0d      	ldr	r5, [pc, #52]	; (8002cbc <RCM_ExecUserConv+0x48>)
 8002c86:	4f0e      	ldr	r7, [pc, #56]	; (8002cc0 <RCM_ExecUserConv+0x4c>)
 8002c88:	7828      	ldrb	r0, [r5, #0]
 8002c8a:	f7ff ff99 	bl	8002bc0 <RCM_ExecRegularConv>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8002c8e:	782d      	ldrb	r5, [r5, #0]
 8002c90:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <RCM_ExecUserConv+0x50>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002c92:	8038      	strh	r0, [r7, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8002c94:	f853 6035 	ldr.w	r6, [r3, r5, lsl #3]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8002c98:	2202      	movs	r2, #2
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002c9a:	4601      	mov	r1, r0
    RCM_UserConvState = RCM_USERCONV_EOC;
 8002c9c:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8002c9e:	2e00      	cmp	r6, #0
 8002ca0:	d0ee      	beq.n	8002c80 <RCM_ExecUserConv+0xc>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002ca2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	7020      	strb	r0, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	4628      	mov	r0, r5
 8002cae:	4633      	mov	r3, r6
}
 8002cb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002cb4:	4718      	bx	r3
 8002cb6:	bf00      	nop
 8002cb8:	20000a2c 	.word	0x20000a2c
 8002cbc:	20000a08 	.word	0x20000a08
 8002cc0:	20000a40 	.word	0x20000a40
 8002cc4:	20000a0c 	.word	0x20000a0c

08002cc8 <RCM_GetUserConvState>:
 *
 * @retval The state of the last user-defined regular conversion.
 */
RCM_UserConvState_t RCM_GetUserConvState(void)
{
  return RCM_UserConvState;
 8002cc8:	4b01      	ldr	r3, [pc, #4]	; (8002cd0 <RCM_GetUserConvState+0x8>)
}
 8002cca:	7818      	ldrb	r0, [r3, #0]
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	20000a2c 	.word	0x20000a2c

08002cd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cd4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd6:	4b0d      	ldr	r3, [pc, #52]	; (8002d0c <HAL_MspInit+0x38>)
 8002cd8:	2100      	movs	r1, #0
 8002cda:	9100      	str	r1, [sp, #0]
 8002cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ce2:	645a      	str	r2, [r3, #68]	; 0x44
 8002ce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ce6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002cea:	9200      	str	r2, [sp, #0]
 8002cec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cee:	9101      	str	r1, [sp, #4]
 8002cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cf2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002cf6:	641a      	str	r2, [r3, #64]	; 0x40
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002d02:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d04:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002d06:	f001 bba5 	b.w	8004454 <HAL_NVIC_SetPriorityGrouping>
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800

08002d10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d10:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8002d12:	6803      	ldr	r3, [r0, #0]
 8002d14:	4a3a      	ldr	r2, [pc, #232]	; (8002e00 <HAL_ADC_MspInit+0xf0>)
{
 8002d16:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d18:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8002d1a:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d1c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002d20:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8002d24:	940a      	str	r4, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 8002d26:	d004      	beq.n	8002d32 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8002d28:	4a36      	ldr	r2, [pc, #216]	; (8002e04 <HAL_ADC_MspInit+0xf4>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d047      	beq.n	8002dbe <HAL_ADC_MspInit+0xae>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002d2e:	b00d      	add	sp, #52	; 0x34
 8002d30:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d32:	4b35      	ldr	r3, [pc, #212]	; (8002e08 <HAL_ADC_MspInit+0xf8>)
 8002d34:	9400      	str	r4, [sp, #0]
 8002d36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d38:	4834      	ldr	r0, [pc, #208]	; (8002e0c <HAL_ADC_MspInit+0xfc>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d3e:	645a      	str	r2, [r3, #68]	; 0x44
 8002d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d42:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002d46:	9200      	str	r2, [sp, #0]
 8002d48:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d4a:	9401      	str	r4, [sp, #4]
 8002d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d4e:	f042 0204 	orr.w	r2, r2, #4
 8002d52:	631a      	str	r2, [r3, #48]	; 0x30
 8002d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d56:	f002 0204 	and.w	r2, r2, #4
 8002d5a:	9201      	str	r2, [sp, #4]
 8002d5c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d5e:	9402      	str	r4, [sp, #8]
 8002d60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d62:	f042 0201 	orr.w	r2, r2, #1
 8002d66:	631a      	str	r2, [r3, #48]	; 0x30
 8002d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d6a:	f002 0201 	and.w	r2, r2, #1
 8002d6e:	9202      	str	r2, [sp, #8]
 8002d70:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d72:	9403      	str	r4, [sp, #12]
 8002d74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d76:	f042 0202 	orr.w	r2, r2, #2
 8002d7a:	631a      	str	r2, [r3, #48]	; 0x30
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|M1_TEMPERATURE_Pin|M1_BUS_VOLTAGE_Pin;
 8002d86:	2234      	movs	r2, #52	; 0x34
 8002d88:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d8a:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_2|M1_TEMPERATURE_Pin|M1_BUS_VOLTAGE_Pin;
 8002d8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d90:	9d03      	ldr	r5, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d92:	f001 fc15 	bl	80045c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 8002d96:	2202      	movs	r2, #2
 8002d98:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 8002d9a:	a906      	add	r1, sp, #24
 8002d9c:	481c      	ldr	r0, [pc, #112]	; (8002e10 <HAL_ADC_MspInit+0x100>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9e:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 8002da0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 8002da4:	f001 fc0c 	bl	80045c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002da8:	2201      	movs	r2, #1
 8002daa:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dac:	4819      	ldr	r0, [pc, #100]	; (8002e14 <HAL_ADC_MspInit+0x104>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db0:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002db2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db6:	f001 fc03 	bl	80045c0 <HAL_GPIO_Init>
}
 8002dba:	b00d      	add	sp, #52	; 0x34
 8002dbc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002dbe:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <HAL_ADC_MspInit+0xf8>)
 8002dc0:	9404      	str	r4, [sp, #16]
 8002dc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8002dc4:	4812      	ldr	r0, [pc, #72]	; (8002e10 <HAL_ADC_MspInit+0x100>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dca:	645a      	str	r2, [r3, #68]	; 0x44
 8002dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dce:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002dd2:	9204      	str	r2, [sp, #16]
 8002dd4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd6:	9405      	str	r4, [sp, #20]
 8002dd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de2:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8002dea:	2210      	movs	r2, #16
 8002dec:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8002dee:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8002df0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df4:	9c05      	ldr	r4, [sp, #20]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8002df6:	f001 fbe3 	bl	80045c0 <HAL_GPIO_Init>
}
 8002dfa:	b00d      	add	sp, #52	; 0x34
 8002dfc:	bd30      	pop	{r4, r5, pc}
 8002dfe:	bf00      	nop
 8002e00:	40012000 	.word	0x40012000
 8002e04:	40012100 	.word	0x40012100
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	40020800 	.word	0x40020800
 8002e10:	40020000 	.word	0x40020000
 8002e14:	40020400 	.word	0x40020400

08002e18 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002e18:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 8002e1a:	6801      	ldr	r1, [r0, #0]
 8002e1c:	4a16      	ldr	r2, [pc, #88]	; (8002e78 <HAL_DAC_MspInit+0x60>)
{
 8002e1e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e20:	2300      	movs	r3, #0
  if(hdac->Instance==DAC)
 8002e22:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e24:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002e28:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002e2c:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC)
 8002e2e:	d001      	beq.n	8002e34 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002e30:	b008      	add	sp, #32
 8002e32:	bd10      	pop	{r4, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 8002e34:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(DBG_DAC_CH2_GPIO_Port, &GPIO_InitStruct);
 8002e3c:	480f      	ldr	r0, [pc, #60]	; (8002e7c <HAL_DAC_MspInit+0x64>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8002e3e:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8002e42:	6411      	str	r1, [r2, #64]	; 0x40
 8002e44:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002e46:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
 8002e4a:	9100      	str	r1, [sp, #0]
 8002e4c:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e4e:	9301      	str	r3, [sp, #4]
 8002e50:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002e52:	f041 0101 	orr.w	r1, r1, #1
 8002e56:	6311      	str	r1, [r2, #48]	; 0x30
 8002e58:	6b12      	ldr	r2, [r2, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5a:	9304      	str	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5c:	f002 0201 	and.w	r2, r2, #1
 8002e60:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = DBG_DAC_CH2_Pin;
 8002e62:	2303      	movs	r3, #3
 8002e64:	2220      	movs	r2, #32
    HAL_GPIO_Init(DBG_DAC_CH2_GPIO_Port, &GPIO_InitStruct);
 8002e66:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = DBG_DAC_CH2_Pin;
 8002e68:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6c:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(DBG_DAC_CH2_GPIO_Port, &GPIO_InitStruct);
 8002e6e:	f001 fba7 	bl	80045c0 <HAL_GPIO_Init>
}
 8002e72:	b008      	add	sp, #32
 8002e74:	bd10      	pop	{r4, pc}
 8002e76:	bf00      	nop
 8002e78:	40007400 	.word	0x40007400
 8002e7c:	40020000 	.word	0x40020000

08002e80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e80:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8002e82:	6802      	ldr	r2, [r0, #0]
 8002e84:	4938      	ldr	r1, [pc, #224]	; (8002f68 <HAL_TIM_Base_MspInit+0xe8>)
{
 8002e86:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e88:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 8002e8a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e8c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8002e90:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8002e94:	930a      	str	r3, [sp, #40]	; 0x28
  if(htim_base->Instance==TIM1)
 8002e96:	d004      	beq.n	8002ea2 <HAL_TIM_Base_MspInit+0x22>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8002e98:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002e9c:	d026      	beq.n	8002eec <HAL_TIM_Base_MspInit+0x6c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002e9e:	b00c      	add	sp, #48	; 0x30
 8002ea0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ea2:	4a32      	ldr	r2, [pc, #200]	; (8002f6c <HAL_TIM_Base_MspInit+0xec>)
 8002ea4:	9301      	str	r3, [sp, #4]
 8002ea6:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8002ea8:	4831      	ldr	r0, [pc, #196]	; (8002f70 <HAL_TIM_Base_MspInit+0xf0>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002eaa:	f041 0101 	orr.w	r1, r1, #1
 8002eae:	6451      	str	r1, [r2, #68]	; 0x44
 8002eb0:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002eb2:	f001 0101 	and.w	r1, r1, #1
 8002eb6:	9101      	str	r1, [sp, #4]
 8002eb8:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eba:	9302      	str	r3, [sp, #8]
 8002ebc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ecc:	2301      	movs	r3, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ece:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ed0:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8002ed6:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8002ed8:	2440      	movs	r4, #64	; 0x40
 8002eda:	2502      	movs	r5, #2
 8002edc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002ee0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8002ee4:	f001 fb6c 	bl	80045c0 <HAL_GPIO_Init>
}
 8002ee8:	b00c      	add	sp, #48	; 0x30
 8002eea:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eec:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8002ef0:	9303      	str	r3, [sp, #12]
 8002ef2:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef4:	481f      	ldr	r0, [pc, #124]	; (8002f74 <HAL_TIM_Base_MspInit+0xf4>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ef6:	f041 0101 	orr.w	r1, r1, #1
 8002efa:	6411      	str	r1, [r2, #64]	; 0x40
 8002efc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002efe:	f001 0101 	and.w	r1, r1, #1
 8002f02:	9103      	str	r1, [sp, #12]
 8002f04:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f06:	9304      	str	r3, [sp, #16]
 8002f08:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002f0a:	f041 0102 	orr.w	r1, r1, #2
 8002f0e:	6311      	str	r1, [r2, #48]	; 0x30
 8002f10:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002f12:	f001 0102 	and.w	r1, r1, #2
 8002f16:	9104      	str	r1, [sp, #16]
 8002f18:	9904      	ldr	r1, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1a:	9305      	str	r3, [sp, #20]
 8002f1c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	6313      	str	r3, [r2, #48]	; 0x30
 8002f24:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	9305      	str	r3, [sp, #20]
 8002f2c:	9905      	ldr	r1, [sp, #20]
    GPIO_InitStruct.Pin = M1_HALL_H3_Pin|M1_HALL_H2_Pin;
 8002f2e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8002f32:	2302      	movs	r3, #2
 8002f34:	2400      	movs	r4, #0
 8002f36:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f38:	2601      	movs	r6, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f3a:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_HALL_H3_Pin|M1_HALL_H2_Pin;
 8002f3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002f40:	e9cd 4508 	strd	r4, r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f44:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f46:	f001 fb3b 	bl	80045c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8002f4a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002f4e:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8002f50:	4807      	ldr	r0, [pc, #28]	; (8002f70 <HAL_TIM_Base_MspInit+0xf0>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f52:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8002f54:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8002f56:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8002f5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8002f5e:	f001 fb2f 	bl	80045c0 <HAL_GPIO_Init>
}
 8002f62:	b00c      	add	sp, #48	; 0x30
 8002f64:	bd70      	pop	{r4, r5, r6, pc}
 8002f66:	bf00      	nop
 8002f68:	40010000 	.word	0x40010000
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	40020000 	.word	0x40020000
 8002f74:	40020400 	.word	0x40020400

08002f78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f78:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8002f7a:	6801      	ldr	r1, [r0, #0]
 8002f7c:	4a1f      	ldr	r2, [pc, #124]	; (8002ffc <HAL_TIM_MspPostInit+0x84>)
{
 8002f7e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f80:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8002f82:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f84:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002f88:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002f8c:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 8002f8e:	d001      	beq.n	8002f94 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002f90:	b008      	add	sp, #32
 8002f92:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f94:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f9c:	4818      	ldr	r0, [pc, #96]	; (8003000 <HAL_TIM_MspPostInit+0x88>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f9e:	f041 0102 	orr.w	r1, r1, #2
 8002fa2:	6311      	str	r1, [r2, #48]	; 0x30
 8002fa4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002fa6:	f001 0102 	and.w	r1, r1, #2
 8002faa:	9100      	str	r1, [sp, #0]
 8002fac:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fae:	9301      	str	r3, [sp, #4]
 8002fb0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002fb2:	f043 0301 	orr.w	r3, r3, #1
 8002fb6:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	9301      	str	r3, [sp, #4]
 8002fc0:	9901      	ldr	r1, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002fc2:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	2402      	movs	r4, #2
 8002fca:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002fcc:	2601      	movs	r6, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fce:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002fd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002fd4:	e9cd 4504 	strd	r4, r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002fd8:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fda:	f001 faf1 	bl	80045c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002fde:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002fe2:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe4:	4807      	ldr	r0, [pc, #28]	; (8003004 <HAL_TIM_MspPostInit+0x8c>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002fe6:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002fea:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002fee:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff2:	f001 fae5 	bl	80045c0 <HAL_GPIO_Init>
}
 8002ff6:	b008      	add	sp, #32
 8002ff8:	bd70      	pop	{r4, r5, r6, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40010000 	.word	0x40010000
 8003000:	40020400 	.word	0x40020400
 8003004:	40020000 	.word	0x40020000

08003008 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003008:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 800300a:	6801      	ldr	r1, [r0, #0]
 800300c:	4a18      	ldr	r2, [pc, #96]	; (8003070 <HAL_UART_MspInit+0x68>)
{
 800300e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003010:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 8003012:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003014:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003018:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800301c:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART2)
 800301e:	d001      	beq.n	8003024 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003020:	b009      	add	sp, #36	; 0x24
 8003022:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8003024:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302c:	4811      	ldr	r0, [pc, #68]	; (8003074 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800302e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8003032:	6411      	str	r1, [r2, #64]	; 0x40
 8003034:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003036:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
 800303a:	9100      	str	r1, [sp, #0]
 800303c:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303e:	9301      	str	r3, [sp, #4]
 8003040:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	6313      	str	r3, [r2, #48]	; 0x30
 8003048:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003050:	2307      	movs	r3, #7
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003052:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003054:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003056:	2200      	movs	r2, #0
 8003058:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800305a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800305c:	240c      	movs	r4, #12
 800305e:	2502      	movs	r5, #2
 8003060:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003064:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003068:	f001 faaa 	bl	80045c0 <HAL_GPIO_Init>
}
 800306c:	b009      	add	sp, #36	; 0x24
 800306e:	bd30      	pop	{r4, r5, pc}
 8003070:	40004400 	.word	0x40004400
 8003074:	40020000 	.word	0x40020000

08003078 <ADC_IRQHandler>:
  * @brief  This function handles ADC1/ADC2 interrupt request.
  * @param  None
  * @retval None
  */
void ADC_IRQHandler(void)
{
 8003078:	b508      	push	{r3, lr}
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 800307a:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <ADC_IRQHandler+0x34>)
 800307c:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 800307e:	0752      	lsls	r2, r2, #29
 8003080:	d509      	bpl.n	8003096 <ADC_IRQHandler+0x1e>
  {
    // Clear Flags
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	f022 020c 	bic.w	r2, r2, #12
 8003088:	601a      	str	r2, [r3, #0]

    UI_DACUpdate(TSK_HighFrequencyTask());  /*GUI, this section is present only if DAC is enabled*/
 800308a:	f7fe ff73 	bl	8001f74 <TSK_HighFrequencyTask>
  }
#endif
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800308e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_DACUpdate(TSK_HighFrequencyTask());  /*GUI, this section is present only if DAC is enabled*/
 8003092:	f000 b993 	b.w	80033bc <UI_DACUpdate>
    ADC3->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8003096:	4a06      	ldr	r2, [pc, #24]	; (80030b0 <ADC_IRQHandler+0x38>)
 8003098:	6813      	ldr	r3, [r2, #0]
 800309a:	f023 030c 	bic.w	r3, r3, #12
 800309e:	6013      	str	r3, [r2, #0]
    UI_DACUpdate(TSK_HighFrequencyTask());  /*GUI, this section is present only if DAC is enabled*/
 80030a0:	f7fe ff68 	bl	8001f74 <TSK_HighFrequencyTask>
}
 80030a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_DACUpdate(TSK_HighFrequencyTask());  /*GUI, this section is present only if DAC is enabled*/
 80030a8:	f000 b988 	b.w	80033bc <UI_DACUpdate>
 80030ac:	40012000 	.word	0x40012000
 80030b0:	40012200 	.word	0x40012200

080030b4 <TIM1_UP_TIM10_IRQHandler>:
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 80030b4:	4803      	ldr	r0, [pc, #12]	; (80030c4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80030b6:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80030b8:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80030ba:	f06f 0201 	mvn.w	r2, #1
 80030be:	611a      	str	r2, [r3, #16]
  ICS_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 80030c0:	f003 bac8 	b.w	8006654 <ICS_TIMx_UP_IRQHandler>
 80030c4:	20000350 	.word	0x20000350

080030c8 <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 80030c8:	4807      	ldr	r0, [pc, #28]	; (80030e8 <TIM1_BRK_TIM9_IRQHandler+0x20>)
{
 80030ca:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 80030cc:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80030ce:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	0612      	lsls	r2, r2, #24
 80030d4:	d504      	bpl.n	80030e0 <TIM1_BRK_TIM9_IRQHandler+0x18>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80030d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030da:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    ICS_BRK_IRQHandler(&PWM_Handle_M1);
 80030dc:	f003 fb04 	bl	80066e8 <ICS_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 80030e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 80030e4:	f7fe bf1a 	b.w	8001f1c <MC_Scheduler>
 80030e8:	20000350 	.word	0x20000350

080030ec <TIM2_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  * @retval None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 80030ec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx))
 80030ee:	4c0c      	ldr	r4, [pc, #48]	; (8003120 <TIM2_IRQHandler+0x34>)
 80030f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80030f2:	691a      	ldr	r2, [r3, #16]
 80030f4:	07d1      	lsls	r1, r2, #31
 80030f6:	d40b      	bmi.n	8003110 <TIM2_IRQHandler+0x24>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80030f8:	691a      	ldr	r2, [r3, #16]
 80030fa:	0792      	lsls	r2, r2, #30
 80030fc:	d507      	bpl.n	800310e <TIM2_IRQHandler+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80030fe:	f06f 0202 	mvn.w	r2, #2
  /* Nothing to do */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8003102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 8003106:	4806      	ldr	r0, [pc, #24]	; (8003120 <TIM2_IRQHandler+0x34>)
 8003108:	611a      	str	r2, [r3, #16]
 800310a:	f002 be97 	b.w	8005e3c <HALL_TIMx_CC_IRQHandler>
}
 800310e:	bd10      	pop	{r4, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003110:	f06f 0201 	mvn.w	r2, #1
 8003114:	611a      	str	r2, [r3, #16]
    HALL_TIMx_UP_IRQHandler(&HALL_M1);
 8003116:	4620      	mov	r0, r4
 8003118:	f003 f824 	bl	8006164 <HALL_TIMx_UP_IRQHandler>
 800311c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800311e:	e7eb      	b.n	80030f8 <TIM2_IRQHandler+0xc>
 8003120:	200000f0 	.word	0x200000f0

08003124 <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8003124:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8003126:	4c1f      	ldr	r4, [pc, #124]	; (80031a4 <USART2_IRQHandler+0x80>)
 8003128:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	0691      	lsls	r1, r2, #26
{
 8003130:	b082      	sub	sp, #8
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8003132:	d407      	bmi.n	8003144 <USART2_IRQHandler+0x20>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8003134:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8003136:	0612      	lsls	r2, r2, #24
 8003138:	d413      	bmi.n	8003162 <USART2_IRQHandler+0x3e>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800313a:	681b      	ldr	r3, [r3, #0]
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 800313c:	071b      	lsls	r3, r3, #28
 800313e:	d418      	bmi.n	8003172 <USART2_IRQHandler+0x4e>
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8003140:	b002      	add	sp, #8
 8003142:	bd10      	pop	{r4, pc}
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003144:	6859      	ldr	r1, [r3, #4]
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 8003146:	4620      	mov	r0, r4
 8003148:	b2c9      	uxtb	r1, r1
 800314a:	f004 f88b 	bl	8007264 <UFCP_RX_IRQ_Handler>
 800314e:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 8003150:	2b01      	cmp	r3, #1
 8003152:	d021      	beq.n	8003198 <USART2_IRQHandler+0x74>
    if (retVal == 2)
 8003154:	2b02      	cmp	r3, #2
 8003156:	d01c      	beq.n	8003192 <USART2_IRQHandler+0x6e>
 8003158:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800315c:	681a      	ldr	r2, [r3, #0]
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 800315e:	0612      	lsls	r2, r2, #24
 8003160:	d5eb      	bpl.n	800313a <USART2_IRQHandler+0x16>
    UFCP_TX_IRQ_Handler(&pUSART);
 8003162:	4810      	ldr	r0, [pc, #64]	; (80031a4 <USART2_IRQHandler+0x80>)
 8003164:	f003 ffe6 	bl	8007134 <UFCP_TX_IRQ_Handler>
 8003168:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800316c:	681b      	ldr	r3, [r3, #0]
  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 800316e:	071b      	lsls	r3, r3, #28
 8003170:	d5e6      	bpl.n	8003140 <USART2_IRQHandler+0x1c>
    UFCP_OVR_IRQ_Handler(&pUSART);
 8003172:	480c      	ldr	r0, [pc, #48]	; (80031a4 <USART2_IRQHandler+0x80>)
 8003174:	f004 f8d8 	bl	8007328 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8003178:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8003180:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003186:	9b01      	ldr	r3, [sp, #4]
}
 8003188:	b002      	add	sp, #8
 800318a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UI_SerialCommunicationTimeOutStop();
 800318e:	f000 b925 	b.w	80033dc <UI_SerialCommunicationTimeOutStop>
      UI_SerialCommunicationTimeOutStop();
 8003192:	f000 f923 	bl	80033dc <UI_SerialCommunicationTimeOutStop>
 8003196:	e7df      	b.n	8003158 <USART2_IRQHandler+0x34>
      UI_SerialCommunicationTimeOutStart();
 8003198:	f000 f926 	bl	80033e8 <UI_SerialCommunicationTimeOutStart>
    if (retVal == 2)
 800319c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80031a0:	e7c8      	b.n	8003134 <USART2_IRQHandler+0x10>
 80031a2:	bf00      	nop
 80031a4:	200005b8 	.word	0x200005b8

080031a8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80031a8:	b530      	push	{r4, r5, lr}
 80031aa:	b083      	sub	sp, #12
 80031ac:	4c1c      	ldr	r4, [pc, #112]	; (8003220 <HardFault_Handler+0x78>)
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 80031ae:	f7fe ffdb 	bl	8002168 <TSK_HardwareFaultTask>
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 80031b2:	4625      	mov	r5, r4
 80031b4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80031b8:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80031ba:	0712      	lsls	r2, r2, #28
 80031bc:	d41d      	bmi.n	80031fa <HardFault_Handler+0x52>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80031be:	681a      	ldr	r2, [r3, #0]
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
        UI_SerialCommunicationTimeOutStop();
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80031c0:	0610      	lsls	r0, r2, #24
 80031c2:	d40f      	bmi.n	80031e4 <HardFault_Handler+0x3c>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80031c4:	681a      	ldr	r2, [r3, #0]
      {
        UFCP_TX_IRQ_Handler(&pUSART);
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80031c6:	0692      	lsls	r2, r2, #26
 80031c8:	d5f6      	bpl.n	80031b8 <HardFault_Handler+0x10>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80031ca:	6859      	ldr	r1, [r3, #4]
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 80031cc:	4628      	mov	r0, r5
 80031ce:	b2c9      	uxtb	r1, r1
 80031d0:	f004 f848 	bl	8007264 <UFCP_RX_IRQ_Handler>
 80031d4:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d01f      	beq.n	800321a <HardFault_Handler+0x72>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d1ea      	bne.n	80031b4 <HardFault_Handler+0xc>
        {
          UI_SerialCommunicationTimeOutStop();
 80031de:	f000 f8fd 	bl	80033dc <UI_SerialCommunicationTimeOutStop>
 80031e2:	e7e7      	b.n	80031b4 <HardFault_Handler+0xc>
        UFCP_TX_IRQ_Handler(&pUSART);
 80031e4:	4628      	mov	r0, r5
 80031e6:	f003 ffa5 	bl	8007134 <UFCP_TX_IRQ_Handler>
 80031ea:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80031ee:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80031f0:	0691      	lsls	r1, r2, #26
 80031f2:	d4ea      	bmi.n	80031ca <HardFault_Handler+0x22>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80031f4:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80031f6:	0712      	lsls	r2, r2, #28
 80031f8:	d5e1      	bpl.n	80031be <HardFault_Handler+0x16>
        UFCP_OVR_IRQ_Handler(&pUSART);
 80031fa:	4628      	mov	r0, r5
 80031fc:	f004 f894 	bl	8007328 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8003200:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8003208:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 800320e:	9b01      	ldr	r3, [sp, #4]
        UI_SerialCommunicationTimeOutStop();
 8003210:	f000 f8e4 	bl	80033dc <UI_SerialCommunicationTimeOutStop>
 8003214:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003218:	e7d1      	b.n	80031be <HardFault_Handler+0x16>
          UI_SerialCommunicationTimeOutStart();
 800321a:	f000 f8e5 	bl	80033e8 <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 800321e:	e7c9      	b.n	80031b4 <HardFault_Handler+0xc>
 8003220:	200005b8 	.word	0x200005b8

08003224 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8003224:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8003226:	4c0a      	ldr	r4, [pc, #40]	; (8003250 <SysTick_Handler+0x2c>)
 8003228:	7823      	ldrb	r3, [r4, #0]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d006      	beq.n	800323c <SysTick_Handler+0x18>
 800322e:	3301      	adds	r3, #1
 8003230:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8003232:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8003234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8003238:	f7fe bf86 	b.w	8002148 <MC_RunMotorControlTasks>
    HAL_IncTick();
 800323c:	f000 fe92 	bl	8003f64 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8003240:	f001 f97e 	bl	8004540 <HAL_SYSTICK_IRQHandler>
 8003244:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8003246:	7023      	strb	r3, [r4, #0]
}
 8003248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 800324c:	f7fe bf7c 	b.w	8002148 <MC_RunMotorControlTasks>
 8003250:	200006f8 	.word	0x200006f8

08003254 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003254:	490c      	ldr	r1, [pc, #48]	; (8003288 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003256:	4a0d      	ldr	r2, [pc, #52]	; (800328c <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8003258:	680b      	ldr	r3, [r1, #0]
{
 800325a:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800325c:	4c0c      	ldr	r4, [pc, #48]	; (8003290 <_sbrk+0x3c>)
 800325e:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8003260:	b12b      	cbz	r3, 800326e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003262:	4418      	add	r0, r3
 8003264:	4290      	cmp	r0, r2
 8003266:	d807      	bhi.n	8003278 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003268:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 800326a:	4618      	mov	r0, r3
 800326c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800326e:	4b09      	ldr	r3, [pc, #36]	; (8003294 <_sbrk+0x40>)
 8003270:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8003272:	4418      	add	r0, r3
 8003274:	4290      	cmp	r0, r2
 8003276:	d9f7      	bls.n	8003268 <_sbrk+0x14>
    errno = ENOMEM;
 8003278:	f004 fb00 	bl	800787c <__errno>
 800327c:	230c      	movs	r3, #12
 800327e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003280:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003284:	4618      	mov	r0, r3
 8003286:	bd10      	pop	{r4, pc}
 8003288:	2000079c 	.word	0x2000079c
 800328c:	20020000 	.word	0x20020000
 8003290:	00000400 	.word	0x00000400
 8003294:	20000b28 	.word	0x20000b28

08003298 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8003298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800329c:	b087      	sub	sp, #28
      pDAC = &DAC_UI_Params;
      pDAC->_Super = UI_Params;
 800329e:	4d2d      	ldr	r5, [pc, #180]	; (8003354 <UI_TaskInit+0xbc>)
{
 80032a0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80032a2:	9405      	str	r4, [sp, #20]
      pDAC->_Super = UI_Params;
 80032a4:	462c      	mov	r4, r5
{
 80032a6:	4682      	mov	sl, r0
 80032a8:	460f      	mov	r7, r1
 80032aa:	4690      	mov	r8, r2
 80032ac:	4699      	mov	r9, r3
      pDAC->_Super = UI_Params;
 80032ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
      pDAC = &DAC_UI_Params;
 80032b0:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 800336c <UI_TaskInit+0xd4>
 80032b4:	4e28      	ldr	r6, [pc, #160]	; (8003358 <UI_TaskInit+0xc0>)
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_MEAS_ROT_SPEED );

    pMCP = &MCP_UI_Params;
    pMCP->_Super = UI_Params;

    UFCP_Init( & pUSART );
 80032b6:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8003370 <UI_TaskInit+0xd8>
      pDAC = &DAC_UI_Params;
 80032ba:	f8c6 e000 	str.w	lr, [r6]
      pDAC->_Super = UI_Params;
 80032be:	46f4      	mov	ip, lr
 80032c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80032c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80032ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 80032ce:	f8cd a000 	str.w	sl, [sp]
      pDAC->_Super = UI_Params;
 80032d2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 80032d6:	464b      	mov	r3, r9
 80032d8:	4670      	mov	r0, lr
 80032da:	4642      	mov	r2, r8
 80032dc:	4639      	mov	r1, r7
 80032de:	f000 f889 	bl	80033f4 <UI_Init>
      UI_DACInit( &pDAC->_Super ); /* Init DAC */
 80032e2:	6830      	ldr	r0, [r6, #0]
 80032e4:	f000 fab4 	bl	8003850 <UI_DACInit>
      UI_SetDAC( &pDAC->_Super, DAC_CH0, MC_PROTOCOL_REG_MEAS_ROT_SPEED );
 80032e8:	6830      	ldr	r0, [r6, #0]
 80032ea:	2230      	movs	r2, #48	; 0x30
 80032ec:	2100      	movs	r1, #0
 80032ee:	f000 fab7 	bl	8003860 <UI_SetDAC>
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_MEAS_ROT_SPEED );
 80032f2:	6830      	ldr	r0, [r6, #0]
 80032f4:	2230      	movs	r2, #48	; 0x30
 80032f6:	2101      	movs	r1, #1
 80032f8:	f000 fab2 	bl	8003860 <UI_SetDAC>
    pMCP->_Super = UI_Params;
 80032fc:	46ae      	mov	lr, r5
 80032fe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    pMCP = &MCP_UI_Params;
 8003302:	f8df c070 	ldr.w	ip, [pc, #112]	; 8003374 <UI_TaskInit+0xdc>
    pMCP->_Super = UI_Params;
 8003306:	4665      	mov	r5, ip
 8003308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800330a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800330e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003310:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    pMCP = &MCP_UI_Params;
 8003314:	4c11      	ldr	r4, [pc, #68]	; (800335c <UI_TaskInit+0xc4>)
    pMCP->_Super = UI_Params;
 8003316:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    UFCP_Init( & pUSART );
 800331a:	4658      	mov	r0, fp
    pMCP = &MCP_UI_Params;
 800331c:	f8c4 c000 	str.w	ip, [r4]
    UFCP_Init( & pUSART );
 8003320:	f003 ff06 	bl	8007130 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, pDAC, s_fwVer);
 8003324:	6832      	ldr	r2, [r6, #0]
 8003326:	9905      	ldr	r1, [sp, #20]
 8003328:	4b0d      	ldr	r3, [pc, #52]	; (8003360 <UI_TaskInit+0xc8>)
 800332a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800332e:	4659      	mov	r1, fp
 8003330:	6820      	ldr	r0, [r4, #0]
 8003332:	4a0c      	ldr	r2, [pc, #48]	; (8003364 <UI_TaskInit+0xcc>)
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <UI_TaskInit+0xd0>)
 8003338:	f7ff fb20 	bl	800297c <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 800333c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8003340:	6820      	ldr	r0, [r4, #0]
 8003342:	464b      	mov	r3, r9
 8003344:	4642      	mov	r2, r8
 8003346:	4639      	mov	r1, r7

}
 8003348:	b007      	add	sp, #28
 800334a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 800334e:	f000 b851 	b.w	80033f4 <UI_Init>
 8003352:	bf00      	nop
 8003354:	20000588 	.word	0x20000588
 8003358:	200007a4 	.word	0x200007a4
 800335c:	200007a8 	.word	0x200007a8
 8003360:	08007345 	.word	0x08007345
 8003364:	080071b5 	.word	0x080071b5
 8003368:	08007195 	.word	0x08007195
 800336c:	200000b4 	.word	0x200000b4
 8003370:	200005b8 	.word	0x200005b8
 8003374:	20000a44 	.word	0x20000a44

08003378 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8003378:	4a0d      	ldr	r2, [pc, #52]	; (80033b0 <UI_Scheduler+0x38>)
 800337a:	8813      	ldrh	r3, [r2, #0]
 800337c:	b29b      	uxth	r3, r3
 800337e:	b11b      	cbz	r3, 8003388 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8003380:	8813      	ldrh	r3, [r2, #0]
 8003382:	3b01      	subs	r3, #1
 8003384:	b29b      	uxth	r3, r3
 8003386:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8003388:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <UI_Scheduler+0x3c>)
 800338a:	8813      	ldrh	r3, [r2, #0]
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b01      	cmp	r3, #1
 8003390:	d903      	bls.n	800339a <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 8003392:	8813      	ldrh	r3, [r2, #0]
 8003394:	3b01      	subs	r3, #1
 8003396:	b29b      	uxth	r3, r3
 8003398:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 800339a:	4a07      	ldr	r2, [pc, #28]	; (80033b8 <UI_Scheduler+0x40>)
 800339c:	8813      	ldrh	r3, [r2, #0]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d903      	bls.n	80033ac <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 80033a4:	8813      	ldrh	r3, [r2, #0]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	8013      	strh	r3, [r2, #0]
  }
}
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	200007a2 	.word	0x200007a2
 80033b4:	200007a0 	.word	0x200007a0
 80033b8:	200006fa 	.word	0x200006fa

080033bc <UI_DACUpdate>:

__weak void UI_DACUpdate(uint8_t bMotorNbr)
{
 80033bc:	b538      	push	{r3, r4, r5, lr}
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 80033be:	4d06      	ldr	r5, [pc, #24]	; (80033d8 <UI_DACUpdate+0x1c>)
{
 80033c0:	4604      	mov	r4, r0
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 80033c2:	6828      	ldr	r0, [r5, #0]
 80033c4:	f000 f82a 	bl	800341c <UI_GetSelectedMC>
 80033c8:	42a0      	cmp	r0, r4
 80033ca:	d000      	beq.n	80033ce <UI_DACUpdate+0x12>
  {
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
  }
}
 80033cc:	bd38      	pop	{r3, r4, r5, pc}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 80033ce:	6828      	ldr	r0, [r5, #0]
}
 80033d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 80033d4:	f000 ba40 	b.w	8003858 <UI_DACExec>
 80033d8:	200007a4 	.word	0x200007a4

080033dc <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 80033dc:	4b01      	ldr	r3, [pc, #4]	; (80033e4 <UI_SerialCommunicationTimeOutStop+0x8>)
 80033de:	2200      	movs	r2, #0
 80033e0:	801a      	strh	r2, [r3, #0]
}
 80033e2:	4770      	bx	lr
 80033e4:	200007a0 	.word	0x200007a0

080033e8 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 80033e8:	4b01      	ldr	r3, [pc, #4]	; (80033f0 <UI_SerialCommunicationTimeOutStart+0x8>)
 80033ea:	224f      	movs	r2, #79	; 0x4f
 80033ec:	801a      	strh	r2, [r3, #0]
}
 80033ee:	4770      	bx	lr
 80033f0:	200007a0 	.word	0x200007a0

080033f4 <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  * @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 80033f4:	b430      	push	{r4, r5}
 80033f6:	9c02      	ldr	r4, [sp, #8]
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 80033f8:	6284      	str	r4, [r0, #40]	; 0x28
  pHandle->bSelectedDrive = 0u;
 80033fa:	2500      	movs	r5, #0
 80033fc:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
  pHandle->pMCT = pMCT;
 8003400:	e9c0 2308 	strd	r2, r3, [r0, #32]
}
 8003404:	bc30      	pop	{r4, r5}
  pHandle->bDriveNum = bMCNum;
 8003406:	7701      	strb	r1, [r0, #28]
}
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop

0800340c <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 800340c:	7f03      	ldrb	r3, [r0, #28]
 800340e:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8003410:	bf86      	itte	hi
 8003412:	f880 102c 	strbhi.w	r1, [r0, #44]	; 0x2c
  bool retVal = true;
 8003416:	2001      	movhi	r0, #1
    retVal = false;
 8003418:	2000      	movls	r0, #0
  }
  return retVal;
}
 800341a:	4770      	bx	lr

0800341c <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 800341c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop

08003424 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8003424:	b570      	push	{r4, r5, r6, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003426:	e9d0 5408 	ldrd	r5, r4, [r0, #32]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800342a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800342e:	b082      	sub	sp, #8
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003430:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003434:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
{
 8003438:	4614      	mov	r4, r2
 800343a:	295b      	cmp	r1, #91	; 0x5b
 800343c:	d85d      	bhi.n	80034fa <UI_SetReg+0xd6>
 800343e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003442:	006b      	.short	0x006b
 8003444:	005c005c 	.word	0x005c005c
 8003448:	005c006f 	.word	0x005c006f
 800344c:	007f0079 	.word	0x007f0079
 8003450:	008b0085 	.word	0x008b0085
 8003454:	009d0097 	.word	0x009d0097
 8003458:	00a900a3 	.word	0x00a900a3
 800345c:	00bb00b5 	.word	0x00bb00b5
 8003460:	00c700c1 	.word	0x00c700c1
 8003464:	005c00e1 	.word	0x005c00e1
 8003468:	00fb005c 	.word	0x00fb005c
 800346c:	005c0117 	.word	0x005c0117
 8003470:	005c005c 	.word	0x005c005c
 8003474:	005c005c 	.word	0x005c005c
 8003478:	005c005c 	.word	0x005c005c
 800347c:	005c005c 	.word	0x005c005c
 8003480:	005c005c 	.word	0x005c005c
 8003484:	005c005c 	.word	0x005c005c
 8003488:	005c005c 	.word	0x005c005c
 800348c:	005c005c 	.word	0x005c005c
 8003490:	005c005c 	.word	0x005c005c
 8003494:	005c005c 	.word	0x005c005c
 8003498:	005c005c 	.word	0x005c005c
 800349c:	005c005c 	.word	0x005c005c
 80034a0:	005c005c 	.word	0x005c005c
 80034a4:	005c005c 	.word	0x005c005c
 80034a8:	005c005c 	.word	0x005c005c
 80034ac:	005c005c 	.word	0x005c005c
 80034b0:	005c005c 	.word	0x005c005c
 80034b4:	005c005c 	.word	0x005c005c
 80034b8:	005c005c 	.word	0x005c005c
 80034bc:	005c005c 	.word	0x005c005c
 80034c0:	005c005c 	.word	0x005c005c
 80034c4:	005c0133 	.word	0x005c0133
 80034c8:	005c005c 	.word	0x005c005c
 80034cc:	005c005c 	.word	0x005c005c
 80034d0:	005c005c 	.word	0x005c005c
 80034d4:	005c005c 	.word	0x005c005c
 80034d8:	005c005c 	.word	0x005c005c
 80034dc:	005c005c 	.word	0x005c005c
 80034e0:	005c005c 	.word	0x005c005c
 80034e4:	005c005c 	.word	0x005c005c
 80034e8:	005c005c 	.word	0x005c005c
 80034ec:	005c005c 	.word	0x005c005c
 80034f0:	005c005c 	.word	0x005c005c
 80034f4:	005c005c 	.word	0x005c005c
 80034f8:	005f      	.short	0x005f
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80034fa:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 80034fc:	b002      	add	sp, #8
 80034fe:	bd70      	pop	{r4, r5, r6, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8003500:	4a7e      	ldr	r2, [pc, #504]	; (80036fc <UI_SetReg+0x2d8>)
 8003502:	fb82 3204 	smull	r3, r2, r2, r4
 8003506:	eba2 74e4 	sub.w	r4, r2, r4, asr #31
 800350a:	4630      	mov	r0, r6
 800350c:	b221      	sxth	r1, r4
 800350e:	2200      	movs	r2, #0
 8003510:	f7fe f900 	bl	8001714 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8003514:	2001      	movs	r0, #1
    break;
 8003516:	e7f1      	b.n	80034fc <UI_SetReg+0xd8>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8003518:	b2e1      	uxtb	r1, r4
 800351a:	f7ff ff77 	bl	800340c <UI_SelectMC>
    break;
 800351e:	e7ed      	b.n	80034fc <UI_SetReg+0xd8>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8003520:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8003524:	f000 80d6 	beq.w	80036d4 <UI_SetReg+0x2b0>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8003528:	2c01      	cmp	r4, #1
 800352a:	f000 80dd 	beq.w	80036e8 <UI_SetReg+0x2c4>
  bool retVal = true;
 800352e:	2001      	movs	r0, #1
}
 8003530:	b002      	add	sp, #8
 8003532:	bd70      	pop	{r4, r5, r6, pc}
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8003534:	6828      	ldr	r0, [r5, #0]
 8003536:	b221      	sxth	r1, r4
 8003538:	f003 f98c 	bl	8006854 <PID_SetKP>
  bool retVal = true;
 800353c:	2001      	movs	r0, #1
    break;
 800353e:	e7dd      	b.n	80034fc <UI_SetReg+0xd8>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8003540:	6828      	ldr	r0, [r5, #0]
 8003542:	b221      	sxth	r1, r4
 8003544:	f003 f988 	bl	8006858 <PID_SetKI>
  bool retVal = true;
 8003548:	2001      	movs	r0, #1
    break;
 800354a:	e7d7      	b.n	80034fc <UI_SetReg+0xd8>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 800354c:	6828      	ldr	r0, [r5, #0]
 800354e:	b221      	sxth	r1, r4
 8003550:	f003 f992 	bl	8006878 <PID_SetKD>
  bool retVal = true;
 8003554:	2001      	movs	r0, #1
    break;
 8003556:	e7d1      	b.n	80034fc <UI_SetReg+0xd8>
      currComp = MCI_GetIqdref(pMCI);
 8003558:	4630      	mov	r0, r6
 800355a:	f7fe f995 	bl	8001888 <MCI_GetIqdref>
 800355e:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 8003560:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 8003564:	4630      	mov	r0, r6
 8003566:	9901      	ldr	r1, [sp, #4]
 8003568:	f7fe f8ea 	bl	8001740 <MCI_SetCurrentReferences>
  bool retVal = true;
 800356c:	2001      	movs	r0, #1
    break;
 800356e:	e7c5      	b.n	80034fc <UI_SetReg+0xd8>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8003570:	6868      	ldr	r0, [r5, #4]
 8003572:	b221      	sxth	r1, r4
 8003574:	f003 f96e 	bl	8006854 <PID_SetKP>
  bool retVal = true;
 8003578:	2001      	movs	r0, #1
    break;
 800357a:	e7bf      	b.n	80034fc <UI_SetReg+0xd8>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 800357c:	6868      	ldr	r0, [r5, #4]
 800357e:	b221      	sxth	r1, r4
 8003580:	f003 f96a 	bl	8006858 <PID_SetKI>
  bool retVal = true;
 8003584:	2001      	movs	r0, #1
    break;
 8003586:	e7b9      	b.n	80034fc <UI_SetReg+0xd8>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8003588:	6868      	ldr	r0, [r5, #4]
 800358a:	b221      	sxth	r1, r4
 800358c:	f003 f974 	bl	8006878 <PID_SetKD>
  bool retVal = true;
 8003590:	2001      	movs	r0, #1
    break;
 8003592:	e7b3      	b.n	80034fc <UI_SetReg+0xd8>
      currComp = MCI_GetIqdref(pMCI);
 8003594:	4630      	mov	r0, r6
 8003596:	f7fe f977 	bl	8001888 <MCI_GetIqdref>
 800359a:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 800359c:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 80035a0:	4630      	mov	r0, r6
 80035a2:	9901      	ldr	r1, [sp, #4]
 80035a4:	f7fe f8cc 	bl	8001740 <MCI_SetCurrentReferences>
  bool retVal = true;
 80035a8:	2001      	movs	r0, #1
    break;
 80035aa:	e7a7      	b.n	80034fc <UI_SetReg+0xd8>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 80035ac:	68a8      	ldr	r0, [r5, #8]
 80035ae:	b221      	sxth	r1, r4
 80035b0:	f003 f950 	bl	8006854 <PID_SetKP>
  bool retVal = true;
 80035b4:	2001      	movs	r0, #1
    break;
 80035b6:	e7a1      	b.n	80034fc <UI_SetReg+0xd8>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 80035b8:	68a8      	ldr	r0, [r5, #8]
 80035ba:	b221      	sxth	r1, r4
 80035bc:	f003 f94c 	bl	8006858 <PID_SetKI>
  bool retVal = true;
 80035c0:	2001      	movs	r0, #1
    break;
 80035c2:	e79b      	b.n	80034fc <UI_SetReg+0xd8>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 80035c4:	68a8      	ldr	r0, [r5, #8]
 80035c6:	b221      	sxth	r1, r4
 80035c8:	f003 f956 	bl	8006878 <PID_SetKD>
  bool retVal = true;
 80035cc:	2001      	movs	r0, #1
    break;
 80035ce:	e795      	b.n	80034fc <UI_SetReg+0xd8>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80035d0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80035d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035d6:	0f1a      	lsrs	r2, r3, #28
 80035d8:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035da:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035de:	d06d      	beq.n	80036bc <UI_SetReg+0x298>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035e0:	2b09      	cmp	r3, #9
 80035e2:	d1a4      	bne.n	800352e <UI_SetReg+0x10a>
        pSPD = pMCT->pSpeedSensorAux;
 80035e4:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 80035e6:	2e00      	cmp	r6, #0
 80035e8:	d0a1      	beq.n	800352e <UI_SetReg+0x10a>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80035ea:	aa01      	add	r2, sp, #4
 80035ec:	f10d 0102 	add.w	r1, sp, #2
 80035f0:	4630      	mov	r0, r6
 80035f2:	f004 f913 	bl	800781c <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hC2);
 80035f6:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80035fa:	b221      	sxth	r1, r4
 80035fc:	4630      	mov	r0, r6
 80035fe:	f004 f915 	bl	800782c <STO_PLL_SetObserverGains>
    break;
 8003602:	e794      	b.n	800352e <UI_SetReg+0x10a>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003604:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800360a:	0f1a      	lsrs	r2, r3, #28
 800360c:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800360e:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003612:	d04f      	beq.n	80036b4 <UI_SetReg+0x290>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003614:	2b09      	cmp	r3, #9
 8003616:	d18a      	bne.n	800352e <UI_SetReg+0x10a>
        pSPD = pMCT->pSpeedSensorAux;
 8003618:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 800361a:	2e00      	cmp	r6, #0
 800361c:	d087      	beq.n	800352e <UI_SetReg+0x10a>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 800361e:	aa01      	add	r2, sp, #4
 8003620:	f10d 0102 	add.w	r1, sp, #2
 8003624:	4630      	mov	r0, r6
 8003626:	f004 f8f9 	bl	800781c <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,hC1,(int16_t)wValue);
 800362a:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 800362e:	b222      	sxth	r2, r4
 8003630:	4630      	mov	r0, r6
 8003632:	f004 f8fb 	bl	800782c <STO_PLL_SetObserverGains>
    break;
 8003636:	e77a      	b.n	800352e <UI_SetReg+0x10a>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003638:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800363a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800363e:	0f1a      	lsrs	r2, r3, #28
 8003640:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003642:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003646:	d03d      	beq.n	80036c4 <UI_SetReg+0x2a0>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003648:	2b09      	cmp	r3, #9
 800364a:	f47f af70 	bne.w	800352e <UI_SetReg+0x10a>
        pSPD = pMCT->pSpeedSensorAux;
 800364e:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 8003650:	2e00      	cmp	r6, #0
 8003652:	f43f af6c 	beq.w	800352e <UI_SetReg+0x10a>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8003656:	aa01      	add	r2, sp, #4
 8003658:	f10d 0102 	add.w	r1, sp, #2
 800365c:	4630      	mov	r0, r6
 800365e:	f004 f8e9 	bl	8007834 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,hPgain,(int16_t)wValue);
 8003662:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8003666:	b222      	sxth	r2, r4
 8003668:	4630      	mov	r0, r6
 800366a:	f004 f8f1 	bl	8007850 <STO_SetPLLGains>
    break;
 800366e:	e75e      	b.n	800352e <UI_SetReg+0x10a>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003670:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003676:	0f1a      	lsrs	r2, r3, #28
 8003678:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800367a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800367e:	d025      	beq.n	80036cc <UI_SetReg+0x2a8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003680:	2b09      	cmp	r3, #9
 8003682:	f47f af54 	bne.w	800352e <UI_SetReg+0x10a>
        pSPD = pMCT->pSpeedSensorAux;
 8003686:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 8003688:	2e00      	cmp	r6, #0
 800368a:	f43f af50 	beq.w	800352e <UI_SetReg+0x10a>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 800368e:	aa01      	add	r2, sp, #4
 8003690:	f10d 0102 	add.w	r1, sp, #2
 8003694:	4630      	mov	r0, r6
 8003696:	f004 f8cd 	bl	8007834 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hIgain);
 800369a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 800369e:	b221      	sxth	r1, r4
 80036a0:	4630      	mov	r0, r6
 80036a2:	f004 f8d5 	bl	8007850 <STO_SetPLLGains>
    break;
 80036a6:	e742      	b.n	800352e <UI_SetReg+0x10a>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 80036a8:	4630      	mov	r0, r6
 80036aa:	b221      	sxth	r1, r4
 80036ac:	f7fe f91a 	bl	80018e4 <MCI_SetIdref>
  bool retVal = true;
 80036b0:	2001      	movs	r0, #1
    break;
 80036b2:	e723      	b.n	80034fc <UI_SetReg+0xd8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036b4:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80036b6:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036b8:	d1af      	bne.n	800361a <UI_SetReg+0x1f6>
 80036ba:	e7ad      	b.n	8003618 <UI_SetReg+0x1f4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036bc:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80036be:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036c0:	d191      	bne.n	80035e6 <UI_SetReg+0x1c2>
 80036c2:	e78f      	b.n	80035e4 <UI_SetReg+0x1c0>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036c4:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80036c6:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036c8:	d1c2      	bne.n	8003650 <UI_SetReg+0x22c>
 80036ca:	e7c0      	b.n	800364e <UI_SetReg+0x22a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036cc:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80036ce:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036d0:	d1da      	bne.n	8003688 <UI_SetReg+0x264>
 80036d2:	e7d8      	b.n	8003686 <UI_SetReg+0x262>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 80036d4:	4630      	mov	r0, r6
 80036d6:	f7fe f901 	bl	80018dc <MCI_GetTeref>
 80036da:	4622      	mov	r2, r4
 80036dc:	4601      	mov	r1, r0
 80036de:	4630      	mov	r0, r6
 80036e0:	f7fe f824 	bl	800172c <MCI_ExecTorqueRamp>
  bool retVal = true;
 80036e4:	2001      	movs	r0, #1
 80036e6:	e709      	b.n	80034fc <UI_SetReg+0xd8>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 80036e8:	4630      	mov	r0, r6
 80036ea:	f7fe f89f 	bl	800182c <MCI_GetMecSpeedRefUnit>
 80036ee:	2200      	movs	r2, #0
 80036f0:	4601      	mov	r1, r0
 80036f2:	4630      	mov	r0, r6
 80036f4:	f7fe f80e 	bl	8001714 <MCI_ExecSpeedRamp>
  bool retVal = true;
 80036f8:	4620      	mov	r0, r4
 80036fa:	e6ff      	b.n	80034fc <UI_SetReg+0xd8>
 80036fc:	2aaaaaab 	.word	0x2aaaaaab

08003700 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8003700:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003702:	6a03      	ldr	r3, [r0, #32]
 8003704:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8003708:	3901      	subs	r1, #1
 800370a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]

  switch (bCmdID)
 800370e:	290d      	cmp	r1, #13
 8003710:	d808      	bhi.n	8003724 <UI_ExecCmd+0x24>
 8003712:	e8df f001 	tbb	[pc, r1]
 8003716:	1419      	.short	0x1419
 8003718:	100e0e09 	.word	0x100e0e09
 800371c:	0728231e 	.word	0x0728231e
 8003720:	14070707 	.word	0x14070707
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003724:	2000      	movs	r0, #0
    retVal = false;
	}
    break;
  }
  return retVal;
}
 8003726:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == RUN)
 8003728:	4620      	mov	r0, r4
 800372a:	f7fe f865 	bl	80017f8 <MCI_GetSTMState>
 800372e:	2806      	cmp	r0, #6
 8003730:	d01e      	beq.n	8003770 <UI_ExecCmd+0x70>
  bool retVal = true;
 8003732:	2001      	movs	r0, #1
}
 8003734:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 8003736:	4620      	mov	r0, r4
 8003738:	f7fe f85e 	bl	80017f8 <MCI_GetSTMState>
 800373c:	b120      	cbz	r0, 8003748 <UI_ExecCmd+0x48>
        MCI_StopMotor(pMCI);
 800373e:	4620      	mov	r0, r4
 8003740:	f7fe f812 	bl	8001768 <MCI_StopMotor>
  bool retVal = true;
 8003744:	2001      	movs	r0, #1
}
 8003746:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 8003748:	4620      	mov	r0, r4
 800374a:	f7fe f803 	bl	8001754 <MCI_StartMotor>
  bool retVal = true;
 800374e:	2001      	movs	r0, #1
}
 8003750:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 8003752:	4620      	mov	r0, r4
 8003754:	f7fe f80c 	bl	8001770 <MCI_FaultAcknowledged>
  bool retVal = true;
 8003758:	2001      	movs	r0, #1
}
 800375a:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 800375c:	4620      	mov	r0, r4
 800375e:	f7fe f80b 	bl	8001778 <MCI_EncoderAlign>
  bool retVal = true;
 8003762:	2001      	movs	r0, #1
}
 8003764:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 8003766:	4620      	mov	r0, r4
 8003768:	f7fe f8c6 	bl	80018f8 <MCI_Clear_Iqdref>
  bool retVal = true;
 800376c:	2001      	movs	r0, #1
}
 800376e:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 8003770:	4620      	mov	r0, r4
 8003772:	f7fe f84f 	bl	8001814 <MCI_StopRamp>
  bool retVal = true;
 8003776:	2001      	movs	r0, #1
}
 8003778:	bd10      	pop	{r4, pc}
 800377a:	bf00      	nop

0800377c <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 800377c:	b510      	push	{r4, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 800377e:	4b07      	ldr	r3, [pc, #28]	; (800379c <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003780:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8003784:	6a00      	ldr	r0, [r0, #32]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8003786:	fb83 c301 	smull	ip, r3, r3, r1
 800378a:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 800378e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8003792:	b209      	sxth	r1, r1
 8003794:	f7fd ffbe 	bl	8001714 <MCI_ExecSpeedRamp>
  return true;
}
 8003798:	2001      	movs	r0, #1
 800379a:	bd10      	pop	{r4, pc}
 800379c:	2aaaaaab 	.word	0x2aaaaaab

080037a0 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 80037a0:	b510      	push	{r4, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80037a2:	6a03      	ldr	r3, [r0, #32]
 80037a4:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 80037a8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80037ac:	f7fd ffbe 	bl	800172c <MCI_ExecTorqueRamp>
  return true;
}
 80037b0:	2001      	movs	r0, #1
 80037b2:	bd10      	pop	{r4, pc}

080037b4 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 80037b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80037b6:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 80037ba:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80037bc:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80037c0:	6944      	ldr	r4, [r0, #20]
  if (pRevupCtrl)
 80037c2:	b19c      	cbz	r4, 80037ec <UI_GetRevupData+0x38>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 80037c4:	4620      	mov	r0, r4
 80037c6:	461e      	mov	r6, r3
 80037c8:	4617      	mov	r7, r2
 80037ca:	460d      	mov	r5, r1
 80037cc:	f003 fdd0 	bl	8007370 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80037d0:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 80037d2:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80037d4:	4620      	mov	r0, r4
 80037d6:	f003 fdd1 	bl	800737c <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 80037da:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80037dc:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 80037de:	4620      	mov	r0, r4
 80037e0:	f003 fdd4 	bl	800738c <RUC_GetPhaseFinalTorque>
 80037e4:	9b06      	ldr	r3, [sp, #24]
 80037e6:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 80037e8:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 80037ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 80037ec:	4620      	mov	r0, r4
}
 80037ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080037f0 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 80037f0:	b570      	push	{r4, r5, r6, lr}
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80037f2:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 80037f6:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80037f8:	b082      	sub	sp, #8
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80037fa:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
{
 80037fe:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8003802:	6940      	ldr	r0, [r0, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8003804:	9001      	str	r0, [sp, #4]
{
 8003806:	461d      	mov	r5, r3
 8003808:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 800380a:	f003 fd9f 	bl	800734c <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 800380e:	9801      	ldr	r0, [sp, #4]
 8003810:	462a      	mov	r2, r5
 8003812:	4621      	mov	r1, r4
 8003814:	f003 fda0 	bl	8007358 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8003818:	9801      	ldr	r0, [sp, #4]
 800381a:	4632      	mov	r2, r6
 800381c:	4621      	mov	r1, r4
 800381e:	f003 fda1 	bl	8007364 <RUC_SetPhaseFinalTorque>
  return true;
}
 8003822:	2001      	movs	r0, #1
 8003824:	b002      	add	sp, #8
 8003826:	bd70      	pop	{r4, r5, r6, pc}

08003828 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8003828:	b410      	push	{r4}
 800382a:	b083      	sub	sp, #12

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800382c:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8003830:	6a03      	ldr	r3, [r0, #32]
  qd_t currComp;
  currComp.q = hIqRef;
 8003832:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 8003836:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 800383a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800383e:	9901      	ldr	r1, [sp, #4]
}
 8003840:	b003      	add	sp, #12
 8003842:	f85d 4b04 	ldr.w	r4, [sp], #4
  MCI_SetCurrentReferences(pMCI,currComp);
 8003846:	f7fd bf7b 	b.w	8001740 <MCI_SetCurrentReferences>
 800384a:	bf00      	nop

0800384c <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 800384c:	2000      	movs	r0, #0
 800384e:	4770      	bx	lr

08003850 <UI_DACInit>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
__weak void UI_DACInit(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACInit)
 8003850:	6943      	ldr	r3, [r0, #20]
 8003852:	b103      	cbz	r3, 8003856 <UI_DACInit+0x6>
  {
	  pHandle->pFct_DACInit(pHandle);
 8003854:	4718      	bx	r3
  }
}
 8003856:	4770      	bx	lr

08003858 <UI_DACExec>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
void UI_DACExec(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACExec)
 8003858:	6983      	ldr	r3, [r0, #24]
 800385a:	b103      	cbz	r3, 800385e <UI_DACExec+0x6>
  {
    pHandle->pFct_DACExec(pHandle);
 800385c:	4718      	bx	r3
  }
}
 800385e:	4770      	bx	lr

08003860 <UI_SetDAC>:
  * @retval none.
  */
void UI_SetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                         MC_Protocol_REG_t bVariable)
{
  if (pHandle->pFctDACSetChannelConfig)
 8003860:	6843      	ldr	r3, [r0, #4]
 8003862:	b103      	cbz	r3, 8003866 <UI_SetDAC+0x6>
  {
	  pHandle->pFctDACSetChannelConfig(pHandle, bChannel, bVariable);
 8003864:	4718      	bx	r3
  }
}
 8003866:	4770      	bx	lr

08003868 <UI_GetDAC>:
  *         It must be one of the exported UI register (Example: MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t UI_GetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  MC_Protocol_REG_t retVal = MC_PROTOCOL_REG_UNDEFINED;
  if (pHandle->pFctDACGetChannelConfig)
 8003868:	6883      	ldr	r3, [r0, #8]
 800386a:	b103      	cbz	r3, 800386e <UI_GetDAC+0x6>
  {
    retVal = pHandle->pFctDACGetChannelConfig(pHandle, bChannel);
 800386c:	4718      	bx	r3
  }
  return retVal;
}
 800386e:	2089      	movs	r0, #137	; 0x89
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop

08003874 <UI_GetReg>:
{
 8003874:	b570      	push	{r4, r5, r6, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003876:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800387a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800387e:	b090      	sub	sp, #64	; 0x40
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003880:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003884:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
  if ( success != (bool *) 0 )
 8003888:	2a00      	cmp	r2, #0
 800388a:	f000 8089 	beq.w	80039a0 <UI_GetReg+0x12c>
    *success = true;
 800388e:	2401      	movs	r4, #1
 8003890:	7014      	strb	r4, [r2, #0]
  switch (bRegID)
 8003892:	2981      	cmp	r1, #129	; 0x81
 8003894:	f200 82bb 	bhi.w	8003e0e <UI_GetReg+0x59a>
 8003898:	e8df f011 	tbh	[pc, r1, lsl #1]
 800389c:	01ea0187 	.word	0x01ea0187
 80038a0:	01da01e6 	.word	0x01da01e6
 80038a4:	01e201d3 	.word	0x01e201d3
 80038a8:	018301de 	.word	0x018301de
 80038ac:	0278010e 	.word	0x0278010e
 80038b0:	02a902ad 	.word	0x02a902ad
 80038b4:	02a30109 	.word	0x02a30109
 80038b8:	02b102b5 	.word	0x02b102b5
 80038bc:	025701fd 	.word	0x025701fd
 80038c0:	02b902b9 	.word	0x02b902b9
 80038c4:	02350248 	.word	0x02350248
 80038c8:	02b902b9 	.word	0x02b902b9
 80038cc:	023102b9 	.word	0x023102b9
 80038d0:	0229022d 	.word	0x0229022d
 80038d4:	02210225 	.word	0x02210225
 80038d8:	0297029c 	.word	0x0297029c
 80038dc:	02b90292 	.word	0x02b90292
 80038e0:	0286028b 	.word	0x0286028b
 80038e4:	027c0281 	.word	0x027c0281
 80038e8:	0297018a 	.word	0x0297018a
 80038ec:	010e0292 	.word	0x010e0292
 80038f0:	01ee0109 	.word	0x01ee0109
 80038f4:	01f301f8 	.word	0x01f301f8
 80038f8:	00f8021c 	.word	0x00f8021c
 80038fc:	0172020c 	.word	0x0172020c
 8003900:	014f0161 	.word	0x014f0161
 8003904:	012b013d 	.word	0x012b013d
 8003908:	02b90119 	.word	0x02b90119
 800390c:	02b902b9 	.word	0x02b902b9
 8003910:	02b902b9 	.word	0x02b902b9
 8003914:	011302b9 	.word	0x011302b9
 8003918:	026a0271 	.word	0x026a0271
 800391c:	010901b8 	.word	0x010901b8
 8003920:	01a001bf 	.word	0x01a001bf
 8003924:	02b902b9 	.word	0x02b902b9
 8003928:	02b902b9 	.word	0x02b902b9
 800392c:	02b902b9 	.word	0x02b902b9
 8003930:	02b902b9 	.word	0x02b902b9
 8003934:	02b902b9 	.word	0x02b902b9
 8003938:	02b902b9 	.word	0x02b902b9
 800393c:	02b902b9 	.word	0x02b902b9
 8003940:	02b902b9 	.word	0x02b902b9
 8003944:	02b902b9 	.word	0x02b902b9
 8003948:	02b902b9 	.word	0x02b902b9
 800394c:	02b902b9 	.word	0x02b902b9
 8003950:	019302b9 	.word	0x019302b9
 8003954:	02b902b9 	.word	0x02b902b9
 8003958:	02b902b9 	.word	0x02b902b9
 800395c:	02b902b9 	.word	0x02b902b9
 8003960:	02b902b9 	.word	0x02b902b9
 8003964:	02b902b9 	.word	0x02b902b9
 8003968:	02b902b9 	.word	0x02b902b9
 800396c:	02b902b9 	.word	0x02b902b9
 8003970:	02b902b9 	.word	0x02b902b9
 8003974:	02b902b9 	.word	0x02b902b9
 8003978:	01b4018f 	.word	0x01b4018f
 800397c:	02b902a7 	.word	0x02b902a7
 8003980:	01060106 	.word	0x01060106
 8003984:	02b902b9 	.word	0x02b902b9
 8003988:	02b902b9 	.word	0x02b902b9
 800398c:	02b902b9 	.word	0x02b902b9
 8003990:	02b902b9 	.word	0x02b902b9
 8003994:	02b902b9 	.word	0x02b902b9
 8003998:	02b902b9 	.word	0x02b902b9
 800399c:	010602b9 	.word	0x010602b9
 80039a0:	2970      	cmp	r1, #112	; 0x70
 80039a2:	f200 8081 	bhi.w	8003aa8 <UI_GetReg+0x234>
 80039a6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80039aa:	0100      	.short	0x0100
 80039ac:	015f0163 	.word	0x015f0163
 80039b0:	014c0153 	.word	0x014c0153
 80039b4:	0157015b 	.word	0x0157015b
 80039b8:	008700fc 	.word	0x008700fc
 80039bc:	022601f1 	.word	0x022601f1
 80039c0:	00820222 	.word	0x00820222
 80039c4:	022e021c 	.word	0x022e021c
 80039c8:	0176022a 	.word	0x0176022a
 80039cc:	007f01d0 	.word	0x007f01d0
 80039d0:	01c1007f 	.word	0x01c1007f
 80039d4:	007f01ae 	.word	0x007f01ae
 80039d8:	007f007f 	.word	0x007f007f
 80039dc:	01a601aa 	.word	0x01a601aa
 80039e0:	019e01a2 	.word	0x019e01a2
 80039e4:	0215019a 	.word	0x0215019a
 80039e8:	020b0210 	.word	0x020b0210
 80039ec:	0204007f 	.word	0x0204007f
 80039f0:	01fa01ff 	.word	0x01fa01ff
 80039f4:	010301f5 	.word	0x010301f5
 80039f8:	020b0210 	.word	0x020b0210
 80039fc:	00820087 	.word	0x00820087
 8003a00:	01710167 	.word	0x01710167
 8003a04:	0195016c 	.word	0x0195016c
 8003a08:	01850071 	.word	0x01850071
 8003a0c:	00da00eb 	.word	0x00da00eb
 8003a10:	00b600c8 	.word	0x00b600c8
 8003a14:	009200a4 	.word	0x009200a4
 8003a18:	007f007f 	.word	0x007f007f
 8003a1c:	007f007f 	.word	0x007f007f
 8003a20:	007f007f 	.word	0x007f007f
 8003a24:	01ea008c 	.word	0x01ea008c
 8003a28:	013101e3 	.word	0x013101e3
 8003a2c:	01380082 	.word	0x01380082
 8003a30:	007f0119 	.word	0x007f0119
 8003a34:	007f007f 	.word	0x007f007f
 8003a38:	007f007f 	.word	0x007f007f
 8003a3c:	007f007f 	.word	0x007f007f
 8003a40:	007f007f 	.word	0x007f007f
 8003a44:	007f007f 	.word	0x007f007f
 8003a48:	007f007f 	.word	0x007f007f
 8003a4c:	007f007f 	.word	0x007f007f
 8003a50:	007f007f 	.word	0x007f007f
 8003a54:	007f007f 	.word	0x007f007f
 8003a58:	007f007f 	.word	0x007f007f
 8003a5c:	007f007f 	.word	0x007f007f
 8003a60:	007f010c 	.word	0x007f010c
 8003a64:	007f007f 	.word	0x007f007f
 8003a68:	007f007f 	.word	0x007f007f
 8003a6c:	007f007f 	.word	0x007f007f
 8003a70:	007f007f 	.word	0x007f007f
 8003a74:	007f007f 	.word	0x007f007f
 8003a78:	007f007f 	.word	0x007f007f
 8003a7c:	007f007f 	.word	0x007f007f
 8003a80:	007f007f 	.word	0x007f007f
 8003a84:	0108007f 	.word	0x0108007f
 8003a88:	0220012d 	.word	0x0220012d
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003a8c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003a92:	0f1a      	lsrs	r2, r3, #28
 8003a94:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003a96:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003a9a:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003a9c:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003aa0:	f240 81bd 	bls.w	8003e1e <UI_GetReg+0x5aa>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d976      	bls.n	8003b96 <UI_GetReg+0x322>
  int32_t bRetVal = 0;
 8003aa8:	2000      	movs	r0, #0
}
 8003aaa:	b010      	add	sp, #64	; 0x40
 8003aac:	bd70      	pop	{r4, r5, r6, pc}
      bRetVal = MCI_GetIqdref(pMCI).d;
 8003aae:	4630      	mov	r0, r6
 8003ab0:	f7fd feea 	bl	8001888 <MCI_GetIqdref>
 8003ab4:	1400      	asrs	r0, r0, #16
    break;
 8003ab6:	e7f8      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = MCI_GetIqdref(pMCI).q;
 8003ab8:	4630      	mov	r0, r6
 8003aba:	f7fd fee5 	bl	8001888 <MCI_GetIqdref>
 8003abe:	b200      	sxth	r0, r0
    break;
 8003ac0:	e7f3      	b.n	8003aaa <UI_GetReg+0x236>
      if (pHandle->pFctDACGetUserChannelValue)
 8003ac2:	6903      	ldr	r3, [r0, #16]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0ef      	beq.n	8003aa8 <UI_GetReg+0x234>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 0);
 8003ac8:	2100      	movs	r1, #0
 8003aca:	4798      	blx	r3
 8003acc:	e7ed      	b.n	8003aaa <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003ace:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003ad4:	0f1a      	lsrs	r2, r3, #28
 8003ad6:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003ad8:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003adc:	f000 81d9 	beq.w	8003e92 <UI_GetReg+0x61e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003ae0:	2b09      	cmp	r3, #9
 8003ae2:	d1e1      	bne.n	8003aa8 <UI_GetReg+0x234>
        pSPD = pMCT->pSpeedSensorAux;
 8003ae4:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003ae6:	2800      	cmp	r0, #0
 8003ae8:	d0de      	beq.n	8003aa8 <UI_GetReg+0x234>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).beta;
 8003aea:	f003 fe77 	bl	80077dc <STO_PLL_GetEstimatedBemf>
 8003aee:	1400      	asrs	r0, r0, #16
 8003af0:	e7db      	b.n	8003aaa <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003af2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003af8:	0f1a      	lsrs	r2, r3, #28
 8003afa:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003afc:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003b00:	f000 81c2 	beq.w	8003e88 <UI_GetReg+0x614>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003b04:	2b09      	cmp	r3, #9
 8003b06:	d1cf      	bne.n	8003aa8 <UI_GetReg+0x234>
        pSPD =  pMCT->pSpeedSensorAux;
 8003b08:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003b0a:	2800      	cmp	r0, #0
 8003b0c:	d0cc      	beq.n	8003aa8 <UI_GetReg+0x234>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).alpha;
 8003b0e:	f003 fe65 	bl	80077dc <STO_PLL_GetEstimatedBemf>
 8003b12:	b200      	sxth	r0, r0
 8003b14:	e7c9      	b.n	8003aaa <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003b16:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003b1c:	0f1a      	lsrs	r2, r3, #28
 8003b1e:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003b20:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003b24:	f000 8180 	beq.w	8003e28 <UI_GetReg+0x5b4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003b28:	2b09      	cmp	r3, #9
 8003b2a:	d1bd      	bne.n	8003aa8 <UI_GetReg+0x234>
        pSPD = pMCT->pSpeedSensorAux;
 8003b2c:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003b2e:	2800      	cmp	r0, #0
 8003b30:	d0ba      	beq.n	8003aa8 <UI_GetReg+0x234>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).beta;
 8003b32:	f003 fe5f 	bl	80077f4 <STO_PLL_GetEstimatedCurrent>
 8003b36:	1400      	asrs	r0, r0, #16
 8003b38:	e7b7      	b.n	8003aaa <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003b3a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003b40:	0f1a      	lsrs	r2, r3, #28
 8003b42:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003b44:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003b48:	f000 8199 	beq.w	8003e7e <UI_GetReg+0x60a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003b4c:	2b09      	cmp	r3, #9
 8003b4e:	d1ab      	bne.n	8003aa8 <UI_GetReg+0x234>
        pSPD = pMCT->pSpeedSensorAux;
 8003b50:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003b52:	2800      	cmp	r0, #0
 8003b54:	d0a8      	beq.n	8003aa8 <UI_GetReg+0x234>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).alpha;
 8003b56:	f003 fe4d 	bl	80077f4 <STO_PLL_GetEstimatedCurrent>
 8003b5a:	b200      	sxth	r0, r0
 8003b5c:	e7a5      	b.n	8003aaa <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003b5e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003b64:	0f1a      	lsrs	r2, r3, #28
 8003b66:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003b68:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003b6c:	f000 817d 	beq.w	8003e6a <UI_GetReg+0x5f6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003b70:	2b09      	cmp	r3, #9
 8003b72:	d199      	bne.n	8003aa8 <UI_GetReg+0x234>
        pSPD = pMCT->pSpeedSensorAux;
 8003b74:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003b76:	2800      	cmp	r0, #0
 8003b78:	d096      	beq.n	8003aa8 <UI_GetReg+0x234>
        bRetVal = SPD_GetS16Speed(pSPD);
 8003b7a:	f003 f953 	bl	8006e24 <SPD_GetS16Speed>
 8003b7e:	e794      	b.n	8003aaa <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003b80:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003b86:	0f1a      	lsrs	r2, r3, #28
 8003b88:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003b8a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003b8e:	f000 8185 	beq.w	8003e9c <UI_GetReg+0x628>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003b92:	2b09      	cmp	r3, #9
 8003b94:	d188      	bne.n	8003aa8 <UI_GetReg+0x234>
        pSPD = pMCT->pSpeedSensorAux;
 8003b96:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003b98:	2800      	cmp	r0, #0
 8003b9a:	d085      	beq.n	8003aa8 <UI_GetReg+0x234>
        bRetVal = SPD_GetElAngle(pSPD);
 8003b9c:	f003 f90a 	bl	8006db4 <SPD_GetElAngle>
 8003ba0:	e783      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 8003ba2:	6828      	ldr	r0, [r5, #0]
 8003ba4:	f002 fe6a 	bl	800687c <PID_GetKD>
    break;
 8003ba8:	e77f      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8003baa:	f7ff fc37 	bl	800341c <UI_GetSelectedMC>
    break;
 8003bae:	e77c      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8003bb0:	4630      	mov	r0, r6
 8003bb2:	f7fd fe4d 	bl	8001850 <MCI_GetIalphabeta>
 8003bb6:	1400      	asrs	r0, r0, #16
    break;
 8003bb8:	e777      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8003bba:	6828      	ldr	r0, [r5, #0]
 8003bbc:	f002 fe58 	bl	8006870 <PID_GetKPDivisor>
    break;
 8003bc0:	e773      	b.n	8003aaa <UI_GetReg+0x236>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8003bc2:	4630      	mov	r0, r6
 8003bc4:	f7fd fe1c 	bl	8001800 <MCI_GetControlMode>
 8003bc8:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8003bca:	4630      	mov	r0, r6
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8003bcc:	f000 8147 	beq.w	8003e5e <UI_GetReg+0x5ea>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 8003bd0:	f7fd fe2c 	bl	800182c <MCI_GetMecSpeedRefUnit>
 8003bd4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003bd8:	0040      	lsls	r0, r0, #1
 8003bda:	e766      	b.n	8003aaa <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003bdc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003be2:	0f1a      	lsrs	r2, r3, #28
 8003be4:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003be6:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003bea:	f000 8127 	beq.w	8003e3c <UI_GetReg+0x5c8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003bee:	2b09      	cmp	r3, #9
 8003bf0:	f47f af5a 	bne.w	8003aa8 <UI_GetReg+0x234>
        pSPD = pMCT->pSpeedSensorAux;
 8003bf4:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003bf6:	2800      	cmp	r0, #0
 8003bf8:	f43f af56 	beq.w	8003aa8 <UI_GetReg+0x234>
        bRetVal = STO_PLL_GetObservedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8003bfc:	f003 fe3a 	bl	8007874 <STO_PLL_GetObservedBemfLevel>
 8003c00:	1400      	asrs	r0, r0, #16
 8003c02:	e752      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8003c04:	6828      	ldr	r0, [r5, #0]
 8003c06:	f002 fe35 	bl	8006874 <PID_GetKIDivisor>
    break;
 8003c0a:	e74e      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8003c0c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003c0e:	f003 f9c9 	bl	8006fa4 <STC_GetMinAppNegativeMecSpeedUnit>
 8003c12:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003c16:	0040      	lsls	r0, r0, #1
    break;
 8003c18:	e747      	b.n	8003aaa <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003c1a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003c20:	0f1a      	lsrs	r2, r3, #28
 8003c22:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003c24:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003c28:	f000 8124 	beq.w	8003e74 <UI_GetReg+0x600>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003c2c:	2b09      	cmp	r3, #9
 8003c2e:	f47f af3b 	bne.w	8003aa8 <UI_GetReg+0x234>
        pSPD = pMCT->pSpeedSensorAux;
 8003c32:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003c34:	2800      	cmp	r0, #0
 8003c36:	f43f af37 	beq.w	8003aa8 <UI_GetReg+0x234>
        bRetVal = STO_PLL_GetEstimatedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8003c3a:	f003 fe17 	bl	800786c <STO_PLL_GetEstimatedBemfLevel>
 8003c3e:	1400      	asrs	r0, r0, #16
 8003c40:	e733      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8003c42:	4630      	mov	r0, r6
 8003c44:	f7fd fdf2 	bl	800182c <MCI_GetMecSpeedRefUnit>
 8003c48:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003c4c:	0040      	lsls	r0, r0, #1
    break;
 8003c4e:	e72c      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8003c50:	4630      	mov	r0, r6
 8003c52:	f7fd fdd5 	bl	8001800 <MCI_GetControlMode>
    break;
 8003c56:	e728      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8003c58:	6828      	ldr	r0, [r5, #0]
 8003c5a:	f002 fe03 	bl	8006864 <PID_GetKI>
    break;
 8003c5e:	e724      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8003c60:	6828      	ldr	r0, [r5, #0]
 8003c62:	f002 fdfb 	bl	800685c <PID_GetKP>
    break;
 8003c66:	e720      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8003c68:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8003c6a:	f003 fa4d 	bl	8007108 <STM_GetState>
	break;
 8003c6e:	e71c      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8003c70:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8003c72:	f003 fa57 	bl	8007124 <STM_GetFaultState>
	break;
 8003c76:	e718      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = MCI_GetVqd(pMCI).q;
 8003c78:	4630      	mov	r0, r6
 8003c7a:	f7fd fe13 	bl	80018a4 <MCI_GetVqd>
 8003c7e:	b200      	sxth	r0, r0
    break;
 8003c80:	e713      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8003c82:	4630      	mov	r0, r6
 8003c84:	f7fd fe1c 	bl	80018c0 <MCI_GetValphabeta>
 8003c88:	b200      	sxth	r0, r0
    break;
 8003c8a:	e70e      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = MCI_GetVqd(pMCI).d;
 8003c8c:	4630      	mov	r0, r6
 8003c8e:	f7fd fe09 	bl	80018a4 <MCI_GetVqd>
 8003c92:	1400      	asrs	r0, r0, #16
    break;
 8003c94:	e709      	b.n	8003aaa <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003c96:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003c9c:	0f1a      	lsrs	r2, r3, #28
 8003c9e:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003ca0:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003ca4:	f000 80cf 	beq.w	8003e46 <UI_GetReg+0x5d2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003ca8:	2b09      	cmp	r3, #9
 8003caa:	f000 80cf 	beq.w	8003e4c <UI_GetReg+0x5d8>
      bRetVal = (int32_t)hPgain;
 8003cae:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
    break;
 8003cb2:	e6fa      	b.n	8003aaa <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003cb4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003cba:	0f1a      	lsrs	r2, r3, #28
 8003cbc:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003cbe:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003cc2:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003cc4:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003cc8:	f240 80a4 	bls.w	8003e14 <UI_GetReg+0x5a0>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	f63f aeeb 	bhi.w	8003aa8 <UI_GetReg+0x234>
 8003cd2:	e74f      	b.n	8003b74 <UI_GetReg+0x300>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8003cd4:	4630      	mov	r0, r6
 8003cd6:	f7fd fdf3 	bl	80018c0 <MCI_GetValphabeta>
 8003cda:	1400      	asrs	r0, r0, #16
    break;
 8003cdc:	e6e5      	b.n	8003aaa <UI_GetReg+0x236>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH1);
 8003cde:	2101      	movs	r1, #1
 8003ce0:	f7ff fdc2 	bl	8003868 <UI_GetDAC>
    break;
 8003ce4:	e6e1      	b.n	8003aaa <UI_GetReg+0x236>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH0);
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	f7ff fdbe 	bl	8003868 <UI_GetDAC>
    break;
 8003cec:	e6dd      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 8003cee:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8003cf0:	f002 fd4e 	bl	8006790 <MPM_GetAvrgElMotorPowerW>
    break;
 8003cf4:	e6d9      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8003cf6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8003cf8:	f002 fd8e 	bl	8006818 <NTC_GetAvTemp_C>
    break;
 8003cfc:	e6d5      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8003cfe:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003d00:	f001 fe96 	bl	8005a30 <VBS_GetAvBusVoltage_V>
    break;
 8003d04:	e6d1      	b.n	8003aaa <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003d06:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003d0c:	0f1a      	lsrs	r2, r3, #28
 8003d0e:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003d10:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003d14:	f000 808d 	beq.w	8003e32 <UI_GetReg+0x5be>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003d18:	2b09      	cmp	r3, #9
 8003d1a:	d1c8      	bne.n	8003cae <UI_GetReg+0x43a>
        pSPD = pMCT->pSpeedSensorAux;
 8003d1c:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003d1e:	2800      	cmp	r0, #0
 8003d20:	d0c5      	beq.n	8003cae <UI_GetReg+0x43a>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8003d22:	aa0f      	add	r2, sp, #60	; 0x3c
 8003d24:	a90e      	add	r1, sp, #56	; 0x38
 8003d26:	f003 fd85 	bl	8007834 <STO_GetPLLGains>
 8003d2a:	e7c0      	b.n	8003cae <UI_GetReg+0x43a>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003d2c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003d32:	0f1a      	lsrs	r2, r3, #28
 8003d34:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003d36:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003d3a:	f000 80b9 	beq.w	8003eb0 <UI_GetReg+0x63c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003d3e:	2b09      	cmp	r3, #9
 8003d40:	f000 80b9 	beq.w	8003eb6 <UI_GetReg+0x642>
      bRetVal = (int32_t)hIgain;
 8003d44:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
    break;
 8003d48:	e6af      	b.n	8003aaa <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003d4a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003d50:	0f1a      	lsrs	r2, r3, #28
 8003d52:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003d54:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003d58:	f000 80a5 	beq.w	8003ea6 <UI_GetReg+0x632>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003d5c:	2b09      	cmp	r3, #9
 8003d5e:	d1f1      	bne.n	8003d44 <UI_GetReg+0x4d0>
        pSPD = pMCT->pSpeedSensorAux;
 8003d60:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003d62:	2800      	cmp	r0, #0
 8003d64:	d0ee      	beq.n	8003d44 <UI_GetReg+0x4d0>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8003d66:	aa0f      	add	r2, sp, #60	; 0x3c
 8003d68:	a90e      	add	r1, sp, #56	; 0x38
 8003d6a:	f003 fd57 	bl	800781c <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hC2;
 8003d6e:	e7e9      	b.n	8003d44 <UI_GetReg+0x4d0>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 8003d70:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003d72:	f003 f915 	bl	8006fa0 <STC_GetMaxAppPositiveMecSpeedUnit>
 8003d76:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003d7a:	0040      	lsls	r0, r0, #1
    break;
 8003d7c:	e695      	b.n	8003aaa <UI_GetReg+0x236>
      if (pHandle->pFctDACGetUserChannelValue)
 8003d7e:	6903      	ldr	r3, [r0, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f43f ae91 	beq.w	8003aa8 <UI_GetReg+0x234>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 1);
 8003d86:	2101      	movs	r1, #1
 8003d88:	4798      	blx	r3
 8003d8a:	e68e      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 8003d8c:	6868      	ldr	r0, [r5, #4]
 8003d8e:	f002 fd65 	bl	800685c <PID_GetKP>
    break;
 8003d92:	e68a      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8003d94:	4630      	mov	r0, r6
 8003d96:	f7fd fd5b 	bl	8001850 <MCI_GetIalphabeta>
 8003d9a:	b200      	sxth	r0, r0
    break;
 8003d9c:	e685      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = MCI_GetIab(pMCI).b;
 8003d9e:	4630      	mov	r0, r6
 8003da0:	f7fd fd48 	bl	8001834 <MCI_GetIab>
 8003da4:	1400      	asrs	r0, r0, #16
    break;
 8003da6:	e680      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = MCI_GetIab(pMCI).a;
 8003da8:	4630      	mov	r0, r6
 8003daa:	f7fd fd43 	bl	8001834 <MCI_GetIab>
 8003dae:	b200      	sxth	r0, r0
    break;
 8003db0:	e67b      	b.n	8003aaa <UI_GetReg+0x236>
      if (pMCT->pRevupCtrl)
 8003db2:	6968      	ldr	r0, [r5, #20]
 8003db4:	2800      	cmp	r0, #0
 8003db6:	f43f ae77 	beq.w	8003aa8 <UI_GetReg+0x234>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8003dba:	f003 faef 	bl	800739c <RUC_GetNumberOfPhases>
 8003dbe:	e674      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = MCI_GetIqd(pMCI).d;
 8003dc0:	4630      	mov	r0, r6
 8003dc2:	f7fd fd53 	bl	800186c <MCI_GetIqd>
 8003dc6:	1400      	asrs	r0, r0, #16
    break;
 8003dc8:	e66f      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = MCI_GetIqd(pMCI).q;
 8003dca:	4630      	mov	r0, r6
 8003dcc:	f7fd fd4e 	bl	800186c <MCI_GetIqd>
 8003dd0:	b200      	sxth	r0, r0
    break;
 8003dd2:	e66a      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8003dd4:	4630      	mov	r0, r6
 8003dd6:	f7fd fd21 	bl	800181c <MCI_GetAvrgMecSpeedUnit>
 8003dda:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003dde:	0040      	lsls	r0, r0, #1
    break;
 8003de0:	e663      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 8003de2:	68a8      	ldr	r0, [r5, #8]
 8003de4:	f002 fd3a 	bl	800685c <PID_GetKP>
    break;
 8003de8:	e65f      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = (int32_t)(MC_UID);
 8003dea:	4837      	ldr	r0, [pc, #220]	; (8003ec8 <UI_GetReg+0x654>)
 8003dec:	e65d      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8003dee:	6868      	ldr	r0, [r5, #4]
 8003df0:	f002 fd44 	bl	800687c <PID_GetKD>
    break;
 8003df4:	e659      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8003df6:	6868      	ldr	r0, [r5, #4]
 8003df8:	f002 fd34 	bl	8006864 <PID_GetKI>
    break;
 8003dfc:	e655      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8003dfe:	68a8      	ldr	r0, [r5, #8]
 8003e00:	f002 fd3c 	bl	800687c <PID_GetKD>
    break;
 8003e04:	e651      	b.n	8003aaa <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 8003e06:	68a8      	ldr	r0, [r5, #8]
 8003e08:	f002 fd2c 	bl	8006864 <PID_GetKI>
    break;
 8003e0c:	e64d      	b.n	8003aaa <UI_GetReg+0x236>
        *success = false;
 8003e0e:	2000      	movs	r0, #0
 8003e10:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 8003e12:	e64a      	b.n	8003aaa <UI_GetReg+0x236>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003e14:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 8003e16:	69a8      	ldr	r0, [r5, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003e18:	f63f aead 	bhi.w	8003b76 <UI_GetReg+0x302>
 8003e1c:	e6aa      	b.n	8003b74 <UI_GetReg+0x300>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003e1e:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 8003e20:	69a8      	ldr	r0, [r5, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003e22:	f63f aeb9 	bhi.w	8003b98 <UI_GetReg+0x324>
 8003e26:	e6b6      	b.n	8003b96 <UI_GetReg+0x322>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003e28:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003e2a:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003e2c:	f47f ae7f 	bne.w	8003b2e <UI_GetReg+0x2ba>
 8003e30:	e67c      	b.n	8003b2c <UI_GetReg+0x2b8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003e32:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003e34:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003e36:	f47f af72 	bne.w	8003d1e <UI_GetReg+0x4aa>
 8003e3a:	e76f      	b.n	8003d1c <UI_GetReg+0x4a8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003e3c:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003e3e:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003e40:	f47f aed9 	bne.w	8003bf6 <UI_GetReg+0x382>
 8003e44:	e6d6      	b.n	8003bf4 <UI_GetReg+0x380>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003e46:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003e48:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003e4a:	d100      	bne.n	8003e4e <UI_GetReg+0x5da>
        pSPD = pMCT->pSpeedSensorAux;
 8003e4c:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	f43f af2d 	beq.w	8003cae <UI_GetReg+0x43a>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8003e54:	aa0f      	add	r2, sp, #60	; 0x3c
 8003e56:	a90e      	add	r1, sp, #56	; 0x38
 8003e58:	f003 fce0 	bl	800781c <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hC1;
 8003e5c:	e727      	b.n	8003cae <UI_GetReg+0x43a>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8003e5e:	f7fd fcd1 	bl	8001804 <MCI_GetLastRampFinalSpeed>
 8003e62:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003e66:	0040      	lsls	r0, r0, #1
 8003e68:	e61f      	b.n	8003aaa <UI_GetReg+0x236>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003e6a:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003e6c:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003e6e:	f47f ae82 	bne.w	8003b76 <UI_GetReg+0x302>
 8003e72:	e67f      	b.n	8003b74 <UI_GetReg+0x300>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003e74:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003e76:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003e78:	f47f aedc 	bne.w	8003c34 <UI_GetReg+0x3c0>
 8003e7c:	e6d9      	b.n	8003c32 <UI_GetReg+0x3be>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003e7e:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003e80:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003e82:	f47f ae66 	bne.w	8003b52 <UI_GetReg+0x2de>
 8003e86:	e663      	b.n	8003b50 <UI_GetReg+0x2dc>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003e88:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003e8a:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003e8c:	f47f ae3d 	bne.w	8003b0a <UI_GetReg+0x296>
 8003e90:	e63a      	b.n	8003b08 <UI_GetReg+0x294>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003e92:	2b09      	cmp	r3, #9
       pSPD = pMCT->pSpeedSensorMain;
 8003e94:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003e96:	f47f ae26 	bne.w	8003ae6 <UI_GetReg+0x272>
 8003e9a:	e623      	b.n	8003ae4 <UI_GetReg+0x270>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003e9c:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003e9e:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003ea0:	f47f ae7a 	bne.w	8003b98 <UI_GetReg+0x324>
 8003ea4:	e677      	b.n	8003b96 <UI_GetReg+0x322>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003ea6:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003ea8:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003eaa:	f47f af5a 	bne.w	8003d62 <UI_GetReg+0x4ee>
 8003eae:	e757      	b.n	8003d60 <UI_GetReg+0x4ec>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003eb0:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003eb2:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003eb4:	d100      	bne.n	8003eb8 <UI_GetReg+0x644>
        pSPD = pMCT->pSpeedSensorAux;
 8003eb6:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	f43f af43 	beq.w	8003d44 <UI_GetReg+0x4d0>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8003ebe:	aa0f      	add	r2, sp, #60	; 0x3c
 8003ec0:	a90e      	add	r1, sp, #56	; 0x38
 8003ec2:	f003 fcb7 	bl	8007834 <STO_GetPLLGains>
 8003ec6:	e73d      	b.n	8003d44 <UI_GetReg+0x4d0>
 8003ec8:	34a6847a 	.word	0x34a6847a

08003ecc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <SystemInit+0x18>)
 8003ece:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ed2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ed6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003eda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ede:	6099      	str	r1, [r3, #8]
#endif
}
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	e000ed00 	.word	0xe000ed00

08003ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ee8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003eea:	4a0e      	ldr	r2, [pc, #56]	; (8003f24 <HAL_InitTick+0x3c>)
 8003eec:	4b0e      	ldr	r3, [pc, #56]	; (8003f28 <HAL_InitTick+0x40>)
 8003eee:	7812      	ldrb	r2, [r2, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
{
 8003ef2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ef4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ef8:	fbb0 f0f2 	udiv	r0, r0, r2
 8003efc:	fbb3 f0f0 	udiv	r0, r3, r0
 8003f00:	f000 fb02 	bl	8004508 <HAL_SYSTICK_Config>
 8003f04:	b908      	cbnz	r0, 8003f0a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f06:	2d0f      	cmp	r5, #15
 8003f08:	d901      	bls.n	8003f0e <HAL_InitTick+0x26>
    return HAL_ERROR;
 8003f0a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003f0c:	bd38      	pop	{r3, r4, r5, pc}
 8003f0e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f10:	4602      	mov	r2, r0
 8003f12:	4629      	mov	r1, r5
 8003f14:	f04f 30ff 	mov.w	r0, #4294967295
 8003f18:	f000 fab0 	bl	800447c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f1c:	4b03      	ldr	r3, [pc, #12]	; (8003f2c <HAL_InitTick+0x44>)
 8003f1e:	4620      	mov	r0, r4
 8003f20:	601d      	str	r5, [r3, #0]
}
 8003f22:	bd38      	pop	{r3, r4, r5, pc}
 8003f24:	20000700 	.word	0x20000700
 8003f28:	200006fc 	.word	0x200006fc
 8003f2c:	20000704 	.word	0x20000704

08003f30 <HAL_Init>:
{
 8003f30:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f32:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <HAL_Init+0x30>)
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f3a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f42:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f4a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f4c:	2003      	movs	r0, #3
 8003f4e:	f000 fa81 	bl	8004454 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f52:	2004      	movs	r0, #4
 8003f54:	f7ff ffc8 	bl	8003ee8 <HAL_InitTick>
  HAL_MspInit();
 8003f58:	f7fe febc 	bl	8002cd4 <HAL_MspInit>
}
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	bd08      	pop	{r3, pc}
 8003f60:	40023c00 	.word	0x40023c00

08003f64 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003f64:	4a03      	ldr	r2, [pc, #12]	; (8003f74 <HAL_IncTick+0x10>)
 8003f66:	4b04      	ldr	r3, [pc, #16]	; (8003f78 <HAL_IncTick+0x14>)
 8003f68:	6811      	ldr	r1, [r2, #0]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	440b      	add	r3, r1
 8003f6e:	6013      	str	r3, [r2, #0]
}
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	20000b10 	.word	0x20000b10
 8003f78:	20000700 	.word	0x20000700

08003f7c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003f7c:	4b01      	ldr	r3, [pc, #4]	; (8003f84 <HAL_GetTick+0x8>)
 8003f7e:	6818      	ldr	r0, [r3, #0]
}
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	20000b10 	.word	0x20000b10

08003f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f88:	b538      	push	{r3, r4, r5, lr}
 8003f8a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003f8c:	f7ff fff6 	bl	8003f7c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f90:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003f92:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003f94:	d002      	beq.n	8003f9c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f96:	4b04      	ldr	r3, [pc, #16]	; (8003fa8 <HAL_Delay+0x20>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f9c:	f7ff ffee 	bl	8003f7c <HAL_GetTick>
 8003fa0:	1b43      	subs	r3, r0, r5
 8003fa2:	42a3      	cmp	r3, r4
 8003fa4:	d3fa      	bcc.n	8003f9c <HAL_Delay+0x14>
  {
  }
}
 8003fa6:	bd38      	pop	{r3, r4, r5, pc}
 8003fa8:	20000700 	.word	0x20000700

08003fac <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003fac:	2800      	cmp	r0, #0
 8003fae:	f000 80a0 	beq.w	80040f2 <HAL_ADC_Init+0x146>
{
 8003fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003fb4:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003fb6:	4604      	mov	r4, r0
 8003fb8:	b13d      	cbz	r5, 8003fca <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003fba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fbc:	06db      	lsls	r3, r3, #27
 8003fbe:	d50c      	bpl.n	8003fda <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8003fc6:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8003fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8003fca:	f7fe fea1 	bl	8002d10 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003fce:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003fd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8003fd2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003fd6:	06db      	lsls	r3, r3, #27
 8003fd8:	d4f2      	bmi.n	8003fc0 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8003fda:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003fdc:	4948      	ldr	r1, [pc, #288]	; (8004100 <HAL_ADC_Init+0x154>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003fde:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fe0:	4d48      	ldr	r5, [pc, #288]	; (8004104 <HAL_ADC_Init+0x158>)
    ADC_STATE_CLR_SET(hadc->State,
 8003fe2:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8003fe6:	f022 0202 	bic.w	r2, r2, #2
 8003fea:	f042 0202 	orr.w	r2, r2, #2
 8003fee:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ff0:	684a      	ldr	r2, [r1, #4]
 8003ff2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003ff6:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ff8:	684a      	ldr	r2, [r1, #4]
 8003ffa:	6860      	ldr	r0, [r4, #4]
 8003ffc:	4302      	orrs	r2, r0
 8003ffe:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004000:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004002:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004004:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004006:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004008:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800400c:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004014:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004016:	6858      	ldr	r0, [r3, #4]
 8004018:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 800401c:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800401e:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004020:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004022:	4339      	orrs	r1, r7
 8004024:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004026:	6899      	ldr	r1, [r3, #8]
 8004028:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800402c:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800402e:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004030:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004032:	ea42 0206 	orr.w	r2, r2, r6
 8004036:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004038:	d052      	beq.n	80040e0 <HAL_ADC_Init+0x134>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800403a:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800403c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800403e:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8004042:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	4310      	orrs	r0, r2
 8004048:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800404a:	6899      	ldr	r1, [r3, #8]
 800404c:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8004050:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	432a      	orrs	r2, r5
 8004056:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	f022 0202 	bic.w	r2, r2, #2
 800405e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004060:	689a      	ldr	r2, [r3, #8]
 8004062:	7e21      	ldrb	r1, [r4, #24]
 8004064:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8004068:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800406a:	f894 2020 	ldrb.w	r2, [r4, #32]
 800406e:	2a00      	cmp	r2, #0
 8004070:	d041      	beq.n	80040f6 <HAL_ADC_Init+0x14a>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004072:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004074:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004076:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800407a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004082:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	3901      	subs	r1, #1
 8004088:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800408c:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800408e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004090:	69e0      	ldr	r0, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004092:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004094:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004098:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800409a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800409c:	3801      	subs	r0, #1
 800409e:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
 80040a2:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80040a4:	6899      	ldr	r1, [r3, #8]
 80040a6:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80040aa:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80040ac:	6899      	ldr	r1, [r3, #8]
 80040ae:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 80040b2:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 80040b6:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80040b8:	6899      	ldr	r1, [r3, #8]
 80040ba:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80040be:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80040c0:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80040c2:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80040c4:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 80040c8:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80040ca:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80040cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040ce:	f023 0303 	bic.w	r3, r3, #3
 80040d2:	f043 0301 	orr.w	r3, r3, #1
 80040d6:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80040d8:	2300      	movs	r3, #0
 80040da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80040de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040ee:	609a      	str	r2, [r3, #8]
 80040f0:	e7b2      	b.n	8004058 <HAL_ADC_Init+0xac>
    return HAL_ERROR;
 80040f2:	2001      	movs	r0, #1
}
 80040f4:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040fc:	605a      	str	r2, [r3, #4]
 80040fe:	e7c6      	b.n	800408e <HAL_ADC_Init+0xe2>
 8004100:	40012300 	.word	0x40012300
 8004104:	0f000001 	.word	0x0f000001

08004108 <HAL_ADC_ConfigChannel>:
{
 8004108:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 800410a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800410e:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8004110:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8004112:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8004114:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8004116:	f000 8097 	beq.w	8004248 <HAL_ADC_ConfigChannel+0x140>
 800411a:	2301      	movs	r3, #1
 800411c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004120:	680d      	ldr	r5, [r1, #0]
 8004122:	2d09      	cmp	r5, #9
 8004124:	d829      	bhi.n	800417a <HAL_ADC_ConfigChannel+0x72>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004126:	6804      	ldr	r4, [r0, #0]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004128:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800412a:	6922      	ldr	r2, [r4, #16]
 800412c:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8004130:	2607      	movs	r6, #7
 8004132:	40be      	lsls	r6, r7
 8004134:	ea22 0206 	bic.w	r2, r2, r6
 8004138:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800413a:	6922      	ldr	r2, [r4, #16]
 800413c:	40bb      	lsls	r3, r7
 800413e:	4313      	orrs	r3, r2
 8004140:	6123      	str	r3, [r4, #16]
  if (sConfig->Rank < 7U)
 8004142:	684b      	ldr	r3, [r1, #4]
 8004144:	2b06      	cmp	r3, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004146:	462e      	mov	r6, r5
  if (sConfig->Rank < 7U)
 8004148:	d82c      	bhi.n	80041a4 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800414a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800414e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004150:	3b05      	subs	r3, #5
 8004152:	211f      	movs	r1, #31
 8004154:	4099      	lsls	r1, r3
 8004156:	ea22 0201 	bic.w	r2, r2, r1
 800415a:	6362      	str	r2, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800415c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800415e:	fa06 f303 	lsl.w	r3, r6, r3
 8004162:	4313      	orrs	r3, r2
 8004164:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004166:	4b40      	ldr	r3, [pc, #256]	; (8004268 <HAL_ADC_ConfigChannel+0x160>)
 8004168:	429c      	cmp	r4, r3
 800416a:	d02f      	beq.n	80041cc <HAL_ADC_ConfigChannel+0xc4>
  __HAL_UNLOCK(hadc);
 800416c:	2300      	movs	r3, #0
 800416e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8004172:	4618      	mov	r0, r3
}
 8004174:	b002      	add	sp, #8
 8004176:	bcf0      	pop	{r4, r5, r6, r7}
 8004178:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800417a:	6804      	ldr	r4, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800417c:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800417e:	68e7      	ldr	r7, [r4, #12]
 8004180:	b2ae      	uxth	r6, r5
 8004182:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8004186:	3a1e      	subs	r2, #30
 8004188:	f04f 0c07 	mov.w	ip, #7
 800418c:	fa0c fc02 	lsl.w	ip, ip, r2
 8004190:	ea27 070c 	bic.w	r7, r7, ip
 8004194:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004196:	68e7      	ldr	r7, [r4, #12]
 8004198:	4093      	lsls	r3, r2
 800419a:	433b      	orrs	r3, r7
 800419c:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800419e:	684b      	ldr	r3, [r1, #4]
 80041a0:	2b06      	cmp	r3, #6
 80041a2:	d9d2      	bls.n	800414a <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 80041a4:	2b0c      	cmp	r3, #12
 80041a6:	d833      	bhi.n	8004210 <HAL_ADC_ConfigChannel+0x108>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80041ac:	f1a3 0123 	sub.w	r1, r3, #35	; 0x23
 80041b0:	221f      	movs	r2, #31
 80041b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80041b4:	408a      	lsls	r2, r1
 80041b6:	ea23 0302 	bic.w	r3, r3, r2
 80041ba:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80041bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80041be:	fa06 f101 	lsl.w	r1, r6, r1
 80041c2:	4319      	orrs	r1, r3
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041c4:	4b28      	ldr	r3, [pc, #160]	; (8004268 <HAL_ADC_ConfigChannel+0x160>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80041c6:	6321      	str	r1, [r4, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041c8:	429c      	cmp	r4, r3
 80041ca:	d1cf      	bne.n	800416c <HAL_ADC_ConfigChannel+0x64>
 80041cc:	2d12      	cmp	r5, #18
 80041ce:	d02e      	beq.n	800422e <HAL_ADC_ConfigChannel+0x126>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80041d0:	4b26      	ldr	r3, [pc, #152]	; (800426c <HAL_ADC_ConfigChannel+0x164>)
 80041d2:	429d      	cmp	r5, r3
 80041d4:	d13c      	bne.n	8004250 <HAL_ADC_ConfigChannel+0x148>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80041d6:	4a26      	ldr	r2, [pc, #152]	; (8004270 <HAL_ADC_ConfigChannel+0x168>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80041d8:	4b26      	ldr	r3, [pc, #152]	; (8004274 <HAL_ADC_ConfigChannel+0x16c>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80041da:	6851      	ldr	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80041dc:	4c26      	ldr	r4, [pc, #152]	; (8004278 <HAL_ADC_ConfigChannel+0x170>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80041de:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 80041e2:	6051      	str	r1, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80041e4:	6851      	ldr	r1, [r2, #4]
 80041e6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80041ea:	6051      	str	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	fba4 2303 	umull	r2, r3, r4, r3
 80041f2:	0c9b      	lsrs	r3, r3, #18
 80041f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80041fc:	9b01      	ldr	r3, [sp, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0b4      	beq.n	800416c <HAL_ADC_ConfigChannel+0x64>
        counter--;
 8004202:	9b01      	ldr	r3, [sp, #4]
 8004204:	3b01      	subs	r3, #1
 8004206:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8004208:	9b01      	ldr	r3, [sp, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f9      	bne.n	8004202 <HAL_ADC_ConfigChannel+0xfa>
 800420e:	e7ad      	b.n	800416c <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004210:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004214:	3a41      	subs	r2, #65	; 0x41
 8004216:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004218:	211f      	movs	r1, #31
 800421a:	4091      	lsls	r1, r2
 800421c:	ea23 0301 	bic.w	r3, r3, r1
 8004220:	62e3      	str	r3, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004222:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004224:	fa06 f102 	lsl.w	r1, r6, r2
 8004228:	4319      	orrs	r1, r3
 800422a:	62e1      	str	r1, [r4, #44]	; 0x2c
 800422c:	e79b      	b.n	8004166 <HAL_ADC_ConfigChannel+0x5e>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800422e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 8004232:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004236:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800423a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 800423e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004242:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004246:	e791      	b.n	800416c <HAL_ADC_ConfigChannel+0x64>
  __HAL_LOCK(hadc);
 8004248:	2002      	movs	r0, #2
}
 800424a:	b002      	add	sp, #8
 800424c:	bcf0      	pop	{r4, r5, r6, r7}
 800424e:	4770      	bx	lr
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004250:	2d11      	cmp	r5, #17
 8004252:	d18b      	bne.n	800416c <HAL_ADC_ConfigChannel+0x64>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004254:	4b06      	ldr	r3, [pc, #24]	; (8004270 <HAL_ADC_ConfigChannel+0x168>)
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800425c:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004264:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004266:	e781      	b.n	800416c <HAL_ADC_ConfigChannel+0x64>
 8004268:	40012000 	.word	0x40012000
 800426c:	10000012 	.word	0x10000012
 8004270:	40012300 	.word	0x40012300
 8004274:	200006fc 	.word	0x200006fc
 8004278:	431bde83 	.word	0x431bde83

0800427c <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 800427c:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800427e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004282:	698f      	ldr	r7, [r1, #24]
  __HAL_LOCK(hadc);
 8004284:	2b01      	cmp	r3, #1
 8004286:	f000 80db 	beq.w	8004440 <HAL_ADCEx_InjectedConfigChannel+0x1c4>
 800428a:	2301      	movs	r3, #1
 800428c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004290:	680e      	ldr	r6, [r1, #0]
 8004292:	2e09      	cmp	r6, #9
 8004294:	d870      	bhi.n	8004378 <HAL_ADCEx_InjectedConfigChannel+0xfc>
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8004296:	6803      	ldr	r3, [r0, #0]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004298:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 800429a:	691c      	ldr	r4, [r3, #16]
 800429c:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 80042a0:	2507      	movs	r5, #7
 80042a2:	fa05 f50c 	lsl.w	r5, r5, ip
 80042a6:	ea24 0405 	bic.w	r4, r4, r5
 80042aa:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80042ac:	691c      	ldr	r4, [r3, #16]
 80042ae:	fa02 f20c 	lsl.w	r2, r2, ip
 80042b2:	4322      	orrs	r2, r4
 80042b4:	611a      	str	r2, [r3, #16]
 80042b6:	4634      	mov	r4, r6
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80042b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80042ba:	f8d1 e010 	ldr.w	lr, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80042be:	684d      	ldr	r5, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80042c0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80042c4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80042c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042c8:	f10e 3cff 	add.w	ip, lr, #4294967295
 80042cc:	ea42 5c0c 	orr.w	ip, r2, ip, lsl #20
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80042d0:	1cea      	adds	r2, r5, #3
 80042d2:	eba2 020e 	sub.w	r2, r2, lr
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80042d6:	f8c3 c038 	str.w	ip, [r3, #56]	; 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	f8d3 c038 	ldr.w	ip, [r3, #56]	; 0x38
 80042e0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80042e4:	f04f 0e1f 	mov.w	lr, #31
 80042e8:	fa0e fe02 	lsl.w	lr, lr, r2
 80042ec:	ea2c 0c0e 	bic.w	ip, ip, lr
 80042f0:	f8c3 c038 	str.w	ip, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80042f4:	f8d3 e038 	ldr.w	lr, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80042f8:	f8df c154 	ldr.w	ip, [pc, #340]	; 8004450 <HAL_ADCEx_InjectedConfigChannel+0x1d4>
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80042fc:	fa04 f202 	lsl.w	r2, r4, r2
 8004300:	ea42 020e 	orr.w	r2, r2, lr
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004304:	4567      	cmp	r7, ip
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004306:	639a      	str	r2, [r3, #56]	; 0x38
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004308:	d074      	beq.n	80043f4 <HAL_ADCEx_InjectedConfigChannel+0x178>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800430a:	689c      	ldr	r4, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 800430c:	f8d1 c01c 	ldr.w	ip, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004310:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
 8004314:	609c      	str	r4, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	4317      	orrs	r7, r2
 800431a:	609f      	str	r7, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800431c:	689c      	ldr	r4, [r3, #8]
 800431e:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8004322:	609c      	str	r4, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	ea42 020c 	orr.w	r2, r2, ip
 800432a:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 800432c:	7d4a      	ldrb	r2, [r1, #21]
 800432e:	2a00      	cmp	r2, #0
 8004330:	d039      	beq.n	80043a6 <HAL_ADCEx_InjectedConfigChannel+0x12a>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004338:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 800433a:	7d0a      	ldrb	r2, [r1, #20]
 800433c:	2a00      	cmp	r2, #0
 800433e:	d039      	beq.n	80043b4 <HAL_ADCEx_InjectedConfigChannel+0x138>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8004340:	685a      	ldr	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 8004342:	2d02      	cmp	r5, #2
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8004344:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004348:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 800434a:	d039      	beq.n	80043c0 <HAL_ADCEx_InjectedConfigChannel+0x144>
 800434c:	2d03      	cmp	r5, #3
 800434e:	d065      	beq.n	800441c <HAL_ADCEx_InjectedConfigChannel+0x1a0>
 8004350:	2d01      	cmp	r5, #1
 8004352:	d058      	beq.n	8004406 <HAL_ADCEx_InjectedConfigChannel+0x18a>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8004354:	6a1a      	ldr	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8004356:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8004358:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800435c:	f022 020f 	bic.w	r2, r2, #15
 8004360:	621a      	str	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8004362:	6a1a      	ldr	r2, [r3, #32]
 8004364:	430a      	orrs	r2, r1
 8004366:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8004368:	4a36      	ldr	r2, [pc, #216]	; (8004444 <HAL_ADCEx_InjectedConfigChannel+0x1c8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d035      	beq.n	80043da <HAL_ADCEx_InjectedConfigChannel+0x15e>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800436e:	2300      	movs	r3, #0
 8004370:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004374:	4618      	mov	r0, r3
}
 8004376:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8004378:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800437a:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800437c:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8004380:	b2b4      	uxth	r4, r6
 8004382:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8004386:	3d1e      	subs	r5, #30
 8004388:	f04f 0e07 	mov.w	lr, #7
 800438c:	fa0e fe05 	lsl.w	lr, lr, r5
 8004390:	ea2c 0c0e 	bic.w	ip, ip, lr
 8004394:	f8c3 c00c 	str.w	ip, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004398:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800439c:	40aa      	lsls	r2, r5
 800439e:	ea42 020c 	orr.w	r2, r2, ip
 80043a2:	60da      	str	r2, [r3, #12]
 80043a4:	e788      	b.n	80042b8 <HAL_ADCEx_InjectedConfigChannel+0x3c>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ac:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80043ae:	7d0a      	ldrb	r2, [r1, #20]
 80043b0:	2a00      	cmp	r2, #0
 80043b2:	d1c5      	bne.n	8004340 <HAL_ADCEx_InjectedConfigChannel+0xc4>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80043b4:	685a      	ldr	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 80043b6:	2d02      	cmp	r5, #2
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80043b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043bc:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 80043be:	d1c5      	bne.n	800434c <HAL_ADCEx_InjectedConfigChannel+0xd0>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80043c0:	699a      	ldr	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80043c2:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80043c4:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80043c8:	f022 020f 	bic.w	r2, r2, #15
 80043cc:	619a      	str	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80043ce:	699a      	ldr	r2, [r3, #24]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80043d4:	4a1b      	ldr	r2, [pc, #108]	; (8004444 <HAL_ADCEx_InjectedConfigChannel+0x1c8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d1c9      	bne.n	800436e <HAL_ADCEx_InjectedConfigChannel+0xf2>
 80043da:	2e12      	cmp	r6, #18
 80043dc:	d029      	beq.n	8004432 <HAL_ADCEx_InjectedConfigChannel+0x1b6>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80043de:	4b1a      	ldr	r3, [pc, #104]	; (8004448 <HAL_ADCEx_InjectedConfigChannel+0x1cc>)
 80043e0:	429e      	cmp	r6, r3
 80043e2:	d001      	beq.n	80043e8 <HAL_ADCEx_InjectedConfigChannel+0x16c>
 80043e4:	2e11      	cmp	r6, #17
 80043e6:	d1c2      	bne.n	800436e <HAL_ADCEx_InjectedConfigChannel+0xf2>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80043e8:	4a18      	ldr	r2, [pc, #96]	; (800444c <HAL_ADCEx_InjectedConfigChannel+0x1d0>)
 80043ea:	6853      	ldr	r3, [r2, #4]
 80043ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80043f0:	6053      	str	r3, [r2, #4]
 80043f2:	e7bc      	b.n	800436e <HAL_ADCEx_InjectedConfigChannel+0xf2>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80043fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 80043fc:	689a      	ldr	r2, [r3, #8]
 80043fe:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004402:	609a      	str	r2, [r3, #8]
 8004404:	e792      	b.n	800432c <HAL_ADCEx_InjectedConfigChannel+0xb0>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004406:	695a      	ldr	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004408:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800440a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800440e:	f022 020f 	bic.w	r2, r2, #15
 8004412:	615a      	str	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004414:	695a      	ldr	r2, [r3, #20]
 8004416:	430a      	orrs	r2, r1
 8004418:	615a      	str	r2, [r3, #20]
      break;
 800441a:	e7a5      	b.n	8004368 <HAL_ADCEx_InjectedConfigChannel+0xec>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800441c:	69da      	ldr	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800441e:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8004420:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8004424:	f022 020f 	bic.w	r2, r2, #15
 8004428:	61da      	str	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800442a:	69da      	ldr	r2, [r3, #28]
 800442c:	430a      	orrs	r2, r1
 800442e:	61da      	str	r2, [r3, #28]
      break;
 8004430:	e79a      	b.n	8004368 <HAL_ADCEx_InjectedConfigChannel+0xec>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004432:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8004436:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800443a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800443e:	e796      	b.n	800436e <HAL_ADCEx_InjectedConfigChannel+0xf2>
  __HAL_LOCK(hadc);
 8004440:	2002      	movs	r0, #2
}
 8004442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004444:	40012000 	.word	0x40012000
 8004448:	10000012 	.word	0x10000012
 800444c:	40012300 	.word	0x40012300
 8004450:	000f0001 	.word	0x000f0001

08004454 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004454:	4908      	ldr	r1, [pc, #32]	; (8004478 <HAL_NVIC_SetPriorityGrouping+0x24>)
 8004456:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004458:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800445a:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800445c:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8004460:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004462:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800446c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004470:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8004474:	60cb      	str	r3, [r1, #12]
 8004476:	4770      	bx	lr
 8004478:	e000ed00 	.word	0xe000ed00

0800447c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800447c:	4b19      	ldr	r3, [pc, #100]	; (80044e4 <HAL_NVIC_SetPriority+0x68>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004484:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004486:	f1c3 0507 	rsb	r5, r3, #7
 800448a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800448c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004490:	bf28      	it	cs
 8004492:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004494:	2c06      	cmp	r4, #6
 8004496:	d919      	bls.n	80044cc <HAL_NVIC_SetPriority+0x50>
 8004498:	3b03      	subs	r3, #3
 800449a:	f04f 34ff 	mov.w	r4, #4294967295
 800449e:	409c      	lsls	r4, r3
 80044a0:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044a4:	f04f 34ff 	mov.w	r4, #4294967295
 80044a8:	40ac      	lsls	r4, r5
 80044aa:	ea21 0104 	bic.w	r1, r1, r4
 80044ae:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80044b0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044b2:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80044b6:	db0c      	blt.n	80044d2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044b8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80044bc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80044c0:	0109      	lsls	r1, r1, #4
 80044c2:	b2c9      	uxtb	r1, r1
 80044c4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80044c8:	bc30      	pop	{r4, r5}
 80044ca:	4770      	bx	lr
 80044cc:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044ce:	4613      	mov	r3, r2
 80044d0:	e7e8      	b.n	80044a4 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044d2:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <HAL_NVIC_SetPriority+0x6c>)
 80044d4:	f000 000f 	and.w	r0, r0, #15
 80044d8:	0109      	lsls	r1, r1, #4
 80044da:	4403      	add	r3, r0
 80044dc:	b2c9      	uxtb	r1, r1
 80044de:	7619      	strb	r1, [r3, #24]
 80044e0:	bc30      	pop	{r4, r5}
 80044e2:	4770      	bx	lr
 80044e4:	e000ed00 	.word	0xe000ed00
 80044e8:	e000ecfc 	.word	0xe000ecfc

080044ec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80044ec:	2800      	cmp	r0, #0
 80044ee:	db07      	blt.n	8004500 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044f0:	f000 011f 	and.w	r1, r0, #31
 80044f4:	4a03      	ldr	r2, [pc, #12]	; (8004504 <HAL_NVIC_EnableIRQ+0x18>)
 80044f6:	0940      	lsrs	r0, r0, #5
 80044f8:	2301      	movs	r3, #1
 80044fa:	408b      	lsls	r3, r1
 80044fc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	e000e100 	.word	0xe000e100

08004508 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004508:	3801      	subs	r0, #1
 800450a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800450e:	d20e      	bcs.n	800452e <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004510:	4b08      	ldr	r3, [pc, #32]	; (8004534 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004512:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004514:	4c08      	ldr	r4, [pc, #32]	; (8004538 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004516:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004518:	20f0      	movs	r0, #240	; 0xf0
 800451a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800451e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004520:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004522:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004524:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8004526:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800452a:	6019      	str	r1, [r3, #0]
 800452c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800452e:	2001      	movs	r0, #1
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	e000e010 	.word	0xe000e010
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop

08004540 <HAL_SYSTICK_IRQHandler>:
{
 8004540:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8004542:	f7ff fffb 	bl	800453c <HAL_SYSTICK_Callback>
}
 8004546:	bd08      	pop	{r3, pc}

08004548 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 8004548:	b188      	cbz	r0, 800456e <HAL_DAC_Init+0x26>
{ 
 800454a:	b510      	push	{r4, lr}
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800454c:	7903      	ldrb	r3, [r0, #4]
 800454e:	4604      	mov	r4, r0
 8004550:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004554:	b13b      	cbz	r3, 8004566 <HAL_DAC_Init+0x1e>
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004556:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8004558:	2102      	movs	r1, #2
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800455a:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 800455c:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800455e:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8004560:	7122      	strb	r2, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8004562:	4618      	mov	r0, r3
}
 8004564:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8004566:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8004568:	f7fe fc56 	bl	8002e18 <HAL_DAC_MspInit>
 800456c:	e7f3      	b.n	8004556 <HAL_DAC_Init+0xe>
     return HAL_ERROR;
 800456e:	2001      	movs	r0, #1
}
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop

08004574 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004574:	4603      	mov	r3, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004576:	7940      	ldrb	r0, [r0, #5]
 8004578:	2801      	cmp	r0, #1
 800457a:	d01e      	beq.n	80045ba <HAL_DAC_ConfigChannel+0x46>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800457c:	2002      	movs	r0, #2
{
 800457e:	b470      	push	{r4, r5, r6}
  hdac->State = HAL_DAC_STATE_BUSY;
 8004580:	7118      	strb	r0, [r3, #4]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004582:	e9d1 0100 	ldrd	r0, r1, [r1]
  tmpreg1 = hdac->Instance->CR;
 8004586:	681c      	ldr	r4, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004588:	f640 76fe 	movw	r6, #4094	; 0xffe
  tmpreg1 = hdac->Instance->CR;
 800458c:	6825      	ldr	r5, [r4, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800458e:	4301      	orrs	r1, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004590:	fa06 f002 	lsl.w	r0, r6, r2
 8004594:	ea25 0000 	bic.w	r0, r5, r0
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004598:	4091      	lsls	r1, r2
 800459a:	4301      	orrs	r1, r0
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800459c:	6021      	str	r1, [r4, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800459e:	6821      	ldr	r1, [r4, #0]
 80045a0:	20c0      	movs	r0, #192	; 0xc0
 80045a2:	fa00 f202 	lsl.w	r2, r0, r2
 80045a6:	ea21 0202 	bic.w	r2, r1, r2
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80045aa:	2501      	movs	r5, #1
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80045ac:	2100      	movs	r1, #0
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80045ae:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80045b0:	711d      	strb	r5, [r3, #4]
  __HAL_UNLOCK(hdac);
 80045b2:	7159      	strb	r1, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80045b4:	4608      	mov	r0, r1
}
 80045b6:	bc70      	pop	{r4, r5, r6}
 80045b8:	4770      	bx	lr
  __HAL_LOCK(hdac);
 80045ba:	2002      	movs	r0, #2
}
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop

080045c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045c4:	f8df c21c 	ldr.w	ip, [pc, #540]	; 80047e4 <HAL_GPIO_Init+0x224>
 80045c8:	680d      	ldr	r5, [r1, #0]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ca:	f8df b21c 	ldr.w	fp, [pc, #540]	; 80047e8 <HAL_GPIO_Init+0x228>
{
 80045ce:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045d0:	2300      	movs	r3, #0
 80045d2:	e003      	b.n	80045dc <HAL_GPIO_Init+0x1c>
 80045d4:	3301      	adds	r3, #1
 80045d6:	2b10      	cmp	r3, #16
 80045d8:	f000 8097 	beq.w	800470a <HAL_GPIO_Init+0x14a>
    ioposition = 0x01U << position;
 80045dc:	2201      	movs	r2, #1
 80045de:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045e0:	ea05 0a02 	and.w	sl, r5, r2
    if(iocurrent == ioposition)
 80045e4:	43aa      	bics	r2, r5
 80045e6:	d1f5      	bne.n	80045d4 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045e8:	684c      	ldr	r4, [r1, #4]
 80045ea:	f024 0e10 	bic.w	lr, r4, #16
 80045ee:	f10e 32ff 	add.w	r2, lr, #4294967295
 80045f2:	2a01      	cmp	r2, #1
 80045f4:	ea4f 0643 	mov.w	r6, r3, lsl #1
 80045f8:	f240 808a 	bls.w	8004710 <HAL_GPIO_Init+0x150>
      temp = GPIOx->PUPDR;
 80045fc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045fe:	2203      	movs	r2, #3
 8004600:	40b2      	lsls	r2, r6
 8004602:	ea27 0e02 	bic.w	lr, r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004606:	688f      	ldr	r7, [r1, #8]
 8004608:	40b7      	lsls	r7, r6
 800460a:	ea47 070e 	orr.w	r7, r7, lr
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800460e:	43d2      	mvns	r2, r2
 8004610:	9201      	str	r2, [sp, #4]
      GPIOx->PUPDR = temp;
 8004612:	60c7      	str	r7, [r0, #12]
      temp = GPIOx->MODER;
 8004614:	f8d0 e000 	ldr.w	lr, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004618:	9a01      	ldr	r2, [sp, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800461a:	f004 0703 	and.w	r7, r4, #3
 800461e:	fa07 f606 	lsl.w	r6, r7, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004622:	ea0e 0e02 	and.w	lr, lr, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004626:	ea46 060e 	orr.w	r6, r6, lr
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800462a:	00e7      	lsls	r7, r4, #3
      GPIOx->MODER = temp;
 800462c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800462e:	d5d1      	bpl.n	80045d4 <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004630:	2200      	movs	r2, #0
 8004632:	9203      	str	r2, [sp, #12]
 8004634:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 8004638:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800463c:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
 8004640:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 8004644:	f023 0603 	bic.w	r6, r3, #3
 8004648:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800464c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004650:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8004654:	9203      	str	r2, [sp, #12]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004656:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800465a:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800465c:	f8d6 e008 	ldr.w	lr, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004660:	00bf      	lsls	r7, r7, #2
 8004662:	220f      	movs	r2, #15
 8004664:	40ba      	lsls	r2, r7
 8004666:	ea2e 0802 	bic.w	r8, lr, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800466a:	4a58      	ldr	r2, [pc, #352]	; (80047cc <HAL_GPIO_Init+0x20c>)
 800466c:	4290      	cmp	r0, r2
 800466e:	d01f      	beq.n	80046b0 <HAL_GPIO_Init+0xf0>
 8004670:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004674:	4290      	cmp	r0, r2
 8004676:	f000 8085 	beq.w	8004784 <HAL_GPIO_Init+0x1c4>
 800467a:	4a55      	ldr	r2, [pc, #340]	; (80047d0 <HAL_GPIO_Init+0x210>)
 800467c:	4290      	cmp	r0, r2
 800467e:	f000 8088 	beq.w	8004792 <HAL_GPIO_Init+0x1d2>
 8004682:	4a54      	ldr	r2, [pc, #336]	; (80047d4 <HAL_GPIO_Init+0x214>)
 8004684:	4290      	cmp	r0, r2
 8004686:	f000 808b 	beq.w	80047a0 <HAL_GPIO_Init+0x1e0>
 800468a:	4a53      	ldr	r2, [pc, #332]	; (80047d8 <HAL_GPIO_Init+0x218>)
 800468c:	4290      	cmp	r0, r2
 800468e:	f000 808e 	beq.w	80047ae <HAL_GPIO_Init+0x1ee>
 8004692:	4a52      	ldr	r2, [pc, #328]	; (80047dc <HAL_GPIO_Init+0x21c>)
 8004694:	4290      	cmp	r0, r2
 8004696:	f000 8091 	beq.w	80047bc <HAL_GPIO_Init+0x1fc>
 800469a:	4a51      	ldr	r2, [pc, #324]	; (80047e0 <HAL_GPIO_Init+0x220>)
 800469c:	4290      	cmp	r0, r2
 800469e:	bf0c      	ite	eq
 80046a0:	f04f 0e06 	moveq.w	lr, #6
 80046a4:	f04f 0e07 	movne.w	lr, #7
 80046a8:	fa0e f707 	lsl.w	r7, lr, r7
 80046ac:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046b0:	f8c6 8008 	str.w	r8, [r6, #8]
        temp = EXTI->IMR;
 80046b4:	f8dc 2000 	ldr.w	r2, [ip]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046b8:	03e6      	lsls	r6, r4, #15
        temp &= ~((uint32_t)iocurrent);
 80046ba:	ea6f 070a 	mvn.w	r7, sl
 80046be:	bf54      	ite	pl
 80046c0:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 80046c2:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR = temp;
 80046c6:	f8cc 2000 	str.w	r2, [ip]

        temp = EXTI->EMR;
 80046ca:	f8dc 6004 	ldr.w	r6, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046ce:	03a2      	lsls	r2, r4, #14
        temp &= ~((uint32_t)iocurrent);
 80046d0:	bf54      	ite	pl
 80046d2:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80046d4:	ea4a 0606 	orrmi.w	r6, sl, r6
        }
        EXTI->EMR = temp;
 80046d8:	f8cc 6004 	str.w	r6, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046dc:	f8dc 6008 	ldr.w	r6, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046e0:	02e2      	lsls	r2, r4, #11
        temp &= ~((uint32_t)iocurrent);
 80046e2:	bf54      	ite	pl
 80046e4:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80046e6:	ea4a 0606 	orrmi.w	r6, sl, r6
        }
        EXTI->RTSR = temp;
 80046ea:	f8cc 6008 	str.w	r6, [ip, #8]

        temp = EXTI->FTSR;
 80046ee:	f8dc 200c 	ldr.w	r2, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046f2:	02a4      	lsls	r4, r4, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046f4:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 80046f8:	bf54      	ite	pl
 80046fa:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 80046fc:	ea4a 0202 	orrmi.w	r2, sl, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004700:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 8004702:	f8cc 200c 	str.w	r2, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004706:	f47f af69 	bne.w	80045dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800470a:	b005      	add	sp, #20
 800470c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8004710:	6887      	ldr	r7, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004712:	688a      	ldr	r2, [r1, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004714:	f04f 0803 	mov.w	r8, #3
 8004718:	fa08 f806 	lsl.w	r8, r8, r6
 800471c:	ea27 0908 	bic.w	r9, r7, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004720:	68cf      	ldr	r7, [r1, #12]
 8004722:	40b7      	lsls	r7, r6
 8004724:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8004728:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800472a:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800472e:	f3c4 1700 	ubfx	r7, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004732:	ea29 090a 	bic.w	r9, r9, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004736:	409f      	lsls	r7, r3
 8004738:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 800473c:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800473e:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004740:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004742:	ea27 0708 	bic.w	r7, r7, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004746:	4317      	orrs	r7, r2
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004748:	f1be 0f02 	cmp.w	lr, #2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800474c:	ea6f 0208 	mvn.w	r2, r8
 8004750:	9201      	str	r2, [sp, #4]
      GPIOx->PUPDR = temp;
 8004752:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004754:	f47f af5e 	bne.w	8004614 <HAL_GPIO_Init+0x54>
        temp = GPIOx->AFR[position >> 3U];
 8004758:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 800475c:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004760:	f003 0707 	and.w	r7, r3, #7
 8004764:	00ba      	lsls	r2, r7, #2
        temp = GPIOx->AFR[position >> 3U];
 8004766:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800476a:	690f      	ldr	r7, [r1, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800476c:	f04f 0e0f 	mov.w	lr, #15
 8004770:	fa0e fe02 	lsl.w	lr, lr, r2
 8004774:	ea29 0e0e 	bic.w	lr, r9, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004778:	4097      	lsls	r7, r2
 800477a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800477e:	f8c8 7020 	str.w	r7, [r8, #32]
 8004782:	e747      	b.n	8004614 <HAL_GPIO_Init+0x54>
 8004784:	f04f 0e01 	mov.w	lr, #1
 8004788:	fa0e f707 	lsl.w	r7, lr, r7
 800478c:	ea48 0807 	orr.w	r8, r8, r7
 8004790:	e78e      	b.n	80046b0 <HAL_GPIO_Init+0xf0>
 8004792:	f04f 0e02 	mov.w	lr, #2
 8004796:	fa0e f707 	lsl.w	r7, lr, r7
 800479a:	ea48 0807 	orr.w	r8, r8, r7
 800479e:	e787      	b.n	80046b0 <HAL_GPIO_Init+0xf0>
 80047a0:	f04f 0e03 	mov.w	lr, #3
 80047a4:	fa0e f707 	lsl.w	r7, lr, r7
 80047a8:	ea48 0807 	orr.w	r8, r8, r7
 80047ac:	e780      	b.n	80046b0 <HAL_GPIO_Init+0xf0>
 80047ae:	f04f 0e04 	mov.w	lr, #4
 80047b2:	fa0e f707 	lsl.w	r7, lr, r7
 80047b6:	ea48 0807 	orr.w	r8, r8, r7
 80047ba:	e779      	b.n	80046b0 <HAL_GPIO_Init+0xf0>
 80047bc:	f04f 0e05 	mov.w	lr, #5
 80047c0:	fa0e f707 	lsl.w	r7, lr, r7
 80047c4:	ea48 0807 	orr.w	r8, r8, r7
 80047c8:	e772      	b.n	80046b0 <HAL_GPIO_Init+0xf0>
 80047ca:	bf00      	nop
 80047cc:	40020000 	.word	0x40020000
 80047d0:	40020800 	.word	0x40020800
 80047d4:	40020c00 	.word	0x40020c00
 80047d8:	40021000 	.word	0x40021000
 80047dc:	40021400 	.word	0x40021400
 80047e0:	40021800 	.word	0x40021800
 80047e4:	40013c00 	.word	0x40013c00
 80047e8:	40023800 	.word	0x40023800

080047ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80047ec:	b530      	push	{r4, r5, lr}
 80047ee:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 80047f0:	4b19      	ldr	r3, [pc, #100]	; (8004858 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80047f2:	491a      	ldr	r1, [pc, #104]	; (800485c <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80047f4:	4d1a      	ldr	r5, [pc, #104]	; (8004860 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80047f6:	2200      	movs	r2, #0
 80047f8:	9201      	str	r2, [sp, #4]
 80047fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004800:	641a      	str	r2, [r3, #64]	; 0x40
 8004802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004808:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800480a:	2301      	movs	r3, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800480c:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800480e:	600b      	str	r3, [r1, #0]
  tickstart = HAL_GetTick();
 8004810:	f7ff fbb4 	bl	8003f7c <HAL_GetTick>
 8004814:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004816:	e005      	b.n	8004824 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004818:	f7ff fbb0 	bl	8003f7c <HAL_GetTick>
 800481c:	1b00      	subs	r0, r0, r4
 800481e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004822:	d816      	bhi.n	8004852 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004824:	686b      	ldr	r3, [r5, #4]
 8004826:	03da      	lsls	r2, r3, #15
 8004828:	d5f6      	bpl.n	8004818 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800482a:	4b0e      	ldr	r3, [pc, #56]	; (8004864 <HAL_PWREx_EnableOverDrive+0x78>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800482c:	4d0c      	ldr	r5, [pc, #48]	; (8004860 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800482e:	2201      	movs	r2, #1
 8004830:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8004832:	f7ff fba3 	bl	8003f7c <HAL_GetTick>
 8004836:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004838:	e005      	b.n	8004846 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800483a:	f7ff fb9f 	bl	8003f7c <HAL_GetTick>
 800483e:	1b00      	subs	r0, r0, r4
 8004840:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004844:	d805      	bhi.n	8004852 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004846:	686b      	ldr	r3, [r5, #4]
 8004848:	039b      	lsls	r3, r3, #14
 800484a:	d5f6      	bpl.n	800483a <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800484c:	2000      	movs	r0, #0
}
 800484e:	b003      	add	sp, #12
 8004850:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8004852:	2003      	movs	r0, #3
}
 8004854:	b003      	add	sp, #12
 8004856:	bd30      	pop	{r4, r5, pc}
 8004858:	40023800 	.word	0x40023800
 800485c:	420e0040 	.word	0x420e0040
 8004860:	40007000 	.word	0x40007000
 8004864:	420e0044 	.word	0x420e0044

08004868 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004868:	2800      	cmp	r0, #0
 800486a:	f000 8087 	beq.w	800497c <HAL_RCC_ClockConfig+0x114>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800486e:	4a48      	ldr	r2, [pc, #288]	; (8004990 <HAL_RCC_ClockConfig+0x128>)
 8004870:	6813      	ldr	r3, [r2, #0]
 8004872:	f003 030f 	and.w	r3, r3, #15
 8004876:	428b      	cmp	r3, r1
{
 8004878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800487c:	460d      	mov	r5, r1
 800487e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004880:	d209      	bcs.n	8004896 <HAL_RCC_ClockConfig+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004882:	b2cb      	uxtb	r3, r1
 8004884:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004886:	6813      	ldr	r3, [r2, #0]
 8004888:	f003 030f 	and.w	r3, r3, #15
 800488c:	428b      	cmp	r3, r1
 800488e:	d002      	beq.n	8004896 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004890:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8004892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	0798      	lsls	r0, r3, #30
 800489a:	d514      	bpl.n	80048c6 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800489c:	0759      	lsls	r1, r3, #29
 800489e:	d504      	bpl.n	80048aa <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048a0:	493c      	ldr	r1, [pc, #240]	; (8004994 <HAL_RCC_ClockConfig+0x12c>)
 80048a2:	688a      	ldr	r2, [r1, #8]
 80048a4:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80048a8:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048aa:	071a      	lsls	r2, r3, #28
 80048ac:	d504      	bpl.n	80048b8 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048ae:	4939      	ldr	r1, [pc, #228]	; (8004994 <HAL_RCC_ClockConfig+0x12c>)
 80048b0:	688a      	ldr	r2, [r1, #8]
 80048b2:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80048b6:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048b8:	4936      	ldr	r1, [pc, #216]	; (8004994 <HAL_RCC_ClockConfig+0x12c>)
 80048ba:	68a0      	ldr	r0, [r4, #8]
 80048bc:	688a      	ldr	r2, [r1, #8]
 80048be:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80048c2:	4302      	orrs	r2, r0
 80048c4:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048c6:	07df      	lsls	r7, r3, #31
 80048c8:	d521      	bpl.n	800490e <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ca:	6862      	ldr	r2, [r4, #4]
 80048cc:	2a01      	cmp	r2, #1
 80048ce:	d057      	beq.n	8004980 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048d0:	1e93      	subs	r3, r2, #2
 80048d2:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d4:	4b2f      	ldr	r3, [pc, #188]	; (8004994 <HAL_RCC_ClockConfig+0x12c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048d8:	d94d      	bls.n	8004976 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048da:	0799      	lsls	r1, r3, #30
 80048dc:	d5d8      	bpl.n	8004890 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048de:	4e2d      	ldr	r6, [pc, #180]	; (8004994 <HAL_RCC_ClockConfig+0x12c>)
 80048e0:	68b3      	ldr	r3, [r6, #8]
 80048e2:	f023 0303 	bic.w	r3, r3, #3
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80048ea:	f7ff fb47 	bl	8003f7c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ee:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80048f2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f4:	e004      	b.n	8004900 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f6:	f7ff fb41 	bl	8003f7c <HAL_GetTick>
 80048fa:	1bc0      	subs	r0, r0, r7
 80048fc:	4540      	cmp	r0, r8
 80048fe:	d844      	bhi.n	800498a <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004900:	68b3      	ldr	r3, [r6, #8]
 8004902:	6862      	ldr	r2, [r4, #4]
 8004904:	f003 030c 	and.w	r3, r3, #12
 8004908:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800490c:	d1f3      	bne.n	80048f6 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800490e:	4a20      	ldr	r2, [pc, #128]	; (8004990 <HAL_RCC_ClockConfig+0x128>)
 8004910:	6813      	ldr	r3, [r2, #0]
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	42ab      	cmp	r3, r5
 8004918:	d906      	bls.n	8004928 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491a:	b2eb      	uxtb	r3, r5
 800491c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800491e:	6813      	ldr	r3, [r2, #0]
 8004920:	f003 030f 	and.w	r3, r3, #15
 8004924:	42ab      	cmp	r3, r5
 8004926:	d1b3      	bne.n	8004890 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004928:	6823      	ldr	r3, [r4, #0]
 800492a:	075a      	lsls	r2, r3, #29
 800492c:	d506      	bpl.n	800493c <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800492e:	4919      	ldr	r1, [pc, #100]	; (8004994 <HAL_RCC_ClockConfig+0x12c>)
 8004930:	68e0      	ldr	r0, [r4, #12]
 8004932:	688a      	ldr	r2, [r1, #8]
 8004934:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8004938:	4302      	orrs	r2, r0
 800493a:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800493c:	071b      	lsls	r3, r3, #28
 800493e:	d507      	bpl.n	8004950 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004940:	4a14      	ldr	r2, [pc, #80]	; (8004994 <HAL_RCC_ClockConfig+0x12c>)
 8004942:	6921      	ldr	r1, [r4, #16]
 8004944:	6893      	ldr	r3, [r2, #8]
 8004946:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800494a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800494e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004950:	f000 f84e 	bl	80049f0 <HAL_RCC_GetSysClockFreq>
 8004954:	4a0f      	ldr	r2, [pc, #60]	; (8004994 <HAL_RCC_ClockConfig+0x12c>)
 8004956:	4c10      	ldr	r4, [pc, #64]	; (8004998 <HAL_RCC_ClockConfig+0x130>)
 8004958:	6892      	ldr	r2, [r2, #8]
 800495a:	4910      	ldr	r1, [pc, #64]	; (800499c <HAL_RCC_ClockConfig+0x134>)
 800495c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004960:	4603      	mov	r3, r0
 8004962:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8004964:	480e      	ldr	r0, [pc, #56]	; (80049a0 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004966:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8004968:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800496a:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 800496c:	f7ff fabc 	bl	8003ee8 <HAL_InitTick>
  return HAL_OK;
 8004970:	2000      	movs	r0, #0
}
 8004972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004976:	0198      	lsls	r0, r3, #6
 8004978:	d4b1      	bmi.n	80048de <HAL_RCC_ClockConfig+0x76>
 800497a:	e789      	b.n	8004890 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 800497c:	2001      	movs	r0, #1
}
 800497e:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004980:	4b04      	ldr	r3, [pc, #16]	; (8004994 <HAL_RCC_ClockConfig+0x12c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	039e      	lsls	r6, r3, #14
 8004986:	d4aa      	bmi.n	80048de <HAL_RCC_ClockConfig+0x76>
 8004988:	e782      	b.n	8004890 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800498a:	2003      	movs	r0, #3
 800498c:	e781      	b.n	8004892 <HAL_RCC_ClockConfig+0x2a>
 800498e:	bf00      	nop
 8004990:	40023c00 	.word	0x40023c00
 8004994:	40023800 	.word	0x40023800
 8004998:	08008804 	.word	0x08008804
 800499c:	200006fc 	.word	0x200006fc
 80049a0:	20000704 	.word	0x20000704

080049a4 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80049a4:	4b01      	ldr	r3, [pc, #4]	; (80049ac <HAL_RCC_GetHCLKFreq+0x8>)
}
 80049a6:	6818      	ldr	r0, [r3, #0]
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	200006fc 	.word	0x200006fc

080049b0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049b0:	4b04      	ldr	r3, [pc, #16]	; (80049c4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80049b2:	4a05      	ldr	r2, [pc, #20]	; (80049c8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80049b4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80049b6:	4905      	ldr	r1, [pc, #20]	; (80049cc <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049b8:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80049bc:	6808      	ldr	r0, [r1, #0]
 80049be:	5cd3      	ldrb	r3, [r2, r3]
}
 80049c0:	40d8      	lsrs	r0, r3
 80049c2:	4770      	bx	lr
 80049c4:	40023800 	.word	0x40023800
 80049c8:	08008814 	.word	0x08008814
 80049cc:	200006fc 	.word	0x200006fc

080049d0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049d0:	4b04      	ldr	r3, [pc, #16]	; (80049e4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80049d2:	4a05      	ldr	r2, [pc, #20]	; (80049e8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80049d4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80049d6:	4905      	ldr	r1, [pc, #20]	; (80049ec <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049d8:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80049dc:	6808      	ldr	r0, [r1, #0]
 80049de:	5cd3      	ldrb	r3, [r2, r3]
}
 80049e0:	40d8      	lsrs	r0, r3
 80049e2:	4770      	bx	lr
 80049e4:	40023800 	.word	0x40023800
 80049e8:	08008814 	.word	0x08008814
 80049ec:	200006fc 	.word	0x200006fc

080049f0 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049f0:	4928      	ldr	r1, [pc, #160]	; (8004a94 <HAL_RCC_GetSysClockFreq+0xa4>)
{
 80049f2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049f4:	688b      	ldr	r3, [r1, #8]
 80049f6:	f003 030c 	and.w	r3, r3, #12
 80049fa:	2b08      	cmp	r3, #8
 80049fc:	d007      	beq.n	8004a0e <HAL_RCC_GetSysClockFreq+0x1e>
 80049fe:	2b0c      	cmp	r3, #12
 8004a00:	d01d      	beq.n	8004a3e <HAL_RCC_GetSysClockFreq+0x4e>
 8004a02:	4a25      	ldr	r2, [pc, #148]	; (8004a98 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004a04:	4825      	ldr	r0, [pc, #148]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xac>)
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	bf08      	it	eq
 8004a0a:	4610      	moveq	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004a0c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a0e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a10:	684b      	ldr	r3, [r1, #4]
 8004a12:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a16:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a1a:	d130      	bne.n	8004a7e <HAL_RCC_GetSysClockFreq+0x8e>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a1c:	6849      	ldr	r1, [r1, #4]
 8004a1e:	481f      	ldr	r0, [pc, #124]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xac>)
 8004a20:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004a24:	fba1 0100 	umull	r0, r1, r1, r0
 8004a28:	f7fc f8d6 	bl	8000bd8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a2c:	4b19      	ldr	r3, [pc, #100]	; (8004a94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004a34:	3301      	adds	r3, #1
 8004a36:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8004a38:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004a3c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a3e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a40:	684b      	ldr	r3, [r1, #4]
 8004a42:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a46:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a4a:	d10e      	bne.n	8004a6a <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a4c:	6849      	ldr	r1, [r1, #4]
 8004a4e:	4813      	ldr	r0, [pc, #76]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xac>)
 8004a50:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004a54:	fba1 0100 	umull	r0, r1, r1, r0
 8004a58:	f7fc f8be 	bl	8000bd8 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004a5c:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 8004a64:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004a68:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a6a:	684b      	ldr	r3, [r1, #4]
 8004a6c:	480a      	ldr	r0, [pc, #40]	; (8004a98 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004a6e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004a72:	fba3 0100 	umull	r0, r1, r3, r0
 8004a76:	2300      	movs	r3, #0
 8004a78:	f7fc f8ae 	bl	8000bd8 <__aeabi_uldivmod>
 8004a7c:	e7ee      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a7e:	684b      	ldr	r3, [r1, #4]
 8004a80:	4805      	ldr	r0, [pc, #20]	; (8004a98 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004a82:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004a86:	fba3 0100 	umull	r0, r1, r3, r0
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f7fc f8a4 	bl	8000bd8 <__aeabi_uldivmod>
 8004a90:	e7cc      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0x3c>
 8004a92:	bf00      	nop
 8004a94:	40023800 	.word	0x40023800
 8004a98:	007a1200 	.word	0x007a1200
 8004a9c:	00f42400 	.word	0x00f42400

08004aa0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aa4:	6803      	ldr	r3, [r0, #0]
 8004aa6:	07da      	lsls	r2, r3, #31
{
 8004aa8:	b082      	sub	sp, #8
 8004aaa:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aac:	d536      	bpl.n	8004b1c <HAL_RCC_OscConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004aae:	49ae      	ldr	r1, [pc, #696]	; (8004d68 <HAL_RCC_OscConfig+0x2c8>)
 8004ab0:	688a      	ldr	r2, [r1, #8]
 8004ab2:	f002 020c 	and.w	r2, r2, #12
 8004ab6:	2a04      	cmp	r2, #4
 8004ab8:	f000 80d1 	beq.w	8004c5e <HAL_RCC_OscConfig+0x1be>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004abc:	688a      	ldr	r2, [r1, #8]
 8004abe:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ac2:	2a08      	cmp	r2, #8
 8004ac4:	f000 80c7 	beq.w	8004c56 <HAL_RCC_OscConfig+0x1b6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ac8:	49a7      	ldr	r1, [pc, #668]	; (8004d68 <HAL_RCC_OscConfig+0x2c8>)
 8004aca:	688a      	ldr	r2, [r1, #8]
 8004acc:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ad0:	2a0c      	cmp	r2, #12
 8004ad2:	f000 8104 	beq.w	8004cde <HAL_RCC_OscConfig+0x23e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ad6:	6863      	ldr	r3, [r4, #4]
 8004ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004adc:	f000 8104 	beq.w	8004ce8 <HAL_RCC_OscConfig+0x248>
 8004ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ae4:	f000 818f 	beq.w	8004e06 <HAL_RCC_OscConfig+0x366>
 8004ae8:	4d9f      	ldr	r5, [pc, #636]	; (8004d68 <HAL_RCC_OscConfig+0x2c8>)
 8004aea:	682a      	ldr	r2, [r5, #0]
 8004aec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004af0:	602a      	str	r2, [r5, #0]
 8004af2:	682a      	ldr	r2, [r5, #0]
 8004af4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004af8:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f040 80f9 	bne.w	8004cf2 <HAL_RCC_OscConfig+0x252>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b00:	f7ff fa3c 	bl	8003f7c <HAL_GetTick>
 8004b04:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b06:	e005      	b.n	8004b14 <HAL_RCC_OscConfig+0x74>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b08:	f7ff fa38 	bl	8003f7c <HAL_GetTick>
 8004b0c:	1b80      	subs	r0, r0, r6
 8004b0e:	2864      	cmp	r0, #100	; 0x64
 8004b10:	f200 810d 	bhi.w	8004d2e <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b14:	682b      	ldr	r3, [r5, #0]
 8004b16:	0399      	lsls	r1, r3, #14
 8004b18:	d4f6      	bmi.n	8004b08 <HAL_RCC_OscConfig+0x68>
 8004b1a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b1c:	079a      	lsls	r2, r3, #30
 8004b1e:	d52f      	bpl.n	8004b80 <HAL_RCC_OscConfig+0xe0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b20:	4a91      	ldr	r2, [pc, #580]	; (8004d68 <HAL_RCC_OscConfig+0x2c8>)
 8004b22:	6891      	ldr	r1, [r2, #8]
 8004b24:	f011 0f0c 	tst.w	r1, #12
 8004b28:	f000 80a7 	beq.w	8004c7a <HAL_RCC_OscConfig+0x1da>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b2c:	6891      	ldr	r1, [r2, #8]
 8004b2e:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b32:	2908      	cmp	r1, #8
 8004b34:	f000 809d 	beq.w	8004c72 <HAL_RCC_OscConfig+0x1d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b38:	498b      	ldr	r1, [pc, #556]	; (8004d68 <HAL_RCC_OscConfig+0x2c8>)
 8004b3a:	688a      	ldr	r2, [r1, #8]
 8004b3c:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b40:	2a0c      	cmp	r2, #12
 8004b42:	f000 812c 	beq.w	8004d9e <HAL_RCC_OscConfig+0x2fe>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b46:	68e3      	ldr	r3, [r4, #12]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 8117 	beq.w	8004d7c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b4e:	4b87      	ldr	r3, [pc, #540]	; (8004d6c <HAL_RCC_OscConfig+0x2cc>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b50:	4e85      	ldr	r6, [pc, #532]	; (8004d68 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8004b52:	2201      	movs	r2, #1
 8004b54:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004b56:	f7ff fa11 	bl	8003f7c <HAL_GetTick>
 8004b5a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b5c:	e005      	b.n	8004b6a <HAL_RCC_OscConfig+0xca>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b5e:	f7ff fa0d 	bl	8003f7c <HAL_GetTick>
 8004b62:	1b40      	subs	r0, r0, r5
 8004b64:	2802      	cmp	r0, #2
 8004b66:	f200 80e2 	bhi.w	8004d2e <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b6a:	6833      	ldr	r3, [r6, #0]
 8004b6c:	0798      	lsls	r0, r3, #30
 8004b6e:	d5f6      	bpl.n	8004b5e <HAL_RCC_OscConfig+0xbe>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b70:	6833      	ldr	r3, [r6, #0]
 8004b72:	6922      	ldr	r2, [r4, #16]
 8004b74:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004b78:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004b7c:	6033      	str	r3, [r6, #0]
 8004b7e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b80:	071a      	lsls	r2, r3, #28
 8004b82:	d515      	bpl.n	8004bb0 <HAL_RCC_OscConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b84:	6963      	ldr	r3, [r4, #20]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 808d 	beq.w	8004ca6 <HAL_RCC_OscConfig+0x206>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b8c:	4b78      	ldr	r3, [pc, #480]	; (8004d70 <HAL_RCC_OscConfig+0x2d0>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b8e:	4e76      	ldr	r6, [pc, #472]	; (8004d68 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8004b90:	2201      	movs	r2, #1
 8004b92:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004b94:	f7ff f9f2 	bl	8003f7c <HAL_GetTick>
 8004b98:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b9a:	e005      	b.n	8004ba8 <HAL_RCC_OscConfig+0x108>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b9c:	f7ff f9ee 	bl	8003f7c <HAL_GetTick>
 8004ba0:	1b40      	subs	r0, r0, r5
 8004ba2:	2802      	cmp	r0, #2
 8004ba4:	f200 80c3 	bhi.w	8004d2e <HAL_RCC_OscConfig+0x28e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ba8:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004baa:	079b      	lsls	r3, r3, #30
 8004bac:	d5f6      	bpl.n	8004b9c <HAL_RCC_OscConfig+0xfc>
 8004bae:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bb0:	0758      	lsls	r0, r3, #29
 8004bb2:	d530      	bpl.n	8004c16 <HAL_RCC_OscConfig+0x176>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bb4:	4a6c      	ldr	r2, [pc, #432]	; (8004d68 <HAL_RCC_OscConfig+0x2c8>)
 8004bb6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004bb8:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8004bbc:	f000 8083 	beq.w	8004cc6 <HAL_RCC_OscConfig+0x226>
    FlagStatus       pwrclkchanged = RESET;
 8004bc0:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc2:	4e6c      	ldr	r6, [pc, #432]	; (8004d74 <HAL_RCC_OscConfig+0x2d4>)
 8004bc4:	6833      	ldr	r3, [r6, #0]
 8004bc6:	05d9      	lsls	r1, r3, #23
 8004bc8:	f140 80a1 	bpl.w	8004d0e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bcc:	68a3      	ldr	r3, [r4, #8]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	f000 80b1 	beq.w	8004d36 <HAL_RCC_OscConfig+0x296>
 8004bd4:	2b05      	cmp	r3, #5
 8004bd6:	f000 8120 	beq.w	8004e1a <HAL_RCC_OscConfig+0x37a>
 8004bda:	4e63      	ldr	r6, [pc, #396]	; (8004d68 <HAL_RCC_OscConfig+0x2c8>)
 8004bdc:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8004bde:	f022 0201 	bic.w	r2, r2, #1
 8004be2:	6732      	str	r2, [r6, #112]	; 0x70
 8004be4:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8004be6:	f022 0204 	bic.w	r2, r2, #4
 8004bea:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f040 80a7 	bne.w	8004d40 <HAL_RCC_OscConfig+0x2a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf2:	f7ff f9c3 	bl	8003f7c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bf6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004bfa:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bfc:	e005      	b.n	8004c0a <HAL_RCC_OscConfig+0x16a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bfe:	f7ff f9bd 	bl	8003f7c <HAL_GetTick>
 8004c02:	1bc0      	subs	r0, r0, r7
 8004c04:	4540      	cmp	r0, r8
 8004c06:	f200 8092 	bhi.w	8004d2e <HAL_RCC_OscConfig+0x28e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c0a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004c0c:	0798      	lsls	r0, r3, #30
 8004c0e:	d4f6      	bmi.n	8004bfe <HAL_RCC_OscConfig+0x15e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c10:	2d00      	cmp	r5, #0
 8004c12:	f040 810c 	bne.w	8004e2e <HAL_RCC_OscConfig+0x38e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c16:	69a3      	ldr	r3, [r4, #24]
 8004c18:	b1cb      	cbz	r3, 8004c4e <HAL_RCC_OscConfig+0x1ae>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c1a:	4d53      	ldr	r5, [pc, #332]	; (8004d68 <HAL_RCC_OscConfig+0x2c8>)
 8004c1c:	68aa      	ldr	r2, [r5, #8]
 8004c1e:	f002 020c 	and.w	r2, r2, #12
 8004c22:	2a08      	cmp	r2, #8
 8004c24:	d030      	beq.n	8004c88 <HAL_RCC_OscConfig+0x1e8>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c26:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c28:	4b53      	ldr	r3, [pc, #332]	; (8004d78 <HAL_RCC_OscConfig+0x2d8>)
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c30:	f000 80ba 	beq.w	8004da8 <HAL_RCC_OscConfig+0x308>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c34:	f7ff f9a2 	bl	8003f7c <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c38:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8004c3a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3c:	e004      	b.n	8004c48 <HAL_RCC_OscConfig+0x1a8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c3e:	f7ff f99d 	bl	8003f7c <HAL_GetTick>
 8004c42:	1b40      	subs	r0, r0, r5
 8004c44:	2802      	cmp	r0, #2
 8004c46:	d872      	bhi.n	8004d2e <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	019b      	lsls	r3, r3, #6
 8004c4c:	d4f7      	bmi.n	8004c3e <HAL_RCC_OscConfig+0x19e>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8004c4e:	2000      	movs	r0, #0
}
 8004c50:	b002      	add	sp, #8
 8004c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c56:	684a      	ldr	r2, [r1, #4]
 8004c58:	0257      	lsls	r7, r2, #9
 8004c5a:	f57f af35 	bpl.w	8004ac8 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c5e:	4a42      	ldr	r2, [pc, #264]	; (8004d68 <HAL_RCC_OscConfig+0x2c8>)
 8004c60:	6812      	ldr	r2, [r2, #0]
 8004c62:	0395      	lsls	r5, r2, #14
 8004c64:	f57f af5a 	bpl.w	8004b1c <HAL_RCC_OscConfig+0x7c>
 8004c68:	6862      	ldr	r2, [r4, #4]
 8004c6a:	2a00      	cmp	r2, #0
 8004c6c:	f47f af56 	bne.w	8004b1c <HAL_RCC_OscConfig+0x7c>
 8004c70:	e00a      	b.n	8004c88 <HAL_RCC_OscConfig+0x1e8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c72:	6852      	ldr	r2, [r2, #4]
 8004c74:	0257      	lsls	r7, r2, #9
 8004c76:	f53f af5f 	bmi.w	8004b38 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c7a:	4a3b      	ldr	r2, [pc, #236]	; (8004d68 <HAL_RCC_OscConfig+0x2c8>)
 8004c7c:	6812      	ldr	r2, [r2, #0]
 8004c7e:	0795      	lsls	r5, r2, #30
 8004c80:	d506      	bpl.n	8004c90 <HAL_RCC_OscConfig+0x1f0>
 8004c82:	68e2      	ldr	r2, [r4, #12]
 8004c84:	2a01      	cmp	r2, #1
 8004c86:	d003      	beq.n	8004c90 <HAL_RCC_OscConfig+0x1f0>
        return HAL_ERROR;
 8004c88:	2001      	movs	r0, #1
}
 8004c8a:	b002      	add	sp, #8
 8004c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c90:	4935      	ldr	r1, [pc, #212]	; (8004d68 <HAL_RCC_OscConfig+0x2c8>)
 8004c92:	6920      	ldr	r0, [r4, #16]
 8004c94:	680a      	ldr	r2, [r1, #0]
 8004c96:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004c9a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004c9e:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ca0:	071a      	lsls	r2, r3, #28
 8004ca2:	d585      	bpl.n	8004bb0 <HAL_RCC_OscConfig+0x110>
 8004ca4:	e76e      	b.n	8004b84 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_LSI_DISABLE();
 8004ca6:	4a32      	ldr	r2, [pc, #200]	; (8004d70 <HAL_RCC_OscConfig+0x2d0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ca8:	4e2f      	ldr	r6, [pc, #188]	; (8004d68 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8004caa:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004cac:	f7ff f966 	bl	8003f7c <HAL_GetTick>
 8004cb0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cb2:	e004      	b.n	8004cbe <HAL_RCC_OscConfig+0x21e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cb4:	f7ff f962 	bl	8003f7c <HAL_GetTick>
 8004cb8:	1b40      	subs	r0, r0, r5
 8004cba:	2802      	cmp	r0, #2
 8004cbc:	d837      	bhi.n	8004d2e <HAL_RCC_OscConfig+0x28e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cbe:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004cc0:	079f      	lsls	r7, r3, #30
 8004cc2:	d4f7      	bmi.n	8004cb4 <HAL_RCC_OscConfig+0x214>
 8004cc4:	e773      	b.n	8004bae <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cc6:	9301      	str	r3, [sp, #4]
 8004cc8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cce:	6413      	str	r3, [r2, #64]	; 0x40
 8004cd0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd6:	9301      	str	r3, [sp, #4]
 8004cd8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004cda:	2501      	movs	r5, #1
 8004cdc:	e771      	b.n	8004bc2 <HAL_RCC_OscConfig+0x122>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cde:	684a      	ldr	r2, [r1, #4]
 8004ce0:	0256      	lsls	r6, r2, #9
 8004ce2:	f57f aef8 	bpl.w	8004ad6 <HAL_RCC_OscConfig+0x36>
 8004ce6:	e7ba      	b.n	8004c5e <HAL_RCC_OscConfig+0x1be>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce8:	4a1f      	ldr	r2, [pc, #124]	; (8004d68 <HAL_RCC_OscConfig+0x2c8>)
 8004cea:	6813      	ldr	r3, [r2, #0]
 8004cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004cf2:	f7ff f943 	bl	8003f7c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cf6:	4e1c      	ldr	r6, [pc, #112]	; (8004d68 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8004cf8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cfa:	e004      	b.n	8004d06 <HAL_RCC_OscConfig+0x266>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cfc:	f7ff f93e 	bl	8003f7c <HAL_GetTick>
 8004d00:	1b40      	subs	r0, r0, r5
 8004d02:	2864      	cmp	r0, #100	; 0x64
 8004d04:	d813      	bhi.n	8004d2e <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d06:	6833      	ldr	r3, [r6, #0]
 8004d08:	0398      	lsls	r0, r3, #14
 8004d0a:	d5f7      	bpl.n	8004cfc <HAL_RCC_OscConfig+0x25c>
 8004d0c:	e705      	b.n	8004b1a <HAL_RCC_OscConfig+0x7a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d0e:	6833      	ldr	r3, [r6, #0]
 8004d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d14:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004d16:	f7ff f931 	bl	8003f7c <HAL_GetTick>
 8004d1a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1c:	6833      	ldr	r3, [r6, #0]
 8004d1e:	05da      	lsls	r2, r3, #23
 8004d20:	f53f af54 	bmi.w	8004bcc <HAL_RCC_OscConfig+0x12c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d24:	f7ff f92a 	bl	8003f7c <HAL_GetTick>
 8004d28:	1bc0      	subs	r0, r0, r7
 8004d2a:	2802      	cmp	r0, #2
 8004d2c:	d9f6      	bls.n	8004d1c <HAL_RCC_OscConfig+0x27c>
            return HAL_TIMEOUT;
 8004d2e:	2003      	movs	r0, #3
}
 8004d30:	b002      	add	sp, #8
 8004d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d36:	4a0c      	ldr	r2, [pc, #48]	; (8004d68 <HAL_RCC_OscConfig+0x2c8>)
 8004d38:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004d3a:	f043 0301 	orr.w	r3, r3, #1
 8004d3e:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004d40:	f7ff f91c 	bl	8003f7c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d44:	4f08      	ldr	r7, [pc, #32]	; (8004d68 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8004d46:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d48:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d4c:	e004      	b.n	8004d58 <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d4e:	f7ff f915 	bl	8003f7c <HAL_GetTick>
 8004d52:	1b80      	subs	r0, r0, r6
 8004d54:	4540      	cmp	r0, r8
 8004d56:	d8ea      	bhi.n	8004d2e <HAL_RCC_OscConfig+0x28e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d5a:	079b      	lsls	r3, r3, #30
 8004d5c:	d5f7      	bpl.n	8004d4e <HAL_RCC_OscConfig+0x2ae>
    if(pwrclkchanged == SET)
 8004d5e:	2d00      	cmp	r5, #0
 8004d60:	f43f af59 	beq.w	8004c16 <HAL_RCC_OscConfig+0x176>
 8004d64:	e063      	b.n	8004e2e <HAL_RCC_OscConfig+0x38e>
 8004d66:	bf00      	nop
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	42470000 	.word	0x42470000
 8004d70:	42470e80 	.word	0x42470e80
 8004d74:	40007000 	.word	0x40007000
 8004d78:	42470060 	.word	0x42470060
        __HAL_RCC_HSI_DISABLE();
 8004d7c:	4a2f      	ldr	r2, [pc, #188]	; (8004e3c <HAL_RCC_OscConfig+0x39c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d7e:	4e30      	ldr	r6, [pc, #192]	; (8004e40 <HAL_RCC_OscConfig+0x3a0>)
        __HAL_RCC_HSI_DISABLE();
 8004d80:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004d82:	f7ff f8fb 	bl	8003f7c <HAL_GetTick>
 8004d86:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d88:	e004      	b.n	8004d94 <HAL_RCC_OscConfig+0x2f4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d8a:	f7ff f8f7 	bl	8003f7c <HAL_GetTick>
 8004d8e:	1b40      	subs	r0, r0, r5
 8004d90:	2802      	cmp	r0, #2
 8004d92:	d8cc      	bhi.n	8004d2e <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d94:	6833      	ldr	r3, [r6, #0]
 8004d96:	0799      	lsls	r1, r3, #30
 8004d98:	d4f7      	bmi.n	8004d8a <HAL_RCC_OscConfig+0x2ea>
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	e6f0      	b.n	8004b80 <HAL_RCC_OscConfig+0xe0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d9e:	684a      	ldr	r2, [r1, #4]
 8004da0:	0256      	lsls	r6, r2, #9
 8004da2:	f53f aed0 	bmi.w	8004b46 <HAL_RCC_OscConfig+0xa6>
 8004da6:	e768      	b.n	8004c7a <HAL_RCC_OscConfig+0x1da>
        tickstart = HAL_GetTick();
 8004da8:	f7ff f8e8 	bl	8003f7c <HAL_GetTick>
 8004dac:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dae:	e004      	b.n	8004dba <HAL_RCC_OscConfig+0x31a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004db0:	f7ff f8e4 	bl	8003f7c <HAL_GetTick>
 8004db4:	1b80      	subs	r0, r0, r6
 8004db6:	2802      	cmp	r0, #2
 8004db8:	d8b9      	bhi.n	8004d2e <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dba:	682b      	ldr	r3, [r5, #0]
 8004dbc:	0199      	lsls	r1, r3, #6
 8004dbe:	d4f7      	bmi.n	8004db0 <HAL_RCC_OscConfig+0x310>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dc0:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8004dc4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004dc6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004dc8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004dce:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8004dd2:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004dd6:	0852      	lsrs	r2, r2, #1
 8004dd8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004ddc:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8004dde:	4919      	ldr	r1, [pc, #100]	; (8004e44 <HAL_RCC_OscConfig+0x3a4>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004de0:	4e17      	ldr	r6, [pc, #92]	; (8004e40 <HAL_RCC_OscConfig+0x3a0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8004de6:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004de8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004dea:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8004dec:	f7ff f8c6 	bl	8003f7c <HAL_GetTick>
 8004df0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df2:	e004      	b.n	8004dfe <HAL_RCC_OscConfig+0x35e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004df4:	f7ff f8c2 	bl	8003f7c <HAL_GetTick>
 8004df8:	1b00      	subs	r0, r0, r4
 8004dfa:	2802      	cmp	r0, #2
 8004dfc:	d897      	bhi.n	8004d2e <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dfe:	6833      	ldr	r3, [r6, #0]
 8004e00:	019a      	lsls	r2, r3, #6
 8004e02:	d5f7      	bpl.n	8004df4 <HAL_RCC_OscConfig+0x354>
 8004e04:	e723      	b.n	8004c4e <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e06:	4b0e      	ldr	r3, [pc, #56]	; (8004e40 <HAL_RCC_OscConfig+0x3a0>)
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004e16:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e18:	e76b      	b.n	8004cf2 <HAL_RCC_OscConfig+0x252>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e1a:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <HAL_RCC_OscConfig+0x3a0>)
 8004e1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e1e:	f042 0204 	orr.w	r2, r2, #4
 8004e22:	671a      	str	r2, [r3, #112]	; 0x70
 8004e24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e26:	f042 0201 	orr.w	r2, r2, #1
 8004e2a:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e2c:	e788      	b.n	8004d40 <HAL_RCC_OscConfig+0x2a0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e2e:	4a04      	ldr	r2, [pc, #16]	; (8004e40 <HAL_RCC_OscConfig+0x3a0>)
 8004e30:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e36:	6413      	str	r3, [r2, #64]	; 0x40
 8004e38:	e6ed      	b.n	8004c16 <HAL_RCC_OscConfig+0x176>
 8004e3a:	bf00      	nop
 8004e3c:	42470000 	.word	0x42470000
 8004e40:	40023800 	.word	0x40023800
 8004e44:	42470060 	.word	0x42470060

08004e48 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d074      	beq.n	8004f36 <HAL_TIM_Base_Init+0xee>
{
 8004e4c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e4e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004e52:	4604      	mov	r4, r0
 8004e54:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d067      	beq.n	8004f2c <HAL_TIM_Base_Init+0xe4>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e5c:	6821      	ldr	r1, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e5e:	4a37      	ldr	r2, [pc, #220]	; (8004f3c <HAL_TIM_Base_Init+0xf4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004e60:	2302      	movs	r3, #2
 8004e62:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e66:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 8004e68:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e6a:	d04b      	beq.n	8004f04 <HAL_TIM_Base_Init+0xbc>
 8004e6c:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8004e70:	d031      	beq.n	8004ed6 <HAL_TIM_Base_Init+0x8e>
 8004e72:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004e76:	4291      	cmp	r1, r2
 8004e78:	d02d      	beq.n	8004ed6 <HAL_TIM_Base_Init+0x8e>
 8004e7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e7e:	4291      	cmp	r1, r2
 8004e80:	d029      	beq.n	8004ed6 <HAL_TIM_Base_Init+0x8e>
 8004e82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e86:	4291      	cmp	r1, r2
 8004e88:	d025      	beq.n	8004ed6 <HAL_TIM_Base_Init+0x8e>
 8004e8a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004e8e:	4291      	cmp	r1, r2
 8004e90:	d038      	beq.n	8004f04 <HAL_TIM_Base_Init+0xbc>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e92:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004e96:	4291      	cmp	r1, r2
 8004e98:	d021      	beq.n	8004ede <HAL_TIM_Base_Init+0x96>
 8004e9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e9e:	4291      	cmp	r1, r2
 8004ea0:	d01d      	beq.n	8004ede <HAL_TIM_Base_Init+0x96>
 8004ea2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ea6:	4291      	cmp	r1, r2
 8004ea8:	d019      	beq.n	8004ede <HAL_TIM_Base_Init+0x96>
 8004eaa:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004eae:	4291      	cmp	r1, r2
 8004eb0:	d015      	beq.n	8004ede <HAL_TIM_Base_Init+0x96>
 8004eb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004eb6:	4291      	cmp	r1, r2
 8004eb8:	d011      	beq.n	8004ede <HAL_TIM_Base_Init+0x96>
 8004eba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ebe:	4291      	cmp	r1, r2
 8004ec0:	d00d      	beq.n	8004ede <HAL_TIM_Base_Init+0x96>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ec2:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ec4:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ec6:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ec8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ecc:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004ece:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ed0:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004ed2:	628a      	str	r2, [r1, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ed4:	e010      	b.n	8004ef8 <HAL_TIM_Base_Init+0xb0>
    tmpcr1 |= Structure->CounterMode;
 8004ed6:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004edc:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ede:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ee0:	69a2      	ldr	r2, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ee2:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ee8:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eee:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8004ef0:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004ef2:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef4:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004ef6:	628a      	str	r2, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	614b      	str	r3, [r1, #20]
  htim->State = HAL_TIM_STATE_READY;
 8004efc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004f00:	2000      	movs	r0, #0
}
 8004f02:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8004f04:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f06:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f08:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004f0e:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f14:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f1a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004f1c:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f1e:	68e3      	ldr	r3, [r4, #12]
 8004f20:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f22:	6863      	ldr	r3, [r4, #4]
 8004f24:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004f26:	6963      	ldr	r3, [r4, #20]
 8004f28:	630b      	str	r3, [r1, #48]	; 0x30
 8004f2a:	e7e5      	b.n	8004ef8 <HAL_TIM_Base_Init+0xb0>
    htim->Lock = HAL_UNLOCKED;
 8004f2c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004f30:	f7fd ffa6 	bl	8002e80 <HAL_TIM_Base_MspInit>
 8004f34:	e792      	b.n	8004e5c <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 8004f36:	2001      	movs	r0, #1
}
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	40010000 	.word	0x40010000

08004f40 <HAL_TIM_PWM_MspInit>:
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop

08004f44 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004f44:	2800      	cmp	r0, #0
 8004f46:	d074      	beq.n	8005032 <HAL_TIM_PWM_Init+0xee>
{
 8004f48:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004f4a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004f4e:	4604      	mov	r4, r0
 8004f50:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d067      	beq.n	8005028 <HAL_TIM_PWM_Init+0xe4>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f58:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f5a:	4a37      	ldr	r2, [pc, #220]	; (8005038 <HAL_TIM_PWM_Init+0xf4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f62:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 8004f64:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f66:	d04b      	beq.n	8005000 <HAL_TIM_PWM_Init+0xbc>
 8004f68:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8004f6c:	d031      	beq.n	8004fd2 <HAL_TIM_PWM_Init+0x8e>
 8004f6e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004f72:	4291      	cmp	r1, r2
 8004f74:	d02d      	beq.n	8004fd2 <HAL_TIM_PWM_Init+0x8e>
 8004f76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f7a:	4291      	cmp	r1, r2
 8004f7c:	d029      	beq.n	8004fd2 <HAL_TIM_PWM_Init+0x8e>
 8004f7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f82:	4291      	cmp	r1, r2
 8004f84:	d025      	beq.n	8004fd2 <HAL_TIM_PWM_Init+0x8e>
 8004f86:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004f8a:	4291      	cmp	r1, r2
 8004f8c:	d038      	beq.n	8005000 <HAL_TIM_PWM_Init+0xbc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f8e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004f92:	4291      	cmp	r1, r2
 8004f94:	d021      	beq.n	8004fda <HAL_TIM_PWM_Init+0x96>
 8004f96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f9a:	4291      	cmp	r1, r2
 8004f9c:	d01d      	beq.n	8004fda <HAL_TIM_PWM_Init+0x96>
 8004f9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fa2:	4291      	cmp	r1, r2
 8004fa4:	d019      	beq.n	8004fda <HAL_TIM_PWM_Init+0x96>
 8004fa6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004faa:	4291      	cmp	r1, r2
 8004fac:	d015      	beq.n	8004fda <HAL_TIM_PWM_Init+0x96>
 8004fae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fb2:	4291      	cmp	r1, r2
 8004fb4:	d011      	beq.n	8004fda <HAL_TIM_PWM_Init+0x96>
 8004fb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fba:	4291      	cmp	r1, r2
 8004fbc:	d00d      	beq.n	8004fda <HAL_TIM_PWM_Init+0x96>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fbe:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fc0:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8004fc2:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fc8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004fca:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fcc:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004fce:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fd0:	e010      	b.n	8004ff4 <HAL_TIM_PWM_Init+0xb0>
    tmpcr1 |= Structure->CounterMode;
 8004fd2:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004fd8:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fda:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fdc:	69a2      	ldr	r2, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fde:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fe4:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fe6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fea:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8004fec:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004fee:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ff0:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004ff2:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	614b      	str	r3, [r1, #20]
  htim->State = HAL_TIM_STATE_READY;
 8004ff8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004ffc:	2000      	movs	r0, #0
}
 8004ffe:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8005000:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005002:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005004:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800500a:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 800500c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005010:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005016:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005018:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800501a:	68e3      	ldr	r3, [r4, #12]
 800501c:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800501e:	6863      	ldr	r3, [r4, #4]
 8005020:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005022:	6963      	ldr	r3, [r4, #20]
 8005024:	630b      	str	r3, [r1, #48]	; 0x30
 8005026:	e7e5      	b.n	8004ff4 <HAL_TIM_PWM_Init+0xb0>
    htim->Lock = HAL_UNLOCKED;
 8005028:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800502c:	f7ff ff88 	bl	8004f40 <HAL_TIM_PWM_MspInit>
 8005030:	e792      	b.n	8004f58 <HAL_TIM_PWM_Init+0x14>
    return HAL_ERROR;
 8005032:	2001      	movs	r0, #1
}
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	40010000 	.word	0x40010000

0800503c <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 800503c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005040:	2b01      	cmp	r3, #1
 8005042:	f000 80ce 	beq.w	80051e2 <HAL_TIM_PWM_ConfigChannel+0x1a6>
{
 8005046:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8005048:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800504a:	2401      	movs	r4, #1
 800504c:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005050:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8005054:	2a0c      	cmp	r2, #12
 8005056:	d835      	bhi.n	80050c4 <HAL_TIM_PWM_ConfigChannel+0x88>
 8005058:	e8df f002 	tbb	[pc, r2]
 800505c:	34343407 	.word	0x34343407
 8005060:	3434346c 	.word	0x3434346c
 8005064:	34343498 	.word	0x34343498
 8005068:	3d          	.byte	0x3d
 8005069:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800506a:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800506c:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005070:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8005072:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005074:	4e75      	ldr	r6, [pc, #468]	; (800524c <HAL_TIM_PWM_ConfigChannel+0x210>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005076:	f025 0501 	bic.w	r5, r5, #1
 800507a:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800507c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800507e:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8005080:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8005082:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005086:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800508a:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 800508c:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmrx |= OC_Config->OCMode;
 8005090:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005094:	f000 80a7 	beq.w	80051e6 <HAL_TIM_PWM_ConfigChannel+0x1aa>
 8005098:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800509c:	42b3      	cmp	r3, r6
 800509e:	f000 80a2 	beq.w	80051e6 <HAL_TIM_PWM_ConfigChannel+0x1aa>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050a2:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80050a4:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80050a6:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80050a8:	635e      	str	r6, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050aa:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050ac:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050ae:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050b0:	f044 0408 	orr.w	r4, r4, #8
 80050b4:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050b6:	6999      	ldr	r1, [r3, #24]
 80050b8:	f021 0104 	bic.w	r1, r1, #4
 80050bc:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050be:	699a      	ldr	r2, [r3, #24]
 80050c0:	432a      	orrs	r2, r5
 80050c2:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80050c4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80050c6:	2201      	movs	r2, #1
 80050c8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80050cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80050d0:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80050d2:	4618      	mov	r0, r3
}
 80050d4:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050d6:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050d8:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050dc:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050de:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e0:	4e5a      	ldr	r6, [pc, #360]	; (800524c <HAL_TIM_PWM_ConfigChannel+0x210>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050e2:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 80050e6:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80050e8:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80050ea:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80050ec:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 80050ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050f2:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f6:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050f8:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050fc:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005100:	f000 808e 	beq.w	8005220 <HAL_TIM_PWM_ConfigChannel+0x1e4>
 8005104:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005108:	42b3      	cmp	r3, r6
 800510a:	f000 8089 	beq.w	8005220 <HAL_TIM_PWM_ConfigChannel+0x1e4>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800510e:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005110:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005112:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8005114:	641e      	str	r6, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005116:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005118:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800511a:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800511c:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8005120:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005122:	69d9      	ldr	r1, [r3, #28]
 8005124:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005128:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800512a:	69da      	ldr	r2, [r3, #28]
 800512c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005130:	61da      	str	r2, [r3, #28]
      break;
 8005132:	e7c7      	b.n	80050c4 <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005134:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005136:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005138:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800513a:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800513c:	f8df c10c 	ldr.w	ip, [pc, #268]	; 800524c <HAL_TIM_PWM_ConfigChannel+0x210>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005140:	f025 0510 	bic.w	r5, r5, #16
 8005144:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8005146:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005148:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800514a:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800514c:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005150:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005154:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005156:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800515a:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800515e:	d04f      	beq.n	8005200 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8005160:	4f3b      	ldr	r7, [pc, #236]	; (8005250 <HAL_TIM_PWM_ConfigChannel+0x214>)
 8005162:	42bb      	cmp	r3, r7
 8005164:	d04c      	beq.n	8005200 <HAL_TIM_PWM_ConfigChannel+0x1c4>
  TIMx->CCR2 = OC_Config->Pulse;
 8005166:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005168:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800516a:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800516c:	639e      	str	r6, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800516e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005170:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005172:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005174:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8005178:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800517a:	6999      	ldr	r1, [r3, #24]
 800517c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005180:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005182:	699a      	ldr	r2, [r3, #24]
 8005184:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005188:	619a      	str	r2, [r3, #24]
      break;
 800518a:	e79b      	b.n	80050c4 <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800518c:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800518e:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005190:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8005192:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005194:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800524c <HAL_TIM_PWM_ConfigChannel+0x210>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005198:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800519c:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800519e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80051a0:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80051a2:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 80051a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051a8:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051ac:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051ae:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 80051b2:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051b6:	d039      	beq.n	800522c <HAL_TIM_PWM_ConfigChannel+0x1f0>
 80051b8:	4f25      	ldr	r7, [pc, #148]	; (8005250 <HAL_TIM_PWM_ConfigChannel+0x214>)
 80051ba:	42bb      	cmp	r3, r7
 80051bc:	d036      	beq.n	800522c <HAL_TIM_PWM_ConfigChannel+0x1f0>
  TIMx->CCR3 = OC_Config->Pulse;
 80051be:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80051c0:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80051c2:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80051c4:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80051c6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051c8:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051ca:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051cc:	f044 0408 	orr.w	r4, r4, #8
 80051d0:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051d2:	69d9      	ldr	r1, [r3, #28]
 80051d4:	f021 0104 	bic.w	r1, r1, #4
 80051d8:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051da:	69da      	ldr	r2, [r3, #28]
 80051dc:	432a      	orrs	r2, r5
 80051de:	61da      	str	r2, [r3, #28]
      break;
 80051e0:	e770      	b.n	80050c4 <HAL_TIM_PWM_ConfigChannel+0x88>
  __HAL_LOCK(htim);
 80051e2:	2002      	movs	r0, #2
}
 80051e4:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 80051e6:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80051e8:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 80051ec:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 80051ee:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051f2:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80051f6:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 80051f8:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80051fc:	4335      	orrs	r5, r6
 80051fe:	e750      	b.n	80050a2 <HAL_TIM_PWM_ConfigChannel+0x66>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005200:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005202:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005206:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800520a:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800520e:	f425 6c40 	bic.w	ip, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005212:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8005216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800521a:	ea4c 0585 	orr.w	r5, ip, r5, lsl #2
 800521e:	e7a2      	b.n	8005166 <HAL_TIM_PWM_ConfigChannel+0x12a>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005220:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005222:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005226:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 800522a:	e770      	b.n	800510e <HAL_TIM_PWM_ConfigChannel+0xd2>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800522c:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800522e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005232:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005236:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800523a:	f425 5c40 	bic.w	ip, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800523e:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8005242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005246:	ea4c 1505 	orr.w	r5, ip, r5, lsl #4
 800524a:	e7b8      	b.n	80051be <HAL_TIM_PWM_ConfigChannel+0x182>
 800524c:	40010000 	.word	0x40010000
 8005250:	40010400 	.word	0x40010400

08005254 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005254:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005258:	2b01      	cmp	r3, #1
 800525a:	d074      	beq.n	8005346 <HAL_TIM_ConfigClockSource+0xf2>
{
 800525c:	b4f0      	push	{r4, r5, r6, r7}
  tmpsmcr = htim->Instance->SMCR;
 800525e:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 8005260:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005262:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8005264:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005268:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800526c:	6894      	ldr	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800526e:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005270:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8005274:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8005278:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 800527a:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800527c:	d065      	beq.n	800534a <HAL_TIM_ConfigClockSource+0xf6>
 800527e:	d831      	bhi.n	80052e4 <HAL_TIM_ConfigClockSource+0x90>
 8005280:	2b40      	cmp	r3, #64	; 0x40
 8005282:	d048      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0xc2>
 8005284:	d921      	bls.n	80052ca <HAL_TIM_ConfigClockSource+0x76>
 8005286:	2b50      	cmp	r3, #80	; 0x50
 8005288:	d116      	bne.n	80052b8 <HAL_TIM_ConfigClockSource+0x64>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800528a:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800528c:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800528e:	684c      	ldr	r4, [r1, #4]
 8005290:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005292:	f026 0601 	bic.w	r6, r6, #1
 8005296:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005298:	6993      	ldr	r3, [r2, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800529a:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800529e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052a2:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80052a6:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052a8:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 80052aa:	6211      	str	r1, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052ac:	6893      	ldr	r3, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052b2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052b6:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 80052b8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80052ba:	2201      	movs	r2, #1
 80052bc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80052c0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80052c4:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80052c6:	4618      	mov	r0, r3
}
 80052c8:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80052ca:	2b20      	cmp	r3, #32
 80052cc:	d002      	beq.n	80052d4 <HAL_TIM_ConfigClockSource+0x80>
 80052ce:	d91e      	bls.n	800530e <HAL_TIM_ConfigClockSource+0xba>
 80052d0:	2b30      	cmp	r3, #48	; 0x30
 80052d2:	d1f1      	bne.n	80052b8 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 80052d4:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80052d6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052da:	430b      	orrs	r3, r1
 80052dc:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80052e0:	6093      	str	r3, [r2, #8]
}
 80052e2:	e7e9      	b.n	80052b8 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 80052e4:	2b70      	cmp	r3, #112	; 0x70
 80052e6:	d049      	beq.n	800537c <HAL_TIM_ConfigClockSource+0x128>
 80052e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ec:	d1e4      	bne.n	80052b8 <HAL_TIM_ConfigClockSource+0x64>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052ee:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 80052f2:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80052f4:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052f6:	432b      	orrs	r3, r5
 80052f8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052fc:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005300:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005302:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005304:	6893      	ldr	r3, [r2, #8]
 8005306:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800530a:	6093      	str	r3, [r2, #8]
      break;
 800530c:	e7d4      	b.n	80052b8 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 800530e:	f033 0110 	bics.w	r1, r3, #16
 8005312:	d1d1      	bne.n	80052b8 <HAL_TIM_ConfigClockSource+0x64>
 8005314:	e7de      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x80>
  tmpccer = TIMx->CCER;
 8005316:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005318:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800531a:	684c      	ldr	r4, [r1, #4]
 800531c:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800531e:	f026 0601 	bic.w	r6, r6, #1
 8005322:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005324:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005326:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800532a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800532e:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8005332:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8005334:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8005336:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8005338:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800533a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800533e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8005342:	6093      	str	r3, [r2, #8]
}
 8005344:	e7b8      	b.n	80052b8 <HAL_TIM_ConfigClockSource+0x64>
  __HAL_LOCK(htim);
 8005346:	2002      	movs	r0, #2
}
 8005348:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800534a:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800534c:	684d      	ldr	r5, [r1, #4]
 800534e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005350:	f024 0410 	bic.w	r4, r4, #16
 8005354:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005356:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8005358:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800535a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800535e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005362:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005366:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800536a:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 800536c:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 800536e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005374:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8005378:	6093      	str	r3, [r2, #8]
}
 800537a:	e79d      	b.n	80052b8 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800537c:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8005380:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8005382:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005384:	432b      	orrs	r3, r5
 8005386:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800538a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800538e:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005390:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8005392:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005394:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005398:	6093      	str	r3, [r2, #8]
      break;
 800539a:	e78d      	b.n	80052b8 <HAL_TIM_ConfigClockSource+0x64>

0800539c <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 800539c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80053a0:	2a01      	cmp	r2, #1
 80053a2:	d049      	beq.n	8005438 <HAL_TIM_SlaveConfigSynchro+0x9c>
 80053a4:	4603      	mov	r3, r0
{
 80053a6:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80053a8:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 80053aa:	681c      	ldr	r4, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);
 80053b0:	2001      	movs	r0, #1
 80053b2:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80053b6:	e9d1 6500 	ldrd	r6, r5, [r1]
  tmpsmcr = htim->Instance->SMCR;
 80053ba:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80053bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80053c0:	432a      	orrs	r2, r5
  tmpsmcr &= ~TIM_SMCR_SMS;
 80053c2:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80053c6:	4332      	orrs	r2, r6
  switch (sSlaveConfig->InputTrigger)
 80053c8:	2d60      	cmp	r5, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 80053ca:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 80053cc:	d04d      	beq.n	800546a <HAL_TIM_SlaveConfigSynchro+0xce>
 80053ce:	d825      	bhi.n	800541c <HAL_TIM_SlaveConfigSynchro+0x80>
 80053d0:	2d40      	cmp	r5, #64	; 0x40
 80053d2:	d033      	beq.n	800543c <HAL_TIM_SlaveConfigSynchro+0xa0>
 80053d4:	2d50      	cmp	r5, #80	; 0x50
 80053d6:	d110      	bne.n	80053fa <HAL_TIM_SlaveConfigSynchro+0x5e>
  tmpccer = TIMx->CCER;
 80053d8:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053da:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053dc:	6888      	ldr	r0, [r1, #8]
 80053de:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053e0:	f026 0601 	bic.w	r6, r6, #1
 80053e4:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053e6:	69a2      	ldr	r2, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053e8:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053ec:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 80053f0:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053f2:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80053f6:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 80053f8:	6221      	str	r1, [r4, #32]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80053fa:	68e2      	ldr	r2, [r4, #12]
 80053fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005400:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005402:	68e2      	ldr	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8005404:	2501      	movs	r5, #1
  __HAL_UNLOCK(htim);
 8005406:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005408:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800540c:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 800540e:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005412:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
  return HAL_OK;
 8005416:	4608      	mov	r0, r1
}
 8005418:	bcf0      	pop	{r4, r5, r6, r7}
 800541a:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 800541c:	2d70      	cmp	r5, #112	; 0x70
 800541e:	d1ec      	bne.n	80053fa <HAL_TIM_SlaveConfigSynchro+0x5e>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005420:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
 8005424:	6908      	ldr	r0, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 8005426:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005428:	432a      	orrs	r2, r5
 800542a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800542e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005432:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8005434:	60a2      	str	r2, [r4, #8]
 8005436:	e7e0      	b.n	80053fa <HAL_TIM_SlaveConfigSynchro+0x5e>
  __HAL_LOCK(htim);
 8005438:	2002      	movs	r0, #2
}
 800543a:	4770      	bx	lr
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800543c:	2e05      	cmp	r6, #5
 800543e:	d00d      	beq.n	800545c <HAL_TIM_SlaveConfigSynchro+0xc0>
      tmpccer = htim->Instance->CCER;
 8005440:	6a25      	ldr	r5, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005442:	6a20      	ldr	r0, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005444:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005446:	f020 0001 	bic.w	r0, r0, #1
 800544a:	6220      	str	r0, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800544c:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800544e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005452:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8005456:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8005458:	6225      	str	r5, [r4, #32]
      break;
 800545a:	e7ce      	b.n	80053fa <HAL_TIM_SlaveConfigSynchro+0x5e>
    __HAL_UNLOCK(htim);
 800545c:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 800545e:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005466:	bcf0      	pop	{r4, r5, r6, r7}
 8005468:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800546a:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800546c:	688d      	ldr	r5, [r1, #8]
 800546e:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005470:	f020 0010 	bic.w	r0, r0, #16
 8005474:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005476:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8005478:	6a22      	ldr	r2, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800547a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800547e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005482:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8005486:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800548a:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800548c:	6222      	str	r2, [r4, #32]
 800548e:	e7b4      	b.n	80053fa <HAL_TIM_SlaveConfigSynchro+0x5e>

08005490 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005490:	4a2f      	ldr	r2, [pc, #188]	; (8005550 <TIM_Base_SetConfig+0xc0>)
  tmpcr1 = TIMx->CR1;
 8005492:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005494:	4290      	cmp	r0, r2
{
 8005496:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005498:	d043      	beq.n	8005522 <TIM_Base_SetConfig+0x92>
 800549a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800549e:	d034      	beq.n	800550a <TIM_Base_SetConfig+0x7a>
 80054a0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80054a4:	4290      	cmp	r0, r2
 80054a6:	d030      	beq.n	800550a <TIM_Base_SetConfig+0x7a>
 80054a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054ac:	4290      	cmp	r0, r2
 80054ae:	d02c      	beq.n	800550a <TIM_Base_SetConfig+0x7a>
 80054b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054b4:	4290      	cmp	r0, r2
 80054b6:	d028      	beq.n	800550a <TIM_Base_SetConfig+0x7a>
 80054b8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80054bc:	4290      	cmp	r0, r2
 80054be:	d030      	beq.n	8005522 <TIM_Base_SetConfig+0x92>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054c0:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80054c4:	4290      	cmp	r0, r2
 80054c6:	d024      	beq.n	8005512 <TIM_Base_SetConfig+0x82>
 80054c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054cc:	4290      	cmp	r0, r2
 80054ce:	d020      	beq.n	8005512 <TIM_Base_SetConfig+0x82>
 80054d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054d4:	4290      	cmp	r0, r2
 80054d6:	d01c      	beq.n	8005512 <TIM_Base_SetConfig+0x82>
 80054d8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80054dc:	4290      	cmp	r0, r2
 80054de:	d018      	beq.n	8005512 <TIM_Base_SetConfig+0x82>
 80054e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054e4:	4290      	cmp	r0, r2
 80054e6:	d014      	beq.n	8005512 <TIM_Base_SetConfig+0x82>
 80054e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054ec:	4290      	cmp	r0, r2
 80054ee:	d010      	beq.n	8005512 <TIM_Base_SetConfig+0x82>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054f0:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054f2:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 80054f4:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054fa:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80054fc:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 80054fe:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005500:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005502:	6282      	str	r2, [r0, #40]	; 0x28
}
 8005504:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 8005506:	6143      	str	r3, [r0, #20]
}
 8005508:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800550a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800550c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005510:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005512:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005514:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005516:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8005518:	680a      	ldr	r2, [r1, #0]
    tmpcr1 &= ~TIM_CR1_CKD;
 800551a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800551e:	4333      	orrs	r3, r6
 8005520:	e7e9      	b.n	80054f6 <TIM_Base_SetConfig+0x66>
    tmpcr1 |= Structure->CounterMode;
 8005522:	684d      	ldr	r5, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005524:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005526:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800552c:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 800552e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005532:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005534:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005538:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800553a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800553c:	688b      	ldr	r3, [r1, #8]
 800553e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005540:	680b      	ldr	r3, [r1, #0]
 8005542:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005544:	690b      	ldr	r3, [r1, #16]
 8005546:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005548:	2301      	movs	r3, #1
}
 800554a:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 800554c:	6143      	str	r3, [r0, #20]
}
 800554e:	4770      	bx	lr
 8005550:	40010000 	.word	0x40010000

08005554 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005554:	6a03      	ldr	r3, [r0, #32]
 8005556:	f023 0310 	bic.w	r3, r3, #16
 800555a:	6203      	str	r3, [r0, #32]
{
 800555c:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer = TIMx->CCER;
 800555e:	6a03      	ldr	r3, [r0, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005560:	4c13      	ldr	r4, [pc, #76]	; (80055b0 <TIM_OC2_SetConfig+0x5c>)
  tmpcr2 =  TIMx->CR2;
 8005562:	6847      	ldr	r7, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005564:	6982      	ldr	r2, [r0, #24]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005566:	688e      	ldr	r6, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005568:	680d      	ldr	r5, [r1, #0]
  tmpccer &= ~TIM_CCER_CC2P;
 800556a:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800556e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005572:	42a0      	cmp	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005574:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005578:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800557c:	d009      	beq.n	8005592 <TIM_OC2_SetConfig+0x3e>
 800557e:	4d0d      	ldr	r5, [pc, #52]	; (80055b4 <TIM_OC2_SetConfig+0x60>)
 8005580:	42a8      	cmp	r0, r5
 8005582:	d006      	beq.n	8005592 <TIM_OC2_SetConfig+0x3e>
  TIMx->CCR2 = OC_Config->Pulse;
 8005584:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005586:	6047      	str	r7, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005588:	6182      	str	r2, [r0, #24]
}
 800558a:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 800558c:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800558e:	6203      	str	r3, [r0, #32]
}
 8005590:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005592:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005594:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005598:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800559c:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055a0:	f427 6740 	bic.w	r7, r7, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055a4:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80055a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055aa:	ea47 0784 	orr.w	r7, r7, r4, lsl #2
 80055ae:	e7e9      	b.n	8005584 <TIM_OC2_SetConfig+0x30>
 80055b0:	40010000 	.word	0x40010000
 80055b4:	40010400 	.word	0x40010400

080055b8 <TIM_TI1_SetConfig>:
{
 80055b8:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055ba:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80055bc:	4e1b      	ldr	r6, [pc, #108]	; (800562c <TIM_TI1_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055be:	f024 0401 	bic.w	r4, r4, #1
 80055c2:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80055c4:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 80055c6:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80055c8:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80055ca:	d01d      	beq.n	8005608 <TIM_TI1_SetConfig+0x50>
 80055cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80055d0:	d01a      	beq.n	8005608 <TIM_TI1_SetConfig+0x50>
 80055d2:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80055d6:	42b0      	cmp	r0, r6
 80055d8:	d016      	beq.n	8005608 <TIM_TI1_SetConfig+0x50>
 80055da:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80055de:	42b0      	cmp	r0, r6
 80055e0:	d012      	beq.n	8005608 <TIM_TI1_SetConfig+0x50>
 80055e2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80055e6:	42b0      	cmp	r0, r6
 80055e8:	d00e      	beq.n	8005608 <TIM_TI1_SetConfig+0x50>
 80055ea:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80055ee:	42b0      	cmp	r0, r6
 80055f0:	d00a      	beq.n	8005608 <TIM_TI1_SetConfig+0x50>
 80055f2:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 80055f6:	42b0      	cmp	r0, r6
 80055f8:	d006      	beq.n	8005608 <TIM_TI1_SetConfig+0x50>
 80055fa:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80055fe:	42b0      	cmp	r0, r6
 8005600:	d002      	beq.n	8005608 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005602:	f044 0201 	orr.w	r2, r4, #1
 8005606:	e002      	b.n	800560e <TIM_TI1_SetConfig+0x56>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005608:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800560c:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800560e:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005610:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005614:	b2db      	uxtb	r3, r3
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005616:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800561a:	f001 010a 	and.w	r1, r1, #10
 800561e:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005620:	4313      	orrs	r3, r2
  TIMx->CCMR1 = tmpccmr1;
 8005622:	6183      	str	r3, [r0, #24]
}
 8005624:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 8005626:	6201      	str	r1, [r0, #32]
}
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	40010000 	.word	0x40010000

08005630 <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop

08005634 <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 8005634:	2800      	cmp	r0, #0
 8005636:	d055      	beq.n	80056e4 <HAL_TIMEx_HallSensor_Init+0xb0>
{
 8005638:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800563a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 800563e:	b088      	sub	sp, #32
 8005640:	460d      	mov	r5, r1
 8005642:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005644:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005648:	2b00      	cmp	r3, #0
 800564a:	d046      	beq.n	80056da <HAL_TIMEx_HallSensor_Init+0xa6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800564c:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800564e:	2302      	movs	r3, #2
 8005650:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005654:	f851 0b04 	ldr.w	r0, [r1], #4
 8005658:	f7ff ff1a 	bl	8005490 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800565c:	68ab      	ldr	r3, [r5, #8]
 800565e:	6829      	ldr	r1, [r5, #0]
 8005660:	6820      	ldr	r0, [r4, #0]
 8005662:	2203      	movs	r2, #3
 8005664:	f7ff ffa8 	bl	80055b8 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005668:	6820      	ldr	r0, [r4, #0]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800566a:	686e      	ldr	r6, [r5, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800566c:	6982      	ldr	r2, [r0, #24]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800566e:	68e9      	ldr	r1, [r5, #12]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005670:	f022 020c 	bic.w	r2, r2, #12
 8005674:	6182      	str	r2, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8005676:	6983      	ldr	r3, [r0, #24]
 8005678:	4333      	orrs	r3, r6
 800567a:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800567c:	6843      	ldr	r3, [r0, #4]
 800567e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005682:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005684:	6883      	ldr	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005686:	9102      	str	r1, [sp, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568c:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800568e:	6883      	ldr	r3, [r0, #8]
 8005690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005694:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005696:	6883      	ldr	r3, [r0, #8]
 8005698:	f023 0307 	bic.w	r3, r3, #7
 800569c:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800569e:	6883      	ldr	r3, [r0, #8]
 80056a0:	f043 0304 	orr.w	r3, r3, #4
 80056a4:	6083      	str	r3, [r0, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80056a6:	2500      	movs	r5, #0
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80056a8:	2370      	movs	r3, #112	; 0x70
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80056aa:	a901      	add	r1, sp, #4
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80056ac:	9301      	str	r3, [sp, #4]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80056ae:	e9cd 5505 	strd	r5, r5, [sp, #20]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056b2:	e9cd 5503 	strd	r5, r5, [sp, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80056b6:	9507      	str	r5, [sp, #28]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80056b8:	f7ff ff4c 	bl	8005554 <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80056c4:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80056c6:	685a      	ldr	r2, [r3, #4]
  htim->State = HAL_TIM_STATE_READY;
 80056c8:	2101      	movs	r1, #1
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80056ca:	f042 0250 	orr.w	r2, r2, #80	; 0x50
  return HAL_OK;
 80056ce:	4628      	mov	r0, r5
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80056d0:	605a      	str	r2, [r3, #4]
  htim->State = HAL_TIM_STATE_READY;
 80056d2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
}
 80056d6:	b008      	add	sp, #32
 80056d8:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80056da:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 80056de:	f7ff ffa7 	bl	8005630 <HAL_TIMEx_HallSensor_MspInit>
 80056e2:	e7b3      	b.n	800564c <HAL_TIMEx_HallSensor_Init+0x18>
    return HAL_ERROR;
 80056e4:	2001      	movs	r0, #1
}
 80056e6:	4770      	bx	lr

080056e8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d036      	beq.n	800575e <HAL_TIMEx_MasterConfigSynchronization+0x76>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056f0:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80056f2:	2202      	movs	r2, #2
{
 80056f4:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80056f6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80056fa:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056fc:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056fe:	4d19      	ldr	r5, [pc, #100]	; (8005764 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8005700:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005704:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005706:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 8005708:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 800570a:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800570c:	d019      	beq.n	8005742 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 800570e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005712:	d016      	beq.n	8005742 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8005714:	4a14      	ldr	r2, [pc, #80]	; (8005768 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d013      	beq.n	8005742 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 800571a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800571e:	4293      	cmp	r3, r2
 8005720:	d00f      	beq.n	8005742 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8005722:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005726:	4293      	cmp	r3, r2
 8005728:	d00b      	beq.n	8005742 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 800572a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800572e:	4293      	cmp	r3, r2
 8005730:	d007      	beq.n	8005742 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8005732:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8005736:	4293      	cmp	r3, r2
 8005738:	d003      	beq.n	8005742 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 800573a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800573e:	4293      	cmp	r3, r2
 8005740:	d104      	bne.n	800574c <HAL_TIMEx_MasterConfigSynchronization+0x64>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005742:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005744:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005748:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800574a:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800574c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800574e:	2201      	movs	r2, #1
 8005750:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005754:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8005758:	bc30      	pop	{r4, r5}
  return HAL_OK;
 800575a:	4618      	mov	r0, r3
}
 800575c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800575e:	2002      	movs	r0, #2
}
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	40010000 	.word	0x40010000
 8005768:	40000400 	.word	0x40000400

0800576c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800576c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005770:	2b01      	cmp	r3, #1
 8005772:	d022      	beq.n	80057ba <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
{
 8005774:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005776:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 800577a:	4604      	mov	r4, r0
 800577c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005780:	e9d1 2000 	ldrd	r2, r0, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005784:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005786:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800578a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800578c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005790:	e9d1 5004 	ldrd	r5, r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005794:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005796:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800579a:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800579c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057a0:	69c9      	ldr	r1, [r1, #28]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80057a2:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057a4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057aa:	430b      	orrs	r3, r1

  __HAL_UNLOCK(htim);
 80057ac:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80057ae:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80057b0:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c

  return HAL_OK;
 80057b4:	4608      	mov	r0, r1
}
 80057b6:	bc30      	pop	{r4, r5}
 80057b8:	4770      	bx	lr
  __HAL_LOCK(htim);
 80057ba:	2002      	movs	r0, #2
}
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop

080057c0 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057c0:	2800      	cmp	r0, #0
 80057c2:	f000 8098 	beq.w	80058f6 <HAL_UART_Init+0x136>
{
 80057c6:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057c8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80057cc:	4604      	mov	r4, r0
 80057ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f000 8087 	beq.w	80058e6 <HAL_UART_Init+0x126>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057d8:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057da:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 80057dc:	2224      	movs	r2, #36	; 0x24
 80057de:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80057e2:	68d8      	ldr	r0, [r3, #12]
 80057e4:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057e8:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 80057ec:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057ee:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057f0:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057f2:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80057f6:	4329      	orrs	r1, r5
 80057f8:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 80057fa:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057fc:	6965      	ldr	r5, [r4, #20]
 80057fe:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 8005800:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005804:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8005806:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800580a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800580c:	430a      	orrs	r2, r1
 800580e:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005810:	695a      	ldr	r2, [r3, #20]
 8005812:	69a1      	ldr	r1, [r4, #24]
 8005814:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005818:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800581a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800581e:	615a      	str	r2, [r3, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005820:	4a36      	ldr	r2, [pc, #216]	; (80058fc <HAL_UART_Init+0x13c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005822:	d037      	beq.n	8005894 <HAL_UART_Init+0xd4>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005824:	4293      	cmp	r3, r2
 8005826:	d032      	beq.n	800588e <HAL_UART_Init+0xce>
 8005828:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800582c:	4293      	cmp	r3, r2
 800582e:	d02e      	beq.n	800588e <HAL_UART_Init+0xce>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005830:	f7ff f8be 	bl	80049b0 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005834:	6863      	ldr	r3, [r4, #4]
 8005836:	4e32      	ldr	r6, [pc, #200]	; (8005900 <HAL_UART_Init+0x140>)
 8005838:	2219      	movs	r2, #25
 800583a:	fba0 0102 	umull	r0, r1, r0, r2
 800583e:	009a      	lsls	r2, r3, #2
 8005840:	0f9b      	lsrs	r3, r3, #30
 8005842:	f7fb f9c9 	bl	8000bd8 <__aeabi_uldivmod>
 8005846:	fba6 2500 	umull	r2, r5, r6, r0
 800584a:	096d      	lsrs	r5, r5, #5
 800584c:	2164      	movs	r1, #100	; 0x64
 800584e:	fb01 0215 	mls	r2, r1, r5, r0
 8005852:	0112      	lsls	r2, r2, #4
 8005854:	3232      	adds	r2, #50	; 0x32
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	fba6 1202 	umull	r1, r2, r6, r2
 800585c:	012d      	lsls	r5, r5, #4
 800585e:	eb05 1252 	add.w	r2, r5, r2, lsr #5
 8005862:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005864:	691a      	ldr	r2, [r3, #16]
 8005866:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800586a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800586c:	695a      	ldr	r2, [r3, #20]
 800586e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005872:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8005874:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005876:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8005878:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 800587a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800587e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005880:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005882:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005886:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
  return HAL_OK;
 800588a:	4628      	mov	r0, r5
}
 800588c:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 800588e:	f7ff f89f 	bl	80049d0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005892:	e7cf      	b.n	8005834 <HAL_UART_Init+0x74>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005894:	4293      	cmp	r3, r2
 8005896:	d02b      	beq.n	80058f0 <HAL_UART_Init+0x130>
 8005898:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800589c:	4293      	cmp	r3, r2
 800589e:	d027      	beq.n	80058f0 <HAL_UART_Init+0x130>
      pclk = HAL_RCC_GetPCLK1Freq();
 80058a0:	f7ff f886 	bl	80049b0 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058a4:	6862      	ldr	r2, [r4, #4]
 80058a6:	4e16      	ldr	r6, [pc, #88]	; (8005900 <HAL_UART_Init+0x140>)
 80058a8:	1892      	adds	r2, r2, r2
 80058aa:	f04f 0300 	mov.w	r3, #0
 80058ae:	f04f 0119 	mov.w	r1, #25
 80058b2:	415b      	adcs	r3, r3
 80058b4:	fba0 0101 	umull	r0, r1, r0, r1
 80058b8:	f7fb f98e 	bl	8000bd8 <__aeabi_uldivmod>
 80058bc:	fba6 2100 	umull	r2, r1, r6, r0
 80058c0:	094d      	lsrs	r5, r1, #5
 80058c2:	2164      	movs	r1, #100	; 0x64
 80058c4:	fb01 0215 	mls	r2, r1, r5, r0
 80058c8:	00d2      	lsls	r2, r2, #3
 80058ca:	3232      	adds	r2, #50	; 0x32
 80058cc:	fba6 1202 	umull	r1, r2, r6, r2
 80058d0:	f3c2 1142 	ubfx	r1, r2, #5, #3
 80058d4:	0912      	lsrs	r2, r2, #4
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 80058dc:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80058e0:	440a      	add	r2, r1
 80058e2:	609a      	str	r2, [r3, #8]
 80058e4:	e7be      	b.n	8005864 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 80058e6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80058ea:	f7fd fb8d 	bl	8003008 <HAL_UART_MspInit>
 80058ee:	e773      	b.n	80057d8 <HAL_UART_Init+0x18>
      pclk = HAL_RCC_GetPCLK2Freq();
 80058f0:	f7ff f86e 	bl	80049d0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058f4:	e7d6      	b.n	80058a4 <HAL_UART_Init+0xe4>
    return HAL_ERROR;
 80058f6:	2001      	movs	r0, #1
}
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	40011000 	.word	0x40011000
 8005900:	51eb851f 	.word	0x51eb851f

08005904 <HAL_UART_Transmit>:
{
 8005904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005908:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800590a:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800590e:	2820      	cmp	r0, #32
 8005910:	d17c      	bne.n	8005a0c <HAL_UART_Transmit+0x108>
    if ((pData == NULL) || (Size == 0U))
 8005912:	460e      	mov	r6, r1
 8005914:	2900      	cmp	r1, #0
 8005916:	d055      	beq.n	80059c4 <HAL_UART_Transmit+0xc0>
 8005918:	4615      	mov	r5, r2
 800591a:	2a00      	cmp	r2, #0
 800591c:	d052      	beq.n	80059c4 <HAL_UART_Transmit+0xc0>
 800591e:	4698      	mov	r8, r3
    __HAL_LOCK(huart);
 8005920:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8005924:	2b01      	cmp	r3, #1
 8005926:	d071      	beq.n	8005a0c <HAL_UART_Transmit+0x108>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005928:	2700      	movs	r7, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800592a:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 800592c:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800592e:	63e7      	str	r7, [r4, #60]	; 0x3c
    __HAL_LOCK(huart);
 8005930:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005934:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    tickstart = HAL_GetTick();
 8005938:	f7fe fb20 	bl	8003f7c <HAL_GetTick>
    huart->TxXferCount = Size;
 800593c:	84e5      	strh	r5, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800593e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8005940:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8005944:	b29b      	uxth	r3, r3
    huart->TxXferSize = Size;
 8005946:	84a5      	strh	r5, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8005948:	4607      	mov	r7, r0
    while (huart->TxXferCount > 0U)
 800594a:	6825      	ldr	r5, [r4, #0]
 800594c:	b1a3      	cbz	r3, 8005978 <HAL_UART_Transmit+0x74>
      huart->TxXferCount--;
 800594e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005950:	68a1      	ldr	r1, [r4, #8]
      huart->TxXferCount--;
 8005952:	3a01      	subs	r2, #1
 8005954:	b292      	uxth	r2, r2
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005956:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      huart->TxXferCount--;
 800595a:	84e2      	strh	r2, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800595c:	d024      	beq.n	80059a8 <HAL_UART_Transmit+0xa4>
 800595e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005962:	d132      	bne.n	80059ca <HAL_UART_Transmit+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005964:	682b      	ldr	r3, [r5, #0]
 8005966:	0618      	lsls	r0, r3, #24
 8005968:	d5fc      	bpl.n	8005964 <HAL_UART_Transmit+0x60>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800596a:	f816 3b01 	ldrb.w	r3, [r6], #1
 800596e:	606b      	str	r3, [r5, #4]
    while (huart->TxXferCount > 0U)
 8005970:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005972:	b29b      	uxth	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1ea      	bne.n	800594e <HAL_UART_Transmit+0x4a>
 8005978:	f1b8 3fff 	cmp.w	r8, #4294967295
 800597c:	d149      	bne.n	8005a12 <HAL_UART_Transmit+0x10e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800597e:	682b      	ldr	r3, [r5, #0]
 8005980:	065a      	lsls	r2, r3, #25
 8005982:	d5fc      	bpl.n	800597e <HAL_UART_Transmit+0x7a>
    huart->gState = HAL_UART_STATE_READY;
 8005984:	2320      	movs	r3, #32
 8005986:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 800598a:	2000      	movs	r0, #0
}
 800598c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005990:	682b      	ldr	r3, [r5, #0]
 8005992:	061b      	lsls	r3, r3, #24
 8005994:	d40e      	bmi.n	80059b4 <HAL_UART_Transmit+0xb0>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005996:	f1b8 0f00 	cmp.w	r8, #0
 800599a:	d022      	beq.n	80059e2 <HAL_UART_Transmit+0xde>
 800599c:	f7fe faee 	bl	8003f7c <HAL_GetTick>
 80059a0:	1bc0      	subs	r0, r0, r7
 80059a2:	4580      	cmp	r8, r0
 80059a4:	6825      	ldr	r5, [r4, #0]
 80059a6:	d31c      	bcc.n	80059e2 <HAL_UART_Transmit+0xde>
 80059a8:	f1b8 3fff 	cmp.w	r8, #4294967295
 80059ac:	d1f0      	bne.n	8005990 <HAL_UART_Transmit+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ae:	682b      	ldr	r3, [r5, #0]
 80059b0:	061a      	lsls	r2, r3, #24
 80059b2:	d5fc      	bpl.n	80059ae <HAL_UART_Transmit+0xaa>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80059b4:	8833      	ldrh	r3, [r6, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80059b6:	6922      	ldr	r2, [r4, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80059b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059bc:	606b      	str	r3, [r5, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80059be:	bb1a      	cbnz	r2, 8005a08 <HAL_UART_Transmit+0x104>
          pData += 2U;
 80059c0:	3602      	adds	r6, #2
 80059c2:	e7d5      	b.n	8005970 <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 80059c4:	2001      	movs	r0, #1
}
 80059c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ca:	682b      	ldr	r3, [r5, #0]
 80059cc:	0619      	lsls	r1, r3, #24
 80059ce:	d4cc      	bmi.n	800596a <HAL_UART_Transmit+0x66>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059d0:	f1b8 0f00 	cmp.w	r8, #0
 80059d4:	d005      	beq.n	80059e2 <HAL_UART_Transmit+0xde>
 80059d6:	f7fe fad1 	bl	8003f7c <HAL_GetTick>
 80059da:	1bc0      	subs	r0, r0, r7
 80059dc:	4580      	cmp	r8, r0
 80059de:	6825      	ldr	r5, [r4, #0]
 80059e0:	d2bd      	bcs.n	800595e <HAL_UART_Transmit+0x5a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059e2:	68eb      	ldr	r3, [r5, #12]
 80059e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059e8:	60eb      	str	r3, [r5, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ea:	696b      	ldr	r3, [r5, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80059ec:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ee:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 80059f2:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f4:	616b      	str	r3, [r5, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80059f6:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
        __HAL_UNLOCK(huart);
 80059fa:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 80059fe:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
      return HAL_TIMEOUT;
 8005a02:	2003      	movs	r0, #3
}
 8005a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          pData += 1U;
 8005a08:	3601      	adds	r6, #1
 8005a0a:	e7b1      	b.n	8005970 <HAL_UART_Transmit+0x6c>
    return HAL_BUSY;
 8005a0c:	2002      	movs	r0, #2
}
 8005a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a12:	682b      	ldr	r3, [r5, #0]
 8005a14:	065b      	lsls	r3, r3, #25
 8005a16:	d4b5      	bmi.n	8005984 <HAL_UART_Transmit+0x80>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a18:	f1b8 0f00 	cmp.w	r8, #0
 8005a1c:	d0e1      	beq.n	80059e2 <HAL_UART_Transmit+0xde>
 8005a1e:	f7fe faad 	bl	8003f7c <HAL_GetTick>
 8005a22:	1bc0      	subs	r0, r0, r7
 8005a24:	4580      	cmp	r8, r0
 8005a26:	6825      	ldr	r5, [r4, #0]
 8005a28:	d2a6      	bcs.n	8005978 <HAL_UART_Transmit+0x74>
 8005a2a:	e7da      	b.n	80059e2 <HAL_UART_Transmit+0xde>

08005a2c <VBS_GetAvBusVoltage_d>:
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
__weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
  return ( pHandle->AvBusVoltage_d );
}
 8005a2c:	88c0      	ldrh	r0, [r0, #6]
 8005a2e:	4770      	bx	lr

08005a30 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8005a30:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 8005a32:	8840      	ldrh	r0, [r0, #2]
 8005a34:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 8005a38:	0c00      	lsrs	r0, r0, #16
 8005a3a:	4770      	bx	lr

08005a3c <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 8005a3c:	b410      	push	{r4}
 8005a3e:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8005a40:	8802      	ldrh	r2, [r0, #0]
 8005a42:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 8005a44:	fb03 f403 	mul.w	r4, r3, r3
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8005a48:	fb02 f202 	mul.w	r2, r2, r2
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 8005a4c:	fb01 4401 	mla	r4, r1, r1, r4
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8005a50:	42a2      	cmp	r2, r4
{
 8005a52:	b085      	sub	sp, #20
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8005a54:	d219      	bcs.n	8005a8a <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 8005a56:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 8005a5a:	ebc2 6414 	rsb	r4, r2, r4, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 8005a5e:	b2e4      	uxtb	r4, r4
 8005a60:	eb00 0044 	add.w	r0, r0, r4, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 8005a64:	8882      	ldrh	r2, [r0, #4]
 8005a66:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8005a6a:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 8005a6c:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8005a70:	bfbc      	itt	lt
 8005a72:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 8005a76:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	bfbc      	itt	lt
 8005a7c:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 8005a80:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8005a82:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8005a86:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 8005a8a:	b289      	uxth	r1, r1
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	f361 000f 	bfi	r0, r1, #0, #16
 8005a94:	f363 401f 	bfi	r0, r3, #16, #16
}
 8005a98:	b005      	add	sp, #20
 8005a9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <DAC_SetChannelConfig>:
  */
__weak void DAC_SetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                              MC_Protocol_REG_t bVariable)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->bChannel_variable[bChannel] = bVariable;
 8005aa0:	4401      	add	r1, r0
 8005aa2:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
}
 8005aa6:	4770      	bx	lr

08005aa8 <DAC_GetChannelConfig>:
  *         MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t DAC_GetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->bChannel_variable[bChannel]);
 8005aa8:	4401      	add	r1, r0
}
 8005aaa:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 8005aae:	4770      	bx	lr

08005ab0 <DAC_SetUserChannelValue>:
  */
__weak void DAC_SetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber,
                              int16_t hValue)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->hUserValue[bUserChNumber] = hValue;
 8005ab0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8005ab4:	864a      	strh	r2, [r1, #50]	; 0x32
}
 8005ab6:	4770      	bx	lr

08005ab8 <DAC_GetUserChannelValue>:
  * @retval none.
  */
__weak int16_t DAC_GetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->hUserValue[bUserChNumber]);
 8005ab8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
}
 8005abc:	f9b1 0032 	ldrsh.w	r0, [r1, #50]	; 0x32
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop

08005ac4 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 8005ac8:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 8005aca:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 8005ace:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 8005ad2:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8005ad6:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
}
 8005ada:	4770      	bx	lr

08005adc <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8005adc:	b120      	cbz	r0, 8005ae8 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8005ade:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8005ae2:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8005ae4:	9b00      	ldr	r3, [sp, #0]
 8005ae6:	60c3      	str	r3, [r0, #12]
  }
}
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop

08005aec <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8005aec:	b190      	cbz	r0, 8005b14 <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 8005aee:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8005af0:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 8005af2:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8005af4:	b151      	cbz	r1, 8005b0c <FCP_CalcCRC+0x20>
 8005af6:	1c82      	adds	r2, r0, #2
 8005af8:	3901      	subs	r1, #1
 8005afa:	fa52 f181 	uxtab	r1, r2, r1
 8005afe:	3001      	adds	r0, #1
    {
      nSum += pFrame->Buffer[idx];
 8005b00:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8005b04:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8005b06:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 8005b08:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8005b0a:	d1f9      	bne.n	8005b00 <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 8005b0c:	eb03 2013 	add.w	r0, r3, r3, lsr #8
 8005b10:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  }

  return nCRC ;
}
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop

08005b18 <HALL_Init>:
            sensors.
  * @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component
  * @retval none
  */
__weak void HALL_Init( HALL_Handle_t * pHandle )
{
 8005b18:	b4f0      	push	{r4, r5, r6, r7}
  TIM_TypeDef * TIMx = pHandle->TIMx;

  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8005b1a:	8ac2      	ldrh	r2, [r0, #22]
                                     pHandle->_Super.bElToMecRatio;
 8005b1c:	7844      	ldrb	r4, [r0, #1]
  reliable speed */
  hMinReliableElSpeedUnit /= 4u;

  /* Adjustment factor: maximum measurable speed is x time greater than the
  maximum reliable speed */
  hMaxReliableElSpeedUnit *= 2u;
 8005b1e:	8a85      	ldrh	r5, [r0, #20]
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8005b20:	e9d0 130a 	ldrd	r1, r3, [r0, #40]	; 0x28
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8005b24:	fb12 f204 	smulbb	r2, r2, r4
  hMaxReliableElSpeedUnit *= 2u;
 8005b28:	fb15 f504 	smulbb	r5, r5, r4
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8005b2c:	b292      	uxth	r2, r2
  hMaxReliableElSpeedUnit *= 2u;
 8005b2e:	006d      	lsls	r5, r5, #1

  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8005b30:	0c0e      	lsrs	r6, r1, #16

  /* SW Init */
  if ( hMinReliableElSpeedUnit == 0u )
 8005b32:	2a03      	cmp	r2, #3
  hMaxReliableElSpeedUnit *= 2u;
 8005b34:	b2ad      	uxth	r5, r5
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8005b36:	f8a0 60c2 	strh.w	r6, [r0, #194]	; 0xc2
  if ( hMinReliableElSpeedUnit == 0u )
 8005b3a:	d968      	bls.n	8005c0e <HALL_Init+0xf6>
  else
  {
    /* Set accordingly the min reliable speed */
    /* 1000 comes from mS 
    * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
    pHandle->HallTimeout = 1000*SPEED_UNIT / ( 6u * hMinReliableElSpeedUnit );
 8005b3c:	0892      	lsrs	r2, r2, #2
 8005b3e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005b42:	f242 7410 	movw	r4, #10000	; 0x2710
 8005b46:	0052      	lsls	r2, r2, #1
 8005b48:	fbb4 f2f2 	udiv	r2, r4, r2
 8005b4c:	b294      	uxth	r4, r2
 8005b4e:	f8a0 40c0 	strh.w	r4, [r0, #192]	; 0xc0
  }

  /* Compute the prescaler to the closet value of the TimeOut (in mS )*/
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8005b52:	4f30      	ldr	r7, [pc, #192]	; (8005c14 <HALL_Init+0xfc>)
  /* Align MaxPeriod to a multiple of Overflow.*/
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;

  pHandle->SatSpeed = hMaxReliableElSpeedUnit;

  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8005b54:	4c30      	ldr	r4, [pc, #192]	; (8005c18 <HALL_Init+0x100>)
  pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8005b56:	f8a0 50b0 	strh.w	r5, [r0, #176]	; 0xb0
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8005b5a:	fb02 f206 	mul.w	r2, r2, r6
 8005b5e:	fba7 6202 	umull	r6, r2, r7, r2
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8005b62:	fba4 4101 	umull	r4, r1, r4, r1
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8005b66:	69c4      	ldr	r4, [r0, #28]
 8005b68:	8b46      	ldrh	r6, [r0, #26]
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8005b6a:	0992      	lsrs	r2, r2, #6
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8005b6c:	0889      	lsrs	r1, r1, #2

  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8005b6e:	eb01 0781 	add.w	r7, r1, r1, lsl #2
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8005b72:	fbb1 f1f6 	udiv	r1, r1, r6
 8005b76:	fb04 f101 	mul.w	r1, r4, r1
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 8005b7a:	0414      	lsls	r4, r2, #16
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8005b7c:	007f      	lsls	r7, r7, #1
                       / hMaxReliableElSpeedUnit);
 8005b7e:	fbb7 f5f5 	udiv	r5, r7, r5
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8005b82:	e9c0 452e 	strd	r4, r5, [r0, #184]	; 0xb8
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8005b86:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8005b8a:	699c      	ldr	r4, [r3, #24]

  /* Reset speed reliability */
  pHandle->SensorIsReliable = true;

  /* Set IC filter for Channel 1 (ICF1) */
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter) << 20);
 8005b8c:	f890 5048 	ldrb.w	r5, [r0, #72]	; 0x48
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8005b90:	f890 10c6 	ldrb.w	r1, [r0, #198]	; 0xc6
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8005b94:	f8a0 20ae 	strh.w	r2, [r0, #174]	; 0xae
 8005b98:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 8005b9c:	b292      	uxth	r2, r2
 8005b9e:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8005ba2:	fb06 f101 	mul.w	r1, r6, r1
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 8005ba6:	8c85      	ldrh	r5, [r0, #36]	; 0x24
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8005ba8:	fbb1 f1f5 	udiv	r1, r1, r5
  pHandle->SensorIsReliable = true;
 8005bac:	2501      	movs	r5, #1
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 8005bae:	3901      	subs	r1, #1
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8005bb0:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
  pHandle->SensorIsReliable = true;
 8005bb4:	f880 5049 	strb.w	r5, [r0, #73]	; 0x49
 8005bb8:	619c      	str	r4, [r3, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 8005bba:	629a      	str	r2, [r3, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005bbc:	695a      	ldr	r2, [r3, #20]
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
  LL_TIM_GenerateEvent_UPDATE ( TIMx );


  /* Clear the TIMx's pending flags */
  WRITE_REG (TIMx->SR, 0);
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	432a      	orrs	r2, r5
 8005bc2:	615a      	str	r2, [r3, #20]
 8005bc4:	6119      	str	r1, [r3, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	f042 0204 	orr.w	r2, r2, #4
 8005bcc:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8005bce:	68da      	ldr	r2, [r3, #12]
 8005bd0:	f042 0202 	orr.w	r2, r2, #2
 8005bd4:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	432a      	orrs	r2, r5
 8005bda:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->CNT, Counter);
 8005bdc:	6259      	str	r1, [r3, #36]	; 0x24
  SET_BIT(TIMx->CCER, Channels);
 8005bde:	6a1a      	ldr	r2, [r3, #32]
 8005be0:	432a      	orrs	r2, r5
 8005be2:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	432a      	orrs	r2, r5
 8005be8:	601a      	str	r2, [r3, #0]
  LL_TIM_CC_EnableChannel  ( TIMx, LL_TIM_CHANNEL_CH1 );
  LL_TIM_EnableCounter ( TIMx );


  /* Erase speed buffer */
  bSpeedBufferSize = pHandle->SpeedBufferSize;
 8005bea:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26

  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 8005bee:	b163      	cbz	r3, 8005c0a <HALL_Init+0xf2>
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	b2d9      	uxtb	r1, r3
 8005bf4:	f100 0350 	add.w	r3, r0, #80	; 0x50
  {
    pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8005bf8:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 8005bfc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005c00:	304c      	adds	r0, #76	; 0x4c
 8005c02:	f840 2f04 	str.w	r2, [r0, #4]!
  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 8005c06:	4298      	cmp	r0, r3
 8005c08:	d1fb      	bne.n	8005c02 <HALL_Init+0xea>
  }
}
 8005c0a:	bcf0      	pop	{r4, r5, r6, r7}
 8005c0c:	4770      	bx	lr
 8005c0e:	2296      	movs	r2, #150	; 0x96
    pHandle->HallTimeout = 150u;
 8005c10:	4614      	mov	r4, r2
 8005c12:	e79c      	b.n	8005b4e <HALL_Init+0x36>
 8005c14:	10624dd3 	.word	0x10624dd3
 8005c18:	aaaaaaab 	.word	0xaaaaaaab

08005c1c <HALL_Clear>:
* @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component*
* @retval none
*/
__weak void HALL_Clear( HALL_Handle_t * pHandle )
{
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8005c1c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8005c1e:	68d1      	ldr	r1, [r2, #12]

  /* Mask interrupts to insure a clean intialization */
  LL_TIM_DisableIT_CC1 ( TIMx );

  pHandle->RatioDec = false;
 8005c20:	2300      	movs	r3, #0
{
 8005c22:	b430      	push	{r4, r5}
 8005c24:	f021 0102 	bic.w	r1, r1, #2

  /* Clear speed error counter */
  pHandle->_Super.bSpeedErrorNumber = 0;
  
  /* Re-initialize partly the timer */
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
 8005c28:	f8b0 50ae 	ldrh.w	r5, [r0, #174]	; 0xae
 8005c2c:	60d1      	str	r1, [r2, #12]
  pHandle->SensorIsReliable = true;
 8005c2e:	2401      	movs	r4, #1
  pHandle->RatioDec = false;
 8005c30:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
  pHandle->SpeedFIFOIdx = 0u;
 8005c34:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
  pHandle->RatioInc = false;
 8005c38:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
  pHandle->_Super.bSpeedErrorNumber = 0;
 8005c3c:	7003      	strb	r3, [r0, #0]
  pHandle->FirstCapt = 0u;
 8005c3e:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  pHandle->Direction = POSITIVE;
 8005c42:	f880 40a2 	strb.w	r4, [r0, #162]	; 0xa2
  pHandle->BufferFilled = 0u;
 8005c46:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
  pHandle->_Super.hMecAccelUnitP = 0;
 8005c4a:	8243      	strh	r3, [r0, #18]
  pHandle->OVFCounter = 0u;
 8005c4c:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
  pHandle->CompSpeed = 0;
 8005c50:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
  pHandle->SensorIsReliable = true;
 8005c54:	f880 4049 	strb.w	r4, [r0, #73]	; 0x49
  WRITE_REG(TIMx->PSC, Prescaler);
 8005c58:	6295      	str	r5, [r2, #40]	; 0x28
  WRITE_REG(TIMx->CNT, Counter);
 8005c5a:	6253      	str	r3, [r2, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005c5c:	6813      	ldr	r3, [r2, #0]
 8005c5e:	4323      	orrs	r3, r4
 8005c60:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8005c62:	68d3      	ldr	r3, [r2, #12]
 8005c64:	f043 0302 	orr.w	r3, r3, #2
 8005c68:	60d3      	str	r3, [r2, #12]
* @retval none
*/
static void HALL_Init_Electrical_Angle( HALL_Handle_t * pHandle )
{

  if ( pHandle->SensorPlacement == DEGREES_120 )
 8005c6a:	f890 3020 	ldrb.w	r3, [r0, #32]
 8005c6e:	bb03      	cbnz	r3, 8005cb2 <HALL_Clear+0x96>
  {
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8005c70:	6c03      	ldr	r3, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8005c72:	6b82      	ldr	r2, [r0, #56]	; 0x38
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8005c74:	6919      	ldr	r1, [r3, #16]
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8005c76:	6c43      	ldr	r3, [r0, #68]	; 0x44
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8005c78:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005c7a:	6915      	ldr	r5, [r2, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005c7c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005c7e:	438b      	bics	r3, r1
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8005c80:	bf08      	it	eq
 8005c82:	2304      	moveq	r3, #4
 8005c84:	6911      	ldr	r1, [r2, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005c86:	6b42      	ldr	r2, [r0, #52]	; 0x34
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8005c88:	bf18      	it	ne
 8005c8a:	2300      	movne	r3, #0
 8005c8c:	43ac      	bics	r4, r5
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8005c8e:	bf0c      	ite	eq
 8005c90:	2402      	moveq	r4, #2
 8005c92:	2400      	movne	r4, #0
 8005c94:	4323      	orrs	r3, r4
 8005c96:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005c98:	bf08      	it	eq
 8005c9a:	f043 0301 	orreq.w	r3, r3, #1
 8005c9e:	1e5a      	subs	r2, r3, #1
 8005ca0:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
  }

  switch ( pHandle->HallState )
 8005ca4:	2a05      	cmp	r2, #5
 8005ca6:	d857      	bhi.n	8005d58 <HALL_Clear+0x13c>
 8005ca8:	e8df f002 	tbb	[pc, r2]
 8005cac:	42382e24 	.word	0x42382e24
 8005cb0:	1a4c      	.short	0x1a4c
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8005cb2:	6b83      	ldr	r3, [r0, #56]	; 0x38
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8005cb4:	6c02      	ldr	r2, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005cb6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005cb8:	6919      	ldr	r1, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8005cba:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005cbc:	6912      	ldr	r2, [r2, #16]
 8005cbe:	6925      	ldr	r5, [r4, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005cc0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005cc2:	4393      	bics	r3, r2
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8005cc4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8005cc6:	bf0c      	ite	eq
 8005cc8:	2302      	moveq	r3, #2
 8005cca:	2300      	movne	r3, #0
 8005ccc:	43ac      	bics	r4, r5
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005cce:	bf08      	it	eq
 8005cd0:	f043 0301 	orreq.w	r3, r3, #1
 8005cd4:	438a      	bics	r2, r1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8005cd6:	bf14      	ite	ne
 8005cd8:	2204      	movne	r2, #4
 8005cda:	2200      	moveq	r2, #0
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	e7de      	b.n	8005c9e <HALL_Clear+0x82>
    case STATE_2:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
                                              S16_60_PHASE_SHIFT / 2 );
      break;
    case STATE_6:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 8005ce0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005ce2:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8005ce6:	3b3f      	subs	r3, #63	; 0x3f
 8005ce8:	b21b      	sxth	r3, r3
 8005cea:	8083      	strh	r3, [r0, #4]
}
 8005cec:	bc30      	pop	{r4, r5}
      pHandle->SensorIsReliable = false;
      break;
  }

  /* Initialize the measured angle */
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005cee:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8005cf2:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8005cf4:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005cf6:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8005cfa:	333f      	adds	r3, #63	; 0x3f
 8005cfc:	b21b      	sxth	r3, r3
}
 8005cfe:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8005d00:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005d02:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8005d06:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8005d08:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005d0a:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 8005d0e:	3b2a      	subs	r3, #42	; 0x2a
 8005d10:	b21b      	sxth	r3, r3
}
 8005d12:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8005d14:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005d16:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8005d1a:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005d1c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005d1e:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 8005d22:	332a      	adds	r3, #42	; 0x2a
 8005d24:	b21b      	sxth	r3, r3
}
 8005d26:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005d28:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005d2a:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8005d2e:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8005d30:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005d32:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 8005d36:	3b15      	subs	r3, #21
 8005d38:	b21b      	sxth	r3, r3
}
 8005d3a:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8005d3c:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005d3e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8005d42:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8005d44:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005d46:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 8005d4a:	3315      	adds	r3, #21
 8005d4c:	b21b      	sxth	r3, r3
}
 8005d4e:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8005d50:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005d52:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8005d56:	4770      	bx	lr
      pHandle->SensorIsReliable = false;
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8005d5e:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
      break;
 8005d62:	e7c3      	b.n	8005cec <HALL_Clear+0xd0>

08005d64 <HALL_CalcElAngle>:
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8005d64:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 8005d68:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d013      	beq.n	8005d98 <HALL_CalcElAngle+0x34>
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8005d70:	8883      	ldrh	r3, [r0, #4]
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8005d72:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
{
 8005d76:	b410      	push	{r4}
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8005d78:	f8b0 40ac 	ldrh.w	r4, [r0, #172]	; 0xac
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8005d7c:	f8a0 20a0 	strh.w	r2, [r0, #160]	; 0xa0
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8005d80:	b292      	uxth	r2, r2
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8005d82:	4413      	add	r3, r2
 8005d84:	4423      	add	r3, r4
 8005d86:	b21b      	sxth	r3, r3
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8005d88:	440a      	add	r2, r1
 8005d8a:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8005d8e:	8083      	strh	r3, [r0, #4]
}
 8005d90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d94:	4618      	mov	r0, r3
 8005d96:	4770      	bx	lr
    pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 8005d98:	8883      	ldrh	r3, [r0, #4]
 8005d9a:	f8b0 20a0 	ldrh.w	r2, [r0, #160]	; 0xa0
 8005d9e:	4413      	add	r3, r2
 8005da0:	b21b      	sxth	r3, r3
 8005da2:	8083      	strh	r3, [r0, #4]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	4770      	bx	lr

08005da8 <HALL_CalcAvrgMecSpeedUnit>:
{
 8005da8:	b538      	push	{r3, r4, r5, lr}
 8005daa:	4604      	mov	r4, r0
  if ( pHandle->SensorIsReliable )
 8005dac:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
{
 8005db0:	460d      	mov	r5, r1
  if ( pHandle->SensorIsReliable )
 8005db2:	b180      	cbz	r0, 8005dd6 <HALL_CalcAvrgMecSpeedUnit+0x2e>
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8005db4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if ( LL_TIM_GetPrescaler ( TIMx ) >= pHandle->HALLMaxRatio )
 8005db6:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	; 0xae
  return (uint32_t)(READ_REG(TIMx->PSC));
 8005dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d811      	bhi.n	8005de4 <HALL_CalcAvrgMecSpeedUnit+0x3c>
      pHandle->_Super.hElSpeedDpp = 0;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	81e3      	strh	r3, [r4, #14]
      *hMecSpeedUnit = 0;
 8005dc4:	800b      	strh	r3, [r1, #0]
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, hMecSpeedUnit );
 8005dc6:	4629      	mov	r1, r5
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f000 ffff 	bl	8006dcc <SPD_IsMecSpeedReliable>
 8005dce:	f9b5 3000 	ldrsh.w	r3, [r5]
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8005dd2:	81a3      	strh	r3, [r4, #12]
}
 8005dd4:	bd38      	pop	{r3, r4, r5, pc}
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8005dd6:	78e3      	ldrb	r3, [r4, #3]
 8005dd8:	7023      	strb	r3, [r4, #0]
    *hMecSpeedUnit = 0;
 8005dda:	4603      	mov	r3, r0
    pHandle->_Super.hElSpeedDpp = 0;
 8005ddc:	81e0      	strh	r0, [r4, #14]
    *hMecSpeedUnit = 0;
 8005dde:	8008      	strh	r0, [r1, #0]
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8005de0:	81a3      	strh	r3, [r4, #12]
}
 8005de2:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 8005de4:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 8005de8:	81e3      	strh	r3, [r4, #14]
      if (  pHandle->AvrElSpeedDpp == 0 )
 8005dea:	b31b      	cbz	r3, 8005e34 <HALL_CalcAvrgMecSpeedUnit+0x8c>
        if (  pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8005dec:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d01d      	beq.n	8005e30 <HALL_CalcAvrgMecSpeedUnit+0x88>
          if (pHandle->HallMtpa == true)
 8005df4:	f894 20c7 	ldrb.w	r2, [r4, #199]	; 0xc7
 8005df8:	b9f2      	cbnz	r2, 8005e38 <HALL_CalcAvrgMecSpeedUnit+0x90>
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8005dfa:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
 8005dfe:	88a0      	ldrh	r0, [r4, #4]
              ( int32_t )( pHandle->PWMNbrPSamplingFreq ) );
 8005e00:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8005e04:	1a12      	subs	r2, r2, r0
 8005e06:	b212      	sxth	r2, r2
 8005e08:	f8a4 20a8 	strh.w	r2, [r4, #168]	; 0xa8
            pHandle->CompSpeed = ( int16_t )
 8005e0c:	fb92 f2f1 	sdiv	r2, r2, r1
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8005e10:	8b60      	ldrh	r0, [r4, #26]
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8005e12:	7861      	ldrb	r1, [r4, #1]
 8005e14:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 8005e18:	fb03 f300 	mul.w	r3, r3, r0
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8005e1c:	69e2      	ldr	r2, [r4, #28]
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8005e1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e22:	005b      	lsls	r3, r3, #1
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8005e24:	fb02 f201 	mul.w	r2, r2, r1
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8005e28:	fb93 f3f2 	sdiv	r3, r3, r2
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 8005e2c:	802b      	strh	r3, [r5, #0]
 8005e2e:	e7ca      	b.n	8005dc6 <HALL_CalcAvrgMecSpeedUnit+0x1e>
          *hMecSpeedUnit = ( int16_t )pHandle->SatSpeed;
 8005e30:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
 8005e34:	802b      	strh	r3, [r5, #0]
 8005e36:	e7c6      	b.n	8005dc6 <HALL_CalcAvrgMecSpeedUnit+0x1e>
            pHandle->CompSpeed = 0;
 8005e38:	2200      	movs	r2, #0
 8005e3a:	e7e9      	b.n	8005e10 <HALL_CalcAvrgMecSpeedUnit+0x68>

08005e3c <HALL_TIMx_CC_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 8005e3c:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d029      	beq.n	8005e98 <HALL_TIMx_CC_IRQHandler+0x5c>
{
 8005e44:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ( pHandle->SensorPlacement == DEGREES_120 )
 8005e46:	f890 3020 	ldrb.w	r3, [r0, #32]
    bPrevHallState = pHandle->HallState;
 8005e4a:	f890 10a6 	ldrb.w	r1, [r0, #166]	; 0xa6
    PrevDirection = pHandle->Direction;
 8005e4e:	f990 50a2 	ldrsb.w	r5, [r0, #162]	; 0xa2
    if ( pHandle->SensorPlacement == DEGREES_120 )
 8005e52:	b31b      	cbz	r3, 8005e9c <HALL_TIMx_CC_IRQHandler+0x60>
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 8005e54:	6b83      	ldr	r3, [r0, #56]	; 0x38
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 8005e56:	6c02      	ldr	r2, [r0, #64]	; 0x40
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 8005e58:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8005e5a:	691c      	ldr	r4, [r3, #16]
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 8005e5c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005e5e:	6912      	ldr	r2, [r2, #16]
 8005e60:	6937      	ldr	r7, [r6, #16]
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 8005e62:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8005e64:	4393      	bics	r3, r2
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 8005e66:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 8005e68:	bf0c      	ite	eq
 8005e6a:	2302      	moveq	r3, #2
 8005e6c:	2300      	movne	r3, #0
 8005e6e:	43be      	bics	r6, r7
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 8005e70:	bf08      	it	eq
 8005e72:	f043 0301 	orreq.w	r3, r3, #1
 8005e76:	43a2      	bics	r2, r4
 8005e78:	bf14      	ite	ne
 8005e7a:	2204      	movne	r2, #4
 8005e7c:	2200      	moveq	r2, #0
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	1e5a      	subs	r2, r3, #1
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8005e82:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005e84:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
    switch ( pHandle->HallState )
 8005e88:	2a05      	cmp	r2, #5
 8005e8a:	f200 8166 	bhi.w	800615a <HALL_TIMx_CC_IRQHandler+0x31e>
 8005e8e:	e8df f002 	tbb	[pc, r2]
 8005e92:	6373      	.short	0x6373
 8005e94:	1c364653 	.word	0x1c364653
}
 8005e98:	2000      	movs	r0, #0
 8005e9a:	4770      	bx	lr
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8005e9c:	6c03      	ldr	r3, [r0, #64]	; 0x40
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 8005e9e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005ea0:	691f      	ldr	r7, [r3, #16]
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8005ea2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005ea4:	6916      	ldr	r6, [r2, #16]
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 8005ea6:	6b04      	ldr	r4, [r0, #48]	; 0x30
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 8005ea8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005eaa:	6924      	ldr	r4, [r4, #16]
 8005eac:	43bb      	bics	r3, r7
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8005eae:	bf0c      	ite	eq
 8005eb0:	2304      	moveq	r3, #4
 8005eb2:	2300      	movne	r3, #0
 8005eb4:	43b2      	bics	r2, r6
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 8005eb6:	6b42      	ldr	r2, [r0, #52]	; 0x34
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 8005eb8:	bf0c      	ite	eq
 8005eba:	2602      	moveq	r6, #2
 8005ebc:	2600      	movne	r6, #0
 8005ebe:	4333      	orrs	r3, r6
 8005ec0:	43a2      	bics	r2, r4
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8005ec2:	bf08      	it	eq
 8005ec4:	f043 0301 	orreq.w	r3, r3, #1
 8005ec8:	e7da      	b.n	8005e80 <HALL_TIMx_CC_IRQHandler+0x44>
        if ( bPrevHallState == STATE_2 )
 8005eca:	2902      	cmp	r1, #2
 8005ecc:	d07f      	beq.n	8005fce <HALL_TIMx_CC_IRQHandler+0x192>
        else if ( bPrevHallState == STATE_4 )
 8005ece:	2904      	cmp	r1, #4
 8005ed0:	f000 80a1 	beq.w	8006016 <HALL_TIMx_CC_IRQHandler+0x1da>
    PrevDirection = pHandle->Direction;
 8005ed4:	4629      	mov	r1, r5
    if (pHandle->HallMtpa == true)
 8005ed6:	f890 30c7 	ldrb.w	r3, [r0, #199]	; 0xc7
 8005eda:	b113      	cbz	r3, 8005ee2 <HALL_TIMx_CC_IRQHandler+0xa6>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 8005edc:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
 8005ee0:	8083      	strh	r3, [r0, #4]
    if ( pHandle->FirstCapt == 0u )
 8005ee2:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f040 80a1 	bne.w	800602e <HALL_TIMx_CC_IRQHandler+0x1f2>
      pHandle->FirstCapt++;
 8005eec:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8005ef8:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 8005efa:	2000      	movs	r0, #0
 8005efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( bPrevHallState == STATE_4 )
 8005efe:	2904      	cmp	r1, #4
 8005f00:	d06f      	beq.n	8005fe2 <HALL_TIMx_CC_IRQHandler+0x1a6>
        else if ( bPrevHallState == STATE_1 )
 8005f02:	2901      	cmp	r1, #1
 8005f04:	d1e6      	bne.n	8005ed4 <HALL_TIMx_CC_IRQHandler+0x98>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8005f06:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005f08:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 8005f0c:	332a      	adds	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 8005f0e:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8005f10:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8005f14:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8005f18:	f04f 31ff 	mov.w	r1, #4294967295
 8005f1c:	e045      	b.n	8005faa <HALL_TIMx_CC_IRQHandler+0x16e>
        if ( bPrevHallState == STATE_6 )
 8005f1e:	2906      	cmp	r1, #6
 8005f20:	d06f      	beq.n	8006002 <HALL_TIMx_CC_IRQHandler+0x1c6>
        else if ( bPrevHallState == STATE_5 )
 8005f22:	2905      	cmp	r1, #5
 8005f24:	d1d6      	bne.n	8005ed4 <HALL_TIMx_CC_IRQHandler+0x98>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 8005f26:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005f28:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8005f2c:	22ff      	movs	r2, #255	; 0xff
 8005f2e:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 8005f32:	f04f 31ff 	mov.w	r1, #4294967295
 8005f36:	e038      	b.n	8005faa <HALL_TIMx_CC_IRQHandler+0x16e>
        if ( bPrevHallState == STATE_1 )
 8005f38:	2901      	cmp	r1, #1
 8005f3a:	d059      	beq.n	8005ff0 <HALL_TIMx_CC_IRQHandler+0x1b4>
        else if ( bPrevHallState == STATE_2 )
 8005f3c:	2902      	cmp	r1, #2
 8005f3e:	d1c9      	bne.n	8005ed4 <HALL_TIMx_CC_IRQHandler+0x98>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005f40:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005f42:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8005f46:	337f      	adds	r3, #127	; 0x7f
          pHandle->Direction = NEGATIVE;
 8005f48:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005f4a:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8005f4e:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005f52:	f04f 31ff 	mov.w	r1, #4294967295
 8005f56:	e028      	b.n	8005faa <HALL_TIMx_CC_IRQHandler+0x16e>
        if ( bPrevHallState == STATE_3 )
 8005f58:	2903      	cmp	r1, #3
 8005f5a:	d02e      	beq.n	8005fba <HALL_TIMx_CC_IRQHandler+0x17e>
        else if ( bPrevHallState == STATE_6 )
 8005f5c:	2906      	cmp	r1, #6
 8005f5e:	d1b9      	bne.n	8005ed4 <HALL_TIMx_CC_IRQHandler+0x98>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8005f60:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005f62:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 8005f66:	3b55      	subs	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 8005f68:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8005f6a:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8005f6e:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8005f72:	f04f 31ff 	mov.w	r1, #4294967295
 8005f76:	e018      	b.n	8005faa <HALL_TIMx_CC_IRQHandler+0x16e>
        if ( bPrevHallState == STATE_5 )
 8005f78:	2905      	cmp	r1, #5
 8005f7a:	d00d      	beq.n	8005f98 <HALL_TIMx_CC_IRQHandler+0x15c>
        else if ( bPrevHallState == STATE_3 )
 8005f7c:	2903      	cmp	r1, #3
 8005f7e:	d1a9      	bne.n	8005ed4 <HALL_TIMx_CC_IRQHandler+0x98>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8005f80:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005f82:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 8005f86:	3355      	adds	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 8005f88:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8005f8a:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8005f8e:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8005f92:	f04f 31ff 	mov.w	r1, #4294967295
 8005f96:	e008      	b.n	8005faa <HALL_TIMx_CC_IRQHandler+0x16e>
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8005f98:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005f9a:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 8005f9e:	332a      	adds	r3, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 8005fa0:	2101      	movs	r1, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8005fa2:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 8005fa6:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
    if (pHandle->Direction != PrevDirection)
 8005faa:	428d      	cmp	r5, r1
 8005fac:	d093      	beq.n	8005ed6 <HALL_TIMx_CC_IRQHandler+0x9a>
      pHandle->BufferFilled = 0 ;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0;
 8005fb4:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
 8005fb8:	e78d      	b.n	8005ed6 <HALL_TIMx_CC_IRQHandler+0x9a>
                                                  + S16_60_PHASE_SHIFT );
 8005fba:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005fbc:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8005fc0:	337f      	adds	r3, #127	; 0x7f
          pHandle->Direction = POSITIVE;
 8005fc2:	2101      	movs	r1, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT
 8005fc4:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 8005fc8:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT
 8005fcc:	e7ed      	b.n	8005faa <HALL_TIMx_CC_IRQHandler+0x16e>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8005fce:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005fd0:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 8005fd4:	3b55      	subs	r3, #85	; 0x55
          pHandle->Direction = POSITIVE;
 8005fd6:	2101      	movs	r1, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8005fd8:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 8005fdc:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8005fe0:	e7e3      	b.n	8005faa <HALL_TIMx_CC_IRQHandler+0x16e>
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 8005fe2:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005fe4:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 8005fe8:	2101      	movs	r1, #1
 8005fea:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 8005fee:	e7dc      	b.n	8005faa <HALL_TIMx_CC_IRQHandler+0x16e>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8005ff0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
          pHandle->Direction = POSITIVE;
 8005ff2:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8005ff6:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 8005ffa:	3355      	adds	r3, #85	; 0x55
 8005ffc:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
 8006000:	e7d3      	b.n	8005faa <HALL_TIMx_CC_IRQHandler+0x16e>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8006002:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8006004:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 8006008:	3b2a      	subs	r3, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 800600a:	2101      	movs	r1, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 800600c:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 8006010:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8006014:	e7c9      	b.n	8005faa <HALL_TIMx_CC_IRQHandler+0x16e>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8006016:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8006018:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 800601c:	3b2a      	subs	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 800601e:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8006020:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8006024:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8006028:	f04f 31ff 	mov.w	r1, #4294967295
 800602c:	e7bd      	b.n	8005faa <HALL_TIMx_CC_IRQHandler+0x16e>
      if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 800602e:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 8006032:	f890 5026 	ldrb.w	r5, [r0, #38]	; 0x26
 8006036:	42ab      	cmp	r3, r5
 8006038:	d205      	bcs.n	8006046 <HALL_TIMx_CC_IRQHandler+0x20a>
        pHandle->BufferFilled++;
 800603a:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 800603e:	3301      	adds	r3, #1
 8006040:	b2db      	uxtb	r3, r3
 8006042:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
 8006046:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 800604a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 800604c:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
      if ( pHandle->OVFCounter != 0u )
 8006050:	f890 704e 	ldrb.w	r7, [r0, #78]	; 0x4e
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8006054:	041b      	lsls	r3, r3, #16
      hPrscBuf =  LL_TIM_GetPrescaler ( TIMx );
 8006056:	b292      	uxth	r2, r2
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8006058:	fa13 f68c 	uxtah	r6, r3, ip
      if ( pHandle->OVFCounter != 0u )
 800605c:	f007 0eff 	and.w	lr, r7, #255	; 0xff
 8006060:	2f00      	cmp	r7, #0
 8006062:	d043      	beq.n	80060ec <HALL_TIMx_CC_IRQHandler+0x2b0>
        hAux = hPrscBuf + 1u;
 8006064:	3201      	adds	r2, #1
        if ( pHandle->RatioInc )
 8006066:	f890 704b 	ldrb.w	r7, [r0, #75]	; 0x4b
        wCaptBuf *= hAux;
 800606a:	b293      	uxth	r3, r2
 800606c:	fb06 f303 	mul.w	r3, r6, r3
        if ( pHandle->RatioInc )
 8006070:	2f00      	cmp	r7, #0
 8006072:	d045      	beq.n	8006100 <HALL_TIMx_CC_IRQHandler+0x2c4>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 8006074:	2200      	movs	r2, #0
 8006076:	f880 204b 	strb.w	r2, [r0, #75]	; 0x4b
        if ( wCaptBuf < pHandle->MinPeriod )
 800607a:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
 800607e:	429a      	cmp	r2, r3
 8006080:	d82f      	bhi.n	80060e2 <HALL_TIMx_CC_IRQHandler+0x2a6>
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8006082:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
          if ( wCaptBuf >= pHandle->MaxPeriod )
 8006086:	f8d0 60b8 	ldr.w	r6, [r0, #184]	; 0xb8
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 800608a:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
 800608e:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
          if ( wCaptBuf >= pHandle->MaxPeriod )
 8006092:	429e      	cmp	r6, r3
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8006094:	f8dc 7050 	ldr.w	r7, [ip, #80]	; 0x50
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 8006098:	bf88      	it	hi
 800609a:	fb01 f603 	mulhi.w	r6, r1, r3
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 800609e:	eba4 0407 	sub.w	r4, r4, r7
          pHandle->SpeedFIFOIdx++;
 80060a2:	f102 0201 	add.w	r2, r2, #1
 80060a6:	b2d2      	uxtb	r2, r2
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80060a8:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 80060ac:	bf8a      	itet	hi
 80060ae:	19a4      	addhi	r4, r4, r6
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = pHandle->MaxPeriod*pHandle->Direction; 
 80060b0:	434e      	mulls	r6, r1
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 80060b2:	f8c0 409c 	strhi.w	r4, [r0, #156]	; 0x9c
          if ( pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize )
 80060b6:	4295      	cmp	r5, r2
 80060b8:	f8cc 6050 	str.w	r6, [ip, #80]	; 0x50
            pHandle->SpeedFIFOIdx = 0u;
 80060bc:	bf08      	it	eq
 80060be:	2200      	moveq	r2, #0
 80060c0:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
          if ( pHandle->SensorIsReliable) 
 80060c4:	f890 2049 	ldrb.w	r2, [r0, #73]	; 0x49
 80060c8:	b332      	cbz	r2, 8006118 <HALL_TIMx_CC_IRQHandler+0x2dc>
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 80060ca:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
 80060ce:	4295      	cmp	r5, r2
 80060d0:	d938      	bls.n	8006144 <HALL_TIMx_CC_IRQHandler+0x308>
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 80060d2:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
 80060d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060da:	fb13 f101 	smulbb	r1, r3, r1
 80060de:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
      pHandle->OVFCounter = 0u;
 80060e2:	2300      	movs	r3, #0
 80060e4:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
}
 80060e8:	2000      	movs	r0, #0
 80060ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( pHandle->RatioDec ) /* and don't decrease it again */
 80060ec:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
 80060f0:	b1ab      	cbz	r3, 800611e <HALL_TIMx_CC_IRQHandler+0x2e2>
          hAux = hPrscBuf + 2u;
 80060f2:	3202      	adds	r2, #2
          wCaptBuf *= hAux;
 80060f4:	b292      	uxth	r2, r2
 80060f6:	fb06 f302 	mul.w	r3, r6, r2
          pHandle->RatioDec = false;
 80060fa:	f880 e04a 	strb.w	lr, [r0, #74]	; 0x4a
 80060fe:	e7bc      	b.n	800607a <HALL_TIMx_CC_IRQHandler+0x23e>
 8006100:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          if ( LL_TIM_GetPrescaler ( TIMx ) < pHandle->HALLMaxRatio ) /* Avoid OVF w/ very low freq */
 8006102:	f8b0 60ae 	ldrh.w	r6, [r0, #174]	; 0xae
 8006106:	4296      	cmp	r6, r2
 8006108:	d9b7      	bls.n	800607a <HALL_TIMx_CC_IRQHandler+0x23e>
 800610a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 800610c:	2601      	movs	r6, #1
            LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) + 1 ); /* To avoid OVF during speed decrease */
 800610e:	3201      	adds	r2, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8006110:	62a2      	str	r2, [r4, #40]	; 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 8006112:	f880 604b 	strb.w	r6, [r0, #75]	; 0x4b
 8006116:	e7b0      	b.n	800607a <HALL_TIMx_CC_IRQHandler+0x23e>
            pHandle->AvrElSpeedDpp = 0;
 8006118:	f8a0 20a4 	strh.w	r2, [r0, #164]	; 0xa4
 800611c:	e7e1      	b.n	80060e2 <HALL_TIMx_CC_IRQHandler+0x2a6>
          uint16_t hAux = hPrscBuf + 1u;
 800611e:	3201      	adds	r2, #1
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8006120:	fa1f fc8c 	uxth.w	ip, ip
          wCaptBuf *= hAux;
 8006124:	b292      	uxth	r2, r2
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8006126:	f5bc 4faa 	cmp.w	ip, #21760	; 0x5500
          wCaptBuf *= hAux;
 800612a:	fb06 f302 	mul.w	r3, r6, r2
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 800612e:	d2a4      	bcs.n	800607a <HALL_TIMx_CC_IRQHandler+0x23e>
  return (uint32_t)(READ_REG(TIMx->PSC));
 8006130:	6aa2      	ldr	r2, [r4, #40]	; 0x28
            if ( LL_TIM_GetPrescaler ( TIMx ) > 0u ) /* or prescaler cannot be further reduced */
 8006132:	2a00      	cmp	r2, #0
 8006134:	d0a1      	beq.n	800607a <HALL_TIMx_CC_IRQHandler+0x23e>
 8006136:	6aa2      	ldr	r2, [r4, #40]	; 0x28
              pHandle->RatioDec = true;
 8006138:	2601      	movs	r6, #1
              LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) - 1 ); /* Increase accuracy by decreasing prsc */
 800613a:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 800613c:	62a2      	str	r2, [r4, #40]	; 0x28
              pHandle->RatioDec = true;
 800613e:	f880 604a 	strb.w	r6, [r0, #74]	; 0x4a
 8006142:	e79a      	b.n	800607a <HALL_TIMx_CC_IRQHandler+0x23e>
              pHandle->AvrElSpeedDpp = ( int16_t )((int32_t) pHandle->PseudoFreqConv / ( pHandle->ElPeriodSum / pHandle->SpeedBufferSize )); /* Average value */
 8006144:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 8006148:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 800614c:	fb92 f5f5 	sdiv	r5, r2, r5
 8006150:	fb93 f3f5 	sdiv	r3, r3, r5
 8006154:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 8006158:	e7c3      	b.n	80060e2 <HALL_TIMx_CC_IRQHandler+0x2a6>
        pHandle->SensorIsReliable = false;
 800615a:	2300      	movs	r3, #0
 800615c:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
        break;
 8006160:	e6b8      	b.n	8005ed4 <HALL_TIMx_CC_IRQHandler+0x98>
 8006162:	bf00      	nop

08006164 <HALL_TIMx_UP_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 8006164:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 8006168:	b1e3      	cbz	r3, 80061a4 <HALL_TIMx_UP_IRQHandler+0x40>
{
 800616a:	b430      	push	{r4, r5}
    pHandle->OVFCounter++;
 800616c:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8006170:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8006172:	f8b0 40c0 	ldrh.w	r4, [r0, #192]	; 0xc0
 8006176:	f8b0 30c2 	ldrh.w	r3, [r0, #194]	; 0xc2
    pHandle->OVFCounter++;
 800617a:	3201      	adds	r2, #1
 800617c:	b2d2      	uxtb	r2, r2
 800617e:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
  return (uint32_t)(READ_REG(TIMx->PSC));
 8006182:	6a8d      	ldr	r5, [r1, #40]	; 0x28
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8006184:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 8006188:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800618c:	fb05 2202 	mla	r2, r5, r2, r2
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8006190:	fb03 f304 	mul.w	r3, r3, r4
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 8006194:	fbb3 f3f2 	udiv	r3, r3, r2
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8006198:	b29b      	uxth	r3, r3
 800619a:	4299      	cmp	r1, r3
 800619c:	d204      	bcs.n	80061a8 <HALL_TIMx_UP_IRQHandler+0x44>
}
 800619e:	2000      	movs	r0, #0
 80061a0:	bc30      	pop	{r4, r5}
 80061a2:	4770      	bx	lr
 80061a4:	2000      	movs	r0, #0
 80061a6:	4770      	bx	lr
  if ( pHandle->SensorPlacement == DEGREES_120 )
 80061a8:	f890 3020 	ldrb.w	r3, [r0, #32]
      pHandle->_Super.hElSpeedDpp = 0;
 80061ac:	2200      	movs	r2, #0
 80061ae:	81c2      	strh	r2, [r0, #14]
  if ( pHandle->SensorPlacement == DEGREES_120 )
 80061b0:	bb03      	cbnz	r3, 80061f4 <HALL_TIMx_UP_IRQHandler+0x90>
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 80061b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80061b4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80061b6:	6919      	ldr	r1, [r3, #16]
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 80061b8:	6c43      	ldr	r3, [r0, #68]	; 0x44
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80061ba:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80061bc:	6915      	ldr	r5, [r2, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80061be:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80061c0:	438b      	bics	r3, r1
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 80061c2:	bf08      	it	eq
 80061c4:	2304      	moveq	r3, #4
 80061c6:	6911      	ldr	r1, [r2, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80061c8:	6b42      	ldr	r2, [r0, #52]	; 0x34
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 80061ca:	bf18      	it	ne
 80061cc:	2300      	movne	r3, #0
 80061ce:	43ac      	bics	r4, r5
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80061d0:	bf0c      	ite	eq
 80061d2:	2402      	moveq	r4, #2
 80061d4:	2400      	movne	r4, #0
 80061d6:	4323      	orrs	r3, r4
 80061d8:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80061da:	bf08      	it	eq
 80061dc:	f043 0301 	orreq.w	r3, r3, #1
 80061e0:	1e5a      	subs	r2, r3, #1
 80061e2:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
  switch ( pHandle->HallState )
 80061e6:	2a05      	cmp	r2, #5
 80061e8:	d86a      	bhi.n	80062c0 <HALL_TIMx_UP_IRQHandler+0x15c>
 80061ea:	e8df f002 	tbb	[pc, r2]
 80061ee:	5b62      	.short	0x5b62
 80061f0:	1a464d54 	.word	0x1a464d54
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 80061f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 80061f6:	6c02      	ldr	r2, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80061f8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80061fa:	6919      	ldr	r1, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 80061fc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80061fe:	6912      	ldr	r2, [r2, #16]
 8006200:	6925      	ldr	r5, [r4, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8006202:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006204:	4393      	bics	r3, r2
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8006206:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8006208:	bf0c      	ite	eq
 800620a:	2302      	moveq	r3, #2
 800620c:	2300      	movne	r3, #0
 800620e:	43ac      	bics	r4, r5
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8006210:	bf08      	it	eq
 8006212:	f043 0301 	orreq.w	r3, r3, #1
 8006216:	438a      	bics	r2, r1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8006218:	bf14      	ite	ne
 800621a:	2204      	movne	r2, #4
 800621c:	2200      	moveq	r2, #0
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800621e:	4313      	orrs	r3, r2
 8006220:	e7de      	b.n	80061e0 <HALL_TIMx_UP_IRQHandler+0x7c>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 8006222:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8006224:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8006228:	3b3f      	subs	r3, #63	; 0x3f
 800622a:	b21b      	sxth	r3, r3
 800622c:	8083      	strh	r3, [r0, #4]
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 800622e:	f890 4026 	ldrb.w	r4, [r0, #38]	; 0x26
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8006232:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
      pHandle->OVFCounter = 0u;
 8006236:	2300      	movs	r3, #0
 8006238:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
      pHandle->FirstCapt = 0u;
 800623c:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8006240:	b17c      	cbz	r4, 8006262 <HALL_TIMx_UP_IRQHandler+0xfe>
 8006242:	1e62      	subs	r2, r4, #1
 8006244:	b2d3      	uxtb	r3, r2
        pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8006246:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
 800624a:	f100 0250 	add.w	r2, r0, #80	; 0x50
 800624e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006252:	f100 034c 	add.w	r3, r0, #76	; 0x4c
 8006256:	f843 1f04 	str.w	r1, [r3, #4]!
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 800625a:	429a      	cmp	r2, r3
 800625c:	d1fb      	bne.n	8006256 <HALL_TIMx_UP_IRQHandler+0xf2>
 800625e:	fb01 f404 	mul.w	r4, r1, r4
      pHandle->BufferFilled = 0 ;
 8006262:	2300      	movs	r3, #0
 8006264:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0;
 8006268:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 800626c:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
      pHandle->AvrElSpeedDpp = 0;
 8006270:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
}
 8006274:	bc30      	pop	{r4, r5}
 8006276:	2000      	movs	r0, #0
 8006278:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 800627a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800627c:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 8006280:	3315      	adds	r3, #21
 8006282:	b21b      	sxth	r3, r3
 8006284:	8083      	strh	r3, [r0, #4]
      break;
 8006286:	e7d2      	b.n	800622e <HALL_TIMx_UP_IRQHandler+0xca>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8006288:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800628a:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 800628e:	3b15      	subs	r3, #21
 8006290:	b21b      	sxth	r3, r3
 8006292:	8083      	strh	r3, [r0, #4]
      break;
 8006294:	e7cb      	b.n	800622e <HALL_TIMx_UP_IRQHandler+0xca>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8006296:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8006298:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 800629c:	332a      	adds	r3, #42	; 0x2a
 800629e:	b21b      	sxth	r3, r3
 80062a0:	8083      	strh	r3, [r0, #4]
      break;
 80062a2:	e7c4      	b.n	800622e <HALL_TIMx_UP_IRQHandler+0xca>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 80062a4:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80062a6:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 80062aa:	3b2a      	subs	r3, #42	; 0x2a
 80062ac:	b21b      	sxth	r3, r3
 80062ae:	8083      	strh	r3, [r0, #4]
      break;
 80062b0:	e7bd      	b.n	800622e <HALL_TIMx_UP_IRQHandler+0xca>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 80062b2:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80062b4:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80062b8:	333f      	adds	r3, #63	; 0x3f
 80062ba:	b21b      	sxth	r3, r3
 80062bc:	8083      	strh	r3, [r0, #4]
      break;
 80062be:	e7b6      	b.n	800622e <HALL_TIMx_UP_IRQHandler+0xca>
      pHandle->SensorIsReliable = false;
 80062c0:	2200      	movs	r2, #0
 80062c2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80062c6:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
      break;
 80062ca:	e7b0      	b.n	800622e <HALL_TIMx_UP_IRQHandler+0xca>

080062cc <ICS_GetPhaseCurrents>:
__weak void ICS_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  int32_t aux;
  uint16_t reg;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80062cc:	6f02      	ldr	r2, [r0, #112]	; 0x70

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  /* Ia = (hPhaseAOffset)-(PHASE_A_ADC_CHANNEL vale)  */
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 80062ce:	4b20      	ldr	r3, [pc, #128]	; (8006350 <ICS_GetPhaseCurrents+0x84>)
{
 80062d0:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80062d2:	68d4      	ldr	r4, [r2, #12]
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 80062d4:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
  CLEAR_BIT(TIMx->CCER, Channels);
 80062d6:	6a22      	ldr	r2, [r4, #32]

  /* Saturation of Ia */
  if ( aux < -INT16_MAX )
 80062d8:	4d1e      	ldr	r5, [pc, #120]	; (8006354 <ICS_GetPhaseCurrents+0x88>)
 80062da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062de:	6222      	str	r2, [r4, #32]
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 80062e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e2:	005b      	lsls	r3, r3, #1
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	1b9b      	subs	r3, r3, r6
  if ( aux < -INT16_MAX )
 80062e8:	42ab      	cmp	r3, r5
 80062ea:	da18      	bge.n	800631e <ICS_GetPhaseCurrents+0x52>
  {
    pStator_Currents->a = -INT16_MAX;
 80062ec:	800d      	strh	r5, [r1, #0]
 80062ee:	f248 0201 	movw	r2, #32769	; 0x8001
  {
    pStator_Currents->a = ( int16_t )aux;
  }

  /* Ib = (hPhaseBOffset)-(PHASE_B_ADC_CHANNEL value) */
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 80062f2:	4b19      	ldr	r3, [pc, #100]	; (8006358 <ICS_GetPhaseCurrents+0x8c>)
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 80062f4:	6e06      	ldr	r6, [r0, #96]	; 0x60
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 80062f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c

  /* Saturation of Ib */
  if ( aux < -INT16_MAX )
 80062f8:	4c16      	ldr	r4, [pc, #88]	; (8006354 <ICS_GetPhaseCurrents+0x88>)
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 80062fa:	005b      	lsls	r3, r3, #1
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	1b9b      	subs	r3, r3, r6
  if ( aux < -INT16_MAX )
 8006300:	42a3      	cmp	r3, r4
 8006302:	da15      	bge.n	8006330 <ICS_GetPhaseCurrents+0x64>
  {
    pStator_Currents->b = -INT16_MAX;
 8006304:	804c      	strh	r4, [r1, #2]
 8006306:	f248 0301 	movw	r3, #32769	; 0x8001
    pStator_Currents->b = ( int16_t )aux;
  }

  pHandle->_Super.Ia = pStator_Currents->a;
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800630a:	4413      	add	r3, r2
 800630c:	425b      	negs	r3, r3
  pHandle->_Super.Ia = pStator_Currents->a;
 800630e:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
  pHandle->_Super.Ib = pStator_Currents->b;
 8006312:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8006316:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c

}
 800631a:	bc70      	pop	{r4, r5, r6}
 800631c:	4770      	bx	lr
  else  if ( aux > INT16_MAX )
 800631e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006322:	db11      	blt.n	8006348 <ICS_GetPhaseCurrents+0x7c>
    pStator_Currents->a = INT16_MAX;
 8006324:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006328:	461a      	mov	r2, r3
 800632a:	800b      	strh	r3, [r1, #0]
 800632c:	461d      	mov	r5, r3
 800632e:	e7e0      	b.n	80062f2 <ICS_GetPhaseCurrents+0x26>
  else  if ( aux > INT16_MAX )
 8006330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006334:	db04      	blt.n	8006340 <ICS_GetPhaseCurrents+0x74>
    pStator_Currents->b = INT16_MAX;
 8006336:	f647 74ff 	movw	r4, #32767	; 0x7fff
 800633a:	4623      	mov	r3, r4
 800633c:	804c      	strh	r4, [r1, #2]
 800633e:	e7e4      	b.n	800630a <ICS_GetPhaseCurrents+0x3e>
    pStator_Currents->b = ( int16_t )aux;
 8006340:	b21c      	sxth	r4, r3
 8006342:	804c      	strh	r4, [r1, #2]
 8006344:	b29b      	uxth	r3, r3
 8006346:	e7e0      	b.n	800630a <ICS_GetPhaseCurrents+0x3e>
    pStator_Currents->a = ( int16_t )aux;
 8006348:	b21d      	sxth	r5, r3
 800634a:	800d      	strh	r5, [r1, #0]
 800634c:	b29a      	uxth	r2, r3
 800634e:	e7d0      	b.n	80062f2 <ICS_GetPhaseCurrents+0x26>
 8006350:	40012000 	.word	0x40012000
 8006354:	ffff8001 	.word	0xffff8001
 8006358:	40012100 	.word	0x40012100

0800635c <ICS_HFCurrentsCalibration>:
* @retval Always returns {0,0} in ab_t format
*/
__weak void ICS_HFCurrentsCalibration( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800635c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800635e:	68da      	ldr	r2, [r3, #12]
 8006360:	6a13      	ldr	r3, [r2, #32]
 8006362:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006366:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH4 );

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8006368:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 800636c:	2b0f      	cmp	r3, #15
 800636e:	d814      	bhi.n	800639a <ICS_HFCurrentsCalibration+0x3e>
  {
    pHandle->PhaseAOffset += ADC1->JDR1;
 8006370:	4a0b      	ldr	r2, [pc, #44]	; (80063a0 <ICS_HFCurrentsCalibration+0x44>)
 8006372:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
{
 8006374:	b430      	push	{r4, r5}
    pHandle->PhaseAOffset += ADC1->JDR1;
 8006376:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
    pHandle->PhaseBOffset += ADC2->JDR1;
 8006378:	4c0a      	ldr	r4, [pc, #40]	; (80063a4 <ICS_HFCurrentsCalibration+0x48>)
 800637a:	6e02      	ldr	r2, [r0, #96]	; 0x60
    pHandle->PhaseAOffset += ADC1->JDR1;
 800637c:	442b      	add	r3, r5
 800637e:	65c3      	str	r3, [r0, #92]	; 0x5c
    pHandle->PhaseBOffset += ADC2->JDR1;
 8006380:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    pHandle->PolarizationCounter++;
 8006382:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8006386:	3301      	adds	r3, #1
 8006388:	b2db      	uxtb	r3, r3
    pHandle->PhaseBOffset += ADC2->JDR1;
 800638a:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 800638c:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8006390:	2300      	movs	r3, #0
    pHandle->PhaseBOffset += ADC2->JDR1;
 8006392:	6602      	str	r2, [r0, #96]	; 0x60
  pStator_Currents->b = 0;
}
 8006394:	bc30      	pop	{r4, r5}
  pStator_Currents->a = 0;
 8006396:	600b      	str	r3, [r1, #0]
}
 8006398:	4770      	bx	lr
  pStator_Currents->a = 0;
 800639a:	2300      	movs	r3, #0
 800639c:	600b      	str	r3, [r1, #0]
 800639e:	4770      	bx	lr
 80063a0:	40012000 	.word	0x40012000
 80063a4:	40012100 	.word	0x40012100

080063a8 <ICS_Init>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80063a8:	6f01      	ldr	r1, [r0, #112]	; 0x70
 80063aa:	68cb      	ldr	r3, [r1, #12]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	f022 0201 	bic.w	r2, r2, #1
 80063b2:	601a      	str	r2, [r3, #0]
    if ( ( pHandle->pParams_str->EmergencyStop ) != DISABLE )
 80063b4:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
 80063b8:	b132      	cbz	r2, 80063c8 <ICS_Init+0x20>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80063ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063be:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80063c0:	68da      	ldr	r2, [r3, #12]
 80063c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063c6:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80063c8:	695a      	ldr	r2, [r3, #20]
 80063ca:	f042 0201 	orr.w	r2, r2, #1
 80063ce:	615a      	str	r2, [r3, #20]
    if ( pHandle->pParams_str->FreqRatio == 2u )
 80063d0:	790a      	ldrb	r2, [r1, #4]
 80063d2:	2a02      	cmp	r2, #2
 80063d4:	d034      	beq.n	8006440 <ICS_Init+0x98>
      if ( pHandle->pParams_str->InstanceNbr == 1u )
 80063d6:	780a      	ldrb	r2, [r1, #0]
 80063d8:	2a01      	cmp	r2, #1
 80063da:	d03d      	beq.n	8006458 <ICS_Init+0xb0>
  SET_BIT(TIMx->CCER, Channels);
 80063dc:	6a1a      	ldr	r2, [r3, #32]
    if ( pHandle->pParams_str->TIMx == TIM1 )
 80063de:	4921      	ldr	r1, [pc, #132]	; (8006464 <ICS_Init+0xbc>)
 80063e0:	f442 62aa 	orr.w	r2, r2, #1360	; 0x550
 80063e4:	f042 0205 	orr.w	r2, r2, #5
 80063e8:	621a      	str	r2, [r3, #32]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 80063ea:	4a1f      	ldr	r2, [pc, #124]	; (8006468 <ICS_Init+0xc0>)
 80063ec:	428b      	cmp	r3, r1
 80063ee:	68d3      	ldr	r3, [r2, #12]
 80063f0:	bf0c      	ite	eq
 80063f2:	f043 0301 	orreq.w	r3, r3, #1
 80063f6:	f043 0302 	orrne.w	r3, r3, #2
 80063fa:	60d3      	str	r3, [r2, #12]
      pHandle->ADCTriggerSet = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 80063fc:	bf08      	it	eq
 80063fe:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8006402:	4b1a      	ldr	r3, [pc, #104]	; (800646c <ICS_Init+0xc4>)
      pHandle->ADCTriggerSet = LL_ADC_INJ_TRIG_EXT_TIM8_CH4;
 8006404:	bf18      	it	ne
 8006406:	f44f 11f0 	movne.w	r1, #1966080	; 0x1e0000
 800640a:	6681      	str	r1, [r0, #104]	; 0x68
 800640c:	689a      	ldr	r2, [r3, #8]
 800640e:	4918      	ldr	r1, [pc, #96]	; (8006470 <ICS_Init+0xc8>)
 8006410:	f042 0201 	orr.w	r2, r2, #1
 8006414:	609a      	str	r2, [r3, #8]
 8006416:	688a      	ldr	r2, [r1, #8]
 8006418:	f042 0201 	orr.w	r2, r2, #1
 800641c:	608a      	str	r2, [r1, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800641e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8006420:	f06f 0104 	mvn.w	r1, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8006424:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006428:	62da      	str	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800642a:	6019      	str	r1, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800642c:	685a      	ldr	r2, [r3, #4]
    pHandle->OverCurrentFlag = false;
 800642e:	2100      	movs	r1, #0
 8006430:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006434:	605a      	str	r2, [r3, #4]
 8006436:	f880 106c 	strb.w	r1, [r0, #108]	; 0x6c
    pHandle->_Super.DTTest = 0u;
 800643a:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
}
 800643e:	4770      	bx	lr
      if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 8006440:	794a      	ldrb	r2, [r1, #5]
 8006442:	2a01      	cmp	r2, #1
 8006444:	d108      	bne.n	8006458 <ICS_Init+0xb0>
        if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8006446:	7a09      	ldrb	r1, [r1, #8]
 8006448:	2903      	cmp	r1, #3
 800644a:	d105      	bne.n	8006458 <ICS_Init+0xb0>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800644c:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800644e:	695a      	ldr	r2, [r3, #20]
 8006450:	f042 0201 	orr.w	r2, r2, #1
 8006454:	615a      	str	r2, [r3, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8006456:	6319      	str	r1, [r3, #48]	; 0x30
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8006458:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 800645c:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 800645e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006460:	e7bc      	b.n	80063dc <ICS_Init+0x34>
 8006462:	bf00      	nop
 8006464:	40010000 	.word	0x40010000
 8006468:	e0042000 	.word	0xe0042000
 800646c:	40012000 	.word	0x40012000
 8006470:	40012100 	.word	0x40012100

08006474 <ICS_TurnOnLowSides>:
  * @param pHdl ICS F4xx PWM Current Feedback Handle
  */
__weak void ICS_TurnOnLowSides( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006474:	6f01      	ldr	r1, [r0, #112]	; 0x70

  pHandle->_Super.TurnOnLowSidesAction = true;
 8006476:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006478:	68ca      	ldr	r2, [r1, #12]
  pHandle->_Super.TurnOnLowSidesAction = true;
 800647a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 800647e:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006480:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006484:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006486:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006488:	63d3      	str	r3, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800648a:	6110      	str	r0, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800648c:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0 );
  LL_TIM_OC_SetCompareCH2( TIMx, 0 );
  LL_TIM_OC_SetCompareCH3( TIMx, 0 );

  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET ) ;
 800648e:	07db      	lsls	r3, r3, #31
 8006490:	d5fc      	bpl.n	800648c <ICS_TurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006492:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8006494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006498:	6453      	str	r3, [r2, #68]	; 0x44

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800649a:	7c0b      	ldrb	r3, [r1, #16]
 800649c:	2b02      	cmp	r3, #2
 800649e:	d000      	beq.n	80064a2 <ICS_TurnOnLowSides+0x2e>
 80064a0:	4770      	bx	lr
{
 80064a2:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80064a4:	69c8      	ldr	r0, [r1, #28]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80064a6:	694d      	ldr	r5, [r1, #20]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80064a8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80064aa:	698e      	ldr	r6, [r1, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80064ac:	6a0c      	ldr	r4, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80064ae:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80064b0:	61ae      	str	r6, [r5, #24]
 80064b2:	6184      	str	r4, [r0, #24]
  }
}
 80064b4:	bc70      	pop	{r4, r5, r6}
 80064b6:	619a      	str	r2, [r3, #24]
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop

080064bc <ICS_SwitchOnPWM>:
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOnPWM( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80064bc:	6f01      	ldr	r1, [r0, #112]	; 0x70

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80064be:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80064c2:	68cb      	ldr	r3, [r1, #12]
{
 80064c4:	b4f0      	push	{r4, r5, r6, r7}
  pHandle->_Super.TurnOnLowSidesAction = false;
 80064c6:	2400      	movs	r4, #0
 80064c8:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80064cc:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80064ce:	f06f 0401 	mvn.w	r4, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 80064d2:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 80064d4:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80064d6:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80064d8:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80064da:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80064dc:	611c      	str	r4, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80064de:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80064e0:	07d2      	lsls	r2, r2, #31
 80064e2:	d5fc      	bpl.n	80064de <ICS_SwitchOnPWM+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80064e4:	f06f 0201 	mvn.w	r2, #1
 80064e8:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80064ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064f0:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80064f2:	7c0a      	ldrb	r2, [r1, #16]
 80064f4:	2a02      	cmp	r2, #2
 80064f6:	d008      	beq.n	800650a <ICS_SwitchOnPWM+0x4e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80064f8:	f06f 0201 	mvn.w	r2, #1
 80064fc:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80064fe:	68da      	ldr	r2, [r3, #12]
 8006500:	f042 0201 	orr.w	r2, r2, #1
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

}
 8006504:	bcf0      	pop	{r4, r5, r6, r7}
 8006506:	60da      	str	r2, [r3, #12]
 8006508:	4770      	bx	lr
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 800650a:	6a18      	ldr	r0, [r3, #32]
 800650c:	f240 5255 	movw	r2, #1365	; 0x555
 8006510:	4382      	bics	r2, r0
 8006512:	d00c      	beq.n	800652e <ICS_SwitchOnPWM+0x72>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006514:	698c      	ldr	r4, [r1, #24]
 8006516:	6a08      	ldr	r0, [r1, #32]
 8006518:	6a8a      	ldr	r2, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800651a:	694f      	ldr	r7, [r1, #20]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800651c:	69ce      	ldr	r6, [r1, #28]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800651e:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8006520:	0424      	lsls	r4, r4, #16
 8006522:	0400      	lsls	r0, r0, #16
 8006524:	0412      	lsls	r2, r2, #16
 8006526:	61bc      	str	r4, [r7, #24]
 8006528:	61b0      	str	r0, [r6, #24]
 800652a:	61aa      	str	r2, [r5, #24]
}
 800652c:	e7e4      	b.n	80064f8 <ICS_SwitchOnPWM+0x3c>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800652e:	694c      	ldr	r4, [r1, #20]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006530:	69c8      	ldr	r0, [r1, #28]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006532:	6a4a      	ldr	r2, [r1, #36]	; 0x24
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006534:	698d      	ldr	r5, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006536:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006538:	6a0c      	ldr	r4, [r1, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800653a:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800653c:	6184      	str	r4, [r0, #24]
 800653e:	6191      	str	r1, [r2, #24]
}
 8006540:	e7da      	b.n	80064f8 <ICS_SwitchOnPWM+0x3c>
 8006542:	bf00      	nop

08006544 <ICS_SwitchOffPWM>:
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006544:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8006546:	68da      	ldr	r2, [r3, #12]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006548:	68d1      	ldr	r1, [r2, #12]
 800654a:	f021 0101 	bic.w	r1, r1, #1
{
 800654e:	b4f0      	push	{r4, r5, r6, r7}
 8006550:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006552:	6c51      	ldr	r1, [r2, #68]	; 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 8006554:	2400      	movs	r4, #0
 8006556:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800655a:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
 800655e:	6451      	str	r1, [r2, #68]	; 0x44

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006560:	7c19      	ldrb	r1, [r3, #16]
 8006562:	2902      	cmp	r1, #2
 8006564:	d10b      	bne.n	800657e <ICS_SwitchOffPWM+0x3a>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006566:	699c      	ldr	r4, [r3, #24]
 8006568:	6a18      	ldr	r0, [r3, #32]
 800656a:	6a99      	ldr	r1, [r3, #40]	; 0x28
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800656c:	695f      	ldr	r7, [r3, #20]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800656e:	69de      	ldr	r6, [r3, #28]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006570:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8006572:	0424      	lsls	r4, r4, #16
 8006574:	0400      	lsls	r0, r0, #16
 8006576:	0409      	lsls	r1, r1, #16
 8006578:	61bc      	str	r4, [r7, #24]
 800657a:	61b0      	str	r0, [r6, #24]
 800657c:	61a9      	str	r1, [r5, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800657e:	f06f 0301 	mvn.w	r3, #1
 8006582:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006584:	6913      	ldr	r3, [r2, #16]
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8006586:	07db      	lsls	r3, r3, #31
 8006588:	d5fc      	bpl.n	8006584 <ICS_SwitchOffPWM+0x40>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800658a:	f06f 0301 	mvn.w	r3, #1
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  return;
}
 800658e:	bcf0      	pop	{r4, r5, r6, r7}
 8006590:	6113      	str	r3, [r2, #16]
 8006592:	4770      	bx	lr

08006594 <ICS_CurrentReadingCalibration>:
{
 8006594:	b538      	push	{r3, r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006596:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsCalibration;
 8006598:	4924      	ldr	r1, [pc, #144]	; (800662c <ICS_CurrentReadingCalibration+0x98>)
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800659a:	68dc      	ldr	r4, [r3, #12]
  pHandle->PhaseAOffset = 0u;
 800659c:	2200      	movs	r2, #0
  pHandle->PolarizationCounter = 0u;
 800659e:	f880 2066 	strb.w	r2, [r0, #102]	; 0x66
  CLEAR_BIT(TIMx->CCER, Channels);
 80065a2:	6a23      	ldr	r3, [r4, #32]
  pHandle->PhaseAOffset = 0u;
 80065a4:	65c2      	str	r2, [r0, #92]	; 0x5c
 80065a6:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
{
 80065aa:	4605      	mov	r5, r0
 80065ac:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseBOffset = 0u;
 80065b0:	6602      	str	r2, [r0, #96]	; 0x60
 80065b2:	6223      	str	r3, [r4, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsCalibration;
 80065b4:	6041      	str	r1, [r0, #4]
  ICS_SwitchOnPWM( &pHandle->_Super );
 80065b6:	f7ff ff81 	bl	80064bc <ICS_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 80065ba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80065bc:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80065c0:	7a1a      	ldrb	r2, [r3, #8]
 80065c2:	4620      	mov	r0, r4
 80065c4:	f105 0366 	add.w	r3, r5, #102	; 0x66
 80065c8:	f000 fa08 	bl	80069dc <waitForPolarizationEnd>
  ICS_SwitchOffPWM( &pHandle->_Super );
 80065cc:	4628      	mov	r0, r5
 80065ce:	f7ff ffb9 	bl	8006544 <ICS_SwitchOffPWM>
  pHandle->PhaseBOffset >>= 3;
 80065d2:	e9d5 0217 	ldrd	r0, r2, [r5, #92]	; 0x5c
 80065d6:	08d2      	lsrs	r2, r2, #3
  pHandle->PhaseAOffset >>= 3;
 80065d8:	08c0      	lsrs	r0, r0, #3
  pHandle->PhaseBOffset >>= 3;
 80065da:	e9c5 0217 	strd	r0, r2, [r5, #92]	; 0x5c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80065de:	69a2      	ldr	r2, [r4, #24]
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->Half_PWMPeriod );
 80065e0:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_GetPhaseCurrents;
 80065e4:	4912      	ldr	r1, [pc, #72]	; (8006630 <ICS_CurrentReadingCalibration+0x9c>)
 80065e6:	f022 0208 	bic.w	r2, r2, #8
 80065ea:	61a2      	str	r2, [r4, #24]
 80065ec:	69a2      	ldr	r2, [r4, #24]
 80065ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065f2:	61a2      	str	r2, [r4, #24]
 80065f4:	69e2      	ldr	r2, [r4, #28]
 80065f6:	f022 0208 	bic.w	r2, r2, #8
 80065fa:	61e2      	str	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80065fc:	6363      	str	r3, [r4, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80065fe:	63a3      	str	r3, [r4, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006600:	63e3      	str	r3, [r4, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8006602:	69a3      	ldr	r3, [r4, #24]
 8006604:	f043 0308 	orr.w	r3, r3, #8
 8006608:	61a3      	str	r3, [r4, #24]
 800660a:	69a3      	ldr	r3, [r4, #24]
 800660c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006610:	61a3      	str	r3, [r4, #24]
 8006612:	69e3      	ldr	r3, [r4, #28]
 8006614:	f043 0308 	orr.w	r3, r3, #8
 8006618:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 800661a:	6a23      	ldr	r3, [r4, #32]
 800661c:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8006620:	f043 0305 	orr.w	r3, r3, #5
 8006624:	6223      	str	r3, [r4, #32]
 8006626:	6069      	str	r1, [r5, #4]
}
 8006628:	bd38      	pop	{r3, r4, r5, pc}
 800662a:	bf00      	nop
 800662c:	0800635d 	.word	0x0800635d
 8006630:	080062cd 	.word	0x080062cd

08006634 <ICS_WriteTIMRegisters>:
*/
__weak uint16_t ICS_WriteTIMRegisters( PWMC_Handle_t * pHdl )
{
  uint16_t aux;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006634:	6f03      	ldr	r3, [r0, #112]	; 0x70

  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
  LL_TIM_OC_SetCompareCH2( TIMx, pHandle->_Super.CntPhB );
 8006636:	8e81      	ldrh	r1, [r0, #52]	; 0x34
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006638:	68db      	ldr	r3, [r3, #12]
  LL_TIM_OC_SetCompareCH3( TIMx, pHandle->_Super.CntPhC );
 800663a:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
{
 800663c:	b410      	push	{r4}
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
 800663e:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006640:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006642:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006644:	63da      	str	r2, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8006646:	6a18      	ldr	r0, [r3, #32]
  else
  {
    aux = MC_NO_ERROR;
  }
  return aux;
}
 8006648:	f85d 4b04 	ldr.w	r4, [sp], #4
 800664c:	f3c0 3000 	ubfx	r0, r0, #12, #1
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop

08006654 <ICS_TIMx_UP_IRQHandler>:
__weak void * ICS_TIMx_UP_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{
  uint32_t adcinjflags;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;

  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 8006654:	4922      	ldr	r1, [pc, #136]	; (80066e0 <ICS_TIMx_UP_IRQHandler+0x8c>)
 8006656:	680b      	ldr	r3, [r1, #0]
{
 8006658:	b4f0      	push	{r4, r5, r6, r7}
  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 800665a:	f003 030c 	and.w	r3, r3, #12
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800665e:	6f04      	ldr	r4, [r0, #112]	; 0x70

  if ( adcinjflags == CONV_STARTED )
 8006660:	2b08      	cmp	r3, #8
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006662:	68e2      	ldr	r2, [r4, #12]
  if ( adcinjflags == CONV_STARTED )
 8006664:	d026      	beq.n	80066b4 <ICS_TIMx_UP_IRQHandler+0x60>
    {
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
    }
    while ( adcinjflags != CONV_FINISHED );
  }
  else if ( adcinjflags == FLAGS_CLEARED )
 8006666:	b94b      	cbnz	r3, 800667c <ICS_TIMx_UP_IRQHandler+0x28>
  {
    while ( ( TIMx->CNT ) < ( pHandle->pParams_str->Tw ) )
 8006668:	8861      	ldrh	r1, [r4, #2]
 800666a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800666c:	428b      	cmp	r3, r1
 800666e:	d3fc      	bcc.n	800666a <ICS_TIMx_UP_IRQHandler+0x16>
    {}
    adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8006670:	491b      	ldr	r1, [pc, #108]	; (80066e0 <ICS_TIMx_UP_IRQHandler+0x8c>)
 8006672:	680b      	ldr	r3, [r1, #0]
 8006674:	f003 030c 	and.w	r3, r3, #12

    if ( adcinjflags == CONV_STARTED )
 8006678:	2b08      	cmp	r3, #8
 800667a:	d026      	beq.n	80066ca <ICS_TIMx_UP_IRQHandler+0x76>
  MODIFY_REG(ADCx->CR2, ADC_CR2_JEXTSEL, (TriggerSource & ADC_CR2_JEXTSEL));
 800667c:	4f18      	ldr	r7, [pc, #96]	; (80066e0 <ICS_TIMx_UP_IRQHandler+0x8c>)
 800667e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006680:	68b9      	ldr	r1, [r7, #8]
 8006682:	4e18      	ldr	r6, [pc, #96]	; (80066e4 <ICS_TIMx_UP_IRQHandler+0x90>)
 8006684:	f403 2570 	and.w	r5, r3, #983040	; 0xf0000
 8006688:	f421 2170 	bic.w	r1, r1, #983040	; 0xf0000
 800668c:	4329      	orrs	r1, r5
 800668e:	60b9      	str	r1, [r7, #8]
 8006690:	68b3      	ldr	r3, [r6, #8]
 8006692:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8006696:	432b      	orrs	r3, r5
 8006698:	60b3      	str	r3, [r6, #8]
  /* It re-initilize AD converter in run time when using dual MC */
  LL_ADC_INJ_SetTriggerSource(ADC1, pHandle->ADCTriggerSet);
  LL_ADC_INJ_SetTriggerSource(ADC2, pHandle->ADCTriggerSet);

  /* Change channels keeping equal to 1 element the sequencer lenght */
  ADC1->JSQR = ( uint32_t )( pHandle->pParams_str->IaChannel ) << 15;
 800669a:	79a3      	ldrb	r3, [r4, #6]
 800669c:	03db      	lsls	r3, r3, #15
 800669e:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC2->JSQR = ( uint32_t )( pHandle->pParams_str->IbChannel ) << 15;
 80066a0:	79e3      	ldrb	r3, [r4, #7]
 80066a2:	03db      	lsls	r3, r3, #15
 80066a4:	63b3      	str	r3, [r6, #56]	; 0x38
  SET_BIT(TIMx->CCER, Channels);
 80066a6:	6a13      	ldr	r3, [r2, #32]
 80066a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000

  LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH4 );

  return &( pHandle->_Super.Motor );
}
 80066ac:	3046      	adds	r0, #70	; 0x46
 80066ae:	bcf0      	pop	{r4, r5, r6, r7}
 80066b0:	6213      	str	r3, [r2, #32]
 80066b2:	4770      	bx	lr
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 80066b4:	680b      	ldr	r3, [r1, #0]
 80066b6:	f003 030c 	and.w	r3, r3, #12
    while ( adcinjflags != CONV_FINISHED );
 80066ba:	2b0c      	cmp	r3, #12
 80066bc:	d0de      	beq.n	800667c <ICS_TIMx_UP_IRQHandler+0x28>
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 80066be:	680b      	ldr	r3, [r1, #0]
 80066c0:	f003 030c 	and.w	r3, r3, #12
    while ( adcinjflags != CONV_FINISHED );
 80066c4:	2b0c      	cmp	r3, #12
 80066c6:	d1f5      	bne.n	80066b4 <ICS_TIMx_UP_IRQHandler+0x60>
 80066c8:	e7d8      	b.n	800667c <ICS_TIMx_UP_IRQHandler+0x28>
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 80066ca:	680b      	ldr	r3, [r1, #0]
 80066cc:	f003 030c 	and.w	r3, r3, #12
      while ( adcinjflags != CONV_FINISHED );
 80066d0:	2b0c      	cmp	r3, #12
 80066d2:	d0d3      	beq.n	800667c <ICS_TIMx_UP_IRQHandler+0x28>
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 80066d4:	680b      	ldr	r3, [r1, #0]
 80066d6:	f003 030c 	and.w	r3, r3, #12
      while ( adcinjflags != CONV_FINISHED );
 80066da:	2b0c      	cmp	r3, #12
 80066dc:	d1f5      	bne.n	80066ca <ICS_TIMx_UP_IRQHandler+0x76>
 80066de:	e7cd      	b.n	800667c <ICS_TIMx_UP_IRQHandler+0x28>
 80066e0:	40012000 	.word	0x40012000
 80066e4:	40012100 	.word	0x40012100

080066e8 <ICS_BRK_IRQHandler>:
 * @retval none
 */
__weak void * ICS_BRK_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80066e8:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80066ea:	7c1a      	ldrb	r2, [r3, #16]
 80066ec:	2a02      	cmp	r2, #2
 80066ee:	d004      	beq.n	80066fa <ICS_BRK_IRQHandler+0x12>
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
  }
  pHandle->OverCurrentFlag = true;
 80066f0:	2301      	movs	r3, #1
 80066f2:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c

  return &( pHandle->_Super.Motor );
}
 80066f6:	3046      	adds	r0, #70	; 0x46
 80066f8:	4770      	bx	lr
{
 80066fa:	b4f0      	push	{r4, r5, r6, r7}
 80066fc:	6a19      	ldr	r1, [r3, #32]
 80066fe:	699c      	ldr	r4, [r3, #24]
 8006700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006702:	695f      	ldr	r7, [r3, #20]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006704:	69de      	ldr	r6, [r3, #28]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006706:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8006708:	0424      	lsls	r4, r4, #16
 800670a:	0409      	lsls	r1, r1, #16
 800670c:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 800670e:	2301      	movs	r3, #1
 8006710:	61bc      	str	r4, [r7, #24]
}
 8006712:	3046      	adds	r0, #70	; 0x46
 8006714:	61b1      	str	r1, [r6, #24]
 8006716:	61aa      	str	r2, [r5, #24]
  pHandle->OverCurrentFlag = true;
 8006718:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
}
 800671c:	bcf0      	pop	{r4, r5, r6, r7}
 800671e:	4770      	bx	lr

08006720 <ICS_IsOverCurrentOccurred>:
__weak uint16_t ICS_IsOverCurrentOccurred( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  uint16_t retval = MC_NO_FAULTS;

  if ( pHandle->OverCurrentFlag == true )
 8006720:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 8006724:	b90b      	cbnz	r3, 800672a <ICS_IsOverCurrentOccurred+0xa>
  uint16_t retval = MC_NO_FAULTS;
 8006726:	4618      	mov	r0, r3
  {
    retval = MC_BREAK_IN;
    pHandle->OverCurrentFlag = false;
  }
  return retval;
}
 8006728:	4770      	bx	lr
    pHandle->OverCurrentFlag = false;
 800672a:	2300      	movs	r3, #0
 800672c:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
    retval = MC_BREAK_IN;
 8006730:	2040      	movs	r0, #64	; 0x40
 8006732:	4770      	bx	lr

08006734 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8006734:	b510      	push	{r4, lr}
 8006736:	f44f 7280 	mov.w	r2, #256	; 0x100
 800673a:	4604      	mov	r4, r0
 800673c:	2100      	movs	r1, #0
 800673e:	f001 f8c7 	bl	80078d0 <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8006742:	2300      	movs	r3, #0
 8006744:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8006748:	bd10      	pop	{r4, pc}
 800674a:	bf00      	nop

0800674c <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 800674c:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8006750:	1c53      	adds	r3, r2, #1
 8006752:	b29b      	uxth	r3, r3
{
 8006754:	b470      	push	{r4, r5, r6}
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8006756:	2b7f      	cmp	r3, #127	; 0x7f
{
 8006758:	4606      	mov	r6, r0
  {
    pHandle->hNextMeasBufferIndex = 0u;
 800675a:	bf88      	it	hi
 800675c:	2300      	movhi	r3, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 800675e:	f826 1012 	strh.w	r1, [r6, r2, lsl #1]
{
 8006762:	4608      	mov	r0, r1
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8006764:	f8a6 2102 	strh.w	r2, [r6, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8006768:	f8a6 3100 	strh.w	r3, [r6, #256]	; 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800676c:	f106 05fe 	add.w	r5, r6, #254	; 0xfe
 8006770:	1eb3      	subs	r3, r6, #2
  int32_t wAux = 0;
 8006772:	2200      	movs	r2, #0
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8006774:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8006778:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 800677a:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800677c:	d1fa      	bne.n	8006774 <MPM_CalcElMotorPower+0x28>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 800677e:	2a00      	cmp	r2, #0
 8006780:	bfb8      	it	lt
 8006782:	327f      	addlt	r2, #127	; 0x7f
 8006784:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8006786:	f8a6 2104 	strh.w	r2, [r6, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 800678a:	bc70      	pop	{r4, r5, r6}
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop

08006790 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8006790:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop

08006798 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8006798:	8a03      	ldrh	r3, [r0, #16]
 800679a:	8b42      	ldrh	r2, [r0, #26]
 800679c:	429a      	cmp	r2, r3
 800679e:	d306      	bcc.n	80067ae <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 80067a0:	8b82      	ldrh	r2, [r0, #28]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d901      	bls.n	80067aa <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 80067a6:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 80067a8:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 80067aa:	8ac0      	ldrh	r0, [r0, #22]
 80067ac:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 80067ae:	2008      	movs	r0, #8
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop

080067b4 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 80067b4:	2300      	movs	r3, #0
 80067b6:	8203      	strh	r3, [r0, #16]
}
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop

080067bc <NTC_Init>:
{
 80067bc:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 80067be:	7803      	ldrb	r3, [r0, #0]
{
 80067c0:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 80067c2:	b123      	cbz	r3, 80067ce <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 80067c4:	8a43      	ldrh	r3, [r0, #18]
 80067c6:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 80067c8:	2200      	movs	r2, #0
 80067ca:	82c2      	strh	r2, [r0, #22]
}
 80067cc:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 80067ce:	3004      	adds	r0, #4
 80067d0:	f7fc f924 	bl	8002a1c <RCM_RegisterRegConv>
 80067d4:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 80067d8:	4620      	mov	r0, r4
 80067da:	f7ff ffeb 	bl	80067b4 <NTC_Clear>
}
 80067de:	bd10      	pop	{r4, pc}

080067e0 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 80067e0:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 80067e2:	7803      	ldrb	r3, [r0, #0]
{
 80067e4:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 80067e6:	b113      	cbz	r3, 80067ee <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 80067e8:	2000      	movs	r0, #0
 80067ea:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 80067ec:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80067ee:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 80067f2:	f7fc f9e5 	bl	8002bc0 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 80067f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067fa:	4298      	cmp	r0, r3
 80067fc:	d007      	beq.n	800680e <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 80067fe:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8006800:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8006802:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 8006804:	fb01 0003 	mla	r0, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8006808:	fbb0 f0f2 	udiv	r0, r0, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 800680c:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 800680e:	4620      	mov	r0, r4
 8006810:	f7ff ffc2 	bl	8006798 <NTC_SetFaultState>
 8006814:	82e0      	strh	r0, [r4, #22]
}
 8006816:	bd10      	pop	{r4, pc}

08006818 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8006818:	7803      	ldrb	r3, [r0, #0]
 800681a:	b983      	cbnz	r3, 800683e <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 800681c:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 800681e:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8006820:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8006824:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8006826:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 8006828:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 800682c:	2b00      	cmp	r3, #0
 800682e:	bfbc      	itt	lt
 8006830:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8006834:	33ff      	addlt	r3, #255	; 0xff
 8006836:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 800683a:	b200      	sxth	r0, r0
 800683c:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 800683e:	8a80      	ldrh	r0, [r0, #20]
}
 8006840:	b200      	sxth	r0, r0
 8006842:	4770      	bx	lr

08006844 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8006844:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8006846:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8006848:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 800684a:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 800684c:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 800684e:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8006850:	6283      	str	r3, [r0, #40]	; 0x28
}
 8006852:	4770      	bx	lr

08006854 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8006854:	8081      	strh	r1, [r0, #4]
}
 8006856:	4770      	bx	lr

08006858 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8006858:	80c1      	strh	r1, [r0, #6]
}
 800685a:	4770      	bx	lr

0800685c <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 800685c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop

08006864 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8006864:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop

0800686c <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 800686c:	6081      	str	r1, [r0, #8]

  return;
}
 800686e:	4770      	bx	lr

08006870 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8006870:	8b00      	ldrh	r0, [r0, #24]
 8006872:	4770      	bx	lr

08006874 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8006874:	8b40      	ldrh	r0, [r0, #26]
 8006876:	4770      	bx	lr

08006878 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8006878:	8441      	strh	r1, [r0, #34]	; 0x22
}
 800687a:	4770      	bx	lr

0800687c <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 800687c:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop

08006884 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006884:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8006888:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
{
 800688c:	b470      	push	{r4, r5, r6}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800688e:	fb01 f303 	mul.w	r3, r1, r3
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8006892:	f9b0 4014 	ldrsh.w	r4, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8006896:	f9b0 5016 	ldrsh.w	r5, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 800689a:	b162      	cbz	r2, 80068b6 <PI_Controller+0x32>
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 800689c:	6886      	ldr	r6, [r0, #8]
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 800689e:	fb01 f102 	mul.w	r1, r1, r2

    if ( wIntegral_sum_temp < 0 )
 80068a2:	1872      	adds	r2, r6, r1
 80068a4:	d420      	bmi.n	80068e8 <PI_Controller+0x64>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 80068a6:	2e00      	cmp	r6, #0
 80068a8:	db29      	blt.n	80068fe <PI_Controller+0x7a>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 80068aa:	68c1      	ldr	r1, [r0, #12]
 80068ac:	4291      	cmp	r1, r2
 80068ae:	db03      	blt.n	80068b8 <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 80068b0:	6901      	ldr	r1, [r0, #16]
 80068b2:	4291      	cmp	r1, r2
 80068b4:	dc00      	bgt.n	80068b8 <PI_Controller+0x34>
 80068b6:	4611      	mov	r1, r2
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 80068b8:	8b86      	ldrh	r6, [r0, #28]
 80068ba:	8bc2      	ldrh	r2, [r0, #30]
 80068bc:	4133      	asrs	r3, r6
 80068be:	fa41 f202 	asr.w	r2, r1, r2
 80068c2:	4413      	add	r3, r2
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 80068c4:	429c      	cmp	r4, r3
 80068c6:	da05      	bge.n	80068d4 <PI_Controller+0x50>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 80068c8:	1ae3      	subs	r3, r4, r3
 80068ca:	4419      	add	r1, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 80068cc:	6081      	str	r1, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 80068ce:	4620      	mov	r0, r4
 80068d0:	bc70      	pop	{r4, r5, r6}
 80068d2:	4770      	bx	lr
  else if ( wOutput_32 < hLowerOutputLimit )
 80068d4:	429d      	cmp	r5, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
 80068d6:	bfc9      	itett	gt
 80068d8:	1aeb      	subgt	r3, r5, r3
 80068da:	b21c      	sxthle	r4, r3
    wOutput_32 = hLowerOutputLimit;
 80068dc:	462c      	movgt	r4, r5
  pHandle->wIntegralTerm += wDischarge;
 80068de:	18c9      	addgt	r1, r1, r3
 80068e0:	6081      	str	r1, [r0, #8]
}
 80068e2:	4620      	mov	r0, r4
 80068e4:	bc70      	pop	{r4, r5, r6}
 80068e6:	4770      	bx	lr
      if ( pHandle->wIntegralTerm > 0 )
 80068e8:	2e00      	cmp	r6, #0
 80068ea:	ddde      	ble.n	80068aa <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 80068ec:	2900      	cmp	r1, #0
 80068ee:	dddc      	ble.n	80068aa <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 80068f0:	68c1      	ldr	r1, [r0, #12]
 80068f2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80068f6:	4291      	cmp	r1, r2
 80068f8:	d1de      	bne.n	80068b8 <PI_Controller+0x34>
          wIntegral_sum_temp = INT32_MAX;
 80068fa:	460a      	mov	r2, r1
 80068fc:	e7db      	b.n	80068b6 <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 80068fe:	4e03      	ldr	r6, [pc, #12]	; (800690c <PI_Controller+0x88>)
 8006900:	ea32 0221 	bics.w	r2, r2, r1, asr #32
 8006904:	bf28      	it	cs
 8006906:	4632      	movcs	r2, r6
 8006908:	e7cf      	b.n	80068aa <PI_Controller+0x26>
 800690a:	bf00      	nop
 800690c:	80000001 	.word	0x80000001

08006910 <PQD_CalcElMotorPower>:
  *         motor power.
  * @param power handle.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{
 8006910:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006912:	e9d0 4242 	ldrd	r4, r2, [r0, #264]	; 0x108
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8006916:	8b11      	ldrh	r1, [r2, #24]
 8006918:	89d3      	ldrh	r3, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 800691a:	8995      	ldrh	r5, [r2, #12]
 800691c:	8ad2      	ldrh	r2, [r2, #22]
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 800691e:	fb13 f301 	smulbb	r3, r3, r1
{
 8006922:	4606      	mov	r6, r0
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006924:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8006928:	fb15 3502 	smlabb	r5, r5, r2, r3
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 800692c:	f7ff f880 	bl	8005a30 <VBS_GetAvBusVoltage_V>
 8006930:	fb04 f200 	mul.w	r2, r4, r0
  wAux /= 65536;
 8006934:	1e2c      	subs	r4, r5, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006936:	480e      	ldr	r0, [pc, #56]	; (8006970 <PQD_CalcElMotorPower+0x60>)

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8006938:	490e      	ldr	r1, [pc, #56]	; (8006974 <PQD_CalcElMotorPower+0x64>)
  wAux /= 65536;
 800693a:	bfb8      	it	lt
 800693c:	f504 447f 	addlt.w	r4, r4, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006940:	fb80 3002 	smull	r3, r0, r0, r2
  wAux /= 65536;
 8006944:	bfb8      	it	lt
 8006946:	34ff      	addlt	r4, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006948:	17d3      	asrs	r3, r2, #31
  wAux /= 65536;
 800694a:	1424      	asrs	r4, r4, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800694c:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
  wAux3 = wAux * wAux2;
 8006950:	fb03 f304 	mul.w	r3, r3, r4
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8006954:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006958:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 800695a:	fb81 2103 	smull	r2, r1, r1, r3
 800695e:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8006960:	4630      	mov	r0, r6
 8006962:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8006966:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 800696a:	f7ff beef 	b.w	800674c <MPM_CalcElMotorPower>
 800696e:	bf00      	nop
 8006970:	1b4e81b5 	.word	0x1b4e81b5
 8006974:	66666667 	.word	0x66666667

08006978 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8006978:	4b17      	ldr	r3, [pc, #92]	; (80069d8 <startTimers+0x60>)
 800697a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 800697c:	07d2      	lsls	r2, r2, #31
 800697e:	d415      	bmi.n	80069ac <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 8006980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006982:	f042 0201 	orr.w	r2, r2, #1
 8006986:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8006988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800698a:	b082      	sub	sp, #8
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800698c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006990:	f002 0201 	and.w	r2, r2, #1
 8006994:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8006996:	9a01      	ldr	r2, [sp, #4]
 8006998:	694a      	ldr	r2, [r1, #20]
 800699a:	f042 0201 	orr.w	r2, r2, #1
 800699e:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 80069a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069a2:	f022 0201 	bic.w	r2, r2, #1
 80069a6:	641a      	str	r2, [r3, #64]	; 0x40
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 80069a8:	b002      	add	sp, #8
 80069aa:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 80069ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80069b0:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80069b2:	6859      	ldr	r1, [r3, #4]
 80069b4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80069b8:	f041 0120 	orr.w	r1, r1, #32
 80069bc:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80069be:	6959      	ldr	r1, [r3, #20]
 80069c0:	f041 0101 	orr.w	r1, r1, #1
 80069c4:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80069c6:	6859      	ldr	r1, [r3, #4]
 80069c8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80069cc:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80069d0:	430a      	orrs	r2, r1
 80069d2:	605a      	str	r2, [r3, #4]
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	40023800 	.word	0x40023800

080069dc <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 80069dc:	b4f0      	push	{r4, r5, r6, r7}
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR | TIM_CR1_CMS));
 80069de:	6804      	ldr	r4, [r0, #0]
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 80069e0:	f004 0460 	and.w	r4, r4, #96	; 0x60
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 80069e4:	3201      	adds	r2, #1
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 80069e6:	2c60      	cmp	r4, #96	; 0x60
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 80069e8:	bf18      	it	ne
 80069ea:	0856      	lsrne	r6, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80069ec:	f06f 0702 	mvn.w	r7, #2
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 80069f0:	bf0c      	ite	eq
 80069f2:	0156      	lsleq	r6, r2, #5
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 80069f4:	0176      	lslne	r6, r6, #5
 80069f6:	6107      	str	r7, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 80069f8:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 80069fa:	781c      	ldrb	r4, [r3, #0]
 80069fc:	2c0f      	cmp	r4, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 80069fe:	f102 0501 	add.w	r5, r2, #1
  while (*cnt < NB_CONVERSIONS)
 8006a02:	d80b      	bhi.n	8006a1c <waitForPolarizationEnd+0x40>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8006a04:	6904      	ldr	r4, [r0, #16]
 8006a06:	07a4      	lsls	r4, r4, #30
 8006a08:	d5f7      	bpl.n	80069fa <waitForPolarizationEnd+0x1e>
      hCalibrationPeriodCounter++;
 8006a0a:	b2aa      	uxth	r2, r5
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8006a0c:	4296      	cmp	r6, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8006a0e:	6107      	str	r7, [r0, #16]
 8006a10:	d8f3      	bhi.n	80069fa <waitForPolarizationEnd+0x1e>
      {
        if (*cnt < NB_CONVERSIONS)
 8006a12:	781c      	ldrb	r4, [r3, #0]
 8006a14:	2c0f      	cmp	r4, #15
 8006a16:	d8f0      	bhi.n	80069fa <waitForPolarizationEnd+0x1e>
        {
          *SWerror = 1u;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8006a1c:	bcf0      	pop	{r4, r5, r6, r7}
 8006a1e:	4770      	bx	lr

08006a20 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8006a20:	6843      	ldr	r3, [r0, #4]
 8006a22:	4718      	bx	r3

08006a24 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8006a24:	b470      	push	{r4, r5, r6}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006a26:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8006a2a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
 8006a2c:	b083      	sub	sp, #12
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006a2e:	140c      	asrs	r4, r1, #16
{
 8006a30:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006a32:	fb06 f404 	mul.w	r4, r6, r4
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8006a36:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006a38:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8006a3c:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8006a40:	eb01 0344 	add.w	r3, r1, r4, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006a44:	ebc1 0144 	rsb	r1, r1, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8006a48:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006a4c:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8006a50:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006a54:	ea4f 0444 	mov.w	r4, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8006a58:	ea4f 0565 	mov.w	r5, r5, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006a5c:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 8006a60:	db77      	blt.n	8006b52 <PWMC_SetPhaseVoltage+0x12e>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8006a62:	f1b1 3fff 	cmp.w	r1, #4294967295
 8006a66:	db4e      	blt.n	8006b06 <PWMC_SetPhaseVoltage+0xe2>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006a68:	1aad      	subs	r5, r5, r2
 8006a6a:	bf44      	itt	mi
 8006a6c:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8006a70:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8006a74:	2900      	cmp	r1, #0
 8006a76:	bfbc      	itt	lt
 8006a78:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8006a7c:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	bfb8      	it	lt
 8006a84:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006a88:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8006a8c:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006a90:	bfb8      	it	lt
 8006a92:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 8006a96:	2401      	movs	r4, #1
      wTimePhB = wTimePhA + wZ / 131072;
 8006a98:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006a9c:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 8006aa0:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
      pHandle->highDuty = wTimePhC;
 8006aa4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
      pHandle->lowDuty = wTimePhB;
 8006aa8:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8006aaa:	87c2      	strh	r2, [r0, #62]	; 0x3e

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8006aac:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 8006ab0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8006ab4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8006ab8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006abc:	b292      	uxth	r2, r2
 8006abe:	b289      	uxth	r1, r1
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8006ac4:	8642      	strh	r2, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8006ac6:	8681      	strh	r1, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8006ac8:	86c3      	strh	r3, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 8006aca:	d118      	bne.n	8006afe <PWMC_SetPhaseVoltage+0xda>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8006acc:	f9b0 4048 	ldrsh.w	r4, [r0, #72]	; 0x48
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ib > 0 )
 8006ad0:	f9b0 504a 	ldrsh.w	r5, [r0, #74]	; 0x4a
    if ( pHandle->Ia > 0 )
 8006ad4:	2c00      	cmp	r4, #0
      pHandle->CntPhA += pHandle->DTCompCnt;
 8006ad6:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 8006ada:	bfcc      	ite	gt
 8006adc:	1912      	addgt	r2, r2, r4
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8006ade:	1b12      	suble	r2, r2, r4
 8006ae0:	b292      	uxth	r2, r2
 8006ae2:	8642      	strh	r2, [r0, #50]	; 0x32
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8006ae4:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
    if ( pHandle->Ib > 0 )
 8006ae8:	2d00      	cmp	r5, #0
      pHandle->CntPhB += pHandle->DTCompCnt;
 8006aea:	bfcc      	ite	gt
 8006aec:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8006aee:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 8006af0:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8006af2:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8006af4:	bfcc      	ite	gt
 8006af6:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8006af8:	1b1b      	suble	r3, r3, r4
 8006afa:	8681      	strh	r1, [r0, #52]	; 0x34
 8006afc:	86c3      	strh	r3, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8006afe:	6983      	ldr	r3, [r0, #24]
}
 8006b00:	b003      	add	sp, #12
 8006b02:	bc70      	pop	{r4, r5, r6}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8006b04:	4718      	bx	r3
      if ( wX <= 0 )
 8006b06:	2c00      	cmp	r4, #0
 8006b08:	dd47      	ble.n	8006b9a <PWMC_SetPhaseVoltage+0x176>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006b0a:	1aa5      	subs	r5, r4, r2
 8006b0c:	bf44      	itt	mi
 8006b0e:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8006b12:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8006b16:	2900      	cmp	r1, #0
 8006b18:	bfb8      	it	lt
 8006b1a:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 8006b1e:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 8006b22:	bfb8      	it	lt
 8006b24:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 8006b28:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006b2c:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 8006b2e:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006b30:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006b34:	bfb8      	it	lt
 8006b36:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8006b3a:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006b3e:	bfb8      	it	lt
 8006b40:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8006b44:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->highDuty = wTimePhC;
 8006b48:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 8006b4c:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8006b4e:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 8006b50:	e7ac      	b.n	8006aac <PWMC_SetPhaseVoltage+0x88>
    if ( wZ < 0 )
 8006b52:	f1b1 3fff 	cmp.w	r1, #4294967295
 8006b56:	db69      	blt.n	8006c2c <PWMC_SetPhaseVoltage+0x208>
      if ( wX <= 0 )
 8006b58:	2c00      	cmp	r4, #0
 8006b5a:	dd43      	ble.n	8006be4 <PWMC_SetPhaseVoltage+0x1c0>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006b5c:	1b2d      	subs	r5, r5, r4
 8006b5e:	bf48      	it	mi
 8006b60:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8006b64:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006b68:	bf48      	it	mi
 8006b6a:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	bfb8      	it	lt
 8006b72:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8006b76:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006b7a:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8006b7e:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8006b82:	bfb8      	it	lt
 8006b84:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8006b88:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8006b8c:	eb03 4164 	add.w	r1, r3, r4, asr #17
        pHandle->lowDuty = wTimePhB;
 8006b90:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8006b92:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8006b94:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8006b98:	e788      	b.n	8006aac <PWMC_SetPhaseVoltage+0x88>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006b9a:	1b2d      	subs	r5, r5, r4
 8006b9c:	bf44      	itt	mi
 8006b9e:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8006ba2:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	bfb8      	it	lt
 8006baa:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 8006bae:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 8006bb2:	bfb8      	it	lt
 8006bb4:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 8006bb8:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 8006bbc:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006bbe:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8006bc2:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8006bc6:	bfb8      	it	lt
 8006bc8:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8006bcc:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8006bd0:	bfb8      	it	lt
 8006bd2:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8006bd6:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->highDuty = wTimePhB;
 8006bda:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 8006bde:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8006be0:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 8006be2:	e763      	b.n	8006aac <PWMC_SetPhaseVoltage+0x88>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006be4:	1aa5      	subs	r5, r4, r2
 8006be6:	bf44      	itt	mi
 8006be8:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8006bec:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8006bf0:	2900      	cmp	r1, #0
 8006bf2:	bfb8      	it	lt
 8006bf4:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 8006bf8:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 8006bfc:	bfb8      	it	lt
 8006bfe:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 8006c02:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006c06:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 8006c08:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006c0a:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006c0e:	bfb8      	it	lt
 8006c10:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8006c14:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006c18:	bfb8      	it	lt
 8006c1a:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8006c1e:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 8006c22:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8006c24:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8006c26:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8006c2a:	e73f      	b.n	8006aac <PWMC_SetPhaseVoltage+0x88>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006c2c:	1aad      	subs	r5, r5, r2
 8006c2e:	bf44      	itt	mi
 8006c30:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8006c34:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8006c38:	2900      	cmp	r1, #0
 8006c3a:	bfbc      	itt	lt
 8006c3c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8006c40:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	bfb8      	it	lt
 8006c48:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006c4c:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8006c50:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006c54:	bfb8      	it	lt
 8006c56:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 8006c5a:	2404      	movs	r4, #4
      wTimePhB = wTimePhA + wZ / 131072;
 8006c5c:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006c60:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 8006c64:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 8006c68:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8006c6a:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 8006c6c:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8006c70:	e71c      	b.n	8006aac <PWMC_SetPhaseVoltage+0x88>
 8006c72:	bf00      	nop

08006c74 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8006c74:	6883      	ldr	r3, [r0, #8]
 8006c76:	4718      	bx	r3

08006c78 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8006c78:	b510      	push	{r4, lr}
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 8006c7e:	b199      	cbz	r1, 8006ca8 <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8006c80:	2901      	cmp	r1, #1
 8006c82:	d002      	beq.n	8006c8a <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8006c84:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8006c86:	b002      	add	sp, #8
 8006c88:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8006c8a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8006c8e:	b1cb      	cbz	r3, 8006cc4 <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 8006c90:	3b01      	subs	r3, #1
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	9101      	str	r1, [sp, #4]
 8006c96:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1f2      	bne.n	8006c84 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 8006c9e:	6903      	ldr	r3, [r0, #16]
 8006ca0:	4798      	blx	r3
        retVal = true;
 8006ca2:	9901      	ldr	r1, [sp, #4]
 8006ca4:	4608      	mov	r0, r1
 8006ca6:	e7ee      	b.n	8006c86 <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 8006ca8:	f7ff ffe4 	bl	8006c74 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8006cac:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8006cb0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1e5      	bne.n	8006c84 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8006cb8:	4620      	mov	r0, r4
 8006cba:	6923      	ldr	r3, [r4, #16]
 8006cbc:	4798      	blx	r3
      retVal = true;
 8006cbe:	2001      	movs	r0, #1
}
 8006cc0:	b002      	add	sp, #8
 8006cc2:	bd10      	pop	{r4, pc}
      retVal = true;
 8006cc4:	4608      	mov	r0, r1
}
 8006cc6:	b002      	add	sp, #8
 8006cc8:	bd10      	pop	{r4, pc}
 8006cca:	bf00      	nop

08006ccc <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8006ccc:	69c3      	ldr	r3, [r0, #28]
 8006cce:	4718      	bx	r3

08006cd0 <RVBS_Clear>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
 8006cd0:	b430      	push	{r4, r5}
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8006cd2:	8b82      	ldrh	r2, [r0, #28]
 8006cd4:	8b44      	ldrh	r4, [r0, #26]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8006cd6:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8006cd8:	4414      	add	r4, r2
 8006cda:	0864      	lsrs	r4, r4, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8006cdc:	b14b      	cbz	r3, 8006cf2 <RVBS_Clear+0x22>
  {
    pHandle->aBuffer[index] = aux;
 8006cde:	6a05      	ldr	r5, [r0, #32]
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	f825 4012 	strh.w	r4, [r5, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8006cea:	8b01      	ldrh	r1, [r0, #24]
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	4291      	cmp	r1, r2
 8006cf0:	d8f7      	bhi.n	8006ce2 <RVBS_Clear+0x12>
  }
  pHandle->_Super.LatestConv = aux;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f364 030f 	bfi	r3, r4, #0, #16
 8006cf8:	f364 431f 	bfi	r3, r4, #16, #16
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8006cfc:	2200      	movs	r2, #0
}
 8006cfe:	bc30      	pop	{r4, r5}
  pHandle->_Super.LatestConv = aux;
 8006d00:	6043      	str	r3, [r0, #4]
  pHandle->index = 0;
 8006d02:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8006d06:	4770      	bx	lr

08006d08 <RVBS_Init>:
{
 8006d08:	b510      	push	{r4, lr}
 8006d0a:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8006d0c:	300c      	adds	r0, #12
 8006d0e:	f7fb fe85 	bl	8002a1c <RCM_RegisterRegConv>
 8006d12:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 8006d16:	4620      	mov	r0, r4
 8006d18:	f7ff ffda 	bl	8006cd0 <RVBS_Clear>
}
 8006d1c:	bd10      	pop	{r4, pc}
 8006d1e:	bf00      	nop

08006d20 <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8006d20:	88c3      	ldrh	r3, [r0, #6]
 8006d22:	8b42      	ldrh	r2, [r0, #26]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d305      	bcc.n	8006d34 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8006d28:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 8006d2a:	4298      	cmp	r0, r3
 8006d2c:	bf8c      	ite	hi
 8006d2e:	2004      	movhi	r0, #4
 8006d30:	2000      	movls	r0, #0
 8006d32:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 8006d34:	2002      	movs	r0, #2
  }
  return fault;
}
 8006d36:	4770      	bx	lr

08006d38 <RVBS_CalcAvVbus>:
{
 8006d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3a:	4605      	mov	r5, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8006d3c:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8006d40:	f7fb ff3e 	bl	8002bc0 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 8006d44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d48:	4298      	cmp	r0, r3
 8006d4a:	d01c      	beq.n	8006d86 <RVBS_CalcAvVbus+0x4e>
    pHandle->aBuffer[pHandle->index] = hAux;
 8006d4c:	6a2f      	ldr	r7, [r5, #32]
 8006d4e:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8006d52:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8006d56:	8b2e      	ldrh	r6, [r5, #24]
 8006d58:	b1d6      	cbz	r6, 8006d90 <RVBS_CalcAvVbus+0x58>
 8006d5a:	2300      	movs	r3, #0
    wtemp = 0;
 8006d5c:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 8006d5e:	f837 4013 	ldrh.w	r4, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8006d62:	3301      	adds	r3, #1
 8006d64:	b2d9      	uxtb	r1, r3
 8006d66:	42b1      	cmp	r1, r6
      wtemp += pHandle->aBuffer[i];
 8006d68:	4422      	add	r2, r4
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	d3f7      	bcc.n	8006d5e <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 8006d6e:	fbb2 f2f6 	udiv	r2, r2, r6
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8006d72:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8006d76:	80ea      	strh	r2, [r5, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8006d78:	3e01      	subs	r6, #1
 8006d7a:	42b3      	cmp	r3, r6
    pHandle->_Super.LatestConv = hAux;
 8006d7c:	80a8      	strh	r0, [r5, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8006d7e:	da09      	bge.n	8006d94 <RVBS_CalcAvVbus+0x5c>
      pHandle->index++;
 8006d80:	3301      	adds	r3, #1
 8006d82:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8006d86:	4628      	mov	r0, r5
 8006d88:	f7ff ffca 	bl	8006d20 <RVBS_CheckFaultState>
 8006d8c:	8128      	strh	r0, [r5, #8]
}
 8006d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8006d90:	80ee      	strh	r6, [r5, #6]
    pHandle->_Super.LatestConv = hAux;
 8006d92:	80a8      	strh	r0, [r5, #4]
      pHandle->index = 0;
 8006d94:	2300      	movs	r3, #0
 8006d96:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	f7ff ffc0 	bl	8006d20 <RVBS_CheckFaultState>
 8006da0:	8128      	strh	r0, [r5, #8]
}
 8006da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006da4 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8006da4:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8006da6:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 8006da8:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8006dac:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 8006db0:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 8006db2:	4770      	bx	lr

08006db4 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8006db4:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop

08006dbc <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8006dbc:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop

08006dc4 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8006dc4:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop

08006dcc <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8006dcc:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8006dd0:	8a81      	ldrh	r1, [r0, #20]
{
 8006dd2:	b430      	push	{r4, r5}
  if ( *pMecSpeedUnit < 0 )
 8006dd4:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 8006dd6:	bfb8      	it	lt
 8006dd8:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8006dda:	8ac5      	ldrh	r5, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8006ddc:	78c4      	ldrb	r4, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8006dde:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 8006de0:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8006de2:	429d      	cmp	r5, r3
 8006de4:	d817      	bhi.n	8006e16 <SPD_IsMecSpeedReliable+0x4a>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8006de6:	4299      	cmp	r1, r3
 8006de8:	bf2c      	ite	cs
 8006dea:	2300      	movcs	r3, #0
 8006dec:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8006dee:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8006df2:	8b05      	ldrh	r5, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 8006df4:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 8006df6:	bfb8      	it	lt
 8006df8:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 8006dfa:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8006dfc:	428d      	cmp	r5, r1
 8006dfe:	d300      	bcc.n	8006e02 <SPD_IsMecSpeedReliable+0x36>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8006e00:	b15b      	cbz	r3, 8006e1a <SPD_IsMecSpeedReliable+0x4e>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8006e02:	4294      	cmp	r4, r2
 8006e04:	d901      	bls.n	8006e0a <SPD_IsMecSpeedReliable+0x3e>
    {
      bSpeedErrorNumber++;
 8006e06:	3201      	adds	r2, #1
 8006e08:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8006e0a:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 8006e0c:	1b10      	subs	r0, r2, r4
 8006e0e:	bf18      	it	ne
 8006e10:	2001      	movne	r0, #1
 8006e12:	bc30      	pop	{r4, r5}
 8006e14:	4770      	bx	lr
    SpeedError = true;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e7e9      	b.n	8006dee <SPD_IsMecSpeedReliable+0x22>
      bSpeedErrorNumber = 0u;
 8006e1a:	4294      	cmp	r4, r2
 8006e1c:	bf88      	it	hi
 8006e1e:	2200      	movhi	r2, #0
 8006e20:	e7f3      	b.n	8006e0a <SPD_IsMecSpeedReliable+0x3e>
 8006e22:	bf00      	nop

08006e24 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8006e24:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8006e28:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 8006e2c:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8006e30:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 8006e34:	b200      	sxth	r0, r0
 8006e36:	4770      	bx	lr

08006e38 <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 8006e38:	b430      	push	{r4, r5}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8006e3a:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8006e3e:	f9b0 402c 	ldrsh.w	r4, [r0, #44]	; 0x2c
  pHandle->Mode = pHandle->ModeDefault;
 8006e42:	f890 502a 	ldrb.w	r5, [r0, #42]	; 0x2a
  pHandle->PISpeed = pPI;
 8006e46:	6101      	str	r1, [r0, #16]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8006e48:	0424      	lsls	r4, r4, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8006e4a:	0419      	lsls	r1, r3, #16
  pHandle->TargetFinal = 0;
 8006e4c:	2300      	movs	r3, #0
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8006e4e:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->Mode = pHandle->ModeDefault;
 8006e52:	7005      	strb	r5, [r0, #0]
  pHandle->SPD = SPD_Handle;
 8006e54:	6142      	str	r2, [r0, #20]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 8006e56:	bc30      	pop	{r4, r5}
  pHandle->TargetFinal = 0;
 8006e58:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 8006e5a:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8006e5c:	6183      	str	r3, [r0, #24]
}
 8006e5e:	4770      	bx	lr

08006e60 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8006e60:	6940      	ldr	r0, [r0, #20]
 8006e62:	4770      	bx	lr

08006e64 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 8006e64:	7803      	ldrb	r3, [r0, #0]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d000      	beq.n	8006e6c <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8006e6a:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8006e6c:	6900      	ldr	r0, [r0, #16]
 8006e6e:	2100      	movs	r1, #0
 8006e70:	f7ff bcfc 	b.w	800686c <PID_SetIntegralTerm>

08006e74 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 8006e74:	6840      	ldr	r0, [r0, #4]
 8006e76:	2800      	cmp	r0, #0
 8006e78:	bfbc      	itt	lt
 8006e7a:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8006e7e:	30ff      	addlt	r0, #255	; 0xff
}
 8006e80:	1400      	asrs	r0, r0, #16
 8006e82:	4770      	bx	lr

08006e84 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8006e84:	6880      	ldr	r0, [r0, #8]
 8006e86:	2800      	cmp	r0, #0
 8006e88:	bfbc      	itt	lt
 8006e8a:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8006e8e:	30ff      	addlt	r0, #255	; 0xff
}
 8006e90:	1400      	asrs	r0, r0, #16
 8006e92:	4770      	bx	lr

08006e94 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8006e94:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 8006e96:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8006e98:	60c3      	str	r3, [r0, #12]
}
 8006e9a:	4770      	bx	lr

08006e9c <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8006e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006e9e:	7806      	ldrb	r6, [r0, #0]
{
 8006ea0:	4604      	mov	r4, r0
 8006ea2:	460d      	mov	r5, r1
 8006ea4:	4617      	mov	r7, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006ea6:	b326      	cbz	r6, 8006ef2 <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8006ea8:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8006eaa:	8be1      	ldrh	r1, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8006eac:	2800      	cmp	r0, #0
 8006eae:	bfbc      	itt	lt
 8006eb0:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8006eb4:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8006eb6:	428d      	cmp	r5, r1
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8006eb8:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8006ebc:	dd01      	ble.n	8006ec2 <STC_ExecRamp+0x26>
      AllowedRange = false;
 8006ebe:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8006ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 8006ec2:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
 8006ec6:	42a9      	cmp	r1, r5
 8006ec8:	dcf9      	bgt.n	8006ebe <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8006eca:	8c23      	ldrh	r3, [r4, #32]
 8006ecc:	429d      	cmp	r5, r3
 8006ece:	da03      	bge.n	8006ed8 <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8006ed0:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8006ed4:	42ab      	cmp	r3, r5
 8006ed6:	dbf2      	blt.n	8006ebe <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 8006ed8:	b9af      	cbnz	r7, 8006f06 <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8006eda:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8006edc:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8006ede:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 8006ee0:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8006ee4:	bf0c      	ite	eq
 8006ee6:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8006ee8:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 8006eea:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 8006eec:	61a3      	str	r3, [r4, #24]
 8006eee:	2001      	movs	r0, #1
}
 8006ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8006ef2:	f7ff ffc7 	bl	8006e84 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8006ef6:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
 8006ef8:	42b5      	cmp	r5, r6
 8006efa:	dce0      	bgt.n	8006ebe <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8006efc:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8006f00:	42ab      	cmp	r3, r5
 8006f02:	dcdc      	bgt.n	8006ebe <STC_ExecRamp+0x22>
 8006f04:	e7e8      	b.n	8006ed8 <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8006f06:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 8006f08:	4a07      	ldr	r2, [pc, #28]	; (8006f28 <STC_ExecRamp+0x8c>)
      pHandle->TargetFinal = hTargetFinal;
 8006f0a:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8006f0c:	fb07 f303 	mul.w	r3, r7, r3
      wAux /= 1000u;
 8006f10:	fba2 2303 	umull	r2, r3, r2, r3
 8006f14:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 8006f16:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8006f18:	1a2d      	subs	r5, r5, r0
 8006f1a:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep++;
 8006f1c:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8006f1e:	fb95 f5f3 	sdiv	r5, r5, r3
      pHandle->IncDecAmount = wAux1;
 8006f22:	2001      	movs	r0, #1
 8006f24:	61a5      	str	r5, [r4, #24]
}
 8006f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f28:	10624dd3 	.word	0x10624dd3

08006f2c <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8006f30:	6183      	str	r3, [r0, #24]
}
 8006f32:	4770      	bx	lr

08006f34 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 8006f34:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 8006f36:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006f3a:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8006f3c:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 8006f3e:	2a00      	cmp	r2, #0
 8006f40:	bf08      	it	eq
 8006f42:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 8006f44:	2b01      	cmp	r3, #1
{
 8006f46:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 8006f48:	d90c      	bls.n	8006f64 <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8006f4a:	6981      	ldr	r1, [r0, #24]
 8006f4c:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	2e00      	cmp	r6, #0
 8006f52:	60c3      	str	r3, [r0, #12]
 8006f54:	4630      	mov	r0, r6
 8006f56:	db09      	blt.n	8006f6c <STC_CalcTorqueReference+0x38>
 8006f58:	1405      	asrs	r5, r0, #16
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 8006f5a:	2a01      	cmp	r2, #1
 8006f5c:	d00a      	beq.n	8006f74 <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 8006f5e:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8006f60:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 8006f62:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 8006f64:	d012      	beq.n	8006f8c <STC_CalcTorqueReference+0x58>
 8006f66:	2e00      	cmp	r6, #0
 8006f68:	4630      	mov	r0, r6
 8006f6a:	daf5      	bge.n	8006f58 <STC_CalcTorqueReference+0x24>
 8006f6c:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 8006f70:	30ff      	adds	r0, #255	; 0xff
 8006f72:	e7f1      	b.n	8006f58 <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8006f74:	6960      	ldr	r0, [r4, #20]
 8006f76:	f7ff ff21 	bl	8006dbc <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8006f7a:	1a28      	subs	r0, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8006f7c:	b201      	sxth	r1, r0
 8006f7e:	6920      	ldr	r0, [r4, #16]
 8006f80:	f7ff fc80 	bl	8006884 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8006f84:	0403      	lsls	r3, r0, #16
 8006f86:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 8006f8a:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8006f8c:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8006f90:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8006f92:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 8006f94:	60c3      	str	r3, [r0, #12]
 8006f96:	e7e0      	b.n	8006f5a <STC_CalcTorqueReference+0x26>

08006f98 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8006f98:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop

08006fa0 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 8006fa0:	8bc0      	ldrh	r0, [r0, #30]
 8006fa2:	4770      	bx	lr

08006fa4 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 8006fa4:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop

08006fac <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8006fac:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	b299      	uxth	r1, r3
 8006fb4:	f361 020f 	bfi	r2, r1, #0, #16
 8006fb8:	0c1b      	lsrs	r3, r3, #16
 8006fba:	f363 421f 	bfi	r2, r3, #16, #16
{
 8006fbe:	b082      	sub	sp, #8
}
 8006fc0:	4610      	mov	r0, r2
 8006fc2:	b002      	add	sp, #8
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop

08006fc8 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8006fc8:	b510      	push	{r4, lr}
 8006fca:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8006fcc:	6940      	ldr	r0, [r0, #20]
 8006fce:	f7ff fef5 	bl	8006dbc <SPD_GetAvrgMecSpeedUnit>
 8006fd2:	0400      	lsls	r0, r0, #16
 8006fd4:	6060      	str	r0, [r4, #4]
}
 8006fd6:	bd10      	pop	{r4, pc}

08006fd8 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8006fdc:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop

08006fe4 <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 8006fe4:	b430      	push	{r4, r5}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006fe6:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8006fe8:	8885      	ldrh	r5, [r0, #4]
  State_t LocalState =  pHandle->bState;
 8006fea:	7804      	ldrb	r4, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006fec:	430b      	orrs	r3, r1
 8006fee:	ea23 0202 	bic.w	r2, r3, r2
 8006ff2:	b292      	uxth	r2, r2
  pHandle->hFaultOccurred |= hSetErrors;
 8006ff4:	4329      	orrs	r1, r5

  if ( LocalState == FAULT_NOW )
 8006ff6:	2c0a      	cmp	r4, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006ff8:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8006ffa:	8081      	strh	r1, [r0, #4]
  if ( LocalState == FAULT_NOW )
 8006ffc:	d008      	beq.n	8007010 <STM_FaultProcessing+0x2c>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 8006ffe:	b912      	cbnz	r2, 8007006 <STM_FaultProcessing+0x22>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 8007000:	4620      	mov	r0, r4
 8007002:	bc30      	pop	{r4, r5}
 8007004:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 8007006:	240a      	movs	r4, #10
 8007008:	7004      	strb	r4, [r0, #0]
}
 800700a:	4620      	mov	r0, r4
 800700c:	bc30      	pop	{r4, r5}
 800700e:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 8007010:	2a00      	cmp	r2, #0
 8007012:	d1f5      	bne.n	8007000 <STM_FaultProcessing+0x1c>
      pHandle->bState = FAULT_OVER;
 8007014:	240b      	movs	r4, #11
 8007016:	7004      	strb	r4, [r0, #0]
}
 8007018:	4620      	mov	r0, r4
 800701a:	bc30      	pop	{r4, r5}
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop

08007020 <STM_NextState>:
{
 8007020:	b508      	push	{r3, lr}
 8007022:	7803      	ldrb	r3, [r0, #0]
 8007024:	2b14      	cmp	r3, #20
 8007026:	d810      	bhi.n	800704a <STM_NextState+0x2a>
 8007028:	e8df f003 	tbb	[pc, r3]
 800702c:	240d545e 	.word	0x240d545e
 8007030:	390d352e 	.word	0x390d352e
 8007034:	0f0f3f3c 	.word	0x0f0f3f3c
 8007038:	47650b44 	.word	0x47650b44
 800703c:	504d1b4a 	.word	0x504d1b4a
 8007040:	5b          	.byte	0x5b
 8007041:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8007042:	290e      	cmp	r1, #14
 8007044:	d013      	beq.n	800706e <STM_NextState+0x4e>
      if ( bState == ANY_STOP )
 8007046:	2907      	cmp	r1, #7
 8007048:	d011      	beq.n	800706e <STM_NextState+0x4e>
 800704a:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800704e:	2b01      	cmp	r3, #1
 8007050:	d018      	beq.n	8007084 <STM_NextState+0x64>
 8007052:	2907      	cmp	r1, #7
 8007054:	d016      	beq.n	8007084 <STM_NextState+0x64>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 8007056:	2200      	movs	r2, #0
 8007058:	2180      	movs	r1, #128	; 0x80
 800705a:	f7ff ffc3 	bl	8006fe4 <STM_FaultProcessing>
 800705e:	2000      	movs	r0, #0
}
 8007060:	bd08      	pop	{r3, pc}
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8007062:	2914      	cmp	r1, #20
 8007064:	d8f1      	bhi.n	800704a <STM_NextState+0x2a>
 8007066:	4b26      	ldr	r3, [pc, #152]	; (8007100 <STM_NextState+0xe0>)
 8007068:	40cb      	lsrs	r3, r1
 800706a:	07db      	lsls	r3, r3, #31
 800706c:	d5ed      	bpl.n	800704a <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 800706e:	7001      	strb	r1, [r0, #0]
 8007070:	2001      	movs	r0, #1
}
 8007072:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 8007074:	2911      	cmp	r1, #17
 8007076:	d8ee      	bhi.n	8007056 <STM_NextState+0x36>
 8007078:	4b22      	ldr	r3, [pc, #136]	; (8007104 <STM_NextState+0xe4>)
 800707a:	40cb      	lsrs	r3, r1
 800707c:	07da      	lsls	r2, r3, #31
 800707e:	d4f6      	bmi.n	800706e <STM_NextState+0x4e>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8007080:	2903      	cmp	r1, #3
 8007082:	d1e8      	bne.n	8007056 <STM_NextState+0x36>
 8007084:	2000      	movs	r0, #0
}
 8007086:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8007088:	2913      	cmp	r1, #19
 800708a:	d0f0      	beq.n	800706e <STM_NextState+0x4e>
 800708c:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8007090:	2b05      	cmp	r3, #5
 8007092:	d1dc      	bne.n	800704e <STM_NextState+0x2e>
 8007094:	e7eb      	b.n	800706e <STM_NextState+0x4e>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8007096:	1f8b      	subs	r3, r1, #6
 8007098:	2b01      	cmp	r3, #1
 800709a:	d8d6      	bhi.n	800704a <STM_NextState+0x2a>
 800709c:	e7e7      	b.n	800706e <STM_NextState+0x4e>
      if ( bState == STOP )
 800709e:	2908      	cmp	r1, #8
 80070a0:	d1d3      	bne.n	800704a <STM_NextState+0x2a>
 80070a2:	e7e4      	b.n	800706e <STM_NextState+0x4e>
      if ( bState == STOP_IDLE )
 80070a4:	2909      	cmp	r1, #9
 80070a6:	d1d0      	bne.n	800704a <STM_NextState+0x2a>
 80070a8:	e7e1      	b.n	800706e <STM_NextState+0x4e>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 80070aa:	2900      	cmp	r1, #0
 80070ac:	d0df      	beq.n	800706e <STM_NextState+0x4e>
 80070ae:	290c      	cmp	r1, #12
 80070b0:	d1cb      	bne.n	800704a <STM_NextState+0x2a>
 80070b2:	e7dc      	b.n	800706e <STM_NextState+0x4e>
      if ( bState == IDLE )
 80070b4:	2900      	cmp	r1, #0
 80070b6:	d0da      	beq.n	800706e <STM_NextState+0x4e>
 80070b8:	e7c7      	b.n	800704a <STM_NextState+0x2a>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 80070ba:	2902      	cmp	r1, #2
 80070bc:	d1c3      	bne.n	8007046 <STM_NextState+0x26>
 80070be:	e7d6      	b.n	800706e <STM_NextState+0x4e>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 80070c0:	2911      	cmp	r1, #17
 80070c2:	d1c0      	bne.n	8007046 <STM_NextState+0x26>
 80070c4:	e7d3      	b.n	800706e <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 80070c6:	2904      	cmp	r1, #4
 80070c8:	d1bd      	bne.n	8007046 <STM_NextState+0x26>
 80070ca:	e7d0      	b.n	800706e <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 80070cc:	1f0b      	subs	r3, r1, #4
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d8b9      	bhi.n	8007046 <STM_NextState+0x26>
 80070d2:	e7cc      	b.n	800706e <STM_NextState+0x4e>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 80070d4:	2907      	cmp	r1, #7
 80070d6:	d0ca      	beq.n	800706e <STM_NextState+0x4e>
 80070d8:	f1a1 030d 	sub.w	r3, r1, #13
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d8b4      	bhi.n	800704a <STM_NextState+0x2a>
 80070e0:	e7c5      	b.n	800706e <STM_NextState+0x4e>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 80070e2:	2912      	cmp	r1, #18
 80070e4:	d1af      	bne.n	8007046 <STM_NextState+0x26>
 80070e6:	e7c2      	b.n	800706e <STM_NextState+0x4e>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80070e8:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d0be      	beq.n	800706e <STM_NextState+0x4e>
           || ( bState == ICLWAIT ) )
 80070f0:	290c      	cmp	r1, #12
 80070f2:	d1ae      	bne.n	8007052 <STM_NextState+0x32>
 80070f4:	e7bb      	b.n	800706e <STM_NextState+0x4e>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 80070f6:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 80070fa:	2b07      	cmp	r3, #7
 80070fc:	d1a5      	bne.n	800704a <STM_NextState+0x2a>
 80070fe:	e7b6      	b.n	800706e <STM_NextState+0x4e>
 8007100:	00140080 	.word	0x00140080
 8007104:	00030092 	.word	0x00030092

08007108 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 8007108:	7800      	ldrb	r0, [r0, #0]
 800710a:	4770      	bx	lr

0800710c <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 800710c:	7803      	ldrb	r3, [r0, #0]
 800710e:	2b0b      	cmp	r3, #11
 8007110:	d001      	beq.n	8007116 <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 8007112:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 8007114:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 8007116:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8007118:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 800711a:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 800711c:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 800711e:	2001      	movs	r0, #1
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop

08007124 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 8007124:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 8007126:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 8007128:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop

08007130 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 8007130:	f7fe bcc8 	b.w	8005ac4 <FCP_Init>

08007134 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8007134:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
 8007138:	b16a      	cbz	r2, 8007156 <UFCP_TX_IRQ_Handler+0x22>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 800713a:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
 800713e:	4603      	mov	r3, r0
 8007140:	b1a2      	cbz	r2, 800716c <UFCP_TX_IRQ_Handler+0x38>
 8007142:	2a01      	cmp	r2, #1
 8007144:	d108      	bne.n	8007158 <UFCP_TX_IRQ_Handler+0x24>
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
        break;

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 8007146:	7d41      	ldrb	r1, [r0, #21]
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8007148:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 800714c:	6041      	str	r1, [r0, #4]

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 800714e:	3201      	adds	r2, #1
 8007150:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 8007154:	4770      	bx	lr
 8007156:	4770      	bx	lr
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8007158:	7d41      	ldrb	r1, [r0, #21]
 800715a:	3101      	adds	r1, #1
 800715c:	428a      	cmp	r2, r1
 800715e:	dc07      	bgt.n	8007170 <UFCP_TX_IRQ_Handler+0x3c>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 8007160:	1881      	adds	r1, r0, r2
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8007162:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
 8007166:	7d09      	ldrb	r1, [r1, #20]
 8007168:	6041      	str	r1, [r0, #4]
    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 800716a:	e7f0      	b.n	800714e <UFCP_TX_IRQ_Handler+0x1a>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 800716c:	7d01      	ldrb	r1, [r0, #20]
        break;
 800716e:	e7eb      	b.n	8007148 <UFCP_TX_IRQ_Handler+0x14>
{
 8007170:	b430      	push	{r4, r5}
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8007172:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 8007176:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
 800717a:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800717c:	68d1      	ldr	r1, [r2, #12]
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800717e:	e9d0 0400 	ldrd	r0, r4, [r0]
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8007182:	2500      	movs	r5, #0
 8007184:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007188:	60d1      	str	r1, [r2, #12]
 800718a:	f883 5097 	strb.w	r5, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800718e:	4623      	mov	r3, r4
}
 8007190:	bc30      	pop	{r4, r5}
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8007192:	4718      	bx	r3

08007194 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8007194:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8007198:	b10b      	cbz	r3, 800719e <UFCP_Receive+0xa>
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800719a:	2001      	movs	r0, #1
  }

  return ret_val;
}
 800719c:	4770      	bx	lr
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 800719e:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 80071a2:	2301      	movs	r3, #1
 80071a4:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80071a8:	68d3      	ldr	r3, [r2, #12]
 80071aa:	f043 0320 	orr.w	r3, r3, #32
 80071ae:	60d3      	str	r3, [r2, #12]
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 80071b0:	2002      	movs	r0, #2
 80071b2:	4770      	bx	lr

080071b4 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 80071b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071b6:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 80071b8:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 80071bc:	b108      	cbz	r0, 80071c2 <UFCP_Send+0xe>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 80071be:	2001      	movs	r0, #1
  }

  return ret_val;
}
 80071c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while ( size-- ) *dest++ = *buffer++;
 80071c2:	1e58      	subs	r0, r3, #1
    pHandle->TxFrame.Code = code;
 80071c4:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 80071c6:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 80071c8:	b2c0      	uxtb	r0, r0
    uint8_t *dest = pHandle->TxFrame.Buffer;
 80071ca:	f104 0c16 	add.w	ip, r4, #22
    while ( size-- ) *dest++ = *buffer++;
 80071ce:	b34b      	cbz	r3, 8007224 <UFCP_Send+0x70>
 80071d0:	f104 011a 	add.w	r1, r4, #26
 80071d4:	1d17      	adds	r7, r2, #4
 80071d6:	45bc      	cmp	ip, r7
 80071d8:	bf38      	it	cc
 80071da:	428a      	cmpcc	r2, r1
 80071dc:	d336      	bcc.n	800724c <UFCP_Send+0x98>
 80071de:	2807      	cmp	r0, #7
 80071e0:	d934      	bls.n	800724c <UFCP_Send+0x98>
 80071e2:	0899      	lsrs	r1, r3, #2
 80071e4:	3901      	subs	r1, #1
 80071e6:	b2c9      	uxtb	r1, r1
 80071e8:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 80071ec:	4665      	mov	r5, ip
 80071ee:	4611      	mov	r1, r2
 80071f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80071f4:	f845 6b04 	str.w	r6, [r5], #4
 80071f8:	42b9      	cmp	r1, r7
 80071fa:	d1f9      	bne.n	80071f0 <UFCP_Send+0x3c>
 80071fc:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 8007200:	1a40      	subs	r0, r0, r1
 8007202:	428b      	cmp	r3, r1
 8007204:	b2c0      	uxtb	r0, r0
 8007206:	eb02 0601 	add.w	r6, r2, r1
 800720a:	eb0c 0501 	add.w	r5, ip, r1
 800720e:	d009      	beq.n	8007224 <UFCP_Send+0x70>
 8007210:	5c53      	ldrb	r3, [r2, r1]
 8007212:	f80c 3001 	strb.w	r3, [ip, r1]
 8007216:	b128      	cbz	r0, 8007224 <UFCP_Send+0x70>
 8007218:	7873      	ldrb	r3, [r6, #1]
 800721a:	706b      	strb	r3, [r5, #1]
 800721c:	2801      	cmp	r0, #1
 800721e:	d001      	beq.n	8007224 <UFCP_Send+0x70>
 8007220:	78b3      	ldrb	r3, [r6, #2]
 8007222:	70ab      	strb	r3, [r5, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8007224:	f104 0014 	add.w	r0, r4, #20
 8007228:	f7fe fc60 	bl	8005aec <FCP_CalcCRC>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 800722c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8007230:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 8007234:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8007236:	2301      	movs	r3, #1
    pHandle->TxFrameLevel = 0;
 8007238:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 800723c:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8007240:	68d3      	ldr	r3, [r2, #12]
 8007242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007246:	60d3      	str	r3, [r2, #12]
 8007248:	2002      	movs	r0, #2
}
 800724a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800724c:	3001      	adds	r0, #1
 800724e:	4410      	add	r0, r2
 8007250:	f104 0315 	add.w	r3, r4, #21
    while ( size-- ) *dest++ = *buffer++;
 8007254:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007258:	f803 1f01 	strb.w	r1, [r3, #1]!
 800725c:	4282      	cmp	r2, r0
 800725e:	d1f9      	bne.n	8007254 <UFCP_Send+0xa0>
 8007260:	e7e0      	b.n	8007224 <UFCP_Send+0x70>
 8007262:	bf00      	nop

08007264 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8007264:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8007268:	b90b      	cbnz	r3, 800726e <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800726a:	482c      	ldr	r0, [pc, #176]	; (800731c <UFCP_RX_IRQ_Handler+0xb8>)
}
 800726c:	4770      	bx	lr
{
 800726e:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 8007270:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
{
 8007274:	b083      	sub	sp, #12
 8007276:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 8007278:	b2ca      	uxtb	r2, r1
    switch ( pBaseHandle->RxFrameLevel )
 800727a:	b1d3      	cbz	r3, 80072b2 <UFCP_RX_IRQ_Handler+0x4e>
 800727c:	2b01      	cmp	r3, #1
 800727e:	d00d      	beq.n	800729c <UFCP_RX_IRQ_Handler+0x38>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8007280:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
 8007284:	3101      	adds	r1, #1
 8007286:	428b      	cmp	r3, r1
 8007288:	dc1d      	bgt.n	80072c6 <UFCP_RX_IRQ_Handler+0x62>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800728a:	18c1      	adds	r1, r0, r3
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800728c:	4823      	ldr	r0, [pc, #140]	; (800731c <UFCP_RX_IRQ_Handler+0xb8>)
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800728e:	f881 2099 	strb.w	r2, [r1, #153]	; 0x99
          pBaseHandle->RxFrameLevel++;
 8007292:	3301      	adds	r3, #1
 8007294:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8007298:	b003      	add	sp, #12
 800729a:	bd30      	pop	{r4, r5, pc}
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 800729c:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrameLevel++;
 800729e:	bf54      	ite	pl
 80072a0:	2302      	movpl	r3, #2
          pBaseHandle->RxFrameLevel =0 ;
 80072a2:	2300      	movmi	r3, #0
        pBaseHandle->RxFrame.Size = rx_byte;
 80072a4:	f880 209a 	strb.w	r2, [r0, #154]	; 0x9a
          pBaseHandle->RxFrameLevel =0 ;
 80072a8:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 80072ac:	481b      	ldr	r0, [pc, #108]	; (800731c <UFCP_RX_IRQ_Handler+0xb8>)
}
 80072ae:	b003      	add	sp, #12
 80072b0:	bd30      	pop	{r4, r5, pc}
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80072b2:	8a01      	ldrh	r1, [r0, #16]
        pBaseHandle->RxFrame.Code = rx_byte;
 80072b4:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
        pBaseHandle->RxFrameLevel++;
 80072b8:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80072ba:	8241      	strh	r1, [r0, #18]
        pBaseHandle->RxFrameLevel++;
 80072bc:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 80072c0:	4817      	ldr	r0, [pc, #92]	; (8007320 <UFCP_RX_IRQ_Handler+0xbc>)
}
 80072c2:	b003      	add	sp, #12
 80072c4:	bd30      	pop	{r4, r5, pc}
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 80072c6:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 80072ca:	f880 211b 	strb.w	r2, [r0, #283]	; 0x11b
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80072ce:	68cb      	ldr	r3, [r1, #12]
          pBaseHandle->RxTimeoutCountdown = 0;
 80072d0:	2200      	movs	r2, #0
 80072d2:	f023 0320 	bic.w	r3, r3, #32
 80072d6:	8242      	strh	r2, [r0, #18]
 80072d8:	60cb      	str	r3, [r1, #12]
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 80072da:	3099      	adds	r0, #153	; 0x99
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 80072dc:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 80072e0:	f7fe fc04 	bl	8005aec <FCP_CalcCRC>
 80072e4:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 80072e8:	4283      	cmp	r3, r0
 80072ea:	d10a      	bne.n	8007302 <UFCP_RX_IRQ_Handler+0x9e>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 80072ec:	6820      	ldr	r0, [r4, #0]
 80072ee:	68a5      	ldr	r5, [r4, #8]
 80072f0:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 80072f4:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 80072f8:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 80072fc:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 80072fe:	4809      	ldr	r0, [pc, #36]	; (8007324 <UFCP_RX_IRQ_Handler+0xc0>)
 8007300:	e7d5      	b.n	80072ae <UFCP_RX_IRQ_Handler+0x4a>
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8007302:	4620      	mov	r0, r4
 8007304:	2301      	movs	r3, #1
            error_code = FCP_MSG_RX_BAD_CRC;
 8007306:	240a      	movs	r4, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8007308:	f10d 0207 	add.w	r2, sp, #7
 800730c:	21ff      	movs	r1, #255	; 0xff
            error_code = FCP_MSG_RX_BAD_CRC;
 800730e:	f88d 4007 	strb.w	r4, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8007312:	f7ff ff4f 	bl	80071b4 <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8007316:	4803      	ldr	r0, [pc, #12]	; (8007324 <UFCP_RX_IRQ_Handler+0xc0>)
  return ret_val;
 8007318:	e7c9      	b.n	80072ae <UFCP_RX_IRQ_Handler+0x4a>
 800731a:	bf00      	nop
 800731c:	0800881c 	.word	0x0800881c
 8007320:	0800881e 	.word	0x0800881e
 8007324:	08008820 	.word	0x08008820

08007328 <UFCP_OVR_IRQ_Handler>:
{
 8007328:	b510      	push	{r4, lr}
 800732a:	b082      	sub	sp, #8
  error_code = UFCP_MSG_OVERRUN;
 800732c:	2408      	movs	r4, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800732e:	2301      	movs	r3, #1
 8007330:	f10d 0207 	add.w	r2, sp, #7
 8007334:	21ff      	movs	r1, #255	; 0xff
  error_code = UFCP_MSG_OVERRUN;
 8007336:	f88d 4007 	strb.w	r4, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800733a:	f7ff ff3b 	bl	80071b4 <UFCP_Send>
}
 800733e:	b002      	add	sp, #8
 8007340:	bd10      	pop	{r4, pc}
 8007342:	bf00      	nop

08007344 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8007344:	2300      	movs	r3, #0
 8007346:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 800734a:	4770      	bx	lr

0800734c <RUC_SetPhaseDurationms>:
 800734c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007350:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007354:	818a      	strh	r2, [r1, #12]
 8007356:	4770      	bx	lr

08007358 <RUC_SetPhaseFinalMecSpeedUnit>:
 8007358:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800735c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007360:	81ca      	strh	r2, [r1, #14]
 8007362:	4770      	bx	lr

08007364 <RUC_SetPhaseFinalTorque>:
 8007364:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007368:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800736c:	820a      	strh	r2, [r1, #16]
 800736e:	4770      	bx	lr

08007370 <RUC_GetPhaseDurationms>:
 8007370:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007374:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007378:	8988      	ldrh	r0, [r1, #12]
 800737a:	4770      	bx	lr

0800737c <RUC_GetPhaseFinalMecSpeedUnit>:
 800737c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007380:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007384:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop

0800738c <RUC_GetPhaseFinalTorque>:
 800738c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007390:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007394:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop

0800739c <RUC_GetNumberOfPhases>:
 800739c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop

080073a4 <STO_PLL_CalcElAngle>:
 80073a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a8:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 80073ac:	f8d0 e068 	ldr.w	lr, [r0, #104]	; 0x68
 80073b0:	4604      	mov	r4, r0
 80073b2:	03d8      	lsls	r0, r3, #15
 80073b4:	1ac2      	subs	r2, r0, r3
 80073b6:	4596      	cmp	lr, r2
 80073b8:	b089      	sub	sp, #36	; 0x24
 80073ba:	f340 80c1 	ble.w	8007540 <STO_PLL_CalcElAngle+0x19c>
 80073be:	66a2      	str	r2, [r4, #104]	; 0x68
 80073c0:	4696      	mov	lr, r2
 80073c2:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
 80073c6:	f8d4 c06c 	ldr.w	ip, [r4, #108]	; 0x6c
 80073ca:	fa4e f605 	asr.w	r6, lr, r5
 80073ce:	9603      	str	r6, [sp, #12]
 80073d0:	4562      	cmp	r2, ip
 80073d2:	b236      	sxth	r6, r6
 80073d4:	9601      	str	r6, [sp, #4]
 80073d6:	f280 80c8 	bge.w	800756a <STO_PLL_CalcElAngle+0x1c6>
 80073da:	66e2      	str	r2, [r4, #108]	; 0x6c
 80073dc:	4694      	mov	ip, r2
 80073de:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 80073e2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80073e4:	03de      	lsls	r6, r3, #15
 80073e6:	fa4c f205 	asr.w	r2, ip, r5
 80073ea:	1af5      	subs	r5, r6, r3
 80073ec:	9204      	str	r2, [sp, #16]
 80073ee:	42a8      	cmp	r0, r5
 80073f0:	b212      	sxth	r2, r2
 80073f2:	9202      	str	r2, [sp, #8]
 80073f4:	f340 80b3 	ble.w	800755e <STO_PLL_CalcElAngle+0x1ba>
 80073f8:	6625      	str	r5, [r4, #96]	; 0x60
 80073fa:	4628      	mov	r0, r5
 80073fc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80073fe:	4295      	cmp	r5, r2
 8007400:	f280 80a7 	bge.w	8007552 <STO_PLL_CalcElAngle+0x1ae>
 8007404:	6665      	str	r5, [r4, #100]	; 0x64
 8007406:	462a      	mov	r2, r5
 8007408:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
 800740c:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 8007410:	890d      	ldrh	r5, [r1, #8]
 8007412:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
 8007416:	888e      	ldrh	r6, [r1, #4]
 8007418:	f9b1 7000 	ldrsh.w	r7, [r1]
 800741c:	f9b4 9020 	ldrsh.w	r9, [r4, #32]
 8007420:	9901      	ldr	r1, [sp, #4]
 8007422:	f8a4 1070 	strh.w	r1, [r4, #112]	; 0x70
 8007426:	fa40 f103 	asr.w	r1, r0, r3
 800742a:	fa42 f303 	asr.w	r3, r2, r3
 800742e:	1b8e      	subs	r6, r1, r6
 8007430:	fb11 f109 	smulbb	r1, r1, r9
 8007434:	fb13 f909 	smulbb	r9, r3, r9
 8007438:	eba3 030a 	sub.w	r3, r3, sl
 800743c:	9305      	str	r3, [sp, #20]
 800743e:	f9b4 b022 	ldrsh.w	fp, [r4, #34]	; 0x22
 8007442:	9b02      	ldr	r3, [sp, #8]
 8007444:	f9b4 a028 	ldrsh.w	sl, [r4, #40]	; 0x28
 8007448:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 800744c:	b236      	sxth	r6, r6
 800744e:	1a41      	subs	r1, r0, r1
 8007450:	fb05 f707 	mul.w	r7, r5, r7
 8007454:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8007458:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800745a:	eba2 0209 	sub.w	r2, r2, r9
 800745e:	fb0b 1106 	mla	r1, fp, r6, r1
 8007462:	143f      	asrs	r7, r7, #16
 8007464:	fb0b 2b03 	mla	fp, fp, r3, r2
 8007468:	fb0a 1107 	mla	r1, sl, r7, r1
 800746c:	fb05 f508 	mul.w	r5, r5, r8
 8007470:	9a01      	ldr	r2, [sp, #4]
 8007472:	9f02      	ldr	r7, [sp, #8]
 8007474:	f9b4 802a 	ldrsh.w	r8, [r4, #42]	; 0x2a
 8007478:	f9b4 9026 	ldrsh.w	r9, [r4, #38]	; 0x26
 800747c:	142d      	asrs	r5, r5, #16
 800747e:	fb0a b505 	mla	r5, sl, r5, fp
 8007482:	4107      	asrs	r7, r0
 8007484:	f9b4 a00e 	ldrsh.w	sl, [r4, #14]
 8007488:	f9b4 b024 	ldrsh.w	fp, [r4, #36]	; 0x24
 800748c:	fa42 f000 	asr.w	r0, r2, r0
 8007490:	fb06 e609 	mla	r6, r6, r9, lr
 8007494:	fb09 c303 	mla	r3, r9, r3, ip
 8007498:	fb07 f708 	mul.w	r7, r7, r8
 800749c:	fb00 f008 	mul.w	r0, r0, r8
 80074a0:	fb07 670a 	mla	r7, r7, sl, r6
 80074a4:	fb00 361a 	mls	r6, r0, sl, r3
 80074a8:	9b01      	ldr	r3, [sp, #4]
 80074aa:	f994 2124 	ldrsb.w	r2, [r4, #292]	; 0x124
 80074ae:	fb0b 1813 	mls	r8, fp, r3, r1
 80074b2:	9b02      	ldr	r3, [sp, #8]
 80074b4:	fb0b 5513 	mls	r5, fp, r3, r5
 80074b8:	2a00      	cmp	r2, #0
 80074ba:	d147      	bne.n	800754c <STO_PLL_CalcElAngle+0x1a8>
 80074bc:	f1ba 0f00 	cmp.w	sl, #0
 80074c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80074c4:	bfb4      	ite	lt
 80074c6:	4691      	movlt	r9, r2
 80074c8:	f04f 0901 	movge.w	r9, #1
 80074cc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80074d0:	f7fa fa46 	bl	8001960 <MCM_Trig_Functions>
 80074d4:	9b04      	ldr	r3, [sp, #16]
 80074d6:	9a03      	ldr	r2, [sp, #12]
 80074d8:	fb13 f309 	smulbb	r3, r3, r9
 80074dc:	fb12 f109 	smulbb	r1, r2, r9
 80074e0:	425b      	negs	r3, r3
 80074e2:	fb10 f303 	smulbb	r3, r0, r3
 80074e6:	fb10 f021 	smultb	r0, r0, r1
 80074ea:	f343 33cf 	sbfx	r3, r3, #15, #16
 80074ee:	f340 31cf 	sbfx	r1, r0, #15, #16
 80074f2:	1a59      	subs	r1, r3, r1
 80074f4:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80074f8:	f7ff f9c4 	bl	8006884 <PI_Controller>
 80074fc:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
 8007500:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
 8007504:	8220      	strh	r0, [r4, #16]
 8007506:	3301      	adds	r3, #1
 8007508:	b2db      	uxtb	r3, r3
 800750a:	429a      	cmp	r2, r3
 800750c:	bf0a      	itet	eq
 800750e:	2200      	moveq	r2, #0
 8007510:	461a      	movne	r2, r3
 8007512:	4613      	moveq	r3, r2
 8007514:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8007518:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 800751c:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 8007520:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
 8007524:	88a2      	ldrh	r2, [r4, #4]
 8007526:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
 800752a:	4410      	add	r0, r2
 800752c:	b200      	sxth	r0, r0
 800752e:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
 8007532:	e9c4 5719 	strd	r5, r7, [r4, #100]	; 0x64
 8007536:	66e6      	str	r6, [r4, #108]	; 0x6c
 8007538:	80a0      	strh	r0, [r4, #4]
 800753a:	b009      	add	sp, #36	; 0x24
 800753c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007540:	1a1d      	subs	r5, r3, r0
 8007542:	45ae      	cmp	lr, r5
 8007544:	bfdc      	itt	le
 8007546:	66a5      	strle	r5, [r4, #104]	; 0x68
 8007548:	46ae      	movle	lr, r5
 800754a:	e73a      	b.n	80073c2 <STO_PLL_CalcElAngle+0x1e>
 800754c:	fa1f f982 	uxth.w	r9, r2
 8007550:	e7bc      	b.n	80074cc <STO_PLL_CalcElAngle+0x128>
 8007552:	1b9b      	subs	r3, r3, r6
 8007554:	429a      	cmp	r2, r3
 8007556:	bfdc      	itt	le
 8007558:	6663      	strle	r3, [r4, #100]	; 0x64
 800755a:	461a      	movle	r2, r3
 800755c:	e754      	b.n	8007408 <STO_PLL_CalcElAngle+0x64>
 800755e:	1b9a      	subs	r2, r3, r6
 8007560:	4290      	cmp	r0, r2
 8007562:	bfdc      	itt	le
 8007564:	6622      	strle	r2, [r4, #96]	; 0x60
 8007566:	4610      	movle	r0, r2
 8007568:	e748      	b.n	80073fc <STO_PLL_CalcElAngle+0x58>
 800756a:	1a1b      	subs	r3, r3, r0
 800756c:	459c      	cmp	ip, r3
 800756e:	bfdc      	itt	le
 8007570:	66e3      	strle	r3, [r4, #108]	; 0x6c
 8007572:	469c      	movle	ip, r3
 8007574:	e733      	b.n	80073de <STO_PLL_CalcElAngle+0x3a>
 8007576:	bf00      	nop

08007578 <STO_PLL_CalcAvrgMecSpeedUnit>:
 8007578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800757a:	f890 c10e 	ldrb.w	ip, [r0, #270]	; 0x10e
 800757e:	f1bc 0f00 	cmp.w	ip, #0
 8007582:	f000 8095 	beq.w	80076b0 <STO_PLL_CalcAvrgMecSpeedUnit+0x138>
 8007586:	f10c 37ff 	add.w	r7, ip, #4294967295
 800758a:	b2fb      	uxtb	r3, r7
 800758c:	f100 0672 	add.w	r6, r0, #114	; 0x72
 8007590:	f100 0774 	add.w	r7, r0, #116	; 0x74
 8007594:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8007598:	4632      	mov	r2, r6
 800759a:	2300      	movs	r3, #0
 800759c:	f932 5f02 	ldrsh.w	r5, [r2, #2]!
 80075a0:	4297      	cmp	r7, r2
 80075a2:	442b      	add	r3, r5
 80075a4:	d1fa      	bne.n	800759c <STO_PLL_CalcAvrgMecSpeedUnit+0x24>
 80075a6:	fb93 f5fc 	sdiv	r5, r3, ip
 80075aa:	2400      	movs	r4, #0
 80075ac:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
 80075b0:	1b5b      	subs	r3, r3, r5
 80075b2:	42b2      	cmp	r2, r6
 80075b4:	fb03 4403 	mla	r4, r3, r3, r4
 80075b8:	d1f8      	bne.n	80075ac <STO_PLL_CalcAvrgMecSpeedUnit+0x34>
 80075ba:	fb94 f4fc 	sdiv	r4, r4, ip
 80075be:	fb05 fc05 	mul.w	ip, r5, r5
 80075c2:	f8b0 2110 	ldrh.w	r2, [r0, #272]	; 0x110
 80075c6:	8b43      	ldrh	r3, [r0, #26]
 80075c8:	7887      	ldrb	r7, [r0, #2]
 80075ca:	f890 6104 	ldrb.w	r6, [r0, #260]	; 0x104
 80075ce:	fb0c fc02 	mul.w	ip, ip, r2
 80075d2:	ea4f 1cec 	mov.w	ip, ip, asr #7
 80075d6:	fb05 f303 	mul.w	r3, r5, r3
 80075da:	45a4      	cmp	ip, r4
 80075dc:	69c2      	ldr	r2, [r0, #28]
 80075de:	bfd4      	ite	le
 80075e0:	2500      	movle	r5, #0
 80075e2:	2501      	movgt	r5, #1
 80075e4:	fb03 f307 	mul.w	r3, r3, r7
 80075e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80075ec:	7842      	ldrb	r2, [r0, #1]
 80075ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80075f2:	b21a      	sxth	r2, r3
 80075f4:	800a      	strh	r2, [r1, #0]
 80075f6:	f880 50f5 	strb.w	r5, [r0, #245]	; 0xf5
 80075fa:	8182      	strh	r2, [r0, #12]
 80075fc:	f890 50f8 	ldrb.w	r5, [r0, #248]	; 0xf8
 8007600:	b99e      	cbnz	r6, 800762a <STO_PLL_CalcAvrgMecSpeedUnit+0xb2>
 8007602:	b355      	cbz	r5, 800765a <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 8007604:	45a4      	cmp	ip, r4
 8007606:	dc25      	bgt.n	8007654 <STO_PLL_CalcAvrgMecSpeedUnit+0xdc>
 8007608:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
 800760c:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
 8007610:	3301      	adds	r3, #1
 8007612:	b2db      	uxtb	r3, r3
 8007614:	429a      	cmp	r2, r3
 8007616:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 800761a:	d81e      	bhi.n	800765a <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 800761c:	2300      	movs	r3, #0
 800761e:	78c2      	ldrb	r2, [r0, #3]
 8007620:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 8007624:	7002      	strb	r2, [r0, #0]
 8007626:	4618      	mov	r0, r3
 8007628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800762a:	2b00      	cmp	r3, #0
 800762c:	f8b0 211a 	ldrh.w	r2, [r0, #282]	; 0x11a
 8007630:	bfb8      	it	lt
 8007632:	425b      	neglt	r3, r3
 8007634:	429a      	cmp	r2, r3
 8007636:	dc14      	bgt.n	8007662 <STO_PLL_CalcAvrgMecSpeedUnit+0xea>
 8007638:	2200      	movs	r2, #0
 800763a:	4613      	mov	r3, r2
 800763c:	4616      	mov	r6, r2
 800763e:	f880 20f9 	strb.w	r2, [r0, #249]	; 0xf9
 8007642:	f8c0 60fc 	str.w	r6, [r0, #252]	; 0xfc
 8007646:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800764a:	b135      	cbz	r5, 800765a <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 800764c:	45a4      	cmp	ip, r4
 800764e:	dddb      	ble.n	8007608 <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 8007650:	2a00      	cmp	r2, #0
 8007652:	d0d9      	beq.n	8007608 <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 8007654:	2300      	movs	r3, #0
 8007656:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 800765a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800765e:	f7ff bbb5 	b.w	8006dcc <SPD_IsMecSpeedReliable>
 8007662:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
 8007666:	f9b0 e014 	ldrsh.w	lr, [r0, #20]
 800766a:	f9b0 7070 	ldrsh.w	r7, [r0, #112]	; 0x70
 800766e:	f9b0 6072 	ldrsh.w	r6, [r0, #114]	; 0x72
 8007672:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8007676:	fb93 f3fe 	sdiv	r3, r3, lr
 800767a:	fb03 f202 	mul.w	r2, r3, r2
 800767e:	2a00      	cmp	r2, #0
 8007680:	bfb8      	it	lt
 8007682:	323f      	addlt	r2, #63	; 0x3f
 8007684:	1192      	asrs	r2, r2, #6
 8007686:	fb02 f303 	mul.w	r3, r2, r3
 800768a:	fb07 f707 	mul.w	r7, r7, r7
 800768e:	2b00      	cmp	r3, #0
 8007690:	fb06 7606 	mla	r6, r6, r6, r7
 8007694:	461a      	mov	r2, r3
 8007696:	f890 7118 	ldrb.w	r7, [r0, #280]	; 0x118
 800769a:	bfb8      	it	lt
 800769c:	f103 023f 	addlt.w	r2, r3, #63	; 0x3f
 80076a0:	1192      	asrs	r2, r2, #6
 80076a2:	fb07 3212 	mls	r2, r7, r2, r3
 80076a6:	4296      	cmp	r6, r2
 80076a8:	bfd4      	ite	le
 80076aa:	2200      	movle	r2, #0
 80076ac:	2201      	movgt	r2, #1
 80076ae:	e7c6      	b.n	800763e <STO_PLL_CalcAvrgMecSpeedUnit+0xc6>
 80076b0:	4664      	mov	r4, ip
 80076b2:	4665      	mov	r5, ip
 80076b4:	e785      	b.n	80075c2 <STO_PLL_CalcAvrgMecSpeedUnit+0x4a>
 80076b6:	bf00      	nop

080076b8 <STO_PLL_CalcAvrgElSpeedDpp>:
 80076b8:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
 80076bc:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
 80076c0:	b470      	push	{r4, r5, r6}
 80076c2:	f890 410e 	ldrb.w	r4, [r0, #270]	; 0x10e
 80076c6:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
 80076ca:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 80076ce:	b2a6      	uxth	r6, r4
 80076d0:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	; 0x74
 80076d4:	1af3      	subs	r3, r6, r3
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	442a      	add	r2, r5
 80076da:	b19b      	cbz	r3, 8007704 <STO_PLL_CalcAvrgElSpeedDpp+0x4c>
 80076dc:	440b      	add	r3, r1
 80076de:	b29b      	uxth	r3, r3
 80076e0:	b219      	sxth	r1, r3
 80076e2:	428c      	cmp	r4, r1
 80076e4:	bfdc      	itt	le
 80076e6:	1b9b      	suble	r3, r3, r6
 80076e8:	b219      	sxthle	r1, r3
 80076ea:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 80076ee:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
 80076f8:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 80076fc:	4113      	asrs	r3, r2
 80076fe:	81c3      	strh	r3, [r0, #14]
 8007700:	bc70      	pop	{r4, r5, r6}
 8007702:	4770      	bx	lr
 8007704:	f9b0 310c 	ldrsh.w	r3, [r0, #268]	; 0x10c
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	e7f3      	b.n	80076f4 <STO_PLL_CalcAvrgElSpeedDpp+0x3c>

0800770c <STO_PLL_Clear>:
 800770c:	b510      	push	{r4, lr}
 800770e:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
 8007712:	2100      	movs	r1, #0
 8007714:	4604      	mov	r4, r0
 8007716:	e9c0 1118 	strd	r1, r1, [r0, #96]	; 0x60
 800771a:	e9c0 111a 	strd	r1, r1, [r0, #104]	; 0x68
 800771e:	8081      	strh	r1, [r0, #4]
 8007720:	81c1      	strh	r1, [r0, #14]
 8007722:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
 8007726:	f880 10f8 	strb.w	r1, [r0, #248]	; 0xf8
 800772a:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
 800772e:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
 8007732:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
 8007736:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
 800773a:	f880 1122 	strb.w	r1, [r0, #290]	; 0x122
 800773e:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
 8007742:	b132      	cbz	r2, 8007752 <STO_PLL_Clear+0x46>
 8007744:	3a01      	subs	r2, #1
 8007746:	b2d2      	uxtb	r2, r2
 8007748:	3201      	adds	r2, #1
 800774a:	0052      	lsls	r2, r2, #1
 800774c:	3074      	adds	r0, #116	; 0x74
 800774e:	f000 f8bf 	bl	80078d0 <memset>
 8007752:	2100      	movs	r1, #0
 8007754:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
 8007758:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 800775c:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8007760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007764:	f7ff b882 	b.w	800686c <PID_SetIntegralTerm>

08007768 <STO_PLL_Init>:
 8007768:	b538      	push	{r3, r4, r5, lr}
 800776a:	4604      	mov	r4, r0
 800776c:	f9b0 502e 	ldrsh.w	r5, [r0, #46]	; 0x2e
 8007770:	4b18      	ldr	r3, [pc, #96]	; (80077d4 <STO_PLL_Init+0x6c>)
 8007772:	f890 0116 	ldrb.w	r0, [r0, #278]	; 0x116
 8007776:	fb93 f3f5 	sdiv	r3, r3, r5
 800777a:	2200      	movs	r2, #0
 800777c:	2101      	movs	r1, #1
 800777e:	b21b      	sxth	r3, r3
 8007780:	f884 00f6 	strb.w	r0, [r4, #246]	; 0xf6
 8007784:	8662      	strh	r2, [r4, #50]	; 0x32
 8007786:	f884 1104 	strb.w	r1, [r4, #260]	; 0x104
 800778a:	b303      	cbz	r3, 80077ce <STO_PLL_Init+0x66>
 800778c:	4608      	mov	r0, r1
 800778e:	e000      	b.n	8007792 <STO_PLL_Init+0x2a>
 8007790:	4611      	mov	r1, r2
 8007792:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8007796:	1c4a      	adds	r2, r1, #1
 8007798:	105b      	asrs	r3, r3, #1
 800779a:	ea4f 0040 	mov.w	r0, r0, lsl #1
 800779e:	b292      	uxth	r2, r2
 80077a0:	d1f6      	bne.n	8007790 <STO_PLL_Init+0x28>
 80077a2:	b200      	sxth	r0, r0
 80077a4:	fb05 f200 	mul.w	r2, r5, r0
 80077a8:	8661      	strh	r1, [r4, #50]	; 0x32
 80077aa:	4b0b      	ldr	r3, [pc, #44]	; (80077d8 <STO_PLL_Init+0x70>)
 80077ac:	8620      	strh	r0, [r4, #48]	; 0x30
 80077ae:	fb83 1302 	smull	r1, r3, r3, r2
 80077b2:	17d2      	asrs	r2, r2, #31
 80077b4:	ebc2 2223 	rsb	r2, r2, r3, asr #8
 80077b8:	8562      	strh	r2, [r4, #42]	; 0x2a
 80077ba:	4620      	mov	r0, r4
 80077bc:	f7ff ffa6 	bl	800770c <STO_PLL_Clear>
 80077c0:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80077c4:	f7ff f83e 	bl	8006844 <PID_HandleInit>
 80077c8:	2300      	movs	r3, #0
 80077ca:	8263      	strh	r3, [r4, #18]
 80077cc:	bd38      	pop	{r3, r4, r5, pc}
 80077ce:	462a      	mov	r2, r5
 80077d0:	4608      	mov	r0, r1
 80077d2:	e7ea      	b.n	80077aa <STO_PLL_Init+0x42>
 80077d4:	000fea5e 	.word	0x000fea5e
 80077d8:	06488dc5 	.word	0x06488dc5

080077dc <STO_PLL_GetEstimatedBemf>:
 80077dc:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80077de:	2000      	movs	r0, #0
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	f362 000f 	bfi	r0, r2, #0, #16
 80077e6:	0c1b      	lsrs	r3, r3, #16
 80077e8:	b082      	sub	sp, #8
 80077ea:	f363 401f 	bfi	r0, r3, #16, #16
 80077ee:	b002      	add	sp, #8
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop

080077f4 <STO_PLL_GetEstimatedCurrent>:
 80077f4:	e9d0 2318 	ldrd	r2, r3, [r0, #96]	; 0x60
 80077f8:	b410      	push	{r4}
 80077fa:	f8b0 411c 	ldrh.w	r4, [r0, #284]	; 0x11c
 80077fe:	4122      	asrs	r2, r4
 8007800:	b292      	uxth	r2, r2
 8007802:	4123      	asrs	r3, r4
 8007804:	2100      	movs	r1, #0
 8007806:	b29b      	uxth	r3, r3
 8007808:	f362 010f 	bfi	r1, r2, #0, #16
 800780c:	f363 411f 	bfi	r1, r3, #16, #16
 8007810:	b083      	sub	sp, #12
 8007812:	4608      	mov	r0, r1
 8007814:	b003      	add	sp, #12
 8007816:	f85d 4b04 	ldr.w	r4, [sp], #4
 800781a:	4770      	bx	lr

0800781c <STO_PLL_GetObserverGains>:
 800781c:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8007820:	800b      	strh	r3, [r1, #0]
 8007822:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 8007826:	8013      	strh	r3, [r2, #0]
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop

0800782c <STO_PLL_SetObserverGains>:
 800782c:	8441      	strh	r1, [r0, #34]	; 0x22
 800782e:	84c2      	strh	r2, [r0, #38]	; 0x26
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop

08007834 <STO_GetPLLGains>:
 8007834:	b570      	push	{r4, r5, r6, lr}
 8007836:	f100 0434 	add.w	r4, r0, #52	; 0x34
 800783a:	4620      	mov	r0, r4
 800783c:	460e      	mov	r6, r1
 800783e:	4615      	mov	r5, r2
 8007840:	f7ff f80c 	bl	800685c <PID_GetKP>
 8007844:	8030      	strh	r0, [r6, #0]
 8007846:	4620      	mov	r0, r4
 8007848:	f7ff f80c 	bl	8006864 <PID_GetKI>
 800784c:	8028      	strh	r0, [r5, #0]
 800784e:	bd70      	pop	{r4, r5, r6, pc}

08007850 <STO_SetPLLGains>:
 8007850:	b538      	push	{r3, r4, r5, lr}
 8007852:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8007856:	4615      	mov	r5, r2
 8007858:	4620      	mov	r0, r4
 800785a:	f7fe fffb 	bl	8006854 <PID_SetKP>
 800785e:	4629      	mov	r1, r5
 8007860:	4620      	mov	r0, r4
 8007862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007866:	f7fe bff7 	b.w	8006858 <PID_SetKI>
 800786a:	bf00      	nop

0800786c <STO_PLL_GetEstimatedBemfLevel>:
 800786c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop

08007874 <STO_PLL_GetObservedBemfLevel>:
 8007874:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop

0800787c <__errno>:
 800787c:	4b01      	ldr	r3, [pc, #4]	; (8007884 <__errno+0x8>)
 800787e:	6818      	ldr	r0, [r3, #0]
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	20000708 	.word	0x20000708

08007888 <__libc_init_array>:
 8007888:	b570      	push	{r4, r5, r6, lr}
 800788a:	4d0d      	ldr	r5, [pc, #52]	; (80078c0 <__libc_init_array+0x38>)
 800788c:	4c0d      	ldr	r4, [pc, #52]	; (80078c4 <__libc_init_array+0x3c>)
 800788e:	1b64      	subs	r4, r4, r5
 8007890:	10a4      	asrs	r4, r4, #2
 8007892:	2600      	movs	r6, #0
 8007894:	42a6      	cmp	r6, r4
 8007896:	d109      	bne.n	80078ac <__libc_init_array+0x24>
 8007898:	4d0b      	ldr	r5, [pc, #44]	; (80078c8 <__libc_init_array+0x40>)
 800789a:	4c0c      	ldr	r4, [pc, #48]	; (80078cc <__libc_init_array+0x44>)
 800789c:	f000 fe5c 	bl	8008558 <_init>
 80078a0:	1b64      	subs	r4, r4, r5
 80078a2:	10a4      	asrs	r4, r4, #2
 80078a4:	2600      	movs	r6, #0
 80078a6:	42a6      	cmp	r6, r4
 80078a8:	d105      	bne.n	80078b6 <__libc_init_array+0x2e>
 80078aa:	bd70      	pop	{r4, r5, r6, pc}
 80078ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80078b0:	4798      	blx	r3
 80078b2:	3601      	adds	r6, #1
 80078b4:	e7ee      	b.n	8007894 <__libc_init_array+0xc>
 80078b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80078ba:	4798      	blx	r3
 80078bc:	3601      	adds	r6, #1
 80078be:	e7f2      	b.n	80078a6 <__libc_init_array+0x1e>
 80078c0:	08008860 	.word	0x08008860
 80078c4:	08008860 	.word	0x08008860
 80078c8:	08008860 	.word	0x08008860
 80078cc:	08008864 	.word	0x08008864

080078d0 <memset>:
 80078d0:	4402      	add	r2, r0
 80078d2:	4603      	mov	r3, r0
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d100      	bne.n	80078da <memset+0xa>
 80078d8:	4770      	bx	lr
 80078da:	f803 1b01 	strb.w	r1, [r3], #1
 80078de:	e7f9      	b.n	80078d4 <memset+0x4>

080078e0 <siprintf>:
 80078e0:	b40e      	push	{r1, r2, r3}
 80078e2:	b500      	push	{lr}
 80078e4:	b09c      	sub	sp, #112	; 0x70
 80078e6:	ab1d      	add	r3, sp, #116	; 0x74
 80078e8:	9002      	str	r0, [sp, #8]
 80078ea:	9006      	str	r0, [sp, #24]
 80078ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80078f0:	4809      	ldr	r0, [pc, #36]	; (8007918 <siprintf+0x38>)
 80078f2:	9107      	str	r1, [sp, #28]
 80078f4:	9104      	str	r1, [sp, #16]
 80078f6:	4909      	ldr	r1, [pc, #36]	; (800791c <siprintf+0x3c>)
 80078f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80078fc:	9105      	str	r1, [sp, #20]
 80078fe:	6800      	ldr	r0, [r0, #0]
 8007900:	9301      	str	r3, [sp, #4]
 8007902:	a902      	add	r1, sp, #8
 8007904:	f000 f868 	bl	80079d8 <_svfiprintf_r>
 8007908:	9b02      	ldr	r3, [sp, #8]
 800790a:	2200      	movs	r2, #0
 800790c:	701a      	strb	r2, [r3, #0]
 800790e:	b01c      	add	sp, #112	; 0x70
 8007910:	f85d eb04 	ldr.w	lr, [sp], #4
 8007914:	b003      	add	sp, #12
 8007916:	4770      	bx	lr
 8007918:	20000708 	.word	0x20000708
 800791c:	ffff0208 	.word	0xffff0208

08007920 <__ssputs_r>:
 8007920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007924:	688e      	ldr	r6, [r1, #8]
 8007926:	429e      	cmp	r6, r3
 8007928:	4682      	mov	sl, r0
 800792a:	460c      	mov	r4, r1
 800792c:	4690      	mov	r8, r2
 800792e:	461f      	mov	r7, r3
 8007930:	d838      	bhi.n	80079a4 <__ssputs_r+0x84>
 8007932:	898a      	ldrh	r2, [r1, #12]
 8007934:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007938:	d032      	beq.n	80079a0 <__ssputs_r+0x80>
 800793a:	6825      	ldr	r5, [r4, #0]
 800793c:	6909      	ldr	r1, [r1, #16]
 800793e:	eba5 0901 	sub.w	r9, r5, r1
 8007942:	6965      	ldr	r5, [r4, #20]
 8007944:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007948:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800794c:	3301      	adds	r3, #1
 800794e:	444b      	add	r3, r9
 8007950:	106d      	asrs	r5, r5, #1
 8007952:	429d      	cmp	r5, r3
 8007954:	bf38      	it	cc
 8007956:	461d      	movcc	r5, r3
 8007958:	0553      	lsls	r3, r2, #21
 800795a:	d531      	bpl.n	80079c0 <__ssputs_r+0xa0>
 800795c:	4629      	mov	r1, r5
 800795e:	f000 fb47 	bl	8007ff0 <_malloc_r>
 8007962:	4606      	mov	r6, r0
 8007964:	b950      	cbnz	r0, 800797c <__ssputs_r+0x5c>
 8007966:	230c      	movs	r3, #12
 8007968:	f8ca 3000 	str.w	r3, [sl]
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007972:	81a3      	strh	r3, [r4, #12]
 8007974:	f04f 30ff 	mov.w	r0, #4294967295
 8007978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800797c:	6921      	ldr	r1, [r4, #16]
 800797e:	464a      	mov	r2, r9
 8007980:	f000 fabe 	bl	8007f00 <memcpy>
 8007984:	89a3      	ldrh	r3, [r4, #12]
 8007986:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800798a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800798e:	81a3      	strh	r3, [r4, #12]
 8007990:	6126      	str	r6, [r4, #16]
 8007992:	6165      	str	r5, [r4, #20]
 8007994:	444e      	add	r6, r9
 8007996:	eba5 0509 	sub.w	r5, r5, r9
 800799a:	6026      	str	r6, [r4, #0]
 800799c:	60a5      	str	r5, [r4, #8]
 800799e:	463e      	mov	r6, r7
 80079a0:	42be      	cmp	r6, r7
 80079a2:	d900      	bls.n	80079a6 <__ssputs_r+0x86>
 80079a4:	463e      	mov	r6, r7
 80079a6:	4632      	mov	r2, r6
 80079a8:	6820      	ldr	r0, [r4, #0]
 80079aa:	4641      	mov	r1, r8
 80079ac:	f000 fab6 	bl	8007f1c <memmove>
 80079b0:	68a3      	ldr	r3, [r4, #8]
 80079b2:	6822      	ldr	r2, [r4, #0]
 80079b4:	1b9b      	subs	r3, r3, r6
 80079b6:	4432      	add	r2, r6
 80079b8:	60a3      	str	r3, [r4, #8]
 80079ba:	6022      	str	r2, [r4, #0]
 80079bc:	2000      	movs	r0, #0
 80079be:	e7db      	b.n	8007978 <__ssputs_r+0x58>
 80079c0:	462a      	mov	r2, r5
 80079c2:	f000 fb6f 	bl	80080a4 <_realloc_r>
 80079c6:	4606      	mov	r6, r0
 80079c8:	2800      	cmp	r0, #0
 80079ca:	d1e1      	bne.n	8007990 <__ssputs_r+0x70>
 80079cc:	6921      	ldr	r1, [r4, #16]
 80079ce:	4650      	mov	r0, sl
 80079d0:	f000 fabe 	bl	8007f50 <_free_r>
 80079d4:	e7c7      	b.n	8007966 <__ssputs_r+0x46>
	...

080079d8 <_svfiprintf_r>:
 80079d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079dc:	4698      	mov	r8, r3
 80079de:	898b      	ldrh	r3, [r1, #12]
 80079e0:	061b      	lsls	r3, r3, #24
 80079e2:	b09d      	sub	sp, #116	; 0x74
 80079e4:	4607      	mov	r7, r0
 80079e6:	460d      	mov	r5, r1
 80079e8:	4614      	mov	r4, r2
 80079ea:	d50e      	bpl.n	8007a0a <_svfiprintf_r+0x32>
 80079ec:	690b      	ldr	r3, [r1, #16]
 80079ee:	b963      	cbnz	r3, 8007a0a <_svfiprintf_r+0x32>
 80079f0:	2140      	movs	r1, #64	; 0x40
 80079f2:	f000 fafd 	bl	8007ff0 <_malloc_r>
 80079f6:	6028      	str	r0, [r5, #0]
 80079f8:	6128      	str	r0, [r5, #16]
 80079fa:	b920      	cbnz	r0, 8007a06 <_svfiprintf_r+0x2e>
 80079fc:	230c      	movs	r3, #12
 80079fe:	603b      	str	r3, [r7, #0]
 8007a00:	f04f 30ff 	mov.w	r0, #4294967295
 8007a04:	e0d1      	b.n	8007baa <_svfiprintf_r+0x1d2>
 8007a06:	2340      	movs	r3, #64	; 0x40
 8007a08:	616b      	str	r3, [r5, #20]
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a0e:	2320      	movs	r3, #32
 8007a10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a14:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a18:	2330      	movs	r3, #48	; 0x30
 8007a1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007bc4 <_svfiprintf_r+0x1ec>
 8007a1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a22:	f04f 0901 	mov.w	r9, #1
 8007a26:	4623      	mov	r3, r4
 8007a28:	469a      	mov	sl, r3
 8007a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a2e:	b10a      	cbz	r2, 8007a34 <_svfiprintf_r+0x5c>
 8007a30:	2a25      	cmp	r2, #37	; 0x25
 8007a32:	d1f9      	bne.n	8007a28 <_svfiprintf_r+0x50>
 8007a34:	ebba 0b04 	subs.w	fp, sl, r4
 8007a38:	d00b      	beq.n	8007a52 <_svfiprintf_r+0x7a>
 8007a3a:	465b      	mov	r3, fp
 8007a3c:	4622      	mov	r2, r4
 8007a3e:	4629      	mov	r1, r5
 8007a40:	4638      	mov	r0, r7
 8007a42:	f7ff ff6d 	bl	8007920 <__ssputs_r>
 8007a46:	3001      	adds	r0, #1
 8007a48:	f000 80aa 	beq.w	8007ba0 <_svfiprintf_r+0x1c8>
 8007a4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a4e:	445a      	add	r2, fp
 8007a50:	9209      	str	r2, [sp, #36]	; 0x24
 8007a52:	f89a 3000 	ldrb.w	r3, [sl]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f000 80a2 	beq.w	8007ba0 <_svfiprintf_r+0x1c8>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a66:	f10a 0a01 	add.w	sl, sl, #1
 8007a6a:	9304      	str	r3, [sp, #16]
 8007a6c:	9307      	str	r3, [sp, #28]
 8007a6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a72:	931a      	str	r3, [sp, #104]	; 0x68
 8007a74:	4654      	mov	r4, sl
 8007a76:	2205      	movs	r2, #5
 8007a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a7c:	4851      	ldr	r0, [pc, #324]	; (8007bc4 <_svfiprintf_r+0x1ec>)
 8007a7e:	f7f8 fbcf 	bl	8000220 <memchr>
 8007a82:	9a04      	ldr	r2, [sp, #16]
 8007a84:	b9d8      	cbnz	r0, 8007abe <_svfiprintf_r+0xe6>
 8007a86:	06d0      	lsls	r0, r2, #27
 8007a88:	bf44      	itt	mi
 8007a8a:	2320      	movmi	r3, #32
 8007a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a90:	0711      	lsls	r1, r2, #28
 8007a92:	bf44      	itt	mi
 8007a94:	232b      	movmi	r3, #43	; 0x2b
 8007a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a9e:	2b2a      	cmp	r3, #42	; 0x2a
 8007aa0:	d015      	beq.n	8007ace <_svfiprintf_r+0xf6>
 8007aa2:	9a07      	ldr	r2, [sp, #28]
 8007aa4:	4654      	mov	r4, sl
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	f04f 0c0a 	mov.w	ip, #10
 8007aac:	4621      	mov	r1, r4
 8007aae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ab2:	3b30      	subs	r3, #48	; 0x30
 8007ab4:	2b09      	cmp	r3, #9
 8007ab6:	d94e      	bls.n	8007b56 <_svfiprintf_r+0x17e>
 8007ab8:	b1b0      	cbz	r0, 8007ae8 <_svfiprintf_r+0x110>
 8007aba:	9207      	str	r2, [sp, #28]
 8007abc:	e014      	b.n	8007ae8 <_svfiprintf_r+0x110>
 8007abe:	eba0 0308 	sub.w	r3, r0, r8
 8007ac2:	fa09 f303 	lsl.w	r3, r9, r3
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	9304      	str	r3, [sp, #16]
 8007aca:	46a2      	mov	sl, r4
 8007acc:	e7d2      	b.n	8007a74 <_svfiprintf_r+0x9c>
 8007ace:	9b03      	ldr	r3, [sp, #12]
 8007ad0:	1d19      	adds	r1, r3, #4
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	9103      	str	r1, [sp, #12]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	bfbb      	ittet	lt
 8007ada:	425b      	neglt	r3, r3
 8007adc:	f042 0202 	orrlt.w	r2, r2, #2
 8007ae0:	9307      	strge	r3, [sp, #28]
 8007ae2:	9307      	strlt	r3, [sp, #28]
 8007ae4:	bfb8      	it	lt
 8007ae6:	9204      	strlt	r2, [sp, #16]
 8007ae8:	7823      	ldrb	r3, [r4, #0]
 8007aea:	2b2e      	cmp	r3, #46	; 0x2e
 8007aec:	d10c      	bne.n	8007b08 <_svfiprintf_r+0x130>
 8007aee:	7863      	ldrb	r3, [r4, #1]
 8007af0:	2b2a      	cmp	r3, #42	; 0x2a
 8007af2:	d135      	bne.n	8007b60 <_svfiprintf_r+0x188>
 8007af4:	9b03      	ldr	r3, [sp, #12]
 8007af6:	1d1a      	adds	r2, r3, #4
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	9203      	str	r2, [sp, #12]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	bfb8      	it	lt
 8007b00:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b04:	3402      	adds	r4, #2
 8007b06:	9305      	str	r3, [sp, #20]
 8007b08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007bd4 <_svfiprintf_r+0x1fc>
 8007b0c:	7821      	ldrb	r1, [r4, #0]
 8007b0e:	2203      	movs	r2, #3
 8007b10:	4650      	mov	r0, sl
 8007b12:	f7f8 fb85 	bl	8000220 <memchr>
 8007b16:	b140      	cbz	r0, 8007b2a <_svfiprintf_r+0x152>
 8007b18:	2340      	movs	r3, #64	; 0x40
 8007b1a:	eba0 000a 	sub.w	r0, r0, sl
 8007b1e:	fa03 f000 	lsl.w	r0, r3, r0
 8007b22:	9b04      	ldr	r3, [sp, #16]
 8007b24:	4303      	orrs	r3, r0
 8007b26:	3401      	adds	r4, #1
 8007b28:	9304      	str	r3, [sp, #16]
 8007b2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b2e:	4826      	ldr	r0, [pc, #152]	; (8007bc8 <_svfiprintf_r+0x1f0>)
 8007b30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b34:	2206      	movs	r2, #6
 8007b36:	f7f8 fb73 	bl	8000220 <memchr>
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	d038      	beq.n	8007bb0 <_svfiprintf_r+0x1d8>
 8007b3e:	4b23      	ldr	r3, [pc, #140]	; (8007bcc <_svfiprintf_r+0x1f4>)
 8007b40:	bb1b      	cbnz	r3, 8007b8a <_svfiprintf_r+0x1b2>
 8007b42:	9b03      	ldr	r3, [sp, #12]
 8007b44:	3307      	adds	r3, #7
 8007b46:	f023 0307 	bic.w	r3, r3, #7
 8007b4a:	3308      	adds	r3, #8
 8007b4c:	9303      	str	r3, [sp, #12]
 8007b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b50:	4433      	add	r3, r6
 8007b52:	9309      	str	r3, [sp, #36]	; 0x24
 8007b54:	e767      	b.n	8007a26 <_svfiprintf_r+0x4e>
 8007b56:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b5a:	460c      	mov	r4, r1
 8007b5c:	2001      	movs	r0, #1
 8007b5e:	e7a5      	b.n	8007aac <_svfiprintf_r+0xd4>
 8007b60:	2300      	movs	r3, #0
 8007b62:	3401      	adds	r4, #1
 8007b64:	9305      	str	r3, [sp, #20]
 8007b66:	4619      	mov	r1, r3
 8007b68:	f04f 0c0a 	mov.w	ip, #10
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b72:	3a30      	subs	r2, #48	; 0x30
 8007b74:	2a09      	cmp	r2, #9
 8007b76:	d903      	bls.n	8007b80 <_svfiprintf_r+0x1a8>
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d0c5      	beq.n	8007b08 <_svfiprintf_r+0x130>
 8007b7c:	9105      	str	r1, [sp, #20]
 8007b7e:	e7c3      	b.n	8007b08 <_svfiprintf_r+0x130>
 8007b80:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b84:	4604      	mov	r4, r0
 8007b86:	2301      	movs	r3, #1
 8007b88:	e7f0      	b.n	8007b6c <_svfiprintf_r+0x194>
 8007b8a:	ab03      	add	r3, sp, #12
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	462a      	mov	r2, r5
 8007b90:	4b0f      	ldr	r3, [pc, #60]	; (8007bd0 <_svfiprintf_r+0x1f8>)
 8007b92:	a904      	add	r1, sp, #16
 8007b94:	4638      	mov	r0, r7
 8007b96:	f3af 8000 	nop.w
 8007b9a:	1c42      	adds	r2, r0, #1
 8007b9c:	4606      	mov	r6, r0
 8007b9e:	d1d6      	bne.n	8007b4e <_svfiprintf_r+0x176>
 8007ba0:	89ab      	ldrh	r3, [r5, #12]
 8007ba2:	065b      	lsls	r3, r3, #25
 8007ba4:	f53f af2c 	bmi.w	8007a00 <_svfiprintf_r+0x28>
 8007ba8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007baa:	b01d      	add	sp, #116	; 0x74
 8007bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb0:	ab03      	add	r3, sp, #12
 8007bb2:	9300      	str	r3, [sp, #0]
 8007bb4:	462a      	mov	r2, r5
 8007bb6:	4b06      	ldr	r3, [pc, #24]	; (8007bd0 <_svfiprintf_r+0x1f8>)
 8007bb8:	a904      	add	r1, sp, #16
 8007bba:	4638      	mov	r0, r7
 8007bbc:	f000 f87a 	bl	8007cb4 <_printf_i>
 8007bc0:	e7eb      	b.n	8007b9a <_svfiprintf_r+0x1c2>
 8007bc2:	bf00      	nop
 8007bc4:	08008822 	.word	0x08008822
 8007bc8:	0800882c 	.word	0x0800882c
 8007bcc:	00000000 	.word	0x00000000
 8007bd0:	08007921 	.word	0x08007921
 8007bd4:	08008828 	.word	0x08008828

08007bd8 <_printf_common>:
 8007bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bdc:	4616      	mov	r6, r2
 8007bde:	4699      	mov	r9, r3
 8007be0:	688a      	ldr	r2, [r1, #8]
 8007be2:	690b      	ldr	r3, [r1, #16]
 8007be4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007be8:	4293      	cmp	r3, r2
 8007bea:	bfb8      	it	lt
 8007bec:	4613      	movlt	r3, r2
 8007bee:	6033      	str	r3, [r6, #0]
 8007bf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007bf4:	4607      	mov	r7, r0
 8007bf6:	460c      	mov	r4, r1
 8007bf8:	b10a      	cbz	r2, 8007bfe <_printf_common+0x26>
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	6033      	str	r3, [r6, #0]
 8007bfe:	6823      	ldr	r3, [r4, #0]
 8007c00:	0699      	lsls	r1, r3, #26
 8007c02:	bf42      	ittt	mi
 8007c04:	6833      	ldrmi	r3, [r6, #0]
 8007c06:	3302      	addmi	r3, #2
 8007c08:	6033      	strmi	r3, [r6, #0]
 8007c0a:	6825      	ldr	r5, [r4, #0]
 8007c0c:	f015 0506 	ands.w	r5, r5, #6
 8007c10:	d106      	bne.n	8007c20 <_printf_common+0x48>
 8007c12:	f104 0a19 	add.w	sl, r4, #25
 8007c16:	68e3      	ldr	r3, [r4, #12]
 8007c18:	6832      	ldr	r2, [r6, #0]
 8007c1a:	1a9b      	subs	r3, r3, r2
 8007c1c:	42ab      	cmp	r3, r5
 8007c1e:	dc26      	bgt.n	8007c6e <_printf_common+0x96>
 8007c20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c24:	1e13      	subs	r3, r2, #0
 8007c26:	6822      	ldr	r2, [r4, #0]
 8007c28:	bf18      	it	ne
 8007c2a:	2301      	movne	r3, #1
 8007c2c:	0692      	lsls	r2, r2, #26
 8007c2e:	d42b      	bmi.n	8007c88 <_printf_common+0xb0>
 8007c30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c34:	4649      	mov	r1, r9
 8007c36:	4638      	mov	r0, r7
 8007c38:	47c0      	blx	r8
 8007c3a:	3001      	adds	r0, #1
 8007c3c:	d01e      	beq.n	8007c7c <_printf_common+0xa4>
 8007c3e:	6823      	ldr	r3, [r4, #0]
 8007c40:	68e5      	ldr	r5, [r4, #12]
 8007c42:	6832      	ldr	r2, [r6, #0]
 8007c44:	f003 0306 	and.w	r3, r3, #6
 8007c48:	2b04      	cmp	r3, #4
 8007c4a:	bf08      	it	eq
 8007c4c:	1aad      	subeq	r5, r5, r2
 8007c4e:	68a3      	ldr	r3, [r4, #8]
 8007c50:	6922      	ldr	r2, [r4, #16]
 8007c52:	bf0c      	ite	eq
 8007c54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c58:	2500      	movne	r5, #0
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	bfc4      	itt	gt
 8007c5e:	1a9b      	subgt	r3, r3, r2
 8007c60:	18ed      	addgt	r5, r5, r3
 8007c62:	2600      	movs	r6, #0
 8007c64:	341a      	adds	r4, #26
 8007c66:	42b5      	cmp	r5, r6
 8007c68:	d11a      	bne.n	8007ca0 <_printf_common+0xc8>
 8007c6a:	2000      	movs	r0, #0
 8007c6c:	e008      	b.n	8007c80 <_printf_common+0xa8>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	4652      	mov	r2, sl
 8007c72:	4649      	mov	r1, r9
 8007c74:	4638      	mov	r0, r7
 8007c76:	47c0      	blx	r8
 8007c78:	3001      	adds	r0, #1
 8007c7a:	d103      	bne.n	8007c84 <_printf_common+0xac>
 8007c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c84:	3501      	adds	r5, #1
 8007c86:	e7c6      	b.n	8007c16 <_printf_common+0x3e>
 8007c88:	18e1      	adds	r1, r4, r3
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	2030      	movs	r0, #48	; 0x30
 8007c8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c92:	4422      	add	r2, r4
 8007c94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c9c:	3302      	adds	r3, #2
 8007c9e:	e7c7      	b.n	8007c30 <_printf_common+0x58>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	4622      	mov	r2, r4
 8007ca4:	4649      	mov	r1, r9
 8007ca6:	4638      	mov	r0, r7
 8007ca8:	47c0      	blx	r8
 8007caa:	3001      	adds	r0, #1
 8007cac:	d0e6      	beq.n	8007c7c <_printf_common+0xa4>
 8007cae:	3601      	adds	r6, #1
 8007cb0:	e7d9      	b.n	8007c66 <_printf_common+0x8e>
	...

08007cb4 <_printf_i>:
 8007cb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cb8:	460c      	mov	r4, r1
 8007cba:	4691      	mov	r9, r2
 8007cbc:	7e27      	ldrb	r7, [r4, #24]
 8007cbe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007cc0:	2f78      	cmp	r7, #120	; 0x78
 8007cc2:	4680      	mov	r8, r0
 8007cc4:	469a      	mov	sl, r3
 8007cc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cca:	d807      	bhi.n	8007cdc <_printf_i+0x28>
 8007ccc:	2f62      	cmp	r7, #98	; 0x62
 8007cce:	d80a      	bhi.n	8007ce6 <_printf_i+0x32>
 8007cd0:	2f00      	cmp	r7, #0
 8007cd2:	f000 80d8 	beq.w	8007e86 <_printf_i+0x1d2>
 8007cd6:	2f58      	cmp	r7, #88	; 0x58
 8007cd8:	f000 80a3 	beq.w	8007e22 <_printf_i+0x16e>
 8007cdc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ce0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ce4:	e03a      	b.n	8007d5c <_printf_i+0xa8>
 8007ce6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007cea:	2b15      	cmp	r3, #21
 8007cec:	d8f6      	bhi.n	8007cdc <_printf_i+0x28>
 8007cee:	a001      	add	r0, pc, #4	; (adr r0, 8007cf4 <_printf_i+0x40>)
 8007cf0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007cf4:	08007d4d 	.word	0x08007d4d
 8007cf8:	08007d61 	.word	0x08007d61
 8007cfc:	08007cdd 	.word	0x08007cdd
 8007d00:	08007cdd 	.word	0x08007cdd
 8007d04:	08007cdd 	.word	0x08007cdd
 8007d08:	08007cdd 	.word	0x08007cdd
 8007d0c:	08007d61 	.word	0x08007d61
 8007d10:	08007cdd 	.word	0x08007cdd
 8007d14:	08007cdd 	.word	0x08007cdd
 8007d18:	08007cdd 	.word	0x08007cdd
 8007d1c:	08007cdd 	.word	0x08007cdd
 8007d20:	08007e6d 	.word	0x08007e6d
 8007d24:	08007d91 	.word	0x08007d91
 8007d28:	08007e4f 	.word	0x08007e4f
 8007d2c:	08007cdd 	.word	0x08007cdd
 8007d30:	08007cdd 	.word	0x08007cdd
 8007d34:	08007e8f 	.word	0x08007e8f
 8007d38:	08007cdd 	.word	0x08007cdd
 8007d3c:	08007d91 	.word	0x08007d91
 8007d40:	08007cdd 	.word	0x08007cdd
 8007d44:	08007cdd 	.word	0x08007cdd
 8007d48:	08007e57 	.word	0x08007e57
 8007d4c:	680b      	ldr	r3, [r1, #0]
 8007d4e:	1d1a      	adds	r2, r3, #4
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	600a      	str	r2, [r1, #0]
 8007d54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007d58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e0a3      	b.n	8007ea8 <_printf_i+0x1f4>
 8007d60:	6825      	ldr	r5, [r4, #0]
 8007d62:	6808      	ldr	r0, [r1, #0]
 8007d64:	062e      	lsls	r6, r5, #24
 8007d66:	f100 0304 	add.w	r3, r0, #4
 8007d6a:	d50a      	bpl.n	8007d82 <_printf_i+0xce>
 8007d6c:	6805      	ldr	r5, [r0, #0]
 8007d6e:	600b      	str	r3, [r1, #0]
 8007d70:	2d00      	cmp	r5, #0
 8007d72:	da03      	bge.n	8007d7c <_printf_i+0xc8>
 8007d74:	232d      	movs	r3, #45	; 0x2d
 8007d76:	426d      	negs	r5, r5
 8007d78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d7c:	485e      	ldr	r0, [pc, #376]	; (8007ef8 <_printf_i+0x244>)
 8007d7e:	230a      	movs	r3, #10
 8007d80:	e019      	b.n	8007db6 <_printf_i+0x102>
 8007d82:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007d86:	6805      	ldr	r5, [r0, #0]
 8007d88:	600b      	str	r3, [r1, #0]
 8007d8a:	bf18      	it	ne
 8007d8c:	b22d      	sxthne	r5, r5
 8007d8e:	e7ef      	b.n	8007d70 <_printf_i+0xbc>
 8007d90:	680b      	ldr	r3, [r1, #0]
 8007d92:	6825      	ldr	r5, [r4, #0]
 8007d94:	1d18      	adds	r0, r3, #4
 8007d96:	6008      	str	r0, [r1, #0]
 8007d98:	0628      	lsls	r0, r5, #24
 8007d9a:	d501      	bpl.n	8007da0 <_printf_i+0xec>
 8007d9c:	681d      	ldr	r5, [r3, #0]
 8007d9e:	e002      	b.n	8007da6 <_printf_i+0xf2>
 8007da0:	0669      	lsls	r1, r5, #25
 8007da2:	d5fb      	bpl.n	8007d9c <_printf_i+0xe8>
 8007da4:	881d      	ldrh	r5, [r3, #0]
 8007da6:	4854      	ldr	r0, [pc, #336]	; (8007ef8 <_printf_i+0x244>)
 8007da8:	2f6f      	cmp	r7, #111	; 0x6f
 8007daa:	bf0c      	ite	eq
 8007dac:	2308      	moveq	r3, #8
 8007dae:	230a      	movne	r3, #10
 8007db0:	2100      	movs	r1, #0
 8007db2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007db6:	6866      	ldr	r6, [r4, #4]
 8007db8:	60a6      	str	r6, [r4, #8]
 8007dba:	2e00      	cmp	r6, #0
 8007dbc:	bfa2      	ittt	ge
 8007dbe:	6821      	ldrge	r1, [r4, #0]
 8007dc0:	f021 0104 	bicge.w	r1, r1, #4
 8007dc4:	6021      	strge	r1, [r4, #0]
 8007dc6:	b90d      	cbnz	r5, 8007dcc <_printf_i+0x118>
 8007dc8:	2e00      	cmp	r6, #0
 8007dca:	d04d      	beq.n	8007e68 <_printf_i+0x1b4>
 8007dcc:	4616      	mov	r6, r2
 8007dce:	fbb5 f1f3 	udiv	r1, r5, r3
 8007dd2:	fb03 5711 	mls	r7, r3, r1, r5
 8007dd6:	5dc7      	ldrb	r7, [r0, r7]
 8007dd8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ddc:	462f      	mov	r7, r5
 8007dde:	42bb      	cmp	r3, r7
 8007de0:	460d      	mov	r5, r1
 8007de2:	d9f4      	bls.n	8007dce <_printf_i+0x11a>
 8007de4:	2b08      	cmp	r3, #8
 8007de6:	d10b      	bne.n	8007e00 <_printf_i+0x14c>
 8007de8:	6823      	ldr	r3, [r4, #0]
 8007dea:	07df      	lsls	r7, r3, #31
 8007dec:	d508      	bpl.n	8007e00 <_printf_i+0x14c>
 8007dee:	6923      	ldr	r3, [r4, #16]
 8007df0:	6861      	ldr	r1, [r4, #4]
 8007df2:	4299      	cmp	r1, r3
 8007df4:	bfde      	ittt	le
 8007df6:	2330      	movle	r3, #48	; 0x30
 8007df8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007dfc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e00:	1b92      	subs	r2, r2, r6
 8007e02:	6122      	str	r2, [r4, #16]
 8007e04:	f8cd a000 	str.w	sl, [sp]
 8007e08:	464b      	mov	r3, r9
 8007e0a:	aa03      	add	r2, sp, #12
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	4640      	mov	r0, r8
 8007e10:	f7ff fee2 	bl	8007bd8 <_printf_common>
 8007e14:	3001      	adds	r0, #1
 8007e16:	d14c      	bne.n	8007eb2 <_printf_i+0x1fe>
 8007e18:	f04f 30ff 	mov.w	r0, #4294967295
 8007e1c:	b004      	add	sp, #16
 8007e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e22:	4835      	ldr	r0, [pc, #212]	; (8007ef8 <_printf_i+0x244>)
 8007e24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007e28:	6823      	ldr	r3, [r4, #0]
 8007e2a:	680e      	ldr	r6, [r1, #0]
 8007e2c:	061f      	lsls	r7, r3, #24
 8007e2e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007e32:	600e      	str	r6, [r1, #0]
 8007e34:	d514      	bpl.n	8007e60 <_printf_i+0x1ac>
 8007e36:	07d9      	lsls	r1, r3, #31
 8007e38:	bf44      	itt	mi
 8007e3a:	f043 0320 	orrmi.w	r3, r3, #32
 8007e3e:	6023      	strmi	r3, [r4, #0]
 8007e40:	b91d      	cbnz	r5, 8007e4a <_printf_i+0x196>
 8007e42:	6823      	ldr	r3, [r4, #0]
 8007e44:	f023 0320 	bic.w	r3, r3, #32
 8007e48:	6023      	str	r3, [r4, #0]
 8007e4a:	2310      	movs	r3, #16
 8007e4c:	e7b0      	b.n	8007db0 <_printf_i+0xfc>
 8007e4e:	6823      	ldr	r3, [r4, #0]
 8007e50:	f043 0320 	orr.w	r3, r3, #32
 8007e54:	6023      	str	r3, [r4, #0]
 8007e56:	2378      	movs	r3, #120	; 0x78
 8007e58:	4828      	ldr	r0, [pc, #160]	; (8007efc <_printf_i+0x248>)
 8007e5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e5e:	e7e3      	b.n	8007e28 <_printf_i+0x174>
 8007e60:	065e      	lsls	r6, r3, #25
 8007e62:	bf48      	it	mi
 8007e64:	b2ad      	uxthmi	r5, r5
 8007e66:	e7e6      	b.n	8007e36 <_printf_i+0x182>
 8007e68:	4616      	mov	r6, r2
 8007e6a:	e7bb      	b.n	8007de4 <_printf_i+0x130>
 8007e6c:	680b      	ldr	r3, [r1, #0]
 8007e6e:	6826      	ldr	r6, [r4, #0]
 8007e70:	6960      	ldr	r0, [r4, #20]
 8007e72:	1d1d      	adds	r5, r3, #4
 8007e74:	600d      	str	r5, [r1, #0]
 8007e76:	0635      	lsls	r5, r6, #24
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	d501      	bpl.n	8007e80 <_printf_i+0x1cc>
 8007e7c:	6018      	str	r0, [r3, #0]
 8007e7e:	e002      	b.n	8007e86 <_printf_i+0x1d2>
 8007e80:	0671      	lsls	r1, r6, #25
 8007e82:	d5fb      	bpl.n	8007e7c <_printf_i+0x1c8>
 8007e84:	8018      	strh	r0, [r3, #0]
 8007e86:	2300      	movs	r3, #0
 8007e88:	6123      	str	r3, [r4, #16]
 8007e8a:	4616      	mov	r6, r2
 8007e8c:	e7ba      	b.n	8007e04 <_printf_i+0x150>
 8007e8e:	680b      	ldr	r3, [r1, #0]
 8007e90:	1d1a      	adds	r2, r3, #4
 8007e92:	600a      	str	r2, [r1, #0]
 8007e94:	681e      	ldr	r6, [r3, #0]
 8007e96:	6862      	ldr	r2, [r4, #4]
 8007e98:	2100      	movs	r1, #0
 8007e9a:	4630      	mov	r0, r6
 8007e9c:	f7f8 f9c0 	bl	8000220 <memchr>
 8007ea0:	b108      	cbz	r0, 8007ea6 <_printf_i+0x1f2>
 8007ea2:	1b80      	subs	r0, r0, r6
 8007ea4:	6060      	str	r0, [r4, #4]
 8007ea6:	6863      	ldr	r3, [r4, #4]
 8007ea8:	6123      	str	r3, [r4, #16]
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eb0:	e7a8      	b.n	8007e04 <_printf_i+0x150>
 8007eb2:	6923      	ldr	r3, [r4, #16]
 8007eb4:	4632      	mov	r2, r6
 8007eb6:	4649      	mov	r1, r9
 8007eb8:	4640      	mov	r0, r8
 8007eba:	47d0      	blx	sl
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	d0ab      	beq.n	8007e18 <_printf_i+0x164>
 8007ec0:	6823      	ldr	r3, [r4, #0]
 8007ec2:	079b      	lsls	r3, r3, #30
 8007ec4:	d413      	bmi.n	8007eee <_printf_i+0x23a>
 8007ec6:	68e0      	ldr	r0, [r4, #12]
 8007ec8:	9b03      	ldr	r3, [sp, #12]
 8007eca:	4298      	cmp	r0, r3
 8007ecc:	bfb8      	it	lt
 8007ece:	4618      	movlt	r0, r3
 8007ed0:	e7a4      	b.n	8007e1c <_printf_i+0x168>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	4632      	mov	r2, r6
 8007ed6:	4649      	mov	r1, r9
 8007ed8:	4640      	mov	r0, r8
 8007eda:	47d0      	blx	sl
 8007edc:	3001      	adds	r0, #1
 8007ede:	d09b      	beq.n	8007e18 <_printf_i+0x164>
 8007ee0:	3501      	adds	r5, #1
 8007ee2:	68e3      	ldr	r3, [r4, #12]
 8007ee4:	9903      	ldr	r1, [sp, #12]
 8007ee6:	1a5b      	subs	r3, r3, r1
 8007ee8:	42ab      	cmp	r3, r5
 8007eea:	dcf2      	bgt.n	8007ed2 <_printf_i+0x21e>
 8007eec:	e7eb      	b.n	8007ec6 <_printf_i+0x212>
 8007eee:	2500      	movs	r5, #0
 8007ef0:	f104 0619 	add.w	r6, r4, #25
 8007ef4:	e7f5      	b.n	8007ee2 <_printf_i+0x22e>
 8007ef6:	bf00      	nop
 8007ef8:	08008833 	.word	0x08008833
 8007efc:	08008844 	.word	0x08008844

08007f00 <memcpy>:
 8007f00:	440a      	add	r2, r1
 8007f02:	4291      	cmp	r1, r2
 8007f04:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f08:	d100      	bne.n	8007f0c <memcpy+0xc>
 8007f0a:	4770      	bx	lr
 8007f0c:	b510      	push	{r4, lr}
 8007f0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f16:	4291      	cmp	r1, r2
 8007f18:	d1f9      	bne.n	8007f0e <memcpy+0xe>
 8007f1a:	bd10      	pop	{r4, pc}

08007f1c <memmove>:
 8007f1c:	4288      	cmp	r0, r1
 8007f1e:	b510      	push	{r4, lr}
 8007f20:	eb01 0402 	add.w	r4, r1, r2
 8007f24:	d902      	bls.n	8007f2c <memmove+0x10>
 8007f26:	4284      	cmp	r4, r0
 8007f28:	4623      	mov	r3, r4
 8007f2a:	d807      	bhi.n	8007f3c <memmove+0x20>
 8007f2c:	1e43      	subs	r3, r0, #1
 8007f2e:	42a1      	cmp	r1, r4
 8007f30:	d008      	beq.n	8007f44 <memmove+0x28>
 8007f32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f3a:	e7f8      	b.n	8007f2e <memmove+0x12>
 8007f3c:	4402      	add	r2, r0
 8007f3e:	4601      	mov	r1, r0
 8007f40:	428a      	cmp	r2, r1
 8007f42:	d100      	bne.n	8007f46 <memmove+0x2a>
 8007f44:	bd10      	pop	{r4, pc}
 8007f46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f4e:	e7f7      	b.n	8007f40 <memmove+0x24>

08007f50 <_free_r>:
 8007f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f52:	2900      	cmp	r1, #0
 8007f54:	d048      	beq.n	8007fe8 <_free_r+0x98>
 8007f56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f5a:	9001      	str	r0, [sp, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f1a1 0404 	sub.w	r4, r1, #4
 8007f62:	bfb8      	it	lt
 8007f64:	18e4      	addlt	r4, r4, r3
 8007f66:	f000 f8d3 	bl	8008110 <__malloc_lock>
 8007f6a:	4a20      	ldr	r2, [pc, #128]	; (8007fec <_free_r+0x9c>)
 8007f6c:	9801      	ldr	r0, [sp, #4]
 8007f6e:	6813      	ldr	r3, [r2, #0]
 8007f70:	4615      	mov	r5, r2
 8007f72:	b933      	cbnz	r3, 8007f82 <_free_r+0x32>
 8007f74:	6063      	str	r3, [r4, #4]
 8007f76:	6014      	str	r4, [r2, #0]
 8007f78:	b003      	add	sp, #12
 8007f7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f7e:	f000 b8cd 	b.w	800811c <__malloc_unlock>
 8007f82:	42a3      	cmp	r3, r4
 8007f84:	d90b      	bls.n	8007f9e <_free_r+0x4e>
 8007f86:	6821      	ldr	r1, [r4, #0]
 8007f88:	1862      	adds	r2, r4, r1
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	bf04      	itt	eq
 8007f8e:	681a      	ldreq	r2, [r3, #0]
 8007f90:	685b      	ldreq	r3, [r3, #4]
 8007f92:	6063      	str	r3, [r4, #4]
 8007f94:	bf04      	itt	eq
 8007f96:	1852      	addeq	r2, r2, r1
 8007f98:	6022      	streq	r2, [r4, #0]
 8007f9a:	602c      	str	r4, [r5, #0]
 8007f9c:	e7ec      	b.n	8007f78 <_free_r+0x28>
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	b10b      	cbz	r3, 8007fa8 <_free_r+0x58>
 8007fa4:	42a3      	cmp	r3, r4
 8007fa6:	d9fa      	bls.n	8007f9e <_free_r+0x4e>
 8007fa8:	6811      	ldr	r1, [r2, #0]
 8007faa:	1855      	adds	r5, r2, r1
 8007fac:	42a5      	cmp	r5, r4
 8007fae:	d10b      	bne.n	8007fc8 <_free_r+0x78>
 8007fb0:	6824      	ldr	r4, [r4, #0]
 8007fb2:	4421      	add	r1, r4
 8007fb4:	1854      	adds	r4, r2, r1
 8007fb6:	42a3      	cmp	r3, r4
 8007fb8:	6011      	str	r1, [r2, #0]
 8007fba:	d1dd      	bne.n	8007f78 <_free_r+0x28>
 8007fbc:	681c      	ldr	r4, [r3, #0]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	6053      	str	r3, [r2, #4]
 8007fc2:	4421      	add	r1, r4
 8007fc4:	6011      	str	r1, [r2, #0]
 8007fc6:	e7d7      	b.n	8007f78 <_free_r+0x28>
 8007fc8:	d902      	bls.n	8007fd0 <_free_r+0x80>
 8007fca:	230c      	movs	r3, #12
 8007fcc:	6003      	str	r3, [r0, #0]
 8007fce:	e7d3      	b.n	8007f78 <_free_r+0x28>
 8007fd0:	6825      	ldr	r5, [r4, #0]
 8007fd2:	1961      	adds	r1, r4, r5
 8007fd4:	428b      	cmp	r3, r1
 8007fd6:	bf04      	itt	eq
 8007fd8:	6819      	ldreq	r1, [r3, #0]
 8007fda:	685b      	ldreq	r3, [r3, #4]
 8007fdc:	6063      	str	r3, [r4, #4]
 8007fde:	bf04      	itt	eq
 8007fe0:	1949      	addeq	r1, r1, r5
 8007fe2:	6021      	streq	r1, [r4, #0]
 8007fe4:	6054      	str	r4, [r2, #4]
 8007fe6:	e7c7      	b.n	8007f78 <_free_r+0x28>
 8007fe8:	b003      	add	sp, #12
 8007fea:	bd30      	pop	{r4, r5, pc}
 8007fec:	200007ac 	.word	0x200007ac

08007ff0 <_malloc_r>:
 8007ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff2:	1ccd      	adds	r5, r1, #3
 8007ff4:	f025 0503 	bic.w	r5, r5, #3
 8007ff8:	3508      	adds	r5, #8
 8007ffa:	2d0c      	cmp	r5, #12
 8007ffc:	bf38      	it	cc
 8007ffe:	250c      	movcc	r5, #12
 8008000:	2d00      	cmp	r5, #0
 8008002:	4606      	mov	r6, r0
 8008004:	db01      	blt.n	800800a <_malloc_r+0x1a>
 8008006:	42a9      	cmp	r1, r5
 8008008:	d903      	bls.n	8008012 <_malloc_r+0x22>
 800800a:	230c      	movs	r3, #12
 800800c:	6033      	str	r3, [r6, #0]
 800800e:	2000      	movs	r0, #0
 8008010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008012:	f000 f87d 	bl	8008110 <__malloc_lock>
 8008016:	4921      	ldr	r1, [pc, #132]	; (800809c <_malloc_r+0xac>)
 8008018:	680a      	ldr	r2, [r1, #0]
 800801a:	4614      	mov	r4, r2
 800801c:	b99c      	cbnz	r4, 8008046 <_malloc_r+0x56>
 800801e:	4f20      	ldr	r7, [pc, #128]	; (80080a0 <_malloc_r+0xb0>)
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	b923      	cbnz	r3, 800802e <_malloc_r+0x3e>
 8008024:	4621      	mov	r1, r4
 8008026:	4630      	mov	r0, r6
 8008028:	f000 f862 	bl	80080f0 <_sbrk_r>
 800802c:	6038      	str	r0, [r7, #0]
 800802e:	4629      	mov	r1, r5
 8008030:	4630      	mov	r0, r6
 8008032:	f000 f85d 	bl	80080f0 <_sbrk_r>
 8008036:	1c43      	adds	r3, r0, #1
 8008038:	d123      	bne.n	8008082 <_malloc_r+0x92>
 800803a:	230c      	movs	r3, #12
 800803c:	6033      	str	r3, [r6, #0]
 800803e:	4630      	mov	r0, r6
 8008040:	f000 f86c 	bl	800811c <__malloc_unlock>
 8008044:	e7e3      	b.n	800800e <_malloc_r+0x1e>
 8008046:	6823      	ldr	r3, [r4, #0]
 8008048:	1b5b      	subs	r3, r3, r5
 800804a:	d417      	bmi.n	800807c <_malloc_r+0x8c>
 800804c:	2b0b      	cmp	r3, #11
 800804e:	d903      	bls.n	8008058 <_malloc_r+0x68>
 8008050:	6023      	str	r3, [r4, #0]
 8008052:	441c      	add	r4, r3
 8008054:	6025      	str	r5, [r4, #0]
 8008056:	e004      	b.n	8008062 <_malloc_r+0x72>
 8008058:	6863      	ldr	r3, [r4, #4]
 800805a:	42a2      	cmp	r2, r4
 800805c:	bf0c      	ite	eq
 800805e:	600b      	streq	r3, [r1, #0]
 8008060:	6053      	strne	r3, [r2, #4]
 8008062:	4630      	mov	r0, r6
 8008064:	f000 f85a 	bl	800811c <__malloc_unlock>
 8008068:	f104 000b 	add.w	r0, r4, #11
 800806c:	1d23      	adds	r3, r4, #4
 800806e:	f020 0007 	bic.w	r0, r0, #7
 8008072:	1ac2      	subs	r2, r0, r3
 8008074:	d0cc      	beq.n	8008010 <_malloc_r+0x20>
 8008076:	1a1b      	subs	r3, r3, r0
 8008078:	50a3      	str	r3, [r4, r2]
 800807a:	e7c9      	b.n	8008010 <_malloc_r+0x20>
 800807c:	4622      	mov	r2, r4
 800807e:	6864      	ldr	r4, [r4, #4]
 8008080:	e7cc      	b.n	800801c <_malloc_r+0x2c>
 8008082:	1cc4      	adds	r4, r0, #3
 8008084:	f024 0403 	bic.w	r4, r4, #3
 8008088:	42a0      	cmp	r0, r4
 800808a:	d0e3      	beq.n	8008054 <_malloc_r+0x64>
 800808c:	1a21      	subs	r1, r4, r0
 800808e:	4630      	mov	r0, r6
 8008090:	f000 f82e 	bl	80080f0 <_sbrk_r>
 8008094:	3001      	adds	r0, #1
 8008096:	d1dd      	bne.n	8008054 <_malloc_r+0x64>
 8008098:	e7cf      	b.n	800803a <_malloc_r+0x4a>
 800809a:	bf00      	nop
 800809c:	200007ac 	.word	0x200007ac
 80080a0:	200007b0 	.word	0x200007b0

080080a4 <_realloc_r>:
 80080a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a6:	4607      	mov	r7, r0
 80080a8:	4614      	mov	r4, r2
 80080aa:	460e      	mov	r6, r1
 80080ac:	b921      	cbnz	r1, 80080b8 <_realloc_r+0x14>
 80080ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80080b2:	4611      	mov	r1, r2
 80080b4:	f7ff bf9c 	b.w	8007ff0 <_malloc_r>
 80080b8:	b922      	cbnz	r2, 80080c4 <_realloc_r+0x20>
 80080ba:	f7ff ff49 	bl	8007f50 <_free_r>
 80080be:	4625      	mov	r5, r4
 80080c0:	4628      	mov	r0, r5
 80080c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080c4:	f000 f830 	bl	8008128 <_malloc_usable_size_r>
 80080c8:	42a0      	cmp	r0, r4
 80080ca:	d20f      	bcs.n	80080ec <_realloc_r+0x48>
 80080cc:	4621      	mov	r1, r4
 80080ce:	4638      	mov	r0, r7
 80080d0:	f7ff ff8e 	bl	8007ff0 <_malloc_r>
 80080d4:	4605      	mov	r5, r0
 80080d6:	2800      	cmp	r0, #0
 80080d8:	d0f2      	beq.n	80080c0 <_realloc_r+0x1c>
 80080da:	4631      	mov	r1, r6
 80080dc:	4622      	mov	r2, r4
 80080de:	f7ff ff0f 	bl	8007f00 <memcpy>
 80080e2:	4631      	mov	r1, r6
 80080e4:	4638      	mov	r0, r7
 80080e6:	f7ff ff33 	bl	8007f50 <_free_r>
 80080ea:	e7e9      	b.n	80080c0 <_realloc_r+0x1c>
 80080ec:	4635      	mov	r5, r6
 80080ee:	e7e7      	b.n	80080c0 <_realloc_r+0x1c>

080080f0 <_sbrk_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	4d06      	ldr	r5, [pc, #24]	; (800810c <_sbrk_r+0x1c>)
 80080f4:	2300      	movs	r3, #0
 80080f6:	4604      	mov	r4, r0
 80080f8:	4608      	mov	r0, r1
 80080fa:	602b      	str	r3, [r5, #0]
 80080fc:	f7fb f8aa 	bl	8003254 <_sbrk>
 8008100:	1c43      	adds	r3, r0, #1
 8008102:	d102      	bne.n	800810a <_sbrk_r+0x1a>
 8008104:	682b      	ldr	r3, [r5, #0]
 8008106:	b103      	cbz	r3, 800810a <_sbrk_r+0x1a>
 8008108:	6023      	str	r3, [r4, #0]
 800810a:	bd38      	pop	{r3, r4, r5, pc}
 800810c:	20000b14 	.word	0x20000b14

08008110 <__malloc_lock>:
 8008110:	4801      	ldr	r0, [pc, #4]	; (8008118 <__malloc_lock+0x8>)
 8008112:	f000 b811 	b.w	8008138 <__retarget_lock_acquire_recursive>
 8008116:	bf00      	nop
 8008118:	20000b1c 	.word	0x20000b1c

0800811c <__malloc_unlock>:
 800811c:	4801      	ldr	r0, [pc, #4]	; (8008124 <__malloc_unlock+0x8>)
 800811e:	f000 b80c 	b.w	800813a <__retarget_lock_release_recursive>
 8008122:	bf00      	nop
 8008124:	20000b1c 	.word	0x20000b1c

08008128 <_malloc_usable_size_r>:
 8008128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800812c:	1f18      	subs	r0, r3, #4
 800812e:	2b00      	cmp	r3, #0
 8008130:	bfbc      	itt	lt
 8008132:	580b      	ldrlt	r3, [r1, r0]
 8008134:	18c0      	addlt	r0, r0, r3
 8008136:	4770      	bx	lr

08008138 <__retarget_lock_acquire_recursive>:
 8008138:	4770      	bx	lr

0800813a <__retarget_lock_release_recursive>:
 800813a:	4770      	bx	lr
 800813c:	0000      	movs	r0, r0
	...

08008140 <log>:
 8008140:	b538      	push	{r3, r4, r5, lr}
 8008142:	ed2d 8b02 	vpush	{d8}
 8008146:	ec55 4b10 	vmov	r4, r5, d0
 800814a:	f000 f841 	bl	80081d0 <__ieee754_log>
 800814e:	4b1e      	ldr	r3, [pc, #120]	; (80081c8 <log+0x88>)
 8008150:	eeb0 8a40 	vmov.f32	s16, s0
 8008154:	eef0 8a60 	vmov.f32	s17, s1
 8008158:	f993 3000 	ldrsb.w	r3, [r3]
 800815c:	3301      	adds	r3, #1
 800815e:	d01a      	beq.n	8008196 <log+0x56>
 8008160:	4622      	mov	r2, r4
 8008162:	462b      	mov	r3, r5
 8008164:	4620      	mov	r0, r4
 8008166:	4629      	mov	r1, r5
 8008168:	f7f8 fd00 	bl	8000b6c <__aeabi_dcmpun>
 800816c:	b998      	cbnz	r0, 8008196 <log+0x56>
 800816e:	2200      	movs	r2, #0
 8008170:	2300      	movs	r3, #0
 8008172:	4620      	mov	r0, r4
 8008174:	4629      	mov	r1, r5
 8008176:	f7f8 fcef 	bl	8000b58 <__aeabi_dcmpgt>
 800817a:	b960      	cbnz	r0, 8008196 <log+0x56>
 800817c:	2200      	movs	r2, #0
 800817e:	2300      	movs	r3, #0
 8008180:	4620      	mov	r0, r4
 8008182:	4629      	mov	r1, r5
 8008184:	f7f8 fcc0 	bl	8000b08 <__aeabi_dcmpeq>
 8008188:	b160      	cbz	r0, 80081a4 <log+0x64>
 800818a:	f7ff fb77 	bl	800787c <__errno>
 800818e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 80081c0 <log+0x80>
 8008192:	2322      	movs	r3, #34	; 0x22
 8008194:	6003      	str	r3, [r0, #0]
 8008196:	eeb0 0a48 	vmov.f32	s0, s16
 800819a:	eef0 0a68 	vmov.f32	s1, s17
 800819e:	ecbd 8b02 	vpop	{d8}
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
 80081a4:	f7ff fb6a 	bl	800787c <__errno>
 80081a8:	ecbd 8b02 	vpop	{d8}
 80081ac:	2321      	movs	r3, #33	; 0x21
 80081ae:	6003      	str	r3, [r0, #0]
 80081b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081b4:	4805      	ldr	r0, [pc, #20]	; (80081cc <log+0x8c>)
 80081b6:	f000 b9c7 	b.w	8008548 <nan>
 80081ba:	bf00      	nop
 80081bc:	f3af 8000 	nop.w
 80081c0:	00000000 	.word	0x00000000
 80081c4:	fff00000 	.word	0xfff00000
 80081c8:	2000076c 	.word	0x2000076c
 80081cc:	08008827 	.word	0x08008827

080081d0 <__ieee754_log>:
 80081d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d4:	ec51 0b10 	vmov	r0, r1, d0
 80081d8:	ed2d 8b04 	vpush	{d8-d9}
 80081dc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e0:	b083      	sub	sp, #12
 80081e2:	460d      	mov	r5, r1
 80081e4:	da29      	bge.n	800823a <__ieee754_log+0x6a>
 80081e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80081ea:	4303      	orrs	r3, r0
 80081ec:	ee10 2a10 	vmov	r2, s0
 80081f0:	d10c      	bne.n	800820c <__ieee754_log+0x3c>
 80081f2:	49cf      	ldr	r1, [pc, #828]	; (8008530 <__ieee754_log+0x360>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	2300      	movs	r3, #0
 80081f8:	2000      	movs	r0, #0
 80081fa:	f7f8 fb47 	bl	800088c <__aeabi_ddiv>
 80081fe:	ec41 0b10 	vmov	d0, r0, r1
 8008202:	b003      	add	sp, #12
 8008204:	ecbd 8b04 	vpop	{d8-d9}
 8008208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800820c:	2900      	cmp	r1, #0
 800820e:	da05      	bge.n	800821c <__ieee754_log+0x4c>
 8008210:	460b      	mov	r3, r1
 8008212:	f7f8 f859 	bl	80002c8 <__aeabi_dsub>
 8008216:	2200      	movs	r2, #0
 8008218:	2300      	movs	r3, #0
 800821a:	e7ee      	b.n	80081fa <__ieee754_log+0x2a>
 800821c:	4bc5      	ldr	r3, [pc, #788]	; (8008534 <__ieee754_log+0x364>)
 800821e:	2200      	movs	r2, #0
 8008220:	f7f8 fa0a 	bl	8000638 <__aeabi_dmul>
 8008224:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8008228:	460d      	mov	r5, r1
 800822a:	4ac3      	ldr	r2, [pc, #780]	; (8008538 <__ieee754_log+0x368>)
 800822c:	4295      	cmp	r5, r2
 800822e:	dd06      	ble.n	800823e <__ieee754_log+0x6e>
 8008230:	4602      	mov	r2, r0
 8008232:	460b      	mov	r3, r1
 8008234:	f7f8 f84a 	bl	80002cc <__adddf3>
 8008238:	e7e1      	b.n	80081fe <__ieee754_log+0x2e>
 800823a:	2300      	movs	r3, #0
 800823c:	e7f5      	b.n	800822a <__ieee754_log+0x5a>
 800823e:	152c      	asrs	r4, r5, #20
 8008240:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008244:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008248:	441c      	add	r4, r3
 800824a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800824e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8008252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008256:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800825a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800825e:	ea42 0105 	orr.w	r1, r2, r5
 8008262:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8008266:	2200      	movs	r2, #0
 8008268:	4bb4      	ldr	r3, [pc, #720]	; (800853c <__ieee754_log+0x36c>)
 800826a:	f7f8 f82d 	bl	80002c8 <__aeabi_dsub>
 800826e:	1cab      	adds	r3, r5, #2
 8008270:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008274:	2b02      	cmp	r3, #2
 8008276:	4682      	mov	sl, r0
 8008278:	468b      	mov	fp, r1
 800827a:	f04f 0200 	mov.w	r2, #0
 800827e:	dc53      	bgt.n	8008328 <__ieee754_log+0x158>
 8008280:	2300      	movs	r3, #0
 8008282:	f7f8 fc41 	bl	8000b08 <__aeabi_dcmpeq>
 8008286:	b1d0      	cbz	r0, 80082be <__ieee754_log+0xee>
 8008288:	2c00      	cmp	r4, #0
 800828a:	f000 8122 	beq.w	80084d2 <__ieee754_log+0x302>
 800828e:	4620      	mov	r0, r4
 8008290:	f7f8 f968 	bl	8000564 <__aeabi_i2d>
 8008294:	a390      	add	r3, pc, #576	; (adr r3, 80084d8 <__ieee754_log+0x308>)
 8008296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829a:	4606      	mov	r6, r0
 800829c:	460f      	mov	r7, r1
 800829e:	f7f8 f9cb 	bl	8000638 <__aeabi_dmul>
 80082a2:	a38f      	add	r3, pc, #572	; (adr r3, 80084e0 <__ieee754_log+0x310>)
 80082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a8:	4604      	mov	r4, r0
 80082aa:	460d      	mov	r5, r1
 80082ac:	4630      	mov	r0, r6
 80082ae:	4639      	mov	r1, r7
 80082b0:	f7f8 f9c2 	bl	8000638 <__aeabi_dmul>
 80082b4:	4602      	mov	r2, r0
 80082b6:	460b      	mov	r3, r1
 80082b8:	4620      	mov	r0, r4
 80082ba:	4629      	mov	r1, r5
 80082bc:	e7ba      	b.n	8008234 <__ieee754_log+0x64>
 80082be:	a38a      	add	r3, pc, #552	; (adr r3, 80084e8 <__ieee754_log+0x318>)
 80082c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c4:	4650      	mov	r0, sl
 80082c6:	4659      	mov	r1, fp
 80082c8:	f7f8 f9b6 	bl	8000638 <__aeabi_dmul>
 80082cc:	4602      	mov	r2, r0
 80082ce:	460b      	mov	r3, r1
 80082d0:	2000      	movs	r0, #0
 80082d2:	499b      	ldr	r1, [pc, #620]	; (8008540 <__ieee754_log+0x370>)
 80082d4:	f7f7 fff8 	bl	80002c8 <__aeabi_dsub>
 80082d8:	4652      	mov	r2, sl
 80082da:	4606      	mov	r6, r0
 80082dc:	460f      	mov	r7, r1
 80082de:	465b      	mov	r3, fp
 80082e0:	4650      	mov	r0, sl
 80082e2:	4659      	mov	r1, fp
 80082e4:	f7f8 f9a8 	bl	8000638 <__aeabi_dmul>
 80082e8:	4602      	mov	r2, r0
 80082ea:	460b      	mov	r3, r1
 80082ec:	4630      	mov	r0, r6
 80082ee:	4639      	mov	r1, r7
 80082f0:	f7f8 f9a2 	bl	8000638 <__aeabi_dmul>
 80082f4:	4606      	mov	r6, r0
 80082f6:	460f      	mov	r7, r1
 80082f8:	b914      	cbnz	r4, 8008300 <__ieee754_log+0x130>
 80082fa:	4632      	mov	r2, r6
 80082fc:	463b      	mov	r3, r7
 80082fe:	e0a2      	b.n	8008446 <__ieee754_log+0x276>
 8008300:	4620      	mov	r0, r4
 8008302:	f7f8 f92f 	bl	8000564 <__aeabi_i2d>
 8008306:	a374      	add	r3, pc, #464	; (adr r3, 80084d8 <__ieee754_log+0x308>)
 8008308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830c:	4680      	mov	r8, r0
 800830e:	4689      	mov	r9, r1
 8008310:	f7f8 f992 	bl	8000638 <__aeabi_dmul>
 8008314:	a372      	add	r3, pc, #456	; (adr r3, 80084e0 <__ieee754_log+0x310>)
 8008316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831a:	4604      	mov	r4, r0
 800831c:	460d      	mov	r5, r1
 800831e:	4640      	mov	r0, r8
 8008320:	4649      	mov	r1, r9
 8008322:	f7f8 f989 	bl	8000638 <__aeabi_dmul>
 8008326:	e0a7      	b.n	8008478 <__ieee754_log+0x2a8>
 8008328:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800832c:	f7f7 ffce 	bl	80002cc <__adddf3>
 8008330:	4602      	mov	r2, r0
 8008332:	460b      	mov	r3, r1
 8008334:	4650      	mov	r0, sl
 8008336:	4659      	mov	r1, fp
 8008338:	f7f8 faa8 	bl	800088c <__aeabi_ddiv>
 800833c:	ec41 0b18 	vmov	d8, r0, r1
 8008340:	4620      	mov	r0, r4
 8008342:	f7f8 f90f 	bl	8000564 <__aeabi_i2d>
 8008346:	ec53 2b18 	vmov	r2, r3, d8
 800834a:	ec41 0b19 	vmov	d9, r0, r1
 800834e:	ec51 0b18 	vmov	r0, r1, d8
 8008352:	f7f8 f971 	bl	8000638 <__aeabi_dmul>
 8008356:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800835a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800835e:	9301      	str	r3, [sp, #4]
 8008360:	4602      	mov	r2, r0
 8008362:	460b      	mov	r3, r1
 8008364:	4680      	mov	r8, r0
 8008366:	4689      	mov	r9, r1
 8008368:	f7f8 f966 	bl	8000638 <__aeabi_dmul>
 800836c:	a360      	add	r3, pc, #384	; (adr r3, 80084f0 <__ieee754_log+0x320>)
 800836e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008372:	4606      	mov	r6, r0
 8008374:	460f      	mov	r7, r1
 8008376:	f7f8 f95f 	bl	8000638 <__aeabi_dmul>
 800837a:	a35f      	add	r3, pc, #380	; (adr r3, 80084f8 <__ieee754_log+0x328>)
 800837c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008380:	f7f7 ffa4 	bl	80002cc <__adddf3>
 8008384:	4632      	mov	r2, r6
 8008386:	463b      	mov	r3, r7
 8008388:	f7f8 f956 	bl	8000638 <__aeabi_dmul>
 800838c:	a35c      	add	r3, pc, #368	; (adr r3, 8008500 <__ieee754_log+0x330>)
 800838e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008392:	f7f7 ff9b 	bl	80002cc <__adddf3>
 8008396:	4632      	mov	r2, r6
 8008398:	463b      	mov	r3, r7
 800839a:	f7f8 f94d 	bl	8000638 <__aeabi_dmul>
 800839e:	a35a      	add	r3, pc, #360	; (adr r3, 8008508 <__ieee754_log+0x338>)
 80083a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a4:	f7f7 ff92 	bl	80002cc <__adddf3>
 80083a8:	4642      	mov	r2, r8
 80083aa:	464b      	mov	r3, r9
 80083ac:	f7f8 f944 	bl	8000638 <__aeabi_dmul>
 80083b0:	a357      	add	r3, pc, #348	; (adr r3, 8008510 <__ieee754_log+0x340>)
 80083b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b6:	4680      	mov	r8, r0
 80083b8:	4689      	mov	r9, r1
 80083ba:	4630      	mov	r0, r6
 80083bc:	4639      	mov	r1, r7
 80083be:	f7f8 f93b 	bl	8000638 <__aeabi_dmul>
 80083c2:	a355      	add	r3, pc, #340	; (adr r3, 8008518 <__ieee754_log+0x348>)
 80083c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c8:	f7f7 ff80 	bl	80002cc <__adddf3>
 80083cc:	4632      	mov	r2, r6
 80083ce:	463b      	mov	r3, r7
 80083d0:	f7f8 f932 	bl	8000638 <__aeabi_dmul>
 80083d4:	a352      	add	r3, pc, #328	; (adr r3, 8008520 <__ieee754_log+0x350>)
 80083d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083da:	f7f7 ff77 	bl	80002cc <__adddf3>
 80083de:	4632      	mov	r2, r6
 80083e0:	463b      	mov	r3, r7
 80083e2:	f7f8 f929 	bl	8000638 <__aeabi_dmul>
 80083e6:	460b      	mov	r3, r1
 80083e8:	4602      	mov	r2, r0
 80083ea:	4649      	mov	r1, r9
 80083ec:	4640      	mov	r0, r8
 80083ee:	f7f7 ff6d 	bl	80002cc <__adddf3>
 80083f2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80083f6:	9b01      	ldr	r3, [sp, #4]
 80083f8:	3551      	adds	r5, #81	; 0x51
 80083fa:	431d      	orrs	r5, r3
 80083fc:	2d00      	cmp	r5, #0
 80083fe:	4680      	mov	r8, r0
 8008400:	4689      	mov	r9, r1
 8008402:	dd48      	ble.n	8008496 <__ieee754_log+0x2c6>
 8008404:	4b4e      	ldr	r3, [pc, #312]	; (8008540 <__ieee754_log+0x370>)
 8008406:	2200      	movs	r2, #0
 8008408:	4650      	mov	r0, sl
 800840a:	4659      	mov	r1, fp
 800840c:	f7f8 f914 	bl	8000638 <__aeabi_dmul>
 8008410:	4652      	mov	r2, sl
 8008412:	465b      	mov	r3, fp
 8008414:	f7f8 f910 	bl	8000638 <__aeabi_dmul>
 8008418:	4602      	mov	r2, r0
 800841a:	460b      	mov	r3, r1
 800841c:	4606      	mov	r6, r0
 800841e:	460f      	mov	r7, r1
 8008420:	4640      	mov	r0, r8
 8008422:	4649      	mov	r1, r9
 8008424:	f7f7 ff52 	bl	80002cc <__adddf3>
 8008428:	ec53 2b18 	vmov	r2, r3, d8
 800842c:	f7f8 f904 	bl	8000638 <__aeabi_dmul>
 8008430:	4680      	mov	r8, r0
 8008432:	4689      	mov	r9, r1
 8008434:	b964      	cbnz	r4, 8008450 <__ieee754_log+0x280>
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	4630      	mov	r0, r6
 800843c:	4639      	mov	r1, r7
 800843e:	f7f7 ff43 	bl	80002c8 <__aeabi_dsub>
 8008442:	4602      	mov	r2, r0
 8008444:	460b      	mov	r3, r1
 8008446:	4650      	mov	r0, sl
 8008448:	4659      	mov	r1, fp
 800844a:	f7f7 ff3d 	bl	80002c8 <__aeabi_dsub>
 800844e:	e6d6      	b.n	80081fe <__ieee754_log+0x2e>
 8008450:	a321      	add	r3, pc, #132	; (adr r3, 80084d8 <__ieee754_log+0x308>)
 8008452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008456:	ec51 0b19 	vmov	r0, r1, d9
 800845a:	f7f8 f8ed 	bl	8000638 <__aeabi_dmul>
 800845e:	a320      	add	r3, pc, #128	; (adr r3, 80084e0 <__ieee754_log+0x310>)
 8008460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008464:	4604      	mov	r4, r0
 8008466:	460d      	mov	r5, r1
 8008468:	ec51 0b19 	vmov	r0, r1, d9
 800846c:	f7f8 f8e4 	bl	8000638 <__aeabi_dmul>
 8008470:	4642      	mov	r2, r8
 8008472:	464b      	mov	r3, r9
 8008474:	f7f7 ff2a 	bl	80002cc <__adddf3>
 8008478:	4602      	mov	r2, r0
 800847a:	460b      	mov	r3, r1
 800847c:	4630      	mov	r0, r6
 800847e:	4639      	mov	r1, r7
 8008480:	f7f7 ff22 	bl	80002c8 <__aeabi_dsub>
 8008484:	4652      	mov	r2, sl
 8008486:	465b      	mov	r3, fp
 8008488:	f7f7 ff1e 	bl	80002c8 <__aeabi_dsub>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	4620      	mov	r0, r4
 8008492:	4629      	mov	r1, r5
 8008494:	e7d9      	b.n	800844a <__ieee754_log+0x27a>
 8008496:	4602      	mov	r2, r0
 8008498:	460b      	mov	r3, r1
 800849a:	4650      	mov	r0, sl
 800849c:	4659      	mov	r1, fp
 800849e:	f7f7 ff13 	bl	80002c8 <__aeabi_dsub>
 80084a2:	ec53 2b18 	vmov	r2, r3, d8
 80084a6:	f7f8 f8c7 	bl	8000638 <__aeabi_dmul>
 80084aa:	4606      	mov	r6, r0
 80084ac:	460f      	mov	r7, r1
 80084ae:	2c00      	cmp	r4, #0
 80084b0:	f43f af23 	beq.w	80082fa <__ieee754_log+0x12a>
 80084b4:	a308      	add	r3, pc, #32	; (adr r3, 80084d8 <__ieee754_log+0x308>)
 80084b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ba:	ec51 0b19 	vmov	r0, r1, d9
 80084be:	f7f8 f8bb 	bl	8000638 <__aeabi_dmul>
 80084c2:	a307      	add	r3, pc, #28	; (adr r3, 80084e0 <__ieee754_log+0x310>)
 80084c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c8:	4604      	mov	r4, r0
 80084ca:	460d      	mov	r5, r1
 80084cc:	ec51 0b19 	vmov	r0, r1, d9
 80084d0:	e727      	b.n	8008322 <__ieee754_log+0x152>
 80084d2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8008528 <__ieee754_log+0x358>
 80084d6:	e694      	b.n	8008202 <__ieee754_log+0x32>
 80084d8:	fee00000 	.word	0xfee00000
 80084dc:	3fe62e42 	.word	0x3fe62e42
 80084e0:	35793c76 	.word	0x35793c76
 80084e4:	3dea39ef 	.word	0x3dea39ef
 80084e8:	55555555 	.word	0x55555555
 80084ec:	3fd55555 	.word	0x3fd55555
 80084f0:	df3e5244 	.word	0xdf3e5244
 80084f4:	3fc2f112 	.word	0x3fc2f112
 80084f8:	96cb03de 	.word	0x96cb03de
 80084fc:	3fc74664 	.word	0x3fc74664
 8008500:	94229359 	.word	0x94229359
 8008504:	3fd24924 	.word	0x3fd24924
 8008508:	55555593 	.word	0x55555593
 800850c:	3fe55555 	.word	0x3fe55555
 8008510:	d078c69f 	.word	0xd078c69f
 8008514:	3fc39a09 	.word	0x3fc39a09
 8008518:	1d8e78af 	.word	0x1d8e78af
 800851c:	3fcc71c5 	.word	0x3fcc71c5
 8008520:	9997fa04 	.word	0x9997fa04
 8008524:	3fd99999 	.word	0x3fd99999
	...
 8008530:	c3500000 	.word	0xc3500000
 8008534:	43500000 	.word	0x43500000
 8008538:	7fefffff 	.word	0x7fefffff
 800853c:	3ff00000 	.word	0x3ff00000
 8008540:	3fe00000 	.word	0x3fe00000
 8008544:	00000000 	.word	0x00000000

08008548 <nan>:
 8008548:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008550 <nan+0x8>
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	00000000 	.word	0x00000000
 8008554:	7ff80000 	.word	0x7ff80000

08008558 <_init>:
 8008558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855a:	bf00      	nop
 800855c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800855e:	bc08      	pop	{r3}
 8008560:	469e      	mov	lr, r3
 8008562:	4770      	bx	lr

08008564 <_fini>:
 8008564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008566:	bf00      	nop
 8008568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800856a:	bc08      	pop	{r3}
 800856c:	469e      	mov	lr, r3
 800856e:	4770      	bx	lr
